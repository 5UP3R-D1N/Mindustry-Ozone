Atom.Reflect.Reflect -> a.a.a:
    Ozone.UI.OzoneMenu menu -> a
    java.lang.Object getField(java.lang.Class,java.lang.String,java.lang.Object) -> a
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object) -> b
    java.util.ArrayList findMethod(java.lang.Class,Atom.Struct.Filter,java.lang.Object) -> a
    java.util.ArrayList findDeclaredField(java.lang.Class,Atom.Struct.Filter,java.lang.Object) -> b
    boolean lambda$getMethod$1(java.lang.String,java.lang.reflect.Method) -> a
    boolean lambda$getField$0(java.lang.String,java.lang.reflect.Field) -> a
Atom.Struct.Filter -> a.b.a:
    boolean accept(java.lang.Object) -> accept
Atom.Struct.Queue -> a.b.b:
    int size -> a
    java.lang.Object[] values -> b
    int head -> c
    int tail -> d
    Atom.Struct.Queue$QueueIterable iterable -> e
    void <init>() -> <init>
    void <init>(int) -> <init>
    java.lang.Object removeIndex(int) -> a
    java.lang.Object get(int) -> b
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
Atom.Struct.Queue$QueueIterable -> a.b.c:
    Atom.Struct.Queue queue -> a
    boolean allowRemove -> b
    Atom.Struct.Queue$QueueIterable$QueueIterator iterator1 -> c
    Atom.Struct.Queue$QueueIterable$QueueIterator iterator2 -> d
    void <init>(Atom.Struct.Queue) -> <init>
    void <init>(Atom.Struct.Queue,boolean) -> <init>
    java.util.Iterator iterator() -> iterator
Atom.Struct.Queue$QueueIterable$QueueIterator -> a.b.d:
    int index -> a
    boolean done -> b
    Atom.Struct.Queue$QueueIterable this$0 -> c
    void <init>(Atom.Struct.Queue$QueueIterable) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
Atom.Time.Countdown -> a.c.a:
    java.lang.String result(long,java.util.concurrent.TimeUnit) -> a
    void <clinit>() -> <clinit>
Main.Ozone -> Main.Ozone:
    void <init>() -> <init>
    void init() -> init
    void loadContent() -> loadContent
Ozone.Commands.Commands -> b.a.a:
    java.util.HashMap commandsList -> a
    boolean init -> b
    boolean falseVote -> c
    void init() -> a
    boolean call(java.lang.String) -> a
    void help(java.util.ArrayList) -> a
    void move(java.util.ArrayList) -> b
    void DeceptionKick(java.util.ArrayList) -> c
    void tellUser(java.lang.String) -> b
    void lambda$DeceptionKick$1() -> b
    void lambda$move$0(long,java.lang.Void) -> a
    void <clinit>() -> <clinit>
Ozone.Commands.Commands$Command -> b.a.b:
    java.util.function.Consumer method -> a
    java.lang.String description -> b
    void <init>(java.util.function.Consumer,java.lang.String) -> <init>
Ozone.Commands.PlayerInterface -> b.a.c:
    boolean init -> a
    arc.struct.Queue taskQueue -> b
    void init() -> a
    void moveTo(int,int,java.util.function.Consumer) -> a
    void update() -> b
    void reset() -> c
    void <clinit>() -> <clinit>
Ozone.Commands.Task.Move -> b.a.a.a:
    arc.math.geom.Vec2 destPost -> a
    void <init>(int,int) -> <init>
    void <init>(arc.math.geom.Vec2) -> <init>
    boolean isCompleted() -> a
    void update() -> b
Ozone.Commands.Task.Task -> b.a.a.b:
    java.util.ArrayList onTaskCompleted -> a
    void <init>() -> <init>
    void onTaskCompleted(java.util.function.Consumer) -> a
    boolean isCompleted() -> a
    void update() -> b
Ozone.Interface -> b.a:
    arc.struct.ObjectMap bundle -> a
    void registerWords(java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
Ozone.Main -> b.b:
    void init() -> a
    void patch() -> b
Ozone.Main$1 -> b.c:
    void <init>() -> <init>
Ozone.Patch.DesktopInput -> b.b.a:
    void <init>() -> <init>
    void buildPlacementUI(arc.scene.ui.layout.Table) -> buildPlacementUI
    void lambda$buildPlacementUI$0() -> a
Ozone.Patch.SettingsDialog -> b.b.b:
    void <init>() -> <init>
    void lambda$new$0(java.lang.reflect.Field,boolean) -> a
Ozone.Patch.SettingsDialog$1 -> b.b.c:
    java.lang.reflect.Field val$f -> a
    void <init>(Ozone.Patch.SettingsDialog,java.lang.reflect.Field) -> <init>
    void add(arc.scene.ui.SettingsDialog$SettingsTable) -> add
    void lambda$add$1(java.lang.reflect.Field,java.lang.String) -> a
    java.lang.CharSequence lambda$add$0(java.lang.reflect.Field) -> a
Ozone.Patch.SettingsDialog$2 -> b.b.d:
    java.lang.reflect.Field val$f -> a
    void <init>(Ozone.Patch.SettingsDialog,java.lang.reflect.Field) -> <init>
    void add(arc.scene.ui.SettingsDialog$SettingsTable) -> add
    void lambda$add$1(java.lang.reflect.Field,java.lang.String) -> a
    java.lang.CharSequence lambda$add$0(java.lang.reflect.Field) -> a
Ozone.Patch.SettingsDialog$3 -> b.b.e:
    java.lang.reflect.Field val$f -> a
    void <init>(Ozone.Patch.SettingsDialog,java.lang.reflect.Field) -> <init>
    void add(arc.scene.ui.SettingsDialog$SettingsTable) -> add
    void lambda$add$1(java.lang.reflect.Field,java.lang.String) -> a
    java.lang.CharSequence lambda$add$0(java.lang.reflect.Field) -> a
Ozone.Patch.SettingsDialog$4 -> b.b.f:
    java.lang.reflect.Field val$f -> a
    void <init>(Ozone.Patch.SettingsDialog,java.lang.reflect.Field) -> <init>
    void add(arc.scene.ui.SettingsDialog$SettingsTable) -> add
    void lambda$add$1(java.lang.reflect.Field,java.lang.String) -> a
    java.lang.CharSequence lambda$add$0(java.lang.reflect.Field) -> a
Ozone.Settings -> b.d:
    boolean colorPatch -> a
    void <init>() -> <init>
    void <clinit>() -> <clinit>
Ozone.UI.OzoneMenu -> b.c.a:
    arc.scene.ui.TextField commandsField -> a
    java.lang.String commands -> b
    void <init>(java.lang.String,arc.scene.ui.Dialog$DialogStyle) -> <init>
    void setup() -> a
    void lambda$setup$4(arc.scene.ui.layout.Table) -> a
    void lambda$setup$3() -> b
    void lambda$setup$2(java.lang.String) -> a
    java.lang.CharSequence lambda$setup$1() -> c
    void lambda$new$0(arc.input.KeyCode) -> a
javassist.ByteArrayClassPath -> javassist.ByteArrayClassPath:
    java.lang.String classname -> classname
    byte[] classfile -> classfile
    void <init>(java.lang.String,byte[]) -> <init>
    java.lang.String toString() -> toString
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
javassist.ByteArrayClassPath$1 -> javassist.ByteArrayClassPath$1:
javassist.ByteArrayClassPath$BytecodeURLConnection -> javassist.ByteArrayClassPath$BytecodeURLConnection:
    javassist.ByteArrayClassPath this$0 -> this$0
    void <init>(javassist.ByteArrayClassPath,java.net.URL) -> <init>
    void connect() -> connect
    java.io.InputStream getInputStream() -> getInputStream
    int getContentLength() -> getContentLength
javassist.ByteArrayClassPath$BytecodeURLStreamHandler -> javassist.ByteArrayClassPath$BytecodeURLStreamHandler:
    javassist.ByteArrayClassPath this$0 -> this$0
    void <init>(javassist.ByteArrayClassPath) -> <init>
    java.net.URLConnection openConnection(java.net.URL) -> openConnection
    void <init>(javassist.ByteArrayClassPath,javassist.ByteArrayClassPath$1) -> <init>
javassist.CannotCompileException -> javassist.CannotCompileException:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable myCause -> myCause
    java.lang.String message -> message
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
    java.lang.String getReason() -> getReason
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(javassist.NotFoundException) -> <init>
    void <init>(javassist.compiler.CompileError) -> <init>
    void <init>(java.lang.ClassNotFoundException,java.lang.String) -> <init>
    void <init>(java.lang.ClassFormatError,java.lang.String) -> <init>
javassist.ClassClassPath -> javassist.ClassClassPath:
    java.lang.Class thisClass -> thisClass
    void <init>(java.lang.Class) -> <init>
    void <init>() -> <init>
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
    java.lang.String toString() -> toString
javassist.ClassMap -> javassist.ClassMap:
    long serialVersionUID -> serialVersionUID
    javassist.ClassMap parent -> parent
    void <init>() -> <init>
    void <init>(javassist.ClassMap) -> <init>
    void put(javassist.CtClass,javassist.CtClass) -> put
    java.lang.String put(java.lang.String,java.lang.String) -> put
    void putIfNone(java.lang.String,java.lang.String) -> putIfNone
    java.lang.String put0(java.lang.String,java.lang.String) -> put0
    java.lang.String get(java.lang.Object) -> get
    void fix(javassist.CtClass) -> fix
    void fix(java.lang.String) -> fix
    java.lang.String toJvmName(java.lang.String) -> toJvmName
    java.lang.String toJavaName(java.lang.String) -> toJavaName
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
javassist.ClassPath -> javassist.ClassPath:
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
javassist.ClassPathList -> javassist.ClassPathList:
    javassist.ClassPathList next -> next
    javassist.ClassPath path -> path
    void <init>(javassist.ClassPath,javassist.ClassPathList) -> <init>
javassist.ClassPool -> javassist.ClassPool:
    boolean childFirstLookup -> childFirstLookup
    boolean doPruning -> doPruning
    int compressCount -> compressCount
    int COMPRESS_THRESHOLD -> COMPRESS_THRESHOLD
    boolean releaseUnmodifiedClassFile -> releaseUnmodifiedClassFile
    boolean cacheOpenedJarFile -> cacheOpenedJarFile
    javassist.ClassPoolTail source -> source
    javassist.ClassPool parent -> parent
    java.util.Hashtable classes -> classes
    java.util.Hashtable cflow -> cflow
    int INIT_HASH_SIZE -> INIT_HASH_SIZE
    java.util.ArrayList importedPackages -> importedPackages
    javassist.ClassPool defaultPool -> defaultPool
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(javassist.ClassPool) -> <init>
    javassist.ClassPool getDefault() -> getDefault
    javassist.CtClass getCached(java.lang.String) -> getCached
    void cacheCtClass(java.lang.String,javassist.CtClass,boolean) -> cacheCtClass
    javassist.CtClass removeCached(java.lang.String) -> removeCached
    java.lang.String toString() -> toString
    void compress() -> compress
    void importPackage(java.lang.String) -> importPackage
    void clearImportedPackages() -> clearImportedPackages
    java.util.Iterator getImportedPackages() -> getImportedPackages
    void recordInvalidClassName(java.lang.String) -> recordInvalidClassName
    void recordCflow(java.lang.String,java.lang.String,java.lang.String) -> recordCflow
    java.lang.Object[] lookupCflow(java.lang.String) -> lookupCflow
    javassist.CtClass getAndRename(java.lang.String,java.lang.String) -> getAndRename
    void classNameChanged(java.lang.String,javassist.CtClass) -> classNameChanged
    javassist.CtClass get(java.lang.String) -> get
    javassist.CtClass getOrNull(java.lang.String) -> getOrNull
    javassist.CtClass getCtClass(java.lang.String) -> getCtClass
    javassist.CtClass get0(java.lang.String,boolean) -> get0
    javassist.CtClass createCtClass(java.lang.String,boolean) -> createCtClass
    java.net.URL find(java.lang.String) -> find
    void checkNotFrozen(java.lang.String) -> checkNotFrozen
    javassist.CtClass checkNotExists(java.lang.String) -> checkNotExists
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    void writeClassfile(java.lang.String,java.io.OutputStream) -> writeClassfile
    javassist.CtClass[] get(java.lang.String[]) -> get
    javassist.CtMethod getMethod(java.lang.String,java.lang.String) -> getMethod
    javassist.CtClass makeClass(java.io.InputStream) -> makeClass
    javassist.CtClass makeClass(java.io.InputStream,boolean) -> makeClass
    javassist.CtClass makeClass(javassist.bytecode.ClassFile) -> makeClass
    javassist.CtClass makeClass(javassist.bytecode.ClassFile,boolean) -> makeClass
    javassist.CtClass makeClassIfNew(java.io.InputStream) -> makeClassIfNew
    javassist.CtClass makeClass(java.lang.String) -> makeClass
    javassist.CtClass makeClass(java.lang.String,javassist.CtClass) -> makeClass
    javassist.CtClass makeNestedClass(java.lang.String) -> makeNestedClass
    javassist.CtClass makeInterface(java.lang.String) -> makeInterface
    javassist.CtClass makeInterface(java.lang.String,javassist.CtClass) -> makeInterface
    javassist.CtClass makeAnnotation(java.lang.String) -> makeAnnotation
    javassist.ClassPath appendSystemPath() -> appendSystemPath
    javassist.ClassPath insertClassPath(javassist.ClassPath) -> insertClassPath
    javassist.ClassPath appendClassPath(javassist.ClassPath) -> appendClassPath
    javassist.ClassPath insertClassPath(java.lang.String) -> insertClassPath
    javassist.ClassPath appendClassPath(java.lang.String) -> appendClassPath
    void removeClassPath(javassist.ClassPath) -> removeClassPath
    void appendPathList(java.lang.String) -> appendPathList
    java.lang.Class toClass(javassist.CtClass) -> toClass
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    java.lang.ClassLoader getContextClassLoader() -> getContextClassLoader
    java.lang.Class toClass(javassist.CtClass,java.lang.ClassLoader) -> toClass
    java.lang.Class toClass(javassist.CtClass,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    java.lang.Class toClass(javassist.CtClass,java.lang.Class) -> toClass
    java.lang.Class toClass(javassist.CtClass,java.lang.invoke.MethodHandles$Lookup) -> toClass
    java.lang.Class toClass(javassist.CtClass,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    void makePackage(java.lang.ClassLoader,java.lang.String) -> makePackage
    void <clinit>() -> <clinit>
javassist.ClassPoolTail -> javassist.ClassPoolTail:
    javassist.ClassPathList pathList -> pathList
    void <init>() -> <init>
    java.lang.String toString() -> toString
    javassist.ClassPath insertClassPath(javassist.ClassPath) -> insertClassPath
    javassist.ClassPath appendClassPath(javassist.ClassPath) -> appendClassPath
    void removeClassPath(javassist.ClassPath) -> removeClassPath
    javassist.ClassPath appendSystemPath() -> appendSystemPath
    javassist.ClassPath insertClassPath(java.lang.String) -> insertClassPath
    javassist.ClassPath appendClassPath(java.lang.String) -> appendClassPath
    javassist.ClassPath makePathObject(java.lang.String) -> makePathObject
    void writeClassfile(java.lang.String,java.io.OutputStream) -> writeClassfile
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
    byte[] readStream(java.io.InputStream) -> readStream
    void copyStream(java.io.InputStream,java.io.OutputStream) -> copyStream
javassist.CodeConverter -> javassist.CodeConverter:
    javassist.convert.Transformer transformers -> transformers
    void <init>() -> <init>
    void replaceNew(javassist.CtClass,javassist.CtClass,java.lang.String) -> replaceNew
    void replaceNew(javassist.CtClass,javassist.CtClass) -> replaceNew
    void redirectFieldAccess(javassist.CtField,javassist.CtClass,java.lang.String) -> redirectFieldAccess
    void replaceFieldRead(javassist.CtField,javassist.CtClass,java.lang.String) -> replaceFieldRead
    void replaceFieldWrite(javassist.CtField,javassist.CtClass,java.lang.String) -> replaceFieldWrite
    void replaceArrayAccess(javassist.CtClass,javassist.CodeConverter$ArrayAccessReplacementMethodNames) -> replaceArrayAccess
    void redirectMethodCall(javassist.CtMethod,javassist.CtMethod) -> redirectMethodCall
    void redirectMethodCall(java.lang.String,javassist.CtMethod) -> redirectMethodCall
    void redirectMethodCallToStatic(javassist.CtMethod,javassist.CtMethod) -> redirectMethodCallToStatic
    void insertBeforeMethod(javassist.CtMethod,javassist.CtMethod) -> insertBeforeMethod
    void insertAfterMethod(javassist.CtMethod,javassist.CtMethod) -> insertAfterMethod
    void doit(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.bytecode.ConstPool) -> doit
javassist.CodeConverter$ArrayAccessReplacementMethodNames -> javassist.CodeConverter$ArrayAccessReplacementMethodNames:
    java.lang.String byteOrBooleanRead() -> byteOrBooleanRead
    java.lang.String byteOrBooleanWrite() -> byteOrBooleanWrite
    java.lang.String charRead() -> charRead
    java.lang.String charWrite() -> charWrite
    java.lang.String doubleRead() -> doubleRead
    java.lang.String doubleWrite() -> doubleWrite
    java.lang.String floatRead() -> floatRead
    java.lang.String floatWrite() -> floatWrite
    java.lang.String intRead() -> intRead
    java.lang.String intWrite() -> intWrite
    java.lang.String longRead() -> longRead
    java.lang.String longWrite() -> longWrite
    java.lang.String objectRead() -> objectRead
    java.lang.String objectWrite() -> objectWrite
    java.lang.String shortRead() -> shortRead
    java.lang.String shortWrite() -> shortWrite
javassist.CodeConverter$DefaultArrayAccessReplacementMethodNames -> javassist.CodeConverter$DefaultArrayAccessReplacementMethodNames:
    void <init>() -> <init>
    java.lang.String byteOrBooleanRead() -> byteOrBooleanRead
    java.lang.String byteOrBooleanWrite() -> byteOrBooleanWrite
    java.lang.String charRead() -> charRead
    java.lang.String charWrite() -> charWrite
    java.lang.String doubleRead() -> doubleRead
    java.lang.String doubleWrite() -> doubleWrite
    java.lang.String floatRead() -> floatRead
    java.lang.String floatWrite() -> floatWrite
    java.lang.String intRead() -> intRead
    java.lang.String intWrite() -> intWrite
    java.lang.String longRead() -> longRead
    java.lang.String longWrite() -> longWrite
    java.lang.String objectRead() -> objectRead
    java.lang.String objectWrite() -> objectWrite
    java.lang.String shortRead() -> shortRead
    java.lang.String shortWrite() -> shortWrite
javassist.CtArray -> javassist.CtArray:
    javassist.ClassPool pool -> pool
    javassist.CtClass[] interfaces -> interfaces
    void <init>(java.lang.String,javassist.ClassPool) -> <init>
    javassist.ClassPool getClassPool() -> getClassPool
    boolean isArray() -> isArray
    int getModifiers() -> getModifiers
    javassist.CtClass[] getInterfaces() -> getInterfaces
    boolean subtypeOf(javassist.CtClass) -> subtypeOf
    javassist.CtClass getComponentType() -> getComponentType
    javassist.CtClass getSuperclass() -> getSuperclass
    javassist.CtMethod[] getMethods() -> getMethods
    javassist.CtMethod getMethod(java.lang.String,java.lang.String) -> getMethod
    javassist.CtConstructor[] getConstructors() -> getConstructors
javassist.CtBehavior -> javassist.CtBehavior:
    javassist.bytecode.MethodInfo methodInfo -> methodInfo
    void <init>(javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    void copy(javassist.CtBehavior,boolean,javassist.ClassMap) -> copy
    void extendToString(java.lang.StringBuffer) -> extendToString
    java.lang.String getLongName() -> getLongName
    javassist.bytecode.MethodInfo getMethodInfo() -> getMethodInfo
    javassist.bytecode.MethodInfo getMethodInfo2() -> getMethodInfo2
    int getModifiers() -> getModifiers
    void setModifiers(int) -> setModifiers
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    java.lang.Object[] getAnnotations(boolean) -> getAnnotations
    java.lang.Object[][] getParameterAnnotations() -> getParameterAnnotations
    java.lang.Object[][] getAvailableParameterAnnotations() -> getAvailableParameterAnnotations
    java.lang.Object[][] getParameterAnnotations(boolean) -> getParameterAnnotations
    javassist.CtClass[] getParameterTypes() -> getParameterTypes
    javassist.CtClass getReturnType0() -> getReturnType0
    java.lang.String getSignature() -> getSignature
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    javassist.CtClass[] getExceptionTypes() -> getExceptionTypes
    void setExceptionTypes(javassist.CtClass[]) -> setExceptionTypes
    boolean isEmpty() -> isEmpty
    void setBody(java.lang.String) -> setBody
    void setBody(java.lang.String,java.lang.String,java.lang.String) -> setBody
    void setBody0(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.CtClass,javassist.bytecode.MethodInfo,javassist.ClassMap) -> setBody0
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
    void useCflow(java.lang.String) -> useCflow
    void addLocalVariable(java.lang.String,javassist.CtClass) -> addLocalVariable
    void insertParameter(javassist.CtClass) -> insertParameter
    void addParameter(javassist.CtClass) -> addParameter
    void addParameter2(int,javassist.CtClass,java.lang.String) -> addParameter2
    void instrument(javassist.CodeConverter) -> instrument
    void instrument(javassist.expr.ExprEditor) -> instrument
    void insertBefore(java.lang.String) -> insertBefore
    void insertBefore(java.lang.String,boolean) -> insertBefore
    void insertAfter(java.lang.String) -> insertAfter
    void insertAfter(java.lang.String,boolean) -> insertAfter
    void insertAfter(java.lang.String,boolean,boolean) -> insertAfter
    int insertAfterAdvice(javassist.bytecode.Bytecode,javassist.compiler.Javac,java.lang.String,javassist.bytecode.ConstPool,javassist.CtClass,int) -> insertAfterAdvice
    void insertGoto(javassist.bytecode.CodeIterator,int,int) -> insertGoto
    int insertAfterHandler(boolean,javassist.bytecode.Bytecode,javassist.CtClass,int,javassist.compiler.Javac,java.lang.String) -> insertAfterHandler
    void addCatch(java.lang.String,javassist.CtClass) -> addCatch
    void addCatch(java.lang.String,javassist.CtClass,java.lang.String) -> addCatch
    int getStartPosOfBody(javassist.bytecode.CodeAttribute) -> getStartPosOfBody
    int insertAt(int,java.lang.String) -> insertAt
    int insertAt(int,boolean,java.lang.String) -> insertAt
javassist.CtClass -> javassist.CtClass:
    java.lang.String qualifiedName -> qualifiedName
    java.lang.String debugDump -> debugDump
    java.lang.String version -> version
    java.lang.String javaLangObject -> javaLangObject
    javassist.CtClass booleanType -> booleanType
    javassist.CtClass charType -> charType
    javassist.CtClass byteType -> byteType
    javassist.CtClass shortType -> shortType
    javassist.CtClass intType -> intType
    javassist.CtClass longType -> longType
    javassist.CtClass floatType -> floatType
    javassist.CtClass doubleType -> doubleType
    javassist.CtClass voidType -> voidType
    javassist.CtClass[] primitiveTypes -> primitiveTypes
    void main(java.lang.String[]) -> main
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
    void extendToString(java.lang.StringBuffer) -> extendToString
    javassist.ClassPool getClassPool() -> getClassPool
    javassist.bytecode.ClassFile getClassFile() -> getClassFile
    javassist.bytecode.ClassFile getClassFile2() -> getClassFile2
    javassist.compiler.AccessorMaker getAccessorMaker() -> getAccessorMaker
    java.net.URL getURL() -> getURL
    boolean isModified() -> isModified
    boolean isFrozen() -> isFrozen
    void freeze() -> freeze
    void checkModify() -> checkModify
    void defrost() -> defrost
    boolean isPrimitive() -> isPrimitive
    boolean isArray() -> isArray
    boolean isKotlin() -> isKotlin
    javassist.CtClass getComponentType() -> getComponentType
    boolean subtypeOf(javassist.CtClass) -> subtypeOf
    java.lang.String getName() -> getName
    java.lang.String getSimpleName() -> getSimpleName
    java.lang.String getPackageName() -> getPackageName
    void setName(java.lang.String) -> setName
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    void replaceClassName(java.lang.String,java.lang.String) -> replaceClassName
    void replaceClassName(javassist.ClassMap) -> replaceClassName
    java.util.Collection getRefClasses() -> getRefClasses
    boolean isInterface() -> isInterface
    boolean isAnnotation() -> isAnnotation
    boolean isEnum() -> isEnum
    int getModifiers() -> getModifiers
    boolean hasAnnotation(java.lang.Class) -> hasAnnotation
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    javassist.CtClass[] getDeclaredClasses() -> getDeclaredClasses
    javassist.CtClass[] getNestedClasses() -> getNestedClasses
    void setModifiers(int) -> setModifiers
    boolean subclassOf(javassist.CtClass) -> subclassOf
    javassist.CtClass getSuperclass() -> getSuperclass
    void setSuperclass(javassist.CtClass) -> setSuperclass
    javassist.CtClass[] getInterfaces() -> getInterfaces
    void setInterfaces(javassist.CtClass[]) -> setInterfaces
    void addInterface(javassist.CtClass) -> addInterface
    javassist.CtClass getDeclaringClass() -> getDeclaringClass
    javassist.CtMethod getEnclosingMethod() -> getEnclosingMethod
    javassist.CtBehavior getEnclosingBehavior() -> getEnclosingBehavior
    javassist.CtClass makeNestedClass(java.lang.String,boolean) -> makeNestedClass
    javassist.CtField[] getFields() -> getFields
    javassist.CtField getField(java.lang.String) -> getField
    javassist.CtField getField(java.lang.String,java.lang.String) -> getField
    javassist.CtField getField2(java.lang.String,java.lang.String) -> getField2
    javassist.CtField[] getDeclaredFields() -> getDeclaredFields
    javassist.CtField getDeclaredField(java.lang.String) -> getDeclaredField
    javassist.CtField getDeclaredField(java.lang.String,java.lang.String) -> getDeclaredField
    javassist.CtBehavior[] getDeclaredBehaviors() -> getDeclaredBehaviors
    javassist.CtConstructor[] getConstructors() -> getConstructors
    javassist.CtConstructor getConstructor(java.lang.String) -> getConstructor
    javassist.CtConstructor[] getDeclaredConstructors() -> getDeclaredConstructors
    javassist.CtConstructor getDeclaredConstructor(javassist.CtClass[]) -> getDeclaredConstructor
    javassist.CtConstructor getClassInitializer() -> getClassInitializer
    javassist.CtMethod[] getMethods() -> getMethods
    javassist.CtMethod getMethod(java.lang.String,java.lang.String) -> getMethod
    javassist.CtMethod[] getDeclaredMethods() -> getDeclaredMethods
    javassist.CtMethod getDeclaredMethod(java.lang.String,javassist.CtClass[]) -> getDeclaredMethod
    javassist.CtMethod[] getDeclaredMethods(java.lang.String) -> getDeclaredMethods
    javassist.CtMethod getDeclaredMethod(java.lang.String) -> getDeclaredMethod
    javassist.CtConstructor makeClassInitializer() -> makeClassInitializer
    void addConstructor(javassist.CtConstructor) -> addConstructor
    void removeConstructor(javassist.CtConstructor) -> removeConstructor
    void addMethod(javassist.CtMethod) -> addMethod
    void removeMethod(javassist.CtMethod) -> removeMethod
    void addField(javassist.CtField) -> addField
    void addField(javassist.CtField,java.lang.String) -> addField
    void addField(javassist.CtField,javassist.CtField$Initializer) -> addField
    void removeField(javassist.CtField) -> removeField
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
    void instrument(javassist.CodeConverter) -> instrument
    void instrument(javassist.expr.ExprEditor) -> instrument
    java.lang.Class toClass() -> toClass
    java.lang.Class toClass(java.lang.Class) -> toClass
    java.lang.Class toClass(java.lang.invoke.MethodHandles$Lookup) -> toClass
    java.lang.Class toClass(java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    java.lang.Class toClass(java.lang.ClassLoader) -> toClass
    void detach() -> detach
    boolean stopPruning(boolean) -> stopPruning
    void prune() -> prune
    void incGetCounter() -> incGetCounter
    void rebuildClassFile() -> rebuildClassFile
    byte[] toBytecode() -> toBytecode
    void writeFile() -> writeFile
    void writeFile(java.lang.String) -> writeFile
    java.io.DataOutputStream makeFileOutput(java.lang.String) -> makeFileOutput
    void debugWriteFile() -> debugWriteFile
    void debugWriteFile(java.lang.String) -> debugWriteFile
    void toBytecode(java.io.DataOutputStream) -> toBytecode
    java.lang.String makeUniqueName(java.lang.String) -> makeUniqueName
    void compress() -> compress
    void <clinit>() -> <clinit>
javassist.CtClass$1 -> javassist.CtClass$1:
    long serialVersionUID -> serialVersionUID
    javassist.CtClass this$0 -> this$0
    void <init>(javassist.CtClass) -> <init>
    java.lang.String put(java.lang.String,java.lang.String) -> put
    java.lang.String get(java.lang.Object) -> get
    void fix(java.lang.String) -> fix
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
javassist.CtClass$DelayedFileOutputStream -> javassist.CtClass$DelayedFileOutputStream:
    java.io.FileOutputStream file -> file
    java.lang.String filename -> filename
    void <init>(java.lang.String) -> <init>
    void init() -> init
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
javassist.CtClassType -> javassist.CtClassType:
    javassist.ClassPool classPool -> classPool
    boolean wasChanged -> wasChanged
    boolean wasFrozen -> wasFrozen
    boolean wasPruned -> wasPruned
    boolean gcConstPool -> gcConstPool
    javassist.bytecode.ClassFile classfile -> classfile
    byte[] rawClassfile -> rawClassfile
    java.lang.ref.Reference memberCache -> memberCache
    javassist.compiler.AccessorMaker accessors -> accessors
    javassist.FieldInitLink fieldInitializers -> fieldInitializers
    java.util.Map hiddenMethods -> hiddenMethods
    int uniqueNumberSeed -> uniqueNumberSeed
    boolean doPruning -> doPruning
    int getCount -> getCount
    int GET_THRESHOLD -> GET_THRESHOLD
    void <init>(java.lang.String,javassist.ClassPool) -> <init>
    void <init>(java.io.InputStream,javassist.ClassPool) -> <init>
    void <init>(javassist.bytecode.ClassFile,javassist.ClassPool) -> <init>
    void extendToString(java.lang.StringBuffer) -> extendToString
    void exToString(java.lang.StringBuffer,java.lang.String,javassist.CtMember,javassist.CtMember) -> exToString
    javassist.compiler.AccessorMaker getAccessorMaker() -> getAccessorMaker
    javassist.bytecode.ClassFile getClassFile2() -> getClassFile2
    javassist.bytecode.ClassFile getClassFile3(boolean) -> getClassFile3
    void incGetCounter() -> incGetCounter
    void compress() -> compress
    void saveClassFile() -> saveClassFile
    void removeClassFile() -> removeClassFile
    javassist.bytecode.ClassFile setClassFile(javassist.bytecode.ClassFile) -> setClassFile
    javassist.ClassPool getClassPool() -> getClassPool
    void setClassPool(javassist.ClassPool) -> setClassPool
    java.net.URL getURL() -> getURL
    boolean isModified() -> isModified
    boolean isFrozen() -> isFrozen
    void freeze() -> freeze
    void checkModify() -> checkModify
    void defrost() -> defrost
    boolean subtypeOf(javassist.CtClass) -> subtypeOf
    void setName(java.lang.String) -> setName
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    void replaceClassName(javassist.ClassMap) -> replaceClassName
    void replaceClassName(java.lang.String,java.lang.String) -> replaceClassName
    boolean isInterface() -> isInterface
    boolean isAnnotation() -> isAnnotation
    boolean isEnum() -> isEnum
    int getModifiers() -> getModifiers
    javassist.CtClass[] getNestedClasses() -> getNestedClasses
    void setModifiers(int) -> setModifiers
    void updateInnerEntry(int,java.lang.String,javassist.CtClass,boolean) -> updateInnerEntry
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    boolean hasAnnotationType(java.lang.Class,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute) -> hasAnnotationType
    boolean hasAnnotationType(java.lang.String,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute) -> hasAnnotationType
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object getAnnotationType(java.lang.Class,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute) -> getAnnotationType
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    java.lang.Object[] getAnnotations(boolean) -> getAnnotations
    java.lang.Object[] toAnnotationType(boolean,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute) -> toAnnotationType
    java.lang.Object[][] toAnnotationType(boolean,javassist.ClassPool,javassist.bytecode.ParameterAnnotationsAttribute,javassist.bytecode.ParameterAnnotationsAttribute,javassist.bytecode.MethodInfo) -> toAnnotationType
    java.lang.Object toAnnoType(javassist.bytecode.annotation.Annotation,javassist.ClassPool) -> toAnnoType
    boolean subclassOf(javassist.CtClass) -> subclassOf
    javassist.CtClass getSuperclass() -> getSuperclass
    void setSuperclass(javassist.CtClass) -> setSuperclass
    javassist.CtClass[] getInterfaces() -> getInterfaces
    void setInterfaces(javassist.CtClass[]) -> setInterfaces
    void addInterface(javassist.CtClass) -> addInterface
    javassist.CtClass getDeclaringClass() -> getDeclaringClass
    javassist.CtBehavior getEnclosingBehavior() -> getEnclosingBehavior
    javassist.CtClass makeNestedClass(java.lang.String,boolean) -> makeNestedClass
    void nameReplaced() -> nameReplaced
    javassist.CtMember$Cache hasMemberCache() -> hasMemberCache
    javassist.CtMember$Cache getMembers() -> getMembers
    void makeFieldCache(javassist.CtMember$Cache) -> makeFieldCache
    void makeBehaviorCache(javassist.CtMember$Cache) -> makeBehaviorCache
    javassist.CtField[] getFields() -> getFields
    void getFields(java.util.List,javassist.CtClass) -> getFields
    javassist.CtField getField(java.lang.String,java.lang.String) -> getField
    javassist.CtField checkGetField(javassist.CtField,java.lang.String,java.lang.String) -> checkGetField
    javassist.CtField getField2(java.lang.String,java.lang.String) -> getField2
    javassist.CtField[] getDeclaredFields() -> getDeclaredFields
    javassist.CtField getDeclaredField(java.lang.String) -> getDeclaredField
    javassist.CtField getDeclaredField(java.lang.String,java.lang.String) -> getDeclaredField
    javassist.CtField getDeclaredField2(java.lang.String,java.lang.String) -> getDeclaredField2
    javassist.CtBehavior[] getDeclaredBehaviors() -> getDeclaredBehaviors
    javassist.CtConstructor[] getConstructors() -> getConstructors
    boolean isPubCons(javassist.CtConstructor) -> isPubCons
    javassist.CtConstructor getConstructor(java.lang.String) -> getConstructor
    javassist.CtConstructor[] getDeclaredConstructors() -> getDeclaredConstructors
    javassist.CtConstructor getClassInitializer() -> getClassInitializer
    javassist.CtMethod[] getMethods() -> getMethods
    void getMethods0(java.util.Map,javassist.CtClass) -> getMethods0
    javassist.CtMethod getMethod(java.lang.String,java.lang.String) -> getMethod
    javassist.CtMethod getMethod0(javassist.CtClass,java.lang.String,java.lang.String) -> getMethod0
    javassist.CtMethod[] getDeclaredMethods() -> getDeclaredMethods
    javassist.CtMethod[] getDeclaredMethods(java.lang.String) -> getDeclaredMethods
    javassist.CtMethod getDeclaredMethod(java.lang.String) -> getDeclaredMethod
    javassist.CtMethod getDeclaredMethod(java.lang.String,javassist.CtClass[]) -> getDeclaredMethod
    void addField(javassist.CtField,java.lang.String) -> addField
    void addField(javassist.CtField,javassist.CtField$Initializer) -> addField
    void removeField(javassist.CtField) -> removeField
    javassist.CtConstructor makeClassInitializer() -> makeClassInitializer
    void addConstructor(javassist.CtConstructor) -> addConstructor
    void removeConstructor(javassist.CtConstructor) -> removeConstructor
    void addMethod(javassist.CtMethod) -> addMethod
    void removeMethod(javassist.CtMethod) -> removeMethod
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
    void instrument(javassist.CodeConverter) -> instrument
    void instrument(javassist.expr.ExprEditor) -> instrument
    void prune() -> prune
    void rebuildClassFile() -> rebuildClassFile
    void toBytecode(java.io.DataOutputStream) -> toBytecode
    void dumpClassFile(javassist.bytecode.ClassFile) -> dumpClassFile
    void checkPruned(java.lang.String) -> checkPruned
    boolean stopPruning(boolean) -> stopPruning
    void modifyClassConstructor(javassist.bytecode.ClassFile) -> modifyClassConstructor
    void modifyClassConstructor(javassist.bytecode.ClassFile,javassist.bytecode.Bytecode,int,int) -> modifyClassConstructor
    void modifyConstructors(javassist.bytecode.ClassFile) -> modifyConstructors
    void insertAuxInitializer(javassist.bytecode.CodeAttribute,javassist.bytecode.Bytecode,int) -> insertAuxInitializer
    int makeFieldInitializer(javassist.bytecode.Bytecode,javassist.CtClass[]) -> makeFieldInitializer
    java.util.Map getHiddenMethods() -> getHiddenMethods
    int getUniqueNumber() -> getUniqueNumber
    java.lang.String makeUniqueName(java.lang.String) -> makeUniqueName
    boolean notFindInArray(java.lang.String,java.lang.String[]) -> notFindInArray
    void makeMemberList(java.util.Map) -> makeMemberList
javassist.CtConstructor -> javassist.CtConstructor:
    void <init>(javassist.bytecode.MethodInfo,javassist.CtClass) -> <init>
    void <init>(javassist.CtClass[],javassist.CtClass) -> <init>
    void <init>(javassist.CtConstructor,javassist.CtClass,javassist.ClassMap) -> <init>
    boolean isConstructor() -> isConstructor
    boolean isClassInitializer() -> isClassInitializer
    java.lang.String getLongName() -> getLongName
    java.lang.String getName() -> getName
    boolean isEmpty() -> isEmpty
    java.lang.String getSuperclassName() -> getSuperclassName
    boolean callsSuper() -> callsSuper
    void setBody(java.lang.String) -> setBody
    void setBody(javassist.CtConstructor,javassist.ClassMap) -> setBody
    void insertBeforeBody(java.lang.String) -> insertBeforeBody
    int getStartPosOfBody(javassist.bytecode.CodeAttribute) -> getStartPosOfBody
    javassist.CtMethod toMethod(java.lang.String,javassist.CtClass) -> toMethod
    javassist.CtMethod toMethod(java.lang.String,javassist.CtClass,javassist.ClassMap) -> toMethod
    void removeConsCall(javassist.bytecode.CodeAttribute) -> removeConsCall
javassist.CtField -> javassist.CtField:
    java.lang.String javaLangString -> javaLangString
    javassist.bytecode.FieldInfo fieldInfo -> fieldInfo
    void <init>(javassist.CtClass,java.lang.String,javassist.CtClass) -> <init>
    void <init>(javassist.CtField,javassist.CtClass) -> <init>
    void <init>(java.lang.String,java.lang.String,javassist.CtClass) -> <init>
    void <init>(javassist.bytecode.FieldInfo,javassist.CtClass) -> <init>
    java.lang.String toString() -> toString
    void extendToString(java.lang.StringBuffer) -> extendToString
    javassist.compiler.ast.ASTree getInitAST() -> getInitAST
    javassist.CtField$Initializer getInit() -> getInit
    javassist.CtField make(java.lang.String,javassist.CtClass) -> make
    javassist.bytecode.FieldInfo getFieldInfo() -> getFieldInfo
    javassist.bytecode.FieldInfo getFieldInfo2() -> getFieldInfo2
    javassist.CtClass getDeclaringClass() -> getDeclaringClass
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getModifiers() -> getModifiers
    void setModifiers(int) -> setModifiers
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    java.lang.Object[] getAnnotations(boolean) -> getAnnotations
    java.lang.String getSignature() -> getSignature
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    javassist.CtClass getType() -> getType
    void setType(javassist.CtClass) -> setType
    java.lang.Object getConstantValue() -> getConstantValue
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
javassist.CtField$ArrayInitializer -> javassist.CtField$ArrayInitializer:
    javassist.CtClass type -> type
    int size -> size
    void <init>(javassist.CtClass,int) -> <init>
    void addNewarray(javassist.bytecode.Bytecode) -> addNewarray
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
javassist.CtField$CodeInitializer -> javassist.CtField$CodeInitializer:
    java.lang.String expression -> expression
    void <init>(java.lang.String) -> <init>
    void compileExpr(javassist.compiler.Javac) -> compileExpr
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$CodeInitializer0 -> javassist.CtField$CodeInitializer0:
    void <init>() -> <init>
    void compileExpr(javassist.compiler.Javac) -> compileExpr
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue2(javassist.bytecode.ConstPool,javassist.CtClass,javassist.compiler.ast.ASTree) -> getConstantValue2
javassist.CtField$DoubleInitializer -> javassist.CtField$DoubleInitializer:
    double value -> value
    void <init>(double) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$FloatInitializer -> javassist.CtField$FloatInitializer:
    float value -> value
    void <init>(float) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$Initializer -> javassist.CtField$Initializer:
    void <init>() -> <init>
    javassist.CtField$Initializer constant(int) -> constant
    javassist.CtField$Initializer constant(boolean) -> constant
    javassist.CtField$Initializer constant(long) -> constant
    javassist.CtField$Initializer constant(float) -> constant
    javassist.CtField$Initializer constant(double) -> constant
    javassist.CtField$Initializer constant(java.lang.String) -> constant
    javassist.CtField$Initializer byParameter(int) -> byParameter
    javassist.CtField$Initializer byNew(javassist.CtClass) -> byNew
    javassist.CtField$Initializer byNew(javassist.CtClass,java.lang.String[]) -> byNew
    javassist.CtField$Initializer byNewWithParams(javassist.CtClass) -> byNewWithParams
    javassist.CtField$Initializer byNewWithParams(javassist.CtClass,java.lang.String[]) -> byNewWithParams
    javassist.CtField$Initializer byCall(javassist.CtClass,java.lang.String) -> byCall
    javassist.CtField$Initializer byCall(javassist.CtClass,java.lang.String,java.lang.String[]) -> byCall
    javassist.CtField$Initializer byCallWithParams(javassist.CtClass,java.lang.String) -> byCallWithParams
    javassist.CtField$Initializer byCallWithParams(javassist.CtClass,java.lang.String,java.lang.String[]) -> byCallWithParams
    javassist.CtField$Initializer byNewArray(javassist.CtClass,int) -> byNewArray
    javassist.CtField$Initializer byNewArray(javassist.CtClass,int[]) -> byNewArray
    javassist.CtField$Initializer byExpr(java.lang.String) -> byExpr
    javassist.CtField$Initializer byExpr(javassist.compiler.ast.ASTree) -> byExpr
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$IntInitializer -> javassist.CtField$IntInitializer:
    int value -> value
    void <init>(int) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$LongInitializer -> javassist.CtField$LongInitializer:
    long value -> value
    void <init>(long) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$MethodInitializer -> javassist.CtField$MethodInitializer:
    java.lang.String methodName -> methodName
    void <init>() -> <init>
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    java.lang.String getDescriptor() -> getDescriptor
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
javassist.CtField$MultiArrayInitializer -> javassist.CtField$MultiArrayInitializer:
    javassist.CtClass type -> type
    int[] dim -> dim
    void <init>(javassist.CtClass,int[]) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
javassist.CtField$NewInitializer -> javassist.CtField$NewInitializer:
    javassist.CtClass objectType -> objectType
    java.lang.String[] stringParams -> stringParams
    boolean withConstructorParams -> withConstructorParams
    void <init>() -> <init>
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    java.lang.String getDescriptor() -> getDescriptor
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int compileStringParameter(javassist.bytecode.Bytecode) -> compileStringParameter
javassist.CtField$ParamInitializer -> javassist.CtField$ParamInitializer:
    int nthParam -> nthParam
    void <init>() -> <init>
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int nthParamToLocal(int,javassist.CtClass[],boolean) -> nthParamToLocal
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
javassist.CtField$PtreeInitializer -> javassist.CtField$PtreeInitializer:
    javassist.compiler.ast.ASTree expression -> expression
    void <init>(javassist.compiler.ast.ASTree) -> <init>
    void compileExpr(javassist.compiler.Javac) -> compileExpr
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$StringInitializer -> javassist.CtField$StringInitializer:
    java.lang.String value -> value
    void <init>(java.lang.String) -> <init>
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtMember -> javassist.CtMember:
    javassist.CtMember next -> next
    javassist.CtClass declaringClass -> declaringClass
    void <init>(javassist.CtClass) -> <init>
    javassist.CtMember next() -> next
    void nameReplaced() -> nameReplaced
    java.lang.String toString() -> toString
    void extendToString(java.lang.StringBuffer) -> extendToString
    javassist.CtClass getDeclaringClass() -> getDeclaringClass
    boolean visibleFrom(javassist.CtClass) -> visibleFrom
    int getModifiers() -> getModifiers
    void setModifiers(int) -> setModifiers
    boolean hasAnnotation(java.lang.Class) -> hasAnnotation
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
javassist.CtMember$Cache -> javassist.CtMember$Cache:
    javassist.CtMember methodTail -> methodTail
    javassist.CtMember consTail -> consTail
    javassist.CtMember fieldTail -> fieldTail
    void extendToString(java.lang.StringBuffer) -> extendToString
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    byte[] getAttribute(java.lang.String) -> getAttribute
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    int getModifiers() -> getModifiers
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void setAttribute(java.lang.String,byte[]) -> setAttribute
    void setModifiers(int) -> setModifiers
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    void <init>(javassist.CtClassType) -> <init>
    javassist.CtMember methodHead() -> methodHead
    javassist.CtMember lastMethod() -> lastMethod
    javassist.CtMember consHead() -> consHead
    javassist.CtMember lastCons() -> lastCons
    javassist.CtMember fieldHead() -> fieldHead
    javassist.CtMember lastField() -> lastField
    void addMethod(javassist.CtMember) -> addMethod
    void addConstructor(javassist.CtMember) -> addConstructor
    void addField(javassist.CtMember) -> addField
    int count(javassist.CtMember,javassist.CtMember) -> count
    void remove(javassist.CtMember) -> remove
javassist.CtMethod -> javassist.CtMethod:
    java.lang.String cachedStringRep -> cachedStringRep
    void <init>(javassist.bytecode.MethodInfo,javassist.CtClass) -> <init>
    void <init>(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass) -> <init>
    void <init>(javassist.CtMethod,javassist.CtClass,javassist.ClassMap) -> <init>
    javassist.CtMethod make(java.lang.String,javassist.CtClass) -> make
    javassist.CtMethod make(javassist.bytecode.MethodInfo,javassist.CtClass) -> make
    int hashCode() -> hashCode
    void nameReplaced() -> nameReplaced
    java.lang.String getStringRep() -> getStringRep
    boolean equals(java.lang.Object) -> equals
    java.lang.String getLongName() -> getLongName
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    javassist.CtClass getReturnType() -> getReturnType
    boolean isEmpty() -> isEmpty
    void setBody(javassist.CtMethod,javassist.ClassMap) -> setBody
    void setWrappedBody(javassist.CtMethod,javassist.CtMethod$ConstParameter) -> setWrappedBody
javassist.CtMethod$ConstParameter -> javassist.CtMethod$ConstParameter:
    javassist.CtMethod$ConstParameter integer(int) -> integer
    javassist.CtMethod$ConstParameter integer(long) -> integer
    javassist.CtMethod$ConstParameter string(java.lang.String) -> string
    void <init>() -> <init>
    int compile(javassist.bytecode.Bytecode) -> compile
    java.lang.String descriptor() -> descriptor
    java.lang.String defaultDescriptor() -> defaultDescriptor
    java.lang.String constDescriptor() -> constDescriptor
    java.lang.String defaultConstDescriptor() -> defaultConstDescriptor
javassist.CtMethod$IntConstParameter -> javassist.CtMethod$IntConstParameter:
    int param -> param
    void <init>(int) -> <init>
    int compile(javassist.bytecode.Bytecode) -> compile
    java.lang.String descriptor() -> descriptor
    java.lang.String constDescriptor() -> constDescriptor
javassist.CtMethod$LongConstParameter -> javassist.CtMethod$LongConstParameter:
    long param -> param
    void <init>(long) -> <init>
    int compile(javassist.bytecode.Bytecode) -> compile
    java.lang.String descriptor() -> descriptor
    java.lang.String constDescriptor() -> constDescriptor
javassist.CtMethod$StringConstParameter -> javassist.CtMethod$StringConstParameter:
    java.lang.String param -> param
    void <init>(java.lang.String) -> <init>
    int compile(javassist.bytecode.Bytecode) -> compile
    java.lang.String descriptor() -> descriptor
    java.lang.String constDescriptor() -> constDescriptor
javassist.CtNewClass -> javassist.CtNewClass:
    boolean hasConstructor -> hasConstructor
    void <init>(java.lang.String,javassist.ClassPool,boolean,javassist.CtClass) -> <init>
    void extendToString(java.lang.StringBuffer) -> extendToString
    void addConstructor(javassist.CtConstructor) -> addConstructor
    void toBytecode(java.io.DataOutputStream) -> toBytecode
    void inheritAllConstructors() -> inheritAllConstructors
    boolean isInheritable(int,javassist.CtClass) -> isInheritable
javassist.CtNewConstructor -> javassist.CtNewConstructor:
    int PASS_NONE -> PASS_NONE
    int PASS_ARRAY -> PASS_ARRAY
    int PASS_PARAMS -> PASS_PARAMS
    void <init>() -> <init>
    javassist.CtConstructor make(java.lang.String,javassist.CtClass) -> make
    javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass) -> make
    javassist.CtConstructor copy(javassist.CtConstructor,javassist.CtClass,javassist.ClassMap) -> copy
    javassist.CtConstructor defaultConstructor(javassist.CtClass) -> defaultConstructor
    javassist.CtConstructor skeleton(javassist.CtClass[],javassist.CtClass[],javassist.CtClass) -> skeleton
    javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],javassist.CtClass) -> make
    javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],int,javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass) -> make
javassist.CtNewMethod -> javassist.CtNewMethod:
    void <init>() -> <init>
    javassist.CtMethod make(java.lang.String,javassist.CtClass) -> make
    javassist.CtMethod make(java.lang.String,javassist.CtClass,java.lang.String,java.lang.String) -> make
    javassist.CtMethod make(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass) -> make
    javassist.CtMethod make(int,javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass) -> make
    javassist.CtMethod copy(javassist.CtMethod,javassist.CtClass,javassist.ClassMap) -> copy
    javassist.CtMethod copy(javassist.CtMethod,java.lang.String,javassist.CtClass,javassist.ClassMap) -> copy
    javassist.CtMethod abstractMethod(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],javassist.CtClass) -> abstractMethod
    javassist.CtMethod getter(java.lang.String,javassist.CtField) -> getter
    javassist.CtMethod setter(java.lang.String,javassist.CtField) -> setter
    javassist.CtMethod delegator(javassist.CtMethod,javassist.CtClass) -> delegator
    javassist.CtMethod delegator0(javassist.CtMethod,javassist.CtClass) -> delegator0
    javassist.CtMethod wrapped(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass) -> wrapped
javassist.CtNewWrappedConstructor -> javassist.CtNewWrappedConstructor:
    int PASS_NONE -> PASS_NONE
    int PASS_PARAMS -> PASS_PARAMS
    void <init>() -> <init>
    javassist.CtConstructor wrapped(javassist.CtClass[],javassist.CtClass[],int,javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass) -> wrapped
    javassist.bytecode.Bytecode makeBody(javassist.CtClass,javassist.bytecode.ClassFile,int,javassist.CtMethod,javassist.CtClass[],javassist.CtMethod$ConstParameter) -> makeBody
javassist.CtNewWrappedMethod -> javassist.CtNewWrappedMethod:
    java.lang.String addedWrappedMethod -> addedWrappedMethod
    void <init>() -> <init>
    javassist.CtMethod wrapped(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass) -> wrapped
    javassist.bytecode.Bytecode makeBody(javassist.CtClass,javassist.bytecode.ClassFile,javassist.CtMethod,javassist.CtClass[],javassist.CtClass,javassist.CtMethod$ConstParameter) -> makeBody
    int makeBody0(javassist.CtClass,javassist.bytecode.ClassFile,javassist.CtMethod,boolean,javassist.CtClass[],javassist.CtClass,javassist.CtMethod$ConstParameter,javassist.bytecode.Bytecode) -> makeBody0
    void checkSignature(javassist.CtMethod,java.lang.String) -> checkSignature
    java.lang.String addBodyMethod(javassist.CtClassType,javassist.bytecode.ClassFile,javassist.CtMethod) -> addBodyMethod
    int compileParameterList(javassist.bytecode.Bytecode,javassist.CtClass[],int) -> compileParameterList
    void compileReturn(javassist.bytecode.Bytecode,javassist.CtClass) -> compileReturn
javassist.CtPrimitiveType -> javassist.CtPrimitiveType:
    char descriptor -> descriptor
    java.lang.String wrapperName -> wrapperName
    java.lang.String getMethodName -> getMethodName
    java.lang.String mDescriptor -> mDescriptor
    int returnOp -> returnOp
    int arrayType -> arrayType
    int dataSize -> dataSize
    void <init>(java.lang.String,char,java.lang.String,java.lang.String,java.lang.String,int,int,int) -> <init>
    boolean isPrimitive() -> isPrimitive
    int getModifiers() -> getModifiers
    char getDescriptor() -> getDescriptor
    java.lang.String getWrapperName() -> getWrapperName
    java.lang.String getGetMethodName() -> getGetMethodName
    java.lang.String getGetMethodDescriptor() -> getGetMethodDescriptor
    int getReturnOp() -> getReturnOp
    int getArrayType() -> getArrayType
    int getDataSize() -> getDataSize
javassist.DirClassPath -> javassist.DirClassPath:
    java.lang.String directory -> directory
    void <init>(java.lang.String) -> <init>
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
    java.lang.String toString() -> toString
javassist.FieldInitLink -> javassist.FieldInitLink:
    javassist.FieldInitLink next -> next
    javassist.CtField field -> field
    javassist.CtField$Initializer init -> init
    void <init>(javassist.CtField,javassist.CtField$Initializer) -> <init>
javassist.JarClassPath -> javassist.JarClassPath:
    java.util.List jarfileEntries -> jarfileEntries
    java.lang.String jarfileURL -> jarfileURL
    void <init>(java.lang.String) -> <init>
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
    java.lang.String toString() -> toString
javassist.JarDirClassPath -> javassist.JarDirClassPath:
    javassist.JarClassPath[] jars -> jars
    void <init>(java.lang.String) -> <init>
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
javassist.JarDirClassPath$1 -> javassist.JarDirClassPath$1:
    javassist.JarDirClassPath this$0 -> this$0
    void <init>(javassist.JarDirClassPath) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
javassist.Loader -> javassist.Loader:
    java.util.HashMap notDefinedHere -> notDefinedHere
    java.util.Vector notDefinedPackages -> notDefinedPackages
    javassist.ClassPool source -> source
    javassist.Translator translator -> translator
    java.security.ProtectionDomain domain -> domain
    boolean doDelegation -> doDelegation
    void <init>() -> <init>
    void <init>(javassist.ClassPool) -> <init>
    void <init>(java.lang.ClassLoader,javassist.ClassPool) -> <init>
    void init(javassist.ClassPool) -> init
    void delegateLoadingOf(java.lang.String) -> delegateLoadingOf
    void setDomain(java.security.ProtectionDomain) -> setDomain
    void setClassPool(javassist.ClassPool) -> setClassPool
    void addTranslator(javassist.ClassPool,javassist.Translator) -> addTranslator
    void main(java.lang.String[]) -> main
    void run(java.lang.String[]) -> run
    void run(java.lang.String,java.lang.String[]) -> run
    java.lang.Class loadClass(java.lang.String,boolean) -> loadClass
    java.lang.Class findClass(java.lang.String) -> findClass
    boolean isDefinedPackage(java.lang.String) -> isDefinedPackage
    java.lang.Class loadClassByDelegation(java.lang.String) -> loadClassByDelegation
    boolean notDelegated(java.lang.String) -> notDelegated
    java.lang.Class delegateToParent(java.lang.String) -> delegateToParent
javassist.Loader$Simple -> javassist.Loader$Simple:
    void <init>() -> <init>
    void <init>(java.lang.ClassLoader) -> <init>
    java.lang.Class invokeDefineClass(javassist.CtClass) -> invokeDefineClass
javassist.LoaderClassPath -> javassist.LoaderClassPath:
    java.lang.ref.Reference clref -> clref
    void <init>(java.lang.ClassLoader) -> <init>
    java.lang.String toString() -> toString
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
javassist.Modifier -> javassist.Modifier:
    int PUBLIC -> PUBLIC
    int PRIVATE -> PRIVATE
    int PROTECTED -> PROTECTED
    int STATIC -> STATIC
    int FINAL -> FINAL
    int SYNCHRONIZED -> SYNCHRONIZED
    int VOLATILE -> VOLATILE
    int VARARGS -> VARARGS
    int TRANSIENT -> TRANSIENT
    int NATIVE -> NATIVE
    int INTERFACE -> INTERFACE
    int ABSTRACT -> ABSTRACT
    int STRICT -> STRICT
    int ANNOTATION -> ANNOTATION
    int ENUM -> ENUM
    void <init>() -> <init>
    boolean isPublic(int) -> isPublic
    boolean isPrivate(int) -> isPrivate
    boolean isProtected(int) -> isProtected
    boolean isPackage(int) -> isPackage
    boolean isStatic(int) -> isStatic
    boolean isFinal(int) -> isFinal
    boolean isSynchronized(int) -> isSynchronized
    boolean isVolatile(int) -> isVolatile
    boolean isTransient(int) -> isTransient
    boolean isNative(int) -> isNative
    boolean isInterface(int) -> isInterface
    boolean isAnnotation(int) -> isAnnotation
    boolean isEnum(int) -> isEnum
    boolean isAbstract(int) -> isAbstract
    boolean isStrict(int) -> isStrict
    boolean isVarArgs(int) -> isVarArgs
    int setPublic(int) -> setPublic
    int setProtected(int) -> setProtected
    int setPrivate(int) -> setPrivate
    int setPackage(int) -> setPackage
    int clear(int,int) -> clear
    java.lang.String toString(int) -> toString
javassist.NotFoundException -> javassist.NotFoundException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Exception) -> <init>
javassist.SerialVersionUID -> javassist.SerialVersionUID:
    void <init>() -> <init>
    void setSerialVersionUID(javassist.CtClass) -> setSerialVersionUID
    boolean isSerializable(javassist.CtClass) -> isSerializable
    long calculateDefault(javassist.CtClass) -> calculateDefault
    java.lang.String javaName(javassist.CtClass) -> javaName
    java.lang.String javaName(java.lang.String) -> javaName
javassist.SerialVersionUID$1 -> javassist.SerialVersionUID$1:
    void <init>() -> <init>
    int compare(javassist.CtField,javassist.CtField) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
javassist.SerialVersionUID$2 -> javassist.SerialVersionUID$2:
    void <init>() -> <init>
    int compare(javassist.CtConstructor,javassist.CtConstructor) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
javassist.SerialVersionUID$3 -> javassist.SerialVersionUID$3:
    void <init>() -> <init>
    int compare(javassist.CtMethod,javassist.CtMethod) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
javassist.Translator -> javassist.Translator:
    void start(javassist.ClassPool) -> start
    void onLoad(javassist.ClassPool,java.lang.String) -> onLoad
javassist.URLClassPath -> javassist.URLClassPath:
    java.lang.String hostname -> hostname
    int port -> port
    java.lang.String directory -> directory
    java.lang.String packageName -> packageName
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URLConnection openClassfile0(java.lang.String) -> openClassfile0
    java.net.URL find(java.lang.String) -> find
    byte[] fetchClass(java.lang.String,int,java.lang.String,java.lang.String) -> fetchClass
    java.net.URLConnection fetchClass0(java.lang.String,int,java.lang.String) -> fetchClass0
javassist.bytecode.AccessFlag -> javassist.bytecode.AccessFlag:
    int PUBLIC -> PUBLIC
    int PRIVATE -> PRIVATE
    int PROTECTED -> PROTECTED
    int STATIC -> STATIC
    int FINAL -> FINAL
    int SYNCHRONIZED -> SYNCHRONIZED
    int VOLATILE -> VOLATILE
    int BRIDGE -> BRIDGE
    int TRANSIENT -> TRANSIENT
    int VARARGS -> VARARGS
    int NATIVE -> NATIVE
    int INTERFACE -> INTERFACE
    int ABSTRACT -> ABSTRACT
    int STRICT -> STRICT
    int SYNTHETIC -> SYNTHETIC
    int ANNOTATION -> ANNOTATION
    int ENUM -> ENUM
    int MANDATED -> MANDATED
    int SUPER -> SUPER
    int MODULE -> MODULE
    void <init>() -> <init>
    int setPublic(int) -> setPublic
    int setProtected(int) -> setProtected
    int setPrivate(int) -> setPrivate
    int setPackage(int) -> setPackage
    boolean isPublic(int) -> isPublic
    boolean isProtected(int) -> isProtected
    boolean isPrivate(int) -> isPrivate
    boolean isPackage(int) -> isPackage
    int clear(int,int) -> clear
    int of(int) -> of
    int toModifier(int) -> toModifier
javassist.bytecode.AnnotationDefaultAttribute -> javassist.bytecode.AnnotationDefaultAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    javassist.bytecode.annotation.MemberValue getDefaultValue() -> getDefaultValue
    void setDefaultValue(javassist.bytecode.annotation.MemberValue) -> setDefaultValue
    java.lang.String toString() -> toString
javassist.bytecode.AnnotationsAttribute -> javassist.bytecode.AnnotationsAttribute:
    java.lang.String visibleTag -> visibleTag
    java.lang.String invisibleTag -> invisibleTag
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    int numAnnotations() -> numAnnotations
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    javassist.bytecode.annotation.Annotation getAnnotation(java.lang.String) -> getAnnotation
    void addAnnotation(javassist.bytecode.annotation.Annotation) -> addAnnotation
    boolean removeAnnotation(java.lang.String) -> removeAnnotation
    javassist.bytecode.annotation.Annotation[] getAnnotations() -> getAnnotations
    void setAnnotations(javassist.bytecode.annotation.Annotation[]) -> setAnnotations
    void setAnnotation(javassist.bytecode.annotation.Annotation) -> setAnnotation
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    java.lang.String toString() -> toString
javassist.bytecode.AnnotationsAttribute$Copier -> javassist.bytecode.AnnotationsAttribute$Copier:
    java.io.ByteArrayOutputStream output -> output
    javassist.bytecode.annotation.AnnotationsWriter writer -> writer
    javassist.bytecode.ConstPool srcPool -> srcPool
    javassist.bytecode.ConstPool destPool -> destPool
    java.util.Map classnames -> classnames
    void <init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> <init>
    void <init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map,boolean) -> <init>
    byte[] close() -> close
    void parameters(int,int) -> parameters
    int annotationArray(int,int) -> annotationArray
    int annotation(int,int,int) -> annotation
    int memberValuePair(int,int) -> memberValuePair
    void constValueMember(int,int) -> constValueMember
    void enumMemberValue(int,int,int) -> enumMemberValue
    void classMemberValue(int,int) -> classMemberValue
    int annotationMemberValue(int) -> annotationMemberValue
    int arrayMemberValue(int,int) -> arrayMemberValue
    int copy(int) -> copy
    int copyType(int) -> copyType
javassist.bytecode.AnnotationsAttribute$Parser -> javassist.bytecode.AnnotationsAttribute$Parser:
    javassist.bytecode.ConstPool pool -> pool
    javassist.bytecode.annotation.Annotation[][] allParams -> allParams
    javassist.bytecode.annotation.Annotation[] allAnno -> allAnno
    javassist.bytecode.annotation.Annotation currentAnno -> currentAnno
    javassist.bytecode.annotation.MemberValue currentMember -> currentMember
    void <init>(byte[],javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.annotation.Annotation[][] parseParameters() -> parseParameters
    javassist.bytecode.annotation.Annotation[] parseAnnotations() -> parseAnnotations
    javassist.bytecode.annotation.MemberValue parseMemberValue() -> parseMemberValue
    void parameters(int,int) -> parameters
    int annotationArray(int,int) -> annotationArray
    int annotation(int,int,int) -> annotation
    int memberValuePair(int,int) -> memberValuePair
    void constValueMember(int,int) -> constValueMember
    void enumMemberValue(int,int,int) -> enumMemberValue
    void classMemberValue(int,int) -> classMemberValue
    int annotationMemberValue(int) -> annotationMemberValue
    int arrayMemberValue(int,int) -> arrayMemberValue
javassist.bytecode.AnnotationsAttribute$Renamer -> javassist.bytecode.AnnotationsAttribute$Renamer:
    javassist.bytecode.ConstPool cpool -> cpool
    java.util.Map classnames -> classnames
    void <init>(byte[],javassist.bytecode.ConstPool,java.util.Map) -> <init>
    int annotation(int,int,int) -> annotation
    void enumMemberValue(int,int,int) -> enumMemberValue
    void classMemberValue(int,int) -> classMemberValue
    void renameType(int,int) -> renameType
javassist.bytecode.AnnotationsAttribute$Walker -> javassist.bytecode.AnnotationsAttribute$Walker:
    byte[] info -> info
    void <init>(byte[]) -> <init>
    void parameters() -> parameters
    void parameters(int,int) -> parameters
    void annotationArray() -> annotationArray
    int annotationArray(int) -> annotationArray
    int annotationArray(int,int) -> annotationArray
    int annotation(int) -> annotation
    int annotation(int,int,int) -> annotation
    int memberValuePair(int) -> memberValuePair
    int memberValuePair(int,int) -> memberValuePair
    int memberValue(int) -> memberValue
    void constValueMember(int,int) -> constValueMember
    void enumMemberValue(int,int,int) -> enumMemberValue
    void classMemberValue(int,int) -> classMemberValue
    int annotationMemberValue(int) -> annotationMemberValue
    int arrayMemberValue(int,int) -> arrayMemberValue
javassist.bytecode.AttributeInfo -> javassist.bytecode.AttributeInfo:
    javassist.bytecode.ConstPool constPool -> constPool
    int name -> name
    byte[] info -> info
    void <init>(javassist.bytecode.ConstPool,int,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    javassist.bytecode.AttributeInfo read(javassist.bytecode.ConstPool,java.io.DataInputStream) -> read
    java.lang.String getName() -> getName
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    int length() -> length
    byte[] get() -> get
    void set(byte[]) -> set
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    int getLength(java.util.List) -> getLength
    javassist.bytecode.AttributeInfo lookup(java.util.List,java.lang.String) -> lookup
    javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String) -> remove
    void writeAll(java.util.List,java.io.DataOutputStream) -> writeAll
    java.util.List copyAll(java.util.List,javassist.bytecode.ConstPool) -> copyAll
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void renameClass(java.util.List,java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.List,java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    void getRefClasses(java.util.List,java.util.Map) -> getRefClasses
javassist.bytecode.BadBytecode -> javassist.bytecode.BadBytecode:
    long serialVersionUID -> serialVersionUID
    void <init>(int) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(javassist.bytecode.MethodInfo,java.lang.Throwable) -> <init>
javassist.bytecode.BootstrapMethodsAttribute -> javassist.bytecode.BootstrapMethodsAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,javassist.bytecode.BootstrapMethodsAttribute$BootstrapMethod[]) -> <init>
    javassist.bytecode.BootstrapMethodsAttribute$BootstrapMethod[] getMethods() -> getMethods
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.BootstrapMethodsAttribute$BootstrapMethod -> javassist.bytecode.BootstrapMethodsAttribute$BootstrapMethod:
    int methodRef -> methodRef
    int[] arguments -> arguments
    void <init>(int,int[]) -> <init>
javassist.bytecode.ByteArray -> javassist.bytecode.ByteArray:
    void <init>() -> <init>
    int readU16bit(byte[],int) -> readU16bit
    int readS16bit(byte[],int) -> readS16bit
    void write16bit(int,byte[],int) -> write16bit
    int read32bit(byte[],int) -> read32bit
    void write32bit(int,byte[],int) -> write32bit
    void copy32bit(byte[],int,byte[],int) -> copy32bit
javassist.bytecode.ByteStream -> javassist.bytecode.ByteStream:
    byte[] buf -> buf
    int count -> count
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getPos() -> getPos
    int size() -> size
    void writeBlank(int) -> writeBlank
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void write(int) -> write
    void writeShort(int) -> writeShort
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeUTF(java.lang.String) -> writeUTF
    void writeUTF2(java.lang.String,int,int) -> writeUTF2
    void write(int,int) -> write
    void writeShort(int,int) -> writeShort
    void writeInt(int,int) -> writeInt
    byte[] toByteArray() -> toByteArray
    void writeTo(java.io.OutputStream) -> writeTo
    void enlarge(int) -> enlarge
javassist.bytecode.ByteVector -> javassist.bytecode.ByteVector:
    byte[] buffer -> buffer
    int size -> size
    void <init>() -> <init>
    java.lang.Object clone() -> clone
    int getSize() -> getSize
    byte[] copy() -> copy
    int read(int) -> read
    void write(int,int) -> write
    void add(int) -> add
    void add(int,int) -> add
    void add(int,int,int,int) -> add
    void addGap(int) -> addGap
javassist.bytecode.Bytecode -> javassist.bytecode.Bytecode:
    javassist.CtClass THIS -> THIS
    javassist.bytecode.ConstPool constPool -> constPool
    int maxStack -> maxStack
    int maxLocals -> maxLocals
    javassist.bytecode.ExceptionTable tryblocks -> tryblocks
    int stackDepth -> stackDepth
    void <init>(javassist.bytecode.ConstPool,int,int) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object clone() -> clone
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    javassist.bytecode.ExceptionTable getExceptionTable() -> getExceptionTable
    javassist.bytecode.CodeAttribute toCodeAttribute() -> toCodeAttribute
    int length() -> length
    byte[] get() -> get
    int getMaxStack() -> getMaxStack
    void setMaxStack(int) -> setMaxStack
    int getMaxLocals() -> getMaxLocals
    void setMaxLocals(int) -> setMaxLocals
    void setMaxLocals(boolean,javassist.CtClass[],int) -> setMaxLocals
    void incMaxLocals(int) -> incMaxLocals
    void addExceptionHandler(int,int,int,javassist.CtClass) -> addExceptionHandler
    void addExceptionHandler(int,int,int,java.lang.String) -> addExceptionHandler
    void addExceptionHandler(int,int,int,int) -> addExceptionHandler
    int currentPc() -> currentPc
    int read(int) -> read
    int read16bit(int) -> read16bit
    int read32bit(int) -> read32bit
    void write(int,int) -> write
    void write16bit(int,int) -> write16bit
    void write32bit(int,int) -> write32bit
    void add(int) -> add
    void add32bit(int) -> add32bit
    void addGap(int) -> addGap
    void addOpcode(int) -> addOpcode
    void growStack(int) -> growStack
    int getStackDepth() -> getStackDepth
    void setStackDepth(int) -> setStackDepth
    void addIndex(int) -> addIndex
    void addAload(int) -> addAload
    void addAstore(int) -> addAstore
    void addIconst(int) -> addIconst
    void addConstZero(javassist.CtClass) -> addConstZero
    void addIload(int) -> addIload
    void addIstore(int) -> addIstore
    void addLconst(long) -> addLconst
    void addLload(int) -> addLload
    void addLstore(int) -> addLstore
    void addDconst(double) -> addDconst
    void addDload(int) -> addDload
    void addDstore(int) -> addDstore
    void addFconst(float) -> addFconst
    void addFload(int) -> addFload
    void addFstore(int) -> addFstore
    int addLoad(int,javassist.CtClass) -> addLoad
    int addStore(int,javassist.CtClass) -> addStore
    int addLoadParameters(javassist.CtClass[],int) -> addLoadParameters
    void addCheckcast(javassist.CtClass) -> addCheckcast
    void addCheckcast(java.lang.String) -> addCheckcast
    void addInstanceof(java.lang.String) -> addInstanceof
    void addGetfield(javassist.CtClass,java.lang.String,java.lang.String) -> addGetfield
    void addGetfield(java.lang.String,java.lang.String,java.lang.String) -> addGetfield
    void addGetstatic(javassist.CtClass,java.lang.String,java.lang.String) -> addGetstatic
    void addGetstatic(java.lang.String,java.lang.String,java.lang.String) -> addGetstatic
    void addInvokespecial(javassist.CtClass,java.lang.String,javassist.CtClass,javassist.CtClass[]) -> addInvokespecial
    void addInvokespecial(javassist.CtClass,java.lang.String,java.lang.String) -> addInvokespecial
    void addInvokespecial(java.lang.String,java.lang.String,java.lang.String) -> addInvokespecial
    void addInvokespecial(int,java.lang.String,java.lang.String) -> addInvokespecial
    void addInvokespecial(boolean,int,java.lang.String,java.lang.String) -> addInvokespecial
    void addInvokespecial(int,java.lang.String) -> addInvokespecial
    void addInvokestatic(javassist.CtClass,java.lang.String,javassist.CtClass,javassist.CtClass[]) -> addInvokestatic
    void addInvokestatic(javassist.CtClass,java.lang.String,java.lang.String) -> addInvokestatic
    void addInvokestatic(java.lang.String,java.lang.String,java.lang.String) -> addInvokestatic
    void addInvokestatic(int,java.lang.String,java.lang.String) -> addInvokestatic
    void addInvokestatic(int,java.lang.String,java.lang.String,boolean) -> addInvokestatic
    void addInvokevirtual(javassist.CtClass,java.lang.String,javassist.CtClass,javassist.CtClass[]) -> addInvokevirtual
    void addInvokevirtual(javassist.CtClass,java.lang.String,java.lang.String) -> addInvokevirtual
    void addInvokevirtual(java.lang.String,java.lang.String,java.lang.String) -> addInvokevirtual
    void addInvokevirtual(int,java.lang.String,java.lang.String) -> addInvokevirtual
    void addInvokeinterface(javassist.CtClass,java.lang.String,javassist.CtClass,javassist.CtClass[],int) -> addInvokeinterface
    void addInvokeinterface(javassist.CtClass,java.lang.String,java.lang.String,int) -> addInvokeinterface
    void addInvokeinterface(java.lang.String,java.lang.String,java.lang.String,int) -> addInvokeinterface
    void addInvokeinterface(int,java.lang.String,java.lang.String,int) -> addInvokeinterface
    void addInvokedynamic(int,java.lang.String,java.lang.String) -> addInvokedynamic
    void addLdc(java.lang.String) -> addLdc
    void addLdc(int) -> addLdc
    void addLdc2w(long) -> addLdc2w
    void addLdc2w(double) -> addLdc2w
    void addNew(javassist.CtClass) -> addNew
    void addNew(java.lang.String) -> addNew
    void addAnewarray(java.lang.String) -> addAnewarray
    void addAnewarray(javassist.CtClass,int) -> addAnewarray
    void addNewarray(int,int) -> addNewarray
    int addMultiNewarray(javassist.CtClass,int[]) -> addMultiNewarray
    int addMultiNewarray(javassist.CtClass,int) -> addMultiNewarray
    int addMultiNewarray(java.lang.String,int) -> addMultiNewarray
    void addPutfield(javassist.CtClass,java.lang.String,java.lang.String) -> addPutfield
    void addPutfield(java.lang.String,java.lang.String,java.lang.String) -> addPutfield
    void addPutfield0(javassist.CtClass,java.lang.String,java.lang.String,java.lang.String) -> addPutfield0
    void addPutstatic(javassist.CtClass,java.lang.String,java.lang.String) -> addPutstatic
    void addPutstatic(java.lang.String,java.lang.String,java.lang.String) -> addPutstatic
    void addPutstatic0(javassist.CtClass,java.lang.String,java.lang.String,java.lang.String) -> addPutstatic0
    void addReturn(javassist.CtClass) -> addReturn
    void addRet(int) -> addRet
    void addPrintln(java.lang.String) -> addPrintln
    void add(int,int,int,int) -> add
    void add(int,int) -> add
    void <clinit>() -> <clinit>
javassist.bytecode.ClassFile -> javassist.bytecode.ClassFile:
    int major -> major
    int minor -> minor
    javassist.bytecode.ConstPool constPool -> constPool
    int thisClass -> thisClass
    int accessFlags -> accessFlags
    int superClass -> superClass
    int[] interfaces -> interfaces
    java.util.List fields -> fields
    java.util.List methods -> methods
    java.util.List attributes -> attributes
    java.lang.String thisclassname -> thisclassname
    java.lang.String[] cachedInterfaces -> cachedInterfaces
    java.lang.String cachedSuperclass -> cachedSuperclass
    int JAVA_1 -> JAVA_1
    int JAVA_2 -> JAVA_2
    int JAVA_3 -> JAVA_3
    int JAVA_4 -> JAVA_4
    int JAVA_5 -> JAVA_5
    int JAVA_6 -> JAVA_6
    int JAVA_7 -> JAVA_7
    int JAVA_8 -> JAVA_8
    int JAVA_9 -> JAVA_9
    int JAVA_10 -> JAVA_10
    int JAVA_11 -> JAVA_11
    int MAJOR_VERSION -> MAJOR_VERSION
    void <init>(java.io.DataInputStream) -> <init>
    void <init>(boolean,java.lang.String,java.lang.String) -> <init>
    void initSuperclass(java.lang.String) -> initSuperclass
    java.lang.String getSourcefileName(java.lang.String) -> getSourcefileName
    void compact() -> compact
    javassist.bytecode.ConstPool compact0() -> compact0
    void prune() -> prune
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    boolean isInterface() -> isInterface
    boolean isFinal() -> isFinal
    boolean isAbstract() -> isAbstract
    int getAccessFlags() -> getAccessFlags
    void setAccessFlags(int) -> setAccessFlags
    int getInnerAccessFlags() -> getInnerAccessFlags
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getSuperclass() -> getSuperclass
    int getSuperclassId() -> getSuperclassId
    void setSuperclass(java.lang.String) -> setSuperclass
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    java.lang.String[] getInterfaces() -> getInterfaces
    void setInterfaces(java.lang.String[]) -> setInterfaces
    void addInterface(java.lang.String) -> addInterface
    java.util.List getFields() -> getFields
    void addField(javassist.bytecode.FieldInfo) -> addField
    void addField2(javassist.bytecode.FieldInfo) -> addField2
    void testExistingField(java.lang.String,java.lang.String) -> testExistingField
    java.util.List getMethods() -> getMethods
    javassist.bytecode.MethodInfo getMethod(java.lang.String) -> getMethod
    javassist.bytecode.MethodInfo getStaticInitializer() -> getStaticInitializer
    void addMethod(javassist.bytecode.MethodInfo) -> addMethod
    void addMethod2(javassist.bytecode.MethodInfo) -> addMethod2
    void testExistingMethod(javassist.bytecode.MethodInfo) -> testExistingMethod
    boolean isDuplicated(javassist.bytecode.MethodInfo,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo,java.util.ListIterator) -> isDuplicated
    boolean notBridgeMethod(javassist.bytecode.MethodInfo) -> notBridgeMethod
    java.util.List getAttributes() -> getAttributes
    javassist.bytecode.AttributeInfo getAttribute(java.lang.String) -> getAttribute
    javassist.bytecode.AttributeInfo removeAttribute(java.lang.String) -> removeAttribute
    void addAttribute(javassist.bytecode.AttributeInfo) -> addAttribute
    java.lang.String getSourceFile() -> getSourceFile
    void read(java.io.DataInputStream) -> read
    void write(java.io.DataOutputStream) -> write
    int getMajorVersion() -> getMajorVersion
    void setMajorVersion(int) -> setMajorVersion
    int getMinorVersion() -> getMinorVersion
    void setMinorVersion(int) -> setMinorVersion
    void setVersionToJava5() -> setVersionToJava5
    void <clinit>() -> <clinit>
javassist.bytecode.ClassFilePrinter -> javassist.bytecode.ClassFilePrinter:
    void <init>() -> <init>
    void print(javassist.bytecode.ClassFile) -> print
    void print(javassist.bytecode.ClassFile,java.io.PrintWriter) -> print
    void printAttributes(java.util.List,java.io.PrintWriter,char) -> printAttributes
javassist.bytecode.ClassFileWriter -> javassist.bytecode.ClassFileWriter:
    javassist.bytecode.ByteStream output -> output
    javassist.bytecode.ClassFileWriter$ConstPoolWriter constPool -> constPool
    javassist.bytecode.ClassFileWriter$FieldWriter fields -> fields
    javassist.bytecode.ClassFileWriter$MethodWriter methods -> methods
    int thisClass -> thisClass
    int superClass -> superClass
    void <init>(int,int) -> <init>
    javassist.bytecode.ClassFileWriter$ConstPoolWriter getConstPool() -> getConstPool
    javassist.bytecode.ClassFileWriter$FieldWriter getFieldWriter() -> getFieldWriter
    javassist.bytecode.ClassFileWriter$MethodWriter getMethodWriter() -> getMethodWriter
    byte[] end(int,int,int,int[],javassist.bytecode.ClassFileWriter$AttributeWriter) -> end
    void end(java.io.DataOutputStream,int,int,int,int[],javassist.bytecode.ClassFileWriter$AttributeWriter) -> end
    void writeAttribute(javassist.bytecode.ByteStream,javassist.bytecode.ClassFileWriter$AttributeWriter,int) -> writeAttribute
javassist.bytecode.ClassFileWriter$AttributeWriter -> javassist.bytecode.ClassFileWriter$AttributeWriter:
    int size() -> size
    void write(java.io.DataOutputStream) -> write
javassist.bytecode.ClassFileWriter$ConstPoolWriter -> javassist.bytecode.ClassFileWriter$ConstPoolWriter:
    javassist.bytecode.ByteStream output -> output
    int startPos -> startPos
    int num -> num
    void <init>(javassist.bytecode.ByteStream) -> <init>
    int[] addClassInfo(java.lang.String[]) -> addClassInfo
    int addClassInfo(java.lang.String) -> addClassInfo
    int addClassInfo(int) -> addClassInfo
    int addNameAndTypeInfo(java.lang.String,java.lang.String) -> addNameAndTypeInfo
    int addNameAndTypeInfo(int,int) -> addNameAndTypeInfo
    int addFieldrefInfo(int,int) -> addFieldrefInfo
    int addMethodrefInfo(int,int) -> addMethodrefInfo
    int addInterfaceMethodrefInfo(int,int) -> addInterfaceMethodrefInfo
    int addMethodHandleInfo(int,int) -> addMethodHandleInfo
    int addMethodTypeInfo(int) -> addMethodTypeInfo
    int addInvokeDynamicInfo(int,int) -> addInvokeDynamicInfo
    int addDynamicInfo(int,int) -> addDynamicInfo
    int addStringInfo(java.lang.String) -> addStringInfo
    int addIntegerInfo(int) -> addIntegerInfo
    int addFloatInfo(float) -> addFloatInfo
    int addLongInfo(long) -> addLongInfo
    int addDoubleInfo(double) -> addDoubleInfo
    int addUtf8Info(java.lang.String) -> addUtf8Info
    void end() -> end
javassist.bytecode.ClassFileWriter$FieldWriter -> javassist.bytecode.ClassFileWriter$FieldWriter:
    javassist.bytecode.ByteStream output -> output
    javassist.bytecode.ClassFileWriter$ConstPoolWriter constPool -> constPool
    int fieldCount -> fieldCount
    void <init>(javassist.bytecode.ClassFileWriter$ConstPoolWriter) -> <init>
    void add(int,java.lang.String,java.lang.String,javassist.bytecode.ClassFileWriter$AttributeWriter) -> add
    void add(int,int,int,javassist.bytecode.ClassFileWriter$AttributeWriter) -> add
    int size() -> size
    int dataSize() -> dataSize
    void write(java.io.OutputStream) -> write
javassist.bytecode.ClassFileWriter$MethodWriter -> javassist.bytecode.ClassFileWriter$MethodWriter:
    javassist.bytecode.ByteStream output -> output
    javassist.bytecode.ClassFileWriter$ConstPoolWriter constPool -> constPool
    int methodCount -> methodCount
    int codeIndex -> codeIndex
    int throwsIndex -> throwsIndex
    int stackIndex -> stackIndex
    int startPos -> startPos
    boolean isAbstract -> isAbstract
    int catchPos -> catchPos
    int catchCount -> catchCount
    void <init>(javassist.bytecode.ClassFileWriter$ConstPoolWriter) -> <init>
    void begin(int,java.lang.String,java.lang.String,java.lang.String[],javassist.bytecode.ClassFileWriter$AttributeWriter) -> begin
    void begin(int,int,int,int[],javassist.bytecode.ClassFileWriter$AttributeWriter) -> begin
    void writeThrows(int[]) -> writeThrows
    void add(int) -> add
    void add16(int) -> add16
    void add32(int) -> add32
    void addInvoke(int,java.lang.String,java.lang.String,java.lang.String) -> addInvoke
    void codeEnd(int,int) -> codeEnd
    void addCatch(int,int,int,int) -> addCatch
    void end(javassist.bytecode.StackMapTable$Writer,javassist.bytecode.ClassFileWriter$AttributeWriter) -> end
    int size() -> size
    int numOfMethods() -> numOfMethods
    int dataSize() -> dataSize
    void write(java.io.OutputStream) -> write
javassist.bytecode.ClassInfo -> javassist.bytecode.ClassInfo:
    int tag -> tag
    int name -> name
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    java.lang.String getClassName(javassist.bytecode.ConstPool) -> getClassName
    void renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.Map) -> renameClass
    void renameClass(javassist.bytecode.ConstPool,java.util.Map,java.util.Map) -> renameClass
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.CodeAnalyzer -> javassist.bytecode.CodeAnalyzer:
    javassist.bytecode.ConstPool constPool -> constPool
    javassist.bytecode.CodeAttribute codeAttr -> codeAttr
    void <init>(javassist.bytecode.CodeAttribute) -> <init>
    int computeMaxStack() -> computeMaxStack
    void initStack(int[],javassist.bytecode.CodeAttribute) -> initStack
    void visitBytecode(javassist.bytecode.CodeIterator,int[],int) -> visitBytecode
    boolean processBranch(int,javassist.bytecode.CodeIterator,int,int,int[],int,int[]) -> processBranch
    void checkTarget(int,int,int,int[],int) -> checkTarget
    boolean isEnd(int) -> isEnd
    int visitInst(int,javassist.bytecode.CodeIterator,int,int) -> visitInst
    int getFieldSize(javassist.bytecode.CodeIterator,int) -> getFieldSize
javassist.bytecode.CodeAttribute -> javassist.bytecode.CodeAttribute:
    java.lang.String tag -> tag
    int maxStack -> maxStack
    int maxLocals -> maxLocals
    javassist.bytecode.ExceptionTable exceptions -> exceptions
    java.util.List attributes -> attributes
    void <init>(javassist.bytecode.ConstPool,int,int,byte[],javassist.bytecode.ExceptionTable) -> <init>
    void <init>(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute,java.util.Map) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    int length() -> length
    void write(java.io.DataOutputStream) -> write
    byte[] get() -> get
    void set(byte[]) -> set
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    java.lang.String getDeclaringClass() -> getDeclaringClass
    int getMaxStack() -> getMaxStack
    void setMaxStack(int) -> setMaxStack
    int computeMaxStack() -> computeMaxStack
    int getMaxLocals() -> getMaxLocals
    void setMaxLocals(int) -> setMaxLocals
    int getCodeLength() -> getCodeLength
    byte[] getCode() -> getCode
    void setCode(byte[]) -> setCode
    javassist.bytecode.CodeIterator iterator() -> iterator
    javassist.bytecode.ExceptionTable getExceptionTable() -> getExceptionTable
    java.util.List getAttributes() -> getAttributes
    javassist.bytecode.AttributeInfo getAttribute(java.lang.String) -> getAttribute
    void setAttribute(javassist.bytecode.StackMapTable) -> setAttribute
    void setAttribute(javassist.bytecode.StackMap) -> setAttribute
    byte[] copyCode(javassist.bytecode.ConstPool,java.util.Map,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> copyCode
    javassist.bytecode.CodeAttribute$LdcEntry copyCode(byte[],int,int,javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map) -> copyCode
    void copyConstPoolInfo(int,byte[],javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map) -> copyConstPoolInfo
    void insertLocalVar(int,int) -> insertLocalVar
    void shiftIndex(javassist.bytecode.CodeIterator,int,int) -> shiftIndex
    void shiftIndex8(javassist.bytecode.CodeIterator,int,int,int,int) -> shiftIndex8
    void shiftIndex0(javassist.bytecode.CodeIterator,int,int,int,int,int,int) -> shiftIndex0
javassist.bytecode.CodeAttribute$LdcEntry -> javassist.bytecode.CodeAttribute$LdcEntry:
    javassist.bytecode.CodeAttribute$LdcEntry next -> next
    int where -> where
    int index -> index
    void <init>() -> <init>
    byte[] doit(byte[],javassist.bytecode.CodeAttribute$LdcEntry,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> doit
javassist.bytecode.CodeAttribute$RuntimeCopyException -> javassist.bytecode.CodeAttribute$RuntimeCopyException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
javassist.bytecode.CodeIterator -> javassist.bytecode.CodeIterator:
    javassist.bytecode.CodeAttribute codeAttr -> codeAttr
    byte[] bytecode -> bytecode
    int endPos -> endPos
    int currentPos -> currentPos
    int mark -> mark
    int mark2 -> mark2
    int[] opcodeLength -> opcodeLength
    void <init>(javassist.bytecode.CodeAttribute) -> <init>
    void begin() -> begin
    void move(int) -> move
    void setMark(int) -> setMark
    void setMark2(int) -> setMark2
    int getMark() -> getMark
    int getMark2() -> getMark2
    javassist.bytecode.CodeAttribute get() -> get
    int getCodeLength() -> getCodeLength
    int byteAt(int) -> byteAt
    int signedByteAt(int) -> signedByteAt
    void writeByte(int,int) -> writeByte
    int u16bitAt(int) -> u16bitAt
    int s16bitAt(int) -> s16bitAt
    void write16bit(int,int) -> write16bit
    int s32bitAt(int) -> s32bitAt
    void write32bit(int,int) -> write32bit
    void write(byte[],int) -> write
    boolean hasNext() -> hasNext
    int next() -> next
    int lookAhead() -> lookAhead
    int skipConstructor() -> skipConstructor
    int skipSuperConstructor() -> skipSuperConstructor
    int skipThisConstructor() -> skipThisConstructor
    int skipSuperConstructor0(int) -> skipSuperConstructor0
    int insert(byte[]) -> insert
    void insert(int,byte[]) -> insert
    int insertAt(int,byte[]) -> insertAt
    int insertEx(byte[]) -> insertEx
    void insertEx(int,byte[]) -> insertEx
    int insertExAt(int,byte[]) -> insertExAt
    int insert0(int,byte[],boolean) -> insert0
    int insertGap(int) -> insertGap
    int insertGap(int,int) -> insertGap
    int insertExGap(int) -> insertExGap
    int insertExGap(int,int) -> insertExGap
    javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean) -> insertGapAt
    void updateCursors(int,int) -> updateCursors
    void insert(javassist.bytecode.ExceptionTable,int) -> insert
    int append(byte[]) -> append
    void appendGap(int) -> appendGap
    void append(javassist.bytecode.ExceptionTable,int) -> append
    int nextOpcode(byte[],int) -> nextOpcode
    byte[] insertGapCore0(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> insertGapCore0
    byte[] insertGapCore1(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> insertGapCore1
    void insertGap2(byte[],int,int,int,byte[],boolean) -> insertGap2
    int copyGapBytes(byte[],int,byte[],int,int) -> copyGapBytes
    int newOffset(int,int,int,int,boolean) -> newOffset
    byte[] changeLdcToLdcW(byte[],javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute,javassist.bytecode.CodeAttribute$LdcEntry) -> changeLdcToLdcW
    void addLdcW(javassist.bytecode.CodeAttribute$LdcEntry,java.util.List) -> addLdcW
    byte[] insertGapCore0w(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute,javassist.bytecode.CodeIterator$Gap) -> insertGapCore0w
    byte[] insertGap2w(byte[],int,int,boolean,java.util.List,javassist.bytecode.CodeIterator$Pointers) -> insertGap2w
    java.util.List makeJumpList(byte[],int,javassist.bytecode.CodeIterator$Pointers) -> makeJumpList
    byte[] makeExapndedCode(byte[],java.util.List,int,int) -> makeExapndedCode
    void <clinit>() -> <clinit>
javassist.bytecode.CodeIterator$AlignmentException -> javassist.bytecode.CodeIterator$AlignmentException:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
javassist.bytecode.CodeIterator$Branch -> javassist.bytecode.CodeIterator$Branch:
    int pos -> pos
    int orgPos -> orgPos
    void <init>(int) -> <init>
    void shift(int,int,boolean) -> shift
    int shiftOffset(int,int,int,int,boolean) -> shiftOffset
    boolean expanded() -> expanded
    int gapChanged() -> gapChanged
    int deltaSize() -> deltaSize
    int write(int,byte[],int,byte[]) -> write
javassist.bytecode.CodeIterator$Branch16 -> javassist.bytecode.CodeIterator$Branch16:
    int offset -> offset
    int state -> state
    int BIT16 -> BIT16
    int EXPAND -> EXPAND
    int BIT32 -> BIT32
    void <init>(int,int) -> <init>
    void shift(int,int,boolean) -> shift
    boolean expanded() -> expanded
    int deltaSize() -> deltaSize
    void write32(int,byte[],int,byte[]) -> write32
    int write(int,byte[],int,byte[]) -> write
javassist.bytecode.CodeIterator$Gap -> javassist.bytecode.CodeIterator$Gap:
    int position -> position
    int length -> length
    void <init>() -> <init>
javassist.bytecode.CodeIterator$If16 -> javassist.bytecode.CodeIterator$If16:
    void <init>(int,int) -> <init>
    int deltaSize() -> deltaSize
    void write32(int,byte[],int,byte[]) -> write32
    int opcode(int) -> opcode
javassist.bytecode.CodeIterator$Jump16 -> javassist.bytecode.CodeIterator$Jump16:
    void <init>(int,int) -> <init>
    int deltaSize() -> deltaSize
    void write32(int,byte[],int,byte[]) -> write32
javassist.bytecode.CodeIterator$Jump32 -> javassist.bytecode.CodeIterator$Jump32:
    int offset -> offset
    void <init>(int,int) -> <init>
    void shift(int,int,boolean) -> shift
    int write(int,byte[],int,byte[]) -> write
javassist.bytecode.CodeIterator$LdcW -> javassist.bytecode.CodeIterator$LdcW:
    int index -> index
    boolean state -> state
    void <init>(int,int) -> <init>
    boolean expanded() -> expanded
    int deltaSize() -> deltaSize
    int write(int,byte[],int,byte[]) -> write
javassist.bytecode.CodeIterator$Lookup -> javassist.bytecode.CodeIterator$Lookup:
    int[] matches -> matches
    void <init>(int,int,int[],int[],javassist.bytecode.CodeIterator$Pointers) -> <init>
    int write2(int,byte[]) -> write2
    int tableSize() -> tableSize
javassist.bytecode.CodeIterator$Pointers -> javassist.bytecode.CodeIterator$Pointers:
    int cursor -> cursor
    int mark0 -> mark0
    int mark -> mark
    int mark2 -> mark2
    javassist.bytecode.ExceptionTable etable -> etable
    javassist.bytecode.LineNumberAttribute line -> line
    javassist.bytecode.LocalVariableAttribute vars -> vars
    javassist.bytecode.LocalVariableAttribute types -> types
    javassist.bytecode.StackMapTable stack -> stack
    javassist.bytecode.StackMap stack2 -> stack2
    void <init>(int,int,int,int,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> <init>
    void shiftPc(int,int,boolean) -> shiftPc
    void shiftForSwitch(int,int) -> shiftForSwitch
javassist.bytecode.CodeIterator$Switcher -> javassist.bytecode.CodeIterator$Switcher:
    int gap -> gap
    int defaultByte -> defaultByte
    int[] offsets -> offsets
    javassist.bytecode.CodeIterator$Pointers pointers -> pointers
    void <init>(int,int,int[],javassist.bytecode.CodeIterator$Pointers) -> <init>
    void shift(int,int,boolean) -> shift
    int gapChanged() -> gapChanged
    int deltaSize() -> deltaSize
    int write(int,byte[],int,byte[]) -> write
    int write2(int,byte[]) -> write2
    int tableSize() -> tableSize
    void adjustOffsets(int,int) -> adjustOffsets
javassist.bytecode.CodeIterator$Table -> javassist.bytecode.CodeIterator$Table:
    int low -> low
    int high -> high
    void <init>(int,int,int,int,int[],javassist.bytecode.CodeIterator$Pointers) -> <init>
    int write2(int,byte[]) -> write2
    int tableSize() -> tableSize
javassist.bytecode.ConstInfo -> javassist.bytecode.ConstInfo:
    int index -> index
    void <init>(int) -> <init>
    int getTag() -> getTag
    java.lang.String getClassName(javassist.bytecode.ConstPool) -> getClassName
    void renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.Map) -> renameClass
    void renameClass(javassist.bytecode.ConstPool,java.util.Map,java.util.Map) -> renameClass
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
    java.lang.String toString() -> toString
javassist.bytecode.ConstInfoPadding -> javassist.bytecode.ConstInfoPadding:
    void <init>(int) -> <init>
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.ConstPool -> javassist.bytecode.ConstPool:
    javassist.bytecode.LongVector items -> items
    int numOfItems -> numOfItems
    int thisClassInfo -> thisClassInfo
    java.util.Map itemsCache -> itemsCache
    int CONST_Class -> CONST_Class
    int CONST_Fieldref -> CONST_Fieldref
    int CONST_Methodref -> CONST_Methodref
    int CONST_InterfaceMethodref -> CONST_InterfaceMethodref
    int CONST_String -> CONST_String
    int CONST_Integer -> CONST_Integer
    int CONST_Float -> CONST_Float
    int CONST_Long -> CONST_Long
    int CONST_Double -> CONST_Double
    int CONST_NameAndType -> CONST_NameAndType
    int CONST_Utf8 -> CONST_Utf8
    int CONST_MethodHandle -> CONST_MethodHandle
    int CONST_MethodType -> CONST_MethodType
    int CONST_Dynamic -> CONST_Dynamic
    int CONST_InvokeDynamic -> CONST_InvokeDynamic
    int CONST_Module -> CONST_Module
    int CONST_Package -> CONST_Package
    javassist.CtClass THIS -> THIS
    int REF_getField -> REF_getField
    int REF_getStatic -> REF_getStatic
    int REF_putField -> REF_putField
    int REF_putStatic -> REF_putStatic
    int REF_invokeVirtual -> REF_invokeVirtual
    int REF_invokeStatic -> REF_invokeStatic
    int REF_invokeSpecial -> REF_invokeSpecial
    int REF_newInvokeSpecial -> REF_newInvokeSpecial
    int REF_invokeInterface -> REF_invokeInterface
    void <init>(java.lang.String) -> <init>
    void <init>(java.io.DataInputStream) -> <init>
    void prune() -> prune
    int getSize() -> getSize
    java.lang.String getClassName() -> getClassName
    int getThisClassInfo() -> getThisClassInfo
    void setThisClassInfo(int) -> setThisClassInfo
    javassist.bytecode.ConstInfo getItem(int) -> getItem
    int getTag(int) -> getTag
    java.lang.String getClassInfo(int) -> getClassInfo
    java.lang.String getClassInfoByDescriptor(int) -> getClassInfoByDescriptor
    int getNameAndTypeName(int) -> getNameAndTypeName
    int getNameAndTypeDescriptor(int) -> getNameAndTypeDescriptor
    int getMemberClass(int) -> getMemberClass
    int getMemberNameAndType(int) -> getMemberNameAndType
    int getFieldrefClass(int) -> getFieldrefClass
    java.lang.String getFieldrefClassName(int) -> getFieldrefClassName
    int getFieldrefNameAndType(int) -> getFieldrefNameAndType
    java.lang.String getFieldrefName(int) -> getFieldrefName
    java.lang.String getFieldrefType(int) -> getFieldrefType
    int getMethodrefClass(int) -> getMethodrefClass
    java.lang.String getMethodrefClassName(int) -> getMethodrefClassName
    int getMethodrefNameAndType(int) -> getMethodrefNameAndType
    java.lang.String getMethodrefName(int) -> getMethodrefName
    java.lang.String getMethodrefType(int) -> getMethodrefType
    int getInterfaceMethodrefClass(int) -> getInterfaceMethodrefClass
    java.lang.String getInterfaceMethodrefClassName(int) -> getInterfaceMethodrefClassName
    int getInterfaceMethodrefNameAndType(int) -> getInterfaceMethodrefNameAndType
    java.lang.String getInterfaceMethodrefName(int) -> getInterfaceMethodrefName
    java.lang.String getInterfaceMethodrefType(int) -> getInterfaceMethodrefType
    java.lang.Object getLdcValue(int) -> getLdcValue
    int getIntegerInfo(int) -> getIntegerInfo
    float getFloatInfo(int) -> getFloatInfo
    long getLongInfo(int) -> getLongInfo
    double getDoubleInfo(int) -> getDoubleInfo
    java.lang.String getStringInfo(int) -> getStringInfo
    java.lang.String getUtf8Info(int) -> getUtf8Info
    int getMethodHandleKind(int) -> getMethodHandleKind
    int getMethodHandleIndex(int) -> getMethodHandleIndex
    int getMethodTypeInfo(int) -> getMethodTypeInfo
    int getInvokeDynamicBootstrap(int) -> getInvokeDynamicBootstrap
    int getInvokeDynamicNameAndType(int) -> getInvokeDynamicNameAndType
    java.lang.String getInvokeDynamicType(int) -> getInvokeDynamicType
    int getDynamicBootstrap(int) -> getDynamicBootstrap
    int getDynamicNameAndType(int) -> getDynamicNameAndType
    java.lang.String getDynamicType(int) -> getDynamicType
    java.lang.String getModuleInfo(int) -> getModuleInfo
    java.lang.String getPackageInfo(int) -> getPackageInfo
    int isConstructor(java.lang.String,int) -> isConstructor
    int isMember(java.lang.String,java.lang.String,int) -> isMember
    java.lang.String eqMember(java.lang.String,java.lang.String,int) -> eqMember
    int addItem0(javassist.bytecode.ConstInfo) -> addItem0
    int addItem(javassist.bytecode.ConstInfo) -> addItem
    int copy(int,javassist.bytecode.ConstPool,java.util.Map) -> copy
    int addConstInfoPadding() -> addConstInfoPadding
    int addClassInfo(javassist.CtClass) -> addClassInfo
    int addClassInfo(java.lang.String) -> addClassInfo
    int addNameAndTypeInfo(java.lang.String,java.lang.String) -> addNameAndTypeInfo
    int addNameAndTypeInfo(int,int) -> addNameAndTypeInfo
    int addFieldrefInfo(int,java.lang.String,java.lang.String) -> addFieldrefInfo
    int addFieldrefInfo(int,int) -> addFieldrefInfo
    int addMethodrefInfo(int,java.lang.String,java.lang.String) -> addMethodrefInfo
    int addMethodrefInfo(int,int) -> addMethodrefInfo
    int addInterfaceMethodrefInfo(int,java.lang.String,java.lang.String) -> addInterfaceMethodrefInfo
    int addInterfaceMethodrefInfo(int,int) -> addInterfaceMethodrefInfo
    int addStringInfo(java.lang.String) -> addStringInfo
    int addIntegerInfo(int) -> addIntegerInfo
    int addFloatInfo(float) -> addFloatInfo
    int addLongInfo(long) -> addLongInfo
    int addDoubleInfo(double) -> addDoubleInfo
    int addUtf8Info(java.lang.String) -> addUtf8Info
    int addMethodHandleInfo(int,int) -> addMethodHandleInfo
    int addMethodTypeInfo(int) -> addMethodTypeInfo
    int addInvokeDynamicInfo(int,int) -> addInvokeDynamicInfo
    int addDynamicInfo(int,int) -> addDynamicInfo
    int addModuleInfo(int) -> addModuleInfo
    int addPackageInfo(int) -> addPackageInfo
    java.util.Set getClassNames() -> getClassNames
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void read(java.io.DataInputStream) -> read
    java.util.Map makeItemsCache(javassist.bytecode.LongVector) -> makeItemsCache
    int readOne(java.io.DataInputStream) -> readOne
    void write(java.io.DataOutputStream) -> write
    void print() -> print
    void print(java.io.PrintWriter) -> print
    void <clinit>() -> <clinit>
javassist.bytecode.ConstantAttribute -> javassist.bytecode.ConstantAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,int) -> <init>
    int getConstantValue() -> getConstantValue
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.DeprecatedAttribute -> javassist.bytecode.DeprecatedAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.Descriptor -> javassist.bytecode.Descriptor:
    void <init>() -> <init>
    java.lang.String toJvmName(java.lang.String) -> toJvmName
    java.lang.String toJavaName(java.lang.String) -> toJavaName
    java.lang.String toJvmName(javassist.CtClass) -> toJvmName
    java.lang.String toClassName(java.lang.String) -> toClassName
    java.lang.String of(java.lang.String) -> of
    java.lang.String rename(java.lang.String,java.lang.String,java.lang.String) -> rename
    java.lang.String rename(java.lang.String,java.util.Map) -> rename
    java.lang.String of(javassist.CtClass) -> of
    void toDescriptor(java.lang.StringBuffer,javassist.CtClass) -> toDescriptor
    java.lang.String ofConstructor(javassist.CtClass[]) -> ofConstructor
    java.lang.String ofMethod(javassist.CtClass,javassist.CtClass[]) -> ofMethod
    java.lang.String ofParameters(javassist.CtClass[]) -> ofParameters
    java.lang.String appendParameter(java.lang.String,java.lang.String) -> appendParameter
    java.lang.String insertParameter(java.lang.String,java.lang.String) -> insertParameter
    java.lang.String appendParameter(javassist.CtClass,java.lang.String) -> appendParameter
    java.lang.String insertParameter(javassist.CtClass,java.lang.String) -> insertParameter
    java.lang.String changeReturnType(java.lang.String,java.lang.String) -> changeReturnType
    javassist.CtClass[] getParameterTypes(java.lang.String,javassist.ClassPool) -> getParameterTypes
    boolean eqParamTypes(java.lang.String,java.lang.String) -> eqParamTypes
    java.lang.String getParamDescriptor(java.lang.String) -> getParamDescriptor
    javassist.CtClass getReturnType(java.lang.String,javassist.ClassPool) -> getReturnType
    int numOfParameters(java.lang.String) -> numOfParameters
    javassist.CtClass toCtClass(java.lang.String,javassist.ClassPool) -> toCtClass
    int toCtClass(javassist.ClassPool,java.lang.String,int,javassist.CtClass[],int) -> toCtClass
    javassist.CtClass toPrimitiveClass(char) -> toPrimitiveClass
    int arrayDimension(java.lang.String) -> arrayDimension
    java.lang.String toArrayComponent(java.lang.String,int) -> toArrayComponent
    int dataSize(java.lang.String) -> dataSize
    int paramSize(java.lang.String) -> paramSize
    int dataSize(java.lang.String,boolean) -> dataSize
    java.lang.String toString(java.lang.String) -> toString
javassist.bytecode.Descriptor$Iterator -> javassist.bytecode.Descriptor$Iterator:
    java.lang.String desc -> desc
    int index -> index
    int curPos -> curPos
    boolean param -> param
    void <init>(java.lang.String) -> <init>
    boolean hasNext() -> hasNext
    boolean isParameter() -> isParameter
    char currentChar() -> currentChar
    boolean is2byte() -> is2byte
    int next() -> next
javassist.bytecode.Descriptor$PrettyPrinter -> javassist.bytecode.Descriptor$PrettyPrinter:
    void <init>() -> <init>
    java.lang.String toString(java.lang.String) -> toString
    int readType(java.lang.StringBuffer,int,java.lang.String) -> readType
javassist.bytecode.DoubleInfo -> javassist.bytecode.DoubleInfo:
    int tag -> tag
    double value -> value
    void <init>(double,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.DuplicateMemberException -> javassist.bytecode.DuplicateMemberException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
javassist.bytecode.DynamicInfo -> javassist.bytecode.DynamicInfo:
    int tag -> tag
    int bootstrap -> bootstrap
    int nameAndType -> nameAndType
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.EnclosingMethodAttribute -> javassist.bytecode.EnclosingMethodAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    int classIndex() -> classIndex
    int methodIndex() -> methodIndex
    java.lang.String className() -> className
    java.lang.String methodName() -> methodName
    java.lang.String methodDescriptor() -> methodDescriptor
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.ExceptionTable -> javassist.bytecode.ExceptionTable:
    javassist.bytecode.ConstPool constPool -> constPool
    java.util.List entries -> entries
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.io.DataInputStream) -> <init>
    java.lang.Object clone() -> clone
    int size() -> size
    int startPc(int) -> startPc
    void setStartPc(int,int) -> setStartPc
    int endPc(int) -> endPc
    void setEndPc(int,int) -> setEndPc
    int handlerPc(int) -> handlerPc
    void setHandlerPc(int,int) -> setHandlerPc
    int catchType(int) -> catchType
    void setCatchType(int,int) -> setCatchType
    void add(int,javassist.bytecode.ExceptionTable,int) -> add
    void add(int,int,int,int,int) -> add
    void add(int,int,int,int) -> add
    void remove(int) -> remove
    javassist.bytecode.ExceptionTable copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void shiftPc(int,int,boolean) -> shiftPc
    int shiftPc(int,int,int,boolean) -> shiftPc
    void write(java.io.DataOutputStream) -> write
javassist.bytecode.ExceptionTableEntry -> javassist.bytecode.ExceptionTableEntry:
    int startPc -> startPc
    int endPc -> endPc
    int handlerPc -> handlerPc
    int catchType -> catchType
    void <init>(int,int,int,int) -> <init>
javassist.bytecode.ExceptionsAttribute -> javassist.bytecode.ExceptionsAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,javassist.bytecode.ExceptionsAttribute,java.util.Map) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void copyFrom(javassist.bytecode.ExceptionsAttribute,java.util.Map) -> copyFrom
    int[] getExceptionIndexes() -> getExceptionIndexes
    java.lang.String[] getExceptions() -> getExceptions
    void setExceptionIndexes(int[]) -> setExceptionIndexes
    void setExceptions(java.lang.String[]) -> setExceptions
    int tableLength() -> tableLength
    int getException(int) -> getException
javassist.bytecode.FieldInfo -> javassist.bytecode.FieldInfo:
    javassist.bytecode.ConstPool constPool -> constPool
    int accessFlags -> accessFlags
    int name -> name
    java.lang.String cachedName -> cachedName
    java.lang.String cachedType -> cachedType
    int descriptor -> descriptor
    java.util.List attribute -> attribute
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.io.DataInputStream) -> <init>
    java.lang.String toString() -> toString
    void compact(javassist.bytecode.ConstPool) -> compact
    void prune(javassist.bytecode.ConstPool) -> prune
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getAccessFlags() -> getAccessFlags
    void setAccessFlags(int) -> setAccessFlags
    java.lang.String getDescriptor() -> getDescriptor
    void setDescriptor(java.lang.String) -> setDescriptor
    int getConstantValue() -> getConstantValue
    java.util.List getAttributes() -> getAttributes
    javassist.bytecode.AttributeInfo getAttribute(java.lang.String) -> getAttribute
    javassist.bytecode.AttributeInfo removeAttribute(java.lang.String) -> removeAttribute
    void addAttribute(javassist.bytecode.AttributeInfo) -> addAttribute
    void read(java.io.DataInputStream) -> read
    void write(java.io.DataOutputStream) -> write
javassist.bytecode.FieldrefInfo -> javassist.bytecode.FieldrefInfo:
    int tag -> tag
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int getTag() -> getTag
    java.lang.String getTagName() -> getTagName
    int copy2(javassist.bytecode.ConstPool,int,int) -> copy2
javassist.bytecode.FloatInfo -> javassist.bytecode.FloatInfo:
    int tag -> tag
    float value -> value
    void <init>(float,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.InnerClassesAttribute -> javassist.bytecode.InnerClassesAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    int tableLength() -> tableLength
    int innerClassIndex(int) -> innerClassIndex
    java.lang.String innerClass(int) -> innerClass
    void setInnerClassIndex(int,int) -> setInnerClassIndex
    int outerClassIndex(int) -> outerClassIndex
    java.lang.String outerClass(int) -> outerClass
    void setOuterClassIndex(int,int) -> setOuterClassIndex
    int innerNameIndex(int) -> innerNameIndex
    java.lang.String innerName(int) -> innerName
    void setInnerNameIndex(int,int) -> setInnerNameIndex
    int accessFlags(int) -> accessFlags
    void setAccessFlags(int,int) -> setAccessFlags
    int find(java.lang.String) -> find
    void append(java.lang.String,java.lang.String,java.lang.String,int) -> append
    void append(int,int,int,int) -> append
    int remove(int) -> remove
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.InstructionPrinter -> javassist.bytecode.InstructionPrinter:
    java.lang.String[] opcodes -> opcodes
    java.io.PrintStream stream -> stream
    void <init>(java.io.PrintStream) -> <init>
    void print(javassist.CtMethod,java.io.PrintStream) -> print
    void print(javassist.CtMethod) -> print
    java.lang.String instructionString(javassist.bytecode.CodeIterator,int,javassist.bytecode.ConstPool) -> instructionString
    java.lang.String wide(javassist.bytecode.CodeIterator,int) -> wide
    java.lang.String arrayInfo(int) -> arrayInfo
    java.lang.String classInfo(javassist.bytecode.ConstPool,int) -> classInfo
    java.lang.String interfaceMethodInfo(javassist.bytecode.ConstPool,int) -> interfaceMethodInfo
    java.lang.String methodInfo(javassist.bytecode.ConstPool,int) -> methodInfo
    java.lang.String fieldInfo(javassist.bytecode.ConstPool,int) -> fieldInfo
    java.lang.String lookupSwitch(javassist.bytecode.CodeIterator,int) -> lookupSwitch
    java.lang.String tableSwitch(javassist.bytecode.CodeIterator,int) -> tableSwitch
    java.lang.String ldc(javassist.bytecode.ConstPool,int) -> ldc
    void <clinit>() -> <clinit>
javassist.bytecode.IntegerInfo -> javassist.bytecode.IntegerInfo:
    int tag -> tag
    int value -> value
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.InterfaceMethodrefInfo -> javassist.bytecode.InterfaceMethodrefInfo:
    int tag -> tag
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int getTag() -> getTag
    java.lang.String getTagName() -> getTagName
    int copy2(javassist.bytecode.ConstPool,int,int) -> copy2
javassist.bytecode.InvokeDynamicInfo -> javassist.bytecode.InvokeDynamicInfo:
    int tag -> tag
    int bootstrap -> bootstrap
    int nameAndType -> nameAndType
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.LineNumberAttribute -> javassist.bytecode.LineNumberAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    int tableLength() -> tableLength
    int startPc(int) -> startPc
    int lineNumber(int) -> lineNumber
    int toLineNumber(int) -> toLineNumber
    int toStartPc(int) -> toStartPc
    javassist.bytecode.LineNumberAttribute$Pc toNearPc(int) -> toNearPc
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void shiftPc(int,int,boolean) -> shiftPc
javassist.bytecode.LineNumberAttribute$Pc -> javassist.bytecode.LineNumberAttribute$Pc:
    int index -> index
    int line -> line
    void <init>() -> <init>
javassist.bytecode.LocalVariableAttribute -> javassist.bytecode.LocalVariableAttribute:
    java.lang.String tag -> tag
    java.lang.String typeTag -> typeTag
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void addEntry(int,int,int,int,int) -> addEntry
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    java.lang.String renameEntry(java.lang.String,java.lang.String,java.lang.String) -> renameEntry
    void renameClass(java.util.Map) -> renameClass
    java.lang.String renameEntry(java.lang.String,java.util.Map) -> renameEntry
    void shiftIndex(int,int) -> shiftIndex
    int tableLength() -> tableLength
    int startPc(int) -> startPc
    int codeLength(int) -> codeLength
    void shiftPc(int,int,boolean) -> shiftPc
    int nameIndex(int) -> nameIndex
    java.lang.String variableName(int) -> variableName
    int descriptorIndex(int) -> descriptorIndex
    int signatureIndex(int) -> signatureIndex
    java.lang.String descriptor(int) -> descriptor
    java.lang.String signature(int) -> signature
    int index(int) -> index
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    javassist.bytecode.LocalVariableAttribute makeThisAttr(javassist.bytecode.ConstPool,byte[]) -> makeThisAttr
javassist.bytecode.LocalVariableTypeAttribute -> javassist.bytecode.LocalVariableTypeAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    java.lang.String renameEntry(java.lang.String,java.lang.String,java.lang.String) -> renameEntry
    java.lang.String renameEntry(java.lang.String,java.util.Map) -> renameEntry
    javassist.bytecode.LocalVariableAttribute makeThisAttr(javassist.bytecode.ConstPool,byte[]) -> makeThisAttr
javassist.bytecode.LongInfo -> javassist.bytecode.LongInfo:
    int tag -> tag
    long value -> value
    void <init>(long,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.LongVector -> javassist.bytecode.LongVector:
    int ASIZE -> ASIZE
    int ABITS -> ABITS
    int VSIZE -> VSIZE
    javassist.bytecode.ConstInfo[][] objects -> objects
    int elements -> elements
    void <init>() -> <init>
    void <init>(int) -> <init>
    int size() -> size
    int capacity() -> capacity
    javassist.bytecode.ConstInfo elementAt(int) -> elementAt
    void addElement(javassist.bytecode.ConstInfo) -> addElement
javassist.bytecode.MemberrefInfo -> javassist.bytecode.MemberrefInfo:
    int classIndex -> classIndex
    int nameAndTypeIndex -> nameAndTypeIndex
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    int copy2(javassist.bytecode.ConstPool,int,int) -> copy2
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
    java.lang.String getTagName() -> getTagName
javassist.bytecode.MethodHandleInfo -> javassist.bytecode.MethodHandleInfo:
    int tag -> tag
    int refKind -> refKind
    int refIndex -> refIndex
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.MethodInfo -> javassist.bytecode.MethodInfo:
    javassist.bytecode.ConstPool constPool -> constPool
    int accessFlags -> accessFlags
    int name -> name
    java.lang.String cachedName -> cachedName
    int descriptor -> descriptor
    java.util.List attribute -> attribute
    boolean doPreverify -> doPreverify
    java.lang.String nameInit -> nameInit
    java.lang.String nameClinit -> nameClinit
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,javassist.bytecode.MethodInfo,java.util.Map) -> <init>
    java.lang.String toString() -> toString
    void compact(javassist.bytecode.ConstPool) -> compact
    void prune(javassist.bytecode.ConstPool) -> prune
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    boolean isMethod() -> isMethod
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    boolean isConstructor() -> isConstructor
    boolean isStaticInitializer() -> isStaticInitializer
    int getAccessFlags() -> getAccessFlags
    void setAccessFlags(int) -> setAccessFlags
    java.lang.String getDescriptor() -> getDescriptor
    void setDescriptor(java.lang.String) -> setDescriptor
    java.util.List getAttributes() -> getAttributes
    javassist.bytecode.AttributeInfo getAttribute(java.lang.String) -> getAttribute
    javassist.bytecode.AttributeInfo removeAttribute(java.lang.String) -> removeAttribute
    void addAttribute(javassist.bytecode.AttributeInfo) -> addAttribute
    javassist.bytecode.ExceptionsAttribute getExceptionsAttribute() -> getExceptionsAttribute
    javassist.bytecode.CodeAttribute getCodeAttribute() -> getCodeAttribute
    void removeExceptionsAttribute() -> removeExceptionsAttribute
    void setExceptionsAttribute(javassist.bytecode.ExceptionsAttribute) -> setExceptionsAttribute
    void removeCodeAttribute() -> removeCodeAttribute
    void setCodeAttribute(javassist.bytecode.CodeAttribute) -> setCodeAttribute
    void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile) -> rebuildStackMapIf6
    void rebuildStackMap(javassist.ClassPool) -> rebuildStackMap
    void rebuildStackMapForME(javassist.ClassPool) -> rebuildStackMapForME
    int getLineNumber(int) -> getLineNumber
    void setSuperclass(java.lang.String) -> setSuperclass
    void read(javassist.bytecode.MethodInfo,java.lang.String,java.util.Map) -> read
    void read(java.io.DataInputStream) -> read
    void write(java.io.DataOutputStream) -> write
    void <clinit>() -> <clinit>
javassist.bytecode.MethodParametersAttribute -> javassist.bytecode.MethodParametersAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String[],int[]) -> <init>
    int size() -> size
    int name(int) -> name
    int accessFlags(int) -> accessFlags
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.MethodTypeInfo -> javassist.bytecode.MethodTypeInfo:
    int tag -> tag
    int descriptor -> descriptor
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    void renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.Map) -> renameClass
    void renameClass(javassist.bytecode.ConstPool,java.util.Map,java.util.Map) -> renameClass
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.MethodrefInfo -> javassist.bytecode.MethodrefInfo:
    int tag -> tag
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int getTag() -> getTag
    java.lang.String getTagName() -> getTagName
    int copy2(javassist.bytecode.ConstPool,int,int) -> copy2
javassist.bytecode.Mnemonic -> javassist.bytecode.Mnemonic:
    java.lang.String[] OPCODE -> OPCODE
    void <clinit>() -> <clinit>
javassist.bytecode.ModuleInfo -> javassist.bytecode.ModuleInfo:
    int tag -> tag
    int name -> name
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    java.lang.String getModuleName(javassist.bytecode.ConstPool) -> getModuleName
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.NameAndTypeInfo -> javassist.bytecode.NameAndTypeInfo:
    int tag -> tag
    int memberName -> memberName
    int typeDescriptor -> typeDescriptor
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    void renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.Map) -> renameClass
    void renameClass(javassist.bytecode.ConstPool,java.util.Map,java.util.Map) -> renameClass
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.NestHostAttribute -> javassist.bytecode.NestHostAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,int) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    int hostClassIndex() -> hostClassIndex
javassist.bytecode.NestMembersAttribute -> javassist.bytecode.NestMembersAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    int numberOfClasses() -> numberOfClasses
    int memberClass(int) -> memberClass
javassist.bytecode.Opcode -> javassist.bytecode.Opcode:
    int AALOAD -> AALOAD
    int AASTORE -> AASTORE
    int ACONST_NULL -> ACONST_NULL
    int ALOAD -> ALOAD
    int ALOAD_0 -> ALOAD_0
    int ALOAD_1 -> ALOAD_1
    int ALOAD_2 -> ALOAD_2
    int ALOAD_3 -> ALOAD_3
    int ANEWARRAY -> ANEWARRAY
    int ARETURN -> ARETURN
    int ARRAYLENGTH -> ARRAYLENGTH
    int ASTORE -> ASTORE
    int ASTORE_0 -> ASTORE_0
    int ASTORE_1 -> ASTORE_1
    int ASTORE_2 -> ASTORE_2
    int ASTORE_3 -> ASTORE_3
    int ATHROW -> ATHROW
    int BALOAD -> BALOAD
    int BASTORE -> BASTORE
    int BIPUSH -> BIPUSH
    int CALOAD -> CALOAD
    int CASTORE -> CASTORE
    int CHECKCAST -> CHECKCAST
    int D2F -> D2F
    int D2I -> D2I
    int D2L -> D2L
    int DADD -> DADD
    int DALOAD -> DALOAD
    int DASTORE -> DASTORE
    int DCMPG -> DCMPG
    int DCMPL -> DCMPL
    int DCONST_0 -> DCONST_0
    int DCONST_1 -> DCONST_1
    int DDIV -> DDIV
    int DLOAD -> DLOAD
    int DLOAD_0 -> DLOAD_0
    int DLOAD_1 -> DLOAD_1
    int DLOAD_2 -> DLOAD_2
    int DLOAD_3 -> DLOAD_3
    int DMUL -> DMUL
    int DNEG -> DNEG
    int DREM -> DREM
    int DRETURN -> DRETURN
    int DSTORE -> DSTORE
    int DSTORE_0 -> DSTORE_0
    int DSTORE_1 -> DSTORE_1
    int DSTORE_2 -> DSTORE_2
    int DSTORE_3 -> DSTORE_3
    int DSUB -> DSUB
    int DUP -> DUP
    int DUP2 -> DUP2
    int DUP2_X1 -> DUP2_X1
    int DUP2_X2 -> DUP2_X2
    int DUP_X1 -> DUP_X1
    int DUP_X2 -> DUP_X2
    int F2D -> F2D
    int F2I -> F2I
    int F2L -> F2L
    int FADD -> FADD
    int FALOAD -> FALOAD
    int FASTORE -> FASTORE
    int FCMPG -> FCMPG
    int FCMPL -> FCMPL
    int FCONST_0 -> FCONST_0
    int FCONST_1 -> FCONST_1
    int FCONST_2 -> FCONST_2
    int FDIV -> FDIV
    int FLOAD -> FLOAD
    int FLOAD_0 -> FLOAD_0
    int FLOAD_1 -> FLOAD_1
    int FLOAD_2 -> FLOAD_2
    int FLOAD_3 -> FLOAD_3
    int FMUL -> FMUL
    int FNEG -> FNEG
    int FREM -> FREM
    int FRETURN -> FRETURN
    int FSTORE -> FSTORE
    int FSTORE_0 -> FSTORE_0
    int FSTORE_1 -> FSTORE_1
    int FSTORE_2 -> FSTORE_2
    int FSTORE_3 -> FSTORE_3
    int FSUB -> FSUB
    int GETFIELD -> GETFIELD
    int GETSTATIC -> GETSTATIC
    int GOTO -> GOTO
    int GOTO_W -> GOTO_W
    int I2B -> I2B
    int I2C -> I2C
    int I2D -> I2D
    int I2F -> I2F
    int I2L -> I2L
    int I2S -> I2S
    int IADD -> IADD
    int IALOAD -> IALOAD
    int IAND -> IAND
    int IASTORE -> IASTORE
    int ICONST_0 -> ICONST_0
    int ICONST_1 -> ICONST_1
    int ICONST_2 -> ICONST_2
    int ICONST_3 -> ICONST_3
    int ICONST_4 -> ICONST_4
    int ICONST_5 -> ICONST_5
    int ICONST_M1 -> ICONST_M1
    int IDIV -> IDIV
    int IFEQ -> IFEQ
    int IFGE -> IFGE
    int IFGT -> IFGT
    int IFLE -> IFLE
    int IFLT -> IFLT
    int IFNE -> IFNE
    int IFNONNULL -> IFNONNULL
    int IFNULL -> IFNULL
    int IF_ACMPEQ -> IF_ACMPEQ
    int IF_ACMPNE -> IF_ACMPNE
    int IF_ICMPEQ -> IF_ICMPEQ
    int IF_ICMPGE -> IF_ICMPGE
    int IF_ICMPGT -> IF_ICMPGT
    int IF_ICMPLE -> IF_ICMPLE
    int IF_ICMPLT -> IF_ICMPLT
    int IF_ICMPNE -> IF_ICMPNE
    int IINC -> IINC
    int ILOAD -> ILOAD
    int ILOAD_0 -> ILOAD_0
    int ILOAD_1 -> ILOAD_1
    int ILOAD_2 -> ILOAD_2
    int ILOAD_3 -> ILOAD_3
    int IMUL -> IMUL
    int INEG -> INEG
    int INSTANCEOF -> INSTANCEOF
    int INVOKEDYNAMIC -> INVOKEDYNAMIC
    int INVOKEINTERFACE -> INVOKEINTERFACE
    int INVOKESPECIAL -> INVOKESPECIAL
    int INVOKESTATIC -> INVOKESTATIC
    int INVOKEVIRTUAL -> INVOKEVIRTUAL
    int IOR -> IOR
    int IREM -> IREM
    int IRETURN -> IRETURN
    int ISHL -> ISHL
    int ISHR -> ISHR
    int ISTORE -> ISTORE
    int ISTORE_0 -> ISTORE_0
    int ISTORE_1 -> ISTORE_1
    int ISTORE_2 -> ISTORE_2
    int ISTORE_3 -> ISTORE_3
    int ISUB -> ISUB
    int IUSHR -> IUSHR
    int IXOR -> IXOR
    int JSR -> JSR
    int JSR_W -> JSR_W
    int L2D -> L2D
    int L2F -> L2F
    int L2I -> L2I
    int LADD -> LADD
    int LALOAD -> LALOAD
    int LAND -> LAND
    int LASTORE -> LASTORE
    int LCMP -> LCMP
    int LCONST_0 -> LCONST_0
    int LCONST_1 -> LCONST_1
    int LDC -> LDC
    int LDC2_W -> LDC2_W
    int LDC_W -> LDC_W
    int LDIV -> LDIV
    int LLOAD -> LLOAD
    int LLOAD_0 -> LLOAD_0
    int LLOAD_1 -> LLOAD_1
    int LLOAD_2 -> LLOAD_2
    int LLOAD_3 -> LLOAD_3
    int LMUL -> LMUL
    int LNEG -> LNEG
    int LOOKUPSWITCH -> LOOKUPSWITCH
    int LOR -> LOR
    int LREM -> LREM
    int LRETURN -> LRETURN
    int LSHL -> LSHL
    int LSHR -> LSHR
    int LSTORE -> LSTORE
    int LSTORE_0 -> LSTORE_0
    int LSTORE_1 -> LSTORE_1
    int LSTORE_2 -> LSTORE_2
    int LSTORE_3 -> LSTORE_3
    int LSUB -> LSUB
    int LUSHR -> LUSHR
    int LXOR -> LXOR
    int MONITORENTER -> MONITORENTER
    int MONITOREXIT -> MONITOREXIT
    int MULTIANEWARRAY -> MULTIANEWARRAY
    int NEW -> NEW
    int NEWARRAY -> NEWARRAY
    int NOP -> NOP
    int POP -> POP
    int POP2 -> POP2
    int PUTFIELD -> PUTFIELD
    int PUTSTATIC -> PUTSTATIC
    int RET -> RET
    int RETURN -> RETURN
    int SALOAD -> SALOAD
    int SASTORE -> SASTORE
    int SIPUSH -> SIPUSH
    int SWAP -> SWAP
    int TABLESWITCH -> TABLESWITCH
    int WIDE -> WIDE
    int T_BOOLEAN -> T_BOOLEAN
    int T_CHAR -> T_CHAR
    int T_FLOAT -> T_FLOAT
    int T_DOUBLE -> T_DOUBLE
    int T_BYTE -> T_BYTE
    int T_SHORT -> T_SHORT
    int T_INT -> T_INT
    int T_LONG -> T_LONG
    int[] STACK_GROW -> STACK_GROW
    void <clinit>() -> <clinit>
javassist.bytecode.PackageInfo -> javassist.bytecode.PackageInfo:
    int tag -> tag
    int name -> name
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    java.lang.String getPackageName(javassist.bytecode.ConstPool) -> getPackageName
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.ParameterAnnotationsAttribute -> javassist.bytecode.ParameterAnnotationsAttribute:
    java.lang.String visibleTag -> visibleTag
    java.lang.String invisibleTag -> invisibleTag
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    int numParameters() -> numParameters
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    javassist.bytecode.annotation.Annotation[][] getAnnotations() -> getAnnotations
    void setAnnotations(javassist.bytecode.annotation.Annotation[][]) -> setAnnotations
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    java.lang.String toString() -> toString
javassist.bytecode.SignatureAttribute -> javassist.bytecode.SignatureAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    java.lang.String getSignature() -> getSignature
    void setSignature(java.lang.String) -> setSignature
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    java.lang.String renameClass(java.lang.String,java.lang.String,java.lang.String) -> renameClass
    java.lang.String renameClass(java.lang.String,java.util.Map) -> renameClass
    boolean isNamePart(int) -> isNamePart
    javassist.bytecode.SignatureAttribute$ClassSignature toClassSignature(java.lang.String) -> toClassSignature
    javassist.bytecode.SignatureAttribute$MethodSignature toMethodSignature(java.lang.String) -> toMethodSignature
    javassist.bytecode.SignatureAttribute$ObjectType toFieldSignature(java.lang.String) -> toFieldSignature
    javassist.bytecode.SignatureAttribute$Type toTypeSignature(java.lang.String) -> toTypeSignature
    javassist.bytecode.SignatureAttribute$ClassSignature parseSig(java.lang.String) -> parseSig
    javassist.bytecode.SignatureAttribute$MethodSignature parseMethodSig(java.lang.String) -> parseMethodSig
    javassist.bytecode.SignatureAttribute$TypeParameter[] parseTypeParams(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseTypeParams
    javassist.bytecode.SignatureAttribute$ObjectType parseObjectType(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor,boolean) -> parseObjectType
    javassist.bytecode.SignatureAttribute$ClassType parseClassType(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseClassType
    javassist.bytecode.SignatureAttribute$ClassType parseClassType2(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor,javassist.bytecode.SignatureAttribute$ClassType) -> parseClassType2
    javassist.bytecode.SignatureAttribute$TypeArgument[] parseTypeArgs(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseTypeArgs
    javassist.bytecode.SignatureAttribute$ObjectType parseArray(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseArray
    javassist.bytecode.SignatureAttribute$Type parseType(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseType
    javassist.bytecode.BadBytecode error(java.lang.String) -> error
    javassist.bytecode.BadBytecode access$000(java.lang.String) -> access$000
javassist.bytecode.SignatureAttribute$1 -> javassist.bytecode.SignatureAttribute$1:
javassist.bytecode.SignatureAttribute$ArrayType -> javassist.bytecode.SignatureAttribute$ArrayType:
    int dim -> dim
    javassist.bytecode.SignatureAttribute$Type componentType -> componentType
    void <init>(int,javassist.bytecode.SignatureAttribute$Type) -> <init>
    int getDimension() -> getDimension
    javassist.bytecode.SignatureAttribute$Type getComponentType() -> getComponentType
    java.lang.String toString() -> toString
    void encode(java.lang.StringBuffer) -> encode
javassist.bytecode.SignatureAttribute$BaseType -> javassist.bytecode.SignatureAttribute$BaseType:
    char descriptor -> descriptor
    void <init>(char) -> <init>
    void <init>(java.lang.String) -> <init>
    char getDescriptor() -> getDescriptor
    javassist.CtClass getCtlass() -> getCtlass
    java.lang.String toString() -> toString
    void encode(java.lang.StringBuffer) -> encode
javassist.bytecode.SignatureAttribute$ClassSignature -> javassist.bytecode.SignatureAttribute$ClassSignature:
    javassist.bytecode.SignatureAttribute$TypeParameter[] params -> params
    javassist.bytecode.SignatureAttribute$ClassType superClass -> superClass
    javassist.bytecode.SignatureAttribute$ClassType[] interfaces -> interfaces
    void <init>(javassist.bytecode.SignatureAttribute$TypeParameter[],javassist.bytecode.SignatureAttribute$ClassType,javassist.bytecode.SignatureAttribute$ClassType[]) -> <init>
    void <init>(javassist.bytecode.SignatureAttribute$TypeParameter[]) -> <init>
    javassist.bytecode.SignatureAttribute$TypeParameter[] getParameters() -> getParameters
    javassist.bytecode.SignatureAttribute$ClassType getSuperClass() -> getSuperClass
    javassist.bytecode.SignatureAttribute$ClassType[] getInterfaces() -> getInterfaces
    java.lang.String toString() -> toString
    java.lang.String encode() -> encode
javassist.bytecode.SignatureAttribute$ClassType -> javassist.bytecode.SignatureAttribute$ClassType:
    java.lang.String name -> name
    javassist.bytecode.SignatureAttribute$TypeArgument[] arguments -> arguments
    javassist.bytecode.SignatureAttribute$ClassType OBJECT -> OBJECT
    javassist.bytecode.SignatureAttribute$ClassType make(java.lang.String,int,int,javassist.bytecode.SignatureAttribute$TypeArgument[],javassist.bytecode.SignatureAttribute$ClassType) -> make
    void <init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute$TypeArgument[]) -> <init>
    void <init>(java.lang.String,javassist.bytecode.SignatureAttribute$TypeArgument[]) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    javassist.bytecode.SignatureAttribute$TypeArgument[] getTypeArguments() -> getTypeArguments
    javassist.bytecode.SignatureAttribute$ClassType getDeclaringClass() -> getDeclaringClass
    java.lang.String toString() -> toString
    java.lang.String toString2(java.lang.StringBuffer) -> toString2
    java.lang.String jvmTypeName() -> jvmTypeName
    void encode(java.lang.StringBuffer) -> encode
    void encode2(java.lang.StringBuffer) -> encode2
    void <clinit>() -> <clinit>
javassist.bytecode.SignatureAttribute$Cursor -> javassist.bytecode.SignatureAttribute$Cursor:
    int position -> position
    void <init>() -> <init>
    int indexOf(java.lang.String,int) -> indexOf
    void <init>(javassist.bytecode.SignatureAttribute$1) -> <init>
javassist.bytecode.SignatureAttribute$MethodSignature -> javassist.bytecode.SignatureAttribute$MethodSignature:
    javassist.bytecode.SignatureAttribute$TypeParameter[] typeParams -> typeParams
    javassist.bytecode.SignatureAttribute$Type[] params -> params
    javassist.bytecode.SignatureAttribute$Type retType -> retType
    javassist.bytecode.SignatureAttribute$ObjectType[] exceptions -> exceptions
    void <init>(javassist.bytecode.SignatureAttribute$TypeParameter[],javassist.bytecode.SignatureAttribute$Type[],javassist.bytecode.SignatureAttribute$Type,javassist.bytecode.SignatureAttribute$ObjectType[]) -> <init>
    javassist.bytecode.SignatureAttribute$TypeParameter[] getTypeParameters() -> getTypeParameters
    javassist.bytecode.SignatureAttribute$Type[] getParameterTypes() -> getParameterTypes
    javassist.bytecode.SignatureAttribute$Type getReturnType() -> getReturnType
    javassist.bytecode.SignatureAttribute$ObjectType[] getExceptionTypes() -> getExceptionTypes
    java.lang.String toString() -> toString
    java.lang.String encode() -> encode
javassist.bytecode.SignatureAttribute$NestedClassType -> javassist.bytecode.SignatureAttribute$NestedClassType:
    javassist.bytecode.SignatureAttribute$ClassType parent -> parent
    void <init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute$TypeArgument[],javassist.bytecode.SignatureAttribute$ClassType) -> <init>
    void <init>(javassist.bytecode.SignatureAttribute$ClassType,java.lang.String,javassist.bytecode.SignatureAttribute$TypeArgument[]) -> <init>
    javassist.bytecode.SignatureAttribute$ClassType getDeclaringClass() -> getDeclaringClass
javassist.bytecode.SignatureAttribute$ObjectType -> javassist.bytecode.SignatureAttribute$ObjectType:
    void <init>() -> <init>
    java.lang.String encode() -> encode
javassist.bytecode.SignatureAttribute$Type -> javassist.bytecode.SignatureAttribute$Type:
    void <init>() -> <init>
    void encode(java.lang.StringBuffer) -> encode
    void toString(java.lang.StringBuffer,javassist.bytecode.SignatureAttribute$Type[]) -> toString
    java.lang.String jvmTypeName() -> jvmTypeName
javassist.bytecode.SignatureAttribute$TypeArgument -> javassist.bytecode.SignatureAttribute$TypeArgument:
    javassist.bytecode.SignatureAttribute$ObjectType arg -> arg
    char wildcard -> wildcard
    void <init>(javassist.bytecode.SignatureAttribute$ObjectType,char) -> <init>
    void <init>(javassist.bytecode.SignatureAttribute$ObjectType) -> <init>
    void <init>() -> <init>
    javassist.bytecode.SignatureAttribute$TypeArgument subclassOf(javassist.bytecode.SignatureAttribute$ObjectType) -> subclassOf
    javassist.bytecode.SignatureAttribute$TypeArgument superOf(javassist.bytecode.SignatureAttribute$ObjectType) -> superOf
    char getKind() -> getKind
    boolean isWildcard() -> isWildcard
    javassist.bytecode.SignatureAttribute$ObjectType getType() -> getType
    java.lang.String toString() -> toString
    void encode(java.lang.StringBuffer,javassist.bytecode.SignatureAttribute$TypeArgument[]) -> encode
javassist.bytecode.SignatureAttribute$TypeParameter -> javassist.bytecode.SignatureAttribute$TypeParameter:
    java.lang.String name -> name
    javassist.bytecode.SignatureAttribute$ObjectType superClass -> superClass
    javassist.bytecode.SignatureAttribute$ObjectType[] superInterfaces -> superInterfaces
    void <init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute$ObjectType,javassist.bytecode.SignatureAttribute$ObjectType[]) -> <init>
    void <init>(java.lang.String,javassist.bytecode.SignatureAttribute$ObjectType,javassist.bytecode.SignatureAttribute$ObjectType[]) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    javassist.bytecode.SignatureAttribute$ObjectType getClassBound() -> getClassBound
    javassist.bytecode.SignatureAttribute$ObjectType[] getInterfaceBound() -> getInterfaceBound
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuffer,javassist.bytecode.SignatureAttribute$TypeParameter[]) -> toString
    void encode(java.lang.StringBuffer) -> encode
javassist.bytecode.SignatureAttribute$TypeVariable -> javassist.bytecode.SignatureAttribute$TypeVariable:
    java.lang.String name -> name
    void <init>(java.lang.String,int,int) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
    void encode(java.lang.StringBuffer) -> encode
javassist.bytecode.SourceFileAttribute -> javassist.bytecode.SourceFileAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    java.lang.String getFileName() -> getFileName
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.StackMap -> javassist.bytecode.StackMap:
    java.lang.String tag -> tag
    int TOP -> TOP
    int INTEGER -> INTEGER
    int FLOAT -> FLOAT
    int DOUBLE -> DOUBLE
    int LONG -> LONG
    int NULL -> NULL
    int THIS -> THIS
    int OBJECT -> OBJECT
    int UNINIT -> UNINIT
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    int numOfEntries() -> numOfEntries
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void insertLocal(int,int,int) -> insertLocal
    void shiftPc(int,int,boolean) -> shiftPc
    void shiftForSwitch(int,int) -> shiftForSwitch
    void removeNew(int) -> removeNew
    void print(java.io.PrintWriter) -> print
javassist.bytecode.StackMap$Copier -> javassist.bytecode.StackMap$Copier:
    byte[] dest -> dest
    javassist.bytecode.ConstPool srcCp -> srcCp
    javassist.bytecode.ConstPool destCp -> destCp
    java.util.Map classnames -> classnames
    void <init>(javassist.bytecode.StackMap,javassist.bytecode.ConstPool,java.util.Map) -> <init>
    void visit() -> visit
    int locals(int,int,int) -> locals
    int typeInfoArray(int,int,int,boolean) -> typeInfoArray
    void typeInfo(int,byte) -> typeInfo
    void objectVariable(int,int) -> objectVariable
    void uninitialized(int,int) -> uninitialized
    javassist.bytecode.StackMap getStackMap() -> getStackMap
javassist.bytecode.StackMap$InsertLocal -> javassist.bytecode.StackMap$InsertLocal:
    int varIndex -> varIndex
    int varTag -> varTag
    int varData -> varData
    void <init>(javassist.bytecode.StackMap,int,int,int) -> <init>
    int typeInfoArray(int,int,int,boolean) -> typeInfoArray
    void writeVarTypeInfo() -> writeVarTypeInfo
javassist.bytecode.StackMap$NewRemover -> javassist.bytecode.StackMap$NewRemover:
    int posOfNew -> posOfNew
    void <init>(javassist.bytecode.StackMap,int) -> <init>
    int stack(int,int,int) -> stack
    int stackTypeInfoArray(int,int,int) -> stackTypeInfoArray
javassist.bytecode.StackMap$Printer -> javassist.bytecode.StackMap$Printer:
    java.io.PrintWriter writer -> writer
    void <init>(javassist.bytecode.StackMap,java.io.PrintWriter) -> <init>
    void print() -> print
    int locals(int,int,int) -> locals
javassist.bytecode.StackMap$Shifter -> javassist.bytecode.StackMap$Shifter:
    int where -> where
    int gap -> gap
    boolean exclusive -> exclusive
    void <init>(javassist.bytecode.StackMap,int,int,boolean) -> <init>
    int locals(int,int,int) -> locals
    void uninitialized(int,int) -> uninitialized
javassist.bytecode.StackMap$SimpleCopy -> javassist.bytecode.StackMap$SimpleCopy:
    javassist.bytecode.StackMap$Writer writer -> writer
    void <init>(javassist.bytecode.StackMap) -> <init>
    byte[] doit() -> doit
    void visit() -> visit
    int locals(int,int,int) -> locals
    int typeInfoArray(int,int,int,boolean) -> typeInfoArray
    void typeInfo(int,byte) -> typeInfo
    void objectVariable(int,int) -> objectVariable
    void uninitialized(int,int) -> uninitialized
javassist.bytecode.StackMap$SwitchShifter -> javassist.bytecode.StackMap$SwitchShifter:
    int where -> where
    int gap -> gap
    void <init>(javassist.bytecode.StackMap,int,int) -> <init>
    int locals(int,int,int) -> locals
javassist.bytecode.StackMap$Walker -> javassist.bytecode.StackMap$Walker:
    byte[] info -> info
    void <init>(javassist.bytecode.StackMap) -> <init>
    void visit() -> visit
    int locals(int,int,int) -> locals
    int stack(int,int,int) -> stack
    int typeInfoArray(int,int,int,boolean) -> typeInfoArray
    int typeInfoArray2(int,int) -> typeInfoArray2
    void typeInfo(int,byte) -> typeInfo
    void objectVariable(int,int) -> objectVariable
    void uninitialized(int,int) -> uninitialized
javassist.bytecode.StackMap$Writer -> javassist.bytecode.StackMap$Writer:
    java.io.ByteArrayOutputStream output -> output
    void <init>() -> <init>
    byte[] toByteArray() -> toByteArray
    javassist.bytecode.StackMap toStackMap(javassist.bytecode.ConstPool) -> toStackMap
    void writeVerifyTypeInfo(int,int) -> writeVerifyTypeInfo
    void write16bit(int) -> write16bit
javassist.bytecode.StackMapTable -> javassist.bytecode.StackMapTable:
    java.lang.String tag -> tag
    int TOP -> TOP
    int INTEGER -> INTEGER
    int FLOAT -> FLOAT
    int DOUBLE -> DOUBLE
    int LONG -> LONG
    int NULL -> NULL
    int THIS -> THIS
    int OBJECT -> OBJECT
    int UNINIT -> UNINIT
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void insertLocal(int,int,int) -> insertLocal
    int typeTagOf(char) -> typeTagOf
    void println(java.io.PrintWriter) -> println
    void println(java.io.PrintStream) -> println
    void shiftPc(int,int,boolean) -> shiftPc
    void shiftForSwitch(int,int) -> shiftForSwitch
    void removeNew(int) -> removeNew
javassist.bytecode.StackMapTable$Copier -> javassist.bytecode.StackMapTable$Copier:
    javassist.bytecode.ConstPool srcPool -> srcPool
    javassist.bytecode.ConstPool destPool -> destPool
    java.util.Map classnames -> classnames
    void <init>(javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map) -> <init>
    int copyData(int,int) -> copyData
    int[] copyData(int[],int[]) -> copyData
javassist.bytecode.StackMapTable$InsertLocal -> javassist.bytecode.StackMapTable$InsertLocal:
    int varIndex -> varIndex
    int varTag -> varTag
    int varData -> varData
    void <init>(byte[],int,int,int) -> <init>
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
javassist.bytecode.StackMapTable$NewRemover -> javassist.bytecode.StackMapTable$NewRemover:
    int posOfNew -> posOfNew
    void <init>(byte[],int) -> <init>
    void sameLocals(int,int,int,int) -> sameLocals
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
javassist.bytecode.StackMapTable$OffsetShifter -> javassist.bytecode.StackMapTable$OffsetShifter:
    int where -> where
    int gap -> gap
    void <init>(javassist.bytecode.StackMapTable,int,int) -> <init>
    void objectOrUninitialized(int,int,int) -> objectOrUninitialized
javassist.bytecode.StackMapTable$Printer -> javassist.bytecode.StackMapTable$Printer:
    java.io.PrintWriter writer -> writer
    int offset -> offset
    void print(javassist.bytecode.StackMapTable,java.io.PrintWriter) -> print
    void <init>(byte[],java.io.PrintWriter) -> <init>
    void sameFrame(int,int) -> sameFrame
    void sameLocals(int,int,int,int) -> sameLocals
    void chopFrame(int,int,int) -> chopFrame
    void appendFrame(int,int,int[],int[]) -> appendFrame
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
    void printTypeInfo(int,int) -> printTypeInfo
javassist.bytecode.StackMapTable$RuntimeCopyException -> javassist.bytecode.StackMapTable$RuntimeCopyException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
javassist.bytecode.StackMapTable$Shifter -> javassist.bytecode.StackMapTable$Shifter:
    javassist.bytecode.StackMapTable stackMap -> stackMap
    int where -> where
    int gap -> gap
    int position -> position
    byte[] updatedInfo -> updatedInfo
    boolean exclusive -> exclusive
    void <init>(javassist.bytecode.StackMapTable,int,int,boolean) -> <init>
    void doit() -> doit
    void sameFrame(int,int) -> sameFrame
    void sameLocals(int,int,int,int) -> sameLocals
    void update(int,int,int,int) -> update
    byte[] insertGap(byte[],int,int) -> insertGap
    void chopFrame(int,int,int) -> chopFrame
    void appendFrame(int,int,int[],int[]) -> appendFrame
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
    void update(int,int) -> update
javassist.bytecode.StackMapTable$SimpleCopy -> javassist.bytecode.StackMapTable$SimpleCopy:
    javassist.bytecode.StackMapTable$Writer writer -> writer
    void <init>(byte[]) -> <init>
    byte[] doit() -> doit
    void sameFrame(int,int) -> sameFrame
    void sameLocals(int,int,int,int) -> sameLocals
    void chopFrame(int,int,int) -> chopFrame
    void appendFrame(int,int,int[],int[]) -> appendFrame
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
    int copyData(int,int) -> copyData
    int[] copyData(int[],int[]) -> copyData
javassist.bytecode.StackMapTable$SwitchShifter -> javassist.bytecode.StackMapTable$SwitchShifter:
    void <init>(javassist.bytecode.StackMapTable,int,int) -> <init>
    void update(int,int,int,int) -> update
    byte[] deleteGap(byte[],int,int) -> deleteGap
    void update(int,int) -> update
javassist.bytecode.StackMapTable$Walker -> javassist.bytecode.StackMapTable$Walker:
    byte[] info -> info
    int numOfEntries -> numOfEntries
    void <init>(javassist.bytecode.StackMapTable) -> <init>
    void <init>(byte[]) -> <init>
    int size() -> size
    void parse() -> parse
    int stackMapFrames(int,int) -> stackMapFrames
    void sameFrame(int,int) -> sameFrame
    int sameLocals(int,int) -> sameLocals
    void sameLocals(int,int,int,int) -> sameLocals
    void chopFrame(int,int,int) -> chopFrame
    int appendFrame(int,int) -> appendFrame
    void appendFrame(int,int,int[],int[]) -> appendFrame
    int fullFrame(int) -> fullFrame
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
    int verifyTypeInfo(int,int,int[],int[]) -> verifyTypeInfo
    void objectOrUninitialized(int,int,int) -> objectOrUninitialized
javassist.bytecode.StackMapTable$Writer -> javassist.bytecode.StackMapTable$Writer:
    java.io.ByteArrayOutputStream output -> output
    int numOfEntries -> numOfEntries
    void <init>(int) -> <init>
    byte[] toByteArray() -> toByteArray
    javassist.bytecode.StackMapTable toStackMapTable(javassist.bytecode.ConstPool) -> toStackMapTable
    void sameFrame(int) -> sameFrame
    void sameLocals(int,int,int) -> sameLocals
    void chopFrame(int,int) -> chopFrame
    void appendFrame(int,int[],int[]) -> appendFrame
    void fullFrame(int,int[],int[],int[],int[]) -> fullFrame
    void writeTypeInfo(int,int) -> writeTypeInfo
    void write16(int) -> write16
javassist.bytecode.StringInfo -> javassist.bytecode.StringInfo:
    int tag -> tag
    int string -> string
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.SyntheticAttribute -> javassist.bytecode.SyntheticAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.TypeAnnotationsAttribute -> javassist.bytecode.TypeAnnotationsAttribute:
    java.lang.String visibleTag -> visibleTag
    java.lang.String invisibleTag -> invisibleTag
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    int numAnnotations() -> numAnnotations
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
javassist.bytecode.TypeAnnotationsAttribute$Copier -> javassist.bytecode.TypeAnnotationsAttribute$Copier:
    javassist.bytecode.TypeAnnotationsAttribute$SubCopier sub -> sub
    void <init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> <init>
    int annotationArray(int,int) -> annotationArray
javassist.bytecode.TypeAnnotationsAttribute$Renamer -> javassist.bytecode.TypeAnnotationsAttribute$Renamer:
    javassist.bytecode.TypeAnnotationsAttribute$SubWalker sub -> sub
    void <init>(byte[],javassist.bytecode.ConstPool,java.util.Map) -> <init>
    int annotationArray(int,int) -> annotationArray
javassist.bytecode.TypeAnnotationsAttribute$SubCopier -> javassist.bytecode.TypeAnnotationsAttribute$SubCopier:
    javassist.bytecode.ConstPool srcPool -> srcPool
    javassist.bytecode.ConstPool destPool -> destPool
    java.util.Map classnames -> classnames
    javassist.bytecode.annotation.TypeAnnotationsWriter writer -> writer
    void <init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map,javassist.bytecode.annotation.TypeAnnotationsWriter) -> <init>
    void typeParameterTarget(int,int,int) -> typeParameterTarget
    void supertypeTarget(int,int) -> supertypeTarget
    void typeParameterBoundTarget(int,int,int,int) -> typeParameterBoundTarget
    void emptyTarget(int,int) -> emptyTarget
    void formalParameterTarget(int,int) -> formalParameterTarget
    void throwsTarget(int,int) -> throwsTarget
    int localvarTarget(int,int,int) -> localvarTarget
    void localvarTarget(int,int,int,int,int) -> localvarTarget
    void catchTarget(int,int) -> catchTarget
    void offsetTarget(int,int,int) -> offsetTarget
    void typeArgumentTarget(int,int,int,int) -> typeArgumentTarget
    int typePath(int,int) -> typePath
    void typePath(int,int,int) -> typePath
javassist.bytecode.TypeAnnotationsAttribute$SubWalker -> javassist.bytecode.TypeAnnotationsAttribute$SubWalker:
    byte[] info -> info
    void <init>(byte[]) -> <init>
    int targetInfo(int,int) -> targetInfo
    void typeParameterTarget(int,int,int) -> typeParameterTarget
    void supertypeTarget(int,int) -> supertypeTarget
    void typeParameterBoundTarget(int,int,int,int) -> typeParameterBoundTarget
    void emptyTarget(int,int) -> emptyTarget
    void formalParameterTarget(int,int) -> formalParameterTarget
    void throwsTarget(int,int) -> throwsTarget
    int localvarTarget(int,int,int) -> localvarTarget
    void localvarTarget(int,int,int,int,int) -> localvarTarget
    void catchTarget(int,int) -> catchTarget
    void offsetTarget(int,int,int) -> offsetTarget
    void typeArgumentTarget(int,int,int,int) -> typeArgumentTarget
    int typePath(int) -> typePath
    int typePath(int,int) -> typePath
    void typePath(int,int,int) -> typePath
javassist.bytecode.TypeAnnotationsAttribute$TAWalker -> javassist.bytecode.TypeAnnotationsAttribute$TAWalker:
    javassist.bytecode.TypeAnnotationsAttribute$SubWalker subWalker -> subWalker
    void <init>(byte[]) -> <init>
    int annotationArray(int,int) -> annotationArray
javassist.bytecode.Utf8Info -> javassist.bytecode.Utf8Info:
    int tag -> tag
    java.lang.String string -> string
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.analysis.Analyzer -> javassist.bytecode.analysis.Analyzer:
    javassist.bytecode.analysis.SubroutineScanner scanner -> scanner
    javassist.CtClass clazz -> clazz
    javassist.bytecode.analysis.Analyzer$ExceptionInfo[] exceptions -> exceptions
    javassist.bytecode.analysis.Frame[] frames -> frames
    javassist.bytecode.analysis.Subroutine[] subroutines -> subroutines
    void <init>() -> <init>
    javassist.bytecode.analysis.Frame[] analyze(javassist.CtClass,javassist.bytecode.MethodInfo) -> analyze
    javassist.bytecode.analysis.Frame[] analyze(javassist.CtMethod) -> analyze
    void analyzeNextEntry(javassist.bytecode.MethodInfo,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.IntQueue,javassist.bytecode.analysis.Executor) -> analyzeNextEntry
    javassist.bytecode.analysis.Analyzer$ExceptionInfo[] buildExceptionInfo(javassist.bytecode.MethodInfo) -> buildExceptionInfo
    javassist.bytecode.analysis.Frame firstFrame(javassist.bytecode.MethodInfo,int,int) -> firstFrame
    int getNext(javassist.bytecode.CodeIterator,int,int) -> getNext
    int lookAhead(javassist.bytecode.CodeIterator,int) -> lookAhead
    void merge(javassist.bytecode.analysis.IntQueue,javassist.bytecode.analysis.Frame,int) -> merge
    void mergeExceptionHandlers(javassist.bytecode.analysis.IntQueue,javassist.bytecode.MethodInfo,int,javassist.bytecode.analysis.Frame) -> mergeExceptionHandlers
    void mergeJsr(javassist.bytecode.analysis.IntQueue,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine,int,int) -> mergeJsr
    void mergeLookupSwitch(javassist.bytecode.analysis.IntQueue,int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame) -> mergeLookupSwitch
    void mergeRet(javassist.bytecode.analysis.IntQueue,javassist.bytecode.CodeIterator,int,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> mergeRet
    void mergeTableSwitch(javassist.bytecode.analysis.IntQueue,int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame) -> mergeTableSwitch
    javassist.bytecode.analysis.Type zeroExtend(javassist.bytecode.analysis.Type) -> zeroExtend
javassist.bytecode.analysis.Analyzer$1 -> javassist.bytecode.analysis.Analyzer$1:
javassist.bytecode.analysis.Analyzer$ExceptionInfo -> javassist.bytecode.analysis.Analyzer$ExceptionInfo:
    int end -> end
    int handler -> handler
    int start -> start
    javassist.bytecode.analysis.Type type -> type
    void <init>(int,int,int,javassist.bytecode.analysis.Type) -> <init>
    void <init>(int,int,int,javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Analyzer$1) -> <init>
    int access$100(javassist.bytecode.analysis.Analyzer$ExceptionInfo) -> access$100
    int access$200(javassist.bytecode.analysis.Analyzer$ExceptionInfo) -> access$200
    javassist.bytecode.analysis.Type access$300(javassist.bytecode.analysis.Analyzer$ExceptionInfo) -> access$300
    int access$400(javassist.bytecode.analysis.Analyzer$ExceptionInfo) -> access$400
javassist.bytecode.analysis.ControlFlow -> javassist.bytecode.analysis.ControlFlow:
    javassist.CtClass clazz -> clazz
    javassist.bytecode.MethodInfo methodInfo -> methodInfo
    javassist.bytecode.analysis.ControlFlow$Block[] basicBlocks -> basicBlocks
    javassist.bytecode.analysis.Frame[] frames -> frames
    void <init>(javassist.CtMethod) -> <init>
    void <init>(javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.bytecode.analysis.ControlFlow$Block[] basicBlocks() -> basicBlocks
    javassist.bytecode.analysis.Frame frameAt(int) -> frameAt
    javassist.bytecode.analysis.ControlFlow$Node[] dominatorTree() -> dominatorTree
    javassist.bytecode.analysis.ControlFlow$Node[] postDominatorTree() -> postDominatorTree
    javassist.bytecode.MethodInfo access$000(javassist.bytecode.analysis.ControlFlow) -> access$000
javassist.bytecode.analysis.ControlFlow$1 -> javassist.bytecode.analysis.ControlFlow$1:
    javassist.bytecode.analysis.ControlFlow this$0 -> this$0
    void <init>(javassist.bytecode.analysis.ControlFlow) -> <init>
    javassist.bytecode.stackmap.BasicBlock makeBlock(int) -> makeBlock
    javassist.bytecode.stackmap.BasicBlock[] makeArray(int) -> makeArray
javassist.bytecode.analysis.ControlFlow$2 -> javassist.bytecode.analysis.ControlFlow$2:
    javassist.bytecode.analysis.ControlFlow this$0 -> this$0
    void <init>(javassist.bytecode.analysis.ControlFlow,javassist.bytecode.analysis.ControlFlow$Node[]) -> <init>
    javassist.bytecode.stackmap.BasicBlock[] exits(javassist.bytecode.analysis.ControlFlow$Node) -> exits
    javassist.bytecode.stackmap.BasicBlock[] entrances(javassist.bytecode.analysis.ControlFlow$Node) -> entrances
javassist.bytecode.analysis.ControlFlow$3 -> javassist.bytecode.analysis.ControlFlow$3:
    javassist.bytecode.analysis.ControlFlow this$0 -> this$0
    void <init>(javassist.bytecode.analysis.ControlFlow,javassist.bytecode.analysis.ControlFlow$Node[]) -> <init>
    javassist.bytecode.stackmap.BasicBlock[] exits(javassist.bytecode.analysis.ControlFlow$Node) -> exits
    javassist.bytecode.stackmap.BasicBlock[] entrances(javassist.bytecode.analysis.ControlFlow$Node) -> entrances
javassist.bytecode.analysis.ControlFlow$Access -> javassist.bytecode.analysis.ControlFlow$Access:
    javassist.bytecode.analysis.ControlFlow$Node[] all -> all
    void <init>(javassist.bytecode.analysis.ControlFlow$Node[]) -> <init>
    javassist.bytecode.analysis.ControlFlow$Node node(javassist.bytecode.stackmap.BasicBlock) -> node
    javassist.bytecode.stackmap.BasicBlock[] exits(javassist.bytecode.analysis.ControlFlow$Node) -> exits
    javassist.bytecode.stackmap.BasicBlock[] entrances(javassist.bytecode.analysis.ControlFlow$Node) -> entrances
javassist.bytecode.analysis.ControlFlow$Block -> javassist.bytecode.analysis.ControlFlow$Block:
    java.lang.Object clientData -> clientData
    int index -> index
    javassist.bytecode.MethodInfo method -> method
    javassist.bytecode.analysis.ControlFlow$Block[] entrances -> entrances
    void <init>(int,javassist.bytecode.MethodInfo) -> <init>
    void toString2(java.lang.StringBuffer) -> toString2
    javassist.bytecode.stackmap.BasicBlock[] getExit() -> getExit
    int index() -> index
    int position() -> position
    int length() -> length
    int incomings() -> incomings
    javassist.bytecode.analysis.ControlFlow$Block incoming(int) -> incoming
    int exits() -> exits
    javassist.bytecode.analysis.ControlFlow$Block exit(int) -> exit
    javassist.bytecode.analysis.ControlFlow$Catcher[] catchers() -> catchers
javassist.bytecode.analysis.ControlFlow$Catcher -> javassist.bytecode.analysis.ControlFlow$Catcher:
    javassist.bytecode.analysis.ControlFlow$Block node -> node
    int typeIndex -> typeIndex
    void <init>(javassist.bytecode.stackmap.BasicBlock$Catch) -> <init>
    javassist.bytecode.analysis.ControlFlow$Block block() -> block
    java.lang.String type() -> type
    javassist.bytecode.analysis.ControlFlow$Block access$100(javassist.bytecode.analysis.ControlFlow$Catcher) -> access$100
javassist.bytecode.analysis.ControlFlow$Node -> javassist.bytecode.analysis.ControlFlow$Node:
    javassist.bytecode.analysis.ControlFlow$Block block -> block
    javassist.bytecode.analysis.ControlFlow$Node parent -> parent
    javassist.bytecode.analysis.ControlFlow$Node[] children -> children
    void <init>(javassist.bytecode.analysis.ControlFlow$Block) -> <init>
    java.lang.String toString() -> toString
    javassist.bytecode.analysis.ControlFlow$Block block() -> block
    javassist.bytecode.analysis.ControlFlow$Node parent() -> parent
    int children() -> children
    javassist.bytecode.analysis.ControlFlow$Node child(int) -> child
    int makeDepth1stTree(javassist.bytecode.analysis.ControlFlow$Node,boolean[],int,int[],javassist.bytecode.analysis.ControlFlow$Access) -> makeDepth1stTree
    boolean makeDominatorTree(boolean[],int[],javassist.bytecode.analysis.ControlFlow$Access) -> makeDominatorTree
    javassist.bytecode.analysis.ControlFlow$Node getAncestor(javassist.bytecode.analysis.ControlFlow$Node,javassist.bytecode.analysis.ControlFlow$Node,int[]) -> getAncestor
    void setChildren(javassist.bytecode.analysis.ControlFlow$Node[]) -> setChildren
    javassist.bytecode.analysis.ControlFlow$Block access$200(javassist.bytecode.analysis.ControlFlow$Node) -> access$200
    void access$300(javassist.bytecode.analysis.ControlFlow$Node[]) -> access$300
javassist.bytecode.analysis.Executor -> javassist.bytecode.analysis.Executor:
    javassist.bytecode.ConstPool constPool -> constPool
    javassist.ClassPool classPool -> classPool
    javassist.bytecode.analysis.Type STRING_TYPE -> STRING_TYPE
    javassist.bytecode.analysis.Type CLASS_TYPE -> CLASS_TYPE
    javassist.bytecode.analysis.Type THROWABLE_TYPE -> THROWABLE_TYPE
    int lastPos -> lastPos
    void <init>(javassist.ClassPool,javassist.bytecode.ConstPool) -> <init>
    void execute(javassist.bytecode.MethodInfo,int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> execute
    javassist.bytecode.analysis.Type zeroExtend(javassist.bytecode.analysis.Type) -> zeroExtend
    void evalArrayLoad(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> evalArrayLoad
    void evalArrayStore(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> evalArrayStore
    void evalBinaryMath(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> evalBinaryMath
    void evalGetField(int,int,javassist.bytecode.analysis.Frame) -> evalGetField
    void evalInvokeIntfMethod(int,int,javassist.bytecode.analysis.Frame) -> evalInvokeIntfMethod
    void evalInvokeMethod(int,int,javassist.bytecode.analysis.Frame) -> evalInvokeMethod
    void evalInvokeDynamic(int,int,javassist.bytecode.analysis.Frame) -> evalInvokeDynamic
    void evalLDC(int,javassist.bytecode.analysis.Frame) -> evalLDC
    void evalLoad(javassist.bytecode.analysis.Type,int,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> evalLoad
    void evalNewArray(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame) -> evalNewArray
    void evalNewObjectArray(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame) -> evalNewObjectArray
    void evalPutField(int,int,javassist.bytecode.analysis.Frame) -> evalPutField
    void evalShift(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> evalShift
    void evalStore(javassist.bytecode.analysis.Type,int,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> evalStore
    void evalWide(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> evalWide
    javassist.bytecode.analysis.Type getType(java.lang.String) -> getType
    javassist.bytecode.analysis.Type[] paramTypesFromDesc(java.lang.String) -> paramTypesFromDesc
    javassist.bytecode.analysis.Type returnTypeFromDesc(java.lang.String) -> returnTypeFromDesc
    javassist.bytecode.analysis.Type simplePeek(javassist.bytecode.analysis.Frame) -> simplePeek
    javassist.bytecode.analysis.Type simplePop(javassist.bytecode.analysis.Frame) -> simplePop
    void simplePush(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> simplePush
    void access(int,javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Subroutine) -> access
    void simpleSetLocal(int,javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> simpleSetLocal
    javassist.bytecode.analysis.Type resolveClassInfo(java.lang.String) -> resolveClassInfo
    javassist.bytecode.analysis.Type typeFromDesc(java.lang.String) -> typeFromDesc
    void verifyAssignable(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Type) -> verifyAssignable
javassist.bytecode.analysis.Frame -> javassist.bytecode.analysis.Frame:
    javassist.bytecode.analysis.Type[] locals -> locals
    javassist.bytecode.analysis.Type[] stack -> stack
    int top -> top
    boolean jsrMerged -> jsrMerged
    boolean retMerged -> retMerged
    void <init>(int,int) -> <init>
    javassist.bytecode.analysis.Type getLocal(int) -> getLocal
    void setLocal(int,javassist.bytecode.analysis.Type) -> setLocal
    javassist.bytecode.analysis.Type getStack(int) -> getStack
    void setStack(int,javassist.bytecode.analysis.Type) -> setStack
    void clearStack() -> clearStack
    int getTopIndex() -> getTopIndex
    int localsLength() -> localsLength
    javassist.bytecode.analysis.Type peek() -> peek
    javassist.bytecode.analysis.Type pop() -> pop
    void push(javassist.bytecode.analysis.Type) -> push
    javassist.bytecode.analysis.Frame copy() -> copy
    javassist.bytecode.analysis.Frame copyStack() -> copyStack
    boolean mergeStack(javassist.bytecode.analysis.Frame) -> mergeStack
    boolean merge(javassist.bytecode.analysis.Frame) -> merge
    java.lang.String toString() -> toString
    boolean isJsrMerged() -> isJsrMerged
    void setJsrMerged(boolean) -> setJsrMerged
    boolean isRetMerged() -> isRetMerged
    void setRetMerged(boolean) -> setRetMerged
javassist.bytecode.analysis.FramePrinter -> javassist.bytecode.analysis.FramePrinter:
    java.io.PrintStream stream -> stream
    void <init>(java.io.PrintStream) -> <init>
    void print(javassist.CtClass,java.io.PrintStream) -> print
    void print(javassist.CtClass) -> print
    java.lang.String getMethodString(javassist.CtMethod) -> getMethodString
    void print(javassist.CtMethod) -> print
    void printStack(javassist.bytecode.analysis.Frame) -> printStack
    void printLocals(javassist.bytecode.analysis.Frame) -> printLocals
    void addSpacing(int) -> addSpacing
javassist.bytecode.analysis.IntQueue -> javassist.bytecode.analysis.IntQueue:
    javassist.bytecode.analysis.IntQueue$Entry head -> head
    javassist.bytecode.analysis.IntQueue$Entry tail -> tail
    void <init>() -> <init>
    void add(int) -> add
    boolean isEmpty() -> isEmpty
    int take() -> take
javassist.bytecode.analysis.IntQueue$1 -> javassist.bytecode.analysis.IntQueue$1:
javassist.bytecode.analysis.IntQueue$Entry -> javassist.bytecode.analysis.IntQueue$Entry:
    javassist.bytecode.analysis.IntQueue$Entry next -> next
    int value -> value
    void <init>(int) -> <init>
    void <init>(int,javassist.bytecode.analysis.IntQueue$1) -> <init>
    javassist.bytecode.analysis.IntQueue$Entry access$102(javassist.bytecode.analysis.IntQueue$Entry,javassist.bytecode.analysis.IntQueue$Entry) -> access$102
    int access$200(javassist.bytecode.analysis.IntQueue$Entry) -> access$200
    javassist.bytecode.analysis.IntQueue$Entry access$100(javassist.bytecode.analysis.IntQueue$Entry) -> access$100
javassist.bytecode.analysis.MultiArrayType -> javassist.bytecode.analysis.MultiArrayType:
    javassist.bytecode.analysis.MultiType component -> component
    int dims -> dims
    void <init>(javassist.bytecode.analysis.MultiType,int) -> <init>
    javassist.CtClass getCtClass() -> getCtClass
    boolean popChanged() -> popChanged
    int getDimensions() -> getDimensions
    javassist.bytecode.analysis.Type getComponent() -> getComponent
    int getSize() -> getSize
    boolean isArray() -> isArray
    boolean isAssignableFrom(javassist.bytecode.analysis.Type) -> isAssignableFrom
    boolean isReference() -> isReference
    boolean isAssignableTo(javassist.bytecode.analysis.Type) -> isAssignableTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
javassist.bytecode.analysis.MultiType -> javassist.bytecode.analysis.MultiType:
    java.util.Map interfaces -> interfaces
    javassist.bytecode.analysis.Type resolved -> resolved
    javassist.bytecode.analysis.Type potentialClass -> potentialClass
    javassist.bytecode.analysis.MultiType mergeSource -> mergeSource
    boolean changed -> changed
    void <init>(java.util.Map) -> <init>
    void <init>(java.util.Map,javassist.bytecode.analysis.Type) -> <init>
    javassist.CtClass getCtClass() -> getCtClass
    javassist.bytecode.analysis.Type getComponent() -> getComponent
    int getSize() -> getSize
    boolean isArray() -> isArray
    boolean popChanged() -> popChanged
    boolean isAssignableFrom(javassist.bytecode.analysis.Type) -> isAssignableFrom
    boolean isAssignableTo(javassist.bytecode.analysis.Type) -> isAssignableTo
    void propogateState() -> propogateState
    void propogateResolved() -> propogateResolved
    boolean isReference() -> isReference
    java.util.Map getAllMultiInterfaces(javassist.bytecode.analysis.MultiType) -> getAllMultiInterfaces
    java.util.Map mergeMultiInterfaces(javassist.bytecode.analysis.MultiType,javassist.bytecode.analysis.MultiType) -> mergeMultiInterfaces
    java.util.Map mergeMultiAndSingle(javassist.bytecode.analysis.MultiType,javassist.bytecode.analysis.Type) -> mergeMultiAndSingle
    boolean inMergeSource(javassist.bytecode.analysis.MultiType) -> inMergeSource
    javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type) -> merge
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
javassist.bytecode.analysis.Subroutine -> javassist.bytecode.analysis.Subroutine:
    java.util.List callers -> callers
    java.util.Set access -> access
    int start -> start
    void <init>(int,int) -> <init>
    void addCaller(int) -> addCaller
    int start() -> start
    void access(int) -> access
    boolean isAccessed(int) -> isAccessed
    java.util.Collection accessed() -> accessed
    java.util.Collection callers() -> callers
    java.lang.String toString() -> toString
javassist.bytecode.analysis.SubroutineScanner -> javassist.bytecode.analysis.SubroutineScanner:
    javassist.bytecode.analysis.Subroutine[] subroutines -> subroutines
    java.util.Map subTable -> subTable
    java.util.Set done -> done
    void <init>() -> <init>
    javassist.bytecode.analysis.Subroutine[] scan(javassist.bytecode.MethodInfo) -> scan
    void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine) -> scan
    boolean scanOp(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine) -> scanOp
    void scanLookupSwitch(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine) -> scanLookupSwitch
    void scanTableSwitch(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine) -> scanTableSwitch
javassist.bytecode.analysis.Type -> javassist.bytecode.analysis.Type:
    javassist.CtClass clazz -> clazz
    boolean special -> special
    java.util.Map prims -> prims
    javassist.bytecode.analysis.Type DOUBLE -> DOUBLE
    javassist.bytecode.analysis.Type BOOLEAN -> BOOLEAN
    javassist.bytecode.analysis.Type LONG -> LONG
    javassist.bytecode.analysis.Type CHAR -> CHAR
    javassist.bytecode.analysis.Type BYTE -> BYTE
    javassist.bytecode.analysis.Type SHORT -> SHORT
    javassist.bytecode.analysis.Type INTEGER -> INTEGER
    javassist.bytecode.analysis.Type FLOAT -> FLOAT
    javassist.bytecode.analysis.Type VOID -> VOID
    javassist.bytecode.analysis.Type UNINIT -> UNINIT
    javassist.bytecode.analysis.Type RETURN_ADDRESS -> RETURN_ADDRESS
    javassist.bytecode.analysis.Type TOP -> TOP
    javassist.bytecode.analysis.Type BOGUS -> BOGUS
    javassist.bytecode.analysis.Type OBJECT -> OBJECT
    javassist.bytecode.analysis.Type SERIALIZABLE -> SERIALIZABLE
    javassist.bytecode.analysis.Type CLONEABLE -> CLONEABLE
    javassist.bytecode.analysis.Type THROWABLE -> THROWABLE
    javassist.bytecode.analysis.Type get(javassist.CtClass) -> get
    javassist.bytecode.analysis.Type lookupType(java.lang.String) -> lookupType
    void <init>(javassist.CtClass) -> <init>
    void <init>(javassist.CtClass,boolean) -> <init>
    boolean popChanged() -> popChanged
    int getSize() -> getSize
    javassist.CtClass getCtClass() -> getCtClass
    boolean isReference() -> isReference
    boolean isSpecial() -> isSpecial
    boolean isArray() -> isArray
    int getDimensions() -> getDimensions
    javassist.bytecode.analysis.Type getComponent() -> getComponent
    boolean isAssignableFrom(javassist.bytecode.analysis.Type) -> isAssignableFrom
    javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type) -> merge
    javassist.bytecode.analysis.Type getRootComponent(javassist.bytecode.analysis.Type) -> getRootComponent
    javassist.bytecode.analysis.Type createArray(javassist.bytecode.analysis.Type,int) -> createArray
    java.lang.String arrayName(java.lang.String,int) -> arrayName
    javassist.ClassPool getClassPool(javassist.bytecode.analysis.Type) -> getClassPool
    javassist.bytecode.analysis.Type mergeArray(javassist.bytecode.analysis.Type) -> mergeArray
    javassist.CtClass findCommonSuperClass(javassist.CtClass,javassist.CtClass) -> findCommonSuperClass
    javassist.bytecode.analysis.Type mergeClasses(javassist.bytecode.analysis.Type) -> mergeClasses
    java.util.Map findCommonInterfaces(javassist.bytecode.analysis.Type) -> findCommonInterfaces
    java.util.Map findExclusiveDeclaredInterfaces(javassist.bytecode.analysis.Type,javassist.CtClass) -> findExclusiveDeclaredInterfaces
    java.util.Map findCommonInterfaces(java.util.Map,java.util.Map) -> findCommonInterfaces
    java.util.Map getAllInterfaces(javassist.CtClass,java.util.Map) -> getAllInterfaces
    java.util.Map getDeclaredInterfaces(javassist.CtClass,java.util.Map) -> getDeclaredInterfaces
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean eq(javassist.CtClass,javassist.CtClass) -> eq
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
javassist.bytecode.analysis.Util -> javassist.bytecode.analysis.Util:
    void <init>() -> <init>
    int getJumpTarget(int,javassist.bytecode.CodeIterator) -> getJumpTarget
    boolean isJumpInstruction(int) -> isJumpInstruction
    boolean isGoto(int) -> isGoto
    boolean isJsr(int) -> isJsr
    boolean isReturn(int) -> isReturn
javassist.bytecode.annotation.Annotation -> javassist.bytecode.annotation.Annotation:
    javassist.bytecode.ConstPool pool -> pool
    int typeIndex -> typeIndex
    java.util.Map members -> members
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(java.lang.String,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,javassist.CtClass) -> <init>
    javassist.bytecode.annotation.MemberValue createMemberValue(javassist.bytecode.ConstPool,javassist.CtClass) -> createMemberValue
    void addMemberValue(int,javassist.bytecode.annotation.MemberValue) -> addMemberValue
    void addMemberValue(java.lang.String,javassist.bytecode.annotation.MemberValue) -> addMemberValue
    void addMemberValue(javassist.bytecode.annotation.Annotation$Pair) -> addMemberValue
    java.lang.String toString() -> toString
    java.lang.String getTypeName() -> getTypeName
    java.util.Set getMemberNames() -> getMemberNames
    javassist.bytecode.annotation.MemberValue getMemberValue(java.lang.String) -> getMemberValue
    java.lang.Object toAnnotationType(java.lang.ClassLoader,javassist.ClassPool) -> toAnnotationType
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
javassist.bytecode.annotation.Annotation$Pair -> javassist.bytecode.annotation.Annotation$Pair:
    int name -> name
    javassist.bytecode.annotation.MemberValue value -> value
    void <init>() -> <init>
javassist.bytecode.annotation.AnnotationImpl -> javassist.bytecode.annotation.AnnotationImpl:
    java.lang.String JDK_ANNOTATION_CLASS_NAME -> JDK_ANNOTATION_CLASS_NAME
    java.lang.reflect.Method JDK_ANNOTATION_TYPE_METHOD -> JDK_ANNOTATION_TYPE_METHOD
    javassist.bytecode.annotation.Annotation annotation -> annotation
    javassist.ClassPool pool -> pool
    java.lang.ClassLoader classLoader -> classLoader
    java.lang.Class annotationType -> annotationType
    int cachedHashCode -> cachedHashCode
    java.lang.Object make(java.lang.ClassLoader,java.lang.Class,javassist.ClassPool,javassist.bytecode.annotation.Annotation) -> make
    void <init>(javassist.bytecode.annotation.Annotation,javassist.ClassPool,java.lang.ClassLoader) -> <init>
    java.lang.String getTypeName() -> getTypeName
    java.lang.Class getAnnotationType() -> getAnnotationType
    javassist.bytecode.annotation.Annotation getAnnotation() -> getAnnotation
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    java.lang.Object getDefault(java.lang.String,java.lang.reflect.Method) -> getDefault
    int hashCode() -> hashCode
    boolean checkEquals(java.lang.Object) -> checkEquals
    int arrayHashCode(java.lang.Object) -> arrayHashCode
    void <clinit>() -> <clinit>
javassist.bytecode.annotation.AnnotationMemberValue -> javassist.bytecode.annotation.AnnotationMemberValue:
    javassist.bytecode.annotation.Annotation value -> value
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.annotation.Annotation,javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    javassist.bytecode.annotation.Annotation getValue() -> getValue
    void setValue(javassist.bytecode.annotation.Annotation) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.AnnotationsWriter -> javassist.bytecode.annotation.AnnotationsWriter:
    java.io.OutputStream output -> output
    javassist.bytecode.ConstPool pool -> pool
    void <init>(java.io.OutputStream,javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    void close() -> close
    void numParameters(int) -> numParameters
    void numAnnotations(int) -> numAnnotations
    void annotation(java.lang.String,int) -> annotation
    void annotation(int,int) -> annotation
    void memberValuePair(java.lang.String) -> memberValuePair
    void memberValuePair(int) -> memberValuePair
    void constValueIndex(boolean) -> constValueIndex
    void constValueIndex(byte) -> constValueIndex
    void constValueIndex(char) -> constValueIndex
    void constValueIndex(short) -> constValueIndex
    void constValueIndex(int) -> constValueIndex
    void constValueIndex(long) -> constValueIndex
    void constValueIndex(float) -> constValueIndex
    void constValueIndex(double) -> constValueIndex
    void constValueIndex(java.lang.String) -> constValueIndex
    void constValueIndex(int,int) -> constValueIndex
    void enumConstValue(java.lang.String,java.lang.String) -> enumConstValue
    void enumConstValue(int,int) -> enumConstValue
    void classInfoIndex(java.lang.String) -> classInfoIndex
    void classInfoIndex(int) -> classInfoIndex
    void annotationValue() -> annotationValue
    void arrayValue(int) -> arrayValue
    void write16bit(int) -> write16bit
javassist.bytecode.annotation.ArrayMemberValue -> javassist.bytecode.annotation.ArrayMemberValue:
    javassist.bytecode.annotation.MemberValue type -> type
    javassist.bytecode.annotation.MemberValue[] values -> values
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.annotation.MemberValue,javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    javassist.bytecode.annotation.MemberValue getType() -> getType
    javassist.bytecode.annotation.MemberValue[] getValue() -> getValue
    void setValue(javassist.bytecode.annotation.MemberValue[]) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.BooleanMemberValue -> javassist.bytecode.annotation.BooleanMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(boolean,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    boolean getValue() -> getValue
    void setValue(boolean) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.ByteMemberValue -> javassist.bytecode.annotation.ByteMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(byte,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    byte getValue() -> getValue
    void setValue(byte) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.CharMemberValue -> javassist.bytecode.annotation.CharMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(char,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    char getValue() -> getValue
    void setValue(char) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.ClassMemberValue -> javassist.bytecode.annotation.ClassMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(java.lang.String,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.DoubleMemberValue -> javassist.bytecode.annotation.DoubleMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(double,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    double getValue() -> getValue
    void setValue(double) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.EnumMemberValue -> javassist.bytecode.annotation.EnumMemberValue:
    int typeIndex -> typeIndex
    int valueIndex -> valueIndex
    void <init>(int,int,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.FloatMemberValue -> javassist.bytecode.annotation.FloatMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(float,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    float getValue() -> getValue
    void setValue(float) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.IntegerMemberValue -> javassist.bytecode.annotation.IntegerMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,int) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    int getValue() -> getValue
    void setValue(int) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.LongMemberValue -> javassist.bytecode.annotation.LongMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(long,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    long getValue() -> getValue
    void setValue(long) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.MemberValue -> javassist.bytecode.annotation.MemberValue:
    javassist.bytecode.ConstPool cp -> cp
    char tag -> tag
    void <init>(char,javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String) -> loadClass
    java.lang.String convertFromArray(java.lang.String) -> convertFromArray
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
javassist.bytecode.annotation.MemberValueVisitor -> javassist.bytecode.annotation.MemberValueVisitor:
    void visitAnnotationMemberValue(javassist.bytecode.annotation.AnnotationMemberValue) -> visitAnnotationMemberValue
    void visitArrayMemberValue(javassist.bytecode.annotation.ArrayMemberValue) -> visitArrayMemberValue
    void visitBooleanMemberValue(javassist.bytecode.annotation.BooleanMemberValue) -> visitBooleanMemberValue
    void visitByteMemberValue(javassist.bytecode.annotation.ByteMemberValue) -> visitByteMemberValue
    void visitCharMemberValue(javassist.bytecode.annotation.CharMemberValue) -> visitCharMemberValue
    void visitDoubleMemberValue(javassist.bytecode.annotation.DoubleMemberValue) -> visitDoubleMemberValue
    void visitEnumMemberValue(javassist.bytecode.annotation.EnumMemberValue) -> visitEnumMemberValue
    void visitFloatMemberValue(javassist.bytecode.annotation.FloatMemberValue) -> visitFloatMemberValue
    void visitIntegerMemberValue(javassist.bytecode.annotation.IntegerMemberValue) -> visitIntegerMemberValue
    void visitLongMemberValue(javassist.bytecode.annotation.LongMemberValue) -> visitLongMemberValue
    void visitShortMemberValue(javassist.bytecode.annotation.ShortMemberValue) -> visitShortMemberValue
    void visitStringMemberValue(javassist.bytecode.annotation.StringMemberValue) -> visitStringMemberValue
    void visitClassMemberValue(javassist.bytecode.annotation.ClassMemberValue) -> visitClassMemberValue
javassist.bytecode.annotation.NoSuchClassError -> javassist.bytecode.annotation.NoSuchClassError:
    long serialVersionUID -> serialVersionUID
    java.lang.String className -> className
    void <init>(java.lang.String,java.lang.Error) -> <init>
    java.lang.String getClassName() -> getClassName
javassist.bytecode.annotation.ShortMemberValue -> javassist.bytecode.annotation.ShortMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(short,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    short getValue() -> getValue
    void setValue(short) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.StringMemberValue -> javassist.bytecode.annotation.StringMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(java.lang.String,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.TypeAnnotationsWriter -> javassist.bytecode.annotation.TypeAnnotationsWriter:
    void <init>(java.io.OutputStream,javassist.bytecode.ConstPool) -> <init>
    void numAnnotations(int) -> numAnnotations
    void typeParameterTarget(int,int) -> typeParameterTarget
    void supertypeTarget(int) -> supertypeTarget
    void typeParameterBoundTarget(int,int,int) -> typeParameterBoundTarget
    void emptyTarget(int) -> emptyTarget
    void formalParameterTarget(int) -> formalParameterTarget
    void throwsTarget(int) -> throwsTarget
    void localVarTarget(int,int) -> localVarTarget
    void localVarTargetTable(int,int,int) -> localVarTargetTable
    void catchTarget(int) -> catchTarget
    void offsetTarget(int,int) -> offsetTarget
    void typeArgumentTarget(int,int,int) -> typeArgumentTarget
    void typePath(int) -> typePath
    void typePathPath(int,int) -> typePathPath
javassist.bytecode.stackmap.BasicBlock -> javassist.bytecode.stackmap.BasicBlock:
    int position -> position
    int length -> length
    int incoming -> incoming
    javassist.bytecode.stackmap.BasicBlock[] exit -> exit
    boolean stop -> stop
    javassist.bytecode.stackmap.BasicBlock$Catch toCatch -> toCatch
    void <init>(int) -> <init>
    javassist.bytecode.stackmap.BasicBlock find(javassist.bytecode.stackmap.BasicBlock[],int) -> find
    java.lang.String toString() -> toString
    void toString2(java.lang.StringBuffer) -> toString2
javassist.bytecode.stackmap.BasicBlock$Catch -> javassist.bytecode.stackmap.BasicBlock$Catch:
    javassist.bytecode.stackmap.BasicBlock$Catch next -> next
    javassist.bytecode.stackmap.BasicBlock body -> body
    int typeIndex -> typeIndex
    void <init>(javassist.bytecode.stackmap.BasicBlock,int,javassist.bytecode.stackmap.BasicBlock$Catch) -> <init>
javassist.bytecode.stackmap.BasicBlock$JsrBytecode -> javassist.bytecode.stackmap.BasicBlock$JsrBytecode:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
javassist.bytecode.stackmap.BasicBlock$Maker -> javassist.bytecode.stackmap.BasicBlock$Maker:
    void <init>() -> <init>
    javassist.bytecode.stackmap.BasicBlock makeBlock(int) -> makeBlock
    javassist.bytecode.stackmap.BasicBlock[] makeArray(int) -> makeArray
    javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock) -> makeArray
    javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock,javassist.bytecode.stackmap.BasicBlock) -> makeArray
    javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.MethodInfo) -> make
    javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable) -> make
    javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int) -> makeMark
    javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean) -> makeMark
    javassist.bytecode.stackmap.BasicBlock$Mark makeMark0(java.util.Map,int,boolean,boolean) -> makeMark0
    java.util.Map makeMarks(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable) -> makeMarks
    void makeGoto(java.util.Map,int,int,int) -> makeGoto
    void makeJsr(java.util.Map,int,int,int) -> makeJsr
    javassist.bytecode.stackmap.BasicBlock[] makeBlocks(java.util.Map) -> makeBlocks
    javassist.bytecode.stackmap.BasicBlock getBBlock(javassist.bytecode.stackmap.BasicBlock$Mark) -> getBBlock
    void addCatchers(javassist.bytecode.stackmap.BasicBlock[],javassist.bytecode.ExceptionTable) -> addCatchers
javassist.bytecode.stackmap.BasicBlock$Mark -> javassist.bytecode.stackmap.BasicBlock$Mark:
    int position -> position
    javassist.bytecode.stackmap.BasicBlock block -> block
    javassist.bytecode.stackmap.BasicBlock[] jump -> jump
    boolean alwaysJmp -> alwaysJmp
    int size -> size
    javassist.bytecode.stackmap.BasicBlock$Catch catcher -> catcher
    void <init>(int) -> <init>
    int compareTo(javassist.bytecode.stackmap.BasicBlock$Mark) -> compareTo
    void setJump(javassist.bytecode.stackmap.BasicBlock[],int,boolean) -> setJump
    int compareTo(java.lang.Object) -> compareTo
javassist.bytecode.stackmap.MapMaker -> javassist.bytecode.stackmap.MapMaker:
    javassist.bytecode.StackMapTable make(javassist.ClassPool,javassist.bytecode.MethodInfo) -> make
    javassist.bytecode.StackMap make2(javassist.ClassPool,javassist.bytecode.MethodInfo) -> make2
    void <init>(javassist.ClassPool,javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute) -> <init>
    void <init>(javassist.bytecode.stackmap.MapMaker) -> <init>
    void make(javassist.bytecode.stackmap.TypedBlock[],byte[]) -> make
    void make(byte[],javassist.bytecode.stackmap.TypedBlock) -> make
    void traceException(byte[],javassist.bytecode.stackmap.BasicBlock$Catch) -> traceException
    void mergeMap(javassist.bytecode.stackmap.TypedBlock,boolean) -> mergeMap
    javassist.bytecode.stackmap.TypeData merge(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData) -> merge
    void recordStackMap(javassist.bytecode.stackmap.TypedBlock) -> recordStackMap
    void recordStackMap(javassist.bytecode.stackmap.TypedBlock,int) -> recordStackMap
    javassist.bytecode.stackmap.TypeData$ClassName toExceptionType(int) -> toExceptionType
    void recordStackMap0(javassist.bytecode.stackmap.TypedBlock,int,javassist.bytecode.stackmap.TypeData[]) -> recordStackMap0
    int recordTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[]) -> recordTypeData
    void copyTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[]) -> copyTypeData
    javassist.bytecode.stackmap.TypeData validateTypeData(javassist.bytecode.stackmap.TypeData[],int,int) -> validateTypeData
    void findDeadCatchers(byte[],javassist.bytecode.stackmap.TypedBlock[]) -> findDeadCatchers
    void fixDeadcode(byte[],javassist.bytecode.stackmap.TypedBlock) -> fixDeadcode
    void fixTypes(byte[],javassist.bytecode.stackmap.TypedBlock[]) -> fixTypes
    javassist.bytecode.StackMapTable toStackMap(javassist.bytecode.stackmap.TypedBlock[]) -> toStackMap
    boolean isTarget(javassist.bytecode.stackmap.TypedBlock,javassist.bytecode.stackmap.TypedBlock) -> isTarget
    void toStackMapBody(javassist.bytecode.StackMapTable$Writer,javassist.bytecode.stackmap.TypedBlock,int,int,javassist.bytecode.stackmap.TypedBlock) -> toStackMapBody
    int[] fillStackMap(int,int,int[],javassist.bytecode.stackmap.TypeData[]) -> fillStackMap
    int stackMapDiff(int,javassist.bytecode.stackmap.TypeData[],int,javassist.bytecode.stackmap.TypeData[]) -> stackMapDiff
    boolean stackMapEq(javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[],int) -> stackMapEq
    int diffSize(javassist.bytecode.stackmap.TypeData[],int,int) -> diffSize
    javassist.bytecode.StackMap toStackMap2(javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypedBlock[]) -> toStackMap2
    void writeStackFrame(javassist.bytecode.StackMap$Writer,javassist.bytecode.ConstPool,int,javassist.bytecode.stackmap.TypedBlock) -> writeStackFrame
    void writeVerifyTypeInfo(javassist.bytecode.StackMap$Writer,javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypeData[],int) -> writeVerifyTypeInfo
javassist.bytecode.stackmap.Tracer -> javassist.bytecode.stackmap.Tracer:
    javassist.ClassPool classPool -> classPool
    javassist.bytecode.ConstPool cpool -> cpool
    java.lang.String returnType -> returnType
    int stackTop -> stackTop
    javassist.bytecode.stackmap.TypeData[] stackTypes -> stackTypes
    javassist.bytecode.stackmap.TypeData[] localsTypes -> localsTypes
    void <init>(javassist.ClassPool,javassist.bytecode.ConstPool,int,int,java.lang.String) -> <init>
    void <init>(javassist.bytecode.stackmap.Tracer) -> <init>
    int doOpcode(int,byte[]) -> doOpcode
    void visitBranch(int,byte[],int) -> visitBranch
    void visitGoto(int,byte[],int) -> visitGoto
    void visitReturn(int,byte[]) -> visitReturn
    void visitThrow(int,byte[]) -> visitThrow
    void visitTableSwitch(int,byte[],int,int,int) -> visitTableSwitch
    void visitLookupSwitch(int,byte[],int,int,int) -> visitLookupSwitch
    void visitJSR(int,byte[]) -> visitJSR
    void visitRET(int,byte[]) -> visitRET
    int doOpcode0_53(int,byte[],int) -> doOpcode0_53
    void doLDC(int) -> doLDC
    int doXLOAD(javassist.bytecode.stackmap.TypeData,byte[],int) -> doXLOAD
    int doXLOAD(int,javassist.bytecode.stackmap.TypeData) -> doXLOAD
    int doALOAD(int) -> doALOAD
    int doOpcode54_95(int,byte[],int) -> doOpcode54_95
    int doXSTORE(int,byte[],javassist.bytecode.stackmap.TypeData) -> doXSTORE
    int doXSTORE(int,javassist.bytecode.stackmap.TypeData) -> doXSTORE
    int doASTORE(int) -> doASTORE
    void doDUP_XX(int,int) -> doDUP_XX
    int doOpcode96_147(int,byte[],int) -> doOpcode96_147
    int doOpcode148_201(int,byte[],int) -> doOpcode148_201
    int doWIDE(int,byte[]) -> doWIDE
    void doWIDE_XLOAD(int,byte[],javassist.bytecode.stackmap.TypeData) -> doWIDE_XLOAD
    void doWIDE_STORE(int,byte[],javassist.bytecode.stackmap.TypeData) -> doWIDE_STORE
    int doPutField(int,byte[],boolean) -> doPutField
    int doGetField(int,byte[],boolean) -> doGetField
    void setFieldTarget(boolean,int) -> setFieldTarget
    int doNEWARRAY(int,byte[]) -> doNEWARRAY
    int doMultiANewArray(int,byte[]) -> doMultiANewArray
    int doInvokeMethod(int,byte[],boolean) -> doInvokeMethod
    void constructorCalled(javassist.bytecode.stackmap.TypeData,int) -> constructorCalled
    int doInvokeIntfMethod(int,byte[]) -> doInvokeIntfMethod
    int doInvokeDynamic(int,byte[]) -> doInvokeDynamic
    void pushMemberType(java.lang.String) -> pushMemberType
    java.lang.String getFieldClassName(java.lang.String,int) -> getFieldClassName
    void checkParamTypes(java.lang.String,int) -> checkParamTypes
javassist.bytecode.stackmap.TypeData -> javassist.bytecode.stackmap.TypeData:
    javassist.bytecode.stackmap.TypeData[] make(int) -> make
    void <init>() -> <init>
    void setType(javassist.bytecode.stackmap.TypeData,java.lang.String,javassist.ClassPool) -> setType
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData join() -> join
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    boolean isNullType() -> isNullType
    boolean isUninit() -> isUninit
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    java.lang.String getName() -> getName
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    int dfs(java.util.List,int,javassist.ClassPool) -> dfs
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    void constructorCalled(int) -> constructorCalled
    java.lang.String toString() -> toString
    java.lang.String toString2(java.util.Set) -> toString2
    javassist.CtClass commonSuperClassEx(javassist.CtClass,javassist.CtClass) -> commonSuperClassEx
    javassist.CtClass commonSuperClass(javassist.CtClass,javassist.CtClass) -> commonSuperClass
    boolean eq(javassist.CtClass,javassist.CtClass) -> eq
    void aastore(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData,javassist.ClassPool) -> aastore
javassist.bytecode.stackmap.TypeData$AbsTypeVar -> javassist.bytecode.stackmap.TypeData$AbsTypeVar:
    void <init>() -> <init>
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
javassist.bytecode.stackmap.TypeData$ArrayElement -> javassist.bytecode.stackmap.TypeData$ArrayElement:
    javassist.bytecode.stackmap.TypeData$AbsTypeVar array -> array
    void <init>(javassist.bytecode.stackmap.TypeData$AbsTypeVar) -> <init>
    javassist.bytecode.stackmap.TypeData make(javassist.bytecode.stackmap.TypeData) -> make
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$AbsTypeVar arrayType() -> arrayType
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    java.lang.String typeName(java.lang.String) -> typeName
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    int dfs(java.util.List,int,javassist.ClassPool) -> dfs
    java.lang.String toString2(java.util.Set) -> toString2
    java.lang.String access$000(java.lang.String) -> access$000
javassist.bytecode.stackmap.TypeData$ArrayType -> javassist.bytecode.stackmap.TypeData$ArrayType:
    javassist.bytecode.stackmap.TypeData$AbsTypeVar element -> element
    void <init>(javassist.bytecode.stackmap.TypeData$AbsTypeVar) -> <init>
    javassist.bytecode.stackmap.TypeData make(javassist.bytecode.stackmap.TypeData) -> make
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$AbsTypeVar elementType() -> elementType
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    java.lang.String typeName(java.lang.String) -> typeName
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    int dfs(java.util.List,int,javassist.ClassPool) -> dfs
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$BasicType -> javassist.bytecode.stackmap.TypeData$BasicType:
    java.lang.String name -> name
    int typeTag -> typeTag
    char decodedName -> decodedName
    void <init>(java.lang.String,int,char) -> <init>
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData join() -> join
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    java.lang.String getName() -> getName
    char getDecodedName() -> getDecodedName
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    java.lang.String toString2(java.util.Set) -> toString2
    char access$100(javassist.bytecode.stackmap.TypeData$BasicType) -> access$100
javassist.bytecode.stackmap.TypeData$ClassName -> javassist.bytecode.stackmap.TypeData$ClassName:
    java.lang.String name -> name
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$NullType -> javassist.bytecode.stackmap.TypeData$NullType:
    void <init>() -> <init>
    int getTypeTag() -> getTypeTag
    boolean isNullType() -> isNullType
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
javassist.bytecode.stackmap.TypeData$TypeVar -> javassist.bytecode.stackmap.TypeData$TypeVar:
    java.util.List lowers -> lowers
    java.util.List usedBy -> usedBy
    java.util.List uppers -> uppers
    java.lang.String fixedType -> fixedType
    boolean is2WordType -> is2WordType
    int visited -> visited
    int smallest -> smallest
    boolean inList -> inList
    int dimension -> dimension
    void <init>(javassist.bytecode.stackmap.TypeData) -> <init>
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    boolean isNullType() -> isNullType
    boolean isUninit() -> isUninit
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    int dfs(java.util.List,int,javassist.ClassPool) -> dfs
    void fixTypes(java.util.List,javassist.ClassPool) -> fixTypes
    void fixTypes1(java.util.List,javassist.bytecode.stackmap.TypeData) -> fixTypes1
    java.lang.String fixTypes2(java.util.List,java.util.Set,javassist.ClassPool) -> fixTypes2
    boolean isObjectArray(javassist.CtClass) -> isObjectArray
    javassist.CtClass fixByUppers(java.util.List,javassist.ClassPool,java.util.Set,javassist.CtClass) -> fixByUppers
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$UninitData -> javassist.bytecode.stackmap.TypeData$UninitData:
    int offset -> offset
    boolean initialized -> initialized
    void <init>(int,java.lang.String) -> <init>
    javassist.bytecode.stackmap.TypeData$UninitData copy() -> copy
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData join() -> join
    boolean isUninit() -> isUninit
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    int offset() -> offset
    void constructorCalled(int) -> constructorCalled
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$UninitThis -> javassist.bytecode.stackmap.TypeData$UninitThis:
    void <init>(java.lang.String) -> <init>
    javassist.bytecode.stackmap.TypeData$UninitData copy() -> copy
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$UninitTypeVar -> javassist.bytecode.stackmap.TypeData$UninitTypeVar:
    javassist.bytecode.stackmap.TypeData type -> type
    void <init>(javassist.bytecode.stackmap.TypeData$UninitData) -> <init>
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    boolean isUninit() -> isUninit
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    javassist.bytecode.stackmap.TypeData join() -> join
    void setType(java.lang.String,javassist.ClassPool) -> setType
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    void constructorCalled(int) -> constructorCalled
    int offset() -> offset
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeTag -> javassist.bytecode.stackmap.TypeTag:
    java.lang.String TOP_TYPE -> TOP_TYPE
    javassist.bytecode.stackmap.TypeData$BasicType TOP -> TOP
    javassist.bytecode.stackmap.TypeData$BasicType INTEGER -> INTEGER
    javassist.bytecode.stackmap.TypeData$BasicType FLOAT -> FLOAT
    javassist.bytecode.stackmap.TypeData$BasicType DOUBLE -> DOUBLE
    javassist.bytecode.stackmap.TypeData$BasicType LONG -> LONG
    void <clinit>() -> <clinit>
javassist.bytecode.stackmap.TypedBlock -> javassist.bytecode.stackmap.TypedBlock:
    int stackTop -> stackTop
    int numLocals -> numLocals
    javassist.bytecode.stackmap.TypeData[] localsTypes -> localsTypes
    javassist.bytecode.stackmap.TypeData[] stackTypes -> stackTypes
    javassist.bytecode.stackmap.TypedBlock[] makeBlocks(javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute,boolean) -> makeBlocks
    void <init>(int) -> <init>
    void toString2(java.lang.StringBuffer) -> toString2
    void printTypes(java.lang.StringBuffer,int,javassist.bytecode.stackmap.TypeData[]) -> printTypes
    boolean alreadySet() -> alreadySet
    void setStackMap(int,javassist.bytecode.stackmap.TypeData[],int,javassist.bytecode.stackmap.TypeData[]) -> setStackMap
    void resetNumLocals() -> resetNumLocals
    void initFirstBlock(int,int,java.lang.String,java.lang.String,boolean,boolean) -> initFirstBlock
    int descToTag(java.lang.String,int,int,javassist.bytecode.stackmap.TypeData[]) -> descToTag
    javassist.bytecode.stackmap.TypeData toPrimitiveTag(char) -> toPrimitiveTag
    java.lang.String getRetType(java.lang.String) -> getRetType
javassist.bytecode.stackmap.TypedBlock$Maker -> javassist.bytecode.stackmap.TypedBlock$Maker:
    void <init>() -> <init>
    javassist.bytecode.stackmap.BasicBlock makeBlock(int) -> makeBlock
    javassist.bytecode.stackmap.BasicBlock[] makeArray(int) -> makeArray
javassist.compiler.AccessorMaker -> javassist.compiler.AccessorMaker:
    javassist.CtClass clazz -> clazz
    int uniqueNumber -> uniqueNumber
    java.util.Map accessors -> accessors
    java.lang.String lastParamType -> lastParamType
    void <init>(javassist.CtClass) -> <init>
    java.lang.String getConstructor(javassist.CtClass,java.lang.String,javassist.bytecode.MethodInfo) -> getConstructor
    java.lang.String getMethodAccessor(java.lang.String,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo) -> getMethodAccessor
    javassist.bytecode.MethodInfo getFieldGetter(javassist.bytecode.FieldInfo,boolean) -> getFieldGetter
    javassist.bytecode.MethodInfo getFieldSetter(javassist.bytecode.FieldInfo,boolean) -> getFieldSetter
    java.lang.String findAccessorName(javassist.bytecode.ClassFile) -> findAccessorName
javassist.compiler.CodeGen -> javassist.compiler.CodeGen:
    java.lang.String javaLangObject -> javaLangObject
    java.lang.String jvmJavaLangObject -> jvmJavaLangObject
    java.lang.String javaLangString -> javaLangString
    java.lang.String jvmJavaLangString -> jvmJavaLangString
    javassist.bytecode.Bytecode bytecode -> bytecode
    int tempVar -> tempVar
    javassist.compiler.TypeChecker typeChecker -> typeChecker
    boolean hasReturned -> hasReturned
    boolean inStaticMethod -> inStaticMethod
    java.util.List breakList -> breakList
    java.util.List continueList -> continueList
    javassist.compiler.CodeGen$ReturnHook returnHooks -> returnHooks
    int exprType -> exprType
    int arrayDim -> arrayDim
    java.lang.String className -> className
    int[] binOp -> binOp
    int[] ifOp -> ifOp
    int[] ifOp2 -> ifOp2
    int P_DOUBLE -> P_DOUBLE
    int P_FLOAT -> P_FLOAT
    int P_LONG -> P_LONG
    int P_INT -> P_INT
    int P_OTHER -> P_OTHER
    int[] castOp -> castOp
    void <init>(javassist.bytecode.Bytecode) -> <init>
    void setTypeChecker(javassist.compiler.TypeChecker) -> setTypeChecker
    void fatal() -> fatal
    boolean is2word(int,int) -> is2word
    int getMaxLocals() -> getMaxLocals
    void setMaxLocals(int) -> setMaxLocals
    void incMaxLocals(int) -> incMaxLocals
    int getTempVar() -> getTempVar
    int getLocalVar(javassist.compiler.ast.Declarator) -> getLocalVar
    java.lang.String getThisName() -> getThisName
    java.lang.String getSuperName() -> getSuperName
    java.lang.String resolveClassName(javassist.compiler.ast.ASTList) -> resolveClassName
    java.lang.String resolveClassName(java.lang.String) -> resolveClassName
    java.lang.String toJvmArrayName(java.lang.String,int) -> toJvmArrayName
    java.lang.String toJvmTypeName(int,int) -> toJvmTypeName
    void compileExpr(javassist.compiler.ast.ASTree) -> compileExpr
    boolean compileBooleanExpr(boolean,javassist.compiler.ast.ASTree) -> compileBooleanExpr
    void doTypeCheck(javassist.compiler.ast.ASTree) -> doTypeCheck
    void atASTList(javassist.compiler.ast.ASTList) -> atASTList
    void atPair(javassist.compiler.ast.Pair) -> atPair
    void atSymbol(javassist.compiler.ast.Symbol) -> atSymbol
    void atFieldDecl(javassist.compiler.ast.FieldDecl) -> atFieldDecl
    void atMethodDecl(javassist.compiler.ast.MethodDecl) -> atMethodDecl
    void atMethodBody(javassist.compiler.ast.Stmnt,boolean,boolean) -> atMethodBody
    boolean needsSuperCall(javassist.compiler.ast.Stmnt) -> needsSuperCall
    void insertDefaultSuperCall() -> insertDefaultSuperCall
    void atStmnt(javassist.compiler.ast.Stmnt) -> atStmnt
    void atIfStmnt(javassist.compiler.ast.Stmnt) -> atIfStmnt
    void atWhileStmnt(javassist.compiler.ast.Stmnt,boolean) -> atWhileStmnt
    void patchGoto(java.util.List,int) -> patchGoto
    void atForStmnt(javassist.compiler.ast.Stmnt) -> atForStmnt
    void atSwitchStmnt(javassist.compiler.ast.Stmnt) -> atSwitchStmnt
    int computeLabel(javassist.compiler.ast.ASTree) -> computeLabel
    int computeStringLabel(javassist.compiler.ast.ASTree,int,java.util.List) -> computeStringLabel
    void atBreakStmnt(javassist.compiler.ast.Stmnt,boolean) -> atBreakStmnt
    void atReturnStmnt(javassist.compiler.ast.Stmnt) -> atReturnStmnt
    void atReturnStmnt2(javassist.compiler.ast.ASTree) -> atReturnStmnt2
    void atThrowStmnt(javassist.compiler.ast.Stmnt) -> atThrowStmnt
    void atTryStmnt(javassist.compiler.ast.Stmnt) -> atTryStmnt
    void atSyncStmnt(javassist.compiler.ast.Stmnt) -> atSyncStmnt
    int getListSize(java.util.List) -> getListSize
    boolean isPlusPlusExpr(javassist.compiler.ast.ASTree) -> isPlusPlusExpr
    void atDeclarator(javassist.compiler.ast.Declarator) -> atDeclarator
    void atNewExpr(javassist.compiler.ast.NewExpr) -> atNewExpr
    void atArrayInit(javassist.compiler.ast.ArrayInit) -> atArrayInit
    void atAssignExpr(javassist.compiler.ast.AssignExpr) -> atAssignExpr
    void atAssignExpr(javassist.compiler.ast.AssignExpr,boolean) -> atAssignExpr
    void badAssign(javassist.compiler.ast.Expr) -> badAssign
    void atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree,boolean) -> atVariableAssign
    void atArrayVariableAssign(javassist.compiler.ast.ArrayInit,int,int,java.lang.String) -> atArrayVariableAssign
    void atArrayAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Expr,javassist.compiler.ast.ASTree,boolean) -> atArrayAssign
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean) -> atFieldAssign
    void atAssignCore(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,int,int,java.lang.String) -> atAssignCore
    void atStringPlusEq(javassist.compiler.ast.Expr,int,int,java.lang.String,javassist.compiler.ast.ASTree) -> atStringPlusEq
    boolean invalidDim(int,int,java.lang.String,int,int,java.lang.String,boolean) -> invalidDim
    void atCondExpr(javassist.compiler.ast.CondExpr) -> atCondExpr
    int lookupBinOp(int) -> lookupBinOp
    void atBinExpr(javassist.compiler.ast.BinExpr) -> atBinExpr
    void atArithBinExpr(javassist.compiler.ast.Expr,int,int,int) -> atArithBinExpr
    void atStringConcatExpr(javassist.compiler.ast.Expr,int,int,java.lang.String) -> atStringConcatExpr
    void convToString(int,int) -> convToString
    boolean booleanExpr(boolean,javassist.compiler.ast.ASTree) -> booleanExpr
    boolean isAlwaysBranch(javassist.compiler.ast.ASTree,boolean) -> isAlwaysBranch
    int getCompOperator(javassist.compiler.ast.ASTree) -> getCompOperator
    int compileOprands(javassist.compiler.ast.BinExpr) -> compileOprands
    void compareExpr(boolean,int,int,javassist.compiler.ast.BinExpr) -> compareExpr
    void badTypes(javassist.compiler.ast.Expr) -> badTypes
    boolean isRefType(int) -> isRefType
    int typePrecedence(int) -> typePrecedence
    boolean isP_INT(int) -> isP_INT
    boolean rightIsStrong(int,int) -> rightIsStrong
    void convertOprandTypes(int,int,javassist.compiler.ast.Expr) -> convertOprandTypes
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr) -> atInstanceOfExpr
    java.lang.String checkCastExpr(javassist.compiler.ast.CastExpr,java.lang.String) -> checkCastExpr
    void atNumCastExpr(int,int) -> atNumCastExpr
    void atExpr(javassist.compiler.ast.Expr) -> atExpr
    void badType(javassist.compiler.ast.Expr) -> badType
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void atFieldRead(javassist.compiler.ast.ASTree) -> atFieldRead
    void atClassObject(javassist.compiler.ast.Expr) -> atClassObject
    void atClassObject2(java.lang.String) -> atClassObject2
    void atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> atArrayRead
    void arrayAccess(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> arrayAccess
    int getArrayReadOp(int,int) -> getArrayReadOp
    int getArrayWriteOp(int,int) -> getArrayWriteOp
    void atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean) -> atPlusPlus
    void atArrayPlusPlus(int,boolean,javassist.compiler.ast.Expr,boolean) -> atArrayPlusPlus
    void atPlusPlusCore(int,boolean,int,boolean,javassist.compiler.ast.Expr) -> atPlusPlusCore
    void atFieldPlusPlus(int,boolean,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean) -> atFieldPlusPlus
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atVariable(javassist.compiler.ast.Variable) -> atVariable
    void atKeyword(javassist.compiler.ast.Keyword) -> atKeyword
    void atStringL(javassist.compiler.ast.StringL) -> atStringL
    void atIntConst(javassist.compiler.ast.IntConst) -> atIntConst
    void atDoubleConst(javassist.compiler.ast.DoubleConst) -> atDoubleConst
    void <clinit>() -> <clinit>
javassist.compiler.CodeGen$1 -> javassist.compiler.CodeGen$1:
    int val$var -> val$var
    javassist.compiler.CodeGen this$0 -> this$0
    void <init>(javassist.compiler.CodeGen,javassist.compiler.CodeGen,int) -> <init>
    boolean doit(javassist.bytecode.Bytecode,int) -> doit
javassist.compiler.CodeGen$ReturnHook -> javassist.compiler.CodeGen$ReturnHook:
    javassist.compiler.CodeGen$ReturnHook next -> next
    boolean doit(javassist.bytecode.Bytecode,int) -> doit
    void <init>(javassist.compiler.CodeGen) -> <init>
    void remove(javassist.compiler.CodeGen) -> remove
javassist.compiler.CompileError -> javassist.compiler.CompileError:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.Lex lex -> lex
    java.lang.String reason -> reason
    void <init>(java.lang.String,javassist.compiler.Lex) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(javassist.CannotCompileException) -> <init>
    void <init>(javassist.NotFoundException) -> <init>
    javassist.compiler.Lex getLex() -> getLex
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
javassist.compiler.Javac -> javassist.compiler.Javac:
    javassist.compiler.JvstCodeGen gen -> gen
    javassist.compiler.SymbolTable stable -> stable
    javassist.bytecode.Bytecode bytecode -> bytecode
    java.lang.String param0Name -> param0Name
    java.lang.String resultVarName -> resultVarName
    java.lang.String proceedName -> proceedName
    void <init>(javassist.CtClass) -> <init>
    void <init>(javassist.bytecode.Bytecode,javassist.CtClass) -> <init>
    javassist.bytecode.Bytecode getBytecode() -> getBytecode
    javassist.CtMember compile(java.lang.String) -> compile
    javassist.CtField compileField(javassist.compiler.ast.FieldDecl) -> compileField
    javassist.CtBehavior compileMethod(javassist.compiler.Parser,javassist.compiler.ast.MethodDecl) -> compileMethod
    javassist.bytecode.Bytecode compileBody(javassist.CtBehavior,java.lang.String) -> compileBody
    void makeDefaultBody(javassist.bytecode.Bytecode,javassist.CtClass) -> makeDefaultBody
    boolean recordLocalVariables(javassist.bytecode.CodeAttribute,int) -> recordLocalVariables
    boolean recordParamNames(javassist.bytecode.CodeAttribute,int) -> recordParamNames
    int recordParams(javassist.CtClass[],boolean) -> recordParams
    int recordParams(java.lang.String,javassist.CtClass[],boolean,int,boolean) -> recordParams
    void setMaxLocals(int) -> setMaxLocals
    int recordReturnType(javassist.CtClass,boolean) -> recordReturnType
    void recordType(javassist.CtClass) -> recordType
    int recordVariable(javassist.CtClass,java.lang.String) -> recordVariable
    void recordProceed(java.lang.String,java.lang.String) -> recordProceed
    void recordStaticProceed(java.lang.String,java.lang.String) -> recordStaticProceed
    void recordSpecialProceed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> recordSpecialProceed
    void recordProceed(javassist.compiler.ProceedHandler) -> recordProceed
    void compileStmnt(java.lang.String) -> compileStmnt
    void compileExpr(java.lang.String) -> compileExpr
    javassist.compiler.ast.ASTree parseExpr(java.lang.String,javassist.compiler.SymbolTable) -> parseExpr
    void compileExpr(javassist.compiler.ast.ASTree) -> compileExpr
javassist.compiler.Javac$1 -> javassist.compiler.Javac$1:
    java.lang.String val$m -> val$m
    javassist.compiler.ast.ASTree val$texpr -> val$texpr
    javassist.compiler.Javac this$0 -> this$0
    void <init>(javassist.compiler.Javac,java.lang.String,javassist.compiler.ast.ASTree) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.compiler.Javac$2 -> javassist.compiler.Javac$2:
    java.lang.String val$c -> val$c
    java.lang.String val$m -> val$m
    javassist.compiler.Javac this$0 -> this$0
    void <init>(javassist.compiler.Javac,java.lang.String,java.lang.String) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.compiler.Javac$3 -> javassist.compiler.Javac$3:
    javassist.compiler.ast.ASTree val$texpr -> val$texpr
    int val$methodIndex -> val$methodIndex
    java.lang.String val$descriptor -> val$descriptor
    java.lang.String val$classname -> val$classname
    java.lang.String val$methodname -> val$methodname
    javassist.compiler.Javac this$0 -> this$0
    void <init>(javassist.compiler.Javac,javassist.compiler.ast.ASTree,int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.compiler.Javac$CtFieldWithInit -> javassist.compiler.Javac$CtFieldWithInit:
    javassist.compiler.ast.ASTree init -> init
    void <init>(javassist.CtClass,java.lang.String,javassist.CtClass) -> <init>
    void setInit(javassist.compiler.ast.ASTree) -> setInit
    javassist.compiler.ast.ASTree getInitAST() -> getInitAST
javassist.compiler.JvstCodeGen -> javassist.compiler.JvstCodeGen:
    java.lang.String paramArrayName -> paramArrayName
    java.lang.String paramListName -> paramListName
    javassist.CtClass[] paramTypeList -> paramTypeList
    int paramVarBase -> paramVarBase
    boolean useParam0 -> useParam0
    java.lang.String param0Type -> param0Type
    java.lang.String sigName -> sigName
    java.lang.String dollarTypeName -> dollarTypeName
    java.lang.String clazzName -> clazzName
    javassist.CtClass dollarType -> dollarType
    javassist.CtClass returnType -> returnType
    java.lang.String returnCastName -> returnCastName
    java.lang.String returnVarName -> returnVarName
    java.lang.String wrapperCastName -> wrapperCastName
    java.lang.String proceedName -> proceedName
    java.lang.String cflowName -> cflowName
    javassist.compiler.ProceedHandler procHandler -> procHandler
    void <init>(javassist.bytecode.Bytecode,javassist.CtClass,javassist.ClassPool) -> <init>
    int indexOfParam1() -> indexOfParam1
    void setProceedHandler(javassist.compiler.ProceedHandler,java.lang.String) -> setProceedHandler
    void addNullIfVoid() -> addNullIfVoid
    void atMember(javassist.compiler.ast.Member) -> atMember
    void callGetType(java.lang.String) -> callGetType
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean) -> atFieldAssign
    void atAssignParamList(javassist.CtClass[],javassist.bytecode.Bytecode) -> atAssignParamList
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atCastToRtype(javassist.compiler.ast.CastExpr) -> atCastToRtype
    void atCastToWrapper(javassist.compiler.ast.CastExpr) -> atCastToWrapper
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void atCflow(javassist.compiler.ast.ASTList) -> atCflow
    void makeCflowName(java.lang.StringBuffer,javassist.compiler.ast.ASTree) -> makeCflowName
    boolean isParamListName(javassist.compiler.ast.ASTList) -> isParamListName
    int getMethodArgsLength(javassist.compiler.ast.ASTList) -> getMethodArgsLength
    void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[]) -> atMethodArgs
    void compileInvokeSpecial(javassist.compiler.ast.ASTree,int,java.lang.String,javassist.compiler.ast.ASTList) -> compileInvokeSpecial
    void atReturnStmnt(javassist.compiler.ast.Stmnt) -> atReturnStmnt
    int recordReturnType(javassist.CtClass,java.lang.String,java.lang.String,javassist.compiler.SymbolTable) -> recordReturnType
    void recordType(javassist.CtClass) -> recordType
    int recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,javassist.compiler.SymbolTable) -> recordParams
    int recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.String,javassist.compiler.SymbolTable) -> recordParams
    int recordVariable(javassist.CtClass,java.lang.String,javassist.compiler.SymbolTable) -> recordVariable
    int recordVar(javassist.CtClass,java.lang.String,int,javassist.compiler.SymbolTable) -> recordVar
    void recordVariable(java.lang.String,java.lang.String,int,javassist.compiler.SymbolTable) -> recordVariable
    int compileParameterList(javassist.bytecode.Bytecode,javassist.CtClass[],int) -> compileParameterList
    void compileUnwrapValue(javassist.CtClass,javassist.bytecode.Bytecode) -> compileUnwrapValue
    void setType(javassist.CtClass) -> setType
    void setType(javassist.CtClass,int) -> setType
    void doNumCast(javassist.CtClass) -> doNumCast
javassist.compiler.JvstTypeChecker -> javassist.compiler.JvstTypeChecker:
    javassist.compiler.JvstCodeGen codeGen -> codeGen
    void <init>(javassist.CtClass,javassist.ClassPool,javassist.compiler.JvstCodeGen) -> <init>
    void addNullIfVoid() -> addNullIfVoid
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> atFieldAssign
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atCastToRtype(javassist.compiler.ast.CastExpr) -> atCastToRtype
    void atCastToWrapper(javassist.compiler.ast.CastExpr) -> atCastToWrapper
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void atCflow(javassist.compiler.ast.ASTList) -> atCflow
    boolean isParamListName(javassist.compiler.ast.ASTList) -> isParamListName
    int getMethodArgsLength(javassist.compiler.ast.ASTList) -> getMethodArgsLength
    void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[]) -> atMethodArgs
    void compileInvokeSpecial(javassist.compiler.ast.ASTree,java.lang.String,java.lang.String,java.lang.String,javassist.compiler.ast.ASTList) -> compileInvokeSpecial
    void compileUnwrapValue(javassist.CtClass) -> compileUnwrapValue
    void setType(javassist.CtClass) -> setType
    void setType(javassist.CtClass,int) -> setType
javassist.compiler.KeywordTable -> javassist.compiler.KeywordTable:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int lookup(java.lang.String) -> lookup
    void append(java.lang.String,int) -> append
javassist.compiler.Lex -> javassist.compiler.Lex:
    int lastChar -> lastChar
    java.lang.StringBuffer textBuffer -> textBuffer
    javassist.compiler.Token currentToken -> currentToken
    javassist.compiler.Token lookAheadTokens -> lookAheadTokens
    java.lang.String input -> input
    int position -> position
    int maxlen -> maxlen
    int lineNumber -> lineNumber
    int[] equalOps -> equalOps
    javassist.compiler.KeywordTable ktable -> ktable
    void <init>(java.lang.String) -> <init>
    int get() -> get
    int lookAhead() -> lookAhead
    int lookAhead(int) -> lookAhead
    java.lang.String getString() -> getString
    long getLong() -> getLong
    double getDouble() -> getDouble
    int get(javassist.compiler.Token) -> get
    int readLine(javassist.compiler.Token) -> readLine
    int getNextNonWhiteChar() -> getNextNonWhiteChar
    int readCharConst(javassist.compiler.Token) -> readCharConst
    int readEscapeChar() -> readEscapeChar
    int readStringL(javassist.compiler.Token) -> readStringL
    int readNumber(int,javassist.compiler.Token) -> readNumber
    int readDouble(java.lang.StringBuffer,int,javassist.compiler.Token) -> readDouble
    int readSeparator(int) -> readSeparator
    int readIdentifier(int,javassist.compiler.Token) -> readIdentifier
    boolean isBlank(int) -> isBlank
    boolean isDigit(int) -> isDigit
    void ungetc(int) -> ungetc
    java.lang.String getTextAround() -> getTextAround
    int getc() -> getc
    void <clinit>() -> <clinit>
javassist.compiler.MemberCodeGen -> javassist.compiler.MemberCodeGen:
    javassist.compiler.MemberResolver resolver -> resolver
    javassist.CtClass thisClass -> thisClass
    javassist.bytecode.MethodInfo thisMethod -> thisMethod
    boolean resultStatic -> resultStatic
    void <init>(javassist.bytecode.Bytecode,javassist.CtClass,javassist.ClassPool) -> <init>
    int getMajorVersion() -> getMajorVersion
    void setThisMethod(javassist.CtMethod) -> setThisMethod
    javassist.CtClass getThisClass() -> getThisClass
    java.lang.String getThisName() -> getThisName
    java.lang.String getSuperName() -> getSuperName
    void insertDefaultSuperCall() -> insertDefaultSuperCall
    void atTryStmnt(javassist.compiler.ast.Stmnt) -> atTryStmnt
    void addFinally(java.util.List,javassist.compiler.ast.Stmnt) -> addFinally
    void atNewExpr(javassist.compiler.ast.NewExpr) -> atNewExpr
    void atNewArrayExpr(javassist.compiler.ast.NewExpr) -> atNewArrayExpr
    void atNewArrayExpr2(int,javassist.compiler.ast.ASTree,java.lang.String,javassist.compiler.ast.ArrayInit) -> atNewArrayExpr2
    void badNewExpr() -> badNewExpr
    void atArrayVariableAssign(javassist.compiler.ast.ArrayInit,int,int,java.lang.String) -> atArrayVariableAssign
    void atArrayInit(javassist.compiler.ast.ArrayInit) -> atArrayInit
    void atMultiNewArray(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList) -> atMultiNewArray
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void badMethod() -> badMethod
    void atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList,boolean,boolean,int,javassist.compiler.MemberResolver$Method) -> atMethodCallCore
    boolean isFromSameDeclaringClass(javassist.CtClass,javassist.CtClass) -> isFromSameDeclaringClass
    void atMethodCallCore2(javassist.CtClass,java.lang.String,boolean,boolean,int,javassist.compiler.MemberResolver$Method) -> atMethodCallCore2
    java.lang.String getAccessiblePrivate(java.lang.String,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo,javassist.CtClass) -> getAccessiblePrivate
    java.lang.String getAccessibleConstructor(java.lang.String,javassist.CtClass,javassist.bytecode.MethodInfo) -> getAccessibleConstructor
    boolean isEnclosing(javassist.CtClass,javassist.CtClass) -> isEnclosing
    int getMethodArgsLength(javassist.compiler.ast.ASTList) -> getMethodArgsLength
    void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[]) -> atMethodArgs
    void setReturnType(java.lang.String,boolean,boolean) -> setReturnType
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean) -> atFieldAssign
    void atFieldAssignCore(javassist.CtField,boolean,int,boolean) -> atFieldAssignCore
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atFieldRead(javassist.compiler.ast.ASTree) -> atFieldRead
    void atArrayLength(javassist.compiler.ast.ASTree) -> atArrayLength
    int atFieldRead(javassist.CtField,boolean) -> atFieldRead
    javassist.compiler.AccessorMaker isAccessibleField(javassist.CtField,javassist.bytecode.FieldInfo) -> isAccessibleField
    boolean setFieldType(javassist.bytecode.FieldInfo) -> setFieldType
    int addFieldrefInfo(javassist.CtField,javassist.bytecode.FieldInfo) -> addFieldrefInfo
    void atClassObject2(java.lang.String) -> atClassObject2
    void atFieldPlusPlus(int,boolean,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean) -> atFieldPlusPlus
    javassist.CtField fieldAccess(javassist.compiler.ast.ASTree,boolean) -> fieldAccess
    void badLvalue() -> badLvalue
    javassist.CtClass[] makeParamList(javassist.compiler.ast.MethodDecl) -> makeParamList
    javassist.CtClass[] makeThrowsList(javassist.compiler.ast.MethodDecl) -> makeThrowsList
    java.lang.String resolveClassName(javassist.compiler.ast.ASTList) -> resolveClassName
    java.lang.String resolveClassName(java.lang.String) -> resolveClassName
javassist.compiler.MemberCodeGen$JsrHook -> javassist.compiler.MemberCodeGen$JsrHook:
    java.util.List jsrList -> jsrList
    javassist.compiler.CodeGen cgen -> cgen
    int var -> var
    void <init>(javassist.compiler.CodeGen) -> <init>
    int getVar(int) -> getVar
    void jsrJmp(javassist.bytecode.Bytecode) -> jsrJmp
    boolean doit(javassist.bytecode.Bytecode,int) -> doit
javassist.compiler.MemberCodeGen$JsrHook2 -> javassist.compiler.MemberCodeGen$JsrHook2:
    int var -> var
    int target -> target
    void <init>(javassist.compiler.CodeGen,int[]) -> <init>
    boolean doit(javassist.bytecode.Bytecode,int) -> doit
javassist.compiler.MemberResolver -> javassist.compiler.MemberResolver:
    javassist.ClassPool classPool -> classPool
    int YES -> YES
    int NO -> NO
    java.lang.String INVALID -> INVALID
    java.util.Map invalidNamesMap -> invalidNamesMap
    java.util.Map invalidNames -> invalidNames
    void <init>(javassist.ClassPool) -> <init>
    javassist.ClassPool getClassPool() -> getClassPool
    void fatal() -> fatal
    javassist.compiler.MemberResolver$Method lookupMethod(javassist.CtClass,javassist.CtClass,javassist.bytecode.MethodInfo,java.lang.String,int[],int[],java.lang.String[]) -> lookupMethod
    javassist.compiler.MemberResolver$Method lookupMethod(javassist.CtClass,java.lang.String,int[],int[],java.lang.String[],boolean) -> lookupMethod
    int compareSignature(java.lang.String,int[],int[],java.lang.String[]) -> compareSignature
    javassist.CtField lookupFieldByJvmName2(java.lang.String,javassist.compiler.ast.Symbol,javassist.compiler.ast.ASTree) -> lookupFieldByJvmName2
    javassist.CtField lookupFieldByJvmName(java.lang.String,javassist.compiler.ast.Symbol) -> lookupFieldByJvmName
    javassist.CtField lookupField(java.lang.String,javassist.compiler.ast.Symbol) -> lookupField
    javassist.CtClass lookupClassByName(javassist.compiler.ast.ASTList) -> lookupClassByName
    javassist.CtClass lookupClassByJvmName(java.lang.String) -> lookupClassByJvmName
    javassist.CtClass lookupClass(javassist.compiler.ast.Declarator) -> lookupClass
    javassist.CtClass lookupClass(int,int,java.lang.String) -> lookupClass
    java.lang.String getTypeName(int) -> getTypeName
    javassist.CtClass lookupClass(java.lang.String,boolean) -> lookupClass
    int getInvalidMapSize() -> getInvalidMapSize
    java.util.Map getInvalidNames() -> getInvalidNames
    javassist.CtClass searchImports(java.lang.String) -> searchImports
    javassist.CtClass lookupClass0(java.lang.String,boolean) -> lookupClass0
    java.lang.String resolveClassName(javassist.compiler.ast.ASTList) -> resolveClassName
    java.lang.String resolveJvmClassName(java.lang.String) -> resolveJvmClassName
    javassist.CtClass getSuperclass(javassist.CtClass) -> getSuperclass
    javassist.CtClass getSuperInterface(javassist.CtClass,java.lang.String) -> getSuperInterface
    java.lang.String javaToJvmName(java.lang.String) -> javaToJvmName
    java.lang.String jvmToJavaName(java.lang.String) -> jvmToJavaName
    int descToType(char) -> descToType
    int getModifiers(javassist.compiler.ast.ASTList) -> getModifiers
    void <clinit>() -> <clinit>
javassist.compiler.MemberResolver$Method -> javassist.compiler.MemberResolver$Method:
    javassist.CtClass declaring -> declaring
    javassist.bytecode.MethodInfo info -> info
    int notmatch -> notmatch
    void <init>(javassist.CtClass,javassist.bytecode.MethodInfo,int) -> <init>
    boolean isStatic() -> isStatic
javassist.compiler.NoFieldException -> javassist.compiler.NoFieldException:
    long serialVersionUID -> serialVersionUID
    java.lang.String fieldName -> fieldName
    javassist.compiler.ast.ASTree expr -> expr
    void <init>(java.lang.String,javassist.compiler.ast.ASTree) -> <init>
    java.lang.String getField() -> getField
    javassist.compiler.ast.ASTree getExpr() -> getExpr
javassist.compiler.Parser -> javassist.compiler.Parser:
    javassist.compiler.Lex lex -> lex
    int[] binaryOpPrecedence -> binaryOpPrecedence
    void <init>(javassist.compiler.Lex) -> <init>
    boolean hasMore() -> hasMore
    javassist.compiler.ast.ASTList parseMember(javassist.compiler.SymbolTable) -> parseMember
    javassist.compiler.ast.ASTList parseMember1(javassist.compiler.SymbolTable) -> parseMember1
    javassist.compiler.ast.FieldDecl parseField(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTList,javassist.compiler.ast.Declarator) -> parseField
    javassist.compiler.ast.MethodDecl parseMethod1(javassist.compiler.SymbolTable,boolean,javassist.compiler.ast.ASTList,javassist.compiler.ast.Declarator) -> parseMethod1
    javassist.compiler.ast.MethodDecl parseMethod2(javassist.compiler.SymbolTable,javassist.compiler.ast.MethodDecl) -> parseMethod2
    javassist.compiler.ast.ASTList parseMemberMods() -> parseMemberMods
    javassist.compiler.ast.Declarator parseFormalType(javassist.compiler.SymbolTable) -> parseFormalType
    boolean isBuiltinType(int) -> isBuiltinType
    javassist.compiler.ast.Declarator parseFormalParam(javassist.compiler.SymbolTable) -> parseFormalParam
    javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable) -> parseStatement
    javassist.compiler.ast.Stmnt parseBlock(javassist.compiler.SymbolTable) -> parseBlock
    javassist.compiler.ast.Stmnt parseIf(javassist.compiler.SymbolTable) -> parseIf
    javassist.compiler.ast.Stmnt parseWhile(javassist.compiler.SymbolTable) -> parseWhile
    javassist.compiler.ast.Stmnt parseDo(javassist.compiler.SymbolTable) -> parseDo
    javassist.compiler.ast.Stmnt parseFor(javassist.compiler.SymbolTable) -> parseFor
    javassist.compiler.ast.Stmnt parseSwitch(javassist.compiler.SymbolTable) -> parseSwitch
    javassist.compiler.ast.Stmnt parseSwitchBlock(javassist.compiler.SymbolTable) -> parseSwitchBlock
    javassist.compiler.ast.Stmnt parseStmntOrCase(javassist.compiler.SymbolTable) -> parseStmntOrCase
    javassist.compiler.ast.Stmnt parseSynchronized(javassist.compiler.SymbolTable) -> parseSynchronized
    javassist.compiler.ast.Stmnt parseTry(javassist.compiler.SymbolTable) -> parseTry
    javassist.compiler.ast.Stmnt parseReturn(javassist.compiler.SymbolTable) -> parseReturn
    javassist.compiler.ast.Stmnt parseThrow(javassist.compiler.SymbolTable) -> parseThrow
    javassist.compiler.ast.Stmnt parseBreak(javassist.compiler.SymbolTable) -> parseBreak
    javassist.compiler.ast.Stmnt parseContinue(javassist.compiler.SymbolTable) -> parseContinue
    javassist.compiler.ast.Stmnt parseDeclarationOrExpression(javassist.compiler.SymbolTable,boolean) -> parseDeclarationOrExpression
    javassist.compiler.ast.Stmnt parseExprList(javassist.compiler.SymbolTable) -> parseExprList
    javassist.compiler.ast.Stmnt parseDeclarators(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator) -> parseDeclarators
    javassist.compiler.ast.Declarator parseDeclarator(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator) -> parseDeclarator
    javassist.compiler.ast.ASTree parseInitializer(javassist.compiler.SymbolTable) -> parseInitializer
    javassist.compiler.ast.ArrayInit parseArrayInitializer(javassist.compiler.SymbolTable) -> parseArrayInitializer
    javassist.compiler.ast.ASTree parseParExpression(javassist.compiler.SymbolTable) -> parseParExpression
    javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable) -> parseExpression
    boolean isAssignOp(int) -> isAssignOp
    javassist.compiler.ast.ASTree parseConditionalExpr(javassist.compiler.SymbolTable) -> parseConditionalExpr
    javassist.compiler.ast.ASTree parseBinaryExpr(javassist.compiler.SymbolTable) -> parseBinaryExpr
    javassist.compiler.ast.ASTree parseInstanceOf(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree) -> parseInstanceOf
    javassist.compiler.ast.ASTree binaryExpr2(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree,int) -> binaryExpr2
    int getOpPrecedence(int) -> getOpPrecedence
    javassist.compiler.ast.ASTree parseUnaryExpr(javassist.compiler.SymbolTable) -> parseUnaryExpr
    javassist.compiler.ast.ASTree parseCast(javassist.compiler.SymbolTable) -> parseCast
    boolean nextIsBuiltinCast() -> nextIsBuiltinCast
    boolean nextIsClassCast() -> nextIsClassCast
    int nextIsClassType(int) -> nextIsClassType
    int parseArrayDimension() -> parseArrayDimension
    javassist.compiler.ast.ASTList parseClassType(javassist.compiler.SymbolTable) -> parseClassType
    javassist.compiler.ast.ASTree parsePostfix(javassist.compiler.SymbolTable) -> parsePostfix
    javassist.compiler.ast.ASTree parseDotClass(javassist.compiler.ast.ASTree,int) -> parseDotClass
    javassist.compiler.ast.ASTree parseDotClass(int,int) -> parseDotClass
    javassist.compiler.ast.ASTree parseMethodCall(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree) -> parseMethodCall
    java.lang.String toClassName(javassist.compiler.ast.ASTree) -> toClassName
    void toClassName(javassist.compiler.ast.ASTree,java.lang.StringBuffer) -> toClassName
    javassist.compiler.ast.ASTree parsePrimaryExpr(javassist.compiler.SymbolTable) -> parsePrimaryExpr
    javassist.compiler.ast.NewExpr parseNew(javassist.compiler.SymbolTable) -> parseNew
    javassist.compiler.ast.ASTList parseArraySize(javassist.compiler.SymbolTable) -> parseArraySize
    javassist.compiler.ast.ASTree parseArrayIndex(javassist.compiler.SymbolTable) -> parseArrayIndex
    javassist.compiler.ast.ASTList parseArgumentList(javassist.compiler.SymbolTable) -> parseArgumentList
    void <clinit>() -> <clinit>
javassist.compiler.ProceedHandler -> javassist.compiler.ProceedHandler:
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.compiler.SymbolTable -> javassist.compiler.SymbolTable:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.SymbolTable parent -> parent
    void <init>() -> <init>
    void <init>(javassist.compiler.SymbolTable) -> <init>
    javassist.compiler.SymbolTable getParent() -> getParent
    javassist.compiler.ast.Declarator lookup(java.lang.String) -> lookup
    void append(java.lang.String,javassist.compiler.ast.Declarator) -> append
javassist.compiler.SyntaxError -> javassist.compiler.SyntaxError:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.Lex) -> <init>
javassist.compiler.Token -> javassist.compiler.Token:
    javassist.compiler.Token next -> next
    int tokenId -> tokenId
    long longValue -> longValue
    double doubleValue -> doubleValue
    java.lang.String textValue -> textValue
    void <init>() -> <init>
javassist.compiler.TokenId -> javassist.compiler.TokenId:
    int ABSTRACT -> ABSTRACT
    int BOOLEAN -> BOOLEAN
    int BREAK -> BREAK
    int BYTE -> BYTE
    int CASE -> CASE
    int CATCH -> CATCH
    int CHAR -> CHAR
    int CLASS -> CLASS
    int CONST -> CONST
    int CONTINUE -> CONTINUE
    int DEFAULT -> DEFAULT
    int DO -> DO
    int DOUBLE -> DOUBLE
    int ELSE -> ELSE
    int EXTENDS -> EXTENDS
    int FINAL -> FINAL
    int FINALLY -> FINALLY
    int FLOAT -> FLOAT
    int FOR -> FOR
    int GOTO -> GOTO
    int IF -> IF
    int IMPLEMENTS -> IMPLEMENTS
    int IMPORT -> IMPORT
    int INSTANCEOF -> INSTANCEOF
    int INT -> INT
    int INTERFACE -> INTERFACE
    int LONG -> LONG
    int NATIVE -> NATIVE
    int NEW -> NEW
    int PACKAGE -> PACKAGE
    int PRIVATE -> PRIVATE
    int PROTECTED -> PROTECTED
    int PUBLIC -> PUBLIC
    int RETURN -> RETURN
    int SHORT -> SHORT
    int STATIC -> STATIC
    int SUPER -> SUPER
    int SWITCH -> SWITCH
    int SYNCHRONIZED -> SYNCHRONIZED
    int THIS -> THIS
    int THROW -> THROW
    int THROWS -> THROWS
    int TRANSIENT -> TRANSIENT
    int TRY -> TRY
    int VOID -> VOID
    int VOLATILE -> VOLATILE
    int WHILE -> WHILE
    int STRICT -> STRICT
    int NEQ -> NEQ
    int MOD_E -> MOD_E
    int AND_E -> AND_E
    int MUL_E -> MUL_E
    int PLUS_E -> PLUS_E
    int MINUS_E -> MINUS_E
    int DIV_E -> DIV_E
    int LE -> LE
    int EQ -> EQ
    int GE -> GE
    int EXOR_E -> EXOR_E
    int OR_E -> OR_E
    int PLUSPLUS -> PLUSPLUS
    int MINUSMINUS -> MINUSMINUS
    int LSHIFT -> LSHIFT
    int LSHIFT_E -> LSHIFT_E
    int RSHIFT -> RSHIFT
    int RSHIFT_E -> RSHIFT_E
    int OROR -> OROR
    int ANDAND -> ANDAND
    int ARSHIFT -> ARSHIFT
    int ARSHIFT_E -> ARSHIFT_E
    java.lang.String[] opNames -> opNames
    int[] assignOps -> assignOps
    int Identifier -> Identifier
    int CharConstant -> CharConstant
    int IntConstant -> IntConstant
    int LongConstant -> LongConstant
    int FloatConstant -> FloatConstant
    int DoubleConstant -> DoubleConstant
    int StringL -> StringL
    int TRUE -> TRUE
    int FALSE -> FALSE
    int NULL -> NULL
    int CALL -> CALL
    int ARRAY -> ARRAY
    int MEMBER -> MEMBER
    int EXPR -> EXPR
    int LABEL -> LABEL
    int BLOCK -> BLOCK
    int DECL -> DECL
    int BadToken -> BadToken
    void <clinit>() -> <clinit>
javassist.compiler.TypeChecker -> javassist.compiler.TypeChecker:
    java.lang.String javaLangObject -> javaLangObject
    java.lang.String jvmJavaLangObject -> jvmJavaLangObject
    java.lang.String jvmJavaLangString -> jvmJavaLangString
    java.lang.String jvmJavaLangClass -> jvmJavaLangClass
    int exprType -> exprType
    int arrayDim -> arrayDim
    java.lang.String className -> className
    javassist.compiler.MemberResolver resolver -> resolver
    javassist.CtClass thisClass -> thisClass
    javassist.bytecode.MethodInfo thisMethod -> thisMethod
    void <init>(javassist.CtClass,javassist.ClassPool) -> <init>
    java.lang.String argTypesToString(int[],int[],java.lang.String[]) -> argTypesToString
    java.lang.StringBuffer typeToString(java.lang.StringBuffer,int,int,java.lang.String) -> typeToString
    void setThisMethod(javassist.bytecode.MethodInfo) -> setThisMethod
    void fatal() -> fatal
    java.lang.String getThisName() -> getThisName
    java.lang.String getSuperName() -> getSuperName
    java.lang.String resolveClassName(javassist.compiler.ast.ASTList) -> resolveClassName
    java.lang.String resolveClassName(java.lang.String) -> resolveClassName
    void atNewExpr(javassist.compiler.ast.NewExpr) -> atNewExpr
    void atNewArrayExpr(javassist.compiler.ast.NewExpr) -> atNewArrayExpr
    void atArrayInit(javassist.compiler.ast.ArrayInit) -> atArrayInit
    void atMultiNewArray(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList) -> atMultiNewArray
    void atAssignExpr(javassist.compiler.ast.AssignExpr) -> atAssignExpr
    void atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree) -> atVariableAssign
    void atArrayAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Expr,javassist.compiler.ast.ASTree) -> atArrayAssign
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> atFieldAssign
    void atCondExpr(javassist.compiler.ast.CondExpr) -> atCondExpr
    void atBinExpr(javassist.compiler.ast.BinExpr) -> atBinExpr
    javassist.compiler.ast.Expr atPlusExpr(javassist.compiler.ast.BinExpr) -> atPlusExpr
    boolean isConstant(javassist.compiler.ast.BinExpr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> isConstant
    javassist.compiler.ast.ASTree stripPlusExpr(javassist.compiler.ast.ASTree) -> stripPlusExpr
    javassist.compiler.ast.ASTree getConstantFieldValue(javassist.compiler.ast.Member) -> getConstantFieldValue
    javassist.compiler.ast.ASTree getConstantFieldValue(javassist.CtField) -> getConstantFieldValue
    boolean isPlusExpr(javassist.compiler.ast.ASTree) -> isPlusExpr
    javassist.compiler.ast.Expr makeAppendCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> makeAppendCall
    void computeBinExprType(javassist.compiler.ast.BinExpr,int,int) -> computeBinExprType
    void booleanExpr(javassist.compiler.ast.ASTree) -> booleanExpr
    void insertCast(javassist.compiler.ast.BinExpr,int,int) -> insertCast
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr) -> atInstanceOfExpr
    void atExpr(javassist.compiler.ast.Expr) -> atExpr
    boolean isConstant(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree) -> isConstant
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void badMethod() -> badMethod
    java.lang.String isDotSuper(javassist.compiler.ast.ASTree) -> isDotSuper
    javassist.compiler.MemberResolver$Method atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList) -> atMethodCallCore
    int getMethodArgsLength(javassist.compiler.ast.ASTList) -> getMethodArgsLength
    void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[]) -> atMethodArgs
    void setReturnType(java.lang.String) -> setReturnType
    void atFieldRead(javassist.compiler.ast.ASTree) -> atFieldRead
    void atFieldRead(javassist.CtField) -> atFieldRead
    javassist.CtField fieldAccess(javassist.compiler.ast.ASTree) -> fieldAccess
    javassist.CtField fieldAccess2(javassist.compiler.ast.Expr,java.lang.String) -> fieldAccess2
    void atClassObject(javassist.compiler.ast.Expr) -> atClassObject
    void atArrayLength(javassist.compiler.ast.Expr) -> atArrayLength
    void atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> atArrayRead
    void atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr) -> atPlusPlus
    void atFieldPlusPlus(javassist.compiler.ast.ASTree) -> atFieldPlusPlus
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atVariable(javassist.compiler.ast.Variable) -> atVariable
    void atKeyword(javassist.compiler.ast.Keyword) -> atKeyword
    void atStringL(javassist.compiler.ast.StringL) -> atStringL
    void atIntConst(javassist.compiler.ast.IntConst) -> atIntConst
    void atDoubleConst(javassist.compiler.ast.DoubleConst) -> atDoubleConst
javassist.compiler.ast.ASTList -> javassist.compiler.ast.ASTList:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.ast.ASTree left -> left
    javassist.compiler.ast.ASTList right -> right
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    void <init>(javassist.compiler.ast.ASTree) -> <init>
    javassist.compiler.ast.ASTList make(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> make
    javassist.compiler.ast.ASTree getLeft() -> getLeft
    javassist.compiler.ast.ASTree getRight() -> getRight
    void setLeft(javassist.compiler.ast.ASTree) -> setLeft
    void setRight(javassist.compiler.ast.ASTree) -> setRight
    javassist.compiler.ast.ASTree head() -> head
    void setHead(javassist.compiler.ast.ASTree) -> setHead
    javassist.compiler.ast.ASTList tail() -> tail
    void setTail(javassist.compiler.ast.ASTList) -> setTail
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String toString() -> toString
    int length() -> length
    int length(javassist.compiler.ast.ASTList) -> length
    javassist.compiler.ast.ASTList sublist(int) -> sublist
    boolean subst(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> subst
    javassist.compiler.ast.ASTList append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree) -> append
    javassist.compiler.ast.ASTList concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList) -> concat
javassist.compiler.ast.ASTree -> javassist.compiler.ast.ASTree:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    javassist.compiler.ast.ASTree getLeft() -> getLeft
    javassist.compiler.ast.ASTree getRight() -> getRight
    void setLeft(javassist.compiler.ast.ASTree) -> setLeft
    void setRight(javassist.compiler.ast.ASTree) -> setRight
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String toString() -> toString
    java.lang.String getTag() -> getTag
javassist.compiler.ast.ArrayInit -> javassist.compiler.ast.ArrayInit:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.ast.ASTree) -> <init>
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String getTag() -> getTag
javassist.compiler.ast.AssignExpr -> javassist.compiler.ast.AssignExpr:
    long serialVersionUID -> serialVersionUID
    void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    javassist.compiler.ast.AssignExpr makeAssign(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> makeAssign
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.BinExpr -> javassist.compiler.ast.BinExpr:
    long serialVersionUID -> serialVersionUID
    void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    javassist.compiler.ast.BinExpr makeBin(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> makeBin
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.CallExpr -> javassist.compiler.ast.CallExpr:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.MemberResolver$Method method -> method
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    void setMethod(javassist.compiler.MemberResolver$Method) -> setMethod
    javassist.compiler.MemberResolver$Method getMethod() -> getMethod
    javassist.compiler.ast.CallExpr makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> makeCall
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.CastExpr -> javassist.compiler.ast.CastExpr:
    long serialVersionUID -> serialVersionUID
    int castType -> castType
    int arrayDim -> arrayDim
    void <init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree) -> <init>
    void <init>(int,int,javassist.compiler.ast.ASTree) -> <init>
    int getType() -> getType
    int getArrayDim() -> getArrayDim
    javassist.compiler.ast.ASTList getClassName() -> getClassName
    javassist.compiler.ast.ASTree getOprand() -> getOprand
    void setOprand(javassist.compiler.ast.ASTree) -> setOprand
    java.lang.String getTag() -> getTag
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.CondExpr -> javassist.compiler.ast.CondExpr:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> <init>
    javassist.compiler.ast.ASTree condExpr() -> condExpr
    void setCond(javassist.compiler.ast.ASTree) -> setCond
    javassist.compiler.ast.ASTree thenExpr() -> thenExpr
    void setThen(javassist.compiler.ast.ASTree) -> setThen
    javassist.compiler.ast.ASTree elseExpr() -> elseExpr
    void setElse(javassist.compiler.ast.ASTree) -> setElse
    java.lang.String getTag() -> getTag
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Declarator -> javassist.compiler.ast.Declarator:
    long serialVersionUID -> serialVersionUID
    int varType -> varType
    int arrayDim -> arrayDim
    int localVar -> localVar
    java.lang.String qualifiedClass -> qualifiedClass
    void <init>(int,int) -> <init>
    void <init>(javassist.compiler.ast.ASTList,int) -> <init>
    void <init>(int,java.lang.String,int,int,javassist.compiler.ast.Symbol) -> <init>
    javassist.compiler.ast.Declarator make(javassist.compiler.ast.Symbol,int,javassist.compiler.ast.ASTree) -> make
    int getType() -> getType
    int getArrayDim() -> getArrayDim
    void addArrayDim(int) -> addArrayDim
    java.lang.String getClassName() -> getClassName
    void setClassName(java.lang.String) -> setClassName
    javassist.compiler.ast.Symbol getVariable() -> getVariable
    void setVariable(javassist.compiler.ast.Symbol) -> setVariable
    javassist.compiler.ast.ASTree getInitializer() -> getInitializer
    void setLocalVar(int) -> setLocalVar
    int getLocalVar() -> getLocalVar
    java.lang.String getTag() -> getTag
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String astToClassName(javassist.compiler.ast.ASTList,char) -> astToClassName
    void astToClassName(java.lang.StringBuffer,javassist.compiler.ast.ASTList,char) -> astToClassName
javassist.compiler.ast.DoubleConst -> javassist.compiler.ast.DoubleConst:
    long serialVersionUID -> serialVersionUID
    double value -> value
    int type -> type
    void <init>(double,int) -> <init>
    double get() -> get
    void set(double) -> set
    int getType() -> getType
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
    javassist.compiler.ast.ASTree compute(int,javassist.compiler.ast.ASTree) -> compute
    javassist.compiler.ast.DoubleConst compute0(int,javassist.compiler.ast.DoubleConst) -> compute0
    javassist.compiler.ast.DoubleConst compute0(int,javassist.compiler.ast.IntConst) -> compute0
    javassist.compiler.ast.DoubleConst compute(int,double,double,int) -> compute
javassist.compiler.ast.Expr -> javassist.compiler.ast.Expr:
    long serialVersionUID -> serialVersionUID
    int operatorId -> operatorId
    void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    void <init>(int,javassist.compiler.ast.ASTree) -> <init>
    javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> make
    javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree) -> make
    int getOperator() -> getOperator
    void setOperator(int) -> setOperator
    javassist.compiler.ast.ASTree oprand1() -> oprand1
    void setOprand1(javassist.compiler.ast.ASTree) -> setOprand1
    javassist.compiler.ast.ASTree oprand2() -> oprand2
    void setOprand2(javassist.compiler.ast.ASTree) -> setOprand2
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String getName() -> getName
    java.lang.String getTag() -> getTag
javassist.compiler.ast.FieldDecl -> javassist.compiler.ast.FieldDecl:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    javassist.compiler.ast.ASTList getModifiers() -> getModifiers
    javassist.compiler.ast.Declarator getDeclarator() -> getDeclarator
    javassist.compiler.ast.ASTree getInit() -> getInit
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.InstanceOfExpr -> javassist.compiler.ast.InstanceOfExpr:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree) -> <init>
    void <init>(int,int,javassist.compiler.ast.ASTree) -> <init>
    java.lang.String getTag() -> getTag
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.IntConst -> javassist.compiler.ast.IntConst:
    long serialVersionUID -> serialVersionUID
    long value -> value
    int type -> type
    void <init>(long,int) -> <init>
    long get() -> get
    void set(long) -> set
    int getType() -> getType
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
    javassist.compiler.ast.ASTree compute(int,javassist.compiler.ast.ASTree) -> compute
    javassist.compiler.ast.IntConst compute0(int,javassist.compiler.ast.IntConst) -> compute0
    javassist.compiler.ast.DoubleConst compute0(int,javassist.compiler.ast.DoubleConst) -> compute0
javassist.compiler.ast.Keyword -> javassist.compiler.ast.Keyword:
    long serialVersionUID -> serialVersionUID
    int tokenId -> tokenId
    void <init>(int) -> <init>
    int get() -> get
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Member -> javassist.compiler.ast.Member:
    long serialVersionUID -> serialVersionUID
    javassist.CtField field -> field
    void <init>(java.lang.String) -> <init>
    void setField(javassist.CtField) -> setField
    javassist.CtField getField() -> getField
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.MethodDecl -> javassist.compiler.ast.MethodDecl:
    long serialVersionUID -> serialVersionUID
    java.lang.String initName -> initName
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    boolean isConstructor() -> isConstructor
    javassist.compiler.ast.ASTList getModifiers() -> getModifiers
    javassist.compiler.ast.Declarator getReturn() -> getReturn
    javassist.compiler.ast.ASTList getParams() -> getParams
    javassist.compiler.ast.ASTList getThrows() -> getThrows
    javassist.compiler.ast.Stmnt getBody() -> getBody
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.NewExpr -> javassist.compiler.ast.NewExpr:
    long serialVersionUID -> serialVersionUID
    boolean newArray -> newArray
    int arrayType -> arrayType
    void <init>(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList) -> <init>
    void <init>(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit) -> <init>
    javassist.compiler.ast.NewExpr makeObjectArray(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit) -> makeObjectArray
    boolean isArray() -> isArray
    int getArrayType() -> getArrayType
    javassist.compiler.ast.ASTList getClassName() -> getClassName
    javassist.compiler.ast.ASTList getArguments() -> getArguments
    javassist.compiler.ast.ASTList getArraySize() -> getArraySize
    javassist.compiler.ast.ArrayInit getInitializer() -> getInitializer
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String getTag() -> getTag
javassist.compiler.ast.Pair -> javassist.compiler.ast.Pair:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.ast.ASTree left -> left
    javassist.compiler.ast.ASTree right -> right
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> <init>
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String toString() -> toString
    javassist.compiler.ast.ASTree getLeft() -> getLeft
    javassist.compiler.ast.ASTree getRight() -> getRight
    void setLeft(javassist.compiler.ast.ASTree) -> setLeft
    void setRight(javassist.compiler.ast.ASTree) -> setRight
javassist.compiler.ast.Stmnt -> javassist.compiler.ast.Stmnt:
    long serialVersionUID -> serialVersionUID
    int operatorId -> operatorId
    void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    void <init>(int,javassist.compiler.ast.ASTree) -> <init>
    void <init>(int) -> <init>
    javassist.compiler.ast.Stmnt make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> make
    javassist.compiler.ast.Stmnt make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> make
    void accept(javassist.compiler.ast.Visitor) -> accept
    int getOperator() -> getOperator
    java.lang.String getTag() -> getTag
javassist.compiler.ast.StringL -> javassist.compiler.ast.StringL:
    long serialVersionUID -> serialVersionUID
    java.lang.String text -> text
    void <init>(java.lang.String) -> <init>
    java.lang.String get() -> get
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Symbol -> javassist.compiler.ast.Symbol:
    long serialVersionUID -> serialVersionUID
    java.lang.String identifier -> identifier
    void <init>(java.lang.String) -> <init>
    java.lang.String get() -> get
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Variable -> javassist.compiler.ast.Variable:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.ast.Declarator declarator -> declarator
    void <init>(java.lang.String,javassist.compiler.ast.Declarator) -> <init>
    javassist.compiler.ast.Declarator getDeclarator() -> getDeclarator
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Visitor -> javassist.compiler.ast.Visitor:
    void <init>() -> <init>
    void atASTList(javassist.compiler.ast.ASTList) -> atASTList
    void atPair(javassist.compiler.ast.Pair) -> atPair
    void atFieldDecl(javassist.compiler.ast.FieldDecl) -> atFieldDecl
    void atMethodDecl(javassist.compiler.ast.MethodDecl) -> atMethodDecl
    void atStmnt(javassist.compiler.ast.Stmnt) -> atStmnt
    void atDeclarator(javassist.compiler.ast.Declarator) -> atDeclarator
    void atAssignExpr(javassist.compiler.ast.AssignExpr) -> atAssignExpr
    void atCondExpr(javassist.compiler.ast.CondExpr) -> atCondExpr
    void atBinExpr(javassist.compiler.ast.BinExpr) -> atBinExpr
    void atExpr(javassist.compiler.ast.Expr) -> atExpr
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr) -> atInstanceOfExpr
    void atNewExpr(javassist.compiler.ast.NewExpr) -> atNewExpr
    void atSymbol(javassist.compiler.ast.Symbol) -> atSymbol
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atVariable(javassist.compiler.ast.Variable) -> atVariable
    void atKeyword(javassist.compiler.ast.Keyword) -> atKeyword
    void atStringL(javassist.compiler.ast.StringL) -> atStringL
    void atIntConst(javassist.compiler.ast.IntConst) -> atIntConst
    void atDoubleConst(javassist.compiler.ast.DoubleConst) -> atDoubleConst
    void atArrayInit(javassist.compiler.ast.ArrayInit) -> atArrayInit
javassist.convert.TransformAccessArrayField -> javassist.convert.TransformAccessArrayField:
    java.lang.String methodClassname -> methodClassname
    javassist.CodeConverter$ArrayAccessReplacementMethodNames names -> names
    javassist.bytecode.analysis.Frame[] frames -> frames
    int offset -> offset
    void <init>(javassist.convert.Transformer,java.lang.String,javassist.CodeConverter$ArrayAccessReplacementMethodNames) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.CtClass,javassist.bytecode.MethodInfo) -> initialize
    void clean() -> clean
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
    javassist.bytecode.analysis.Frame getFrame(int) -> getFrame
    void initFrames(javassist.CtClass,javassist.bytecode.MethodInfo) -> initFrames
    int updatePos(int,int) -> updatePos
    java.lang.String getTopType(int) -> getTopType
    int replace(javassist.bytecode.ConstPool,javassist.bytecode.CodeIterator,int,int,java.lang.String) -> replace
    java.lang.String getMethodName(int) -> getMethodName
    java.lang.String getLoadReplacementSignature(int) -> getLoadReplacementSignature
    java.lang.String getStoreReplacementSignature(int) -> getStoreReplacementSignature
javassist.convert.TransformAfter -> javassist.convert.TransformAfter:
    void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod) -> <init>
    int match2(int,javassist.bytecode.CodeIterator) -> match2
javassist.convert.TransformBefore -> javassist.convert.TransformBefore:
    javassist.CtClass[] parameterTypes -> parameterTypes
    int locals -> locals
    int maxLocals -> maxLocals
    byte[] saveCode -> saveCode
    byte[] loadCode -> loadCode
    void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int match(int,int,javassist.bytecode.CodeIterator,int,javassist.bytecode.ConstPool) -> match
    int match2(int,javassist.bytecode.CodeIterator) -> match2
    int extraLocals() -> extraLocals
    void makeCode(javassist.CtClass[],javassist.bytecode.ConstPool) -> makeCode
    void makeCode2(javassist.bytecode.Bytecode,javassist.bytecode.Bytecode,int,int,javassist.CtClass[],int) -> makeCode2
javassist.convert.TransformCall -> javassist.convert.TransformCall:
    java.lang.String classname -> classname
    java.lang.String methodname -> methodname
    java.lang.String methodDescriptor -> methodDescriptor
    java.lang.String newClassname -> newClassname
    java.lang.String newMethodname -> newMethodname
    boolean newMethodIsPrivate -> newMethodIsPrivate
    int newIndex -> newIndex
    javassist.bytecode.ConstPool constPool -> constPool
    void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod) -> <init>
    void <init>(javassist.convert.Transformer,java.lang.String,javassist.CtMethod) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
    boolean matchClass(java.lang.String,javassist.ClassPool) -> matchClass
    int match(int,int,javassist.bytecode.CodeIterator,int,javassist.bytecode.ConstPool) -> match
javassist.convert.TransformCallToStatic -> javassist.convert.TransformCallToStatic:
    void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod) -> <init>
    int match(int,int,javassist.bytecode.CodeIterator,int,javassist.bytecode.ConstPool) -> match
javassist.convert.TransformFieldAccess -> javassist.convert.TransformFieldAccess:
    java.lang.String newClassname -> newClassname
    java.lang.String newFieldname -> newFieldname
    java.lang.String fieldname -> fieldname
    javassist.CtClass fieldClass -> fieldClass
    boolean isPrivate -> isPrivate
    int newIndex -> newIndex
    javassist.bytecode.ConstPool constPool -> constPool
    void <init>(javassist.convert.Transformer,javassist.CtField,java.lang.String,java.lang.String) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
javassist.convert.TransformNew -> javassist.convert.TransformNew:
    int nested -> nested
    java.lang.String classname -> classname
    java.lang.String trapClass -> trapClass
    java.lang.String trapMethod -> trapMethod
    void <init>(javassist.convert.Transformer,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
    int computeMethodref(int,javassist.bytecode.ConstPool) -> computeMethodref
javassist.convert.TransformNewClass -> javassist.convert.TransformNewClass:
    int nested -> nested
    java.lang.String classname -> classname
    java.lang.String newClassName -> newClassName
    int newClassIndex -> newClassIndex
    int newMethodNTIndex -> newMethodNTIndex
    int newMethodIndex -> newMethodIndex
    void <init>(javassist.convert.Transformer,java.lang.String,java.lang.String) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
javassist.convert.TransformReadField -> javassist.convert.TransformReadField:
    java.lang.String fieldname -> fieldname
    javassist.CtClass fieldClass -> fieldClass
    boolean isPrivate -> isPrivate
    java.lang.String methodClassname -> methodClassname
    java.lang.String methodName -> methodName
    void <init>(javassist.convert.Transformer,javassist.CtField,java.lang.String,java.lang.String) -> <init>
    java.lang.String isField(javassist.ClassPool,javassist.bytecode.ConstPool,javassist.CtClass,java.lang.String,boolean,int) -> isField
    boolean isFieldInSuper(javassist.CtClass,javassist.CtClass,java.lang.String) -> isFieldInSuper
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
javassist.convert.TransformWriteField -> javassist.convert.TransformWriteField:
    void <init>(javassist.convert.Transformer,javassist.CtField,java.lang.String,java.lang.String) -> <init>
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
javassist.convert.Transformer -> javassist.convert.Transformer:
    javassist.convert.Transformer next -> next
    void <init>(javassist.convert.Transformer) -> <init>
    javassist.convert.Transformer getNext() -> getNext
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    void initialize(javassist.bytecode.ConstPool,javassist.CtClass,javassist.bytecode.MethodInfo) -> initialize
    void clean() -> clean
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
    int extraLocals() -> extraLocals
    int extraStack() -> extraStack
javassist.expr.Cast -> javassist.expr.Cast:
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass getType() -> getType
    javassist.CtClass[] mayThrow() -> mayThrow
    void replace(java.lang.String) -> replace
javassist.expr.Cast$ProceedForCast -> javassist.expr.Cast$ProceedForCast:
    int index -> index
    javassist.CtClass retType -> retType
    void <init>(int,javassist.CtClass) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.ConstructorCall -> javassist.expr.ConstructorCall:
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    java.lang.String getMethodName() -> getMethodName
    javassist.CtMethod getMethod() -> getMethod
    javassist.CtConstructor getConstructor() -> getConstructor
    boolean isSuper() -> isSuper
javassist.expr.Expr -> javassist.expr.Expr:
    int currentPos -> currentPos
    javassist.bytecode.CodeIterator iterator -> iterator
    javassist.CtClass thisClass -> thisClass
    javassist.bytecode.MethodInfo thisMethod -> thisMethod
    boolean edited -> edited
    int maxLocals -> maxLocals
    int maxStack -> maxStack
    java.lang.String javaLangObject -> javaLangObject
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.CtClass getEnclosingClass() -> getEnclosingClass
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    boolean edited() -> edited
    int locals() -> locals
    int stack() -> stack
    boolean withinStatic() -> withinStatic
    javassist.CtBehavior where() -> where
    javassist.CtClass[] mayThrow() -> mayThrow
    void addClass(java.util.List,javassist.CtClass) -> addClass
    int indexOfBytecode() -> indexOfBytecode
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    boolean checkResultValue(javassist.CtClass,java.lang.String) -> checkResultValue
    void storeStack(javassist.CtClass[],boolean,int,javassist.bytecode.Bytecode) -> storeStack
    void storeStack0(int,int,javassist.CtClass[],int,javassist.bytecode.Bytecode) -> storeStack0
    void replace(java.lang.String) -> replace
    void replace(java.lang.String,javassist.expr.ExprEditor) -> replace
    void replace0(int,javassist.bytecode.Bytecode,int) -> replace0
    void runEditor(javassist.expr.ExprEditor,javassist.bytecode.CodeIterator) -> runEditor
javassist.expr.ExprEditor -> javassist.expr.ExprEditor:
    void <init>() -> <init>
    boolean doit(javassist.CtClass,javassist.bytecode.MethodInfo) -> doit
    boolean doit(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.expr.ExprEditor$LoopContext,javassist.bytecode.CodeIterator,int) -> doit
    boolean loopBody(javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo,javassist.expr.ExprEditor$LoopContext) -> loopBody
    void edit(javassist.expr.NewExpr) -> edit
    void edit(javassist.expr.NewArray) -> edit
    void edit(javassist.expr.MethodCall) -> edit
    void edit(javassist.expr.ConstructorCall) -> edit
    void edit(javassist.expr.FieldAccess) -> edit
    void edit(javassist.expr.Instanceof) -> edit
    void edit(javassist.expr.Cast) -> edit
    void edit(javassist.expr.Handler) -> edit
javassist.expr.ExprEditor$LoopContext -> javassist.expr.ExprEditor$LoopContext:
    javassist.expr.ExprEditor$NewOp newList -> newList
    int maxLocals -> maxLocals
    int maxStack -> maxStack
    void <init>(int) -> <init>
    void updateMax(int,int) -> updateMax
javassist.expr.ExprEditor$NewOp -> javassist.expr.ExprEditor$NewOp:
    javassist.expr.ExprEditor$NewOp next -> next
    int pos -> pos
    java.lang.String type -> type
    void <init>(javassist.expr.ExprEditor$NewOp,int,java.lang.String) -> <init>
javassist.expr.FieldAccess -> javassist.expr.FieldAccess:
    int opcode -> opcode
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo,int) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    boolean isStatic() -> isStatic
    boolean isStatic(int) -> isStatic
    boolean isReader() -> isReader
    boolean isWriter() -> isWriter
    javassist.CtClass getCtClass() -> getCtClass
    java.lang.String getClassName() -> getClassName
    java.lang.String getFieldName() -> getFieldName
    javassist.CtField getField() -> getField
    javassist.CtClass[] mayThrow() -> mayThrow
    java.lang.String getSignature() -> getSignature
    void replace(java.lang.String) -> replace
javassist.expr.FieldAccess$ProceedForRead -> javassist.expr.FieldAccess$ProceedForRead:
    javassist.CtClass fieldType -> fieldType
    int opcode -> opcode
    int targetVar -> targetVar
    int index -> index
    void <init>(javassist.CtClass,int,int,int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.FieldAccess$ProceedForWrite -> javassist.expr.FieldAccess$ProceedForWrite:
    javassist.CtClass fieldType -> fieldType
    int opcode -> opcode
    int targetVar -> targetVar
    int index -> index
    void <init>(javassist.CtClass,int,int,int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.Handler -> javassist.expr.Handler:
    java.lang.String EXCEPTION_NAME -> EXCEPTION_NAME
    javassist.bytecode.ExceptionTable etable -> etable
    int index -> index
    void <init>(javassist.bytecode.ExceptionTable,int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass[] mayThrow() -> mayThrow
    javassist.CtClass getType() -> getType
    boolean isFinally() -> isFinally
    void replace(java.lang.String) -> replace
    void insertBefore(java.lang.String) -> insertBefore
    void <clinit>() -> <clinit>
javassist.expr.Instanceof -> javassist.expr.Instanceof:
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass getType() -> getType
    javassist.CtClass[] mayThrow() -> mayThrow
    void replace(java.lang.String) -> replace
javassist.expr.Instanceof$ProceedForInstanceof -> javassist.expr.Instanceof$ProceedForInstanceof:
    int index -> index
    void <init>(int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.MethodCall -> javassist.expr.MethodCall:
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    int getNameAndType(javassist.bytecode.ConstPool) -> getNameAndType
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass getCtClass() -> getCtClass
    java.lang.String getClassName() -> getClassName
    java.lang.String getMethodName() -> getMethodName
    javassist.CtMethod getMethod() -> getMethod
    java.lang.String getSignature() -> getSignature
    javassist.CtClass[] mayThrow() -> mayThrow
    boolean isSuper() -> isSuper
    void replace(java.lang.String) -> replace
javassist.expr.NewArray -> javassist.expr.NewArray:
    int opcode -> opcode
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo,int) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass[] mayThrow() -> mayThrow
    javassist.CtClass getComponentType() -> getComponentType
    javassist.CtClass getPrimitiveType(int) -> getPrimitiveType
    int getDimension() -> getDimension
    int getCreatedDimensions() -> getCreatedDimensions
    void replace(java.lang.String) -> replace
    void replace2(java.lang.String) -> replace2
javassist.expr.NewArray$ProceedForArray -> javassist.expr.NewArray$ProceedForArray:
    javassist.CtClass arrayType -> arrayType
    int opcode -> opcode
    int index -> index
    int dimension -> dimension
    void <init>(javassist.CtClass,int,int,int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.NewExpr -> javassist.expr.NewExpr:
    java.lang.String newTypeName -> newTypeName
    int newPos -> newPos
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo,java.lang.String,int) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass getCtClass() -> getCtClass
    java.lang.String getClassName() -> getClassName
    java.lang.String getSignature() -> getSignature
    javassist.CtConstructor getConstructor() -> getConstructor
    javassist.CtClass[] mayThrow() -> mayThrow
    int canReplace() -> canReplace
    void replace(java.lang.String) -> replace
javassist.expr.NewExpr$ProceedForNew -> javassist.expr.NewExpr$ProceedForNew:
    javassist.CtClass newType -> newType
    int newIndex -> newIndex
    int methodIndex -> methodIndex
    void <init>(javassist.CtClass,int,int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.runtime.Cflow -> javassist.runtime.Cflow:
    void <init>() -> <init>
    javassist.runtime.Cflow$Depth initialValue() -> initialValue
    void enter() -> enter
    void exit() -> exit
    int value() -> value
    java.lang.Object initialValue() -> initialValue
javassist.runtime.Cflow$Depth -> javassist.runtime.Cflow$Depth:
    int depth -> depth
    void <init>() -> <init>
    int value() -> value
    void inc() -> inc
    void dec() -> dec
javassist.runtime.Desc -> javassist.runtime.Desc:
    boolean useContextClassLoader -> useContextClassLoader
    java.lang.ThreadLocal USE_CONTEXT_CLASS_LOADER_LOCALLY -> USE_CONTEXT_CLASS_LOADER_LOCALLY
    void <init>() -> <init>
    void setUseContextClassLoaderLocally() -> setUseContextClassLoaderLocally
    void resetUseContextClassLoaderLocally() -> resetUseContextClassLoaderLocally
    java.lang.Class getClassObject(java.lang.String) -> getClassObject
    java.lang.Class getClazz(java.lang.String) -> getClazz
    java.lang.Class[] getParams(java.lang.String) -> getParams
    java.lang.Class getType(java.lang.String) -> getType
    java.lang.Class[] getType(java.lang.String,int,int,int) -> getType
    java.lang.Class[] getClassType(java.lang.String,int,int,int) -> getClassType
    void <clinit>() -> <clinit>
javassist.runtime.Desc$1 -> javassist.runtime.Desc$1:
    void <init>() -> <init>
    java.lang.Boolean initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
javassist.runtime.DotClass -> javassist.runtime.DotClass:
    void <init>() -> <init>
    java.lang.NoClassDefFoundError fail(java.lang.ClassNotFoundException) -> fail
javassist.runtime.Inner -> javassist.runtime.Inner:
    void <init>() -> <init>
javassist.scopedpool.ScopedClassPool -> javassist.scopedpool.ScopedClassPool:
    javassist.scopedpool.ScopedClassPoolRepository repository -> repository
    java.lang.ref.Reference classLoader -> classLoader
    javassist.LoaderClassPath classPath -> classPath
    java.util.Map softcache -> softcache
    boolean isBootstrapCl -> isBootstrapCl
    void <init>(java.lang.ClassLoader,javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> <init>
    void <init>(java.lang.ClassLoader,javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository,boolean) -> <init>
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    java.lang.ClassLoader getClassLoader0() -> getClassLoader0
    void close() -> close
    void flushClass(java.lang.String) -> flushClass
    void soften(javassist.CtClass) -> soften
    boolean isUnloadedClassLoader() -> isUnloadedClassLoader
    javassist.CtClass getCached(java.lang.String) -> getCached
    void cacheCtClass(java.lang.String,javassist.CtClass,boolean) -> cacheCtClass
    void lockInCache(javassist.CtClass) -> lockInCache
    javassist.CtClass getCachedLocally(java.lang.String) -> getCachedLocally
    javassist.CtClass getLocally(java.lang.String) -> getLocally
    java.lang.Class toClass(javassist.CtClass,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    void <clinit>() -> <clinit>
javassist.scopedpool.ScopedClassPoolFactory -> javassist.scopedpool.ScopedClassPoolFactory:
    javassist.scopedpool.ScopedClassPool create(java.lang.ClassLoader,javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> create
    javassist.scopedpool.ScopedClassPool create(javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> create
javassist.scopedpool.ScopedClassPoolFactoryImpl -> javassist.scopedpool.ScopedClassPoolFactoryImpl:
    void <init>() -> <init>
    javassist.scopedpool.ScopedClassPool create(java.lang.ClassLoader,javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> create
    javassist.scopedpool.ScopedClassPool create(javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> create
javassist.scopedpool.ScopedClassPoolRepository -> javassist.scopedpool.ScopedClassPoolRepository:
    void setClassPoolFactory(javassist.scopedpool.ScopedClassPoolFactory) -> setClassPoolFactory
    javassist.scopedpool.ScopedClassPoolFactory getClassPoolFactory() -> getClassPoolFactory
    boolean isPrune() -> isPrune
    void setPrune(boolean) -> setPrune
    javassist.scopedpool.ScopedClassPool createScopedClassPool(java.lang.ClassLoader,javassist.ClassPool) -> createScopedClassPool
    javassist.ClassPool findClassPool(java.lang.ClassLoader) -> findClassPool
    javassist.ClassPool registerClassLoader(java.lang.ClassLoader) -> registerClassLoader
    java.util.Map getRegisteredCLs() -> getRegisteredCLs
    void clearUnregisteredClassLoaders() -> clearUnregisteredClassLoaders
    void unregisterClassLoader(java.lang.ClassLoader) -> unregisterClassLoader
javassist.scopedpool.ScopedClassPoolRepositoryImpl -> javassist.scopedpool.ScopedClassPoolRepositoryImpl:
    javassist.scopedpool.ScopedClassPoolRepositoryImpl instance -> instance
    boolean prune -> prune
    boolean pruneWhenCached -> pruneWhenCached
    java.util.Map registeredCLs -> registeredCLs
    javassist.ClassPool classpool -> classpool
    javassist.scopedpool.ScopedClassPoolFactory factory -> factory
    javassist.scopedpool.ScopedClassPoolRepository getInstance() -> getInstance
    void <init>() -> <init>
    boolean isPrune() -> isPrune
    void setPrune(boolean) -> setPrune
    javassist.scopedpool.ScopedClassPool createScopedClassPool(java.lang.ClassLoader,javassist.ClassPool) -> createScopedClassPool
    javassist.ClassPool findClassPool(java.lang.ClassLoader) -> findClassPool
    javassist.ClassPool registerClassLoader(java.lang.ClassLoader) -> registerClassLoader
    java.util.Map getRegisteredCLs() -> getRegisteredCLs
    void clearUnregisteredClassLoaders() -> clearUnregisteredClassLoaders
    void unregisterClassLoader(java.lang.ClassLoader) -> unregisterClassLoader
    void insertDelegate(javassist.scopedpool.ScopedClassPoolRepository) -> insertDelegate
    void setClassPoolFactory(javassist.scopedpool.ScopedClassPoolFactory) -> setClassPoolFactory
    javassist.scopedpool.ScopedClassPoolFactory getClassPoolFactory() -> getClassPoolFactory
    void <clinit>() -> <clinit>
javassist.scopedpool.SoftValueHashMap -> javassist.scopedpool.SoftValueHashMap:
    java.util.Map hash -> hash
    java.lang.ref.ReferenceQueue queue -> queue
    java.util.Set entrySet() -> entrySet
    void processQueue() -> processQueue
    void <init>(int,float) -> <init>
    void <init>(int) -> <init>
    void <init>() -> <init>
    void <init>(java.util.Map) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set keySet() -> keySet
    void putAll(java.util.Map) -> putAll
    java.util.Collection values() -> values
    java.lang.Object valueOrNull(javassist.scopedpool.SoftValueHashMap$SoftValueRef) -> valueOrNull
javassist.scopedpool.SoftValueHashMap$SoftValueRef -> javassist.scopedpool.SoftValueHashMap$SoftValueRef:
    java.lang.Object key -> key
    void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue) -> <init>
    javassist.scopedpool.SoftValueHashMap$SoftValueRef create(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue) -> create
    javassist.scopedpool.SoftValueHashMap$SoftValueRef access$000(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue) -> access$000
javassist.tools.Callback -> javassist.tools.Callback:
    java.util.Map callbacks -> callbacks
    java.lang.String sourceCode -> sourceCode
    void <init>(java.lang.String) -> <init>
    void result(java.lang.Object[]) -> result
    java.lang.String toString() -> toString
    java.lang.String sourceCode() -> sourceCode
    void insertBefore(javassist.CtBehavior,javassist.tools.Callback) -> insertBefore
    void insertAfter(javassist.CtBehavior,javassist.tools.Callback) -> insertAfter
    void insertAfter(javassist.CtBehavior,javassist.tools.Callback,boolean) -> insertAfter
    int insertAt(javassist.CtBehavior,javassist.tools.Callback,int) -> insertAt
    void <clinit>() -> <clinit>
javassist.tools.Dump -> javassist.tools.Dump:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
javassist.tools.framedump -> javassist.tools.framedump:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
javassist.tools.reflect.CannotCreateException -> javassist.tools.reflect.CannotCreateException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Exception) -> <init>
javassist.tools.reflect.CannotInvokeException -> javassist.tools.reflect.CannotInvokeException:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable err -> err
    java.lang.Throwable getReason() -> getReason
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.reflect.InvocationTargetException) -> <init>
    void <init>(java.lang.IllegalAccessException) -> <init>
    void <init>(java.lang.ClassNotFoundException) -> <init>
javassist.tools.reflect.CannotReflectException -> javassist.tools.reflect.CannotReflectException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
javassist.tools.reflect.ClassMetaobject -> javassist.tools.reflect.ClassMetaobject:
    long serialVersionUID -> serialVersionUID
    java.lang.String methodPrefix -> methodPrefix
    int methodPrefixLen -> methodPrefixLen
    java.lang.Class javaClass -> javaClass
    java.lang.reflect.Constructor[] constructors -> constructors
    java.lang.reflect.Method[] methods -> methods
    boolean useContextClassLoader -> useContextClassLoader
    void <init>(java.lang.String[]) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Class getClassObject(java.lang.String) -> getClassObject
    java.lang.Class getJavaClass() -> getJavaClass
    java.lang.String getName() -> getName
    boolean isInstance(java.lang.Object) -> isInstance
    java.lang.Object newInstance(java.lang.Object[]) -> newInstance
    java.lang.Object trapFieldRead(java.lang.String) -> trapFieldRead
    void trapFieldWrite(java.lang.String,java.lang.Object) -> trapFieldWrite
    java.lang.Object invoke(java.lang.Object,int,java.lang.Object[]) -> invoke
    java.lang.Object trapMethodcall(int,java.lang.Object[]) -> trapMethodcall
    java.lang.reflect.Method[] getReflectiveMethods() -> getReflectiveMethods
    java.lang.reflect.Method getMethod(int) -> getMethod
    java.lang.String getMethodName(int) -> getMethodName
    java.lang.Class[] getParameterTypes(int) -> getParameterTypes
    java.lang.Class getReturnType(int) -> getReturnType
    int getMethodIndex(java.lang.String,java.lang.Class[]) -> getMethodIndex
    void <clinit>() -> <clinit>
javassist.tools.reflect.CompiledClass -> javassist.tools.reflect.CompiledClass:
    java.lang.String classname -> classname
    java.lang.String metaobject -> metaobject
    java.lang.String classobject -> classobject
    void <init>() -> <init>
javassist.tools.reflect.Compiler -> javassist.tools.reflect.Compiler:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void processClasses(javassist.tools.reflect.CompiledClass[],int) -> processClasses
    int parse(java.lang.String[],javassist.tools.reflect.CompiledClass[]) -> parse
    void help(java.io.PrintStream) -> help
javassist.tools.reflect.Loader -> javassist.tools.reflect.Loader:
    javassist.tools.reflect.Reflection reflection -> reflection
    void main(java.lang.String[]) -> main
    void <init>() -> <init>
    boolean makeReflective(java.lang.String,java.lang.String,java.lang.String) -> makeReflective
javassist.tools.reflect.Metalevel -> javassist.tools.reflect.Metalevel:
    javassist.tools.reflect.ClassMetaobject _getClass() -> _getClass
    javassist.tools.reflect.Metaobject _getMetaobject() -> _getMetaobject
    void _setMetaobject(javassist.tools.reflect.Metaobject) -> _setMetaobject
javassist.tools.reflect.Metaobject -> javassist.tools.reflect.Metaobject:
    long serialVersionUID -> serialVersionUID
    javassist.tools.reflect.ClassMetaobject classmetaobject -> classmetaobject
    javassist.tools.reflect.Metalevel baseobject -> baseobject
    java.lang.reflect.Method[] methods -> methods
    void <init>(java.lang.Object,java.lang.Object[]) -> <init>
    void <init>() -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    javassist.tools.reflect.ClassMetaobject getClassMetaobject() -> getClassMetaobject
    java.lang.Object getObject() -> getObject
    void setObject(java.lang.Object) -> setObject
    java.lang.String getMethodName(int) -> getMethodName
    java.lang.Class[] getParameterTypes(int) -> getParameterTypes
    java.lang.Class getReturnType(int) -> getReturnType
    java.lang.Object trapFieldRead(java.lang.String) -> trapFieldRead
    void trapFieldWrite(java.lang.String,java.lang.Object) -> trapFieldWrite
    java.lang.Object trapMethodcall(int,java.lang.Object[]) -> trapMethodcall
javassist.tools.reflect.Reflection -> javassist.tools.reflect.Reflection:
    java.lang.String classobjectField -> classobjectField
    java.lang.String classobjectAccessor -> classobjectAccessor
    java.lang.String metaobjectField -> metaobjectField
    java.lang.String metaobjectGetter -> metaobjectGetter
    java.lang.String metaobjectSetter -> metaobjectSetter
    java.lang.String readPrefix -> readPrefix
    java.lang.String writePrefix -> writePrefix
    java.lang.String metaobjectClassName -> metaobjectClassName
    java.lang.String classMetaobjectClassName -> classMetaobjectClassName
    javassist.CtMethod trapMethod -> trapMethod
    javassist.CtMethod trapStaticMethod -> trapStaticMethod
    javassist.CtMethod trapRead -> trapRead
    javassist.CtMethod trapWrite -> trapWrite
    javassist.CtClass[] readParam -> readParam
    javassist.ClassPool classPool -> classPool
    javassist.CodeConverter converter -> converter
    boolean isExcluded(java.lang.String) -> isExcluded
    void <init>() -> <init>
    void start(javassist.ClassPool) -> start
    void onLoad(javassist.ClassPool,java.lang.String) -> onLoad
    boolean makeReflective(java.lang.String,java.lang.String,java.lang.String) -> makeReflective
    boolean makeReflective(java.lang.Class,java.lang.Class,java.lang.Class) -> makeReflective
    boolean makeReflective(javassist.CtClass,javassist.CtClass,javassist.CtClass) -> makeReflective
    void registerReflectiveClass(javassist.CtClass) -> registerReflectiveClass
    boolean modifyClassfile(javassist.CtClass,javassist.CtClass,javassist.CtClass) -> modifyClassfile
    void processMethods(javassist.CtClass,boolean) -> processMethods
    void processMethods0(int,javassist.CtClass,javassist.CtMethod,int,boolean) -> processMethods0
    javassist.CtMethod findOriginal(javassist.CtMethod,boolean) -> findOriginal
    void processFields(javassist.CtClass) -> processFields
    void rebuildClassFile(javassist.bytecode.ClassFile) -> rebuildClassFile
javassist.tools.reflect.Sample -> javassist.tools.reflect.Sample:
    javassist.tools.reflect.Metaobject _metaobject -> _metaobject
    javassist.tools.reflect.ClassMetaobject _classobject -> _classobject
    void <init>() -> <init>
    java.lang.Object trap(java.lang.Object[],int) -> trap
    java.lang.Object trapStatic(java.lang.Object[],int) -> trapStatic
    java.lang.Object trapRead(java.lang.Object[],java.lang.String) -> trapRead
    java.lang.Object trapWrite(java.lang.Object[],java.lang.String) -> trapWrite
javassist.tools.rmi.AppletServer -> javassist.tools.rmi.AppletServer:
    javassist.tools.rmi.StubGenerator stubGen -> stubGen
    java.util.Map exportedNames -> exportedNames
    java.util.List exportedObjects -> exportedObjects
    byte[] okHeader -> okHeader
    void <init>(java.lang.String) -> <init>
    void <init>(int) -> <init>
    void <init>(int,javassist.ClassPool) -> <init>
    void <init>(javassist.ClassPool,javassist.tools.rmi.StubGenerator,int) -> <init>
    void run() -> run
    int exportObject(java.lang.String,java.lang.Object) -> exportObject
    void doReply(java.io.InputStream,java.io.OutputStream,java.lang.String) -> doReply
    void processRMI(java.io.InputStream,java.io.OutputStream) -> processRMI
    java.lang.Object[] readParameters(java.io.ObjectInputStream) -> readParameters
    java.lang.Object convertRvalue(java.lang.Object) -> convertRvalue
    void lookupName(java.lang.String,java.io.InputStream,java.io.OutputStream) -> lookupName
    void <clinit>() -> <clinit>
javassist.tools.rmi.ExportedObject -> javassist.tools.rmi.ExportedObject:
    int identifier -> identifier
    java.lang.Object object -> object
    java.lang.reflect.Method[] methods -> methods
    void <init>() -> <init>
javassist.tools.rmi.ObjectImporter -> javassist.tools.rmi.ObjectImporter:
    long serialVersionUID -> serialVersionUID
    byte[] endofline -> endofline
    java.lang.String servername -> servername
    java.lang.String orgServername -> orgServername
    int port -> port
    int orgPort -> orgPort
    byte[] lookupCommand -> lookupCommand
    byte[] rmiCommand -> rmiCommand
    java.lang.Class[] proxyConstructorParamTypes -> proxyConstructorParamTypes
    void <init>(java.applet.Applet) -> <init>
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object getObject(java.lang.String) -> getObject
    void setHttpProxy(java.lang.String,int) -> setHttpProxy
    java.lang.Object lookupObject(java.lang.String) -> lookupObject
    java.lang.Object createProxy(int,java.lang.String) -> createProxy
    java.lang.Object call(int,int,java.lang.Object[]) -> call
    void skipHeader(java.io.InputStream) -> skipHeader
    void writeParameters(java.io.ObjectOutputStream,java.lang.Object[]) -> writeParameters
    void <clinit>() -> <clinit>
javassist.tools.rmi.ObjectNotFoundException -> javassist.tools.rmi.ObjectNotFoundException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Exception) -> <init>
javassist.tools.rmi.Proxy -> javassist.tools.rmi.Proxy:
    int _getObjectId() -> _getObjectId
javassist.tools.rmi.RemoteException -> javassist.tools.rmi.RemoteException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Exception) -> <init>
javassist.tools.rmi.RemoteRef -> javassist.tools.rmi.RemoteRef:
    long serialVersionUID -> serialVersionUID
    int oid -> oid
    java.lang.String classname -> classname
    void <init>(int) -> <init>
    void <init>(int,java.lang.String) -> <init>
javassist.tools.rmi.Sample -> javassist.tools.rmi.Sample:
    javassist.tools.rmi.ObjectImporter importer -> importer
    int objectId -> objectId
    void <init>() -> <init>
    java.lang.Object forward(java.lang.Object[],int) -> forward
    java.lang.Object forwardStatic(java.lang.Object[],int) -> forwardStatic
javassist.tools.rmi.StubGenerator -> javassist.tools.rmi.StubGenerator:
    java.lang.String fieldImporter -> fieldImporter
    java.lang.String fieldObjectId -> fieldObjectId
    java.lang.String accessorObjectId -> accessorObjectId
    java.lang.String sampleClass -> sampleClass
    javassist.ClassPool classPool -> classPool
    java.util.Map proxyClasses -> proxyClasses
    javassist.CtMethod forwardMethod -> forwardMethod
    javassist.CtMethod forwardStaticMethod -> forwardStaticMethod
    javassist.CtClass[] proxyConstructorParamTypes -> proxyConstructorParamTypes
    javassist.CtClass[] interfacesForProxy -> interfacesForProxy
    javassist.CtClass[] exceptionForProxy -> exceptionForProxy
    void <init>() -> <init>
    void start(javassist.ClassPool) -> start
    void onLoad(javassist.ClassPool,java.lang.String) -> onLoad
    boolean isProxyClass(java.lang.String) -> isProxyClass
    boolean makeProxyClass(java.lang.Class) -> makeProxyClass
    javassist.CtClass produceProxyClass(javassist.CtClass,java.lang.Class) -> produceProxyClass
    javassist.CtClass toCtClass(java.lang.Class) -> toCtClass
    javassist.CtClass[] toCtClass(java.lang.Class[]) -> toCtClass
    void addMethods(javassist.CtClass,java.lang.reflect.Method[]) -> addMethods
    void modifySuperclass(javassist.CtClass) -> modifySuperclass
javassist.tools.web.BadHttpRequest -> javassist.tools.web.BadHttpRequest:
    long serialVersionUID -> serialVersionUID
    java.lang.Exception e -> e
    void <init>() -> <init>
    void <init>(java.lang.Exception) -> <init>
    java.lang.String toString() -> toString
javassist.tools.web.ServiceThread -> javassist.tools.web.ServiceThread:
    javassist.tools.web.Webserver web -> web
    java.net.Socket sock -> sock
    void <init>(javassist.tools.web.Webserver,java.net.Socket) -> <init>
    void run() -> run
javassist.tools.web.Viewer -> javassist.tools.web.Viewer:
    java.lang.String server -> server
    int port -> port
    void main(java.lang.String[]) -> main
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getServer() -> getServer
    int getPort() -> getPort
    void run(java.lang.String,java.lang.String[]) -> run
    java.lang.Class loadClass(java.lang.String,boolean) -> loadClass
    java.lang.Class findClass(java.lang.String) -> findClass
    byte[] fetchClass(java.lang.String) -> fetchClass
    byte[] readStream(java.io.InputStream) -> readStream
javassist.tools.web.Webserver -> javassist.tools.web.Webserver:
    java.net.ServerSocket socket -> socket
    javassist.ClassPool classPool -> classPool
    javassist.Translator translator -> translator
    byte[] endofline -> endofline
    int typeHtml -> typeHtml
    int typeClass -> typeClass
    int typeGif -> typeGif
    int typeJpeg -> typeJpeg
    int typeText -> typeText
    java.lang.String debugDir -> debugDir
    java.lang.String htmlfileBase -> htmlfileBase
    void main(java.lang.String[]) -> main
    void <init>(java.lang.String) -> <init>
    void <init>(int) -> <init>
    void setClassPool(javassist.ClassPool) -> setClassPool
    void addTranslator(javassist.ClassPool,javassist.Translator) -> addTranslator
    void end() -> end
    void logging(java.lang.String) -> logging
    void logging(java.lang.String,java.lang.String) -> logging
    void logging(java.lang.String,java.lang.String,java.lang.String) -> logging
    void logging2(java.lang.String) -> logging2
    void run() -> run
    void process(java.net.Socket) -> process
    java.lang.String readLine(java.io.InputStream) -> readLine
    int skipLine(java.io.InputStream) -> skipLine
    void doReply(java.io.InputStream,java.io.OutputStream,java.lang.String) -> doReply
    void checkFilename(java.lang.String,int) -> checkFilename
    boolean letUsersSendClassfile(java.io.OutputStream,java.lang.String,int) -> letUsersSendClassfile
    void sendHeader(java.io.OutputStream,long,int) -> sendHeader
    void replyError(java.io.OutputStream,javassist.tools.web.BadHttpRequest) -> replyError
    void <clinit>() -> <clinit>
javassist.util.HotSwapAgent -> javassist.util.HotSwapAgent:
    java.lang.instrument.Instrumentation instrumentation -> instrumentation
    void <init>() -> <init>
    java.lang.instrument.Instrumentation instrumentation() -> instrumentation
    void premain(java.lang.String,java.lang.instrument.Instrumentation) -> premain
    void agentmain(java.lang.String,java.lang.instrument.Instrumentation) -> agentmain
    void redefine(java.lang.Class,javassist.CtClass) -> redefine
    void redefine(java.lang.Class[],javassist.CtClass[]) -> redefine
    void startAgent() -> startAgent
    java.io.File createAgentJarFile(java.lang.String) -> createAgentJarFile
    java.io.File createJarFile() -> createJarFile
    java.io.File createJarFile(java.io.File) -> createJarFile
    void <clinit>() -> <clinit>
javassist.util.HotSwapper -> javassist.util.HotSwapper:
    com.sun.jdi.VirtualMachine jvm -> jvm
    com.sun.jdi.request.MethodEntryRequest request -> request
    java.util.Map newClassFiles -> newClassFiles
    javassist.util.Trigger trigger -> trigger
    java.lang.String HOST_NAME -> HOST_NAME
    java.lang.String TRIGGER_NAME -> TRIGGER_NAME
    void <init>(int) -> <init>
    void <init>(java.lang.String) -> <init>
    com.sun.jdi.connect.Connector findConnector(java.lang.String) -> findConnector
    com.sun.jdi.request.MethodEntryRequest methodEntryRequests(com.sun.jdi.request.EventRequestManager,java.lang.String) -> methodEntryRequests
    void deleteEventRequest(com.sun.jdi.request.EventRequestManager,com.sun.jdi.request.MethodEntryRequest) -> deleteEventRequest
    void reload(java.lang.String,byte[]) -> reload
    void reload(java.util.Map) -> reload
    com.sun.jdi.ReferenceType toRefType(java.lang.String) -> toRefType
    void reload2(java.util.Map,java.lang.String) -> reload2
    void startDaemon() -> startDaemon
    com.sun.jdi.event.EventSet waitEvent() -> waitEvent
    void hotswap() -> hotswap
    void <clinit>() -> <clinit>
javassist.util.HotSwapper$1 -> javassist.util.HotSwapper$1:
    javassist.util.HotSwapper this$0 -> this$0
    void <init>(javassist.util.HotSwapper) -> <init>
    void errorMsg(java.lang.Throwable) -> errorMsg
    void run() -> run
javassist.util.Trigger -> javassist.util.Trigger:
    void <init>() -> <init>
    void doSwap() -> doSwap
javassist.util.proxy.DefineClassHelper -> javassist.util.proxy.DefineClassHelper:
    javassist.util.proxy.DefineClassHelper$Helper privileged -> privileged
    java.lang.Class toClass(java.lang.String,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain,byte[]) -> toClass
    java.lang.Class toClass(java.lang.Class,byte[]) -> toClass
    java.lang.Class toClass(java.lang.invoke.MethodHandles$Lookup,byte[]) -> toClass
    java.lang.Class toPublicClass(java.lang.String,byte[]) -> toPublicClass
    void <init>() -> <init>
    javassist.util.proxy.DefineClassHelper$Helper access$400() -> access$400
    void <clinit>() -> <clinit>
javassist.util.proxy.DefineClassHelper$1 -> javassist.util.proxy.DefineClassHelper$1:
javassist.util.proxy.DefineClassHelper$Helper -> javassist.util.proxy.DefineClassHelper$Helper:
    void <init>() -> <init>
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    void <init>(javassist.util.proxy.DefineClassHelper$1) -> <init>
javassist.util.proxy.DefineClassHelper$Java11 -> javassist.util.proxy.DefineClassHelper$Java11:
    void <init>() -> <init>
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    void <init>(javassist.util.proxy.DefineClassHelper$1) -> <init>
javassist.util.proxy.DefineClassHelper$Java7 -> javassist.util.proxy.DefineClassHelper$Java7:
    javassist.util.proxy.SecurityActions stack -> stack
    java.lang.invoke.MethodHandle defineClass -> defineClass
    void <init>() -> <init>
    java.lang.invoke.MethodHandle getDefineClassMethodHandle() -> getDefineClassMethodHandle
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    void <init>(javassist.util.proxy.DefineClassHelper$1) -> <init>
javassist.util.proxy.DefineClassHelper$Java9 -> javassist.util.proxy.DefineClassHelper$Java9:
    java.lang.Object stack -> stack
    java.lang.reflect.Method getCallerClass -> getCallerClass
    javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe sunMiscUnsafe -> sunMiscUnsafe
    void <init>() -> <init>
    javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe getReferencedUnsafe() -> getReferencedUnsafe
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    java.lang.Object access$100(javassist.util.proxy.DefineClassHelper$Java9) -> access$100
    java.lang.reflect.Method access$200(javassist.util.proxy.DefineClassHelper$Java9) -> access$200
javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe -> javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe:
    javassist.util.proxy.SecurityActions$TheUnsafe sunMiscUnsafeTheUnsafe -> sunMiscUnsafeTheUnsafe
    java.lang.invoke.MethodHandle defineClass -> defineClass
    javassist.util.proxy.DefineClassHelper$Java9 this$0 -> this$0
    void <init>(javassist.util.proxy.DefineClassHelper$Java9,javassist.util.proxy.SecurityActions$TheUnsafe,java.lang.invoke.MethodHandle) -> <init>
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
javassist.util.proxy.DefineClassHelper$JavaOther -> javassist.util.proxy.DefineClassHelper$JavaOther:
    java.lang.reflect.Method defineClass -> defineClass
    javassist.util.proxy.SecurityActions stack -> stack
    void <init>() -> <init>
    java.lang.reflect.Method getDefineClassMethod() -> getDefineClassMethod
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    void <init>(javassist.util.proxy.DefineClassHelper$1) -> <init>
javassist.util.proxy.DefinePackageHelper -> javassist.util.proxy.DefinePackageHelper:
    javassist.util.proxy.DefinePackageHelper$Helper privileged -> privileged
    void definePackage(java.lang.String,java.lang.ClassLoader) -> definePackage
    void <init>() -> <init>
    void <clinit>() -> <clinit>
javassist.util.proxy.DefinePackageHelper$1 -> javassist.util.proxy.DefinePackageHelper$1:
javassist.util.proxy.DefinePackageHelper$Helper -> javassist.util.proxy.DefinePackageHelper$Helper:
    void <init>() -> <init>
    java.lang.Package definePackage(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL) -> definePackage
    void <init>(javassist.util.proxy.DefinePackageHelper$1) -> <init>
javassist.util.proxy.DefinePackageHelper$Java7 -> javassist.util.proxy.DefinePackageHelper$Java7:
    javassist.util.proxy.SecurityActions stack -> stack
    java.lang.invoke.MethodHandle definePackage -> definePackage
    void <init>() -> <init>
    java.lang.invoke.MethodHandle getDefinePackageMethodHandle() -> getDefinePackageMethodHandle
    java.lang.Package definePackage(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL) -> definePackage
    void <init>(javassist.util.proxy.DefinePackageHelper$1) -> <init>
javassist.util.proxy.DefinePackageHelper$Java9 -> javassist.util.proxy.DefinePackageHelper$Java9:
    void <init>() -> <init>
    java.lang.Package definePackage(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL) -> definePackage
    void <init>(javassist.util.proxy.DefinePackageHelper$1) -> <init>
javassist.util.proxy.DefinePackageHelper$JavaOther -> javassist.util.proxy.DefinePackageHelper$JavaOther:
    javassist.util.proxy.SecurityActions stack -> stack
    java.lang.reflect.Method definePackage -> definePackage
    void <init>() -> <init>
    java.lang.reflect.Method getDefinePackageMethod() -> getDefinePackageMethod
    java.lang.Package definePackage(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL) -> definePackage
    void <init>(javassist.util.proxy.DefinePackageHelper$1) -> <init>
javassist.util.proxy.FactoryHelper -> javassist.util.proxy.FactoryHelper:
    java.lang.Class[] primitiveTypes -> primitiveTypes
    java.lang.String[] wrapperTypes -> wrapperTypes
    java.lang.String[] wrapperDesc -> wrapperDesc
    java.lang.String[] unwarpMethods -> unwarpMethods
    java.lang.String[] unwrapDesc -> unwrapDesc
    int[] dataSize -> dataSize
    void <init>() -> <init>
    int typeIndex(java.lang.Class) -> typeIndex
    java.lang.Class toClass(javassist.bytecode.ClassFile,java.lang.ClassLoader) -> toClass
    java.lang.Class toClass(javassist.bytecode.ClassFile,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    java.lang.Class toClass(javassist.bytecode.ClassFile,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    java.lang.Class toClass(javassist.bytecode.ClassFile,java.lang.invoke.MethodHandles$Lookup) -> toClass
    byte[] toBytecode(javassist.bytecode.ClassFile) -> toBytecode
    void writeFile(javassist.bytecode.ClassFile,java.lang.String) -> writeFile
    void writeFile0(javassist.bytecode.ClassFile,java.lang.String) -> writeFile0
    void <clinit>() -> <clinit>
javassist.util.proxy.MethodFilter -> javassist.util.proxy.MethodFilter:
    boolean isHandled(java.lang.reflect.Method) -> isHandled
javassist.util.proxy.MethodHandler -> javassist.util.proxy.MethodHandler:
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Object[]) -> invoke
javassist.util.proxy.Proxy -> javassist.util.proxy.Proxy:
    void setHandler(javassist.util.proxy.MethodHandler) -> setHandler
javassist.util.proxy.ProxyFactory -> javassist.util.proxy.ProxyFactory:
    java.lang.Class superClass -> superClass
    java.lang.Class[] interfaces -> interfaces
    javassist.util.proxy.MethodFilter methodFilter -> methodFilter
    javassist.util.proxy.MethodHandler handler -> handler
    java.util.List signatureMethods -> signatureMethods
    boolean hasGetHandler -> hasGetHandler
    byte[] signature -> signature
    java.lang.String classname -> classname
    java.lang.String basename -> basename
    java.lang.String superName -> superName
    java.lang.Class thisClass -> thisClass
    java.lang.String genericSignature -> genericSignature
    boolean factoryUseCache -> factoryUseCache
    boolean factoryWriteReplace -> factoryWriteReplace
    boolean onlyPublicMethods -> onlyPublicMethods
    java.lang.String writeDirectory -> writeDirectory
    java.lang.Class OBJECT_TYPE -> OBJECT_TYPE
    java.lang.String HOLDER -> HOLDER
    java.lang.String HOLDER_TYPE -> HOLDER_TYPE
    java.lang.String FILTER_SIGNATURE_FIELD -> FILTER_SIGNATURE_FIELD
    java.lang.String FILTER_SIGNATURE_TYPE -> FILTER_SIGNATURE_TYPE
    java.lang.String HANDLER -> HANDLER
    java.lang.String NULL_INTERCEPTOR_HOLDER -> NULL_INTERCEPTOR_HOLDER
    java.lang.String DEFAULT_INTERCEPTOR -> DEFAULT_INTERCEPTOR
    java.lang.String HANDLER_TYPE -> HANDLER_TYPE
    java.lang.String HANDLER_SETTER -> HANDLER_SETTER
    java.lang.String HANDLER_SETTER_TYPE -> HANDLER_SETTER_TYPE
    java.lang.String HANDLER_GETTER -> HANDLER_GETTER
    java.lang.String HANDLER_GETTER_TYPE -> HANDLER_GETTER_TYPE
    java.lang.String SERIAL_VERSION_UID_FIELD -> SERIAL_VERSION_UID_FIELD
    java.lang.String SERIAL_VERSION_UID_TYPE -> SERIAL_VERSION_UID_TYPE
    long SERIAL_VERSION_UID_VALUE -> SERIAL_VERSION_UID_VALUE
    boolean useCache -> useCache
    boolean useWriteReplace -> useWriteReplace
    java.util.Map proxyCache -> proxyCache
    char[] hexDigits -> hexDigits
    javassist.util.proxy.ProxyFactory$ClassLoaderProvider classLoaderProvider -> classLoaderProvider
    javassist.util.proxy.ProxyFactory$UniqueName nameGenerator -> nameGenerator
    java.lang.String packageForJavaBase -> packageForJavaBase
    java.util.Comparator sorter -> sorter
    java.lang.String HANDLER_GETTER_KEY -> HANDLER_GETTER_KEY
    boolean isUseCache() -> isUseCache
    void setUseCache(boolean) -> setUseCache
    boolean isUseWriteReplace() -> isUseWriteReplace
    void setUseWriteReplace(boolean) -> setUseWriteReplace
    boolean isProxyClass(java.lang.Class) -> isProxyClass
    void <init>() -> <init>
    void setSuperclass(java.lang.Class) -> setSuperclass
    java.lang.Class getSuperclass() -> getSuperclass
    void setInterfaces(java.lang.Class[]) -> setInterfaces
    java.lang.Class[] getInterfaces() -> getInterfaces
    void setFilter(javassist.util.proxy.MethodFilter) -> setFilter
    void setGenericSignature(java.lang.String) -> setGenericSignature
    java.lang.Class createClass() -> createClass
    java.lang.Class createClass(javassist.util.proxy.MethodFilter) -> createClass
    java.lang.Class createClass(byte[]) -> createClass
    java.lang.Class createClass(java.lang.invoke.MethodHandles$Lookup) -> createClass
    java.lang.Class createClass(java.lang.invoke.MethodHandles$Lookup,javassist.util.proxy.MethodFilter) -> createClass
    java.lang.Class createClass(java.lang.invoke.MethodHandles$Lookup,byte[]) -> createClass
    java.lang.Class createClass1(java.lang.invoke.MethodHandles$Lookup) -> createClass1
    java.lang.String getKey(java.lang.Class,java.lang.Class[],byte[],boolean) -> getKey
    void createClass2(java.lang.ClassLoader,java.lang.invoke.MethodHandles$Lookup) -> createClass2
    void createClass3(java.lang.ClassLoader,java.lang.invoke.MethodHandles$Lookup) -> createClass3
    java.lang.Class getClassInTheSamePackage() -> getClassInTheSamePackage
    void setField(java.lang.String,java.lang.Object) -> setField
    byte[] getFilterSignature(java.lang.Class) -> getFilterSignature
    java.lang.Object getField(java.lang.Class,java.lang.String) -> getField
    javassist.util.proxy.MethodHandler getHandler(javassist.util.proxy.Proxy) -> getHandler
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    java.lang.ClassLoader getClassLoader0() -> getClassLoader0
    java.security.ProtectionDomain getDomain() -> getDomain
    java.lang.Object create(java.lang.Class[],java.lang.Object[],javassist.util.proxy.MethodHandler) -> create
    java.lang.Object create(java.lang.Class[],java.lang.Object[]) -> create
    void setHandler(javassist.util.proxy.MethodHandler) -> setHandler
    java.lang.String makeProxyName(java.lang.String) -> makeProxyName
    javassist.bytecode.ClassFile make() -> make
    void checkClassAndSuperName() -> checkClassAndSuperName
    void allocateClassName() -> allocateClassName
    void makeSortedMethodList() -> makeSortedMethodList
    void computeSignature(javassist.util.proxy.MethodFilter) -> computeSignature
    void installSignature(byte[]) -> installSignature
    boolean testBit(byte[],int) -> testBit
    void setBit(byte[],int) -> setBit
    void setInterfaces(javassist.bytecode.ClassFile,java.lang.Class[],java.lang.Class) -> setInterfaces
    void addClassInitializer(javassist.bytecode.ClassFile,javassist.bytecode.ConstPool,java.lang.String,int,java.util.List) -> addClassInitializer
    void callFind2Methods(javassist.bytecode.Bytecode,java.lang.String,java.lang.String,int,java.lang.String,int,int) -> callFind2Methods
    void addSetter(java.lang.String,javassist.bytecode.ClassFile,javassist.bytecode.ConstPool) -> addSetter
    void addGetter(java.lang.String,javassist.bytecode.ClassFile,javassist.bytecode.ConstPool) -> addGetter
    int overrideMethods(javassist.bytecode.ClassFile,javassist.bytecode.ConstPool,java.lang.String,java.util.List) -> overrideMethods
    boolean isBridge(java.lang.reflect.Method) -> isBridge
    void override(java.lang.String,java.lang.reflect.Method,java.lang.String,int,java.lang.String,javassist.bytecode.ClassFile,javassist.bytecode.ConstPool,java.util.List) -> override
    void makeConstructors(java.lang.String,javassist.bytecode.ClassFile,javassist.bytecode.ConstPool,java.lang.String) -> makeConstructors
    java.lang.String makeUniqueName(java.lang.String,java.util.List) -> makeUniqueName
    boolean makeUniqueName0(java.lang.String,java.util.Iterator) -> makeUniqueName0
    boolean isVisible(int,java.lang.String,java.lang.reflect.Member) -> isVisible
    java.lang.String getPackageName(java.lang.String) -> getPackageName
    java.util.Map getMethods(java.lang.Class,java.lang.Class[]) -> getMethods
    void getMethods(java.util.Map,java.lang.Class,java.util.Set) -> getMethods
    boolean isDuplicated(int,java.lang.reflect.Method[]) -> isDuplicated
    boolean areParametersSame(java.lang.reflect.Method,java.lang.reflect.Method) -> areParametersSame
    java.lang.String keyToDesc(java.lang.String,java.lang.reflect.Method) -> keyToDesc
    javassist.bytecode.MethodInfo makeConstructor(java.lang.String,java.lang.reflect.Constructor,javassist.bytecode.ConstPool,java.lang.Class,boolean) -> makeConstructor
    javassist.bytecode.MethodInfo makeDelegator(java.lang.reflect.Method,java.lang.String,javassist.bytecode.ConstPool,java.lang.Class,java.lang.String) -> makeDelegator
    java.lang.Class invokespecialTarget(java.lang.Class) -> invokespecialTarget
    javassist.bytecode.MethodInfo makeForwarder(java.lang.String,java.lang.reflect.Method,java.lang.String,javassist.bytecode.ConstPool,java.lang.Class,java.lang.String,int,java.util.List) -> makeForwarder
    void setThrows(javassist.bytecode.MethodInfo,javassist.bytecode.ConstPool,java.lang.reflect.Method) -> setThrows
    void setThrows(javassist.bytecode.MethodInfo,javassist.bytecode.ConstPool,java.lang.Class[]) -> setThrows
    int addLoadParameters(javassist.bytecode.Bytecode,java.lang.Class[],int) -> addLoadParameters
    int addLoad(javassist.bytecode.Bytecode,int,java.lang.Class) -> addLoad
    int addReturn(javassist.bytecode.Bytecode,java.lang.Class) -> addReturn
    void makeParameterList(javassist.bytecode.Bytecode,java.lang.Class[]) -> makeParameterList
    int makeWrapper(javassist.bytecode.Bytecode,java.lang.Class,int) -> makeWrapper
    void addUnwrapper(javassist.bytecode.Bytecode,java.lang.Class) -> addUnwrapper
    javassist.bytecode.MethodInfo makeWriteReplace(javassist.bytecode.ConstPool) -> makeWriteReplace
    void <clinit>() -> <clinit>
javassist.util.proxy.ProxyFactory$1 -> javassist.util.proxy.ProxyFactory$1:
    void <init>() -> <init>
    java.lang.ClassLoader get(javassist.util.proxy.ProxyFactory) -> get
javassist.util.proxy.ProxyFactory$2 -> javassist.util.proxy.ProxyFactory$2:
    java.lang.String sep -> sep
    int counter -> counter
    void <init>() -> <init>
    java.lang.String get(java.lang.String) -> get
javassist.util.proxy.ProxyFactory$3 -> javassist.util.proxy.ProxyFactory$3:
    void <init>() -> <init>
    int compare(java.util.Map$Entry,java.util.Map$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
javassist.util.proxy.ProxyFactory$ClassLoaderProvider -> javassist.util.proxy.ProxyFactory$ClassLoaderProvider:
    java.lang.ClassLoader get(javassist.util.proxy.ProxyFactory) -> get
javassist.util.proxy.ProxyFactory$Find2MethodsArgs -> javassist.util.proxy.ProxyFactory$Find2MethodsArgs:
    java.lang.String methodName -> methodName
    java.lang.String delegatorName -> delegatorName
    java.lang.String descriptor -> descriptor
    int origIndex -> origIndex
    void <init>(java.lang.String,java.lang.String,java.lang.String,int) -> <init>
javassist.util.proxy.ProxyFactory$ProxyDetails -> javassist.util.proxy.ProxyFactory$ProxyDetails:
    byte[] signature -> signature
    java.lang.ref.Reference proxyClass -> proxyClass
    boolean isUseWriteReplace -> isUseWriteReplace
    void <init>(byte[],java.lang.Class,boolean) -> <init>
javassist.util.proxy.ProxyFactory$UniqueName -> javassist.util.proxy.ProxyFactory$UniqueName:
    java.lang.String get(java.lang.String) -> get
javassist.util.proxy.ProxyObject -> javassist.util.proxy.ProxyObject:
    void setHandler(javassist.util.proxy.MethodHandler) -> setHandler
    javassist.util.proxy.MethodHandler getHandler() -> getHandler
javassist.util.proxy.ProxyObjectInputStream -> javassist.util.proxy.ProxyObjectInputStream:
    java.lang.ClassLoader loader -> loader
    void <init>(java.io.InputStream) -> <init>
    void setClassLoader(java.lang.ClassLoader) -> setClassLoader
    java.io.ObjectStreamClass readClassDescriptor() -> readClassDescriptor
javassist.util.proxy.ProxyObjectOutputStream -> javassist.util.proxy.ProxyObjectOutputStream:
    void <init>(java.io.OutputStream) -> <init>
    void writeClassDescriptor(java.io.ObjectStreamClass) -> writeClassDescriptor
javassist.util.proxy.RuntimeSupport -> javassist.util.proxy.RuntimeSupport:
    javassist.util.proxy.MethodHandler default_interceptor -> default_interceptor
    void <init>() -> <init>
    void find2Methods(java.lang.Class,java.lang.String,java.lang.String,int,java.lang.String,java.lang.reflect.Method[]) -> find2Methods
    void find2Methods(java.lang.Object,java.lang.String,java.lang.String,int,java.lang.String,java.lang.reflect.Method[]) -> find2Methods
    java.lang.reflect.Method findMethod(java.lang.Object,java.lang.String,java.lang.String) -> findMethod
    java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.String) -> findMethod
    java.lang.reflect.Method findSuperMethod(java.lang.Object,java.lang.String,java.lang.String) -> findSuperMethod
    java.lang.reflect.Method findSuperClassMethod(java.lang.Class,java.lang.String,java.lang.String) -> findSuperClassMethod
    void error(java.lang.Class,java.lang.String,java.lang.String) -> error
    java.lang.reflect.Method findSuperMethod2(java.lang.Class,java.lang.String,java.lang.String) -> findSuperMethod2
    java.lang.reflect.Method searchInterfaces(java.lang.Class,java.lang.String,java.lang.String) -> searchInterfaces
    java.lang.reflect.Method findMethod2(java.lang.Class,java.lang.String,java.lang.String) -> findMethod2
    java.lang.String makeDescriptor(java.lang.reflect.Method) -> makeDescriptor
    java.lang.String makeDescriptor(java.lang.Class[],java.lang.Class) -> makeDescriptor
    java.lang.String makeDescriptor(java.lang.String,java.lang.Class) -> makeDescriptor
    void makeDesc(java.lang.StringBuffer,java.lang.Class) -> makeDesc
    javassist.util.proxy.SerializedProxy makeSerializedProxy(java.lang.Object) -> makeSerializedProxy
    void <clinit>() -> <clinit>
javassist.util.proxy.RuntimeSupport$DefaultMethodHandler -> javassist.util.proxy.RuntimeSupport$DefaultMethodHandler:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Object[]) -> invoke
javassist.util.proxy.SecurityActions -> javassist.util.proxy.SecurityActions:
    javassist.util.proxy.SecurityActions stack -> stack
    void <init>() -> <init>
    java.lang.Class getCallerClass() -> getCallerClass
    java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class) -> getDeclaredMethods
    java.lang.reflect.Constructor[] getDeclaredConstructors(java.lang.Class) -> getDeclaredConstructors
    java.lang.invoke.MethodHandle getMethodHandle(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethodHandle
    java.lang.reflect.Method getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getDeclaredMethod
    java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]) -> getDeclaredConstructor
    void setAccessible(java.lang.reflect.AccessibleObject,boolean) -> setAccessible
    void set(java.lang.reflect.Field,java.lang.Object,java.lang.Object) -> set
    javassist.util.proxy.SecurityActions$TheUnsafe getSunMiscUnsafeAnonymously() -> getSunMiscUnsafeAnonymously
    void disableWarning(javassist.util.proxy.SecurityActions$TheUnsafe) -> disableWarning
    void <clinit>() -> <clinit>
javassist.util.proxy.SecurityActions$1 -> javassist.util.proxy.SecurityActions$1:
    java.lang.Class val$clazz -> val$clazz
    void <init>(java.lang.Class) -> <init>
    java.lang.reflect.Method[] run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$2 -> javassist.util.proxy.SecurityActions$2:
    java.lang.Class val$clazz -> val$clazz
    void <init>(java.lang.Class) -> <init>
    java.lang.reflect.Constructor[] run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$3 -> javassist.util.proxy.SecurityActions$3:
    java.lang.Class val$clazz -> val$clazz
    java.lang.String val$name -> val$name
    java.lang.Class[] val$params -> val$params
    void <init>(java.lang.Class,java.lang.String,java.lang.Class[]) -> <init>
    java.lang.invoke.MethodHandle run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$4 -> javassist.util.proxy.SecurityActions$4:
    java.lang.Class val$clazz -> val$clazz
    java.lang.String val$name -> val$name
    java.lang.Class[] val$types -> val$types
    void <init>(java.lang.Class,java.lang.String,java.lang.Class[]) -> <init>
    java.lang.reflect.Method run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$5 -> javassist.util.proxy.SecurityActions$5:
    java.lang.Class val$clazz -> val$clazz
    java.lang.Class[] val$types -> val$types
    void <init>(java.lang.Class,java.lang.Class[]) -> <init>
    java.lang.reflect.Constructor run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$6 -> javassist.util.proxy.SecurityActions$6:
    java.lang.reflect.AccessibleObject val$ao -> val$ao
    boolean val$accessible -> val$accessible
    void <init>(java.lang.reflect.AccessibleObject,boolean) -> <init>
    java.lang.Void run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$7 -> javassist.util.proxy.SecurityActions$7:
    java.lang.reflect.Field val$fld -> val$fld
    java.lang.Object val$target -> val$target
    java.lang.Object val$value -> val$value
    void <init>(java.lang.reflect.Field,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Void run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$8 -> javassist.util.proxy.SecurityActions$8:
    void <init>() -> <init>
    javassist.util.proxy.SecurityActions$TheUnsafe run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$TheUnsafe -> javassist.util.proxy.SecurityActions$TheUnsafe:
    java.lang.Class unsafe -> unsafe
    java.lang.Object theUnsafe -> theUnsafe
    java.util.Map methods -> methods
    javassist.util.proxy.SecurityActions this$0 -> this$0
    void <init>(javassist.util.proxy.SecurityActions,java.lang.Class,java.lang.Object) -> <init>
    java.lang.reflect.Method getM(java.lang.String,java.lang.Object[]) -> getM
    java.lang.Object call(java.lang.String,java.lang.Object[]) -> call
javassist.util.proxy.SerializedProxy -> javassist.util.proxy.SerializedProxy:
    long serialVersionUID -> serialVersionUID
    java.lang.String superClass -> superClass
    java.lang.String[] interfaces -> interfaces
    byte[] filterSignature -> filterSignature
    javassist.util.proxy.MethodHandler handler -> handler
    void <init>(java.lang.Class,byte[],javassist.util.proxy.MethodHandler) -> <init>
    java.lang.Class loadClass(java.lang.String) -> loadClass
    java.lang.Object readResolve() -> readResolve
javassist.util.proxy.SerializedProxy$1 -> javassist.util.proxy.SerializedProxy$1:
    java.lang.String val$className -> val$className
    javassist.util.proxy.SerializedProxy this$0 -> this$0
    void <init>(javassist.util.proxy.SerializedProxy,java.lang.String) -> <init>
    java.lang.Class run() -> run
    java.lang.Object run() -> run
org.reflections.Configuration -> org.reflections.Configuration:
    java.util.Set getScanners() -> getScanners
    java.util.Set getUrls() -> getUrls
    org.reflections.adapters.MetadataAdapter getMetadataAdapter() -> getMetadataAdapter
    java.util.function.Predicate getInputsFilter() -> getInputsFilter
    java.util.concurrent.ExecutorService getExecutorService() -> getExecutorService
    org.reflections.serializers.Serializer getSerializer() -> getSerializer
    java.lang.ClassLoader[] getClassLoaders() -> getClassLoaders
    boolean shouldExpandSuperTypes() -> shouldExpandSuperTypes
org.reflections.ReflectionUtils -> org.reflections.ReflectionUtils:
    boolean includeObject -> includeObject
    java.util.List primitiveNames -> primitiveNames
    java.util.List primitiveTypes -> primitiveTypes
    java.util.List primitiveDescriptors -> primitiveDescriptors
    void <init>() -> <init>
    java.util.Set getAllSuperTypes(java.lang.Class,java.util.function.Predicate[]) -> getAllSuperTypes
    java.util.Set getSuperTypes(java.lang.Class) -> getSuperTypes
    java.util.Set getAllMethods(java.lang.Class,java.util.function.Predicate[]) -> getAllMethods
    java.util.Set getMethods(java.lang.Class,java.util.function.Predicate[]) -> getMethods
    java.util.Set getAllConstructors(java.lang.Class,java.util.function.Predicate[]) -> getAllConstructors
    java.util.Set getConstructors(java.lang.Class,java.util.function.Predicate[]) -> getConstructors
    java.util.Set getAllFields(java.lang.Class,java.util.function.Predicate[]) -> getAllFields
    java.util.Set getFields(java.lang.Class,java.util.function.Predicate[]) -> getFields
    java.util.Set getAllAnnotations(java.lang.reflect.AnnotatedElement,java.util.function.Predicate[]) -> getAllAnnotations
    java.util.Set getAnnotations(java.lang.reflect.AnnotatedElement,java.util.function.Predicate[]) -> getAnnotations
    java.util.Set getAll(java.util.Set,java.util.function.Predicate[]) -> getAll
    java.util.function.Predicate withName(java.lang.String) -> withName
    java.util.function.Predicate withPrefix(java.lang.String) -> withPrefix
    java.util.function.Predicate withPattern(java.lang.String) -> withPattern
    java.util.function.Predicate withAnnotation(java.lang.Class) -> withAnnotation
    java.util.function.Predicate withAnnotations(java.lang.Class[]) -> withAnnotations
    java.util.function.Predicate withAnnotation(java.lang.annotation.Annotation) -> withAnnotation
    java.util.function.Predicate withAnnotations(java.lang.annotation.Annotation[]) -> withAnnotations
    java.util.function.Predicate withParameters(java.lang.Class[]) -> withParameters
    java.util.function.Predicate withParametersAssignableTo(java.lang.Class[]) -> withParametersAssignableTo
    java.util.function.Predicate withParametersAssignableFrom(java.lang.Class[]) -> withParametersAssignableFrom
    java.util.function.Predicate withParametersCount(int) -> withParametersCount
    java.util.function.Predicate withAnyParameterAnnotation(java.lang.Class) -> withAnyParameterAnnotation
    java.util.function.Predicate withAnyParameterAnnotation(java.lang.annotation.Annotation) -> withAnyParameterAnnotation
    java.util.function.Predicate withType(java.lang.Class) -> withType
    java.util.function.Predicate withTypeAssignableTo(java.lang.Class) -> withTypeAssignableTo
    java.util.function.Predicate withReturnType(java.lang.Class) -> withReturnType
    java.util.function.Predicate withReturnTypeAssignableTo(java.lang.Class) -> withReturnTypeAssignableTo
    java.util.function.Predicate withModifier(int) -> withModifier
    java.util.function.Predicate withClassModifier(int) -> withClassModifier
    java.lang.Class forName(java.lang.String,java.lang.ClassLoader[]) -> forName
    java.util.Set forNames(java.util.Collection,java.lang.ClassLoader[]) -> forNames
    java.lang.Class[] parameterTypes(java.lang.reflect.Member) -> parameterTypes
    java.util.Set parameterAnnotations(java.lang.reflect.Member) -> parameterAnnotations
    java.util.Set annotationTypes(java.util.Collection) -> annotationTypes
    java.lang.Class[] annotationTypes(java.lang.annotation.Annotation[]) -> annotationTypes
    void initPrimitives() -> initPrimitives
    java.util.List getPrimitiveNames() -> getPrimitiveNames
    java.util.List getPrimitiveTypes() -> getPrimitiveTypes
    java.util.List getPrimitiveDescriptors() -> getPrimitiveDescriptors
    boolean areAnnotationMembersMatching(java.lang.annotation.Annotation,java.lang.annotation.Annotation) -> areAnnotationMembersMatching
    boolean isAssignable(java.lang.Class[],java.lang.Class[]) -> isAssignable
    boolean lambda$isAssignable$24(java.lang.Class[],java.lang.Class[],int) -> lambda$isAssignable$24
    java.lang.Class[] lambda$annotationTypes$23(int) -> lambda$annotationTypes$23
    java.lang.Class lambda$forNames$22(java.lang.ClassLoader[],java.lang.String) -> lambda$forNames$22
    boolean lambda$withClassModifier$21(int,java.lang.Class) -> lambda$withClassModifier$21
    boolean lambda$withModifier$20(int,java.lang.reflect.Member) -> lambda$withModifier$20
    boolean lambda$withReturnTypeAssignableTo$19(java.lang.Class,java.lang.reflect.Method) -> lambda$withReturnTypeAssignableTo$19
    boolean lambda$withReturnType$18(java.lang.Class,java.lang.reflect.Method) -> lambda$withReturnType$18
    boolean lambda$withTypeAssignableTo$17(java.lang.Class,java.lang.reflect.Field) -> lambda$withTypeAssignableTo$17
    boolean lambda$withType$16(java.lang.Class,java.lang.reflect.Field) -> lambda$withType$16
    boolean lambda$withAnyParameterAnnotation$15(java.lang.annotation.Annotation,java.lang.reflect.Member) -> lambda$withAnyParameterAnnotation$15
    boolean lambda$null$14(java.lang.annotation.Annotation,java.lang.annotation.Annotation) -> lambda$null$14
    boolean lambda$withAnyParameterAnnotation$13(java.lang.Class,java.lang.reflect.Member) -> lambda$withAnyParameterAnnotation$13
    boolean lambda$null$12(java.lang.Class,java.lang.Class) -> lambda$null$12
    boolean lambda$withParametersCount$11(int,java.lang.reflect.Member) -> lambda$withParametersCount$11
    boolean lambda$withParametersAssignableFrom$10(java.lang.Class[],java.lang.reflect.Member) -> lambda$withParametersAssignableFrom$10
    boolean lambda$withParametersAssignableTo$9(java.lang.Class[],java.lang.reflect.Member) -> lambda$withParametersAssignableTo$9
    boolean lambda$withParameters$8(java.lang.Class[],java.lang.reflect.Member) -> lambda$withParameters$8
    boolean lambda$withAnnotations$7(java.lang.annotation.Annotation[],java.lang.reflect.AnnotatedElement) -> lambda$withAnnotations$7
    boolean lambda$null$6(java.lang.annotation.Annotation[],java.lang.annotation.Annotation[],int) -> lambda$null$6
    boolean lambda$withAnnotation$5(java.lang.annotation.Annotation,java.lang.reflect.AnnotatedElement) -> lambda$withAnnotation$5
    boolean lambda$withAnnotations$4(java.lang.Class[],java.lang.reflect.AnnotatedElement) -> lambda$withAnnotations$4
    boolean lambda$withAnnotation$3(java.lang.Class,java.lang.reflect.AnnotatedElement) -> lambda$withAnnotation$3
    boolean lambda$withPattern$2(java.lang.String,java.lang.reflect.AnnotatedElement) -> lambda$withPattern$2
    boolean lambda$withPrefix$1(java.lang.String,java.lang.reflect.Member) -> lambda$withPrefix$1
    boolean lambda$withName$0(java.lang.String,java.lang.reflect.Member) -> lambda$withName$0
    void <clinit>() -> <clinit>
org.reflections.Reflections -> org.reflections.Reflections:
    org.slf4j.Logger log -> log
    org.reflections.Configuration configuration -> configuration
    org.reflections.Store store -> store
    void <init>(org.reflections.Configuration) -> <init>
    void <init>(java.lang.String,org.reflections.scanners.Scanner[]) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void <init>() -> <init>
    void scan() -> scan
    java.lang.String producingDescription(org.reflections.Store) -> producingDescription
    void scan(java.net.URL) -> scan
    org.reflections.Reflections collect() -> collect
    org.reflections.Reflections collect(java.lang.String,java.util.function.Predicate,org.reflections.serializers.Serializer[]) -> collect
    org.reflections.Reflections collect(java.io.InputStream) -> collect
    org.reflections.Reflections collect(java.io.File) -> collect
    org.reflections.Reflections merge(org.reflections.Reflections) -> merge
    void expandSuperTypes() -> expandSuperTypes
    void expandSupertypes(org.reflections.Store,java.lang.String,java.lang.Class) -> expandSupertypes
    java.util.Set getSubTypesOf(java.lang.Class) -> getSubTypesOf
    java.util.Set getTypesAnnotatedWith(java.lang.Class) -> getTypesAnnotatedWith
    java.util.Set getTypesAnnotatedWith(java.lang.Class,boolean) -> getTypesAnnotatedWith
    java.util.Set getTypesAnnotatedWith(java.lang.annotation.Annotation) -> getTypesAnnotatedWith
    java.util.Set getTypesAnnotatedWith(java.lang.annotation.Annotation,boolean) -> getTypesAnnotatedWith
    java.util.Collection getAllAnnotated(java.util.Collection,java.lang.Class,boolean) -> getAllAnnotated
    java.util.Set getMethodsAnnotatedWith(java.lang.Class) -> getMethodsAnnotatedWith
    java.util.Set getMethodsAnnotatedWith(java.lang.annotation.Annotation) -> getMethodsAnnotatedWith
    java.util.Set getMethodsMatchParams(java.lang.Class[]) -> getMethodsMatchParams
    java.util.Set getMethodsReturn(java.lang.Class) -> getMethodsReturn
    java.util.Set getMethodsWithAnyParamAnnotated(java.lang.Class) -> getMethodsWithAnyParamAnnotated
    java.util.Set getMethodsWithAnyParamAnnotated(java.lang.annotation.Annotation) -> getMethodsWithAnyParamAnnotated
    java.util.Set getConstructorsAnnotatedWith(java.lang.Class) -> getConstructorsAnnotatedWith
    java.util.Set getConstructorsAnnotatedWith(java.lang.annotation.Annotation) -> getConstructorsAnnotatedWith
    java.util.Set getConstructorsMatchParams(java.lang.Class[]) -> getConstructorsMatchParams
    java.util.Set getConstructorsWithAnyParamAnnotated(java.lang.Class) -> getConstructorsWithAnyParamAnnotated
    java.util.Set getConstructorsWithAnyParamAnnotated(java.lang.annotation.Annotation) -> getConstructorsWithAnyParamAnnotated
    java.util.Set getFieldsAnnotatedWith(java.lang.Class) -> getFieldsAnnotatedWith
    java.util.Set getFieldsAnnotatedWith(java.lang.annotation.Annotation) -> getFieldsAnnotatedWith
    java.util.Set getResources(java.util.function.Predicate) -> getResources
    java.util.Set getResources(java.util.regex.Pattern) -> getResources
    java.util.List getMethodParamNames(java.lang.reflect.Method) -> getMethodParamNames
    java.util.List getConstructorParamNames(java.lang.reflect.Constructor) -> getConstructorParamNames
    java.util.Set getFieldUsage(java.lang.reflect.Field) -> getFieldUsage
    java.util.Set getMethodUsage(java.lang.reflect.Method) -> getMethodUsage
    java.util.Set getConstructorUsage(java.lang.reflect.Constructor) -> getConstructorUsage
    java.util.Set getAllTypes() -> getAllTypes
    org.reflections.Store getStore() -> getStore
    org.reflections.Configuration getConfiguration() -> getConfiguration
    java.io.File save(java.lang.String) -> save
    java.io.File save(java.lang.String,org.reflections.serializers.Serializer) -> save
    java.lang.ClassLoader[] loaders() -> loaders
    boolean lambda$getResources$4(java.util.regex.Pattern,java.lang.String) -> lambda$getResources$4
    java.lang.reflect.Field lambda$getFieldsAnnotatedWith$3(java.lang.String) -> lambda$getFieldsAnnotatedWith$3
    boolean lambda$getAllAnnotated$2(java.lang.String) -> lambda$getAllAnnotated$2
    boolean lambda$getTypesAnnotatedWith$1(java.util.Set,java.lang.String) -> lambda$getTypesAnnotatedWith$1
    void lambda$scan$0(java.net.URL) -> lambda$scan$0
    void <clinit>() -> <clinit>
org.reflections.ReflectionsException -> org.reflections.ReflectionsException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
org.reflections.Store -> org.reflections.Store:
    java.util.concurrent.ConcurrentHashMap storeMap -> storeMap
    void <init>() -> <init>
    java.util.Set keySet() -> keySet
    java.util.Map get(java.lang.String) -> get
    java.util.Set get(java.lang.Class,java.lang.String) -> get
    java.util.Set get(java.lang.String,java.lang.String) -> get
    java.util.Set get(java.lang.Class,java.util.Collection) -> get
    java.util.Set get(java.lang.String,java.util.Collection) -> get
    java.util.Set getAllIncluding(java.lang.Class,java.util.Collection) -> getAllIncluding
    java.util.Set getAll(java.lang.Class,java.lang.String) -> getAll
    java.util.Set getAll(java.lang.Class,java.util.Collection) -> getAll
    java.util.Set keys(java.lang.String) -> keys
    java.util.Set values(java.lang.String) -> values
    boolean put(java.lang.Class,java.lang.String,java.lang.String) -> put
    boolean put(java.lang.String,java.lang.String,java.lang.String) -> put
    void merge(org.reflections.Store) -> merge
    java.util.Collection lambda$put$1(java.lang.String) -> lambda$put$1
    java.util.Map lambda$put$0(java.lang.String) -> lambda$put$0
org.reflections.adapters.JavaReflectionAdapter -> org.reflections.adapters.JavaReflectionAdapter:
    void <init>() -> <init>
    java.util.List getFields(java.lang.Class) -> getFields
    java.util.List getMethods(java.lang.Class) -> getMethods
    java.lang.String getMethodName(java.lang.reflect.Member) -> getMethodName
    java.util.List getParameterNames(java.lang.reflect.Member) -> getParameterNames
    java.util.List getClassAnnotationNames(java.lang.Class) -> getClassAnnotationNames
    java.util.List getFieldAnnotationNames(java.lang.reflect.Field) -> getFieldAnnotationNames
    java.util.List getMethodAnnotationNames(java.lang.reflect.Member) -> getMethodAnnotationNames
    java.util.List getParameterAnnotationNames(java.lang.reflect.Member,int) -> getParameterAnnotationNames
    java.lang.String getReturnTypeName(java.lang.reflect.Member) -> getReturnTypeName
    java.lang.String getFieldName(java.lang.reflect.Field) -> getFieldName
    java.lang.Class getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.Class getOrCreateClassObject(org.reflections.vfs.Vfs$File,java.lang.ClassLoader[]) -> getOrCreateClassObject
    java.lang.String getMethodModifier(java.lang.reflect.Member) -> getMethodModifier
    java.lang.String getMethodKey(java.lang.Class,java.lang.reflect.Member) -> getMethodKey
    java.lang.String getMethodFullKey(java.lang.Class,java.lang.reflect.Member) -> getMethodFullKey
    boolean isPublic(java.lang.Object) -> isPublic
    java.lang.String getClassName(java.lang.Class) -> getClassName
    java.lang.String getSuperclassName(java.lang.Class) -> getSuperclassName
    java.util.List getInterfacesNames(java.lang.Class) -> getInterfacesNames
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.util.List getAnnotationNames(java.lang.annotation.Annotation[]) -> getAnnotationNames
    java.lang.String getName(java.lang.Class) -> getName
    java.lang.String getMethodFullKey(java.lang.Object,java.lang.Object) -> getMethodFullKey
    java.lang.String getMethodKey(java.lang.Object,java.lang.Object) -> getMethodKey
    java.lang.String getMethodModifier(java.lang.Object) -> getMethodModifier
    java.lang.Object getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.String getFieldName(java.lang.Object) -> getFieldName
    java.lang.String getReturnTypeName(java.lang.Object) -> getReturnTypeName
    java.util.List getParameterAnnotationNames(java.lang.Object,int) -> getParameterAnnotationNames
    java.util.List getMethodAnnotationNames(java.lang.Object) -> getMethodAnnotationNames
    java.util.List getFieldAnnotationNames(java.lang.Object) -> getFieldAnnotationNames
    java.util.List getClassAnnotationNames(java.lang.Object) -> getClassAnnotationNames
    java.util.List getParameterNames(java.lang.Object) -> getParameterNames
    java.lang.String getMethodName(java.lang.Object) -> getMethodName
    java.util.List getMethods(java.lang.Object) -> getMethods
    java.util.List getFields(java.lang.Object) -> getFields
    java.util.List getInterfacesNames(java.lang.Object) -> getInterfacesNames
    java.lang.String getSuperclassName(java.lang.Object) -> getSuperclassName
    java.lang.String getClassName(java.lang.Object) -> getClassName
    java.lang.String lambda$getAnnotationNames$0(java.lang.annotation.Annotation) -> lambda$getAnnotationNames$0
org.reflections.adapters.JavassistAdapter -> org.reflections.adapters.JavassistAdapter:
    boolean includeInvisibleTag -> includeInvisibleTag
    void <init>() -> <init>
    java.util.List getFields(javassist.bytecode.ClassFile) -> getFields
    java.util.List getMethods(javassist.bytecode.ClassFile) -> getMethods
    java.lang.String getMethodName(javassist.bytecode.MethodInfo) -> getMethodName
    java.util.List getParameterNames(javassist.bytecode.MethodInfo) -> getParameterNames
    java.util.List getClassAnnotationNames(javassist.bytecode.ClassFile) -> getClassAnnotationNames
    java.util.List getFieldAnnotationNames(javassist.bytecode.FieldInfo) -> getFieldAnnotationNames
    java.util.List getMethodAnnotationNames(javassist.bytecode.MethodInfo) -> getMethodAnnotationNames
    java.util.List getParameterAnnotationNames(javassist.bytecode.MethodInfo,int) -> getParameterAnnotationNames
    java.lang.String getReturnTypeName(javassist.bytecode.MethodInfo) -> getReturnTypeName
    java.lang.String getFieldName(javassist.bytecode.FieldInfo) -> getFieldName
    javassist.bytecode.ClassFile getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.String getMethodModifier(javassist.bytecode.MethodInfo) -> getMethodModifier
    java.lang.String getMethodKey(javassist.bytecode.ClassFile,javassist.bytecode.MethodInfo) -> getMethodKey
    java.lang.String getMethodFullKey(javassist.bytecode.ClassFile,javassist.bytecode.MethodInfo) -> getMethodFullKey
    boolean isPublic(java.lang.Object) -> isPublic
    java.lang.String getClassName(javassist.bytecode.ClassFile) -> getClassName
    java.lang.String getSuperclassName(javassist.bytecode.ClassFile) -> getSuperclassName
    java.util.List getInterfacesNames(javassist.bytecode.ClassFile) -> getInterfacesNames
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.util.List getAnnotationNames(javassist.bytecode.AnnotationsAttribute[]) -> getAnnotationNames
    java.util.List getAnnotationNames(javassist.bytecode.annotation.Annotation[]) -> getAnnotationNames
    java.util.List splitDescriptorToTypeNames(java.lang.String) -> splitDescriptorToTypeNames
    java.lang.String getMethodFullKey(java.lang.Object,java.lang.Object) -> getMethodFullKey
    java.lang.String getMethodKey(java.lang.Object,java.lang.Object) -> getMethodKey
    java.lang.String getMethodModifier(java.lang.Object) -> getMethodModifier
    java.lang.Object getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.String getFieldName(java.lang.Object) -> getFieldName
    java.lang.String getReturnTypeName(java.lang.Object) -> getReturnTypeName
    java.util.List getParameterAnnotationNames(java.lang.Object,int) -> getParameterAnnotationNames
    java.util.List getMethodAnnotationNames(java.lang.Object) -> getMethodAnnotationNames
    java.util.List getFieldAnnotationNames(java.lang.Object) -> getFieldAnnotationNames
    java.util.List getClassAnnotationNames(java.lang.Object) -> getClassAnnotationNames
    java.util.List getParameterNames(java.lang.Object) -> getParameterNames
    java.lang.String getMethodName(java.lang.Object) -> getMethodName
    java.util.List getMethods(java.lang.Object) -> getMethods
    java.util.List getFields(java.lang.Object) -> getFields
    java.util.List getInterfacesNames(java.lang.Object) -> getInterfacesNames
    java.lang.String getSuperclassName(java.lang.Object) -> getSuperclassName
    java.lang.String getClassName(java.lang.Object) -> getClassName
    java.lang.String lambda$splitDescriptorToTypeNames$1(java.lang.String,java.util.List,int) -> lambda$splitDescriptorToTypeNames$1
    java.util.stream.Stream lambda$getAnnotationNames$0(javassist.bytecode.AnnotationsAttribute) -> lambda$getAnnotationNames$0
    void <clinit>() -> <clinit>
org.reflections.adapters.MetadataAdapter -> org.reflections.adapters.MetadataAdapter:
    java.lang.String getClassName(java.lang.Object) -> getClassName
    java.lang.String getSuperclassName(java.lang.Object) -> getSuperclassName
    java.util.List getInterfacesNames(java.lang.Object) -> getInterfacesNames
    java.util.List getFields(java.lang.Object) -> getFields
    java.util.List getMethods(java.lang.Object) -> getMethods
    java.lang.String getMethodName(java.lang.Object) -> getMethodName
    java.util.List getParameterNames(java.lang.Object) -> getParameterNames
    java.util.List getClassAnnotationNames(java.lang.Object) -> getClassAnnotationNames
    java.util.List getFieldAnnotationNames(java.lang.Object) -> getFieldAnnotationNames
    java.util.List getMethodAnnotationNames(java.lang.Object) -> getMethodAnnotationNames
    java.util.List getParameterAnnotationNames(java.lang.Object,int) -> getParameterAnnotationNames
    java.lang.String getReturnTypeName(java.lang.Object) -> getReturnTypeName
    java.lang.String getFieldName(java.lang.Object) -> getFieldName
    java.lang.Object getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.String getMethodModifier(java.lang.Object) -> getMethodModifier
    java.lang.String getMethodKey(java.lang.Object,java.lang.Object) -> getMethodKey
    java.lang.String getMethodFullKey(java.lang.Object,java.lang.Object) -> getMethodFullKey
    boolean isPublic(java.lang.Object) -> isPublic
    boolean acceptsInput(java.lang.String) -> acceptsInput
org.reflections.scanners.AbstractScanner -> org.reflections.scanners.AbstractScanner:
    org.reflections.Configuration configuration -> configuration
    java.util.function.Predicate resultFilter -> resultFilter
    void <init>() -> <init>
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.lang.Object scan(org.reflections.vfs.Vfs$File,java.lang.Object,org.reflections.Store) -> scan
    void scan(java.lang.Object,org.reflections.Store) -> scan
    void put(org.reflections.Store,java.lang.String,java.lang.String) -> put
    org.reflections.Configuration getConfiguration() -> getConfiguration
    void setConfiguration(org.reflections.Configuration) -> setConfiguration
    java.util.function.Predicate getResultFilter() -> getResultFilter
    void setResultFilter(java.util.function.Predicate) -> setResultFilter
    org.reflections.scanners.Scanner filterResultsBy(java.util.function.Predicate) -> filterResultsBy
    boolean acceptResult(java.lang.String) -> acceptResult
    org.reflections.adapters.MetadataAdapter getMetadataAdapter() -> getMetadataAdapter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean lambda$new$0(java.lang.String) -> lambda$new$0
org.reflections.scanners.FieldAnnotationsScanner -> org.reflections.scanners.FieldAnnotationsScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.MemberUsageScanner -> org.reflections.scanners.MemberUsageScanner:
    javassist.ClassPool classPool -> classPool
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
    void scanMember(javassist.CtBehavior,org.reflections.Store) -> scanMember
    void put(org.reflections.Store,java.lang.String,int,java.lang.String) -> put
    java.lang.String parameterNames(javassist.bytecode.MethodInfo) -> parameterNames
    javassist.ClassPool getClassPool() -> getClassPool
    void access$000(org.reflections.scanners.MemberUsageScanner,org.reflections.Store,java.lang.String,int,java.lang.String) -> access$000
org.reflections.scanners.MemberUsageScanner$1 -> org.reflections.scanners.MemberUsageScanner$1:
    org.reflections.Store val$store -> val$store
    java.lang.String val$key -> val$key
    org.reflections.scanners.MemberUsageScanner this$0 -> this$0
    void <init>(org.reflections.scanners.MemberUsageScanner,org.reflections.Store,java.lang.String) -> <init>
    void edit(javassist.expr.NewExpr) -> edit
    void edit(javassist.expr.MethodCall) -> edit
    void edit(javassist.expr.ConstructorCall) -> edit
    void edit(javassist.expr.FieldAccess) -> edit
org.reflections.scanners.MethodAnnotationsScanner -> org.reflections.scanners.MethodAnnotationsScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.MethodParameterNamesScanner -> org.reflections.scanners.MethodParameterNamesScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.MethodParameterScanner -> org.reflections.scanners.MethodParameterScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.ResourcesScanner -> org.reflections.scanners.ResourcesScanner:
    void <init>() -> <init>
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.lang.Object scan(org.reflections.vfs.Vfs$File,java.lang.Object,org.reflections.Store) -> scan
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.Scanner -> org.reflections.scanners.Scanner:
    void setConfiguration(org.reflections.Configuration) -> setConfiguration
    org.reflections.scanners.Scanner filterResultsBy(java.util.function.Predicate) -> filterResultsBy
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.lang.Object scan(org.reflections.vfs.Vfs$File,java.lang.Object,org.reflections.Store) -> scan
    boolean acceptResult(java.lang.String) -> acceptResult
org.reflections.scanners.SubTypesScanner -> org.reflections.scanners.SubTypesScanner:
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.TypeAnnotationsScanner -> org.reflections.scanners.TypeAnnotationsScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.TypeElementsScanner -> org.reflections.scanners.TypeElementsScanner:
    boolean includeFields -> includeFields
    boolean includeMethods -> includeMethods
    boolean includeAnnotations -> includeAnnotations
    boolean publicOnly -> publicOnly
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
    org.reflections.scanners.TypeElementsScanner includeFields() -> includeFields
    org.reflections.scanners.TypeElementsScanner includeFields(boolean) -> includeFields
    org.reflections.scanners.TypeElementsScanner includeMethods() -> includeMethods
    org.reflections.scanners.TypeElementsScanner includeMethods(boolean) -> includeMethods
    org.reflections.scanners.TypeElementsScanner includeAnnotations() -> includeAnnotations
    org.reflections.scanners.TypeElementsScanner includeAnnotations(boolean) -> includeAnnotations
    org.reflections.scanners.TypeElementsScanner publicOnly(boolean) -> publicOnly
    org.reflections.scanners.TypeElementsScanner publicOnly() -> publicOnly
org.reflections.serializers.JavaCodeSerializer -> org.reflections.serializers.JavaCodeSerializer:
    java.lang.String pathSeparator -> pathSeparator
    java.lang.String doubleSeparator -> doubleSeparator
    java.lang.String dotSeparator -> dotSeparator
    java.lang.String arrayDescriptor -> arrayDescriptor
    java.lang.String tokenSeparator -> tokenSeparator
    void <init>() -> <init>
    org.reflections.Reflections read(java.io.InputStream) -> read
    java.io.File save(org.reflections.Reflections,java.lang.String) -> save
    java.lang.String toString(org.reflections.Reflections) -> toString
    java.lang.String getNonDuplicateName(java.lang.String,java.util.List,int) -> getNonDuplicateName
    java.lang.String normalize(java.lang.String) -> normalize
    java.lang.String getNonDuplicateName(java.lang.String,java.util.List) -> getNonDuplicateName
    java.lang.Class resolveClassOf(java.lang.Class) -> resolveClassOf
    java.lang.Class resolveClass(java.lang.Class) -> resolveClass
    java.lang.reflect.Field resolveField(java.lang.Class) -> resolveField
    java.lang.annotation.Annotation resolveAnnotation(java.lang.Class) -> resolveAnnotation
    java.lang.reflect.Method resolveMethod(java.lang.Class) -> resolveMethod
org.reflections.serializers.JsonSerializer -> org.reflections.serializers.JsonSerializer:
    com.google.gson.Gson gson -> gson
    void <init>() -> <init>
    org.reflections.Reflections read(java.io.InputStream) -> read
    java.io.File save(org.reflections.Reflections,java.lang.String) -> save
    java.lang.String toString(org.reflections.Reflections) -> toString
    com.google.gson.Gson getGson() -> getGson
org.reflections.serializers.Serializer -> org.reflections.serializers.Serializer:
    org.reflections.Reflections read(java.io.InputStream) -> read
    java.io.File save(org.reflections.Reflections,java.lang.String) -> save
    java.lang.String toString(org.reflections.Reflections) -> toString
org.reflections.serializers.XmlSerializer -> org.reflections.serializers.XmlSerializer:
    void <init>() -> <init>
    org.reflections.Reflections read(java.io.InputStream) -> read
    java.io.File save(org.reflections.Reflections,java.lang.String) -> save
    java.lang.String toString(org.reflections.Reflections) -> toString
    org.dom4j.Document createDocument(org.reflections.Reflections) -> createDocument
org.reflections.util.ClasspathHelper -> org.reflections.util.ClasspathHelper:
    void <init>() -> <init>
    java.lang.ClassLoader contextClassLoader() -> contextClassLoader
    java.lang.ClassLoader staticClassLoader() -> staticClassLoader
    java.lang.ClassLoader[] classLoaders(java.lang.ClassLoader[]) -> classLoaders
    java.util.Collection forPackage(java.lang.String,java.lang.ClassLoader[]) -> forPackage
    java.util.Collection forResource(java.lang.String,java.lang.ClassLoader[]) -> forResource
    java.net.URL forClass(java.lang.Class,java.lang.ClassLoader[]) -> forClass
    java.util.Collection forClassLoader() -> forClassLoader
    java.util.Collection forClassLoader(java.lang.ClassLoader[]) -> forClassLoader
    java.util.Collection forJavaClassPath() -> forJavaClassPath
    java.util.Collection forWebInfLib(javax.servlet.ServletContext) -> forWebInfLib
    java.net.URL forWebInfClasses(javax.servlet.ServletContext) -> forWebInfClasses
    java.util.Collection forManifest() -> forManifest
    java.util.Collection forManifest(java.net.URL) -> forManifest
    java.util.Collection forManifest(java.lang.Iterable) -> forManifest
    java.net.URL tryToGetValidUrl(java.lang.String,java.lang.String,java.lang.String) -> tryToGetValidUrl
    java.lang.String cleanPath(java.net.URL) -> cleanPath
    java.lang.String resourceName(java.lang.String) -> resourceName
    java.util.Collection distinctUrls(java.util.Collection) -> distinctUrls
org.reflections.util.ConfigurationBuilder -> org.reflections.util.ConfigurationBuilder:
    java.util.Set scanners -> scanners
    java.util.Set urls -> urls
    org.reflections.adapters.MetadataAdapter metadataAdapter -> metadataAdapter
    java.util.function.Predicate inputsFilter -> inputsFilter
    org.reflections.serializers.Serializer serializer -> serializer
    java.util.concurrent.ExecutorService executorService -> executorService
    java.lang.ClassLoader[] classLoaders -> classLoaders
    boolean expandSuperTypes -> expandSuperTypes
    void <init>() -> <init>
    org.reflections.util.ConfigurationBuilder build(java.lang.Object[]) -> build
    org.reflections.util.ConfigurationBuilder forPackages(java.lang.String[]) -> forPackages
    java.util.Set getScanners() -> getScanners
    org.reflections.util.ConfigurationBuilder setScanners(org.reflections.scanners.Scanner[]) -> setScanners
    org.reflections.util.ConfigurationBuilder addScanners(org.reflections.scanners.Scanner[]) -> addScanners
    java.util.Set getUrls() -> getUrls
    org.reflections.util.ConfigurationBuilder setUrls(java.util.Collection) -> setUrls
    org.reflections.util.ConfigurationBuilder setUrls(java.net.URL[]) -> setUrls
    org.reflections.util.ConfigurationBuilder addUrls(java.util.Collection) -> addUrls
    org.reflections.util.ConfigurationBuilder addUrls(java.net.URL[]) -> addUrls
    org.reflections.adapters.MetadataAdapter getMetadataAdapter() -> getMetadataAdapter
    org.reflections.util.ConfigurationBuilder setMetadataAdapter(org.reflections.adapters.MetadataAdapter) -> setMetadataAdapter
    java.util.function.Predicate getInputsFilter() -> getInputsFilter
    void setInputsFilter(java.util.function.Predicate) -> setInputsFilter
    org.reflections.util.ConfigurationBuilder filterInputsBy(java.util.function.Predicate) -> filterInputsBy
    java.util.concurrent.ExecutorService getExecutorService() -> getExecutorService
    org.reflections.util.ConfigurationBuilder setExecutorService(java.util.concurrent.ExecutorService) -> setExecutorService
    org.reflections.util.ConfigurationBuilder useParallelExecutor() -> useParallelExecutor
    org.reflections.util.ConfigurationBuilder useParallelExecutor(int) -> useParallelExecutor
    org.reflections.serializers.Serializer getSerializer() -> getSerializer
    org.reflections.util.ConfigurationBuilder setSerializer(org.reflections.serializers.Serializer) -> setSerializer
    java.lang.ClassLoader[] getClassLoaders() -> getClassLoaders
    boolean shouldExpandSuperTypes() -> shouldExpandSuperTypes
    org.reflections.util.ConfigurationBuilder setExpandSuperTypes(boolean) -> setExpandSuperTypes
    void setClassLoaders(java.lang.ClassLoader[]) -> setClassLoaders
    org.reflections.util.ConfigurationBuilder addClassLoader(java.lang.ClassLoader) -> addClassLoader
    org.reflections.util.ConfigurationBuilder addClassLoaders(java.lang.ClassLoader[]) -> addClassLoaders
    org.reflections.util.ConfigurationBuilder addClassLoaders(java.util.Collection) -> addClassLoaders
    java.lang.ClassLoader[] lambda$addClassLoaders$0(int) -> lambda$addClassLoaders$0
org.reflections.util.ConfigurationBuilder$1 -> org.reflections.util.ConfigurationBuilder$1:
    java.util.concurrent.atomic.AtomicInteger threadNumber -> threadNumber
    org.reflections.util.ConfigurationBuilder this$0 -> this$0
    void <init>(org.reflections.util.ConfigurationBuilder) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.reflections.util.FilterBuilder -> org.reflections.util.FilterBuilder:
    java.util.List chain -> chain
    void <init>() -> <init>
    void <init>(java.util.Collection) -> <init>
    org.reflections.util.FilterBuilder include(java.lang.String) -> include
    org.reflections.util.FilterBuilder exclude(java.lang.String) -> exclude
    org.reflections.util.FilterBuilder add(java.util.function.Predicate) -> add
    org.reflections.util.FilterBuilder includePackage(java.lang.Class) -> includePackage
    org.reflections.util.FilterBuilder excludePackage(java.lang.Class) -> excludePackage
    org.reflections.util.FilterBuilder includePackage(java.lang.String[]) -> includePackage
    org.reflections.util.FilterBuilder excludePackage(java.lang.String) -> excludePackage
    java.lang.String packageNameRegex(java.lang.Class) -> packageNameRegex
    java.lang.String prefix(java.lang.String) -> prefix
    java.lang.String toString() -> toString
    boolean test(java.lang.String) -> test
    org.reflections.util.FilterBuilder parse(java.lang.String) -> parse
    org.reflections.util.FilterBuilder parsePackages(java.lang.String) -> parsePackages
    boolean test(java.lang.Object) -> test
org.reflections.util.FilterBuilder$Exclude -> org.reflections.util.FilterBuilder$Exclude:
    void <init>(java.lang.String) -> <init>
    boolean test(java.lang.String) -> test
    java.lang.String toString() -> toString
    boolean test(java.lang.Object) -> test
org.reflections.util.FilterBuilder$Include -> org.reflections.util.FilterBuilder$Include:
    void <init>(java.lang.String) -> <init>
    boolean test(java.lang.String) -> test
    java.lang.String toString() -> toString
    boolean test(java.lang.Object) -> test
org.reflections.util.FilterBuilder$Matcher -> org.reflections.util.FilterBuilder$Matcher:
    java.util.regex.Pattern pattern -> pattern
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.reflections.util.Utils -> org.reflections.util.Utils:
    void <init>() -> <init>
    java.lang.String repeat(java.lang.String,int) -> repeat
    boolean isEmpty(java.lang.String) -> isEmpty
    java.io.File prepareFile(java.lang.String) -> prepareFile
    java.lang.reflect.Member getMemberFromDescriptor(java.lang.String,java.lang.ClassLoader[]) -> getMemberFromDescriptor
    java.util.Set getMethodsFromDescriptors(java.lang.Iterable,java.lang.ClassLoader[]) -> getMethodsFromDescriptors
    java.util.Set getConstructorsFromDescriptors(java.lang.Iterable,java.lang.ClassLoader[]) -> getConstructorsFromDescriptors
    java.util.Set getMembersFromDescriptors(java.lang.Iterable,java.lang.ClassLoader[]) -> getMembersFromDescriptors
    java.lang.reflect.Field getFieldFromString(java.lang.String,java.lang.ClassLoader[]) -> getFieldFromString
    void close(java.io.InputStream) -> close
    org.slf4j.Logger findLogger(java.lang.Class) -> findLogger
    boolean isConstructor(java.lang.String) -> isConstructor
    java.lang.String name(java.lang.Class) -> name
    java.util.List names(java.util.Collection) -> names
    java.util.List names(java.lang.Class[]) -> names
    java.lang.String name(java.lang.reflect.Constructor) -> name
    java.lang.String name(java.lang.reflect.Method) -> name
    java.lang.String name(java.lang.reflect.Field) -> name
    java.lang.String index(java.lang.Class) -> index
    java.util.function.Predicate and(java.util.function.Predicate[]) -> and
    java.lang.String join(java.util.Collection,java.lang.String) -> join
    java.util.Set filter(java.util.Collection,java.util.function.Predicate[]) -> filter
    java.util.Set filter(java.util.Collection,java.util.function.Predicate) -> filter
    java.util.Set filter(java.lang.Object[],java.util.function.Predicate[]) -> filter
    boolean lambda$and$3(java.lang.Object) -> lambda$and$3
    java.lang.Class[] lambda$getMemberFromDescriptor$2(int) -> lambda$getMemberFromDescriptor$2
    java.lang.Class lambda$getMemberFromDescriptor$1(java.lang.ClassLoader[],java.lang.String) -> lambda$getMemberFromDescriptor$1
    java.lang.String lambda$repeat$0(java.lang.String,int) -> lambda$repeat$0
org.reflections.vfs.JarInputDir -> org.reflections.vfs.JarInputDir:
    java.net.URL url -> url
    java.util.jar.JarInputStream jarInputStream -> jarInputStream
    long cursor -> cursor
    long nextCursor -> nextCursor
    void <init>(java.net.URL) -> <init>
    java.lang.String getPath() -> getPath
    java.lang.Iterable getFiles() -> getFiles
    void close() -> close
    java.util.Iterator lambda$getFiles$0() -> lambda$getFiles$0
    java.net.URL access$000(org.reflections.vfs.JarInputDir) -> access$000
org.reflections.vfs.JarInputDir$1 -> org.reflections.vfs.JarInputDir$1:
    org.reflections.vfs.Vfs$File entry -> entry
    org.reflections.vfs.JarInputDir this$0 -> this$0
    void <init>(org.reflections.vfs.JarInputDir) -> <init>
    boolean hasNext() -> hasNext
    org.reflections.vfs.Vfs$File next() -> next
    org.reflections.vfs.Vfs$File computeNext() -> computeNext
    java.lang.Object next() -> next
org.reflections.vfs.JarInputFile -> org.reflections.vfs.JarInputFile:
    java.util.zip.ZipEntry entry -> entry
    org.reflections.vfs.JarInputDir jarInputDir -> jarInputDir
    long fromIndex -> fromIndex
    long endIndex -> endIndex
    void <init>(java.util.zip.ZipEntry,org.reflections.vfs.JarInputDir,long,long) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getRelativePath() -> getRelativePath
    java.io.InputStream openInputStream() -> openInputStream
    org.reflections.vfs.JarInputDir access$000(org.reflections.vfs.JarInputFile) -> access$000
    long access$100(org.reflections.vfs.JarInputFile) -> access$100
    long access$200(org.reflections.vfs.JarInputFile) -> access$200
org.reflections.vfs.JarInputFile$1 -> org.reflections.vfs.JarInputFile$1:
    org.reflections.vfs.JarInputFile this$0 -> this$0
    void <init>(org.reflections.vfs.JarInputFile) -> <init>
    int read() -> read
org.reflections.vfs.SystemDir -> org.reflections.vfs.SystemDir:
    java.io.File file -> file
    void <init>(java.io.File) -> <init>
    java.lang.String getPath() -> getPath
    java.lang.Iterable getFiles() -> getFiles
    void close() -> close
    java.lang.String toString() -> toString
    java.util.Iterator lambda$getFiles$2() -> lambda$getFiles$2
    org.reflections.vfs.Vfs$File lambda$null$1(java.nio.file.Path) -> lambda$null$1
    boolean lambda$null$0(java.nio.file.Path) -> lambda$null$0
org.reflections.vfs.SystemFile -> org.reflections.vfs.SystemFile:
    org.reflections.vfs.SystemDir root -> root
    java.io.File file -> file
    void <init>(org.reflections.vfs.SystemDir,java.io.File) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getRelativePath() -> getRelativePath
    java.io.InputStream openInputStream() -> openInputStream
    java.lang.String toString() -> toString
org.reflections.vfs.UrlTypeVFS -> org.reflections.vfs.UrlTypeVFS:
    java.lang.String[] REPLACE_EXTENSION -> REPLACE_EXTENSION
    java.lang.String VFSZIP -> VFSZIP
    java.lang.String VFSFILE -> VFSFILE
    java.util.function.Predicate realFile -> realFile
    void <init>() -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
    java.net.URL adaptURL(java.net.URL) -> adaptURL
    java.net.URL replaceZipSeparators(java.lang.String,java.util.function.Predicate) -> replaceZipSeparators
    int findFirstMatchOfDeployableExtention(java.lang.String,int) -> findFirstMatchOfDeployableExtention
    java.net.URL replaceZipSeparatorStartingFrom(java.lang.String,int) -> replaceZipSeparatorStartingFrom
    boolean lambda$new$0(java.io.File) -> lambda$new$0
    void <clinit>() -> <clinit>
org.reflections.vfs.Vfs -> org.reflections.vfs.Vfs:
    java.util.List defaultUrlTypes -> defaultUrlTypes
    void <init>() -> <init>
    java.util.List getDefaultUrlTypes() -> getDefaultUrlTypes
    void setDefaultURLTypes(java.util.List) -> setDefaultURLTypes
    void addDefaultURLTypes(org.reflections.vfs.Vfs$UrlType) -> addDefaultURLTypes
    org.reflections.vfs.Vfs$Dir fromURL(java.net.URL) -> fromURL
    org.reflections.vfs.Vfs$Dir fromURL(java.net.URL,java.util.List) -> fromURL
    org.reflections.vfs.Vfs$Dir fromURL(java.net.URL,org.reflections.vfs.Vfs$UrlType[]) -> fromURL
    java.lang.Iterable findFiles(java.util.Collection,java.lang.String,java.util.function.Predicate) -> findFiles
    java.lang.Iterable findFiles(java.util.Collection,java.util.function.Predicate) -> findFiles
    java.io.File getFile(java.net.URL) -> getFile
    boolean hasJarFileInPath(java.net.URL) -> hasJarFileInPath
    java.util.Iterator lambda$findFiles$2(java.util.Collection,java.util.function.Predicate) -> lambda$findFiles$2
    java.util.stream.Stream lambda$null$1(java.net.URL) -> lambda$null$1
    boolean lambda$findFiles$0(java.lang.String,java.util.function.Predicate,org.reflections.vfs.Vfs$File) -> lambda$findFiles$0
    boolean access$100(java.net.URL) -> access$100
    void <clinit>() -> <clinit>
org.reflections.vfs.Vfs$1 -> org.reflections.vfs.Vfs$1:
org.reflections.vfs.Vfs$DefaultUrlTypes -> org.reflections.vfs.Vfs$DefaultUrlTypes:
    org.reflections.vfs.Vfs$DefaultUrlTypes jarFile -> jarFile
    org.reflections.vfs.Vfs$DefaultUrlTypes jarUrl -> jarUrl
    org.reflections.vfs.Vfs$DefaultUrlTypes directory -> directory
    org.reflections.vfs.Vfs$DefaultUrlTypes jboss_vfs -> jboss_vfs
    org.reflections.vfs.Vfs$DefaultUrlTypes jboss_vfsfile -> jboss_vfsfile
    org.reflections.vfs.Vfs$DefaultUrlTypes bundle -> bundle
    org.reflections.vfs.Vfs$DefaultUrlTypes jarInputStream -> jarInputStream
    org.reflections.vfs.Vfs$DefaultUrlTypes[] $VALUES -> $VALUES
    org.reflections.vfs.Vfs$DefaultUrlTypes[] values() -> values
    org.reflections.vfs.Vfs$DefaultUrlTypes valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,org.reflections.vfs.Vfs$1) -> <init>
    void <clinit>() -> <clinit>
org.reflections.vfs.Vfs$DefaultUrlTypes$1 -> org.reflections.vfs.Vfs$DefaultUrlTypes$1:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$2 -> org.reflections.vfs.Vfs$DefaultUrlTypes$2:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$3 -> org.reflections.vfs.Vfs$DefaultUrlTypes$3:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$4 -> org.reflections.vfs.Vfs$DefaultUrlTypes$4:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$5 -> org.reflections.vfs.Vfs$DefaultUrlTypes$5:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$6 -> org.reflections.vfs.Vfs$DefaultUrlTypes$6:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$7 -> org.reflections.vfs.Vfs$DefaultUrlTypes$7:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$Dir -> org.reflections.vfs.Vfs$Dir:
    java.lang.String getPath() -> getPath
    java.lang.Iterable getFiles() -> getFiles
    void close() -> close
org.reflections.vfs.Vfs$File -> org.reflections.vfs.Vfs$File:
    java.lang.String getName() -> getName
    java.lang.String getRelativePath() -> getRelativePath
    java.io.InputStream openInputStream() -> openInputStream
org.reflections.vfs.Vfs$UrlType -> org.reflections.vfs.Vfs$UrlType:
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.ZipDir -> org.reflections.vfs.ZipDir:
    java.util.zip.ZipFile jarFile -> jarFile
    void <init>(java.util.jar.JarFile) -> <init>
    java.lang.String getPath() -> getPath
    java.lang.Iterable getFiles() -> getFiles
    void close() -> close
    java.lang.String toString() -> toString
    java.util.Iterator lambda$getFiles$2() -> lambda$getFiles$2
    org.reflections.vfs.Vfs$File lambda$null$1(java.util.zip.ZipEntry) -> lambda$null$1
    boolean lambda$null$0(java.util.zip.ZipEntry) -> lambda$null$0
org.reflections.vfs.ZipFile -> org.reflections.vfs.ZipFile:
    org.reflections.vfs.ZipDir root -> root
    java.util.zip.ZipEntry entry -> entry
    void <init>(org.reflections.vfs.ZipDir,java.util.zip.ZipEntry) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getRelativePath() -> getRelativePath
    java.io.InputStream openInputStream() -> openInputStream
    java.lang.String toString() -> toString
