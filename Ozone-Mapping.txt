Atom.Reflect.Reflect -> a.a.a:
    java.lang.Object claszObject -> c
    java.lang.Class loadC -> d
    java.net.URLClassLoader classLoader -> e
    Ozone.UI.JavaEditor javaEditor -> a
    Ozone.UI.CommandsListFrag commFrag -> b
    java.lang.Object getField(java.lang.Class,java.lang.String,java.lang.Object) -> a
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Object) -> b
    java.util.ArrayList findMethod(java.lang.Class,Atom.Struct.Filter,java.lang.Object) -> a
    java.util.ArrayList findDeclaredField(java.lang.Class,Atom.Struct.Filter,java.lang.Object) -> b
    boolean lambda$getMethod$1(java.lang.String,java.lang.reflect.Method) -> a
    boolean lambda$getField$0(java.lang.String,java.lang.reflect.Field) -> a
    int positive(int) -> a
    java.lang.String getRandomHexColor() -> a
    void <init>(java.io.File) -> <init>
    void load(java.lang.String) -> a
    void invokeMethod(java.lang.String) -> b
    java.lang.reflect.Method getMethod(java.lang.String) -> c
Atom.Runtime.RuntimeSource -> a.b.a:
    java.io.File workingDir -> c
    java.util.ArrayList imports -> d
    java.lang.String packages -> a
    java.lang.String name -> b
    java.lang.String code -> e
    java.io.File sourceFile -> f
    void <init>(java.io.File) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void AssignSourceCode(java.lang.String) -> a
    Atom.Reflect.Reflect compile$761218c3(java.io.OutputStream) -> a
    java.lang.String getString() -> a
    void <clinit>() -> <clinit>
Atom.Struct.Filter -> a.c.a:
    boolean accept(java.lang.Object) -> accept
Atom.Struct.Queue -> a.c.b:
    int size -> a
    java.lang.Object[] values -> b
    int head -> c
    int tail -> d
    Atom.Struct.Queue$QueueIterable iterable -> e
    void <init>() -> <init>
    void <init>(int) -> <init>
    java.lang.Object removeIndex(int) -> a
    java.lang.Object get(int) -> b
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
Atom.Struct.Queue$QueueIterable -> a.c.c:
    Atom.Struct.Queue queue -> a
    boolean allowRemove -> b
    Atom.Struct.Queue$QueueIterable$QueueIterator iterator1 -> c
    Atom.Struct.Queue$QueueIterable$QueueIterator iterator2 -> d
    void <init>(Atom.Struct.Queue) -> <init>
    void <init>(Atom.Struct.Queue,boolean) -> <init>
    java.util.Iterator iterator() -> iterator
Atom.Struct.Queue$QueueIterable$QueueIterator -> a.c.d:
    int index -> a
    boolean done -> b
    Atom.Struct.Queue$QueueIterable this$0 -> c
    void <init>(Atom.Struct.Queue$QueueIterable) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
Atom.Time.Countdown -> a.d.a:
    java.lang.String result(long,java.util.concurrent.TimeUnit) -> a
    void <clinit>() -> <clinit>
Main.Ozone -> Main.Ozone:
    void <init>() -> <init>
    void init() -> init
    void loadContent() -> loadContent
Ozone.Commands.BotInterface -> b.a.a:
    boolean init -> a
    arc.struct.Queue taskQueue -> b
    void init() -> a
    void moveTo(int,int,java.util.function.Consumer) -> a
    void update() -> d
    arc.math.geom.Vec2 getCurrentPos() -> b
    arc.math.geom.Vec2 getCurrentTilePos() -> c
    void reset() -> e
    void <clinit>() -> <clinit>
Ozone.Commands.Commands -> b.a.b:
    java.util.HashMap commandsList -> a
    boolean init -> b
    boolean falseVote -> c
    void init() -> a
    java.lang.String getTranslation(java.lang.String) -> a
    boolean call(java.lang.String) -> b
    void randomKick(java.util.ArrayList) -> a
    void infoPathfinding(java.util.ArrayList) -> b
    void infoPos(java.util.ArrayList) -> c
    void help(java.util.ArrayList) -> d
    void taskMove(java.util.ArrayList) -> e
    void chaosKick(java.util.ArrayList) -> f
    void tellUser(java.lang.String) -> c
    void lambda$chaosKick$2() -> b
    void lambda$taskMove$1(long,java.lang.Object) -> a
    float lambda$infoPathfinding$0(mindustry.world.Tile) -> a
    void <clinit>() -> <clinit>
Ozone.Commands.Commands$Command -> b.a.c:
    java.util.function.Consumer method -> a
    java.lang.String description -> b
    arc.scene.style.TextureRegionDrawable icon -> c
    void <init>(java.util.function.Consumer,java.lang.String) -> <init>
    void <init>(java.util.function.Consumer,java.lang.String,arc.scene.style.TextureRegionDrawable,boolean) -> <init>
Ozone.Commands.Task.Move -> b.a.a.a:
    arc.math.geom.Vec2 destPos -> a
    arc.math.geom.Vec2 destTilePos -> b
    mindustry.world.Tile destTile -> c
    arc.struct.Seq pathfindingCache -> d
    void <init>(float,float) -> <init>
    void <init>(arc.math.geom.Vec2) -> <init>
    void taskCompleted() -> a
    boolean isCompleted() -> b
    void update() -> c
    void setMov(arc.math.geom.Vec2) -> a
    double getCurrentDistance() -> e
    float isSafe(mindustry.world.Tile) -> a
    double distanceTo(arc.math.geom.Vec2,arc.math.geom.Vec2) -> a
Ozone.Commands.Task.Task -> b.a.a.b:
    java.util.ArrayList onTaskCompleted -> a
    int tick -> b
    int currentTick -> c
    void <init>() -> <init>
    void onTaskCompleted(java.util.function.Consumer) -> a
    void taskCompleted() -> a
    void setTick(int) -> a
    boolean tick() -> d
    boolean isCompleted() -> b
    void update() -> c
Ozone.Interface -> b.a:
    arc.struct.ObjectMap bundle -> a
    void registerWords(java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
Ozone.Main -> b.b:
    void init() -> a
    void loadContent() -> b
    void patch() -> c
Ozone.Main$1 -> b.c:
    void <init>() -> <init>
Ozone.Patch.DesktopInput -> b.b.a:
    void <init>() -> <init>
    void setMove(arc.math.geom.Vec2) -> a
Ozone.Patch.SettingsDialog -> b.b.b:
    void <init>() -> <init>
    void lambda$new$0(java.lang.reflect.Field,boolean) -> a
Ozone.Patch.SettingsDialog$1 -> b.b.c:
    void <init>(Ozone.Patch.SettingsDialog,java.lang.reflect.Field) -> <init>
Ozone.Patch.SettingsDialog$2 -> b.b.d:
    void <init>(Ozone.Patch.SettingsDialog,java.lang.reflect.Field) -> <init>
Ozone.Patch.SettingsDialog$3 -> b.b.e:
    void <init>(Ozone.Patch.SettingsDialog,java.lang.reflect.Field) -> <init>
Ozone.Patch.SettingsDialog$4 -> b.b.f:
    void <init>(Ozone.Patch.SettingsDialog,java.lang.reflect.Field) -> <init>
Ozone.Settings -> b.d:
    boolean colorPatch -> a
    boolean debugMode -> b
    void <init>() -> <init>
    void <clinit>() -> <clinit>
Ozone.UI.CommandsListFrag -> b.c.a:
    arc.scene.ui.layout.Table logs -> a
    arc.scene.ui.layout.Table content -> b
    boolean visible -> c
    float h -> d
    void <init>() -> <init>
    void toggle() -> a
    void lambda$rebuild$11(java.lang.String,java.util.Map$Entry) -> a
    void lambda$rebuild$10(java.util.Map$Entry) -> a
    java.lang.CharSequence lambda$rebuild$9(java.util.Map$Entry) -> b
Ozone.UI.CommandsListFrag$1 -> b.c.b:
    void <init>(Ozone.UI.CommandsListFrag) -> <init>
Ozone.UI.JavaEditor -> b.c.c:
    Atom.Runtime.RuntimeSource rs -> a
    Atom.Reflect.Reflect rc$4bc128b2 -> b
    java.util.ArrayList messages -> c
    java.util.HashMap color -> d
    arc.scene.ui.TextArea a -> e
    arc.scene.ui.Label label -> f
    void <init>(java.lang.String,arc.scene.ui.Dialog$DialogStyle) -> <init>
    void Run() -> a
    void setup() -> b
    void updateChat() -> c
    void lambda$setup$4() -> d
    void lambda$setup$3(arc.files.Fi) -> a
    void lambda$setup$2() -> e
    void lambda$setup$1(arc.files.Fi) -> b
    void lambda$setup$0(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicReference,java.util.regex.Pattern,arc.scene.ui.layout.Table) -> a
Ozone.UI.JavaEditor$1 -> b.c.d:
    java.lang.StringBuilder val$sb -> a
    void <init>(Ozone.UI.JavaEditor,java.lang.StringBuilder) -> <init>
    void write(int) -> write
Ozone.UI.OzoneMenu -> b.c.e:
    arc.scene.ui.TextField commandsField -> a
    java.lang.String commands -> b
    void <init>(java.lang.String,arc.scene.ui.Dialog$DialogStyle) -> <init>
    void hide() -> a
    void setup() -> b
    void lambda$setup$6(arc.scene.ui.layout.Table) -> a
    void lambda$setup$5() -> c
    void lambda$setup$4(java.lang.String) -> a
    java.lang.CharSequence lambda$setup$3() -> d
    void lambda$setup$2() -> e
    void lambda$setup$1() -> f
    void lambda$new$0(arc.input.KeyCode) -> a
com.google.common.annotations.Beta -> com.google.common.annotations.Beta:
com.google.common.annotations.GwtCompatible -> com.google.common.annotations.GwtCompatible:
    boolean serializable() -> serializable
    boolean emulated() -> emulated
com.google.common.annotations.GwtIncompatible -> com.google.common.annotations.GwtIncompatible:
    java.lang.String value() -> value
com.google.common.annotations.VisibleForTesting -> com.google.common.annotations.VisibleForTesting:
com.google.common.base.Absent -> com.google.common.base.Absent:
    com.google.common.base.Absent INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Optional withType() -> withType
    void <init>() -> <init>
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.base.AbstractIterator -> com.google.common.base.AbstractIterator:
    com.google.common.base.AbstractIterator$State state -> state
    java.lang.Object next -> next
    void <init>() -> <init>
    java.lang.Object computeNext() -> computeNext
    java.lang.Object endOfData() -> endOfData
    boolean hasNext() -> hasNext
    boolean tryToComputeNext() -> tryToComputeNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.base.AbstractIterator$1 -> com.google.common.base.AbstractIterator$1:
    int[] $SwitchMap$com$google$common$base$AbstractIterator$State -> $SwitchMap$com$google$common$base$AbstractIterator$State
    void <clinit>() -> <clinit>
com.google.common.base.AbstractIterator$State -> com.google.common.base.AbstractIterator$State:
    com.google.common.base.AbstractIterator$State READY -> READY
    com.google.common.base.AbstractIterator$State NOT_READY -> NOT_READY
    com.google.common.base.AbstractIterator$State DONE -> DONE
    com.google.common.base.AbstractIterator$State FAILED -> FAILED
    com.google.common.base.AbstractIterator$State[] $VALUES -> $VALUES
    com.google.common.base.AbstractIterator$State[] values() -> values
    com.google.common.base.AbstractIterator$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.base.Ascii -> com.google.common.base.Ascii:
    byte NUL -> NUL
    byte SOH -> SOH
    byte STX -> STX
    byte ETX -> ETX
    byte EOT -> EOT
    byte ENQ -> ENQ
    byte ACK -> ACK
    byte BEL -> BEL
    byte BS -> BS
    byte HT -> HT
    byte LF -> LF
    byte NL -> NL
    byte VT -> VT
    byte FF -> FF
    byte CR -> CR
    byte SO -> SO
    byte SI -> SI
    byte DLE -> DLE
    byte DC1 -> DC1
    byte XON -> XON
    byte DC2 -> DC2
    byte DC3 -> DC3
    byte XOFF -> XOFF
    byte DC4 -> DC4
    byte NAK -> NAK
    byte SYN -> SYN
    byte ETB -> ETB
    byte CAN -> CAN
    byte EM -> EM
    byte SUB -> SUB
    byte ESC -> ESC
    byte FS -> FS
    byte GS -> GS
    byte RS -> RS
    byte US -> US
    byte SP -> SP
    byte SPACE -> SPACE
    byte DEL -> DEL
    char MIN -> MIN
    char MAX -> MAX
    char CASE_MASK -> CASE_MASK
    void <init>() -> <init>
    java.lang.String toLowerCase(java.lang.String) -> toLowerCase
    java.lang.String toLowerCase(java.lang.CharSequence) -> toLowerCase
    char toLowerCase(char) -> toLowerCase
    java.lang.String toUpperCase(java.lang.String) -> toUpperCase
    java.lang.String toUpperCase(java.lang.CharSequence) -> toUpperCase
    char toUpperCase(char) -> toUpperCase
    boolean isLowerCase(char) -> isLowerCase
    boolean isUpperCase(char) -> isUpperCase
    java.lang.String truncate(java.lang.CharSequence,int,java.lang.String) -> truncate
    boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence) -> equalsIgnoreCase
    int getAlphaIndex(char) -> getAlphaIndex
com.google.common.base.CaseFormat -> com.google.common.base.CaseFormat:
    com.google.common.base.CaseFormat LOWER_HYPHEN -> LOWER_HYPHEN
    com.google.common.base.CaseFormat LOWER_UNDERSCORE -> LOWER_UNDERSCORE
    com.google.common.base.CaseFormat LOWER_CAMEL -> LOWER_CAMEL
    com.google.common.base.CaseFormat UPPER_CAMEL -> UPPER_CAMEL
    com.google.common.base.CaseFormat UPPER_UNDERSCORE -> UPPER_UNDERSCORE
    com.google.common.base.CharMatcher wordBoundary -> wordBoundary
    java.lang.String wordSeparator -> wordSeparator
    com.google.common.base.CaseFormat[] $VALUES -> $VALUES
    com.google.common.base.CaseFormat[] values() -> values
    com.google.common.base.CaseFormat valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    java.lang.String to(com.google.common.base.CaseFormat,java.lang.String) -> to
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> convert
    com.google.common.base.Converter converterTo(com.google.common.base.CaseFormat) -> converterTo
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
    java.lang.String normalizeFirstWord(java.lang.String) -> normalizeFirstWord
    java.lang.String firstCharOnlyToUpper(java.lang.String) -> firstCharOnlyToUpper
    void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String,com.google.common.base.CaseFormat$1) -> <init>
    java.lang.String access$100(java.lang.String) -> access$100
    void <clinit>() -> <clinit>
com.google.common.base.CaseFormat$1 -> com.google.common.base.CaseFormat$1:
    void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> convert
com.google.common.base.CaseFormat$2 -> com.google.common.base.CaseFormat$2:
    void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> convert
com.google.common.base.CaseFormat$3 -> com.google.common.base.CaseFormat$3:
    void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
com.google.common.base.CaseFormat$4 -> com.google.common.base.CaseFormat$4:
    void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
com.google.common.base.CaseFormat$5 -> com.google.common.base.CaseFormat$5:
    void <init>(java.lang.String,int,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    java.lang.String normalizeWord(java.lang.String) -> normalizeWord
    java.lang.String convert(com.google.common.base.CaseFormat,java.lang.String) -> convert
com.google.common.base.CaseFormat$StringConverter -> com.google.common.base.CaseFormat$StringConverter:
    com.google.common.base.CaseFormat sourceFormat -> sourceFormat
    com.google.common.base.CaseFormat targetFormat -> targetFormat
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.CaseFormat,com.google.common.base.CaseFormat) -> <init>
    java.lang.String doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.String) -> doBackward
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.base.CharMatcher -> com.google.common.base.CharMatcher:
    int DISTINCT_CHARS -> DISTINCT_CHARS
    com.google.common.base.CharMatcher any() -> any
    com.google.common.base.CharMatcher none() -> none
    com.google.common.base.CharMatcher whitespace() -> whitespace
    com.google.common.base.CharMatcher breakingWhitespace() -> breakingWhitespace
    com.google.common.base.CharMatcher ascii() -> ascii
    com.google.common.base.CharMatcher digit() -> digit
    com.google.common.base.CharMatcher javaDigit() -> javaDigit
    com.google.common.base.CharMatcher javaLetter() -> javaLetter
    com.google.common.base.CharMatcher javaLetterOrDigit() -> javaLetterOrDigit
    com.google.common.base.CharMatcher javaUpperCase() -> javaUpperCase
    com.google.common.base.CharMatcher javaLowerCase() -> javaLowerCase
    com.google.common.base.CharMatcher javaIsoControl() -> javaIsoControl
    com.google.common.base.CharMatcher invisible() -> invisible
    com.google.common.base.CharMatcher singleWidth() -> singleWidth
    com.google.common.base.CharMatcher is(char) -> is
    com.google.common.base.CharMatcher isNot(char) -> isNot
    com.google.common.base.CharMatcher anyOf(java.lang.CharSequence) -> anyOf
    com.google.common.base.CharMatcher noneOf(java.lang.CharSequence) -> noneOf
    com.google.common.base.CharMatcher inRange(char,char) -> inRange
    com.google.common.base.CharMatcher forPredicate(com.google.common.base.Predicate) -> forPredicate
    void <init>() -> <init>
    boolean matches(char) -> matches
    com.google.common.base.CharMatcher negate() -> negate
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher precomputed() -> precomputed
    com.google.common.base.CharMatcher precomputedInternal() -> precomputedInternal
    com.google.common.base.CharMatcher precomputedPositive(int,java.util.BitSet,java.lang.String) -> precomputedPositive
    boolean isSmall(int,int) -> isSmall
    void setBits(java.util.BitSet) -> setBits
    boolean matchesAnyOf(java.lang.CharSequence) -> matchesAnyOf
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    int indexIn(java.lang.CharSequence) -> indexIn
    int indexIn(java.lang.CharSequence,int) -> indexIn
    int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    int countIn(java.lang.CharSequence) -> countIn
    java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    java.lang.String retainFrom(java.lang.CharSequence) -> retainFrom
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    java.lang.String trimLeadingFrom(java.lang.CharSequence) -> trimLeadingFrom
    java.lang.String trimTrailingFrom(java.lang.CharSequence) -> trimTrailingFrom
    java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    java.lang.String trimAndCollapseFrom(java.lang.CharSequence,char) -> trimAndCollapseFrom
    java.lang.String finishCollapseFrom(java.lang.CharSequence,int,int,char,java.lang.StringBuilder,boolean) -> finishCollapseFrom
    boolean apply(java.lang.Character) -> apply
    java.lang.String toString() -> toString
    java.lang.String showCharacter(char) -> showCharacter
    com.google.common.base.CharMatcher$IsEither isEither(char,char) -> isEither
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
    java.lang.String access$100(char) -> access$100
com.google.common.base.CharMatcher$1 -> com.google.common.base.CharMatcher$1:
    java.lang.String val$description -> val$description
    com.google.common.base.CharMatcher this$0 -> this$0
    void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher,java.lang.String) -> <init>
    java.lang.String toString() -> toString
com.google.common.base.CharMatcher$And -> com.google.common.base.CharMatcher$And:
    com.google.common.base.CharMatcher first -> first
    com.google.common.base.CharMatcher second -> second
    void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$Any -> com.google.common.base.CharMatcher$Any:
    com.google.common.base.CharMatcher$Any INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    int indexIn(java.lang.CharSequence) -> indexIn
    int indexIn(java.lang.CharSequence,int) -> indexIn
    int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    int countIn(java.lang.CharSequence) -> countIn
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher negate() -> negate
    java.util.function.Predicate negate() -> negate
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$AnyOf -> com.google.common.base.CharMatcher$AnyOf:
    char[] chars -> chars
    void <init>(java.lang.CharSequence) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$Ascii -> com.google.common.base.CharMatcher$Ascii:
    com.google.common.base.CharMatcher$Ascii INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$BitSetMatcher -> com.google.common.base.CharMatcher$BitSetMatcher:
    java.util.BitSet table -> table
    void <init>(java.util.BitSet,java.lang.String) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    void <init>(java.util.BitSet,java.lang.String,com.google.common.base.CharMatcher$1) -> <init>
com.google.common.base.CharMatcher$BreakingWhitespace -> com.google.common.base.CharMatcher$BreakingWhitespace:
    com.google.common.base.CharMatcher INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$Digit -> com.google.common.base.CharMatcher$Digit:
    java.lang.String ZEROES -> ZEROES
    com.google.common.base.CharMatcher$Digit INSTANCE -> INSTANCE
    char[] zeroes() -> zeroes
    char[] nines() -> nines
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$FastMatcher -> com.google.common.base.CharMatcher$FastMatcher:
    void <init>() -> <init>
    com.google.common.base.CharMatcher precomputed() -> precomputed
    com.google.common.base.CharMatcher negate() -> negate
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$ForPredicate -> com.google.common.base.CharMatcher$ForPredicate:
    com.google.common.base.Predicate predicate -> predicate
    void <init>(com.google.common.base.Predicate) -> <init>
    boolean matches(char) -> matches
    boolean apply(java.lang.Character) -> apply
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$InRange -> com.google.common.base.CharMatcher$InRange:
    char startInclusive -> startInclusive
    char endInclusive -> endInclusive
    void <init>(char,char) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    java.lang.String toString() -> toString
com.google.common.base.CharMatcher$Invisible -> com.google.common.base.CharMatcher$Invisible:
    java.lang.String RANGE_STARTS -> RANGE_STARTS
    java.lang.String RANGE_ENDS -> RANGE_ENDS
    com.google.common.base.CharMatcher$Invisible INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$Is -> com.google.common.base.CharMatcher$Is:
    char match -> match
    void <init>(char) -> <init>
    boolean matches(char) -> matches
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher negate() -> negate
    void setBits(java.util.BitSet) -> setBits
    java.lang.String toString() -> toString
    java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$IsEither -> com.google.common.base.CharMatcher$IsEither:
    char match1 -> match1
    char match2 -> match2
    void <init>(char,char) -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    java.lang.String toString() -> toString
com.google.common.base.CharMatcher$IsNot -> com.google.common.base.CharMatcher$IsNot:
    char match -> match
    void <init>(char) -> <init>
    boolean matches(char) -> matches
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    void setBits(java.util.BitSet) -> setBits
    com.google.common.base.CharMatcher negate() -> negate
    java.lang.String toString() -> toString
    java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$JavaDigit -> com.google.common.base.CharMatcher$JavaDigit:
    com.google.common.base.CharMatcher$JavaDigit INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaIsoControl -> com.google.common.base.CharMatcher$JavaIsoControl:
    com.google.common.base.CharMatcher$JavaIsoControl INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaLetter -> com.google.common.base.CharMatcher$JavaLetter:
    com.google.common.base.CharMatcher$JavaLetter INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaLetterOrDigit -> com.google.common.base.CharMatcher$JavaLetterOrDigit:
    com.google.common.base.CharMatcher$JavaLetterOrDigit INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaLowerCase -> com.google.common.base.CharMatcher$JavaLowerCase:
    com.google.common.base.CharMatcher$JavaLowerCase INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$JavaUpperCase -> com.google.common.base.CharMatcher$JavaUpperCase:
    com.google.common.base.CharMatcher$JavaUpperCase INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$NamedFastMatcher -> com.google.common.base.CharMatcher$NamedFastMatcher:
    java.lang.String description -> description
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
com.google.common.base.CharMatcher$Negated -> com.google.common.base.CharMatcher$Negated:
    com.google.common.base.CharMatcher original -> original
    void <init>(com.google.common.base.CharMatcher) -> <init>
    boolean matches(char) -> matches
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    int countIn(java.lang.CharSequence) -> countIn
    void setBits(java.util.BitSet) -> setBits
    com.google.common.base.CharMatcher negate() -> negate
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$NegatedFastMatcher -> com.google.common.base.CharMatcher$NegatedFastMatcher:
    void <init>(com.google.common.base.CharMatcher) -> <init>
    com.google.common.base.CharMatcher precomputed() -> precomputed
com.google.common.base.CharMatcher$None -> com.google.common.base.CharMatcher$None:
    com.google.common.base.CharMatcher$None INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    int indexIn(java.lang.CharSequence) -> indexIn
    int indexIn(java.lang.CharSequence,int) -> indexIn
    int lastIndexIn(java.lang.CharSequence) -> lastIndexIn
    boolean matchesAllOf(java.lang.CharSequence) -> matchesAllOf
    boolean matchesNoneOf(java.lang.CharSequence) -> matchesNoneOf
    java.lang.String removeFrom(java.lang.CharSequence) -> removeFrom
    java.lang.String replaceFrom(java.lang.CharSequence,char) -> replaceFrom
    java.lang.String replaceFrom(java.lang.CharSequence,java.lang.CharSequence) -> replaceFrom
    java.lang.String collapseFrom(java.lang.CharSequence,char) -> collapseFrom
    java.lang.String trimFrom(java.lang.CharSequence) -> trimFrom
    java.lang.String trimLeadingFrom(java.lang.CharSequence) -> trimLeadingFrom
    java.lang.String trimTrailingFrom(java.lang.CharSequence) -> trimTrailingFrom
    int countIn(java.lang.CharSequence) -> countIn
    com.google.common.base.CharMatcher and(com.google.common.base.CharMatcher) -> and
    com.google.common.base.CharMatcher or(com.google.common.base.CharMatcher) -> or
    com.google.common.base.CharMatcher negate() -> negate
    java.util.function.Predicate negate() -> negate
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$Or -> com.google.common.base.CharMatcher$Or:
    com.google.common.base.CharMatcher first -> first
    com.google.common.base.CharMatcher second -> second
    void <init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher) -> <init>
    void setBits(java.util.BitSet) -> setBits
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$RangesMatcher -> com.google.common.base.CharMatcher$RangesMatcher:
    java.lang.String description -> description
    char[] rangeStarts -> rangeStarts
    char[] rangeEnds -> rangeEnds
    void <init>(java.lang.String,char[],char[]) -> <init>
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    java.util.function.Predicate negate() -> negate
com.google.common.base.CharMatcher$SingleWidth -> com.google.common.base.CharMatcher$SingleWidth:
    com.google.common.base.CharMatcher$SingleWidth INSTANCE -> INSTANCE
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.base.CharMatcher$Whitespace -> com.google.common.base.CharMatcher$Whitespace:
    java.lang.String TABLE -> TABLE
    int MULTIPLIER -> MULTIPLIER
    int SHIFT -> SHIFT
    com.google.common.base.CharMatcher$Whitespace INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
    void <clinit>() -> <clinit>
com.google.common.base.Charsets -> com.google.common.base.Charsets:
    java.nio.charset.Charset US_ASCII -> US_ASCII
    java.nio.charset.Charset ISO_8859_1 -> ISO_8859_1
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.nio.charset.Charset UTF_16BE -> UTF_16BE
    java.nio.charset.Charset UTF_16LE -> UTF_16LE
    java.nio.charset.Charset UTF_16 -> UTF_16
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.base.CommonMatcher -> com.google.common.base.CommonMatcher:
    void <init>() -> <init>
    boolean matches() -> matches
    boolean find() -> find
    boolean find(int) -> find
    java.lang.String replaceAll(java.lang.String) -> replaceAll
    int end() -> end
    int start() -> start
com.google.common.base.CommonPattern -> com.google.common.base.CommonPattern:
    void <init>() -> <init>
    com.google.common.base.CommonMatcher matcher(java.lang.CharSequence) -> matcher
    java.lang.String pattern() -> pattern
    int flags() -> flags
    java.lang.String toString() -> toString
    com.google.common.base.CommonPattern compile(java.lang.String) -> compile
    boolean isPcreLike() -> isPcreLike
com.google.common.base.Converter -> com.google.common.base.Converter:
    boolean handleNullAutomatically -> handleNullAutomatically
    com.google.common.base.Converter reverse -> reverse
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object convert(java.lang.Object) -> convert
    java.lang.Object correctedDoForward(java.lang.Object) -> correctedDoForward
    java.lang.Object correctedDoBackward(java.lang.Object) -> correctedDoBackward
    java.lang.Iterable convertAll(java.lang.Iterable) -> convertAll
    com.google.common.base.Converter reverse() -> reverse
    com.google.common.base.Converter andThen(com.google.common.base.Converter) -> andThen
    com.google.common.base.Converter doAndThen(com.google.common.base.Converter) -> doAndThen
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    com.google.common.base.Converter from(com.google.common.base.Function,com.google.common.base.Function) -> from
    com.google.common.base.Converter identity() -> identity
com.google.common.base.Converter$1 -> com.google.common.base.Converter$1:
    java.lang.Iterable val$fromIterable -> val$fromIterable
    com.google.common.base.Converter this$0 -> this$0
    void <init>(com.google.common.base.Converter,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.base.Converter$1$1 -> com.google.common.base.Converter$1$1:
    java.util.Iterator fromIterator -> fromIterator
    com.google.common.base.Converter$1 this$1 -> this$1
    void <init>(com.google.common.base.Converter$1) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.base.Converter$ConverterComposition -> com.google.common.base.Converter$ConverterComposition:
    com.google.common.base.Converter first -> first
    com.google.common.base.Converter second -> second
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Converter,com.google.common.base.Converter) -> <init>
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object correctedDoForward(java.lang.Object) -> correctedDoForward
    java.lang.Object correctedDoBackward(java.lang.Object) -> correctedDoBackward
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Converter$FunctionBasedConverter -> com.google.common.base.Converter$FunctionBasedConverter:
    com.google.common.base.Function forwardFunction -> forwardFunction
    com.google.common.base.Function backwardFunction -> backwardFunction
    void <init>(com.google.common.base.Function,com.google.common.base.Function) -> <init>
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(com.google.common.base.Function,com.google.common.base.Function,com.google.common.base.Converter$1) -> <init>
com.google.common.base.Converter$IdentityConverter -> com.google.common.base.Converter$IdentityConverter:
    com.google.common.base.Converter$IdentityConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    com.google.common.base.Converter$IdentityConverter reverse() -> reverse
    com.google.common.base.Converter doAndThen(com.google.common.base.Converter) -> doAndThen
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    com.google.common.base.Converter reverse() -> reverse
    void <clinit>() -> <clinit>
com.google.common.base.Converter$ReverseConverter -> com.google.common.base.Converter$ReverseConverter:
    com.google.common.base.Converter original -> original
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Converter) -> <init>
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object correctedDoForward(java.lang.Object) -> correctedDoForward
    java.lang.Object correctedDoBackward(java.lang.Object) -> correctedDoBackward
    com.google.common.base.Converter reverse() -> reverse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Defaults -> com.google.common.base.Defaults:
    java.lang.Double DOUBLE_DEFAULT -> DOUBLE_DEFAULT
    java.lang.Float FLOAT_DEFAULT -> FLOAT_DEFAULT
    void <init>() -> <init>
    java.lang.Object defaultValue(java.lang.Class) -> defaultValue
    void <clinit>() -> <clinit>
com.google.common.base.Enums -> com.google.common.base.Enums:
    java.util.Map enumConstantCache -> enumConstantCache
    void <init>() -> <init>
    java.lang.reflect.Field getField(java.lang.Enum) -> getField
    com.google.common.base.Optional getIfPresent(java.lang.Class,java.lang.String) -> getIfPresent
    java.util.Map populateCache(java.lang.Class) -> populateCache
    java.util.Map getEnumConstants(java.lang.Class) -> getEnumConstants
    com.google.common.base.Converter stringConverter(java.lang.Class) -> stringConverter
    void <clinit>() -> <clinit>
com.google.common.base.Enums$StringConverter -> com.google.common.base.Enums$StringConverter:
    java.lang.Class enumClass -> enumClass
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Class) -> <init>
    java.lang.Enum doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Enum) -> doBackward
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
com.google.common.base.Equivalence -> com.google.common.base.Equivalence:
    void <init>() -> <init>
    boolean equivalent(java.lang.Object,java.lang.Object) -> equivalent
    boolean test(java.lang.Object,java.lang.Object) -> test
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int hash(java.lang.Object) -> hash
    int doHash(java.lang.Object) -> doHash
    com.google.common.base.Equivalence onResultOf(com.google.common.base.Function) -> onResultOf
    com.google.common.base.Equivalence$Wrapper wrap(java.lang.Object) -> wrap
    com.google.common.base.Equivalence pairwise() -> pairwise
    com.google.common.base.Predicate equivalentTo(java.lang.Object) -> equivalentTo
    com.google.common.base.Equivalence equals() -> equals
    com.google.common.base.Equivalence identity() -> identity
com.google.common.base.Equivalence$1 -> com.google.common.base.Equivalence$1:
com.google.common.base.Equivalence$Equals -> com.google.common.base.Equivalence$Equals:
    com.google.common.base.Equivalence$Equals INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int doHash(java.lang.Object) -> doHash
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.base.Equivalence$EquivalentToPredicate -> com.google.common.base.Equivalence$EquivalentToPredicate:
    com.google.common.base.Equivalence equivalence -> equivalence
    java.lang.Object target -> target
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Equivalence,java.lang.Object) -> <init>
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Equivalence$Identity -> com.google.common.base.Equivalence$Identity:
    com.google.common.base.Equivalence$Identity INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int doHash(java.lang.Object) -> doHash
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.base.Equivalence$Wrapper -> com.google.common.base.Equivalence$Wrapper:
    com.google.common.base.Equivalence equivalence -> equivalence
    java.lang.Object reference -> reference
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Equivalence,java.lang.Object) -> <init>
    java.lang.Object get() -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(com.google.common.base.Equivalence,java.lang.Object,com.google.common.base.Equivalence$1) -> <init>
com.google.common.base.ExtraObjectsMethodsForWeb -> com.google.common.base.ExtraObjectsMethodsForWeb:
    void <init>() -> <init>
com.google.common.base.FinalizablePhantomReference -> com.google.common.base.FinalizablePhantomReference:
    void <init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue) -> <init>
com.google.common.base.FinalizableReference -> com.google.common.base.FinalizableReference:
    void finalizeReferent() -> finalizeReferent
com.google.common.base.FinalizableReferenceQueue -> com.google.common.base.FinalizableReferenceQueue:
    java.util.logging.Logger logger -> logger
    java.lang.String FINALIZER_CLASS_NAME -> FINALIZER_CLASS_NAME
    java.lang.reflect.Method startFinalizer -> startFinalizer
    java.lang.ref.ReferenceQueue queue -> queue
    java.lang.ref.PhantomReference frqRef -> frqRef
    boolean threadStarted -> threadStarted
    void <init>() -> <init>
    void close() -> close
    void cleanUp() -> cleanUp
    java.lang.Class loadFinalizer(com.google.common.base.FinalizableReferenceQueue$FinalizerLoader[]) -> loadFinalizer
    java.lang.reflect.Method getStartFinalizer(java.lang.Class) -> getStartFinalizer
    java.util.logging.Logger access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.base.FinalizableReferenceQueue$DecoupledLoader -> com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:
    java.lang.String LOADING_ERROR -> LOADING_ERROR
    void <init>() -> <init>
    java.lang.Class loadFinalizer() -> loadFinalizer
    java.net.URL getBaseUrl() -> getBaseUrl
    java.net.URLClassLoader newLoader(java.net.URL) -> newLoader
com.google.common.base.FinalizableReferenceQueue$DirectLoader -> com.google.common.base.FinalizableReferenceQueue$DirectLoader:
    void <init>() -> <init>
    java.lang.Class loadFinalizer() -> loadFinalizer
com.google.common.base.FinalizableReferenceQueue$FinalizerLoader -> com.google.common.base.FinalizableReferenceQueue$FinalizerLoader:
    java.lang.Class loadFinalizer() -> loadFinalizer
com.google.common.base.FinalizableReferenceQueue$SystemLoader -> com.google.common.base.FinalizableReferenceQueue$SystemLoader:
    boolean disabled -> disabled
    void <init>() -> <init>
    java.lang.Class loadFinalizer() -> loadFinalizer
com.google.common.base.FinalizableSoftReference -> com.google.common.base.FinalizableSoftReference:
    void <init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue) -> <init>
com.google.common.base.FinalizableWeakReference -> com.google.common.base.FinalizableWeakReference:
    void <init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue) -> <init>
com.google.common.base.Function -> com.google.common.base.Function:
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
com.google.common.base.FunctionalEquivalence -> com.google.common.base.FunctionalEquivalence:
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Function function -> function
    com.google.common.base.Equivalence resultEquivalence -> resultEquivalence
    void <init>(com.google.common.base.Function,com.google.common.base.Equivalence) -> <init>
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
    int doHash(java.lang.Object) -> doHash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions -> com.google.common.base.Functions:
    void <init>() -> <init>
    com.google.common.base.Function toStringFunction() -> toStringFunction
    com.google.common.base.Function identity() -> identity
    com.google.common.base.Function forMap(java.util.Map) -> forMap
    com.google.common.base.Function forMap(java.util.Map,java.lang.Object) -> forMap
    com.google.common.base.Function compose(com.google.common.base.Function,com.google.common.base.Function) -> compose
    com.google.common.base.Function forPredicate(com.google.common.base.Predicate) -> forPredicate
    com.google.common.base.Function constant(java.lang.Object) -> constant
    com.google.common.base.Function forSupplier(com.google.common.base.Supplier) -> forSupplier
com.google.common.base.Functions$1 -> com.google.common.base.Functions$1:
com.google.common.base.Functions$ConstantFunction -> com.google.common.base.Functions$ConstantFunction:
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions$ForMapWithDefault -> com.google.common.base.Functions$ForMapWithDefault:
    java.util.Map map -> map
    java.lang.Object defaultValue -> defaultValue
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,java.lang.Object) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions$FunctionComposition -> com.google.common.base.Functions$FunctionComposition:
    com.google.common.base.Function g -> g
    com.google.common.base.Function f -> f
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Function,com.google.common.base.Function) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions$FunctionForMapNoDefault -> com.google.common.base.Functions$FunctionForMapNoDefault:
    java.util.Map map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Functions$IdentityFunction -> com.google.common.base.Functions$IdentityFunction:
    com.google.common.base.Functions$IdentityFunction INSTANCE -> INSTANCE
    com.google.common.base.Functions$IdentityFunction[] $VALUES -> $VALUES
    com.google.common.base.Functions$IdentityFunction[] values() -> values
    com.google.common.base.Functions$IdentityFunction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.base.Functions$PredicateFunction -> com.google.common.base.Functions$PredicateFunction:
    com.google.common.base.Predicate predicate -> predicate
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Predicate) -> <init>
    java.lang.Boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object apply(java.lang.Object) -> apply
    void <init>(com.google.common.base.Predicate,com.google.common.base.Functions$1) -> <init>
com.google.common.base.Functions$SupplierFunction -> com.google.common.base.Functions$SupplierFunction:
    com.google.common.base.Supplier supplier -> supplier
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Supplier) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(com.google.common.base.Supplier,com.google.common.base.Functions$1) -> <init>
com.google.common.base.Functions$ToStringFunction -> com.google.common.base.Functions$ToStringFunction:
    com.google.common.base.Functions$ToStringFunction INSTANCE -> INSTANCE
    com.google.common.base.Functions$ToStringFunction[] $VALUES -> $VALUES
    com.google.common.base.Functions$ToStringFunction[] values() -> values
    com.google.common.base.Functions$ToStringFunction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
    java.lang.Object apply(java.lang.Object) -> apply
    void <clinit>() -> <clinit>
com.google.common.base.JdkPattern -> com.google.common.base.JdkPattern:
    java.util.regex.Pattern pattern -> pattern
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.regex.Pattern) -> <init>
    com.google.common.base.CommonMatcher matcher(java.lang.CharSequence) -> matcher
    java.lang.String pattern() -> pattern
    int flags() -> flags
    java.lang.String toString() -> toString
com.google.common.base.JdkPattern$JdkMatcher -> com.google.common.base.JdkPattern$JdkMatcher:
    java.util.regex.Matcher matcher -> matcher
    void <init>(java.util.regex.Matcher) -> <init>
    boolean matches() -> matches
    boolean find() -> find
    boolean find(int) -> find
    java.lang.String replaceAll(java.lang.String) -> replaceAll
    int end() -> end
    int start() -> start
com.google.common.base.Joiner -> com.google.common.base.Joiner:
    java.lang.String separator -> separator
    com.google.common.base.Joiner on(java.lang.String) -> on
    com.google.common.base.Joiner on(char) -> on
    void <init>(java.lang.String) -> <init>
    void <init>(com.google.common.base.Joiner) -> <init>
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Iterable) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Object[]) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Object,java.lang.Object,java.lang.Object[]) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Object[]) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Object,java.lang.Object,java.lang.Object[]) -> appendTo
    java.lang.String join(java.lang.Iterable) -> join
    java.lang.String join(java.util.Iterator) -> join
    java.lang.String join(java.lang.Object[]) -> join
    java.lang.String join(java.lang.Object,java.lang.Object,java.lang.Object[]) -> join
    com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    com.google.common.base.Joiner skipNulls() -> skipNulls
    com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(char) -> withKeyValueSeparator
    com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
    java.lang.CharSequence toString(java.lang.Object) -> toString
    java.lang.Iterable iterable(java.lang.Object,java.lang.Object,java.lang.Object[]) -> iterable
    void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner$1) -> <init>
    java.lang.String access$100(com.google.common.base.Joiner) -> access$100
com.google.common.base.Joiner$1 -> com.google.common.base.Joiner$1:
    java.lang.String val$nullText -> val$nullText
    com.google.common.base.Joiner this$0 -> this$0
    void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String) -> <init>
    java.lang.CharSequence toString(java.lang.Object) -> toString
    com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    com.google.common.base.Joiner skipNulls() -> skipNulls
com.google.common.base.Joiner$2 -> com.google.common.base.Joiner$2:
    com.google.common.base.Joiner this$0 -> this$0
    void <init>(com.google.common.base.Joiner,com.google.common.base.Joiner) -> <init>
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    com.google.common.base.Joiner useForNull(java.lang.String) -> useForNull
    com.google.common.base.Joiner$MapJoiner withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
com.google.common.base.Joiner$3 -> com.google.common.base.Joiner$3:
    java.lang.Object[] val$rest -> val$rest
    java.lang.Object val$first -> val$first
    java.lang.Object val$second -> val$second
    void <init>(java.lang.Object[],java.lang.Object,java.lang.Object) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.base.Joiner$MapJoiner -> com.google.common.base.Joiner$MapJoiner:
    com.google.common.base.Joiner joiner -> joiner
    java.lang.String keyValueSeparator -> keyValueSeparator
    void <init>(com.google.common.base.Joiner,java.lang.String) -> <init>
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Map) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Map) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.lang.Iterable) -> appendTo
    java.lang.Appendable appendTo(java.lang.Appendable,java.util.Iterator) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.lang.Iterable) -> appendTo
    java.lang.StringBuilder appendTo(java.lang.StringBuilder,java.util.Iterator) -> appendTo
    java.lang.String join(java.util.Map) -> join
    java.lang.String join(java.lang.Iterable) -> join
    java.lang.String join(java.util.Iterator) -> join
    com.google.common.base.Joiner$MapJoiner useForNull(java.lang.String) -> useForNull
    void <init>(com.google.common.base.Joiner,java.lang.String,com.google.common.base.Joiner$1) -> <init>
com.google.common.base.MoreObjects -> com.google.common.base.MoreObjects:
    java.lang.Object firstNonNull(java.lang.Object,java.lang.Object) -> firstNonNull
    com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object) -> toStringHelper
    com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Class) -> toStringHelper
    com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.String) -> toStringHelper
    void <init>() -> <init>
com.google.common.base.MoreObjects$1 -> com.google.common.base.MoreObjects$1:
com.google.common.base.MoreObjects$ToStringHelper -> com.google.common.base.MoreObjects$ToStringHelper:
    java.lang.String className -> className
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderHead -> holderHead
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderTail -> holderTail
    boolean omitNullValues -> omitNullValues
    void <init>(java.lang.String) -> <init>
    com.google.common.base.MoreObjects$ToStringHelper omitNullValues() -> omitNullValues
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,boolean) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,char) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,double) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,float) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,int) -> add
    com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,long) -> add
    com.google.common.base.MoreObjects$ToStringHelper addValue(java.lang.Object) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(boolean) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(char) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(double) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(float) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(int) -> addValue
    com.google.common.base.MoreObjects$ToStringHelper addValue(long) -> addValue
    java.lang.String toString() -> toString
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder addHolder() -> addHolder
    com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.Object) -> addHolder
    com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.String,java.lang.Object) -> addHolder
    void <init>(java.lang.String,com.google.common.base.MoreObjects$1) -> <init>
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder -> com.google.common.base.MoreObjects$ToStringHelper$ValueHolder:
    java.lang.String name -> name
    java.lang.Object value -> value
    com.google.common.base.MoreObjects$ToStringHelper$ValueHolder next -> next
    void <init>() -> <init>
    void <init>(com.google.common.base.MoreObjects$1) -> <init>
com.google.common.base.Objects -> com.google.common.base.Objects:
    void <init>() -> <init>
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    int hashCode(java.lang.Object[]) -> hashCode
com.google.common.base.Optional -> com.google.common.base.Optional:
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Optional absent() -> absent
    com.google.common.base.Optional of(java.lang.Object) -> of
    com.google.common.base.Optional fromNullable(java.lang.Object) -> fromNullable
    com.google.common.base.Optional fromJavaUtil(java.util.Optional) -> fromJavaUtil
    java.util.Optional toJavaUtil(com.google.common.base.Optional) -> toJavaUtil
    java.util.Optional toJavaUtil() -> toJavaUtil
    void <init>() -> <init>
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Iterable presentInstances(java.lang.Iterable) -> presentInstances
com.google.common.base.Optional$1 -> com.google.common.base.Optional$1:
    java.lang.Iterable val$optionals -> val$optionals
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.base.Optional$1$1 -> com.google.common.base.Optional$1$1:
    java.util.Iterator iterator -> iterator
    com.google.common.base.Optional$1 this$0 -> this$0
    void <init>(com.google.common.base.Optional$1) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.base.PairwiseEquivalence -> com.google.common.base.PairwiseEquivalence:
    com.google.common.base.Equivalence elementEquivalence -> elementEquivalence
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Equivalence) -> <init>
    boolean doEquivalent(java.lang.Iterable,java.lang.Iterable) -> doEquivalent
    int doHash(java.lang.Iterable) -> doHash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int doHash(java.lang.Object) -> doHash
    boolean doEquivalent(java.lang.Object,java.lang.Object) -> doEquivalent
com.google.common.base.PatternCompiler -> com.google.common.base.PatternCompiler:
    com.google.common.base.CommonPattern compile(java.lang.String) -> compile
    boolean isPcreLike() -> isPcreLike
com.google.common.base.Platform -> com.google.common.base.Platform:
    java.util.logging.Logger logger -> logger
    com.google.common.base.PatternCompiler patternCompiler -> patternCompiler
    void <init>() -> <init>
    long systemNanoTime() -> systemNanoTime
    com.google.common.base.CharMatcher precomputeCharMatcher(com.google.common.base.CharMatcher) -> precomputeCharMatcher
    com.google.common.base.Optional getEnumIfPresent(java.lang.Class,java.lang.String) -> getEnumIfPresent
    java.lang.String formatCompact4Digits(double) -> formatCompact4Digits
    boolean stringIsNullOrEmpty(java.lang.String) -> stringIsNullOrEmpty
    java.lang.String nullToEmpty(java.lang.String) -> nullToEmpty
    java.lang.String emptyToNull(java.lang.String) -> emptyToNull
    com.google.common.base.CommonPattern compilePattern(java.lang.String) -> compilePattern
    boolean patternCompilerIsPcreLike() -> patternCompilerIsPcreLike
    com.google.common.base.PatternCompiler loadPatternCompiler() -> loadPatternCompiler
    void logPatternCompilerError(java.util.ServiceConfigurationError) -> logPatternCompilerError
    void <clinit>() -> <clinit>
com.google.common.base.Platform$1 -> com.google.common.base.Platform$1:
com.google.common.base.Platform$JdkPatternCompiler -> com.google.common.base.Platform$JdkPatternCompiler:
    void <init>() -> <init>
    com.google.common.base.CommonPattern compile(java.lang.String) -> compile
    boolean isPcreLike() -> isPcreLike
    void <init>(com.google.common.base.Platform$1) -> <init>
com.google.common.base.Preconditions -> com.google.common.base.Preconditions:
    void <init>() -> <init>
    void checkArgument(boolean) -> checkArgument
    void checkArgument(boolean,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object[]) -> checkArgument
    void checkArgument(boolean,java.lang.String,char) -> checkArgument
    void checkArgument(boolean,java.lang.String,int) -> checkArgument
    void checkArgument(boolean,java.lang.String,long) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,char,char) -> checkArgument
    void checkArgument(boolean,java.lang.String,char,int) -> checkArgument
    void checkArgument(boolean,java.lang.String,char,long) -> checkArgument
    void checkArgument(boolean,java.lang.String,char,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,int,char) -> checkArgument
    void checkArgument(boolean,java.lang.String,int,int) -> checkArgument
    void checkArgument(boolean,java.lang.String,int,long) -> checkArgument
    void checkArgument(boolean,java.lang.String,int,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,long,char) -> checkArgument
    void checkArgument(boolean,java.lang.String,long,int) -> checkArgument
    void checkArgument(boolean,java.lang.String,long,long) -> checkArgument
    void checkArgument(boolean,java.lang.String,long,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object,char) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object,int) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object,long) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> checkArgument
    void checkArgument(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> checkArgument
    void checkState(boolean) -> checkState
    void checkState(boolean,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object[]) -> checkState
    void checkState(boolean,java.lang.String,char) -> checkState
    void checkState(boolean,java.lang.String,int) -> checkState
    void checkState(boolean,java.lang.String,long) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,char,char) -> checkState
    void checkState(boolean,java.lang.String,char,int) -> checkState
    void checkState(boolean,java.lang.String,char,long) -> checkState
    void checkState(boolean,java.lang.String,char,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,int,char) -> checkState
    void checkState(boolean,java.lang.String,int,int) -> checkState
    void checkState(boolean,java.lang.String,int,long) -> checkState
    void checkState(boolean,java.lang.String,int,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,long,char) -> checkState
    void checkState(boolean,java.lang.String,long,int) -> checkState
    void checkState(boolean,java.lang.String,long,long) -> checkState
    void checkState(boolean,java.lang.String,long,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object,char) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object,int) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object,long) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> checkState
    void checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> checkState
    java.lang.Object checkNotNull(java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char,char) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char,int) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char,long) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,char,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int,char) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int,int) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int,long) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,int,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long,char) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long,int) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long,long) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,char) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,int) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,long) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> checkNotNull
    java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> checkNotNull
    int checkElementIndex(int,int) -> checkElementIndex
    int checkElementIndex(int,int,java.lang.String) -> checkElementIndex
    java.lang.String badElementIndex(int,int,java.lang.String) -> badElementIndex
    int checkPositionIndex(int,int) -> checkPositionIndex
    int checkPositionIndex(int,int,java.lang.String) -> checkPositionIndex
    java.lang.String badPositionIndex(int,int,java.lang.String) -> badPositionIndex
    void checkPositionIndexes(int,int,int) -> checkPositionIndexes
    java.lang.String badPositionIndexes(int,int,int) -> badPositionIndexes
com.google.common.base.Predicate -> com.google.common.base.Predicate:
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    boolean test(java.lang.Object) -> test
com.google.common.base.Predicates -> com.google.common.base.Predicates:
    void <init>() -> <init>
    com.google.common.base.Predicate alwaysTrue() -> alwaysTrue
    com.google.common.base.Predicate alwaysFalse() -> alwaysFalse
    com.google.common.base.Predicate isNull() -> isNull
    com.google.common.base.Predicate notNull() -> notNull
    com.google.common.base.Predicate not(com.google.common.base.Predicate) -> not
    com.google.common.base.Predicate and(java.lang.Iterable) -> and
    com.google.common.base.Predicate and(com.google.common.base.Predicate[]) -> and
    com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate) -> and
    com.google.common.base.Predicate or(java.lang.Iterable) -> or
    com.google.common.base.Predicate or(com.google.common.base.Predicate[]) -> or
    com.google.common.base.Predicate or(com.google.common.base.Predicate,com.google.common.base.Predicate) -> or
    com.google.common.base.Predicate equalTo(java.lang.Object) -> equalTo
    com.google.common.base.Predicate instanceOf(java.lang.Class) -> instanceOf
    com.google.common.base.Predicate subtypeOf(java.lang.Class) -> subtypeOf
    com.google.common.base.Predicate in(java.util.Collection) -> in
    com.google.common.base.Predicate compose(com.google.common.base.Predicate,com.google.common.base.Function) -> compose
    com.google.common.base.Predicate containsPattern(java.lang.String) -> containsPattern
    com.google.common.base.Predicate contains(java.util.regex.Pattern) -> contains
    java.lang.String toStringHelper(java.lang.String,java.lang.Iterable) -> toStringHelper
    java.util.List asList(com.google.common.base.Predicate,com.google.common.base.Predicate) -> asList
    java.util.List defensiveCopy(java.lang.Object[]) -> defensiveCopy
    java.util.List defensiveCopy(java.lang.Iterable) -> defensiveCopy
    java.lang.String access$800(java.lang.String,java.lang.Iterable) -> access$800
com.google.common.base.Predicates$1 -> com.google.common.base.Predicates$1:
com.google.common.base.Predicates$AndPredicate -> com.google.common.base.Predicates$AndPredicate:
    java.util.List components -> components
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(java.util.List,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$CompositionPredicate -> com.google.common.base.Predicates$CompositionPredicate:
    com.google.common.base.Predicate p -> p
    com.google.common.base.Function f -> f
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Predicate,com.google.common.base.Function) -> <init>
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(com.google.common.base.Predicate,com.google.common.base.Function,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$ContainsPatternFromStringPredicate -> com.google.common.base.Predicates$ContainsPatternFromStringPredicate:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ContainsPatternPredicate -> com.google.common.base.Predicates$ContainsPatternPredicate:
    com.google.common.base.CommonPattern pattern -> pattern
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.CommonPattern) -> <init>
    boolean apply(java.lang.CharSequence) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.base.Predicates$InPredicate -> com.google.common.base.Predicates$InPredicate:
    java.util.Collection target -> target
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Collection) -> <init>
    boolean apply(java.lang.Object) -> apply
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <init>(java.util.Collection,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$InstanceOfPredicate -> com.google.common.base.Predicates$InstanceOfPredicate:
    java.lang.Class clazz -> clazz
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Class) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(java.lang.Class,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$IsEqualToPredicate -> com.google.common.base.Predicates$IsEqualToPredicate:
    java.lang.Object target -> target
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(java.lang.Object,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$NotPredicate -> com.google.common.base.Predicates$NotPredicate:
    com.google.common.base.Predicate predicate -> predicate
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Predicate) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate -> com.google.common.base.Predicates$ObjectPredicate:
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_TRUE -> ALWAYS_TRUE
    com.google.common.base.Predicates$ObjectPredicate ALWAYS_FALSE -> ALWAYS_FALSE
    com.google.common.base.Predicates$ObjectPredicate IS_NULL -> IS_NULL
    com.google.common.base.Predicates$ObjectPredicate NOT_NULL -> NOT_NULL
    com.google.common.base.Predicates$ObjectPredicate[] $VALUES -> $VALUES
    com.google.common.base.Predicates$ObjectPredicate[] values() -> values
    com.google.common.base.Predicates$ObjectPredicate valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Predicate withNarrowedType() -> withNarrowedType
    void <init>(java.lang.String,int,com.google.common.base.Predicates$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.base.Predicates$ObjectPredicate$1 -> com.google.common.base.Predicates$ObjectPredicate$1:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate$2 -> com.google.common.base.Predicates$ObjectPredicate$2:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate$3 -> com.google.common.base.Predicates$ObjectPredicate$3:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
com.google.common.base.Predicates$ObjectPredicate$4 -> com.google.common.base.Predicates$ObjectPredicate$4:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.lang.Object) -> apply
    java.lang.String toString() -> toString
com.google.common.base.Predicates$OrPredicate -> com.google.common.base.Predicates$OrPredicate:
    java.util.List components -> components
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    boolean apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(java.util.List,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Predicates$SubtypeOfPredicate -> com.google.common.base.Predicates$SubtypeOfPredicate:
    java.lang.Class clazz -> clazz
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Class) -> <init>
    boolean apply(java.lang.Class) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
    void <init>(java.lang.Class,com.google.common.base.Predicates$1) -> <init>
com.google.common.base.Present -> com.google.common.base.Present:
    java.lang.Object reference -> reference
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object) -> <init>
    boolean isPresent() -> isPresent
    java.lang.Object get() -> get
    java.lang.Object or(java.lang.Object) -> or
    com.google.common.base.Optional or(com.google.common.base.Optional) -> or
    java.lang.Object or(com.google.common.base.Supplier) -> or
    java.lang.Object orNull() -> orNull
    java.util.Set asSet() -> asSet
    com.google.common.base.Optional transform(com.google.common.base.Function) -> transform
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.SmallCharMatcher -> com.google.common.base.SmallCharMatcher:
    int MAX_SIZE -> MAX_SIZE
    char[] table -> table
    boolean containsZero -> containsZero
    long filter -> filter
    int C1 -> C1
    int C2 -> C2
    double DESIRED_LOAD_FACTOR -> DESIRED_LOAD_FACTOR
    void <init>(char[],long,boolean,java.lang.String) -> <init>
    int smear(int) -> smear
    boolean checkFilter(int) -> checkFilter
    int chooseTableSize(int) -> chooseTableSize
    com.google.common.base.CharMatcher from(java.util.BitSet,java.lang.String) -> from
    boolean matches(char) -> matches
    void setBits(java.util.BitSet) -> setBits
com.google.common.base.Splitter -> com.google.common.base.Splitter:
    com.google.common.base.CharMatcher trimmer -> trimmer
    boolean omitEmptyStrings -> omitEmptyStrings
    com.google.common.base.Splitter$Strategy strategy -> strategy
    int limit -> limit
    void <init>(com.google.common.base.Splitter$Strategy) -> <init>
    void <init>(com.google.common.base.Splitter$Strategy,boolean,com.google.common.base.CharMatcher,int) -> <init>
    com.google.common.base.Splitter on(char) -> on
    com.google.common.base.Splitter on(com.google.common.base.CharMatcher) -> on
    com.google.common.base.Splitter on(java.lang.String) -> on
    com.google.common.base.Splitter on(java.util.regex.Pattern) -> on
    com.google.common.base.Splitter on(com.google.common.base.CommonPattern) -> on
    com.google.common.base.Splitter onPattern(java.lang.String) -> onPattern
    com.google.common.base.Splitter fixedLength(int) -> fixedLength
    com.google.common.base.Splitter omitEmptyStrings() -> omitEmptyStrings
    com.google.common.base.Splitter limit(int) -> limit
    com.google.common.base.Splitter trimResults() -> trimResults
    com.google.common.base.Splitter trimResults(com.google.common.base.CharMatcher) -> trimResults
    java.lang.Iterable split(java.lang.CharSequence) -> split
    java.util.Iterator splittingIterator(java.lang.CharSequence) -> splittingIterator
    java.util.List splitToList(java.lang.CharSequence) -> splitToList
    com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(java.lang.String) -> withKeyValueSeparator
    com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(char) -> withKeyValueSeparator
    com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(com.google.common.base.Splitter) -> withKeyValueSeparator
    java.util.Iterator access$000(com.google.common.base.Splitter,java.lang.CharSequence) -> access$000
    com.google.common.base.CharMatcher access$200(com.google.common.base.Splitter) -> access$200
    boolean access$300(com.google.common.base.Splitter) -> access$300
    int access$400(com.google.common.base.Splitter) -> access$400
com.google.common.base.Splitter$1 -> com.google.common.base.Splitter$1:
    com.google.common.base.CharMatcher val$separatorMatcher -> val$separatorMatcher
    void <init>(com.google.common.base.CharMatcher) -> <init>
    com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.Splitter$1$1 -> com.google.common.base.Splitter$1$1:
    com.google.common.base.Splitter$1 this$0 -> this$0
    void <init>(com.google.common.base.Splitter$1,com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
com.google.common.base.Splitter$2 -> com.google.common.base.Splitter$2:
    java.lang.String val$separator -> val$separator
    void <init>(java.lang.String) -> <init>
    com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.Splitter$2$1 -> com.google.common.base.Splitter$2$1:
    com.google.common.base.Splitter$2 this$0 -> this$0
    void <init>(com.google.common.base.Splitter$2,com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
com.google.common.base.Splitter$3 -> com.google.common.base.Splitter$3:
    com.google.common.base.CommonPattern val$separatorPattern -> val$separatorPattern
    void <init>(com.google.common.base.CommonPattern) -> <init>
    com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.Splitter$3$1 -> com.google.common.base.Splitter$3$1:
    com.google.common.base.CommonMatcher val$matcher -> val$matcher
    com.google.common.base.Splitter$3 this$0 -> this$0
    void <init>(com.google.common.base.Splitter$3,com.google.common.base.Splitter,java.lang.CharSequence,com.google.common.base.CommonMatcher) -> <init>
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
com.google.common.base.Splitter$4 -> com.google.common.base.Splitter$4:
    int val$length -> val$length
    void <init>(int) -> <init>
    com.google.common.base.Splitter$SplittingIterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.Splitter$4$1 -> com.google.common.base.Splitter$4$1:
    com.google.common.base.Splitter$4 this$0 -> this$0
    void <init>(com.google.common.base.Splitter$4,com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
com.google.common.base.Splitter$5 -> com.google.common.base.Splitter$5:
    java.lang.CharSequence val$sequence -> val$sequence
    com.google.common.base.Splitter this$0 -> this$0
    void <init>(com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.google.common.base.Splitter$MapSplitter -> com.google.common.base.Splitter$MapSplitter:
    java.lang.String INVALID_ENTRY_MESSAGE -> INVALID_ENTRY_MESSAGE
    com.google.common.base.Splitter outerSplitter -> outerSplitter
    com.google.common.base.Splitter entrySplitter -> entrySplitter
    void <init>(com.google.common.base.Splitter,com.google.common.base.Splitter) -> <init>
    java.util.Map split(java.lang.CharSequence) -> split
    void <init>(com.google.common.base.Splitter,com.google.common.base.Splitter,com.google.common.base.Splitter$1) -> <init>
com.google.common.base.Splitter$SplittingIterator -> com.google.common.base.Splitter$SplittingIterator:
    java.lang.CharSequence toSplit -> toSplit
    com.google.common.base.CharMatcher trimmer -> trimmer
    boolean omitEmptyStrings -> omitEmptyStrings
    int offset -> offset
    int limit -> limit
    int separatorStart(int) -> separatorStart
    int separatorEnd(int) -> separatorEnd
    void <init>(com.google.common.base.Splitter,java.lang.CharSequence) -> <init>
    java.lang.String computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.base.Splitter$Strategy -> com.google.common.base.Splitter$Strategy:
    java.util.Iterator iterator(com.google.common.base.Splitter,java.lang.CharSequence) -> iterator
com.google.common.base.StandardSystemProperty -> com.google.common.base.StandardSystemProperty:
    com.google.common.base.StandardSystemProperty JAVA_VERSION -> JAVA_VERSION
    com.google.common.base.StandardSystemProperty JAVA_VENDOR -> JAVA_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_VENDOR_URL -> JAVA_VENDOR_URL
    com.google.common.base.StandardSystemProperty JAVA_HOME -> JAVA_HOME
    com.google.common.base.StandardSystemProperty JAVA_VM_SPECIFICATION_VERSION -> JAVA_VM_SPECIFICATION_VERSION
    com.google.common.base.StandardSystemProperty JAVA_VM_SPECIFICATION_VENDOR -> JAVA_VM_SPECIFICATION_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_VM_SPECIFICATION_NAME -> JAVA_VM_SPECIFICATION_NAME
    com.google.common.base.StandardSystemProperty JAVA_VM_VERSION -> JAVA_VM_VERSION
    com.google.common.base.StandardSystemProperty JAVA_VM_VENDOR -> JAVA_VM_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_VM_NAME -> JAVA_VM_NAME
    com.google.common.base.StandardSystemProperty JAVA_SPECIFICATION_VERSION -> JAVA_SPECIFICATION_VERSION
    com.google.common.base.StandardSystemProperty JAVA_SPECIFICATION_VENDOR -> JAVA_SPECIFICATION_VENDOR
    com.google.common.base.StandardSystemProperty JAVA_SPECIFICATION_NAME -> JAVA_SPECIFICATION_NAME
    com.google.common.base.StandardSystemProperty JAVA_CLASS_VERSION -> JAVA_CLASS_VERSION
    com.google.common.base.StandardSystemProperty JAVA_CLASS_PATH -> JAVA_CLASS_PATH
    com.google.common.base.StandardSystemProperty JAVA_LIBRARY_PATH -> JAVA_LIBRARY_PATH
    com.google.common.base.StandardSystemProperty JAVA_IO_TMPDIR -> JAVA_IO_TMPDIR
    com.google.common.base.StandardSystemProperty JAVA_COMPILER -> JAVA_COMPILER
    com.google.common.base.StandardSystemProperty JAVA_EXT_DIRS -> JAVA_EXT_DIRS
    com.google.common.base.StandardSystemProperty OS_NAME -> OS_NAME
    com.google.common.base.StandardSystemProperty OS_ARCH -> OS_ARCH
    com.google.common.base.StandardSystemProperty OS_VERSION -> OS_VERSION
    com.google.common.base.StandardSystemProperty FILE_SEPARATOR -> FILE_SEPARATOR
    com.google.common.base.StandardSystemProperty PATH_SEPARATOR -> PATH_SEPARATOR
    com.google.common.base.StandardSystemProperty LINE_SEPARATOR -> LINE_SEPARATOR
    com.google.common.base.StandardSystemProperty USER_NAME -> USER_NAME
    com.google.common.base.StandardSystemProperty USER_HOME -> USER_HOME
    com.google.common.base.StandardSystemProperty USER_DIR -> USER_DIR
    java.lang.String key -> key
    com.google.common.base.StandardSystemProperty[] $VALUES -> $VALUES
    com.google.common.base.StandardSystemProperty[] values() -> values
    com.google.common.base.StandardSystemProperty valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String key() -> key
    java.lang.String value() -> value
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.base.Stopwatch -> com.google.common.base.Stopwatch:
    com.google.common.base.Ticker ticker -> ticker
    boolean isRunning -> isRunning
    long elapsedNanos -> elapsedNanos
    long startTick -> startTick
    com.google.common.base.Stopwatch createUnstarted() -> createUnstarted
    com.google.common.base.Stopwatch createUnstarted(com.google.common.base.Ticker) -> createUnstarted
    com.google.common.base.Stopwatch createStarted() -> createStarted
    com.google.common.base.Stopwatch createStarted(com.google.common.base.Ticker) -> createStarted
    void <init>() -> <init>
    void <init>(com.google.common.base.Ticker) -> <init>
    boolean isRunning() -> isRunning
    com.google.common.base.Stopwatch start() -> start
    com.google.common.base.Stopwatch stop() -> stop
    com.google.common.base.Stopwatch reset() -> reset
    long elapsedNanos() -> elapsedNanos
    long elapsed(java.util.concurrent.TimeUnit) -> elapsed
    java.time.Duration elapsed() -> elapsed
    java.lang.String toString() -> toString
    java.util.concurrent.TimeUnit chooseUnit(long) -> chooseUnit
    java.lang.String abbreviate(java.util.concurrent.TimeUnit) -> abbreviate
com.google.common.base.Stopwatch$1 -> com.google.common.base.Stopwatch$1:
    int[] $SwitchMap$java$util$concurrent$TimeUnit -> $SwitchMap$java$util$concurrent$TimeUnit
    void <clinit>() -> <clinit>
com.google.common.base.Strings -> com.google.common.base.Strings:
    void <init>() -> <init>
    java.lang.String nullToEmpty(java.lang.String) -> nullToEmpty
    java.lang.String emptyToNull(java.lang.String) -> emptyToNull
    boolean isNullOrEmpty(java.lang.String) -> isNullOrEmpty
    java.lang.String padStart(java.lang.String,int,char) -> padStart
    java.lang.String padEnd(java.lang.String,int,char) -> padEnd
    java.lang.String repeat(java.lang.String,int) -> repeat
    java.lang.String commonPrefix(java.lang.CharSequence,java.lang.CharSequence) -> commonPrefix
    java.lang.String commonSuffix(java.lang.CharSequence,java.lang.CharSequence) -> commonSuffix
    boolean validSurrogatePairAt(java.lang.CharSequence,int) -> validSurrogatePairAt
    java.lang.String lenientFormat(java.lang.String,java.lang.Object[]) -> lenientFormat
    java.lang.String lenientToString(java.lang.Object) -> lenientToString
com.google.common.base.Supplier -> com.google.common.base.Supplier:
    java.lang.Object get() -> get
com.google.common.base.Suppliers -> com.google.common.base.Suppliers:
    void <init>() -> <init>
    com.google.common.base.Supplier compose(com.google.common.base.Function,com.google.common.base.Supplier) -> compose
    com.google.common.base.Supplier memoize(com.google.common.base.Supplier) -> memoize
    com.google.common.base.Supplier memoizeWithExpiration(com.google.common.base.Supplier,long,java.util.concurrent.TimeUnit) -> memoizeWithExpiration
    com.google.common.base.Supplier ofInstance(java.lang.Object) -> ofInstance
    com.google.common.base.Supplier synchronizedSupplier(com.google.common.base.Supplier) -> synchronizedSupplier
    com.google.common.base.Function supplierFunction() -> supplierFunction
com.google.common.base.Suppliers$ExpiringMemoizingSupplier -> com.google.common.base.Suppliers$ExpiringMemoizingSupplier:
    com.google.common.base.Supplier delegate -> delegate
    long durationNanos -> durationNanos
    java.lang.Object value -> value
    long expirationNanos -> expirationNanos
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Supplier,long,java.util.concurrent.TimeUnit) -> <init>
    java.lang.Object get() -> get
    java.lang.String toString() -> toString
com.google.common.base.Suppliers$MemoizingSupplier -> com.google.common.base.Suppliers$MemoizingSupplier:
    com.google.common.base.Supplier delegate -> delegate
    boolean initialized -> initialized
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Supplier) -> <init>
    java.lang.Object get() -> get
    java.lang.String toString() -> toString
com.google.common.base.Suppliers$NonSerializableMemoizingSupplier -> com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:
    com.google.common.base.Supplier delegate -> delegate
    boolean initialized -> initialized
    java.lang.Object value -> value
    void <init>(com.google.common.base.Supplier) -> <init>
    java.lang.Object get() -> get
    java.lang.String toString() -> toString
com.google.common.base.Suppliers$SupplierComposition -> com.google.common.base.Suppliers$SupplierComposition:
    com.google.common.base.Function function -> function
    com.google.common.base.Supplier supplier -> supplier
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Function,com.google.common.base.Supplier) -> <init>
    java.lang.Object get() -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Suppliers$SupplierFunction -> com.google.common.base.Suppliers$SupplierFunction:
com.google.common.base.Suppliers$SupplierFunctionImpl -> com.google.common.base.Suppliers$SupplierFunctionImpl:
    com.google.common.base.Suppliers$SupplierFunctionImpl INSTANCE -> INSTANCE
    com.google.common.base.Suppliers$SupplierFunctionImpl[] $VALUES -> $VALUES
    com.google.common.base.Suppliers$SupplierFunctionImpl[] values() -> values
    com.google.common.base.Suppliers$SupplierFunctionImpl valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object apply(com.google.common.base.Supplier) -> apply
    java.lang.String toString() -> toString
    java.lang.Object apply(java.lang.Object) -> apply
    void <clinit>() -> <clinit>
com.google.common.base.Suppliers$SupplierOfInstance -> com.google.common.base.Suppliers$SupplierOfInstance:
    java.lang.Object instance -> instance
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.base.Suppliers$ThreadSafeSupplier -> com.google.common.base.Suppliers$ThreadSafeSupplier:
    com.google.common.base.Supplier delegate -> delegate
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Supplier) -> <init>
    java.lang.Object get() -> get
    java.lang.String toString() -> toString
com.google.common.base.Throwables -> com.google.common.base.Throwables:
    java.lang.String JAVA_LANG_ACCESS_CLASSNAME -> JAVA_LANG_ACCESS_CLASSNAME
    java.lang.String SHARED_SECRETS_CLASSNAME -> SHARED_SECRETS_CLASSNAME
    java.lang.Object jla -> jla
    java.lang.reflect.Method getStackTraceElementMethod -> getStackTraceElementMethod
    java.lang.reflect.Method getStackTraceDepthMethod -> getStackTraceDepthMethod
    void <init>() -> <init>
    void throwIfInstanceOf(java.lang.Throwable,java.lang.Class) -> throwIfInstanceOf
    void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class) -> propagateIfInstanceOf
    void throwIfUnchecked(java.lang.Throwable) -> throwIfUnchecked
    void propagateIfPossible(java.lang.Throwable) -> propagateIfPossible
    void propagateIfPossible(java.lang.Throwable,java.lang.Class) -> propagateIfPossible
    void propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class) -> propagateIfPossible
    java.lang.RuntimeException propagate(java.lang.Throwable) -> propagate
    java.lang.Throwable getRootCause(java.lang.Throwable) -> getRootCause
    java.util.List getCausalChain(java.lang.Throwable) -> getCausalChain
    java.lang.Throwable getCauseAs(java.lang.Throwable,java.lang.Class) -> getCauseAs
    java.lang.String getStackTraceAsString(java.lang.Throwable) -> getStackTraceAsString
    java.util.List lazyStackTrace(java.lang.Throwable) -> lazyStackTrace
    boolean lazyStackTraceIsLazy() -> lazyStackTraceIsLazy
    java.util.List jlaStackTrace(java.lang.Throwable) -> jlaStackTrace
    java.lang.Object invokeAccessibleNonThrowingMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> invokeAccessibleNonThrowingMethod
    java.lang.Object getJLA() -> getJLA
    java.lang.reflect.Method getGetMethod() -> getGetMethod
    java.lang.reflect.Method getSizeMethod() -> getSizeMethod
    java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[]) -> getJlaMethod
    java.lang.reflect.Method access$000() -> access$000
    java.lang.Object access$100() -> access$100
    java.lang.Object access$200(java.lang.reflect.Method,java.lang.Object,java.lang.Object[]) -> access$200
    java.lang.reflect.Method access$300() -> access$300
    void <clinit>() -> <clinit>
com.google.common.base.Throwables$1 -> com.google.common.base.Throwables$1:
    java.lang.Throwable val$t -> val$t
    void <init>(java.lang.Throwable) -> <init>
    java.lang.StackTraceElement get(int) -> get
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.base.Ticker -> com.google.common.base.Ticker:
    com.google.common.base.Ticker SYSTEM_TICKER -> SYSTEM_TICKER
    void <init>() -> <init>
    long read() -> read
    com.google.common.base.Ticker systemTicker() -> systemTicker
    void <clinit>() -> <clinit>
com.google.common.base.Ticker$1 -> com.google.common.base.Ticker$1:
    void <init>() -> <init>
    long read() -> read
com.google.common.base.Utf8 -> com.google.common.base.Utf8:
    int encodedLength(java.lang.CharSequence) -> encodedLength
    int encodedLengthGeneral(java.lang.CharSequence,int) -> encodedLengthGeneral
    boolean isWellFormed(byte[]) -> isWellFormed
    boolean isWellFormed(byte[],int,int) -> isWellFormed
    boolean isWellFormedSlowPath(byte[],int,int) -> isWellFormedSlowPath
    java.lang.String unpairedSurrogateMsg(int) -> unpairedSurrogateMsg
    void <init>() -> <init>
com.google.common.base.Verify -> com.google.common.base.Verify:
    void verify(boolean) -> verify
    void verify(boolean,java.lang.String,java.lang.Object[]) -> verify
    void verify(boolean,java.lang.String,char) -> verify
    void verify(boolean,java.lang.String,int) -> verify
    void verify(boolean,java.lang.String,long) -> verify
    void verify(boolean,java.lang.String,java.lang.Object) -> verify
    void verify(boolean,java.lang.String,char,char) -> verify
    void verify(boolean,java.lang.String,int,char) -> verify
    void verify(boolean,java.lang.String,long,char) -> verify
    void verify(boolean,java.lang.String,java.lang.Object,char) -> verify
    void verify(boolean,java.lang.String,char,int) -> verify
    void verify(boolean,java.lang.String,int,int) -> verify
    void verify(boolean,java.lang.String,long,int) -> verify
    void verify(boolean,java.lang.String,java.lang.Object,int) -> verify
    void verify(boolean,java.lang.String,char,long) -> verify
    void verify(boolean,java.lang.String,int,long) -> verify
    void verify(boolean,java.lang.String,long,long) -> verify
    void verify(boolean,java.lang.String,java.lang.Object,long) -> verify
    void verify(boolean,java.lang.String,char,java.lang.Object) -> verify
    void verify(boolean,java.lang.String,int,java.lang.Object) -> verify
    void verify(boolean,java.lang.String,long,java.lang.Object) -> verify
    void verify(boolean,java.lang.String,java.lang.Object,java.lang.Object) -> verify
    void verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> verify
    void verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> verify
    java.lang.Object verifyNotNull(java.lang.Object) -> verifyNotNull
    java.lang.Object verifyNotNull(java.lang.Object,java.lang.String,java.lang.Object[]) -> verifyNotNull
    void <init>() -> <init>
com.google.common.base.VerifyException -> com.google.common.base.VerifyException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.google.common.base.internal.Finalizer -> com.google.common.base.internal.Finalizer:
    java.util.logging.Logger logger -> logger
    java.lang.String FINALIZABLE_REFERENCE -> FINALIZABLE_REFERENCE
    java.lang.ref.WeakReference finalizableReferenceClassReference -> finalizableReferenceClassReference
    java.lang.ref.PhantomReference frqReference -> frqReference
    java.lang.ref.ReferenceQueue queue -> queue
    java.lang.reflect.Constructor bigThreadConstructor -> bigThreadConstructor
    java.lang.reflect.Field inheritableThreadLocals -> inheritableThreadLocals
    void startFinalizer(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference) -> startFinalizer
    void <init>(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference) -> <init>
    void run() -> run
    boolean cleanUp(java.lang.ref.Reference) -> cleanUp
    java.lang.reflect.Method getFinalizeReferentMethod() -> getFinalizeReferentMethod
    java.lang.reflect.Field getInheritableThreadLocalsField() -> getInheritableThreadLocalsField
    java.lang.reflect.Constructor getBigThreadConstructor() -> getBigThreadConstructor
    void <clinit>() -> <clinit>
com.google.common.base.package-info -> com.google.common.base.package-info:
com.google.common.cache.AbstractCache -> com.google.common.cache.AbstractCache:
    void <init>() -> <init>
    java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    void put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void cleanUp() -> cleanUp
    long size() -> size
    void invalidate(java.lang.Object) -> invalidate
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    void invalidateAll() -> invalidateAll
    com.google.common.cache.CacheStats stats() -> stats
    java.util.concurrent.ConcurrentMap asMap() -> asMap
com.google.common.cache.AbstractCache$SimpleStatsCounter -> com.google.common.cache.AbstractCache$SimpleStatsCounter:
    com.google.common.cache.LongAddable hitCount -> hitCount
    com.google.common.cache.LongAddable missCount -> missCount
    com.google.common.cache.LongAddable loadSuccessCount -> loadSuccessCount
    com.google.common.cache.LongAddable loadExceptionCount -> loadExceptionCount
    com.google.common.cache.LongAddable totalLoadTime -> totalLoadTime
    com.google.common.cache.LongAddable evictionCount -> evictionCount
    void <init>() -> <init>
    void recordHits(int) -> recordHits
    void recordMisses(int) -> recordMisses
    void recordLoadSuccess(long) -> recordLoadSuccess
    void recordLoadException(long) -> recordLoadException
    void recordEviction() -> recordEviction
    com.google.common.cache.CacheStats snapshot() -> snapshot
    void incrementBy(com.google.common.cache.AbstractCache$StatsCounter) -> incrementBy
com.google.common.cache.AbstractCache$StatsCounter -> com.google.common.cache.AbstractCache$StatsCounter:
    void recordHits(int) -> recordHits
    void recordMisses(int) -> recordMisses
    void recordLoadSuccess(long) -> recordLoadSuccess
    void recordLoadException(long) -> recordLoadException
    void recordEviction() -> recordEviction
    com.google.common.cache.CacheStats snapshot() -> snapshot
com.google.common.cache.AbstractLoadingCache -> com.google.common.cache.AbstractLoadingCache:
    void <init>() -> <init>
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.lang.Object apply(java.lang.Object) -> apply
    void refresh(java.lang.Object) -> refresh
com.google.common.cache.Cache -> com.google.common.cache.Cache:
    java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    void put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void invalidate(java.lang.Object) -> invalidate
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    void invalidateAll() -> invalidateAll
    long size() -> size
    com.google.common.cache.CacheStats stats() -> stats
    java.util.concurrent.ConcurrentMap asMap() -> asMap
    void cleanUp() -> cleanUp
com.google.common.cache.CacheBuilder -> com.google.common.cache.CacheBuilder:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    int DEFAULT_CONCURRENCY_LEVEL -> DEFAULT_CONCURRENCY_LEVEL
    int DEFAULT_EXPIRATION_NANOS -> DEFAULT_EXPIRATION_NANOS
    int DEFAULT_REFRESH_NANOS -> DEFAULT_REFRESH_NANOS
    com.google.common.base.Supplier NULL_STATS_COUNTER -> NULL_STATS_COUNTER
    com.google.common.cache.CacheStats EMPTY_STATS -> EMPTY_STATS
    com.google.common.base.Supplier CACHE_STATS_COUNTER -> CACHE_STATS_COUNTER
    com.google.common.base.Ticker NULL_TICKER -> NULL_TICKER
    java.util.logging.Logger logger -> logger
    int UNSET_INT -> UNSET_INT
    boolean strictParsing -> strictParsing
    int initialCapacity -> initialCapacity
    int concurrencyLevel -> concurrencyLevel
    long maximumSize -> maximumSize
    long maximumWeight -> maximumWeight
    com.google.common.cache.Weigher weigher -> weigher
    com.google.common.cache.LocalCache$Strength keyStrength -> keyStrength
    com.google.common.cache.LocalCache$Strength valueStrength -> valueStrength
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long expireAfterAccessNanos -> expireAfterAccessNanos
    long refreshNanos -> refreshNanos
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    com.google.common.cache.RemovalListener removalListener -> removalListener
    com.google.common.base.Ticker ticker -> ticker
    com.google.common.base.Supplier statsCounterSupplier -> statsCounterSupplier
    void <init>() -> <init>
    com.google.common.cache.CacheBuilder newBuilder() -> newBuilder
    com.google.common.cache.CacheBuilder from(com.google.common.cache.CacheBuilderSpec) -> from
    com.google.common.cache.CacheBuilder from(java.lang.String) -> from
    com.google.common.cache.CacheBuilder lenientParsing() -> lenientParsing
    com.google.common.cache.CacheBuilder keyEquivalence(com.google.common.base.Equivalence) -> keyEquivalence
    com.google.common.base.Equivalence getKeyEquivalence() -> getKeyEquivalence
    com.google.common.cache.CacheBuilder valueEquivalence(com.google.common.base.Equivalence) -> valueEquivalence
    com.google.common.base.Equivalence getValueEquivalence() -> getValueEquivalence
    com.google.common.cache.CacheBuilder initialCapacity(int) -> initialCapacity
    int getInitialCapacity() -> getInitialCapacity
    com.google.common.cache.CacheBuilder concurrencyLevel(int) -> concurrencyLevel
    int getConcurrencyLevel() -> getConcurrencyLevel
    com.google.common.cache.CacheBuilder maximumSize(long) -> maximumSize
    com.google.common.cache.CacheBuilder maximumWeight(long) -> maximumWeight
    com.google.common.cache.CacheBuilder weigher(com.google.common.cache.Weigher) -> weigher
    long getMaximumWeight() -> getMaximumWeight
    com.google.common.cache.Weigher getWeigher() -> getWeigher
    com.google.common.cache.CacheBuilder weakKeys() -> weakKeys
    com.google.common.cache.CacheBuilder setKeyStrength(com.google.common.cache.LocalCache$Strength) -> setKeyStrength
    com.google.common.cache.LocalCache$Strength getKeyStrength() -> getKeyStrength
    com.google.common.cache.CacheBuilder weakValues() -> weakValues
    com.google.common.cache.CacheBuilder softValues() -> softValues
    com.google.common.cache.CacheBuilder setValueStrength(com.google.common.cache.LocalCache$Strength) -> setValueStrength
    com.google.common.cache.LocalCache$Strength getValueStrength() -> getValueStrength
    com.google.common.cache.CacheBuilder expireAfterWrite(java.time.Duration) -> expireAfterWrite
    com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit) -> expireAfterWrite
    long getExpireAfterWriteNanos() -> getExpireAfterWriteNanos
    com.google.common.cache.CacheBuilder expireAfterAccess(java.time.Duration) -> expireAfterAccess
    com.google.common.cache.CacheBuilder expireAfterAccess(long,java.util.concurrent.TimeUnit) -> expireAfterAccess
    long getExpireAfterAccessNanos() -> getExpireAfterAccessNanos
    com.google.common.cache.CacheBuilder refreshAfterWrite(java.time.Duration) -> refreshAfterWrite
    com.google.common.cache.CacheBuilder refreshAfterWrite(long,java.util.concurrent.TimeUnit) -> refreshAfterWrite
    long getRefreshNanos() -> getRefreshNanos
    com.google.common.cache.CacheBuilder ticker(com.google.common.base.Ticker) -> ticker
    com.google.common.base.Ticker getTicker(boolean) -> getTicker
    com.google.common.cache.CacheBuilder removalListener(com.google.common.cache.RemovalListener) -> removalListener
    com.google.common.cache.RemovalListener getRemovalListener() -> getRemovalListener
    com.google.common.cache.CacheBuilder recordStats() -> recordStats
    boolean isRecordingStats() -> isRecordingStats
    com.google.common.base.Supplier getStatsCounterSupplier() -> getStatsCounterSupplier
    com.google.common.cache.LoadingCache build(com.google.common.cache.CacheLoader) -> build
    com.google.common.cache.Cache build() -> build
    void checkNonLoadingCache() -> checkNonLoadingCache
    void checkWeightWithWeigher() -> checkWeightWithWeigher
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilder$1 -> com.google.common.cache.CacheBuilder$1:
    void <init>() -> <init>
    void recordHits(int) -> recordHits
    void recordMisses(int) -> recordMisses
    void recordLoadSuccess(long) -> recordLoadSuccess
    void recordLoadException(long) -> recordLoadException
    void recordEviction() -> recordEviction
    com.google.common.cache.CacheStats snapshot() -> snapshot
com.google.common.cache.CacheBuilder$2 -> com.google.common.cache.CacheBuilder$2:
    void <init>() -> <init>
    com.google.common.cache.AbstractCache$StatsCounter get() -> get
    java.lang.Object get() -> get
com.google.common.cache.CacheBuilder$3 -> com.google.common.cache.CacheBuilder$3:
    void <init>() -> <init>
    long read() -> read
com.google.common.cache.CacheBuilder$NullListener -> com.google.common.cache.CacheBuilder$NullListener:
    com.google.common.cache.CacheBuilder$NullListener INSTANCE -> INSTANCE
    com.google.common.cache.CacheBuilder$NullListener[] $VALUES -> $VALUES
    com.google.common.cache.CacheBuilder$NullListener[] values() -> values
    com.google.common.cache.CacheBuilder$NullListener valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void onRemoval(com.google.common.cache.RemovalNotification) -> onRemoval
    void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilder$OneWeigher -> com.google.common.cache.CacheBuilder$OneWeigher:
    com.google.common.cache.CacheBuilder$OneWeigher INSTANCE -> INSTANCE
    com.google.common.cache.CacheBuilder$OneWeigher[] $VALUES -> $VALUES
    com.google.common.cache.CacheBuilder$OneWeigher[] values() -> values
    com.google.common.cache.CacheBuilder$OneWeigher valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int weigh(java.lang.Object,java.lang.Object) -> weigh
    void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilderSpec -> com.google.common.cache.CacheBuilderSpec:
    com.google.common.base.Splitter KEYS_SPLITTER -> KEYS_SPLITTER
    com.google.common.base.Splitter KEY_VALUE_SPLITTER -> KEY_VALUE_SPLITTER
    com.google.common.collect.ImmutableMap VALUE_PARSERS -> VALUE_PARSERS
    java.lang.Integer initialCapacity -> initialCapacity
    java.lang.Long maximumSize -> maximumSize
    java.lang.Long maximumWeight -> maximumWeight
    java.lang.Integer concurrencyLevel -> concurrencyLevel
    com.google.common.cache.LocalCache$Strength keyStrength -> keyStrength
    com.google.common.cache.LocalCache$Strength valueStrength -> valueStrength
    java.lang.Boolean recordStats -> recordStats
    long writeExpirationDuration -> writeExpirationDuration
    java.util.concurrent.TimeUnit writeExpirationTimeUnit -> writeExpirationTimeUnit
    long accessExpirationDuration -> accessExpirationDuration
    java.util.concurrent.TimeUnit accessExpirationTimeUnit -> accessExpirationTimeUnit
    long refreshDuration -> refreshDuration
    java.util.concurrent.TimeUnit refreshTimeUnit -> refreshTimeUnit
    java.lang.String specification -> specification
    void <init>(java.lang.String) -> <init>
    com.google.common.cache.CacheBuilderSpec parse(java.lang.String) -> parse
    com.google.common.cache.CacheBuilderSpec disableCaching() -> disableCaching
    com.google.common.cache.CacheBuilder toCacheBuilder() -> toCacheBuilder
    java.lang.String toParsableString() -> toParsableString
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Long durationInNanos(long,java.util.concurrent.TimeUnit) -> durationInNanos
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    java.lang.String access$000(java.lang.String,java.lang.Object[]) -> access$000
    void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilderSpec$1 -> com.google.common.cache.CacheBuilderSpec$1:
    int[] $SwitchMap$com$google$common$cache$LocalCache$Strength -> $SwitchMap$com$google$common$cache$LocalCache$Strength
    void <clinit>() -> <clinit>
com.google.common.cache.CacheBuilderSpec$AccessDurationParser -> com.google.common.cache.CacheBuilderSpec$AccessDurationParser:
    void <init>() -> <init>
    void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> parseDuration
com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser -> com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser:
    void <init>() -> <init>
    void parseInteger(com.google.common.cache.CacheBuilderSpec,int) -> parseInteger
com.google.common.cache.CacheBuilderSpec$DurationParser -> com.google.common.cache.CacheBuilderSpec$DurationParser:
    void <init>() -> <init>
    void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> parseDuration
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$InitialCapacityParser -> com.google.common.cache.CacheBuilderSpec$InitialCapacityParser:
    void <init>() -> <init>
    void parseInteger(com.google.common.cache.CacheBuilderSpec,int) -> parseInteger
com.google.common.cache.CacheBuilderSpec$IntegerParser -> com.google.common.cache.CacheBuilderSpec$IntegerParser:
    void <init>() -> <init>
    void parseInteger(com.google.common.cache.CacheBuilderSpec,int) -> parseInteger
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$KeyStrengthParser -> com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:
    com.google.common.cache.LocalCache$Strength strength -> strength
    void <init>(com.google.common.cache.LocalCache$Strength) -> <init>
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$LongParser -> com.google.common.cache.CacheBuilderSpec$LongParser:
    void <init>() -> <init>
    void parseLong(com.google.common.cache.CacheBuilderSpec,long) -> parseLong
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$MaximumSizeParser -> com.google.common.cache.CacheBuilderSpec$MaximumSizeParser:
    void <init>() -> <init>
    void parseLong(com.google.common.cache.CacheBuilderSpec,long) -> parseLong
com.google.common.cache.CacheBuilderSpec$MaximumWeightParser -> com.google.common.cache.CacheBuilderSpec$MaximumWeightParser:
    void <init>() -> <init>
    void parseLong(com.google.common.cache.CacheBuilderSpec,long) -> parseLong
com.google.common.cache.CacheBuilderSpec$RecordStatsParser -> com.google.common.cache.CacheBuilderSpec$RecordStatsParser:
    void <init>() -> <init>
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$RefreshDurationParser -> com.google.common.cache.CacheBuilderSpec$RefreshDurationParser:
    void <init>() -> <init>
    void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> parseDuration
com.google.common.cache.CacheBuilderSpec$ValueParser -> com.google.common.cache.CacheBuilderSpec$ValueParser:
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$ValueStrengthParser -> com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:
    com.google.common.cache.LocalCache$Strength strength -> strength
    void <init>(com.google.common.cache.LocalCache$Strength) -> <init>
    void parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String) -> parse
com.google.common.cache.CacheBuilderSpec$WriteDurationParser -> com.google.common.cache.CacheBuilderSpec$WriteDurationParser:
    void <init>() -> <init>
    void parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit) -> parseDuration
com.google.common.cache.CacheLoader -> com.google.common.cache.CacheLoader:
    void <init>() -> <init>
    java.lang.Object load(java.lang.Object) -> load
    com.google.common.util.concurrent.ListenableFuture reload(java.lang.Object,java.lang.Object) -> reload
    java.util.Map loadAll(java.lang.Iterable) -> loadAll
    com.google.common.cache.CacheLoader from(com.google.common.base.Function) -> from
    com.google.common.cache.CacheLoader from(com.google.common.base.Supplier) -> from
    com.google.common.cache.CacheLoader asyncReloading(com.google.common.cache.CacheLoader,java.util.concurrent.Executor) -> asyncReloading
com.google.common.cache.CacheLoader$1 -> com.google.common.cache.CacheLoader$1:
    com.google.common.cache.CacheLoader val$loader -> val$loader
    java.util.concurrent.Executor val$executor -> val$executor
    void <init>(com.google.common.cache.CacheLoader,java.util.concurrent.Executor) -> <init>
    java.lang.Object load(java.lang.Object) -> load
    com.google.common.util.concurrent.ListenableFuture reload(java.lang.Object,java.lang.Object) -> reload
    java.util.Map loadAll(java.lang.Iterable) -> loadAll
com.google.common.cache.CacheLoader$1$1 -> com.google.common.cache.CacheLoader$1$1:
    java.lang.Object val$key -> val$key
    java.lang.Object val$oldValue -> val$oldValue
    com.google.common.cache.CacheLoader$1 this$0 -> this$0
    void <init>(com.google.common.cache.CacheLoader$1,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object call() -> call
com.google.common.cache.CacheLoader$FunctionToCacheLoader -> com.google.common.cache.CacheLoader$FunctionToCacheLoader:
    com.google.common.base.Function computingFunction -> computingFunction
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Function) -> <init>
    java.lang.Object load(java.lang.Object) -> load
com.google.common.cache.CacheLoader$InvalidCacheLoadException -> com.google.common.cache.CacheLoader$InvalidCacheLoadException:
    void <init>(java.lang.String) -> <init>
com.google.common.cache.CacheLoader$SupplierToCacheLoader -> com.google.common.cache.CacheLoader$SupplierToCacheLoader:
    com.google.common.base.Supplier computingSupplier -> computingSupplier
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Supplier) -> <init>
    java.lang.Object load(java.lang.Object) -> load
com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException -> com.google.common.cache.CacheLoader$UnsupportedLoadingOperationException:
    void <init>() -> <init>
com.google.common.cache.CacheStats -> com.google.common.cache.CacheStats:
    long hitCount -> hitCount
    long missCount -> missCount
    long loadSuccessCount -> loadSuccessCount
    long loadExceptionCount -> loadExceptionCount
    long totalLoadTime -> totalLoadTime
    long evictionCount -> evictionCount
    void <init>(long,long,long,long,long,long) -> <init>
    long requestCount() -> requestCount
    long hitCount() -> hitCount
    double hitRate() -> hitRate
    long missCount() -> missCount
    double missRate() -> missRate
    long loadCount() -> loadCount
    long loadSuccessCount() -> loadSuccessCount
    long loadExceptionCount() -> loadExceptionCount
    double loadExceptionRate() -> loadExceptionRate
    long totalLoadTime() -> totalLoadTime
    double averageLoadPenalty() -> averageLoadPenalty
    long evictionCount() -> evictionCount
    com.google.common.cache.CacheStats minus(com.google.common.cache.CacheStats) -> minus
    com.google.common.cache.CacheStats plus(com.google.common.cache.CacheStats) -> plus
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.cache.ForwardingCache -> com.google.common.cache.ForwardingCache:
    void <init>() -> <init>
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    void put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void invalidate(java.lang.Object) -> invalidate
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    void invalidateAll() -> invalidateAll
    long size() -> size
    com.google.common.cache.CacheStats stats() -> stats
    java.util.concurrent.ConcurrentMap asMap() -> asMap
    void cleanUp() -> cleanUp
    java.lang.Object delegate() -> delegate
com.google.common.cache.ForwardingCache$SimpleForwardingCache -> com.google.common.cache.ForwardingCache$SimpleForwardingCache:
    com.google.common.cache.Cache delegate -> delegate
    void <init>(com.google.common.cache.Cache) -> <init>
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.cache.ForwardingLoadingCache -> com.google.common.cache.ForwardingLoadingCache:
    void <init>() -> <init>
    com.google.common.cache.LoadingCache delegate() -> delegate
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.lang.Object apply(java.lang.Object) -> apply
    void refresh(java.lang.Object) -> refresh
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache -> com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:
    com.google.common.cache.LoadingCache delegate -> delegate
    void <init>(com.google.common.cache.LoadingCache) -> <init>
    com.google.common.cache.LoadingCache delegate() -> delegate
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.cache.LoadingCache -> com.google.common.cache.LoadingCache:
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.lang.Object apply(java.lang.Object) -> apply
    void refresh(java.lang.Object) -> refresh
    java.util.concurrent.ConcurrentMap asMap() -> asMap
com.google.common.cache.LocalCache -> com.google.common.cache.LocalCache:
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    int MAX_SEGMENTS -> MAX_SEGMENTS
    int CONTAINS_VALUE_RETRIES -> CONTAINS_VALUE_RETRIES
    int DRAIN_THRESHOLD -> DRAIN_THRESHOLD
    int DRAIN_MAX -> DRAIN_MAX
    java.util.logging.Logger logger -> logger
    int segmentMask -> segmentMask
    int segmentShift -> segmentShift
    com.google.common.cache.LocalCache$Segment[] segments -> segments
    int concurrencyLevel -> concurrencyLevel
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    com.google.common.cache.LocalCache$Strength keyStrength -> keyStrength
    com.google.common.cache.LocalCache$Strength valueStrength -> valueStrength
    long maxWeight -> maxWeight
    com.google.common.cache.Weigher weigher -> weigher
    long expireAfterAccessNanos -> expireAfterAccessNanos
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long refreshNanos -> refreshNanos
    java.util.Queue removalNotificationQueue -> removalNotificationQueue
    com.google.common.cache.RemovalListener removalListener -> removalListener
    com.google.common.base.Ticker ticker -> ticker
    com.google.common.cache.LocalCache$EntryFactory entryFactory -> entryFactory
    com.google.common.cache.AbstractCache$StatsCounter globalStatsCounter -> globalStatsCounter
    com.google.common.cache.CacheLoader defaultLoader -> defaultLoader
    com.google.common.cache.LocalCache$ValueReference UNSET -> UNSET
    java.util.Queue DISCARDING_QUEUE -> DISCARDING_QUEUE
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Set entrySet -> entrySet
    void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader) -> <init>
    boolean evictsBySize() -> evictsBySize
    boolean customWeigher() -> customWeigher
    boolean expires() -> expires
    boolean expiresAfterWrite() -> expiresAfterWrite
    boolean expiresAfterAccess() -> expiresAfterAccess
    boolean refreshes() -> refreshes
    boolean usesAccessQueue() -> usesAccessQueue
    boolean usesWriteQueue() -> usesWriteQueue
    boolean recordsWrite() -> recordsWrite
    boolean recordsAccess() -> recordsAccess
    boolean recordsTime() -> recordsTime
    boolean usesWriteEntries() -> usesWriteEntries
    boolean usesAccessEntries() -> usesAccessEntries
    boolean usesKeyReferences() -> usesKeyReferences
    boolean usesValueReferences() -> usesValueReferences
    com.google.common.cache.LocalCache$ValueReference unset() -> unset
    com.google.common.cache.ReferenceEntry nullEntry() -> nullEntry
    java.util.Queue discardingQueue() -> discardingQueue
    int rehash(int) -> rehash
    com.google.common.cache.ReferenceEntry newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyEntry
    com.google.common.cache.LocalCache$ValueReference newValueReference(com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> newValueReference
    int hash(java.lang.Object) -> hash
    void reclaimValue(com.google.common.cache.LocalCache$ValueReference) -> reclaimValue
    void reclaimKey(com.google.common.cache.ReferenceEntry) -> reclaimKey
    boolean isLive(com.google.common.cache.ReferenceEntry,long) -> isLive
    com.google.common.cache.LocalCache$Segment segmentFor(int) -> segmentFor
    com.google.common.cache.LocalCache$Segment createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter) -> createSegment
    java.lang.Object getLiveValue(com.google.common.cache.ReferenceEntry,long) -> getLiveValue
    boolean isExpired(com.google.common.cache.ReferenceEntry,long) -> isExpired
    void connectAccessOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> connectAccessOrder
    void nullifyAccessOrder(com.google.common.cache.ReferenceEntry) -> nullifyAccessOrder
    void connectWriteOrder(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> connectWriteOrder
    void nullifyWriteOrder(com.google.common.cache.ReferenceEntry) -> nullifyWriteOrder
    void processPendingNotifications() -> processPendingNotifications
    com.google.common.cache.LocalCache$Segment[] newSegmentArray(int) -> newSegmentArray
    void cleanUp() -> cleanUp
    boolean isEmpty() -> isEmpty
    long longSize() -> longSize
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object get(java.lang.Object,com.google.common.cache.CacheLoader) -> get
    java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    java.lang.Object getOrLoad(java.lang.Object) -> getOrLoad
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.util.Map loadAll(java.util.Set,com.google.common.cache.CacheLoader) -> loadAll
    com.google.common.cache.ReferenceEntry getEntry(java.lang.Object) -> getEntry
    void refresh(java.lang.Object) -> refresh
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    java.lang.Object compute(java.lang.Object,java.util.function.BiFunction) -> compute
    java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function) -> computeIfAbsent
    java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction) -> computeIfPresent
    java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction) -> merge
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.ArrayList toArrayList(java.util.Collection) -> toArrayList
    boolean removeIf(java.util.function.BiPredicate) -> removeIf
    java.lang.Object lambda$merge$2(java.lang.Object,java.util.function.BiFunction,java.lang.Object,java.lang.Object) -> lambda$merge$2
    java.lang.Object lambda$computeIfPresent$1(java.util.function.BiFunction,java.lang.Object,java.lang.Object) -> lambda$computeIfPresent$1
    java.lang.Object lambda$computeIfAbsent$0(java.util.function.Function,java.lang.Object,java.lang.Object,java.lang.Object) -> lambda$computeIfAbsent$0
    java.util.ArrayList access$200(java.util.Collection) -> access$200
    void <clinit>() -> <clinit>
com.google.common.cache.LocalCache$1 -> com.google.common.cache.LocalCache$1:
    void <init>() -> <init>
    java.lang.Object get() -> get
    int getWeight() -> getWeight
    com.google.common.cache.ReferenceEntry getEntry() -> getEntry
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> copyFor
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    java.lang.Object waitForValue() -> waitForValue
    void notifyNewValue(java.lang.Object) -> notifyNewValue
com.google.common.cache.LocalCache$2 -> com.google.common.cache.LocalCache$2:
    void <init>() -> <init>
    boolean offer(java.lang.Object) -> offer
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    int size() -> size
    java.util.Iterator iterator() -> iterator
com.google.common.cache.LocalCache$AbstractCacheSet -> com.google.common.cache.LocalCache$AbstractCacheSet:
    java.util.concurrent.ConcurrentMap map -> map
    com.google.common.cache.LocalCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache,java.util.concurrent.ConcurrentMap) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.cache.LocalCache$AbstractReferenceEntry -> com.google.common.cache.LocalCache$AbstractReferenceEntry:
    void <init>() -> <init>
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    com.google.common.cache.ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$AccessQueue -> com.google.common.cache.LocalCache$AccessQueue:
    com.google.common.cache.ReferenceEntry head -> head
    void <init>() -> <init>
    boolean offer(com.google.common.cache.ReferenceEntry) -> offer
    com.google.common.cache.ReferenceEntry peek() -> peek
    com.google.common.cache.ReferenceEntry poll() -> poll
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
com.google.common.cache.LocalCache$AccessQueue$1 -> com.google.common.cache.LocalCache$AccessQueue$1:
    com.google.common.cache.ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.ReferenceEntry previousAccess -> previousAccess
    com.google.common.cache.LocalCache$AccessQueue this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache$AccessQueue) -> <init>
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInAccessQueue
com.google.common.cache.LocalCache$AccessQueue$2 -> com.google.common.cache.LocalCache$AccessQueue$2:
    com.google.common.cache.LocalCache$AccessQueue this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache$AccessQueue,com.google.common.cache.ReferenceEntry) -> <init>
    com.google.common.cache.ReferenceEntry computeNext(com.google.common.cache.ReferenceEntry) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.cache.LocalCache$EntryFactory -> com.google.common.cache.LocalCache$EntryFactory:
    com.google.common.cache.LocalCache$EntryFactory STRONG -> STRONG
    com.google.common.cache.LocalCache$EntryFactory STRONG_ACCESS -> STRONG_ACCESS
    com.google.common.cache.LocalCache$EntryFactory STRONG_WRITE -> STRONG_WRITE
    com.google.common.cache.LocalCache$EntryFactory STRONG_ACCESS_WRITE -> STRONG_ACCESS_WRITE
    com.google.common.cache.LocalCache$EntryFactory WEAK -> WEAK
    com.google.common.cache.LocalCache$EntryFactory WEAK_ACCESS -> WEAK_ACCESS
    com.google.common.cache.LocalCache$EntryFactory WEAK_WRITE -> WEAK_WRITE
    com.google.common.cache.LocalCache$EntryFactory WEAK_ACCESS_WRITE -> WEAK_ACCESS_WRITE
    int ACCESS_MASK -> ACCESS_MASK
    int WRITE_MASK -> WRITE_MASK
    int WEAK_MASK -> WEAK_MASK
    com.google.common.cache.LocalCache$EntryFactory[] factories -> factories
    com.google.common.cache.LocalCache$EntryFactory[] $VALUES -> $VALUES
    com.google.common.cache.LocalCache$EntryFactory[] values() -> values
    com.google.common.cache.LocalCache$EntryFactory valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.LocalCache$EntryFactory getFactory(com.google.common.cache.LocalCache$Strength,boolean,boolean) -> getFactory
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyEntry
    void copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyAccessEntry
    void copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyWriteEntry
    void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.cache.LocalCache$EntryFactory$1 -> com.google.common.cache.LocalCache$EntryFactory$1:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
com.google.common.cache.LocalCache$EntryFactory$2 -> com.google.common.cache.LocalCache$EntryFactory$2:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$3 -> com.google.common.cache.LocalCache$EntryFactory$3:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$4 -> com.google.common.cache.LocalCache$EntryFactory$4:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$5 -> com.google.common.cache.LocalCache$EntryFactory$5:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
com.google.common.cache.LocalCache$EntryFactory$6 -> com.google.common.cache.LocalCache$EntryFactory$6:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$7 -> com.google.common.cache.LocalCache$EntryFactory$7:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryFactory$8 -> com.google.common.cache.LocalCache$EntryFactory$8:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.ReferenceEntry newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyEntry
com.google.common.cache.LocalCache$EntryIterator -> com.google.common.cache.LocalCache$EntryIterator:
    com.google.common.cache.LocalCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache) -> <init>
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.cache.LocalCache$EntrySet -> com.google.common.cache.LocalCache$EntrySet:
    com.google.common.cache.LocalCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache,java.util.concurrent.ConcurrentMap) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean removeIf(java.util.function.Predicate) -> removeIf
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    boolean lambda$removeIf$0(java.util.function.Predicate,java.lang.Object,java.lang.Object) -> lambda$removeIf$0
com.google.common.cache.LocalCache$HashIterator -> com.google.common.cache.LocalCache$HashIterator:
    int nextSegmentIndex -> nextSegmentIndex
    int nextTableIndex -> nextTableIndex
    com.google.common.cache.LocalCache$Segment currentSegment -> currentSegment
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> currentTable
    com.google.common.cache.ReferenceEntry nextEntry -> nextEntry
    com.google.common.cache.LocalCache$WriteThroughEntry nextExternal -> nextExternal
    com.google.common.cache.LocalCache$WriteThroughEntry lastReturned -> lastReturned
    com.google.common.cache.LocalCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache) -> <init>
    java.lang.Object next() -> next
    void advance() -> advance
    boolean nextInChain() -> nextInChain
    boolean nextInTable() -> nextInTable
    boolean advanceTo(com.google.common.cache.ReferenceEntry) -> advanceTo
    boolean hasNext() -> hasNext
    com.google.common.cache.LocalCache$WriteThroughEntry nextEntry() -> nextEntry
    void remove() -> remove
com.google.common.cache.LocalCache$KeyIterator -> com.google.common.cache.LocalCache$KeyIterator:
    com.google.common.cache.LocalCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache) -> <init>
    java.lang.Object next() -> next
com.google.common.cache.LocalCache$KeySet -> com.google.common.cache.LocalCache$KeySet:
    com.google.common.cache.LocalCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache,java.util.concurrent.ConcurrentMap) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.cache.LocalCache$LoadingSerializationProxy -> com.google.common.cache.LocalCache$LoadingSerializationProxy:
    long serialVersionUID -> serialVersionUID
    com.google.common.cache.LoadingCache autoDelegate -> autoDelegate
    void <init>(com.google.common.cache.LocalCache) -> <init>
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    java.lang.Object apply(java.lang.Object) -> apply
    void refresh(java.lang.Object) -> refresh
    java.lang.Object readResolve() -> readResolve
com.google.common.cache.LocalCache$LoadingValueReference -> com.google.common.cache.LocalCache$LoadingValueReference:
    com.google.common.cache.LocalCache$ValueReference oldValue -> oldValue
    com.google.common.util.concurrent.SettableFuture futureValue -> futureValue
    com.google.common.base.Stopwatch stopwatch -> stopwatch
    void <init>() -> <init>
    void <init>(com.google.common.cache.LocalCache$ValueReference) -> <init>
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    int getWeight() -> getWeight
    boolean set(java.lang.Object) -> set
    boolean setException(java.lang.Throwable) -> setException
    com.google.common.util.concurrent.ListenableFuture fullyFailedFuture(java.lang.Throwable) -> fullyFailedFuture
    void notifyNewValue(java.lang.Object) -> notifyNewValue
    com.google.common.util.concurrent.ListenableFuture loadFuture(java.lang.Object,com.google.common.cache.CacheLoader) -> loadFuture
    java.lang.Object compute(java.lang.Object,java.util.function.BiFunction) -> compute
    long elapsedNanos() -> elapsedNanos
    java.lang.Object waitForValue() -> waitForValue
    java.lang.Object get() -> get
    com.google.common.cache.LocalCache$ValueReference getOldValue() -> getOldValue
    com.google.common.cache.ReferenceEntry getEntry() -> getEntry
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> copyFor
com.google.common.cache.LocalCache$LoadingValueReference$1 -> com.google.common.cache.LocalCache$LoadingValueReference$1:
    com.google.common.cache.LocalCache$LoadingValueReference this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache$LoadingValueReference) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.cache.LocalCache$LocalLoadingCache -> com.google.common.cache.LocalCache$LocalLoadingCache:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader) -> <init>
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getUnchecked(java.lang.Object) -> getUnchecked
    com.google.common.collect.ImmutableMap getAll(java.lang.Iterable) -> getAll
    void refresh(java.lang.Object) -> refresh
    java.lang.Object apply(java.lang.Object) -> apply
    java.lang.Object writeReplace() -> writeReplace
com.google.common.cache.LocalCache$LocalManualCache -> com.google.common.cache.LocalCache$LocalManualCache:
    com.google.common.cache.LocalCache localCache -> localCache
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.cache.CacheBuilder) -> <init>
    void <init>(com.google.common.cache.LocalCache) -> <init>
    java.lang.Object getIfPresent(java.lang.Object) -> getIfPresent
    java.lang.Object get(java.lang.Object,java.util.concurrent.Callable) -> get
    com.google.common.collect.ImmutableMap getAllPresent(java.lang.Iterable) -> getAllPresent
    void put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    void invalidate(java.lang.Object) -> invalidate
    void invalidateAll(java.lang.Iterable) -> invalidateAll
    void invalidateAll() -> invalidateAll
    long size() -> size
    java.util.concurrent.ConcurrentMap asMap() -> asMap
    com.google.common.cache.CacheStats stats() -> stats
    void cleanUp() -> cleanUp
    java.lang.Object writeReplace() -> writeReplace
    void <init>(com.google.common.cache.LocalCache,com.google.common.cache.LocalCache$1) -> <init>
com.google.common.cache.LocalCache$LocalManualCache$1 -> com.google.common.cache.LocalCache$LocalManualCache$1:
    java.util.concurrent.Callable val$valueLoader -> val$valueLoader
    com.google.common.cache.LocalCache$LocalManualCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache$LocalManualCache,java.util.concurrent.Callable) -> <init>
    java.lang.Object load(java.lang.Object) -> load
com.google.common.cache.LocalCache$ManualSerializationProxy -> com.google.common.cache.LocalCache$ManualSerializationProxy:
    long serialVersionUID -> serialVersionUID
    com.google.common.cache.LocalCache$Strength keyStrength -> keyStrength
    com.google.common.cache.LocalCache$Strength valueStrength -> valueStrength
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    long expireAfterWriteNanos -> expireAfterWriteNanos
    long expireAfterAccessNanos -> expireAfterAccessNanos
    long maxWeight -> maxWeight
    com.google.common.cache.Weigher weigher -> weigher
    int concurrencyLevel -> concurrencyLevel
    com.google.common.cache.RemovalListener removalListener -> removalListener
    com.google.common.base.Ticker ticker -> ticker
    com.google.common.cache.CacheLoader loader -> loader
    com.google.common.cache.Cache delegate -> delegate
    void <init>(com.google.common.cache.LocalCache) -> <init>
    void <init>(com.google.common.cache.LocalCache$Strength,com.google.common.cache.LocalCache$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,long,com.google.common.cache.Weigher,int,com.google.common.cache.RemovalListener,com.google.common.base.Ticker,com.google.common.cache.CacheLoader) -> <init>
    com.google.common.cache.CacheBuilder recreateCacheBuilder() -> recreateCacheBuilder
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
    com.google.common.cache.Cache delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.cache.LocalCache$NullEntry -> com.google.common.cache.LocalCache$NullEntry:
    com.google.common.cache.LocalCache$NullEntry INSTANCE -> INSTANCE
    com.google.common.cache.LocalCache$NullEntry[] $VALUES -> $VALUES
    com.google.common.cache.LocalCache$NullEntry[] values() -> values
    com.google.common.cache.LocalCache$NullEntry valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    com.google.common.cache.ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInWriteQueue
    void <clinit>() -> <clinit>
com.google.common.cache.LocalCache$Segment -> com.google.common.cache.LocalCache$Segment:
    com.google.common.cache.LocalCache map -> map
    int count -> count
    long totalWeight -> totalWeight
    int modCount -> modCount
    int threshold -> threshold
    java.util.concurrent.atomic.AtomicReferenceArray table -> table
    long maxSegmentWeight -> maxSegmentWeight
    java.lang.ref.ReferenceQueue keyReferenceQueue -> keyReferenceQueue
    java.lang.ref.ReferenceQueue valueReferenceQueue -> valueReferenceQueue
    java.util.Queue recencyQueue -> recencyQueue
    java.util.concurrent.atomic.AtomicInteger readCount -> readCount
    java.util.Queue writeQueue -> writeQueue
    java.util.Queue accessQueue -> accessQueue
    com.google.common.cache.AbstractCache$StatsCounter statsCounter -> statsCounter
    void <init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter) -> <init>
    java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int) -> newEntryArray
    void initTable(java.util.concurrent.atomic.AtomicReferenceArray) -> initTable
    com.google.common.cache.ReferenceEntry newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> newEntry
    com.google.common.cache.ReferenceEntry copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> copyEntry
    void setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long) -> setValue
    java.lang.Object get(java.lang.Object,int,com.google.common.cache.CacheLoader) -> get
    java.lang.Object get(java.lang.Object,int) -> get
    java.lang.Object lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader) -> lockedGetOrLoad
    java.lang.Object waitForLoadingValue(com.google.common.cache.ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference) -> waitForLoadingValue
    java.lang.Object compute(java.lang.Object,int,java.util.function.BiFunction) -> compute
    java.lang.Object loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader) -> loadSync
    com.google.common.util.concurrent.ListenableFuture loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader) -> loadAsync
    java.lang.Object getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture) -> getAndRecordStats
    java.lang.Object scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader) -> scheduleRefresh
    java.lang.Object refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean) -> refresh
    com.google.common.cache.LocalCache$LoadingValueReference insertLoadingValueReference(java.lang.Object,int,boolean) -> insertLoadingValueReference
    void tryDrainReferenceQueues() -> tryDrainReferenceQueues
    void drainReferenceQueues() -> drainReferenceQueues
    void drainKeyReferenceQueue() -> drainKeyReferenceQueue
    void drainValueReferenceQueue() -> drainValueReferenceQueue
    void clearReferenceQueues() -> clearReferenceQueues
    void clearKeyReferenceQueue() -> clearKeyReferenceQueue
    void clearValueReferenceQueue() -> clearValueReferenceQueue
    void recordRead(com.google.common.cache.ReferenceEntry,long) -> recordRead
    void recordLockedRead(com.google.common.cache.ReferenceEntry,long) -> recordLockedRead
    void recordWrite(com.google.common.cache.ReferenceEntry,int,long) -> recordWrite
    void drainRecencyQueue() -> drainRecencyQueue
    void tryExpireEntries(long) -> tryExpireEntries
    void expireEntries(long) -> expireEntries
    void enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause) -> enqueueNotification
    void evictEntries(com.google.common.cache.ReferenceEntry) -> evictEntries
    com.google.common.cache.ReferenceEntry getNextEvictable() -> getNextEvictable
    com.google.common.cache.ReferenceEntry getFirst(int) -> getFirst
    com.google.common.cache.ReferenceEntry getEntry(java.lang.Object,int) -> getEntry
    com.google.common.cache.ReferenceEntry getLiveEntry(java.lang.Object,int,long) -> getLiveEntry
    java.lang.Object getLiveValue(com.google.common.cache.ReferenceEntry,long) -> getLiveValue
    boolean containsKey(java.lang.Object,int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> put
    void expand() -> expand
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> replace
    java.lang.Object remove(java.lang.Object,int) -> remove
    boolean remove(java.lang.Object,int,java.lang.Object) -> remove
    boolean storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object) -> storeLoadedValue
    void clear() -> clear
    com.google.common.cache.ReferenceEntry removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause) -> removeValueFromChain
    com.google.common.cache.ReferenceEntry removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry) -> removeEntryFromChain
    void removeCollectedEntry(com.google.common.cache.ReferenceEntry) -> removeCollectedEntry
    boolean reclaimKey(com.google.common.cache.ReferenceEntry,int) -> reclaimKey
    boolean reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference) -> reclaimValue
    boolean removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference) -> removeLoadingValue
    boolean removeEntry(com.google.common.cache.ReferenceEntry,int,com.google.common.cache.RemovalCause) -> removeEntry
    void postReadCleanup() -> postReadCleanup
    void preWriteCleanup(long) -> preWriteCleanup
    void postWriteCleanup() -> postWriteCleanup
    void cleanUp() -> cleanUp
    void runLockedCleanup(long) -> runLockedCleanup
    void runUnlockedCleanup() -> runUnlockedCleanup
com.google.common.cache.LocalCache$Segment$1 -> com.google.common.cache.LocalCache$Segment$1:
    java.lang.Object val$key -> val$key
    int val$hash -> val$hash
    com.google.common.cache.LocalCache$LoadingValueReference val$loadingValueReference -> val$loadingValueReference
    com.google.common.util.concurrent.ListenableFuture val$loadingFuture -> val$loadingFuture
    com.google.common.cache.LocalCache$Segment this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture) -> <init>
    void run() -> run
com.google.common.cache.LocalCache$SoftValueReference -> com.google.common.cache.LocalCache$SoftValueReference:
    com.google.common.cache.ReferenceEntry entry -> entry
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> <init>
    int getWeight() -> getWeight
    com.google.common.cache.ReferenceEntry getEntry() -> getEntry
    void notifyNewValue(java.lang.Object) -> notifyNewValue
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> copyFor
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    java.lang.Object waitForValue() -> waitForValue
com.google.common.cache.LocalCache$Strength -> com.google.common.cache.LocalCache$Strength:
    com.google.common.cache.LocalCache$Strength STRONG -> STRONG
    com.google.common.cache.LocalCache$Strength SOFT -> SOFT
    com.google.common.cache.LocalCache$Strength WEAK -> WEAK
    com.google.common.cache.LocalCache$Strength[] $VALUES -> $VALUES
    com.google.common.cache.LocalCache$Strength[] values() -> values
    com.google.common.cache.LocalCache$Strength valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
    void <init>(java.lang.String,int,com.google.common.cache.LocalCache$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.cache.LocalCache$Strength$1 -> com.google.common.cache.LocalCache$Strength$1:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.cache.LocalCache$Strength$2 -> com.google.common.cache.LocalCache$Strength$2:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.cache.LocalCache$Strength$3 -> com.google.common.cache.LocalCache$Strength$3:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.cache.LocalCache$ValueReference referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int) -> referenceValue
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.cache.LocalCache$StrongAccessEntry -> com.google.common.cache.LocalCache$StrongAccessEntry:
    long accessTime -> accessTime
    com.google.common.cache.ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.ReferenceEntry previousAccess -> previousAccess
    void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInAccessQueue
com.google.common.cache.LocalCache$StrongAccessWriteEntry -> com.google.common.cache.LocalCache$StrongAccessWriteEntry:
    long accessTime -> accessTime
    com.google.common.cache.ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.ReferenceEntry previousAccess -> previousAccess
    long writeTime -> writeTime
    com.google.common.cache.ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.ReferenceEntry previousWrite -> previousWrite
    void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$StrongEntry -> com.google.common.cache.LocalCache$StrongEntry:
    java.lang.Object key -> key
    int hash -> hash
    com.google.common.cache.ReferenceEntry next -> next
    com.google.common.cache.LocalCache$ValueReference valueReference -> valueReference
    void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    java.lang.Object getKey() -> getKey
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    int getHash() -> getHash
    com.google.common.cache.ReferenceEntry getNext() -> getNext
com.google.common.cache.LocalCache$StrongValueReference -> com.google.common.cache.LocalCache$StrongValueReference:
    java.lang.Object referent -> referent
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
    int getWeight() -> getWeight
    com.google.common.cache.ReferenceEntry getEntry() -> getEntry
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> copyFor
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    java.lang.Object waitForValue() -> waitForValue
    void notifyNewValue(java.lang.Object) -> notifyNewValue
com.google.common.cache.LocalCache$StrongWriteEntry -> com.google.common.cache.LocalCache$StrongWriteEntry:
    long writeTime -> writeTime
    com.google.common.cache.ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.ReferenceEntry previousWrite -> previousWrite
    void <init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$ValueIterator -> com.google.common.cache.LocalCache$ValueIterator:
    com.google.common.cache.LocalCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache) -> <init>
    java.lang.Object next() -> next
com.google.common.cache.LocalCache$ValueReference -> com.google.common.cache.LocalCache$ValueReference:
    java.lang.Object get() -> get
    java.lang.Object waitForValue() -> waitForValue
    int getWeight() -> getWeight
    com.google.common.cache.ReferenceEntry getEntry() -> getEntry
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> copyFor
    void notifyNewValue(java.lang.Object) -> notifyNewValue
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
com.google.common.cache.LocalCache$Values -> com.google.common.cache.LocalCache$Values:
    java.util.concurrent.ConcurrentMap map -> map
    com.google.common.cache.LocalCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache,java.util.concurrent.ConcurrentMap) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    boolean removeIf(java.util.function.Predicate) -> removeIf
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean lambda$removeIf$0(java.util.function.Predicate,java.lang.Object,java.lang.Object) -> lambda$removeIf$0
com.google.common.cache.LocalCache$WeakAccessEntry -> com.google.common.cache.LocalCache$WeakAccessEntry:
    long accessTime -> accessTime
    com.google.common.cache.ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.ReferenceEntry previousAccess -> previousAccess
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInAccessQueue
com.google.common.cache.LocalCache$WeakAccessWriteEntry -> com.google.common.cache.LocalCache$WeakAccessWriteEntry:
    long accessTime -> accessTime
    com.google.common.cache.ReferenceEntry nextAccess -> nextAccess
    com.google.common.cache.ReferenceEntry previousAccess -> previousAccess
    long writeTime -> writeTime
    com.google.common.cache.ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.ReferenceEntry previousWrite -> previousWrite
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$WeakEntry -> com.google.common.cache.LocalCache$WeakEntry:
    int hash -> hash
    com.google.common.cache.ReferenceEntry next -> next
    com.google.common.cache.LocalCache$ValueReference valueReference -> valueReference
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    java.lang.Object getKey() -> getKey
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInWriteQueue
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    int getHash() -> getHash
    com.google.common.cache.ReferenceEntry getNext() -> getNext
com.google.common.cache.LocalCache$WeakValueReference -> com.google.common.cache.LocalCache$WeakValueReference:
    com.google.common.cache.ReferenceEntry entry -> entry
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> <init>
    int getWeight() -> getWeight
    com.google.common.cache.ReferenceEntry getEntry() -> getEntry
    void notifyNewValue(java.lang.Object) -> notifyNewValue
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> copyFor
    boolean isLoading() -> isLoading
    boolean isActive() -> isActive
    java.lang.Object waitForValue() -> waitForValue
com.google.common.cache.LocalCache$WeakWriteEntry -> com.google.common.cache.LocalCache$WeakWriteEntry:
    long writeTime -> writeTime
    com.google.common.cache.ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.ReferenceEntry previousWrite -> previousWrite
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry) -> <init>
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$WeightedSoftValueReference -> com.google.common.cache.LocalCache$WeightedSoftValueReference:
    int weight -> weight
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int) -> <init>
    int getWeight() -> getWeight
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> copyFor
com.google.common.cache.LocalCache$WeightedStrongValueReference -> com.google.common.cache.LocalCache$WeightedStrongValueReference:
    int weight -> weight
    void <init>(java.lang.Object,int) -> <init>
    int getWeight() -> getWeight
com.google.common.cache.LocalCache$WeightedWeakValueReference -> com.google.common.cache.LocalCache$WeightedWeakValueReference:
    int weight -> weight
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int) -> <init>
    int getWeight() -> getWeight
    com.google.common.cache.LocalCache$ValueReference copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry) -> copyFor
com.google.common.cache.LocalCache$WriteQueue -> com.google.common.cache.LocalCache$WriteQueue:
    com.google.common.cache.ReferenceEntry head -> head
    void <init>() -> <init>
    boolean offer(com.google.common.cache.ReferenceEntry) -> offer
    com.google.common.cache.ReferenceEntry peek() -> peek
    com.google.common.cache.ReferenceEntry poll() -> poll
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
com.google.common.cache.LocalCache$WriteQueue$1 -> com.google.common.cache.LocalCache$WriteQueue$1:
    com.google.common.cache.ReferenceEntry nextWrite -> nextWrite
    com.google.common.cache.ReferenceEntry previousWrite -> previousWrite
    com.google.common.cache.LocalCache$WriteQueue this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache$WriteQueue) -> <init>
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.LocalCache$WriteQueue$2 -> com.google.common.cache.LocalCache$WriteQueue$2:
    com.google.common.cache.LocalCache$WriteQueue this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache$WriteQueue,com.google.common.cache.ReferenceEntry) -> <init>
    com.google.common.cache.ReferenceEntry computeNext(com.google.common.cache.ReferenceEntry) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.cache.LocalCache$WriteThroughEntry -> com.google.common.cache.LocalCache$WriteThroughEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    com.google.common.cache.LocalCache this$0 -> this$0
    void <init>(com.google.common.cache.LocalCache,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.String toString() -> toString
com.google.common.cache.LongAddable -> com.google.common.cache.LongAddable:
    void increment() -> increment
    void add(long) -> add
    long sum() -> sum
com.google.common.cache.LongAddables -> com.google.common.cache.LongAddables:
    com.google.common.base.Supplier SUPPLIER -> SUPPLIER
    void <init>() -> <init>
    com.google.common.cache.LongAddable create() -> create
    void <clinit>() -> <clinit>
com.google.common.cache.LongAddables$1 -> com.google.common.cache.LongAddables$1:
    void <init>() -> <init>
    com.google.common.cache.LongAddable get() -> get
    java.lang.Object get() -> get
com.google.common.cache.LongAddables$2 -> com.google.common.cache.LongAddables$2:
    void <init>() -> <init>
    com.google.common.cache.LongAddable get() -> get
    java.lang.Object get() -> get
com.google.common.cache.LongAddables$PureJavaLongAddable -> com.google.common.cache.LongAddables$PureJavaLongAddable:
    void <init>() -> <init>
    void increment() -> increment
    void add(long) -> add
    long sum() -> sum
    void <init>(com.google.common.cache.LongAddables$1) -> <init>
com.google.common.cache.LongAdder -> com.google.common.cache.LongAdder:
    long serialVersionUID -> serialVersionUID
    long fn(long,long) -> fn
    void <init>() -> <init>
    void add(long) -> add
    void increment() -> increment
    void decrement() -> decrement
    long sum() -> sum
    void reset() -> reset
    long sumThenReset() -> sumThenReset
    java.lang.String toString() -> toString
    long longValue() -> longValue
    int intValue() -> intValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.cache.ReferenceEntry -> com.google.common.cache.ReferenceEntry:
    com.google.common.cache.LocalCache$ValueReference getValueReference() -> getValueReference
    void setValueReference(com.google.common.cache.LocalCache$ValueReference) -> setValueReference
    com.google.common.cache.ReferenceEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    long getAccessTime() -> getAccessTime
    void setAccessTime(long) -> setAccessTime
    com.google.common.cache.ReferenceEntry getNextInAccessQueue() -> getNextInAccessQueue
    void setNextInAccessQueue(com.google.common.cache.ReferenceEntry) -> setNextInAccessQueue
    com.google.common.cache.ReferenceEntry getPreviousInAccessQueue() -> getPreviousInAccessQueue
    void setPreviousInAccessQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInAccessQueue
    long getWriteTime() -> getWriteTime
    void setWriteTime(long) -> setWriteTime
    com.google.common.cache.ReferenceEntry getNextInWriteQueue() -> getNextInWriteQueue
    void setNextInWriteQueue(com.google.common.cache.ReferenceEntry) -> setNextInWriteQueue
    com.google.common.cache.ReferenceEntry getPreviousInWriteQueue() -> getPreviousInWriteQueue
    void setPreviousInWriteQueue(com.google.common.cache.ReferenceEntry) -> setPreviousInWriteQueue
com.google.common.cache.RemovalCause -> com.google.common.cache.RemovalCause:
    com.google.common.cache.RemovalCause EXPLICIT -> EXPLICIT
    com.google.common.cache.RemovalCause REPLACED -> REPLACED
    com.google.common.cache.RemovalCause COLLECTED -> COLLECTED
    com.google.common.cache.RemovalCause EXPIRED -> EXPIRED
    com.google.common.cache.RemovalCause SIZE -> SIZE
    com.google.common.cache.RemovalCause[] $VALUES -> $VALUES
    com.google.common.cache.RemovalCause[] values() -> values
    com.google.common.cache.RemovalCause valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
    void <init>(java.lang.String,int,com.google.common.cache.RemovalCause$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.cache.RemovalCause$1 -> com.google.common.cache.RemovalCause$1:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalCause$2 -> com.google.common.cache.RemovalCause$2:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalCause$3 -> com.google.common.cache.RemovalCause$3:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalCause$4 -> com.google.common.cache.RemovalCause$4:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalCause$5 -> com.google.common.cache.RemovalCause$5:
    void <init>(java.lang.String,int) -> <init>
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.RemovalListener -> com.google.common.cache.RemovalListener:
    void onRemoval(com.google.common.cache.RemovalNotification) -> onRemoval
com.google.common.cache.RemovalListeners -> com.google.common.cache.RemovalListeners:
    void <init>() -> <init>
    com.google.common.cache.RemovalListener asynchronous(com.google.common.cache.RemovalListener,java.util.concurrent.Executor) -> asynchronous
com.google.common.cache.RemovalListeners$1 -> com.google.common.cache.RemovalListeners$1:
    java.util.concurrent.Executor val$executor -> val$executor
    com.google.common.cache.RemovalListener val$listener -> val$listener
    void <init>(java.util.concurrent.Executor,com.google.common.cache.RemovalListener) -> <init>
    void onRemoval(com.google.common.cache.RemovalNotification) -> onRemoval
com.google.common.cache.RemovalListeners$1$1 -> com.google.common.cache.RemovalListeners$1$1:
    com.google.common.cache.RemovalNotification val$notification -> val$notification
    com.google.common.cache.RemovalListeners$1 this$0 -> this$0
    void <init>(com.google.common.cache.RemovalListeners$1,com.google.common.cache.RemovalNotification) -> <init>
    void run() -> run
com.google.common.cache.RemovalNotification -> com.google.common.cache.RemovalNotification:
    com.google.common.cache.RemovalCause cause -> cause
    long serialVersionUID -> serialVersionUID
    com.google.common.cache.RemovalNotification create(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause) -> create
    void <init>(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause) -> <init>
    com.google.common.cache.RemovalCause getCause() -> getCause
    boolean wasEvicted() -> wasEvicted
com.google.common.cache.Striped64 -> com.google.common.cache.Striped64:
    java.lang.ThreadLocal threadHashCode -> threadHashCode
    java.util.Random rng -> rng
    int NCPU -> NCPU
    com.google.common.cache.Striped64$Cell[] cells -> cells
    long base -> base
    int busy -> busy
    sun.misc.Unsafe UNSAFE -> UNSAFE
    long baseOffset -> baseOffset
    long busyOffset -> busyOffset
    void <init>() -> <init>
    boolean casBase(long,long) -> casBase
    boolean casBusy() -> casBusy
    long fn(long,long) -> fn
    void retryUpdate(long,int[],boolean) -> retryUpdate
    void internalReset(long) -> internalReset
    sun.misc.Unsafe getUnsafe() -> getUnsafe
    sun.misc.Unsafe access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.cache.Striped64$1 -> com.google.common.cache.Striped64$1:
    void <init>() -> <init>
    sun.misc.Unsafe run() -> run
    java.lang.Object run() -> run
com.google.common.cache.Striped64$Cell -> com.google.common.cache.Striped64$Cell:
    long p0 -> p0
    long p1 -> p1
    long p2 -> p2
    long p3 -> p3
    long p4 -> p4
    long p5 -> p5
    long p6 -> p6
    long value -> value
    long q0 -> q0
    long q1 -> q1
    long q2 -> q2
    long q3 -> q3
    long q4 -> q4
    long q5 -> q5
    long q6 -> q6
    sun.misc.Unsafe UNSAFE -> UNSAFE
    long valueOffset -> valueOffset
    void <init>(long) -> <init>
    boolean cas(long,long) -> cas
    void <clinit>() -> <clinit>
com.google.common.cache.Weigher -> com.google.common.cache.Weigher:
    int weigh(java.lang.Object,java.lang.Object) -> weigh
com.google.common.cache.package-info -> com.google.common.cache.package-info:
com.google.common.collect.AbstractBiMap -> com.google.common.collect.AbstractBiMap:
    java.util.Map delegate -> delegate
    com.google.common.collect.AbstractBiMap inverse -> inverse
    java.util.Set keySet -> keySet
    java.util.Set valueSet -> valueSet
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,java.util.Map) -> <init>
    void <init>(java.util.Map,com.google.common.collect.AbstractBiMap) -> <init>
    java.util.Map delegate() -> delegate
    java.lang.Object checkKey(java.lang.Object) -> checkKey
    java.lang.Object checkValue(java.lang.Object) -> checkValue
    void setDelegates(java.util.Map,java.util.Map) -> setDelegates
    com.google.common.collect.AbstractBiMap makeInverse(java.util.Map) -> makeInverse
    void setInverse(com.google.common.collect.AbstractBiMap) -> setInverse
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object putInBothMaps(java.lang.Object,java.lang.Object,boolean) -> putInBothMaps
    void updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object) -> updateInverseMap
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeFromBothMaps(java.lang.Object) -> removeFromBothMaps
    void removeFromInverseMap(java.lang.Object) -> removeFromInverseMap
    void putAll(java.util.Map) -> putAll
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    void clear() -> clear
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set keySet() -> keySet
    java.util.Set values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.Iterator entrySetIterator() -> entrySetIterator
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
    java.util.Map access$100(com.google.common.collect.AbstractBiMap) -> access$100
    java.lang.Object access$200(com.google.common.collect.AbstractBiMap,java.lang.Object) -> access$200
    void access$500(com.google.common.collect.AbstractBiMap,java.lang.Object,boolean,java.lang.Object,java.lang.Object) -> access$500
    void access$600(com.google.common.collect.AbstractBiMap,java.lang.Object) -> access$600
    void <init>(java.util.Map,com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1) -> <init>
com.google.common.collect.AbstractBiMap$1 -> com.google.common.collect.AbstractBiMap$1:
    java.util.Map$Entry entry -> entry
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.AbstractBiMap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractBiMap,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.AbstractBiMap$BiMapEntry -> com.google.common.collect.AbstractBiMap$BiMapEntry:
    java.util.Map$Entry delegate -> delegate
    com.google.common.collect.AbstractBiMap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractBiMap,java.util.Map$Entry) -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.AbstractBiMap$EntrySet -> com.google.common.collect.AbstractBiMap$EntrySet:
    java.util.Set esDelegate -> esDelegate
    com.google.common.collect.AbstractBiMap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractBiMap) -> <init>
    java.util.Set delegate() -> delegate
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1) -> <init>
com.google.common.collect.AbstractBiMap$Inverse -> com.google.common.collect.AbstractBiMap$Inverse:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.collect.AbstractBiMap) -> <init>
    java.lang.Object checkKey(java.lang.Object) -> checkKey
    java.lang.Object checkValue(java.lang.Object) -> checkValue
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.AbstractBiMap$KeySet -> com.google.common.collect.AbstractBiMap$KeySet:
    com.google.common.collect.AbstractBiMap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractBiMap) -> <init>
    java.util.Set delegate() -> delegate
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.util.Iterator iterator() -> iterator
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1) -> <init>
com.google.common.collect.AbstractBiMap$ValueSet -> com.google.common.collect.AbstractBiMap$ValueSet:
    java.util.Set valuesDelegate -> valuesDelegate
    com.google.common.collect.AbstractBiMap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractBiMap) -> <init>
    java.util.Set delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.String toString() -> toString
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.collect.AbstractBiMap,com.google.common.collect.AbstractBiMap$1) -> <init>
com.google.common.collect.AbstractIndexedListIterator -> com.google.common.collect.AbstractIndexedListIterator:
    int size -> size
    int position -> position
    java.lang.Object get(int) -> get
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    int nextIndex() -> nextIndex
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
com.google.common.collect.AbstractIterator -> com.google.common.collect.AbstractIterator:
    com.google.common.collect.AbstractIterator$State state -> state
    java.lang.Object next -> next
    void <init>() -> <init>
    java.lang.Object computeNext() -> computeNext
    java.lang.Object endOfData() -> endOfData
    boolean hasNext() -> hasNext
    boolean tryToComputeNext() -> tryToComputeNext
    java.lang.Object next() -> next
    java.lang.Object peek() -> peek
com.google.common.collect.AbstractIterator$1 -> com.google.common.collect.AbstractIterator$1:
    int[] $SwitchMap$com$google$common$collect$AbstractIterator$State -> $SwitchMap$com$google$common$collect$AbstractIterator$State
    void <clinit>() -> <clinit>
com.google.common.collect.AbstractIterator$State -> com.google.common.collect.AbstractIterator$State:
    com.google.common.collect.AbstractIterator$State READY -> READY
    com.google.common.collect.AbstractIterator$State NOT_READY -> NOT_READY
    com.google.common.collect.AbstractIterator$State DONE -> DONE
    com.google.common.collect.AbstractIterator$State FAILED -> FAILED
    com.google.common.collect.AbstractIterator$State[] $VALUES -> $VALUES
    com.google.common.collect.AbstractIterator$State[] values() -> values
    com.google.common.collect.AbstractIterator$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.AbstractListMultimap -> com.google.common.collect.AbstractListMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    java.util.List createCollection() -> createCollection
    java.util.List createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> wrapCollection
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
com.google.common.collect.AbstractMapBasedMultimap -> com.google.common.collect.AbstractMapBasedMultimap:
    java.util.Map map -> map
    int totalSize -> totalSize
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    void setMap(java.util.Map) -> setMap
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createCollection(java.lang.Object) -> createCollection
    java.util.Map backingMap() -> backingMap
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Collection getOrCreateCollection(java.lang.Object) -> getOrCreateCollection
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> wrapCollection
    java.util.List wrapList(java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> wrapList
    java.util.Iterator iteratorOrListIterator(java.util.Collection) -> iteratorOrListIterator
    java.util.Set createKeySet() -> createKeySet
    java.util.Set createMaybeNavigableKeySet() -> createMaybeNavigableKeySet
    void removeValuesForKey(java.lang.Object) -> removeValuesForKey
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Spliterator valueSpliterator() -> valueSpliterator
    com.google.common.collect.Multiset createKeys() -> createKeys
    java.util.Collection entries() -> entries
    java.util.Collection createEntries() -> createEntries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Map createAsMap() -> createAsMap
    java.util.Map createMaybeNavigableAsMap() -> createMaybeNavigableAsMap
    void lambda$forEach$3(java.util.function.BiConsumer,java.lang.Object,java.util.Collection) -> lambda$forEach$3
    void lambda$null$2(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> lambda$null$2
    java.util.Spliterator lambda$entrySpliterator$1(java.util.Map$Entry) -> lambda$entrySpliterator$1
    java.util.Map$Entry lambda$null$0(java.lang.Object,java.lang.Object) -> lambda$null$0
    java.util.Map access$000(com.google.common.collect.AbstractMapBasedMultimap) -> access$000
    java.util.Iterator access$100(java.util.Collection) -> access$100
    int access$210(com.google.common.collect.AbstractMapBasedMultimap) -> access$210
    int access$208(com.google.common.collect.AbstractMapBasedMultimap) -> access$208
    int access$200(com.google.common.collect.AbstractMapBasedMultimap) -> access$200
    int access$202(com.google.common.collect.AbstractMapBasedMultimap,int) -> access$202
    void access$300(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object) -> access$300
com.google.common.collect.AbstractMapBasedMultimap$1 -> com.google.common.collect.AbstractMapBasedMultimap$1:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap) -> <init>
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.AbstractMapBasedMultimap$2 -> com.google.common.collect.AbstractMapBasedMultimap$2:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap) -> <init>
    java.util.Map$Entry output(java.lang.Object,java.lang.Object) -> output
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
com.google.common.collect.AbstractMapBasedMultimap$AsMap -> com.google.common.collect.AbstractMapBasedMultimap$AsMap:
    java.util.Map submap -> submap
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map) -> <init>
    java.util.Set createEntrySet() -> createEntrySet
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    int size() -> size
    java.util.Collection remove(java.lang.Object) -> remove
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void clear() -> clear
    java.util.Map$Entry wrapEntry(java.util.Map$Entry) -> wrapEntry
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries -> com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$AsMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator -> com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:
    java.util.Iterator delegateIterator -> delegateIterator
    java.util.Collection collection -> collection
    com.google.common.collect.AbstractMapBasedMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$AsMap) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.AbstractMapBasedMultimap$Itr -> com.google.common.collect.AbstractMapBasedMultimap$Itr:
    java.util.Iterator keyIterator -> keyIterator
    java.lang.Object key -> key
    java.util.Collection collection -> collection
    java.util.Iterator valueIterator -> valueIterator
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap) -> <init>
    java.lang.Object output(java.lang.Object,java.lang.Object) -> output
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$KeySet -> com.google.common.collect.AbstractMapBasedMultimap$KeySet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.Map) -> <init>
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.AbstractMapBasedMultimap$KeySet$1 -> com.google.common.collect.AbstractMapBasedMultimap$KeySet$1:
    java.util.Map$Entry entry -> entry
    java.util.Iterator val$entryIterator -> val$entryIterator
    com.google.common.collect.AbstractMapBasedMultimap$KeySet this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$KeySet,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap -> com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.NavigableMap) -> <init>
    java.util.NavigableMap sortedMap() -> sortedMap
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.Map$Entry pollAsMapEntry(java.util.Iterator) -> pollAsMapEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.NavigableSet keySet() -> keySet
    java.util.NavigableSet createKeySet() -> createKeySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object) -> headMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.SortedSet keySet() -> keySet
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet -> com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.NavigableMap) -> <init>
    java.util.NavigableMap sortedMap() -> sortedMap
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet headSet(java.lang.Object) -> headSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object) -> tailSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedMap sortedMap() -> sortedMap
com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList -> com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap -> com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:
    java.util.SortedSet sortedKeySet -> sortedKeySet
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap) -> <init>
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedSet keySet() -> keySet
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet -> com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.util.SortedMap) -> <init>
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object first() -> first
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.lang.Object last() -> last
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection -> com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:
    java.lang.Object key -> key
    java.util.Collection delegate -> delegate
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection ancestor -> ancestor
    java.util.Collection ancestorDelegate -> ancestorDelegate
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Collection,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    void refreshIfEmpty() -> refreshIfEmpty
    void removeIfEmpty() -> removeIfEmpty
    java.lang.Object getKey() -> getKey
    void addToMap() -> addToMap
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Collection getDelegate() -> getDelegate
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    boolean add(java.lang.Object) -> add
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection getAncestor() -> getAncestor
    boolean addAll(java.util.Collection) -> addAll
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator -> com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:
    java.util.Iterator delegateIterator -> delegateIterator
    java.util.Collection originalDelegate -> originalDelegate
    com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection,java.util.Iterator) -> <init>
    void validateIterator() -> validateIterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator getDelegateIterator() -> getDelegateIterator
com.google.common.collect.AbstractMapBasedMultimap$WrappedList -> com.google.common.collect.AbstractMapBasedMultimap$WrappedList:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.List,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    java.util.List getListDelegate() -> getListDelegate
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator -> com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:
    com.google.common.collect.AbstractMapBasedMultimap$WrappedList this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList) -> <init>
    void <init>(com.google.common.collect.AbstractMapBasedMultimap$WrappedList,int) -> <init>
    java.util.ListIterator getDelegateListIterator() -> getDelegateListIterator
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet -> com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.NavigableSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    java.util.NavigableSet getSortedSetDelegate() -> getSortedSetDelegate
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet wrap(java.util.NavigableSet) -> wrap
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet getSortedSetDelegate() -> getSortedSetDelegate
com.google.common.collect.AbstractMapBasedMultimap$WrappedSet -> com.google.common.collect.AbstractMapBasedMultimap$WrappedSet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.Set) -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet -> com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:
    com.google.common.collect.AbstractMapBasedMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultimap,java.lang.Object,java.util.SortedSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection) -> <init>
    java.util.SortedSet getSortedSetDelegate() -> getSortedSetDelegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
com.google.common.collect.AbstractMapBasedMultiset -> com.google.common.collect.AbstractMapBasedMultiset:
    java.util.Map backingMap -> backingMap
    long size -> size
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    void setBackingMap(java.util.Map) -> setBackingMap
    java.util.Set entrySet() -> entrySet
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Iterator entryIterator() -> entryIterator
    void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    void clear() -> clear
    int distinctElements() -> distinctElements
    int size() -> size
    java.util.Iterator iterator() -> iterator
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    int getAndSet(com.google.common.collect.Count,int) -> getAndSet
    void readObjectNoData() -> readObjectNoData
    void lambda$forEachEntry$0(java.util.function.ObjIntConsumer,java.lang.Object,com.google.common.collect.Count) -> lambda$forEachEntry$0
    long access$000(com.google.common.collect.AbstractMapBasedMultiset) -> access$000
    long access$002(com.google.common.collect.AbstractMapBasedMultiset,long) -> access$002
    java.util.Map access$100(com.google.common.collect.AbstractMapBasedMultiset) -> access$100
    long access$010(com.google.common.collect.AbstractMapBasedMultiset) -> access$010
com.google.common.collect.AbstractMapBasedMultiset$1 -> com.google.common.collect.AbstractMapBasedMultiset$1:
    java.util.Map$Entry toRemove -> toRemove
    java.util.Iterator val$backingEntries -> val$backingEntries
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultiset,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapBasedMultiset$2 -> com.google.common.collect.AbstractMapBasedMultiset$2:
    java.util.Map$Entry toRemove -> toRemove
    java.util.Iterator val$backingEntries -> val$backingEntries
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultiset,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    com.google.common.collect.Multiset$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.AbstractMapBasedMultiset$2$1 -> com.google.common.collect.AbstractMapBasedMultiset$2$1:
    java.util.Map$Entry val$mapEntry -> val$mapEntry
    com.google.common.collect.AbstractMapBasedMultiset$2 this$1 -> this$1
    void <init>(com.google.common.collect.AbstractMapBasedMultiset$2,java.util.Map$Entry) -> <init>
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator -> com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:
    java.util.Iterator entryIterator -> entryIterator
    java.util.Map$Entry currentEntry -> currentEntry
    int occurrencesLeft -> occurrencesLeft
    boolean canRemove -> canRemove
    com.google.common.collect.AbstractMapBasedMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMapBasedMultiset) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.AbstractMapEntry -> com.google.common.collect.AbstractMapEntry:
    void <init>() -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultimap -> com.google.common.collect.AbstractMultimap:
    java.util.Collection entries -> entries
    java.util.Set keySet -> keySet
    com.google.common.collect.Multiset keys -> keys
    java.util.Collection values -> values
    java.util.Map asMap -> asMap
    void <init>() -> <init>
    boolean isEmpty() -> isEmpty
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection entries() -> entries
    java.util.Collection createEntries() -> createEntries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
    com.google.common.collect.Multiset keys() -> keys
    com.google.common.collect.Multiset createKeys() -> createKeys
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Spliterator valueSpliterator() -> valueSpliterator
    java.util.Map asMap() -> asMap
    java.util.Map createAsMap() -> createAsMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultimap$Entries -> com.google.common.collect.AbstractMultimap$Entries:
    com.google.common.collect.AbstractMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultimap) -> <init>
    com.google.common.collect.Multimap multimap() -> multimap
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
com.google.common.collect.AbstractMultimap$EntrySet -> com.google.common.collect.AbstractMultimap$EntrySet:
    com.google.common.collect.AbstractMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultimap) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.AbstractMultimap$Values -> com.google.common.collect.AbstractMultimap$Values:
    com.google.common.collect.AbstractMultimap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultimap) -> <init>
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
com.google.common.collect.AbstractMultiset -> com.google.common.collect.AbstractMultiset:
    java.util.Set elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    void <init>() -> <init>
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    int add(java.lang.Object,int) -> add
    boolean remove(java.lang.Object) -> remove
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    java.util.Set elementSet() -> elementSet
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Set entrySet() -> entrySet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractMultiset$ElementSet -> com.google.common.collect.AbstractMultiset$ElementSet:
    com.google.common.collect.AbstractMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultiset) -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
com.google.common.collect.AbstractMultiset$EntrySet -> com.google.common.collect.AbstractMultiset$EntrySet:
    com.google.common.collect.AbstractMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractMultiset) -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.AbstractNavigableMap -> com.google.common.collect.AbstractNavigableMap:
    void <init>() -> <init>
    java.lang.Object get(java.lang.Object) -> get
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Set keySet() -> keySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
com.google.common.collect.AbstractNavigableMap$1 -> com.google.common.collect.AbstractNavigableMap$1:
com.google.common.collect.AbstractNavigableMap$DescendingMap -> com.google.common.collect.AbstractNavigableMap$DescendingMap:
    com.google.common.collect.AbstractNavigableMap this$0 -> this$0
    void <init>(com.google.common.collect.AbstractNavigableMap) -> <init>
    java.util.NavigableMap forward() -> forward
    java.util.Iterator entryIterator() -> entryIterator
    void <init>(com.google.common.collect.AbstractNavigableMap,com.google.common.collect.AbstractNavigableMap$1) -> <init>
com.google.common.collect.AbstractRangeSet -> com.google.common.collect.AbstractRangeSet:
    void <init>() -> <init>
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    boolean isEmpty() -> isEmpty
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    void clear() -> clear
    boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    void addAll(com.google.common.collect.RangeSet) -> addAll
    void removeAll(com.google.common.collect.RangeSet) -> removeAll
    boolean intersects(com.google.common.collect.Range) -> intersects
    boolean encloses(com.google.common.collect.Range) -> encloses
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractSequentialIterator -> com.google.common.collect.AbstractSequentialIterator:
    java.lang.Object nextOrNull -> nextOrNull
    void <init>(java.lang.Object) -> <init>
    java.lang.Object computeNext(java.lang.Object) -> computeNext
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.AbstractSetMultimap -> com.google.common.collect.AbstractSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    java.util.Set createCollection() -> createCollection
    java.util.Set createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> wrapCollection
    java.util.Set get(java.lang.Object) -> get
    java.util.Set entries() -> entries
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean equals(java.lang.Object) -> equals
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
com.google.common.collect.AbstractSortedKeySortedSetMultimap -> com.google.common.collect.AbstractSortedKeySortedSetMultimap:
    void <init>(java.util.SortedMap) -> <init>
    java.util.SortedMap asMap() -> asMap
    java.util.SortedMap backingMap() -> backingMap
    java.util.SortedSet keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
    java.util.Map asMap() -> asMap
    java.util.Set keySet() -> keySet
    java.util.Map backingMap() -> backingMap
com.google.common.collect.AbstractSortedMultiset -> com.google.common.collect.AbstractSortedMultiset:
    java.util.Comparator comparator -> comparator
    com.google.common.collect.SortedMultiset descendingMultiset -> descendingMultiset
    void <init>() -> <init>
    void <init>(java.util.Comparator) -> <init>
    java.util.NavigableSet elementSet() -> elementSet
    java.util.NavigableSet createElementSet() -> createElementSet
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    java.util.Iterator descendingIterator() -> descendingIterator
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.SortedMultiset createDescendingMultiset() -> createDescendingMultiset
    java.util.Set createElementSet() -> createElementSet
    java.util.Set elementSet() -> elementSet
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.AbstractSortedMultiset$1DescendingMultisetImpl -> com.google.common.collect.AbstractSortedMultiset$1DescendingMultisetImpl:
    com.google.common.collect.AbstractSortedMultiset this$0 -> this$0
    void <init>(com.google.common.collect.AbstractSortedMultiset) -> <init>
    com.google.common.collect.SortedMultiset forwardMultiset() -> forwardMultiset
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.AbstractSortedSetMultimap -> com.google.common.collect.AbstractSortedSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    java.util.SortedSet createCollection() -> createCollection
    java.util.SortedSet createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.SortedSet unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> wrapCollection
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    java.util.Collection values() -> values
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    java.util.Set createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
    java.util.Set createCollection() -> createCollection
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection createCollection() -> createCollection
    java.util.Collection createUnmodifiableEmptyCollection() -> createUnmodifiableEmptyCollection
com.google.common.collect.AbstractTable -> com.google.common.collect.AbstractTable:
    java.util.Set cellSet -> cellSet
    java.util.Collection values -> values
    void <init>() -> <init>
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsColumn(java.lang.Object) -> containsColumn
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.util.Set cellSet() -> cellSet
    java.util.Set createCellSet() -> createCellSet
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Spliterator cellSpliterator() -> cellSpliterator
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
    java.util.Iterator valuesIterator() -> valuesIterator
    java.util.Spliterator valuesSpliterator() -> valuesSpliterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.AbstractTable$1 -> com.google.common.collect.AbstractTable$1:
    com.google.common.collect.AbstractTable this$0 -> this$0
    void <init>(com.google.common.collect.AbstractTable,java.util.Iterator) -> <init>
    java.lang.Object transform(com.google.common.collect.Table$Cell) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.AbstractTable$CellSet -> com.google.common.collect.AbstractTable$CellSet:
    com.google.common.collect.AbstractTable this$0 -> this$0
    void <init>(com.google.common.collect.AbstractTable) -> <init>
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    int size() -> size
com.google.common.collect.AbstractTable$Values -> com.google.common.collect.AbstractTable$Values:
    com.google.common.collect.AbstractTable this$0 -> this$0
    void <init>(com.google.common.collect.AbstractTable) -> <init>
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
    int size() -> size
com.google.common.collect.AllEqualOrdering -> com.google.common.collect.AllEqualOrdering:
    com.google.common.collect.AllEqualOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.collect.ArrayListMultimap -> com.google.common.collect.ArrayListMultimap:
    int DEFAULT_VALUES_PER_KEY -> DEFAULT_VALUES_PER_KEY
    int expectedValuesPerKey -> expectedValuesPerKey
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ArrayListMultimap create() -> create
    com.google.common.collect.ArrayListMultimap create(int,int) -> create
    com.google.common.collect.ArrayListMultimap create(com.google.common.collect.Multimap) -> create
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void <init>(com.google.common.collect.Multimap) -> <init>
    java.util.List createCollection() -> createCollection
    void trimToSize() -> trimToSize
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    boolean equals(java.lang.Object) -> equals
    java.util.Map asMap() -> asMap
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List get(java.lang.Object) -> get
    void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Collection entries() -> entries
    java.util.Collection values() -> values
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    java.util.Collection createCollection() -> createCollection
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isEmpty() -> isEmpty
com.google.common.collect.ArrayListMultimapGwtSerializationDependencies -> com.google.common.collect.ArrayListMultimapGwtSerializationDependencies:
    void <init>(java.util.Map) -> <init>
com.google.common.collect.ArrayTable -> com.google.common.collect.ArrayTable:
    com.google.common.collect.ImmutableList rowList -> rowList
    com.google.common.collect.ImmutableList columnList -> columnList
    com.google.common.collect.ImmutableMap rowKeyToIndex -> rowKeyToIndex
    com.google.common.collect.ImmutableMap columnKeyToIndex -> columnKeyToIndex
    java.lang.Object[][] array -> array
    com.google.common.collect.ArrayTable$ColumnMap columnMap -> columnMap
    com.google.common.collect.ArrayTable$RowMap rowMap -> rowMap
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ArrayTable create(java.lang.Iterable,java.lang.Iterable) -> create
    com.google.common.collect.ArrayTable create(com.google.common.collect.Table) -> create
    void <init>(java.lang.Iterable,java.lang.Iterable) -> <init>
    void <init>(com.google.common.collect.Table) -> <init>
    void <init>(com.google.common.collect.ArrayTable) -> <init>
    com.google.common.collect.ImmutableList rowKeyList() -> rowKeyList
    com.google.common.collect.ImmutableList columnKeyList() -> columnKeyList
    java.lang.Object at(int,int) -> at
    java.lang.Object set(int,int,java.lang.Object) -> set
    java.lang.Object[][] toArray(java.lang.Class) -> toArray
    void clear() -> clear
    void eraseAll() -> eraseAll
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object erase(java.lang.Object,java.lang.Object) -> erase
    int size() -> size
    java.util.Set cellSet() -> cellSet
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Spliterator cellSpliterator() -> cellSpliterator
    com.google.common.collect.Table$Cell getCell(int) -> getCell
    java.lang.Object getValue(int) -> getValue
    java.util.Map column(java.lang.Object) -> column
    com.google.common.collect.ImmutableSet columnKeySet() -> columnKeySet
    java.util.Map columnMap() -> columnMap
    java.util.Map row(java.lang.Object) -> row
    com.google.common.collect.ImmutableSet rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    java.util.Collection values() -> values
    java.util.Iterator valuesIterator() -> valuesIterator
    java.util.Spliterator valuesSpliterator() -> valuesSpliterator
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Set rowKeySet() -> rowKeySet
    com.google.common.collect.Table$Cell access$000(com.google.common.collect.ArrayTable,int) -> access$000
    com.google.common.collect.ImmutableList access$100(com.google.common.collect.ArrayTable) -> access$100
    com.google.common.collect.ImmutableList access$200(com.google.common.collect.ArrayTable) -> access$200
    com.google.common.collect.ImmutableMap access$300(com.google.common.collect.ArrayTable) -> access$300
    com.google.common.collect.ImmutableMap access$600(com.google.common.collect.ArrayTable) -> access$600
    java.lang.Object access$800(com.google.common.collect.ArrayTable,int) -> access$800
com.google.common.collect.ArrayTable$1 -> com.google.common.collect.ArrayTable$1:
    com.google.common.collect.ArrayTable this$0 -> this$0
    void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    com.google.common.collect.Table$Cell get(int) -> get
    java.lang.Object get(int) -> get
com.google.common.collect.ArrayTable$2 -> com.google.common.collect.ArrayTable$2:
    int rowIndex -> rowIndex
    int columnIndex -> columnIndex
    int val$index -> val$index
    com.google.common.collect.ArrayTable this$0 -> this$0
    void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    java.lang.Object getRowKey() -> getRowKey
    java.lang.Object getColumnKey() -> getColumnKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.ArrayTable$3 -> com.google.common.collect.ArrayTable$3:
    com.google.common.collect.ArrayTable this$0 -> this$0
    void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    java.lang.Object get(int) -> get
com.google.common.collect.ArrayTable$ArrayMap -> com.google.common.collect.ArrayTable$ArrayMap:
    com.google.common.collect.ImmutableMap keyIndex -> keyIndex
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.util.Set keySet() -> keySet
    java.lang.Object getKey(int) -> getKey
    java.lang.String getKeyRole() -> getKeyRole
    java.lang.Object getValue(int) -> getValue
    java.lang.Object setValue(int,java.lang.Object) -> setValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Map$Entry getEntry(int) -> getEntry
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ArrayTable$1) -> <init>
com.google.common.collect.ArrayTable$ArrayMap$1 -> com.google.common.collect.ArrayTable$ArrayMap$1:
    int val$index -> val$index
    com.google.common.collect.ArrayTable$ArrayMap this$0 -> this$0
    void <init>(com.google.common.collect.ArrayTable$ArrayMap,int) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.ArrayTable$ArrayMap$2 -> com.google.common.collect.ArrayTable$ArrayMap$2:
    com.google.common.collect.ArrayTable$ArrayMap this$0 -> this$0
    void <init>(com.google.common.collect.ArrayTable$ArrayMap,int) -> <init>
    java.util.Map$Entry get(int) -> get
    java.lang.Object get(int) -> get
com.google.common.collect.ArrayTable$Column -> com.google.common.collect.ArrayTable$Column:
    int columnIndex -> columnIndex
    com.google.common.collect.ArrayTable this$0 -> this$0
    void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    java.lang.String getKeyRole() -> getKeyRole
    java.lang.Object getValue(int) -> getValue
    java.lang.Object setValue(int,java.lang.Object) -> setValue
com.google.common.collect.ArrayTable$ColumnMap -> com.google.common.collect.ArrayTable$ColumnMap:
    com.google.common.collect.ArrayTable this$0 -> this$0
    void <init>(com.google.common.collect.ArrayTable) -> <init>
    java.lang.String getKeyRole() -> getKeyRole
    java.util.Map getValue(int) -> getValue
    java.util.Map setValue(int,java.util.Map) -> setValue
    java.util.Map put(java.lang.Object,java.util.Map) -> put
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object setValue(int,java.lang.Object) -> setValue
    java.lang.Object getValue(int) -> getValue
    void <init>(com.google.common.collect.ArrayTable,com.google.common.collect.ArrayTable$1) -> <init>
com.google.common.collect.ArrayTable$Row -> com.google.common.collect.ArrayTable$Row:
    int rowIndex -> rowIndex
    com.google.common.collect.ArrayTable this$0 -> this$0
    void <init>(com.google.common.collect.ArrayTable,int) -> <init>
    java.lang.String getKeyRole() -> getKeyRole
    java.lang.Object getValue(int) -> getValue
    java.lang.Object setValue(int,java.lang.Object) -> setValue
com.google.common.collect.ArrayTable$RowMap -> com.google.common.collect.ArrayTable$RowMap:
    com.google.common.collect.ArrayTable this$0 -> this$0
    void <init>(com.google.common.collect.ArrayTable) -> <init>
    java.lang.String getKeyRole() -> getKeyRole
    java.util.Map getValue(int) -> getValue
    java.util.Map setValue(int,java.util.Map) -> setValue
    java.util.Map put(java.lang.Object,java.util.Map) -> put
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object setValue(int,java.lang.Object) -> setValue
    java.lang.Object getValue(int) -> getValue
    void <init>(com.google.common.collect.ArrayTable,com.google.common.collect.ArrayTable$1) -> <init>
com.google.common.collect.BaseImmutableMultimap -> com.google.common.collect.BaseImmutableMultimap:
    void <init>() -> <init>
com.google.common.collect.BiMap -> com.google.common.collect.BiMap:
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    void putAll(java.util.Map) -> putAll
    java.util.Set values() -> values
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Collection values() -> values
com.google.common.collect.BoundType -> com.google.common.collect.BoundType:
    com.google.common.collect.BoundType OPEN -> OPEN
    com.google.common.collect.BoundType CLOSED -> CLOSED
    boolean inclusive -> inclusive
    com.google.common.collect.BoundType[] $VALUES -> $VALUES
    com.google.common.collect.BoundType[] values() -> values
    com.google.common.collect.BoundType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean) -> <init>
    com.google.common.collect.BoundType forBoolean(boolean) -> forBoolean
    com.google.common.collect.BoundType flip() -> flip
    void <clinit>() -> <clinit>
com.google.common.collect.ByFunctionOrdering -> com.google.common.collect.ByFunctionOrdering:
    com.google.common.base.Function function -> function
    com.google.common.collect.Ordering ordering -> ordering
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.base.Function,com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.CartesianList -> com.google.common.collect.CartesianList:
    com.google.common.collect.ImmutableList axes -> axes
    int[] axesSizeProduct -> axesSizeProduct
    java.util.List create(java.util.List) -> create
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    int getAxisIndexForProductIndex(int,int) -> getAxisIndexForProductIndex
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.ImmutableList get(int) -> get
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.CartesianList) -> access$000
    int access$100(com.google.common.collect.CartesianList,int,int) -> access$100
com.google.common.collect.CartesianList$1 -> com.google.common.collect.CartesianList$1:
    int val$index -> val$index
    com.google.common.collect.CartesianList this$0 -> this$0
    void <init>(com.google.common.collect.CartesianList,int) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
    boolean isPartialView() -> isPartialView
com.google.common.collect.ClassToInstanceMap -> com.google.common.collect.ClassToInstanceMap:
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
com.google.common.collect.CollectCollectors -> com.google.common.collect.CollectCollectors:
    java.util.stream.Collector TO_IMMUTABLE_LIST -> TO_IMMUTABLE_LIST
    java.util.stream.Collector TO_IMMUTABLE_SET -> TO_IMMUTABLE_SET
    java.util.stream.Collector TO_IMMUTABLE_RANGE_SET -> TO_IMMUTABLE_RANGE_SET
    void <init>() -> <init>
    java.util.stream.Collector toImmutableBiMap(java.util.function.Function,java.util.function.Function) -> toImmutableBiMap
    java.util.stream.Collector toImmutableList() -> toImmutableList
    java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function) -> toImmutableMap
    java.util.stream.Collector toImmutableSet() -> toImmutableSet
    java.util.stream.Collector toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function) -> toImmutableSortedMap
    java.util.stream.Collector toImmutableSortedSet(java.util.Comparator) -> toImmutableSortedSet
    java.util.stream.Collector toImmutableRangeSet() -> toImmutableRangeSet
    java.util.stream.Collector toImmutableRangeMap(java.util.function.Function,java.util.function.Function) -> toImmutableRangeMap
    void lambda$toImmutableRangeMap$5(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableRangeMap$Builder,java.lang.Object) -> lambda$toImmutableRangeMap$5
    com.google.common.collect.ImmutableSortedSet$Builder lambda$toImmutableSortedSet$4(java.util.Comparator) -> lambda$toImmutableSortedSet$4
    void lambda$toImmutableSortedMap$3(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableSortedMap$Builder,java.lang.Object) -> lambda$toImmutableSortedMap$3
    com.google.common.collect.ImmutableSortedMap$Builder lambda$toImmutableSortedMap$2(java.util.Comparator) -> lambda$toImmutableSortedMap$2
    void lambda$toImmutableMap$1(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableMap$Builder,java.lang.Object) -> lambda$toImmutableMap$1
    void lambda$toImmutableBiMap$0(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableBiMap$Builder,java.lang.Object) -> lambda$toImmutableBiMap$0
    void <clinit>() -> <clinit>
com.google.common.collect.CollectPreconditions -> com.google.common.collect.CollectPreconditions:
    void <init>() -> <init>
    void checkEntryNotNull(java.lang.Object,java.lang.Object) -> checkEntryNotNull
    int checkNonnegative(int,java.lang.String) -> checkNonnegative
    long checkNonnegative(long,java.lang.String) -> checkNonnegative
    void checkPositive(int,java.lang.String) -> checkPositive
    void checkRemove(boolean) -> checkRemove
com.google.common.collect.CollectSpliterators -> com.google.common.collect.CollectSpliterators:
    void <init>() -> <init>
    java.util.Spliterator indexed(int,int,java.util.function.IntFunction) -> indexed
    java.util.Spliterator indexed(int,int,java.util.function.IntFunction,java.util.Comparator) -> indexed
    java.util.Spliterator map(java.util.Spliterator,java.util.function.Function) -> map
    java.util.Spliterator filter(java.util.Spliterator,java.util.function.Predicate) -> filter
    java.util.Spliterator flatMap(java.util.Spliterator,java.util.function.Function,int,long) -> flatMap
com.google.common.collect.CollectSpliterators$1 -> com.google.common.collect.CollectSpliterators$1:
    java.util.Spliterator val$fromSpliterator -> val$fromSpliterator
    java.util.function.Function val$function -> val$function
    void <init>(java.util.Spliterator,java.util.function.Function) -> <init>
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    void forEachRemaining(java.util.function.Consumer) -> forEachRemaining
    java.util.Spliterator trySplit() -> trySplit
    long estimateSize() -> estimateSize
    int characteristics() -> characteristics
    void lambda$forEachRemaining$1(java.util.function.Consumer,java.util.function.Function,java.lang.Object) -> lambda$forEachRemaining$1
    void lambda$tryAdvance$0(java.util.function.Consumer,java.util.function.Function,java.lang.Object) -> lambda$tryAdvance$0
com.google.common.collect.CollectSpliterators$1FlatMapSpliterator -> com.google.common.collect.CollectSpliterators$1FlatMapSpliterator:
    java.util.Spliterator prefix -> prefix
    java.util.Spliterator from -> from
    int characteristics -> characteristics
    long estimatedSize -> estimatedSize
    java.util.function.Function val$function -> val$function
    void <init>(java.util.Spliterator,java.util.Spliterator,int,long,java.util.function.Function) -> <init>
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    void forEachRemaining(java.util.function.Consumer) -> forEachRemaining
    java.util.Spliterator trySplit() -> trySplit
    long estimateSize() -> estimateSize
    int characteristics() -> characteristics
    void lambda$forEachRemaining$1(java.util.function.Function,java.util.function.Consumer,java.lang.Object) -> lambda$forEachRemaining$1
    void lambda$tryAdvance$0(java.util.function.Function,java.lang.Object) -> lambda$tryAdvance$0
com.google.common.collect.CollectSpliterators$1Splitr -> com.google.common.collect.CollectSpliterators$1Splitr:
    java.lang.Object holder -> holder
    java.util.Spliterator val$fromSpliterator -> val$fromSpliterator
    java.util.function.Predicate val$predicate -> val$predicate
    void <init>(java.util.Spliterator,java.util.function.Predicate) -> <init>
    void accept(java.lang.Object) -> accept
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    java.util.Spliterator trySplit() -> trySplit
    long estimateSize() -> estimateSize
    java.util.Comparator getComparator() -> getComparator
    int characteristics() -> characteristics
com.google.common.collect.CollectSpliterators$1WithCharacteristics -> com.google.common.collect.CollectSpliterators$1WithCharacteristics:
    java.util.Spliterator$OfInt delegate -> delegate
    java.util.function.IntFunction val$function -> val$function
    int val$extraCharacteristics -> val$extraCharacteristics
    java.util.Comparator val$comparator -> val$comparator
    void <init>(java.util.Spliterator$OfInt,java.util.function.IntFunction,int,java.util.Comparator) -> <init>
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    void forEachRemaining(java.util.function.Consumer) -> forEachRemaining
    java.util.Spliterator trySplit() -> trySplit
    long estimateSize() -> estimateSize
    int characteristics() -> characteristics
    java.util.Comparator getComparator() -> getComparator
    void lambda$forEachRemaining$1(java.util.function.Consumer,java.util.function.IntFunction,int) -> lambda$forEachRemaining$1
    void lambda$tryAdvance$0(java.util.function.Consumer,java.util.function.IntFunction,int) -> lambda$tryAdvance$0
com.google.common.collect.Collections2 -> com.google.common.collect.Collections2:
    void <init>() -> <init>
    java.util.Collection filter(java.util.Collection,com.google.common.base.Predicate) -> filter
    boolean safeContains(java.util.Collection,java.lang.Object) -> safeContains
    boolean safeRemove(java.util.Collection,java.lang.Object) -> safeRemove
    java.util.Collection transform(java.util.Collection,com.google.common.base.Function) -> transform
    boolean containsAllImpl(java.util.Collection,java.util.Collection) -> containsAllImpl
    java.lang.String toStringImpl(java.util.Collection) -> toStringImpl
    java.lang.StringBuilder newStringBuilderForCollection(int) -> newStringBuilderForCollection
    java.util.Collection cast(java.lang.Iterable) -> cast
    java.util.Collection orderedPermutations(java.lang.Iterable) -> orderedPermutations
    java.util.Collection orderedPermutations(java.lang.Iterable,java.util.Comparator) -> orderedPermutations
    java.util.Collection permutations(java.util.Collection) -> permutations
    boolean isPermutation(java.util.List,java.util.List) -> isPermutation
    boolean access$000(java.util.List,java.util.List) -> access$000
com.google.common.collect.Collections2$FilteredCollection -> com.google.common.collect.Collections2$FilteredCollection:
    java.util.Collection unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(java.util.Collection,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.Collections2$FilteredCollection createCombined(com.google.common.base.Predicate) -> createCombined
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeIf(java.util.function.Predicate) -> removeIf
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean lambda$removeIf$2(java.util.function.Predicate,java.lang.Object) -> lambda$removeIf$2
    boolean lambda$retainAll$1(java.util.Collection,java.lang.Object) -> lambda$retainAll$1
    void lambda$forEach$0(java.util.function.Consumer,java.lang.Object) -> lambda$forEach$0
com.google.common.collect.Collections2$OrderedPermutationCollection -> com.google.common.collect.Collections2$OrderedPermutationCollection:
    com.google.common.collect.ImmutableList inputList -> inputList
    java.util.Comparator comparator -> comparator
    int size -> size
    void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    int calculateSize(java.util.List,java.util.Comparator) -> calculateSize
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.lang.String toString() -> toString
com.google.common.collect.Collections2$OrderedPermutationIterator -> com.google.common.collect.Collections2$OrderedPermutationIterator:
    java.util.List nextPermutation -> nextPermutation
    java.util.Comparator comparator -> comparator
    void <init>(java.util.List,java.util.Comparator) -> <init>
    java.util.List computeNext() -> computeNext
    void calculateNextPermutation() -> calculateNextPermutation
    int findNextJ() -> findNextJ
    int findNextL(int) -> findNextL
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Collections2$PermutationCollection -> com.google.common.collect.Collections2$PermutationCollection:
    com.google.common.collect.ImmutableList inputList -> inputList
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.lang.String toString() -> toString
com.google.common.collect.Collections2$PermutationIterator -> com.google.common.collect.Collections2$PermutationIterator:
    java.util.List list -> list
    int[] c -> c
    int[] o -> o
    int j -> j
    void <init>(java.util.List) -> <init>
    java.util.List computeNext() -> computeNext
    void calculateNextPermutation() -> calculateNextPermutation
    void switchDirection() -> switchDirection
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Collections2$TransformedCollection -> com.google.common.collect.Collections2$TransformedCollection:
    java.util.Collection fromCollection -> fromCollection
    com.google.common.base.Function function -> function
    void <init>(java.util.Collection,com.google.common.base.Function) -> <init>
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    boolean removeIf(java.util.function.Predicate) -> removeIf
    int size() -> size
    boolean lambda$removeIf$1(java.util.function.Predicate,java.lang.Object) -> lambda$removeIf$1
    void lambda$forEach$0(java.util.function.Consumer,java.lang.Object) -> lambda$forEach$0
com.google.common.collect.CompactHashMap -> com.google.common.collect.CompactHashMap:
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    long NEXT_MASK -> NEXT_MASK
    long HASH_MASK -> HASH_MASK
    int DEFAULT_SIZE -> DEFAULT_SIZE
    int UNSET -> UNSET
    int[] table -> table
    long[] entries -> entries
    java.lang.Object[] keys -> keys
    java.lang.Object[] values -> values
    float loadFactor -> loadFactor
    int modCount -> modCount
    int threshold -> threshold
    int size -> size
    java.util.Set keySetView -> keySetView
    java.util.Set entrySetView -> entrySetView
    java.util.Collection valuesView -> valuesView
    com.google.common.collect.CompactHashMap create() -> create
    com.google.common.collect.CompactHashMap createWithExpectedSize(int) -> createWithExpectedSize
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float) -> <init>
    void init(int,float) -> init
    int[] newTable(int) -> newTable
    long[] newEntries(int) -> newEntries
    int hashTableMask() -> hashTableMask
    int getHash(long) -> getHash
    int getNext(long) -> getNext
    long swapNext(long,int) -> swapNext
    void accessEntry(int) -> accessEntry
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void insertEntry(int,java.lang.Object,java.lang.Object,int) -> insertEntry
    void resizeMeMaybe(int) -> resizeMeMaybe
    void resizeEntries(int) -> resizeEntries
    void resizeTable(int) -> resizeTable
    int indexOf(java.lang.Object) -> indexOf
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object remove(java.lang.Object,int) -> remove
    java.lang.Object removeEntry(int) -> removeEntry
    void moveLastEntry(int) -> moveLastEntry
    int firstEntryIndex() -> firstEntryIndex
    int getSuccessor(int) -> getSuccessor
    int adjustAfterRemove(int,int) -> adjustAfterRemove
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
    java.util.Iterator keySetIterator() -> keySetIterator
    void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Set entrySet() -> entrySet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Iterator entrySetIterator() -> entrySetIterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
    java.util.Iterator valuesIterator() -> valuesIterator
    void trimToSize() -> trimToSize
    void clear() -> clear
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object access$000(com.google.common.collect.CompactHashMap,int) -> access$000
    int access$100(com.google.common.collect.CompactHashMap) -> access$100
    int access$200(com.google.common.collect.CompactHashMap,java.lang.Object) -> access$200
com.google.common.collect.CompactHashMap$1 -> com.google.common.collect.CompactHashMap$1:
    com.google.common.collect.CompactHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    java.lang.Object getOutput(int) -> getOutput
com.google.common.collect.CompactHashMap$2 -> com.google.common.collect.CompactHashMap$2:
    com.google.common.collect.CompactHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    java.util.Map$Entry getOutput(int) -> getOutput
    java.lang.Object getOutput(int) -> getOutput
com.google.common.collect.CompactHashMap$3 -> com.google.common.collect.CompactHashMap$3:
    com.google.common.collect.CompactHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    java.lang.Object getOutput(int) -> getOutput
com.google.common.collect.CompactHashMap$EntrySetView -> com.google.common.collect.CompactHashMap$EntrySetView:
    com.google.common.collect.CompactHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    java.util.Map$Entry lambda$spliterator$0(int) -> lambda$spliterator$0
com.google.common.collect.CompactHashMap$Itr -> com.google.common.collect.CompactHashMap$Itr:
    int expectedModCount -> expectedModCount
    int currentIndex -> currentIndex
    int indexToRemove -> indexToRemove
    com.google.common.collect.CompactHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object getOutput(int) -> getOutput
    java.lang.Object next() -> next
    void remove() -> remove
    void checkForConcurrentModification() -> checkForConcurrentModification
    void <init>(com.google.common.collect.CompactHashMap,com.google.common.collect.CompactHashMap$1) -> <init>
com.google.common.collect.CompactHashMap$KeySetView -> com.google.common.collect.CompactHashMap$KeySetView:
    com.google.common.collect.CompactHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
com.google.common.collect.CompactHashMap$MapEntry -> com.google.common.collect.CompactHashMap$MapEntry:
    java.lang.Object key -> key
    int lastKnownIndex -> lastKnownIndex
    com.google.common.collect.CompactHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactHashMap,int) -> <init>
    java.lang.Object getKey() -> getKey
    void updateLastKnownIndex() -> updateLastKnownIndex
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.CompactHashMap$ValuesView -> com.google.common.collect.CompactHashMap$ValuesView:
    com.google.common.collect.CompactHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactHashMap) -> <init>
    java.util.Iterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    java.util.Spliterator spliterator() -> spliterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.CompactHashSet -> com.google.common.collect.CompactHashSet:
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    long NEXT_MASK -> NEXT_MASK
    long HASH_MASK -> HASH_MASK
    int DEFAULT_SIZE -> DEFAULT_SIZE
    int UNSET -> UNSET
    int[] table -> table
    long[] entries -> entries
    java.lang.Object[] elements -> elements
    float loadFactor -> loadFactor
    int modCount -> modCount
    int threshold -> threshold
    int size -> size
    com.google.common.collect.CompactHashSet create() -> create
    com.google.common.collect.CompactHashSet create(java.util.Collection) -> create
    com.google.common.collect.CompactHashSet create(java.lang.Object[]) -> create
    com.google.common.collect.CompactHashSet createWithExpectedSize(int) -> createWithExpectedSize
    void <init>() -> <init>
    void <init>(int) -> <init>
    void init(int,float) -> init
    int[] newTable(int) -> newTable
    long[] newEntries(int) -> newEntries
    int getHash(long) -> getHash
    int getNext(long) -> getNext
    long swapNext(long,int) -> swapNext
    int hashTableMask() -> hashTableMask
    boolean add(java.lang.Object) -> add
    void insertEntry(int,java.lang.Object,int) -> insertEntry
    void resizeMeMaybe(int) -> resizeMeMaybe
    void resizeEntries(int) -> resizeEntries
    void resizeTable(int) -> resizeTable
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,int) -> remove
    void moveEntry(int) -> moveEntry
    int firstEntryIndex() -> firstEntryIndex
    int getSuccessor(int) -> getSuccessor
    int adjustAfterRemove(int,int) -> adjustAfterRemove
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void trimToSize() -> trimToSize
    void clear() -> clear
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    long[] access$000(com.google.common.collect.CompactHashSet) -> access$000
    int access$100(long) -> access$100
    boolean access$200(com.google.common.collect.CompactHashSet,java.lang.Object,int) -> access$200
com.google.common.collect.CompactHashSet$1 -> com.google.common.collect.CompactHashSet$1:
    int expectedModCount -> expectedModCount
    int index -> index
    int indexToRemove -> indexToRemove
    com.google.common.collect.CompactHashSet this$0 -> this$0
    void <init>(com.google.common.collect.CompactHashSet) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    void checkForConcurrentModification() -> checkForConcurrentModification
com.google.common.collect.CompactLinkedHashMap -> com.google.common.collect.CompactLinkedHashMap:
    int ENDPOINT -> ENDPOINT
    long[] links -> links
    int firstEntry -> firstEntry
    int lastEntry -> lastEntry
    boolean accessOrder -> accessOrder
    com.google.common.collect.CompactLinkedHashMap create() -> create
    com.google.common.collect.CompactLinkedHashMap createWithExpectedSize(int) -> createWithExpectedSize
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,float,boolean) -> <init>
    void init(int,float) -> init
    int getPredecessor(int) -> getPredecessor
    int getSuccessor(int) -> getSuccessor
    void setSuccessor(int,int) -> setSuccessor
    void setPredecessor(int,int) -> setPredecessor
    void setSucceeds(int,int) -> setSucceeds
    void insertEntry(int,java.lang.Object,java.lang.Object,int) -> insertEntry
    void accessEntry(int) -> accessEntry
    void moveLastEntry(int) -> moveLastEntry
    void resizeEntries(int) -> resizeEntries
    int firstEntryIndex() -> firstEntryIndex
    int adjustAfterRemove(int,int) -> adjustAfterRemove
    void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection createValues() -> createValues
    void clear() -> clear
    int access$000(com.google.common.collect.CompactLinkedHashMap) -> access$000
com.google.common.collect.CompactLinkedHashMap$1EntrySetImpl -> com.google.common.collect.CompactLinkedHashMap$1EntrySetImpl:
    com.google.common.collect.CompactLinkedHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactLinkedHashMap) -> <init>
    java.util.Spliterator spliterator() -> spliterator
com.google.common.collect.CompactLinkedHashMap$1KeySetImpl -> com.google.common.collect.CompactLinkedHashMap$1KeySetImpl:
    com.google.common.collect.CompactLinkedHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactLinkedHashMap) -> <init>
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
com.google.common.collect.CompactLinkedHashMap$1ValuesImpl -> com.google.common.collect.CompactLinkedHashMap$1ValuesImpl:
    com.google.common.collect.CompactLinkedHashMap this$0 -> this$0
    void <init>(com.google.common.collect.CompactLinkedHashMap) -> <init>
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
com.google.common.collect.CompactLinkedHashSet -> com.google.common.collect.CompactLinkedHashSet:
    int ENDPOINT -> ENDPOINT
    int[] predecessor -> predecessor
    int[] successor -> successor
    int firstEntry -> firstEntry
    int lastEntry -> lastEntry
    com.google.common.collect.CompactLinkedHashSet create() -> create
    com.google.common.collect.CompactLinkedHashSet create(java.util.Collection) -> create
    com.google.common.collect.CompactLinkedHashSet create(java.lang.Object[]) -> create
    com.google.common.collect.CompactLinkedHashSet createWithExpectedSize(int) -> createWithExpectedSize
    void <init>() -> <init>
    void <init>(int) -> <init>
    void init(int,float) -> init
    void succeeds(int,int) -> succeeds
    void insertEntry(int,java.lang.Object,int) -> insertEntry
    void moveEntry(int) -> moveEntry
    void clear() -> clear
    void resizeEntries(int) -> resizeEntries
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    int firstEntryIndex() -> firstEntryIndex
    int adjustAfterRemove(int,int) -> adjustAfterRemove
    int getSuccessor(int) -> getSuccessor
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
com.google.common.collect.ComparatorOrdering -> com.google.common.collect.ComparatorOrdering:
    java.util.Comparator comparator -> comparator
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Comparator) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Comparators -> com.google.common.collect.Comparators:
    void <init>() -> <init>
    java.util.Comparator lexicographical(java.util.Comparator) -> lexicographical
    boolean isInOrder(java.lang.Iterable,java.util.Comparator) -> isInOrder
    boolean isInStrictOrder(java.lang.Iterable,java.util.Comparator) -> isInStrictOrder
    java.util.stream.Collector least(int,java.util.Comparator) -> least
    java.util.stream.Collector greatest(int,java.util.Comparator) -> greatest
    java.util.Comparator emptiesFirst(java.util.Comparator) -> emptiesFirst
    java.util.Comparator emptiesLast(java.util.Comparator) -> emptiesLast
    java.lang.Object lambda$emptiesLast$2(java.util.Optional) -> lambda$emptiesLast$2
    java.lang.Object lambda$emptiesFirst$1(java.util.Optional) -> lambda$emptiesFirst$1
    com.google.common.collect.TopKSelector lambda$least$0(int,java.util.Comparator) -> lambda$least$0
com.google.common.collect.ComparisonChain -> com.google.common.collect.ComparisonChain:
    com.google.common.collect.ComparisonChain ACTIVE -> ACTIVE
    com.google.common.collect.ComparisonChain LESS -> LESS
    com.google.common.collect.ComparisonChain GREATER -> GREATER
    void <init>() -> <init>
    com.google.common.collect.ComparisonChain start() -> start
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.ComparisonChain compare(java.lang.Object,java.lang.Object,java.util.Comparator) -> compare
    com.google.common.collect.ComparisonChain compare(int,int) -> compare
    com.google.common.collect.ComparisonChain compare(long,long) -> compare
    com.google.common.collect.ComparisonChain compare(float,float) -> compare
    com.google.common.collect.ComparisonChain compare(double,double) -> compare
    com.google.common.collect.ComparisonChain compare(java.lang.Boolean,java.lang.Boolean) -> compare
    com.google.common.collect.ComparisonChain compareTrueFirst(boolean,boolean) -> compareTrueFirst
    com.google.common.collect.ComparisonChain compareFalseFirst(boolean,boolean) -> compareFalseFirst
    int result() -> result
    void <init>(com.google.common.collect.ComparisonChain$1) -> <init>
    com.google.common.collect.ComparisonChain access$100() -> access$100
    com.google.common.collect.ComparisonChain access$200() -> access$200
    com.google.common.collect.ComparisonChain access$300() -> access$300
    void <clinit>() -> <clinit>
com.google.common.collect.ComparisonChain$1 -> com.google.common.collect.ComparisonChain$1:
    void <init>() -> <init>
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.ComparisonChain compare(java.lang.Object,java.lang.Object,java.util.Comparator) -> compare
    com.google.common.collect.ComparisonChain compare(int,int) -> compare
    com.google.common.collect.ComparisonChain compare(long,long) -> compare
    com.google.common.collect.ComparisonChain compare(float,float) -> compare
    com.google.common.collect.ComparisonChain compare(double,double) -> compare
    com.google.common.collect.ComparisonChain compareTrueFirst(boolean,boolean) -> compareTrueFirst
    com.google.common.collect.ComparisonChain compareFalseFirst(boolean,boolean) -> compareFalseFirst
    com.google.common.collect.ComparisonChain classify(int) -> classify
    int result() -> result
com.google.common.collect.ComparisonChain$InactiveComparisonChain -> com.google.common.collect.ComparisonChain$InactiveComparisonChain:
    int result -> result
    void <init>(int) -> <init>
    com.google.common.collect.ComparisonChain compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.ComparisonChain compare(java.lang.Object,java.lang.Object,java.util.Comparator) -> compare
    com.google.common.collect.ComparisonChain compare(int,int) -> compare
    com.google.common.collect.ComparisonChain compare(long,long) -> compare
    com.google.common.collect.ComparisonChain compare(float,float) -> compare
    com.google.common.collect.ComparisonChain compare(double,double) -> compare
    com.google.common.collect.ComparisonChain compareTrueFirst(boolean,boolean) -> compareTrueFirst
    com.google.common.collect.ComparisonChain compareFalseFirst(boolean,boolean) -> compareFalseFirst
    int result() -> result
com.google.common.collect.CompoundOrdering -> com.google.common.collect.CompoundOrdering:
    java.util.Comparator[] comparators -> comparators
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    void <init>(java.lang.Iterable) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.ComputationException -> com.google.common.collect.ComputationException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Throwable) -> <init>
com.google.common.collect.ConcurrentHashMultiset -> com.google.common.collect.ConcurrentHashMultiset:
    java.util.concurrent.ConcurrentMap countMap -> countMap
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ConcurrentHashMultiset create() -> create
    com.google.common.collect.ConcurrentHashMultiset create(java.lang.Iterable) -> create
    com.google.common.collect.ConcurrentHashMultiset create(java.util.concurrent.ConcurrentMap) -> create
    void <init>(java.util.concurrent.ConcurrentMap) -> <init>
    int count(java.lang.Object) -> count
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.List snapshot() -> snapshot
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    boolean removeExactly(java.lang.Object,int) -> removeExactly
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Set createEntrySet() -> createEntrySet
    int distinctElements() -> distinctElements
    boolean isEmpty() -> isEmpty
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator iterator() -> iterator
    void clear() -> clear
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set entrySet() -> entrySet
    java.util.Set elementSet() -> elementSet
    boolean contains(java.lang.Object) -> contains
    java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset) -> access$100
com.google.common.collect.ConcurrentHashMultiset$1 -> com.google.common.collect.ConcurrentHashMultiset$1:
    java.util.Set val$delegate -> val$delegate
    com.google.common.collect.ConcurrentHashMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ConcurrentHashMultiset,java.util.Set) -> <init>
    java.util.Set delegate() -> delegate
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ConcurrentHashMultiset$2 -> com.google.common.collect.ConcurrentHashMultiset$2:
    java.util.Iterator mapEntries -> mapEntries
    com.google.common.collect.ConcurrentHashMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ConcurrentHashMultiset) -> <init>
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.ConcurrentHashMultiset$3 -> com.google.common.collect.ConcurrentHashMultiset$3:
    com.google.common.collect.Multiset$Entry last -> last
    java.util.Iterator val$readOnlyIterator -> val$readOnlyIterator
    com.google.common.collect.ConcurrentHashMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ConcurrentHashMultiset,java.util.Iterator) -> <init>
    java.util.Iterator delegate() -> delegate
    com.google.common.collect.Multiset$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    java.lang.Object delegate() -> delegate
com.google.common.collect.ConcurrentHashMultiset$EntrySet -> com.google.common.collect.ConcurrentHashMultiset$EntrySet:
    com.google.common.collect.ConcurrentHashMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ConcurrentHashMultiset) -> <init>
    com.google.common.collect.ConcurrentHashMultiset multiset() -> multiset
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.List snapshot() -> snapshot
    com.google.common.collect.Multiset multiset() -> multiset
    void <init>(com.google.common.collect.ConcurrentHashMultiset,com.google.common.collect.ConcurrentHashMultiset$1) -> <init>
com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder -> com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder:
    com.google.common.collect.Serialization$FieldSetter COUNT_MAP_FIELD_SETTER -> COUNT_MAP_FIELD_SETTER
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.ConsumingQueueIterator -> com.google.common.collect.ConsumingQueueIterator:
    java.util.Queue queue -> queue
    void <init>(java.lang.Object[]) -> <init>
    void <init>(java.util.Queue) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.ContiguousSet -> com.google.common.collect.ContiguousSet:
    com.google.common.collect.DiscreteDomain domain -> domain
    com.google.common.collect.ContiguousSet create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain) -> create
    com.google.common.collect.ContiguousSet closed(int,int) -> closed
    com.google.common.collect.ContiguousSet closed(long,long) -> closed
    com.google.common.collect.ContiguousSet closedOpen(int,int) -> closedOpen
    com.google.common.collect.ContiguousSet closedOpen(long,long) -> closedOpen
    void <init>(com.google.common.collect.DiscreteDomain) -> <init>
    com.google.common.collect.ContiguousSet headSet(java.lang.Comparable) -> headSet
    com.google.common.collect.ContiguousSet headSet(java.lang.Comparable,boolean) -> headSet
    com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,java.lang.Comparable) -> subSet
    com.google.common.collect.ContiguousSet subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSet
    com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable) -> tailSet
    com.google.common.collect.ContiguousSet tailSet(java.lang.Comparable,boolean) -> tailSet
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> headSetImpl
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSetImpl
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> tailSetImpl
    com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet) -> intersection
    com.google.common.collect.Range range() -> range
    com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType) -> range
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.lang.String toString() -> toString
    com.google.common.collect.ImmutableSortedSet$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean) -> tailSet
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object) -> tailSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean) -> headSet
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
com.google.common.collect.Count -> com.google.common.collect.Count:
    int value -> value
    void <init>(int) -> <init>
    int get() -> get
    void add(int) -> add
    int addAndGet(int) -> addAndGet
    void set(int) -> set
    int getAndSet(int) -> getAndSet
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.collect.Cut -> com.google.common.collect.Cut:
    java.lang.Comparable endpoint -> endpoint
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Comparable) -> <init>
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> canonical
    int compareTo(com.google.common.collect.Cut) -> compareTo
    java.lang.Comparable endpoint() -> endpoint
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.collect.Cut belowAll() -> belowAll
    com.google.common.collect.Cut aboveAll() -> aboveAll
    com.google.common.collect.Cut belowValue(java.lang.Comparable) -> belowValue
    com.google.common.collect.Cut aboveValue(java.lang.Comparable) -> aboveValue
    int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.Cut$1 -> com.google.common.collect.Cut$1:
    int[] $SwitchMap$com$google$common$collect$BoundType -> $SwitchMap$com$google$common$collect$BoundType
    void <clinit>() -> <clinit>
com.google.common.collect.Cut$AboveAll -> com.google.common.collect.Cut$AboveAll:
    com.google.common.collect.Cut$AboveAll INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Comparable endpoint() -> endpoint
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    int compareTo(com.google.common.collect.Cut) -> compareTo
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    int compareTo(java.lang.Object) -> compareTo
    com.google.common.collect.Cut$AboveAll access$100() -> access$100
    void <clinit>() -> <clinit>
com.google.common.collect.Cut$AboveValue -> com.google.common.collect.Cut$AboveValue:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Comparable) -> <init>
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> canonical
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.Cut$BelowAll -> com.google.common.collect.Cut$BelowAll:
    com.google.common.collect.Cut$BelowAll INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Comparable endpoint() -> endpoint
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    com.google.common.collect.Cut canonical(com.google.common.collect.DiscreteDomain) -> canonical
    int compareTo(com.google.common.collect.Cut) -> compareTo
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    int compareTo(java.lang.Object) -> compareTo
    com.google.common.collect.Cut$BelowAll access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.collect.Cut$BelowValue -> com.google.common.collect.Cut$BelowValue:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Comparable) -> <init>
    boolean isLessThan(java.lang.Comparable) -> isLessThan
    com.google.common.collect.BoundType typeAsLowerBound() -> typeAsLowerBound
    com.google.common.collect.BoundType typeAsUpperBound() -> typeAsUpperBound
    com.google.common.collect.Cut withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withLowerBoundType
    com.google.common.collect.Cut withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain) -> withUpperBoundType
    void describeAsLowerBound(java.lang.StringBuilder) -> describeAsLowerBound
    void describeAsUpperBound(java.lang.StringBuilder) -> describeAsUpperBound
    java.lang.Comparable leastValueAbove(com.google.common.collect.DiscreteDomain) -> leastValueAbove
    java.lang.Comparable greatestValueBelow(com.google.common.collect.DiscreteDomain) -> greatestValueBelow
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.google.common.collect.DenseImmutableTable -> com.google.common.collect.DenseImmutableTable:
    com.google.common.collect.ImmutableMap rowKeyToIndex -> rowKeyToIndex
    com.google.common.collect.ImmutableMap columnKeyToIndex -> columnKeyToIndex
    com.google.common.collect.ImmutableMap rowMap -> rowMap
    com.google.common.collect.ImmutableMap columnMap -> columnMap
    int[] rowCounts -> rowCounts
    int[] columnCounts -> columnCounts
    java.lang.Object[][] values -> values
    int[] cellRowIndices -> cellRowIndices
    int[] cellColumnIndices -> cellColumnIndices
    void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet) -> <init>
    com.google.common.collect.ImmutableMap columnMap() -> columnMap
    com.google.common.collect.ImmutableMap rowMap() -> rowMap
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    int size() -> size
    com.google.common.collect.Table$Cell getCell(int) -> getCell
    java.lang.Object getValue(int) -> getValue
    com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm() -> createSerializedForm
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
    int[] access$200(com.google.common.collect.DenseImmutableTable) -> access$200
    com.google.common.collect.ImmutableMap access$300(com.google.common.collect.DenseImmutableTable) -> access$300
    java.lang.Object[][] access$400(com.google.common.collect.DenseImmutableTable) -> access$400
    int[] access$500(com.google.common.collect.DenseImmutableTable) -> access$500
    com.google.common.collect.ImmutableMap access$600(com.google.common.collect.DenseImmutableTable) -> access$600
com.google.common.collect.DenseImmutableTable$1 -> com.google.common.collect.DenseImmutableTable$1:
com.google.common.collect.DenseImmutableTable$Column -> com.google.common.collect.DenseImmutableTable$Column:
    int columnIndex -> columnIndex
    com.google.common.collect.DenseImmutableTable this$0 -> this$0
    void <init>(com.google.common.collect.DenseImmutableTable,int) -> <init>
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    java.lang.Object getValue(int) -> getValue
    boolean isPartialView() -> isPartialView
com.google.common.collect.DenseImmutableTable$ColumnMap -> com.google.common.collect.DenseImmutableTable$ColumnMap:
    com.google.common.collect.DenseImmutableTable this$0 -> this$0
    void <init>(com.google.common.collect.DenseImmutableTable) -> <init>
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    com.google.common.collect.ImmutableMap getValue(int) -> getValue
    boolean isPartialView() -> isPartialView
    java.lang.Object getValue(int) -> getValue
    void <init>(com.google.common.collect.DenseImmutableTable,com.google.common.collect.DenseImmutableTable$1) -> <init>
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap -> com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:
    int size -> size
    void <init>(int) -> <init>
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    boolean isFull() -> isFull
    java.lang.Object getKey(int) -> getKey
    java.lang.Object getValue(int) -> getValue
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.UnmodifiableIterator entryIterator() -> entryIterator
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1 -> com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1:
    int index -> index
    int maxIndex -> maxIndex
    com.google.common.collect.DenseImmutableTable$ImmutableArrayMap this$0 -> this$0
    void <init>(com.google.common.collect.DenseImmutableTable$ImmutableArrayMap) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.DenseImmutableTable$Row -> com.google.common.collect.DenseImmutableTable$Row:
    int rowIndex -> rowIndex
    com.google.common.collect.DenseImmutableTable this$0 -> this$0
    void <init>(com.google.common.collect.DenseImmutableTable,int) -> <init>
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    java.lang.Object getValue(int) -> getValue
    boolean isPartialView() -> isPartialView
com.google.common.collect.DenseImmutableTable$RowMap -> com.google.common.collect.DenseImmutableTable$RowMap:
    com.google.common.collect.DenseImmutableTable this$0 -> this$0
    void <init>(com.google.common.collect.DenseImmutableTable) -> <init>
    com.google.common.collect.ImmutableMap keyToIndex() -> keyToIndex
    com.google.common.collect.ImmutableMap getValue(int) -> getValue
    boolean isPartialView() -> isPartialView
    java.lang.Object getValue(int) -> getValue
    void <init>(com.google.common.collect.DenseImmutableTable,com.google.common.collect.DenseImmutableTable$1) -> <init>
com.google.common.collect.DescendingImmutableSortedMultiset -> com.google.common.collect.DescendingImmutableSortedMultiset:
    com.google.common.collect.ImmutableSortedMultiset forward -> forward
    void <init>(com.google.common.collect.ImmutableSortedMultiset) -> <init>
    int count(java.lang.Object) -> count
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    int size() -> size
    com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    com.google.common.collect.ImmutableSortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    boolean isPartialView() -> isPartialView
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    java.util.NavigableSet elementSet() -> elementSet
    java.util.SortedSet elementSet() -> elementSet
    java.util.Set elementSet() -> elementSet
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
com.google.common.collect.DescendingImmutableSortedSet -> com.google.common.collect.DescendingImmutableSortedSet:
    com.google.common.collect.ImmutableSortedSet forward -> forward
    void <init>(com.google.common.collect.ImmutableSortedSet) -> <init>
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet descendingSet() -> descendingSet
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    int indexOf(java.lang.Object) -> indexOf
    boolean isPartialView() -> isPartialView
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator iterator() -> iterator
com.google.common.collect.DescendingMultiset -> com.google.common.collect.DescendingMultiset:
    java.util.Comparator comparator -> comparator
    java.util.NavigableSet elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    void <init>() -> <init>
    com.google.common.collect.SortedMultiset forwardMultiset() -> forwardMultiset
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet elementSet() -> elementSet
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.Multiset delegate() -> delegate
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Set entrySet() -> entrySet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.String toString() -> toString
    java.util.Set elementSet() -> elementSet
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.DescendingMultiset$1EntrySetImpl -> com.google.common.collect.DescendingMultiset$1EntrySetImpl:
    com.google.common.collect.DescendingMultiset this$0 -> this$0
    void <init>(com.google.common.collect.DescendingMultiset) -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.DiscreteDomain -> com.google.common.collect.DiscreteDomain:
    boolean supportsFastOffset -> supportsFastOffset
    com.google.common.collect.DiscreteDomain integers() -> integers
    com.google.common.collect.DiscreteDomain longs() -> longs
    com.google.common.collect.DiscreteDomain bigIntegers() -> bigIntegers
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    java.lang.Comparable offset(java.lang.Comparable,long) -> offset
    java.lang.Comparable next(java.lang.Comparable) -> next
    java.lang.Comparable previous(java.lang.Comparable) -> previous
    long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    java.lang.Comparable minValue() -> minValue
    java.lang.Comparable maxValue() -> maxValue
    void <init>(boolean,com.google.common.collect.DiscreteDomain$1) -> <init>
com.google.common.collect.DiscreteDomain$1 -> com.google.common.collect.DiscreteDomain$1:
com.google.common.collect.DiscreteDomain$BigIntegerDomain -> com.google.common.collect.DiscreteDomain$BigIntegerDomain:
    com.google.common.collect.DiscreteDomain$BigIntegerDomain INSTANCE -> INSTANCE
    java.math.BigInteger MIN_LONG -> MIN_LONG
    java.math.BigInteger MAX_LONG -> MAX_LONG
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.math.BigInteger next(java.math.BigInteger) -> next
    java.math.BigInteger previous(java.math.BigInteger) -> previous
    java.math.BigInteger offset(java.math.BigInteger,long) -> offset
    long distance(java.math.BigInteger,java.math.BigInteger) -> distance
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    java.lang.Comparable previous(java.lang.Comparable) -> previous
    java.lang.Comparable next(java.lang.Comparable) -> next
    java.lang.Comparable offset(java.lang.Comparable,long) -> offset
    com.google.common.collect.DiscreteDomain$BigIntegerDomain access$300() -> access$300
    void <clinit>() -> <clinit>
com.google.common.collect.DiscreteDomain$IntegerDomain -> com.google.common.collect.DiscreteDomain$IntegerDomain:
    com.google.common.collect.DiscreteDomain$IntegerDomain INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Integer next(java.lang.Integer) -> next
    java.lang.Integer previous(java.lang.Integer) -> previous
    java.lang.Integer offset(java.lang.Integer,long) -> offset
    long distance(java.lang.Integer,java.lang.Integer) -> distance
    java.lang.Integer minValue() -> minValue
    java.lang.Integer maxValue() -> maxValue
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    java.lang.Comparable maxValue() -> maxValue
    java.lang.Comparable minValue() -> minValue
    long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    java.lang.Comparable previous(java.lang.Comparable) -> previous
    java.lang.Comparable next(java.lang.Comparable) -> next
    java.lang.Comparable offset(java.lang.Comparable,long) -> offset
    com.google.common.collect.DiscreteDomain$IntegerDomain access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.collect.DiscreteDomain$LongDomain -> com.google.common.collect.DiscreteDomain$LongDomain:
    com.google.common.collect.DiscreteDomain$LongDomain INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Long next(java.lang.Long) -> next
    java.lang.Long previous(java.lang.Long) -> previous
    java.lang.Long offset(java.lang.Long,long) -> offset
    long distance(java.lang.Long,java.lang.Long) -> distance
    java.lang.Long minValue() -> minValue
    java.lang.Long maxValue() -> maxValue
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    java.lang.Comparable maxValue() -> maxValue
    java.lang.Comparable minValue() -> minValue
    long distance(java.lang.Comparable,java.lang.Comparable) -> distance
    java.lang.Comparable previous(java.lang.Comparable) -> previous
    java.lang.Comparable next(java.lang.Comparable) -> next
    java.lang.Comparable offset(java.lang.Comparable,long) -> offset
    com.google.common.collect.DiscreteDomain$LongDomain access$200() -> access$200
    void <clinit>() -> <clinit>
com.google.common.collect.EmptyContiguousSet -> com.google.common.collect.EmptyContiguousSet:
    void <init>(com.google.common.collect.DiscreteDomain) -> <init>
    java.lang.Comparable first() -> first
    java.lang.Comparable last() -> last
    int size() -> size
    com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet) -> intersection
    com.google.common.collect.Range range() -> range
    com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType) -> range
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> headSetImpl
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSetImpl
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> tailSetImpl
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    boolean isPartialView() -> isPartialView
    boolean isEmpty() -> isEmpty
    com.google.common.collect.ImmutableList asList() -> asList
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    boolean isHashCodeFast() -> isHashCodeFast
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.lang.Object last() -> last
    java.lang.Object first() -> first
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.EmptyContiguousSet$1 -> com.google.common.collect.EmptyContiguousSet$1:
com.google.common.collect.EmptyContiguousSet$SerializedForm -> com.google.common.collect.EmptyContiguousSet$SerializedForm:
    com.google.common.collect.DiscreteDomain domain -> domain
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.DiscreteDomain) -> <init>
    java.lang.Object readResolve() -> readResolve
    void <init>(com.google.common.collect.DiscreteDomain,com.google.common.collect.EmptyContiguousSet$1) -> <init>
com.google.common.collect.EmptyImmutableListMultimap -> com.google.common.collect.EmptyImmutableListMultimap:
    com.google.common.collect.EmptyImmutableListMultimap INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.collect.EmptyImmutableSetMultimap -> com.google.common.collect.EmptyImmutableSetMultimap:
    com.google.common.collect.EmptyImmutableSetMultimap INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object readResolve() -> readResolve
    void <clinit>() -> <clinit>
com.google.common.collect.EnumBiMap -> com.google.common.collect.EnumBiMap:
    java.lang.Class keyType -> keyType
    java.lang.Class valueType -> valueType
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.EnumBiMap create(java.lang.Class,java.lang.Class) -> create
    com.google.common.collect.EnumBiMap create(java.util.Map) -> create
    void <init>(java.lang.Class,java.lang.Class) -> <init>
    java.lang.Class inferKeyType(java.util.Map) -> inferKeyType
    java.lang.Class inferValueType(java.util.Map) -> inferValueType
    java.lang.Class keyType() -> keyType
    java.lang.Class valueType() -> valueType
    java.lang.Enum checkKey(java.lang.Enum) -> checkKey
    java.lang.Enum checkValue(java.lang.Enum) -> checkValue
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set entrySet() -> entrySet
    java.util.Set values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.BiMap inverse() -> inverse
    void clear() -> clear
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    void putAll(java.util.Map) -> putAll
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object checkValue(java.lang.Object) -> checkValue
    java.lang.Object checkKey(java.lang.Object) -> checkKey
com.google.common.collect.EnumHashBiMap -> com.google.common.collect.EnumHashBiMap:
    java.lang.Class keyType -> keyType
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.EnumHashBiMap create(java.lang.Class) -> create
    com.google.common.collect.EnumHashBiMap create(java.util.Map) -> create
    void <init>(java.lang.Class) -> <init>
    java.lang.Enum checkKey(java.lang.Enum) -> checkKey
    java.lang.Object put(java.lang.Enum,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Enum,java.lang.Object) -> forcePut
    java.lang.Class keyType() -> keyType
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set entrySet() -> entrySet
    java.util.Set values() -> values
    java.util.Set keySet() -> keySet
    com.google.common.collect.BiMap inverse() -> inverse
    void clear() -> clear
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object checkKey(java.lang.Object) -> checkKey
com.google.common.collect.EnumMultiset -> com.google.common.collect.EnumMultiset:
    java.lang.Class type -> type
    java.lang.Enum[] enumConstants -> enumConstants
    int[] counts -> counts
    int distinctElements -> distinctElements
    long size -> size
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.EnumMultiset create(java.lang.Class) -> create
    com.google.common.collect.EnumMultiset create(java.lang.Iterable) -> create
    com.google.common.collect.EnumMultiset create(java.lang.Iterable,java.lang.Class) -> create
    void <init>(java.lang.Class) -> <init>
    boolean isActuallyE(java.lang.Object) -> isActuallyE
    void checkIsE(java.lang.Object) -> checkIsE
    int distinctElements() -> distinctElements
    int size() -> size
    int count(java.lang.Object) -> count
    int add(java.lang.Enum,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Enum,int) -> setCount
    void clear() -> clear
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Iterator entryIterator() -> entryIterator
    void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    java.util.Iterator iterator() -> iterator
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set entrySet() -> entrySet
    java.util.Set elementSet() -> elementSet
    int setCount(java.lang.Object,int) -> setCount
    int add(java.lang.Object,int) -> add
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    java.lang.Enum[] access$000(com.google.common.collect.EnumMultiset) -> access$000
    int[] access$100(com.google.common.collect.EnumMultiset) -> access$100
    int access$210(com.google.common.collect.EnumMultiset) -> access$210
    long access$300(com.google.common.collect.EnumMultiset) -> access$300
    long access$302(com.google.common.collect.EnumMultiset,long) -> access$302
com.google.common.collect.EnumMultiset$1 -> com.google.common.collect.EnumMultiset$1:
    com.google.common.collect.EnumMultiset this$0 -> this$0
    void <init>(com.google.common.collect.EnumMultiset) -> <init>
    java.lang.Enum output(int) -> output
    java.lang.Object output(int) -> output
com.google.common.collect.EnumMultiset$2 -> com.google.common.collect.EnumMultiset$2:
    com.google.common.collect.EnumMultiset this$0 -> this$0
    void <init>(com.google.common.collect.EnumMultiset) -> <init>
    com.google.common.collect.Multiset$Entry output(int) -> output
    java.lang.Object output(int) -> output
com.google.common.collect.EnumMultiset$2$1 -> com.google.common.collect.EnumMultiset$2$1:
    int val$index -> val$index
    com.google.common.collect.EnumMultiset$2 this$1 -> this$1
    void <init>(com.google.common.collect.EnumMultiset$2,int) -> <init>
    java.lang.Enum getElement() -> getElement
    int getCount() -> getCount
    java.lang.Object getElement() -> getElement
com.google.common.collect.EnumMultiset$Itr -> com.google.common.collect.EnumMultiset$Itr:
    int index -> index
    int toRemove -> toRemove
    com.google.common.collect.EnumMultiset this$0 -> this$0
    void <init>(com.google.common.collect.EnumMultiset) -> <init>
    java.lang.Object output(int) -> output
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.EvictingQueue -> com.google.common.collect.EvictingQueue:
    java.util.Queue delegate -> delegate
    int maxSize -> maxSize
    long serialVersionUID -> serialVersionUID
    void <init>(int) -> <init>
    com.google.common.collect.EvictingQueue create(int) -> create
    int remainingCapacity() -> remainingCapacity
    java.util.Queue delegate() -> delegate
    boolean offer(java.lang.Object) -> offer
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ExplicitOrdering -> com.google.common.collect.ExplicitOrdering:
    com.google.common.collect.ImmutableMap rankMap -> rankMap
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    int rank(java.lang.Object) -> rank
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.FilteredEntryMultimap -> com.google.common.collect.FilteredEntryMultimap:
    com.google.common.collect.Multimap unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    com.google.common.base.Predicate entryPredicate() -> entryPredicate
    int size() -> size
    boolean satisfies(java.lang.Object,java.lang.Object) -> satisfies
    java.util.Collection filterCollection(java.util.Collection,com.google.common.base.Predicate) -> filterCollection
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection unmodifiableEmptyCollection() -> unmodifiableEmptyCollection
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection createEntries() -> createEntries
    java.util.Collection createValues() -> createValues
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    java.util.Set createKeySet() -> createKeySet
    boolean removeEntriesIf(com.google.common.base.Predicate) -> removeEntriesIf
    com.google.common.collect.Multiset createKeys() -> createKeys
    boolean access$000(com.google.common.collect.FilteredEntryMultimap,java.lang.Object,java.lang.Object) -> access$000
com.google.common.collect.FilteredEntryMultimap$AsMap -> com.google.common.collect.FilteredEntryMultimap$AsMap:
    com.google.common.collect.FilteredEntryMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredEntryMultimap) -> <init>
    boolean containsKey(java.lang.Object) -> containsKey
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection remove(java.lang.Object) -> remove
    java.util.Set createKeySet() -> createKeySet
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Collection createValues() -> createValues
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl -> com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl$1 -> com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl$1:
    java.util.Iterator backingIterator -> backingIterator
    com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl this$2 -> this$2
    void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl -> com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap) -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl -> com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl:
    com.google.common.collect.FilteredEntryMultimap$AsMap this$1 -> this$1
    void <init>(com.google.common.collect.FilteredEntryMultimap$AsMap) -> <init>
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.FilteredEntryMultimap$Keys -> com.google.common.collect.FilteredEntryMultimap$Keys:
    com.google.common.collect.FilteredEntryMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredEntryMultimap) -> <init>
    int remove(java.lang.Object,int) -> remove
    java.util.Set entrySet() -> entrySet
com.google.common.collect.FilteredEntryMultimap$Keys$1 -> com.google.common.collect.FilteredEntryMultimap$Keys$1:
    com.google.common.collect.FilteredEntryMultimap$Keys this$1 -> this$1
    void <init>(com.google.common.collect.FilteredEntryMultimap$Keys) -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean removeEntriesIf(com.google.common.base.Predicate) -> removeEntriesIf
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.FilteredEntryMultimap$Keys$1$1 -> com.google.common.collect.FilteredEntryMultimap$Keys$1$1:
    com.google.common.base.Predicate val$predicate -> val$predicate
    com.google.common.collect.FilteredEntryMultimap$Keys$1 this$2 -> this$2
    void <init>(com.google.common.collect.FilteredEntryMultimap$Keys$1,com.google.common.base.Predicate) -> <init>
    boolean apply(java.util.Map$Entry) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.FilteredEntryMultimap$ValuePredicate -> com.google.common.collect.FilteredEntryMultimap$ValuePredicate:
    java.lang.Object key -> key
    com.google.common.collect.FilteredEntryMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredEntryMultimap,java.lang.Object) -> <init>
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.FilteredEntrySetMultimap -> com.google.common.collect.FilteredEntrySetMultimap:
    void <init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.SetMultimap unfiltered() -> unfiltered
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set createEntries() -> createEntries
    java.util.Set entries() -> entries
    java.util.Collection createEntries() -> createEntries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeyListMultimap -> com.google.common.collect.FilteredKeyListMultimap:
    void <init>(com.google.common.collect.ListMultimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.ListMultimap unfiltered() -> unfiltered
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeyMultimap -> com.google.common.collect.FilteredKeyMultimap:
    com.google.common.collect.Multimap unfiltered -> unfiltered
    com.google.common.base.Predicate keyPredicate -> keyPredicate
    void <init>(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    com.google.common.base.Predicate entryPredicate() -> entryPredicate
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection unmodifiableEmptyCollection() -> unmodifiableEmptyCollection
    void clear() -> clear
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection get(java.lang.Object) -> get
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection createEntries() -> createEntries
    java.util.Collection createValues() -> createValues
    java.util.Map createAsMap() -> createAsMap
    com.google.common.collect.Multiset createKeys() -> createKeys
com.google.common.collect.FilteredKeyMultimap$AddRejectingList -> com.google.common.collect.FilteredKeyMultimap$AddRejectingList:
    java.lang.Object key -> key
    void <init>(java.lang.Object) -> <init>
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    java.util.List delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeyMultimap$AddRejectingSet -> com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:
    java.lang.Object key -> key
    void <init>(java.lang.Object) -> <init>
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeyMultimap$Entries -> com.google.common.collect.FilteredKeyMultimap$Entries:
    com.google.common.collect.FilteredKeyMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredKeyMultimap) -> <init>
    java.util.Collection delegate() -> delegate
    boolean remove(java.lang.Object) -> remove
    java.lang.Object delegate() -> delegate
com.google.common.collect.FilteredKeySetMultimap -> com.google.common.collect.FilteredKeySetMultimap:
    void <init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.SetMultimap unfiltered() -> unfiltered
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Set createEntries() -> createEntries
    java.util.Collection createEntries() -> createEntries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.FilteredKeySetMultimap$EntrySet -> com.google.common.collect.FilteredKeySetMultimap$EntrySet:
    com.google.common.collect.FilteredKeySetMultimap this$0 -> this$0
    void <init>(com.google.common.collect.FilteredKeySetMultimap) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.FilteredMultimap -> com.google.common.collect.FilteredMultimap:
    com.google.common.collect.Multimap unfiltered() -> unfiltered
    com.google.common.base.Predicate entryPredicate() -> entryPredicate
com.google.common.collect.FilteredMultimapValues -> com.google.common.collect.FilteredMultimapValues:
    com.google.common.collect.FilteredMultimap multimap -> multimap
    void <init>(com.google.common.collect.FilteredMultimap) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
com.google.common.collect.FilteredSetMultimap -> com.google.common.collect.FilteredSetMultimap:
    com.google.common.collect.SetMultimap unfiltered() -> unfiltered
    com.google.common.collect.Multimap unfiltered() -> unfiltered
com.google.common.collect.FluentIterable -> com.google.common.collect.FluentIterable:
    com.google.common.base.Optional iterableDelegate -> iterableDelegate
    void <init>() -> <init>
    void <init>(java.lang.Iterable) -> <init>
    java.lang.Iterable getDelegate() -> getDelegate
    com.google.common.collect.FluentIterable from(java.lang.Iterable) -> from
    com.google.common.collect.FluentIterable from(java.lang.Object[]) -> from
    com.google.common.collect.FluentIterable from(com.google.common.collect.FluentIterable) -> from
    com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable) -> concat
    com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    com.google.common.collect.FluentIterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    com.google.common.collect.FluentIterable concat(java.lang.Iterable[]) -> concat
    com.google.common.collect.FluentIterable concat(java.lang.Iterable) -> concat
    com.google.common.collect.FluentIterable concatNoDefensiveCopy(java.lang.Iterable[]) -> concatNoDefensiveCopy
    com.google.common.collect.FluentIterable of() -> of
    com.google.common.collect.FluentIterable of(java.lang.Object,java.lang.Object[]) -> of
    java.lang.String toString() -> toString
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.FluentIterable cycle() -> cycle
    com.google.common.collect.FluentIterable append(java.lang.Iterable) -> append
    com.google.common.collect.FluentIterable append(java.lang.Object[]) -> append
    com.google.common.collect.FluentIterable filter(com.google.common.base.Predicate) -> filter
    com.google.common.collect.FluentIterable filter(java.lang.Class) -> filter
    boolean anyMatch(com.google.common.base.Predicate) -> anyMatch
    boolean allMatch(com.google.common.base.Predicate) -> allMatch
    com.google.common.base.Optional firstMatch(com.google.common.base.Predicate) -> firstMatch
    com.google.common.collect.FluentIterable transform(com.google.common.base.Function) -> transform
    com.google.common.collect.FluentIterable transformAndConcat(com.google.common.base.Function) -> transformAndConcat
    com.google.common.base.Optional first() -> first
    com.google.common.base.Optional last() -> last
    com.google.common.collect.FluentIterable skip(int) -> skip
    com.google.common.collect.FluentIterable limit(int) -> limit
    boolean isEmpty() -> isEmpty
    com.google.common.collect.ImmutableList toList() -> toList
    com.google.common.collect.ImmutableList toSortedList(java.util.Comparator) -> toSortedList
    com.google.common.collect.ImmutableSet toSet() -> toSet
    com.google.common.collect.ImmutableSortedSet toSortedSet(java.util.Comparator) -> toSortedSet
    com.google.common.collect.ImmutableMultiset toMultiset() -> toMultiset
    com.google.common.collect.ImmutableMap toMap(com.google.common.base.Function) -> toMap
    com.google.common.collect.ImmutableListMultimap index(com.google.common.base.Function) -> index
    com.google.common.collect.ImmutableMap uniqueIndex(com.google.common.base.Function) -> uniqueIndex
    java.lang.Object[] toArray(java.lang.Class) -> toArray
    java.util.Collection copyInto(java.util.Collection) -> copyInto
    java.lang.String join(com.google.common.base.Joiner) -> join
    java.lang.Object get(int) -> get
    java.util.stream.Stream stream() -> stream
com.google.common.collect.FluentIterable$1 -> com.google.common.collect.FluentIterable$1:
    java.lang.Iterable val$iterable -> val$iterable
    void <init>(java.lang.Iterable,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$2 -> com.google.common.collect.FluentIterable$2:
    java.lang.Iterable val$inputs -> val$inputs
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$3 -> com.google.common.collect.FluentIterable$3:
    java.lang.Iterable[] val$inputs -> val$inputs
    void <init>(java.lang.Iterable[]) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.FluentIterable$3$1 -> com.google.common.collect.FluentIterable$3$1:
    com.google.common.collect.FluentIterable$3 this$0 -> this$0
    void <init>(com.google.common.collect.FluentIterable$3,int) -> <init>
    java.util.Iterator get(int) -> get
    java.lang.Object get(int) -> get
com.google.common.collect.FluentIterable$FromIterableFunction -> com.google.common.collect.FluentIterable$FromIterableFunction:
    void <init>() -> <init>
    com.google.common.collect.FluentIterable apply(java.lang.Iterable) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.ForwardingBlockingDeque -> com.google.common.collect.ForwardingBlockingDeque:
    void <init>() -> <init>
    java.util.concurrent.BlockingDeque delegate() -> delegate
    int remainingCapacity() -> remainingCapacity
    void putFirst(java.lang.Object) -> putFirst
    void putLast(java.lang.Object) -> putLast
    boolean offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerFirst
    boolean offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerLast
    java.lang.Object takeFirst() -> takeFirst
    java.lang.Object takeLast() -> takeLast
    java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit) -> pollFirst
    java.lang.Object pollLast(long,java.util.concurrent.TimeUnit) -> pollLast
    void put(java.lang.Object) -> put
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    java.lang.Object take() -> take
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    int drainTo(java.util.Collection) -> drainTo
    int drainTo(java.util.Collection,int) -> drainTo
    java.util.Deque delegate() -> delegate
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingCollection -> com.google.common.collect.ForwardingCollection:
    void <init>() -> <init>
    java.util.Collection delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean removeAll(java.util.Collection) -> removeAll
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean standardContains(java.lang.Object) -> standardContains
    boolean standardContainsAll(java.util.Collection) -> standardContainsAll
    boolean standardAddAll(java.util.Collection) -> standardAddAll
    boolean standardRemove(java.lang.Object) -> standardRemove
    boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    boolean standardRetainAll(java.util.Collection) -> standardRetainAll
    void standardClear() -> standardClear
    boolean standardIsEmpty() -> standardIsEmpty
    java.lang.String standardToString() -> standardToString
    java.lang.Object[] standardToArray() -> standardToArray
    java.lang.Object[] standardToArray(java.lang.Object[]) -> standardToArray
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingConcurrentMap -> com.google.common.collect.ForwardingConcurrentMap:
    void <init>() -> <init>
    java.util.concurrent.ConcurrentMap delegate() -> delegate
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingDeque -> com.google.common.collect.ForwardingDeque:
    void <init>() -> <init>
    java.util.Deque delegate() -> delegate
    void addFirst(java.lang.Object) -> addFirst
    void addLast(java.lang.Object) -> addLast
    java.util.Iterator descendingIterator() -> descendingIterator
    java.lang.Object getFirst() -> getFirst
    java.lang.Object getLast() -> getLast
    boolean offerFirst(java.lang.Object) -> offerFirst
    boolean offerLast(java.lang.Object) -> offerLast
    java.lang.Object peekFirst() -> peekFirst
    java.lang.Object peekLast() -> peekLast
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object pop() -> pop
    void push(java.lang.Object) -> push
    java.lang.Object removeFirst() -> removeFirst
    java.lang.Object removeLast() -> removeLast
    boolean removeFirstOccurrence(java.lang.Object) -> removeFirstOccurrence
    boolean removeLastOccurrence(java.lang.Object) -> removeLastOccurrence
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingImmutableCollection -> com.google.common.collect.ForwardingImmutableCollection:
    void <init>() -> <init>
com.google.common.collect.ForwardingImmutableList -> com.google.common.collect.ForwardingImmutableList:
    void <init>() -> <init>
com.google.common.collect.ForwardingImmutableMap -> com.google.common.collect.ForwardingImmutableMap:
    void <init>() -> <init>
com.google.common.collect.ForwardingImmutableSet -> com.google.common.collect.ForwardingImmutableSet:
    void <init>() -> <init>
com.google.common.collect.ForwardingIterator -> com.google.common.collect.ForwardingIterator:
    void <init>() -> <init>
    java.util.Iterator delegate() -> delegate
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingList -> com.google.common.collect.ForwardingList:
    void <init>() -> <init>
    java.util.List delegate() -> delegate
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean standardAdd(java.lang.Object) -> standardAdd
    boolean standardAddAll(int,java.lang.Iterable) -> standardAddAll
    int standardIndexOf(java.lang.Object) -> standardIndexOf
    int standardLastIndexOf(java.lang.Object) -> standardLastIndexOf
    java.util.Iterator standardIterator() -> standardIterator
    java.util.ListIterator standardListIterator() -> standardListIterator
    java.util.ListIterator standardListIterator(int) -> standardListIterator
    java.util.List standardSubList(int,int) -> standardSubList
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingListIterator -> com.google.common.collect.ForwardingListIterator:
    void <init>() -> <init>
    java.util.ListIterator delegate() -> delegate
    void add(java.lang.Object) -> add
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    java.util.Iterator delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingListMultimap -> com.google.common.collect.ForwardingListMultimap:
    void <init>() -> <init>
    com.google.common.collect.ListMultimap delegate() -> delegate
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMap -> com.google.common.collect.ForwardingMap:
    void <init>() -> <init>
    java.util.Map delegate() -> delegate
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void standardPutAll(java.util.Map) -> standardPutAll
    java.lang.Object standardRemove(java.lang.Object) -> standardRemove
    void standardClear() -> standardClear
    boolean standardContainsKey(java.lang.Object) -> standardContainsKey
    boolean standardContainsValue(java.lang.Object) -> standardContainsValue
    boolean standardIsEmpty() -> standardIsEmpty
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.lang.String standardToString() -> standardToString
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMap$StandardEntrySet -> com.google.common.collect.ForwardingMap$StandardEntrySet:
    com.google.common.collect.ForwardingMap this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingMap) -> <init>
    java.util.Map map() -> map
com.google.common.collect.ForwardingMap$StandardKeySet -> com.google.common.collect.ForwardingMap$StandardKeySet:
    com.google.common.collect.ForwardingMap this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingMap) -> <init>
com.google.common.collect.ForwardingMap$StandardValues -> com.google.common.collect.ForwardingMap$StandardValues:
    com.google.common.collect.ForwardingMap this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingMap) -> <init>
com.google.common.collect.ForwardingMapEntry -> com.google.common.collect.ForwardingMapEntry:
    void <init>() -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.lang.String standardToString() -> standardToString
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultimap -> com.google.common.collect.ForwardingMultimap:
    void <init>() -> <init>
    com.google.common.collect.Multimap delegate() -> delegate
    java.util.Map asMap() -> asMap
    void clear() -> clear
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    int size() -> size
    java.util.Collection values() -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultiset -> com.google.common.collect.ForwardingMultiset:
    void <init>() -> <init>
    com.google.common.collect.Multiset delegate() -> delegate
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean standardContains(java.lang.Object) -> standardContains
    void standardClear() -> standardClear
    int standardCount(java.lang.Object) -> standardCount
    boolean standardAdd(java.lang.Object) -> standardAdd
    boolean standardAddAll(java.util.Collection) -> standardAddAll
    boolean standardRemove(java.lang.Object) -> standardRemove
    boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    boolean standardRetainAll(java.util.Collection) -> standardRetainAll
    int standardSetCount(java.lang.Object,int) -> standardSetCount
    boolean standardSetCount(java.lang.Object,int,int) -> standardSetCount
    java.util.Iterator standardIterator() -> standardIterator
    int standardSize() -> standardSize
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.lang.String standardToString() -> standardToString
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingMultiset$StandardElementSet -> com.google.common.collect.ForwardingMultiset$StandardElementSet:
    com.google.common.collect.ForwardingMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingMultiset) -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ForwardingNavigableMap -> com.google.common.collect.ForwardingNavigableMap:
    void <init>() -> <init>
    java.util.NavigableMap delegate() -> delegate
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.util.Map$Entry standardLowerEntry(java.lang.Object) -> standardLowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.lang.Object standardLowerKey(java.lang.Object) -> standardLowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.util.Map$Entry standardFloorEntry(java.lang.Object) -> standardFloorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.lang.Object standardFloorKey(java.lang.Object) -> standardFloorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.util.Map$Entry standardCeilingEntry(java.lang.Object) -> standardCeilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.lang.Object standardCeilingKey(java.lang.Object) -> standardCeilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.util.Map$Entry standardHigherEntry(java.lang.Object) -> standardHigherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.lang.Object standardHigherKey(java.lang.Object) -> standardHigherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry standardFirstEntry() -> standardFirstEntry
    java.lang.Object standardFirstKey() -> standardFirstKey
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry standardLastEntry() -> standardLastEntry
    java.lang.Object standardLastKey() -> standardLastKey
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry standardPollFirstEntry() -> standardPollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.Map$Entry standardPollLastEntry() -> standardPollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableSet standardDescendingKeySet() -> standardDescendingKeySet
    java.util.SortedMap standardSubMap(java.lang.Object,java.lang.Object) -> standardSubMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedMap standardHeadMap(java.lang.Object) -> standardHeadMap
    java.util.SortedMap standardTailMap(java.lang.Object) -> standardTailMap
    java.util.SortedMap delegate() -> delegate
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap -> com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:
    com.google.common.collect.ForwardingNavigableMap this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingNavigableMap) -> <init>
    java.util.NavigableMap forward() -> forward
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    java.util.Iterator entryIterator() -> entryIterator
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1 -> com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1:
    java.util.Map$Entry toRemove -> toRemove
    java.util.Map$Entry nextOrNull -> nextOrNull
    com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap this$1 -> this$1
    void <init>(com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet -> com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet:
    com.google.common.collect.ForwardingNavigableMap this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingNavigableMap) -> <init>
com.google.common.collect.ForwardingNavigableSet -> com.google.common.collect.ForwardingNavigableSet:
    void <init>() -> <init>
    java.util.NavigableSet delegate() -> delegate
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object standardLower(java.lang.Object) -> standardLower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object standardFloor(java.lang.Object) -> standardFloor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object standardCeiling(java.lang.Object) -> standardCeiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object standardHigher(java.lang.Object) -> standardHigher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object standardPollFirst() -> standardPollFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object standardPollLast() -> standardPollLast
    java.lang.Object standardFirst() -> standardFirst
    java.lang.Object standardLast() -> standardLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean) -> standardSubSet
    java.util.SortedSet standardSubSet(java.lang.Object,java.lang.Object) -> standardSubSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.SortedSet standardHeadSet(java.lang.Object) -> standardHeadSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet standardTailSet(java.lang.Object) -> standardTailSet
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet -> com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet:
    com.google.common.collect.ForwardingNavigableSet this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingNavigableSet) -> <init>
com.google.common.collect.ForwardingObject -> com.google.common.collect.ForwardingObject:
    void <init>() -> <init>
    java.lang.Object delegate() -> delegate
    java.lang.String toString() -> toString
com.google.common.collect.ForwardingQueue -> com.google.common.collect.ForwardingQueue:
    void <init>() -> <init>
    java.util.Queue delegate() -> delegate
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object remove() -> remove
    java.lang.Object peek() -> peek
    java.lang.Object element() -> element
    boolean standardOffer(java.lang.Object) -> standardOffer
    java.lang.Object standardPeek() -> standardPeek
    java.lang.Object standardPoll() -> standardPoll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSet -> com.google.common.collect.ForwardingSet:
    void <init>() -> <init>
    java.util.Set delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean standardRemoveAll(java.util.Collection) -> standardRemoveAll
    boolean standardEquals(java.lang.Object) -> standardEquals
    int standardHashCode() -> standardHashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSetMultimap -> com.google.common.collect.ForwardingSetMultimap:
    void <init>() -> <init>
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Set entries() -> entries
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection entries() -> entries
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedMap -> com.google.common.collect.ForwardingSortedMap:
    void <init>() -> <init>
    java.util.SortedMap delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    int unsafeCompare(java.lang.Object,java.lang.Object) -> unsafeCompare
    boolean standardContainsKey(java.lang.Object) -> standardContainsKey
    java.util.SortedMap standardSubMap(java.lang.Object,java.lang.Object) -> standardSubMap
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedMap$StandardKeySet -> com.google.common.collect.ForwardingSortedMap$StandardKeySet:
    com.google.common.collect.ForwardingSortedMap this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingSortedMap) -> <init>
com.google.common.collect.ForwardingSortedMultiset -> com.google.common.collect.ForwardingSortedMultiset:
    void <init>() -> <init>
    com.google.common.collect.SortedMultiset delegate() -> delegate
    java.util.NavigableSet elementSet() -> elementSet
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry standardFirstEntry() -> standardFirstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry standardLastEntry() -> standardLastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry standardPollFirstEntry() -> standardPollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.Multiset$Entry standardPollLastEntry() -> standardPollLastEntry
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset standardSubMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> standardSubMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    java.util.Set elementSet() -> elementSet
    com.google.common.collect.Multiset delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset -> com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset:
    com.google.common.collect.ForwardingSortedMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingSortedMultiset) -> <init>
    com.google.common.collect.SortedMultiset forwardMultiset() -> forwardMultiset
com.google.common.collect.ForwardingSortedMultiset$StandardElementSet -> com.google.common.collect.ForwardingSortedMultiset$StandardElementSet:
    com.google.common.collect.ForwardingSortedMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ForwardingSortedMultiset) -> <init>
com.google.common.collect.ForwardingSortedSet -> com.google.common.collect.ForwardingSortedSet:
    void <init>() -> <init>
    java.util.SortedSet delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object first() -> first
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.lang.Object last() -> last
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    int unsafeCompare(java.lang.Object,java.lang.Object) -> unsafeCompare
    boolean standardContains(java.lang.Object) -> standardContains
    boolean standardRemove(java.lang.Object) -> standardRemove
    java.util.SortedSet standardSubSet(java.lang.Object,java.lang.Object) -> standardSubSet
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingSortedSetMultimap -> com.google.common.collect.ForwardingSortedSetMultimap:
    void <init>() -> <init>
    com.google.common.collect.SortedSetMultimap delegate() -> delegate
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.ForwardingTable -> com.google.common.collect.ForwardingTable:
    void <init>() -> <init>
    com.google.common.collect.Table delegate() -> delegate
    java.util.Set cellSet() -> cellSet
    void clear() -> clear
    java.util.Map column(java.lang.Object) -> column
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Map columnMap() -> columnMap
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    int size() -> size
    java.util.Collection values() -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.GeneralRange -> com.google.common.collect.GeneralRange:
    java.util.Comparator comparator -> comparator
    boolean hasLowerBound -> hasLowerBound
    java.lang.Object lowerEndpoint -> lowerEndpoint
    com.google.common.collect.BoundType lowerBoundType -> lowerBoundType
    boolean hasUpperBound -> hasUpperBound
    java.lang.Object upperEndpoint -> upperEndpoint
    com.google.common.collect.BoundType upperBoundType -> upperBoundType
    com.google.common.collect.GeneralRange reverse -> reverse
    com.google.common.collect.GeneralRange from(com.google.common.collect.Range) -> from
    com.google.common.collect.GeneralRange all(java.util.Comparator) -> all
    com.google.common.collect.GeneralRange downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType) -> downTo
    com.google.common.collect.GeneralRange upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType) -> upTo
    com.google.common.collect.GeneralRange range(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> range
    void <init>(java.util.Comparator,boolean,java.lang.Object,com.google.common.collect.BoundType,boolean,java.lang.Object,com.google.common.collect.BoundType) -> <init>
    java.util.Comparator comparator() -> comparator
    boolean hasLowerBound() -> hasLowerBound
    boolean hasUpperBound() -> hasUpperBound
    boolean isEmpty() -> isEmpty
    boolean tooLow(java.lang.Object) -> tooLow
    boolean tooHigh(java.lang.Object) -> tooHigh
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.GeneralRange intersect(com.google.common.collect.GeneralRange) -> intersect
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.collect.GeneralRange reverse() -> reverse
    java.lang.String toString() -> toString
    java.lang.Object getLowerEndpoint() -> getLowerEndpoint
    com.google.common.collect.BoundType getLowerBoundType() -> getLowerBoundType
    java.lang.Object getUpperEndpoint() -> getUpperEndpoint
    com.google.common.collect.BoundType getUpperBoundType() -> getUpperBoundType
com.google.common.collect.GwtTransient -> com.google.common.collect.GwtTransient:
com.google.common.collect.HashBasedTable -> com.google.common.collect.HashBasedTable:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.HashBasedTable create() -> create
    com.google.common.collect.HashBasedTable create(int,int) -> create
    com.google.common.collect.HashBasedTable create(com.google.common.collect.Table) -> create
    void <init>(java.util.Map,com.google.common.collect.HashBasedTable$Factory) -> <init>
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean equals(java.lang.Object) -> equals
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
    java.util.Collection values() -> values
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map column(java.lang.Object) -> column
    java.util.Map row(java.lang.Object) -> row
    java.util.Set cellSet() -> cellSet
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    void putAll(com.google.common.collect.Table) -> putAll
com.google.common.collect.HashBasedTable$Factory -> com.google.common.collect.HashBasedTable$Factory:
    int expectedSize -> expectedSize
    long serialVersionUID -> serialVersionUID
    void <init>(int) -> <init>
    java.util.Map get() -> get
    java.lang.Object get() -> get
com.google.common.collect.HashBiMap -> com.google.common.collect.HashBiMap:
    double LOAD_FACTOR -> LOAD_FACTOR
    com.google.common.collect.HashBiMap$BiEntry[] hashTableKToV -> hashTableKToV
    com.google.common.collect.HashBiMap$BiEntry[] hashTableVToK -> hashTableVToK
    com.google.common.collect.HashBiMap$BiEntry firstInKeyInsertionOrder -> firstInKeyInsertionOrder
    com.google.common.collect.HashBiMap$BiEntry lastInKeyInsertionOrder -> lastInKeyInsertionOrder
    int size -> size
    int mask -> mask
    int modCount -> modCount
    com.google.common.collect.BiMap inverse -> inverse
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.HashBiMap create() -> create
    com.google.common.collect.HashBiMap create(int) -> create
    com.google.common.collect.HashBiMap create(java.util.Map) -> create
    void <init>(int) -> <init>
    void init(int) -> init
    void delete(com.google.common.collect.HashBiMap$BiEntry) -> delete
    void insert(com.google.common.collect.HashBiMap$BiEntry,com.google.common.collect.HashBiMap$BiEntry) -> insert
    com.google.common.collect.HashBiMap$BiEntry seekByKey(java.lang.Object,int) -> seekByKey
    com.google.common.collect.HashBiMap$BiEntry seekByValue(java.lang.Object,int) -> seekByValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object put(java.lang.Object,java.lang.Object,boolean) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object putInverse(java.lang.Object,java.lang.Object,boolean) -> putInverse
    void rehashIfNecessary() -> rehashIfNecessary
    com.google.common.collect.HashBiMap$BiEntry[] createTable(int) -> createTable
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    int size() -> size
    java.util.Set keySet() -> keySet
    java.util.Set values() -> values
    java.util.Iterator entryIterator() -> entryIterator
    void forEach(java.util.function.BiConsumer) -> forEach
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    com.google.common.collect.BiMap inverse() -> inverse
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    com.google.common.collect.HashBiMap$BiEntry access$000(com.google.common.collect.HashBiMap) -> access$000
    int access$100(com.google.common.collect.HashBiMap) -> access$100
    void access$200(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$BiEntry) -> access$200
    com.google.common.collect.HashBiMap$BiEntry access$300(com.google.common.collect.HashBiMap,java.lang.Object,int) -> access$300
    com.google.common.collect.HashBiMap$BiEntry access$400(com.google.common.collect.HashBiMap,java.lang.Object,int) -> access$400
    void access$500(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$BiEntry,com.google.common.collect.HashBiMap$BiEntry) -> access$500
    int access$700(com.google.common.collect.HashBiMap) -> access$700
    java.lang.Object access$800(com.google.common.collect.HashBiMap,java.lang.Object,java.lang.Object,boolean) -> access$800
com.google.common.collect.HashBiMap$1 -> com.google.common.collect.HashBiMap$1:
    com.google.common.collect.HashBiMap this$0 -> this$0
    void <init>(com.google.common.collect.HashBiMap) -> <init>
    java.util.Map$Entry output(com.google.common.collect.HashBiMap$BiEntry) -> output
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashBiMap$1$MapEntry -> com.google.common.collect.HashBiMap$1$MapEntry:
    com.google.common.collect.HashBiMap$BiEntry delegate -> delegate
    com.google.common.collect.HashBiMap$1 this$1 -> this$1
    void <init>(com.google.common.collect.HashBiMap$1,com.google.common.collect.HashBiMap$BiEntry) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.HashBiMap$BiEntry -> com.google.common.collect.HashBiMap$BiEntry:
    int keyHash -> keyHash
    int valueHash -> valueHash
    com.google.common.collect.HashBiMap$BiEntry nextInKToVBucket -> nextInKToVBucket
    com.google.common.collect.HashBiMap$BiEntry nextInVToKBucket -> nextInVToKBucket
    com.google.common.collect.HashBiMap$BiEntry nextInKeyInsertionOrder -> nextInKeyInsertionOrder
    com.google.common.collect.HashBiMap$BiEntry prevInKeyInsertionOrder -> prevInKeyInsertionOrder
    void <init>(java.lang.Object,int,java.lang.Object,int) -> <init>
com.google.common.collect.HashBiMap$Inverse -> com.google.common.collect.HashBiMap$Inverse:
    com.google.common.collect.HashBiMap this$0 -> this$0
    void <init>(com.google.common.collect.HashBiMap) -> <init>
    com.google.common.collect.BiMap forward() -> forward
    int size() -> size
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object remove(java.lang.Object) -> remove
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set keySet() -> keySet
    java.util.Set values() -> values
    java.util.Iterator entryIterator() -> entryIterator
    void forEach(java.util.function.BiConsumer) -> forEach
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    java.lang.Object writeReplace() -> writeReplace
    java.util.Collection values() -> values
    void lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> lambda$forEach$0
    void <init>(com.google.common.collect.HashBiMap,com.google.common.collect.HashBiMap$1) -> <init>
com.google.common.collect.HashBiMap$Inverse$1 -> com.google.common.collect.HashBiMap$Inverse$1:
    com.google.common.collect.HashBiMap$Inverse this$1 -> this$1
    void <init>(com.google.common.collect.HashBiMap$Inverse) -> <init>
    java.util.Map$Entry output(com.google.common.collect.HashBiMap$BiEntry) -> output
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashBiMap$Inverse$1$InverseEntry -> com.google.common.collect.HashBiMap$Inverse$1$InverseEntry:
    com.google.common.collect.HashBiMap$BiEntry delegate -> delegate
    com.google.common.collect.HashBiMap$Inverse$1 this$2 -> this$2
    void <init>(com.google.common.collect.HashBiMap$Inverse$1,com.google.common.collect.HashBiMap$BiEntry) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.HashBiMap$Inverse$InverseKeySet -> com.google.common.collect.HashBiMap$Inverse$InverseKeySet:
    com.google.common.collect.HashBiMap$Inverse this$1 -> this$1
    void <init>(com.google.common.collect.HashBiMap$Inverse) -> <init>
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1 -> com.google.common.collect.HashBiMap$Inverse$InverseKeySet$1:
    com.google.common.collect.HashBiMap$Inverse$InverseKeySet this$2 -> this$2
    void <init>(com.google.common.collect.HashBiMap$Inverse$InverseKeySet) -> <init>
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashBiMap$InverseSerializedForm -> com.google.common.collect.HashBiMap$InverseSerializedForm:
    com.google.common.collect.HashBiMap bimap -> bimap
    void <init>(com.google.common.collect.HashBiMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.HashBiMap$Itr -> com.google.common.collect.HashBiMap$Itr:
    com.google.common.collect.HashBiMap$BiEntry next -> next
    com.google.common.collect.HashBiMap$BiEntry toRemove -> toRemove
    int expectedModCount -> expectedModCount
    int remaining -> remaining
    com.google.common.collect.HashBiMap this$0 -> this$0
    void <init>(com.google.common.collect.HashBiMap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashBiMap$KeySet -> com.google.common.collect.HashBiMap$KeySet:
    com.google.common.collect.HashBiMap this$0 -> this$0
    void <init>(com.google.common.collect.HashBiMap) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.HashBiMap$KeySet$1 -> com.google.common.collect.HashBiMap$KeySet$1:
    com.google.common.collect.HashBiMap$KeySet this$1 -> this$1
    void <init>(com.google.common.collect.HashBiMap$KeySet) -> <init>
    java.lang.Object output(com.google.common.collect.HashBiMap$BiEntry) -> output
com.google.common.collect.HashMultimap -> com.google.common.collect.HashMultimap:
    int DEFAULT_VALUES_PER_KEY -> DEFAULT_VALUES_PER_KEY
    int expectedValuesPerKey -> expectedValuesPerKey
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.HashMultimap create() -> create
    com.google.common.collect.HashMultimap create(int,int) -> create
    com.google.common.collect.HashMultimap create(com.google.common.collect.Multimap) -> create
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void <init>(com.google.common.collect.Multimap) -> <init>
    java.util.Set createCollection() -> createCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    boolean equals(java.lang.Object) -> equals
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Map asMap() -> asMap
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set entries() -> entries
    java.util.Set get(java.lang.Object) -> get
    void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Collection values() -> values
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    java.util.Collection createCollection() -> createCollection
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isEmpty() -> isEmpty
com.google.common.collect.HashMultimapGwtSerializationDependencies -> com.google.common.collect.HashMultimapGwtSerializationDependencies:
    void <init>(java.util.Map) -> <init>
com.google.common.collect.HashMultiset -> com.google.common.collect.HashMultiset:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.HashMultiset create() -> create
    com.google.common.collect.HashMultiset create(int) -> create
    com.google.common.collect.HashMultiset create(java.lang.Iterable) -> create
    void <init>() -> <init>
    void <init>(int) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    int setCount(java.lang.Object,int) -> setCount
    int remove(java.lang.Object,int) -> remove
    int add(java.lang.Object,int) -> add
    int count(java.lang.Object) -> count
    java.util.Iterator iterator() -> iterator
    int size() -> size
    void clear() -> clear
    void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    java.util.Set entrySet() -> entrySet
    java.util.Set elementSet() -> elementSet
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
com.google.common.collect.Hashing -> com.google.common.collect.Hashing:
    long C1 -> C1
    long C2 -> C2
    int MAX_TABLE_SIZE -> MAX_TABLE_SIZE
    void <init>() -> <init>
    int smear(int) -> smear
    int smearedHash(java.lang.Object) -> smearedHash
    int closedTableSize(int,double) -> closedTableSize
    boolean needsResizing(int,int,double) -> needsResizing
com.google.common.collect.ImmutableAsList -> com.google.common.collect.ImmutableAsList:
    void <init>() -> <init>
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean isPartialView() -> isPartialView
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.ImmutableAsList$SerializedForm -> com.google.common.collect.ImmutableAsList$SerializedForm:
    com.google.common.collect.ImmutableCollection collection -> collection
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableCollection) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableBiMap -> com.google.common.collect.ImmutableBiMap:
    java.util.stream.Collector toImmutableBiMap(java.util.function.Function,java.util.function.Function) -> toImmutableBiMap
    com.google.common.collect.ImmutableBiMap of() -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableBiMap$Builder builder() -> builder
    com.google.common.collect.ImmutableBiMap$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    com.google.common.collect.ImmutableBiMap copyOf(java.util.Map) -> copyOf
    com.google.common.collect.ImmutableBiMap copyOf(java.lang.Iterable) -> copyOf
    void <init>() -> <init>
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    com.google.common.collect.ImmutableSet values() -> values
    com.google.common.collect.ImmutableSet createValues() -> createValues
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    com.google.common.collect.ImmutableCollection values() -> values
    java.util.Collection values() -> values
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
com.google.common.collect.ImmutableBiMap$Builder -> com.google.common.collect.ImmutableBiMap$Builder:
    void <init>() -> <init>
    void <init>(int) -> <init>
    com.google.common.collect.ImmutableBiMap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableBiMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableBiMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableBiMap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableBiMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    com.google.common.collect.ImmutableBiMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> combine
    com.google.common.collect.ImmutableBiMap build() -> build
    com.google.common.collect.ImmutableBiMap buildJdkBacked() -> buildJdkBacked
    com.google.common.collect.ImmutableMap buildJdkBacked() -> buildJdkBacked
    com.google.common.collect.ImmutableMap build() -> build
    com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> combine
    com.google.common.collect.ImmutableMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableBiMap$SerializedForm -> com.google.common.collect.ImmutableBiMap$SerializedForm:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableBiMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableBiMapFauxverideShim -> com.google.common.collect.ImmutableBiMapFauxverideShim:
    void <init>() -> <init>
    java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function) -> toImmutableMap
    java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableMap
com.google.common.collect.ImmutableClassToInstanceMap -> com.google.common.collect.ImmutableClassToInstanceMap:
    com.google.common.collect.ImmutableClassToInstanceMap EMPTY -> EMPTY
    com.google.common.collect.ImmutableMap delegate -> delegate
    com.google.common.collect.ImmutableClassToInstanceMap of() -> of
    com.google.common.collect.ImmutableClassToInstanceMap of(java.lang.Class,java.lang.Object) -> of
    com.google.common.collect.ImmutableClassToInstanceMap$Builder builder() -> builder
    com.google.common.collect.ImmutableClassToInstanceMap copyOf(java.util.Map) -> copyOf
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.util.Map delegate() -> delegate
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object readResolve() -> readResolve
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableClassToInstanceMap$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableClassToInstanceMap$1 -> com.google.common.collect.ImmutableClassToInstanceMap$1:
com.google.common.collect.ImmutableClassToInstanceMap$Builder -> com.google.common.collect.ImmutableClassToInstanceMap$Builder:
    com.google.common.collect.ImmutableMap$Builder mapBuilder -> mapBuilder
    void <init>() -> <init>
    com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object) -> put
    com.google.common.collect.ImmutableClassToInstanceMap$Builder putAll(java.util.Map) -> putAll
    java.lang.Object cast(java.lang.Class,java.lang.Object) -> cast
    com.google.common.collect.ImmutableClassToInstanceMap build() -> build
com.google.common.collect.ImmutableCollection -> com.google.common.collect.ImmutableCollection:
    int SPLITERATOR_CHARACTERISTICS -> SPLITERATOR_CHARACTERISTICS
    java.lang.Object[] EMPTY_ARRAY -> EMPTY_ARRAY
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object[] internalArray() -> internalArray
    int internalArrayStart() -> internalArrayStart
    int internalArrayEnd() -> internalArrayEnd
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeIf(java.util.function.Predicate) -> removeIf
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    com.google.common.collect.ImmutableList asList() -> asList
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableCollection$Builder -> com.google.common.collect.ImmutableCollection$Builder:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    int expandedCapacity(int,int) -> expandedCapacity
    void <init>() -> <init>
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection build() -> build
com.google.common.collect.ImmutableEntry -> com.google.common.collect.ImmutableEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.ImmutableEnumMap -> com.google.common.collect.ImmutableEnumMap:
    java.util.EnumMap delegate -> delegate
    com.google.common.collect.ImmutableMap asImmutable(java.util.EnumMap) -> asImmutable
    void <init>(java.util.EnumMap) -> <init>
    com.google.common.collect.UnmodifiableIterator keyIterator() -> keyIterator
    java.util.Spliterator keySpliterator() -> keySpliterator
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    boolean equals(java.lang.Object) -> equals
    com.google.common.collect.UnmodifiableIterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    void forEach(java.util.function.BiConsumer) -> forEach
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    void <init>(java.util.EnumMap,com.google.common.collect.ImmutableEnumMap$1) -> <init>
com.google.common.collect.ImmutableEnumMap$1 -> com.google.common.collect.ImmutableEnumMap$1:
com.google.common.collect.ImmutableEnumMap$EnumSerializedForm -> com.google.common.collect.ImmutableEnumMap$EnumSerializedForm:
    java.util.EnumMap delegate -> delegate
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.EnumMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableEnumSet -> com.google.common.collect.ImmutableEnumSet:
    java.util.EnumSet delegate -> delegate
    int hashCode -> hashCode
    com.google.common.collect.ImmutableSet asImmutable(java.util.EnumSet) -> asImmutable
    void <init>(java.util.EnumSet) -> <init>
    boolean isPartialView() -> isPartialView
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    boolean equals(java.lang.Object) -> equals
    boolean isHashCodeFast() -> isHashCodeFast
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
    void <init>(java.util.EnumSet,com.google.common.collect.ImmutableEnumSet$1) -> <init>
com.google.common.collect.ImmutableEnumSet$1 -> com.google.common.collect.ImmutableEnumSet$1:
com.google.common.collect.ImmutableEnumSet$EnumSerializedForm -> com.google.common.collect.ImmutableEnumSet$EnumSerializedForm:
    java.util.EnumSet delegate -> delegate
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.EnumSet) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableList -> com.google.common.collect.ImmutableList:
    java.util.stream.Collector toImmutableList() -> toImmutableList
    com.google.common.collect.ImmutableList of() -> of
    com.google.common.collect.ImmutableList of(java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableList copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableList copyOf(java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableList copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableList copyOf(java.lang.Object[]) -> copyOf
    com.google.common.collect.ImmutableList sortedCopyOf(java.lang.Iterable) -> sortedCopyOf
    com.google.common.collect.ImmutableList sortedCopyOf(java.util.Comparator,java.lang.Iterable) -> sortedCopyOf
    com.google.common.collect.ImmutableList construct(java.lang.Object[]) -> construct
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[]) -> asImmutableList
    com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[],int) -> asImmutableList
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableListIterator listIterator() -> listIterator
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    void forEach(java.util.function.Consumer) -> forEach
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> subListUnchecked
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    void replaceAll(java.util.function.UnaryOperator) -> replaceAll
    void sort(java.util.Comparator) -> sort
    com.google.common.collect.ImmutableList asList() -> asList
    java.util.Spliterator spliterator() -> spliterator
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList reverse() -> reverse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableList$Builder builder() -> builder
    com.google.common.collect.ImmutableList$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    java.util.Iterator iterator() -> iterator
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
com.google.common.collect.ImmutableList$1 -> com.google.common.collect.ImmutableList$1:
    com.google.common.collect.ImmutableList this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableList,int,int) -> <init>
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableList$Builder -> com.google.common.collect.ImmutableList$Builder:
    java.lang.Object[] contents -> contents
    int size -> size
    boolean forceCopy -> forceCopy
    void <init>() -> <init>
    void <init>(int) -> <init>
    void getReadyToExpandTo(int) -> getReadyToExpandTo
    com.google.common.collect.ImmutableList$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableList$Builder add(java.lang.Object[]) -> add
    void add(java.lang.Object[],int) -> add
    com.google.common.collect.ImmutableList$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableList$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableList$Builder combine(com.google.common.collect.ImmutableList$Builder) -> combine
    com.google.common.collect.ImmutableList build() -> build
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableList$ReverseImmutableList -> com.google.common.collect.ImmutableList$ReverseImmutableList:
    com.google.common.collect.ImmutableList forwardList -> forwardList
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    int reverseIndex(int) -> reverseIndex
    int reversePosition(int) -> reversePosition
    com.google.common.collect.ImmutableList reverse() -> reverse
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    java.lang.Object get(int) -> get
    int size() -> size
    boolean isPartialView() -> isPartialView
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableList$SerializedForm -> com.google.common.collect.ImmutableList$SerializedForm:
    java.lang.Object[] elements -> elements
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object[]) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableList$SubList -> com.google.common.collect.ImmutableList$SubList:
    int offset -> offset
    int length -> length
    com.google.common.collect.ImmutableList this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableList,int,int) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    boolean isPartialView() -> isPartialView
    java.util.List subList(int,int) -> subList
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableListMultimap -> com.google.common.collect.ImmutableListMultimap:
    com.google.common.collect.ImmutableListMultimap inverse -> inverse
    long serialVersionUID -> serialVersionUID
    java.util.stream.Collector toImmutableListMultimap(java.util.function.Function,java.util.function.Function) -> toImmutableListMultimap
    java.util.stream.Collector flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function) -> flatteningToImmutableListMultimap
    com.google.common.collect.ImmutableListMultimap of() -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableListMultimap$Builder builder() -> builder
    com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    com.google.common.collect.ImmutableListMultimap copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableListMultimap fromMapEntries(java.util.Collection,java.util.Comparator) -> fromMapEntries
    void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    com.google.common.collect.ImmutableList get(java.lang.Object) -> get
    com.google.common.collect.ImmutableListMultimap inverse() -> inverse
    com.google.common.collect.ImmutableListMultimap invert() -> invert
    com.google.common.collect.ImmutableList removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.ImmutableList replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List get(java.lang.Object) -> get
    java.util.stream.Stream lambda$flatteningToImmutableListMultimap$2(java.util.function.Function,java.lang.Object) -> lambda$flatteningToImmutableListMultimap$2
    java.lang.Object lambda$flatteningToImmutableListMultimap$1(java.util.function.Function,java.lang.Object) -> lambda$flatteningToImmutableListMultimap$1
    void lambda$toImmutableListMultimap$0(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableListMultimap$Builder,java.lang.Object) -> lambda$toImmutableListMultimap$0
com.google.common.collect.ImmutableListMultimap$Builder -> com.google.common.collect.ImmutableListMultimap$Builder:
    void <init>() -> <init>
    com.google.common.collect.ImmutableListMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableListMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableListMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> combine
    com.google.common.collect.ImmutableListMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableListMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableListMultimap build() -> build
    com.google.common.collect.ImmutableMultimap build() -> build
    com.google.common.collect.ImmutableMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> combine
    com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableMap -> com.google.common.collect.ImmutableMap:
    java.util.Map$Entry[] EMPTY_ENTRY_ARRAY -> EMPTY_ENTRY_ARRAY
    com.google.common.collect.ImmutableSet entrySet -> entrySet
    com.google.common.collect.ImmutableSet keySet -> keySet
    com.google.common.collect.ImmutableCollection values -> values
    com.google.common.collect.ImmutableSetMultimap multimapView -> multimapView
    java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function) -> toImmutableMap
    java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableMap
    com.google.common.collect.ImmutableMap of() -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    java.util.Map$Entry entryOf(java.lang.Object,java.lang.Object) -> entryOf
    com.google.common.collect.ImmutableMap$Builder builder() -> builder
    com.google.common.collect.ImmutableMap$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    void checkNoConflict(boolean,java.lang.String,java.util.Map$Entry,java.util.Map$Entry) -> checkNoConflict
    java.lang.IllegalArgumentException conflictException(java.lang.String,java.lang.Object,java.lang.Object) -> conflictException
    com.google.common.collect.ImmutableMap copyOf(java.util.Map) -> copyOf
    com.google.common.collect.ImmutableMap copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableMap copyOfEnumMap(java.util.EnumMap) -> copyOfEnumMap
    void <init>() -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function) -> computeIfAbsent
    java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction) -> computeIfPresent
    java.lang.Object compute(java.lang.Object,java.util.function.BiFunction) -> compute
    java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction) -> merge
    void putAll(java.util.Map) -> putAll
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSet keySet() -> keySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.UnmodifiableIterator keyIterator() -> keyIterator
    java.util.Spliterator keySpliterator() -> keySpliterator
    com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    com.google.common.collect.ImmutableSetMultimap asMultimap() -> asMultimap
    boolean equals(java.lang.Object) -> equals
    boolean isPartialView() -> isPartialView
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableMap$1 -> com.google.common.collect.ImmutableMap$1:
    com.google.common.collect.UnmodifiableIterator val$entryIterator -> val$entryIterator
    com.google.common.collect.ImmutableMap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.UnmodifiableIterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMap$Builder -> com.google.common.collect.ImmutableMap$Builder:
    java.util.Comparator valueComparator -> valueComparator
    java.util.Map$Entry[] entries -> entries
    int size -> size
    boolean entriesUsed -> entriesUsed
    void <init>() -> <init>
    void <init>(int) -> <init>
    void ensureCapacity(int) -> ensureCapacity
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> combine
    com.google.common.collect.ImmutableMap build() -> build
    com.google.common.collect.ImmutableMap buildJdkBacked() -> buildJdkBacked
com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap -> com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl -> com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl:
    com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap) -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:
    com.google.common.collect.ImmutableMap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    int size() -> size
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    boolean containsKey(java.lang.Object) -> containsKey
    com.google.common.collect.ImmutableSet get(java.lang.Object) -> get
    boolean isPartialView() -> isPartialView
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    com.google.common.collect.UnmodifiableIterator entryIterator() -> entryIterator
    java.lang.Object get(java.lang.Object) -> get
    void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableMap$1) -> <init>
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1:
    java.util.Iterator val$backingIterator -> val$backingIterator
    com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets this$1 -> this$1
    void <init>(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1 -> com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1:
    java.util.Map$Entry val$backingEntry -> val$backingEntry
    com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1 this$2 -> this$2
    void <init>(com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1,java.util.Map$Entry) -> <init>
    java.lang.Object getKey() -> getKey
    com.google.common.collect.ImmutableSet getValue() -> getValue
    java.lang.Object getValue() -> getValue
com.google.common.collect.ImmutableMap$SerializedForm -> com.google.common.collect.ImmutableMap$SerializedForm:
    java.lang.Object[] keys -> keys
    java.lang.Object[] values -> values
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
    java.lang.Object createMap(com.google.common.collect.ImmutableMap$Builder) -> createMap
com.google.common.collect.ImmutableMapEntry -> com.google.common.collect.ImmutableMapEntry:
    com.google.common.collect.ImmutableMapEntry[] createEntryArray(int) -> createEntryArray
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    void <init>(com.google.common.collect.ImmutableMapEntry) -> <init>
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
    boolean isReusable() -> isReusable
com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry -> com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry:
    com.google.common.collect.ImmutableMapEntry nextInValueBucket -> nextInValueBucket
    void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry) -> <init>
    com.google.common.collect.ImmutableMapEntry getNextInValueBucket() -> getNextInValueBucket
com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry -> com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:
    com.google.common.collect.ImmutableMapEntry nextInKeyBucket -> nextInKeyBucket
    void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry) -> <init>
    com.google.common.collect.ImmutableMapEntry getNextInKeyBucket() -> getNextInKeyBucket
    boolean isReusable() -> isReusable
com.google.common.collect.ImmutableMapEntrySet -> com.google.common.collect.ImmutableMapEntrySet:
    void <init>() -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    boolean isHashCodeFast() -> isHashCodeFast
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm -> com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet -> com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:
    com.google.common.collect.ImmutableMap map -> map
    com.google.common.collect.ImmutableList entries -> entries
    void <init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[]) -> <init>
    void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList) -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMapKeySet -> com.google.common.collect.ImmutableMapKeySet:
    com.google.common.collect.ImmutableMap map -> map
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    boolean contains(java.lang.Object) -> contains
    java.lang.Object get(int) -> get
    void forEach(java.util.function.Consumer) -> forEach
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
    void lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object) -> lambda$forEach$0
com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm -> com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMapValues -> com.google.common.collect.ImmutableMapValues:
    com.google.common.collect.ImmutableMap map -> map
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableList asList() -> asList
    void forEach(java.util.function.Consumer) -> forEach
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
    void lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object) -> lambda$forEach$0
    com.google.common.collect.ImmutableMap access$000(com.google.common.collect.ImmutableMapValues) -> access$000
com.google.common.collect.ImmutableMapValues$1 -> com.google.common.collect.ImmutableMapValues$1:
    com.google.common.collect.UnmodifiableIterator entryItr -> entryItr
    com.google.common.collect.ImmutableMapValues this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMapValues) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMapValues$2 -> com.google.common.collect.ImmutableMapValues$2:
    com.google.common.collect.ImmutableList val$entryList -> val$entryList
    com.google.common.collect.ImmutableMapValues this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMapValues,com.google.common.collect.ImmutableList) -> <init>
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.ImmutableMapValues$SerializedForm -> com.google.common.collect.ImmutableMapValues$SerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultimap -> com.google.common.collect.ImmutableMultimap:
    com.google.common.collect.ImmutableMap map -> map
    int size -> size
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableMultimap of() -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultimap$Builder builder() -> builder
    com.google.common.collect.ImmutableMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    com.google.common.collect.ImmutableMultimap copyOf(java.lang.Iterable) -> copyOf
    void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    void clear() -> clear
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean isPartialView() -> isPartialView
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    int size() -> size
    com.google.common.collect.ImmutableSet keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
    com.google.common.collect.ImmutableMap asMap() -> asMap
    java.util.Map createAsMap() -> createAsMap
    com.google.common.collect.ImmutableCollection entries() -> entries
    com.google.common.collect.ImmutableCollection createEntries() -> createEntries
    com.google.common.collect.UnmodifiableIterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    void forEach(java.util.function.BiConsumer) -> forEach
    com.google.common.collect.ImmutableMultiset keys() -> keys
    com.google.common.collect.ImmutableMultiset createKeys() -> createKeys
    com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    com.google.common.collect.UnmodifiableIterator valueIterator() -> valueIterator
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Map asMap() -> asMap
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Collection createValues() -> createValues
    java.util.Collection values() -> values
    com.google.common.collect.Multiset createKeys() -> createKeys
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection createEntries() -> createEntries
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean isEmpty() -> isEmpty
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    void lambda$forEach$3(java.util.function.BiConsumer,java.lang.Object,java.util.Collection) -> lambda$forEach$3
    void lambda$null$2(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> lambda$null$2
    java.util.Spliterator lambda$entrySpliterator$1(java.util.Map$Entry) -> lambda$entrySpliterator$1
    java.util.Map$Entry lambda$null$0(java.lang.Object,java.lang.Object) -> lambda$null$0
com.google.common.collect.ImmutableMultimap$1 -> com.google.common.collect.ImmutableMultimap$1:
    java.util.Iterator asMapItr -> asMapItr
    java.lang.Object currentKey -> currentKey
    java.util.Iterator valueItr -> valueItr
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMultimap$2 -> com.google.common.collect.ImmutableMultimap$2:
    java.util.Iterator valueCollectionItr -> valueCollectionItr
    java.util.Iterator valueItr -> valueItr
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMultimap$Builder -> com.google.common.collect.ImmutableMultimap$Builder:
    java.util.Map builderMap -> builderMap
    java.util.Comparator keyComparator -> keyComparator
    java.util.Comparator valueComparator -> valueComparator
    void <init>() -> <init>
    java.util.Collection newMutableValueCollection() -> newMutableValueCollection
    com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> combine
    com.google.common.collect.ImmutableMultimap build() -> build
com.google.common.collect.ImmutableMultimap$EntryCollection -> com.google.common.collect.ImmutableMultimap$EntryCollection:
    com.google.common.collect.ImmutableMultimap multimap -> multimap
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMultimap$FieldSettersHolder -> com.google.common.collect.ImmutableMultimap$FieldSettersHolder:
    com.google.common.collect.Serialization$FieldSetter MAP_FIELD_SETTER -> MAP_FIELD_SETTER
    com.google.common.collect.Serialization$FieldSetter SIZE_FIELD_SETTER -> SIZE_FIELD_SETTER
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableMultimap$Keys -> com.google.common.collect.ImmutableMultimap$Keys:
    com.google.common.collect.ImmutableMultimap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    boolean contains(java.lang.Object) -> contains
    int count(java.lang.Object) -> count
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
    int size() -> size
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    java.util.Set elementSet() -> elementSet
com.google.common.collect.ImmutableMultimap$KeysSerializedForm -> com.google.common.collect.ImmutableMultimap$KeysSerializedForm:
    com.google.common.collect.ImmutableMultimap multimap -> multimap
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultimap$Values -> com.google.common.collect.ImmutableMultimap$Values:
    com.google.common.collect.ImmutableMultimap multimap -> multimap
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMultimap) -> <init>
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    int size() -> size
    boolean isPartialView() -> isPartialView
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableMultiset -> com.google.common.collect.ImmutableMultiset:
    com.google.common.collect.ImmutableList asList -> asList
    com.google.common.collect.ImmutableSet entrySet -> entrySet
    java.util.stream.Collector toImmutableMultiset() -> toImmutableMultiset
    java.util.stream.Collector toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction) -> toImmutableMultiset
    com.google.common.collect.ImmutableMultiset of() -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableMultiset copyOf(java.lang.Object[]) -> copyOf
    com.google.common.collect.ImmutableMultiset copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableMultiset copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableMultiset copyFromElements(java.lang.Object[]) -> copyFromElements
    com.google.common.collect.ImmutableMultiset copyFromEntries(java.util.Collection) -> copyFromEntries
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList asList() -> asList
    boolean contains(java.lang.Object) -> contains
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableMultiset$Builder builder() -> builder
    java.util.Iterator iterator() -> iterator
    java.util.Set entrySet() -> entrySet
    java.util.Set elementSet() -> elementSet
    com.google.common.collect.ImmutableMultiset lambda$toImmutableMultiset$3(com.google.common.collect.Multiset) -> lambda$toImmutableMultiset$3
    com.google.common.collect.Multiset lambda$toImmutableMultiset$2(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> lambda$toImmutableMultiset$2
    void lambda$toImmutableMultiset$1(java.util.function.Function,java.util.function.ToIntFunction,com.google.common.collect.Multiset,java.lang.Object) -> lambda$toImmutableMultiset$1
    int lambda$toImmutableMultiset$0(java.lang.Object) -> lambda$toImmutableMultiset$0
com.google.common.collect.ImmutableMultiset$1 -> com.google.common.collect.ImmutableMultiset$1:
    int remaining -> remaining
    java.lang.Object element -> element
    java.util.Iterator val$entryIterator -> val$entryIterator
    com.google.common.collect.ImmutableMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultiset,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.ImmutableMultiset$Builder -> com.google.common.collect.ImmutableMultiset$Builder:
    com.google.common.collect.Multiset contents -> contents
    void <init>() -> <init>
    void <init>(com.google.common.collect.Multiset) -> <init>
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    com.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object,int) -> setCount
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableMultiset build() -> build
    com.google.common.collect.ImmutableMultiset buildJdkBacked() -> buildJdkBacked
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
    void lambda$addAll$0(java.lang.Object,int) -> lambda$addAll$0
com.google.common.collect.ImmutableMultiset$ElementSet -> com.google.common.collect.ImmutableMultiset$ElementSet:
    java.util.List entries -> entries
    com.google.common.collect.Multiset delegate -> delegate
    void <init>(java.util.List,com.google.common.collect.Multiset) -> <init>
    java.lang.Object get(int) -> get
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    int size() -> size
com.google.common.collect.ImmutableMultiset$EntrySet -> com.google.common.collect.ImmutableMultiset$EntrySet:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableMultiset this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableMultiset) -> <init>
    boolean isPartialView() -> isPartialView
    com.google.common.collect.Multiset$Entry get(int) -> get
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    java.lang.Object get(int) -> get
    void <init>(com.google.common.collect.ImmutableMultiset,com.google.common.collect.ImmutableMultiset$1) -> <init>
com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm -> com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:
    com.google.common.collect.ImmutableMultiset multiset -> multiset
    void <init>(com.google.common.collect.ImmutableMultiset) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultiset$SerializedForm -> com.google.common.collect.ImmutableMultiset$SerializedForm:
    java.lang.Object[] elements -> elements
    int[] counts -> counts
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Multiset) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableMultisetGwtSerializationDependencies -> com.google.common.collect.ImmutableMultisetGwtSerializationDependencies:
    void <init>() -> <init>
com.google.common.collect.ImmutableRangeMap -> com.google.common.collect.ImmutableRangeMap:
    com.google.common.collect.ImmutableRangeMap EMPTY -> EMPTY
    com.google.common.collect.ImmutableList ranges -> ranges
    com.google.common.collect.ImmutableList values -> values
    long serialVersionUID -> serialVersionUID
    java.util.stream.Collector toImmutableRangeMap(java.util.function.Function,java.util.function.Function) -> toImmutableRangeMap
    com.google.common.collect.ImmutableRangeMap of() -> of
    com.google.common.collect.ImmutableRangeMap of(com.google.common.collect.Range,java.lang.Object) -> of
    com.google.common.collect.ImmutableRangeMap copyOf(com.google.common.collect.RangeMap) -> copyOf
    com.google.common.collect.ImmutableRangeMap$Builder builder() -> builder
    void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList) -> <init>
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    com.google.common.collect.Range span() -> span
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    void remove(com.google.common.collect.Range) -> remove
    com.google.common.collect.ImmutableMap asMapOfRanges() -> asMapOfRanges
    com.google.common.collect.ImmutableMap asDescendingMapOfRanges() -> asDescendingMapOfRanges
    com.google.common.collect.ImmutableRangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    java.util.Map asMapOfRanges() -> asMapOfRanges
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.ImmutableRangeMap) -> access$000
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableRangeMap$1 -> com.google.common.collect.ImmutableRangeMap$1:
    int val$len -> val$len
    int val$off -> val$off
    com.google.common.collect.Range val$range -> val$range
    com.google.common.collect.ImmutableRangeMap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableRangeMap,int,int,com.google.common.collect.Range) -> <init>
    int size() -> size
    com.google.common.collect.Range get(int) -> get
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableRangeMap$2 -> com.google.common.collect.ImmutableRangeMap$2:
    com.google.common.collect.Range val$range -> val$range
    com.google.common.collect.ImmutableRangeMap val$outer -> val$outer
    com.google.common.collect.ImmutableRangeMap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableRangeMap,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList,com.google.common.collect.Range,com.google.common.collect.ImmutableRangeMap) -> <init>
    com.google.common.collect.ImmutableRangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    java.util.Map asMapOfRanges() -> asMapOfRanges
com.google.common.collect.ImmutableRangeMap$Builder -> com.google.common.collect.ImmutableRangeMap$Builder:
    java.util.List entries -> entries
    void <init>() -> <init>
    com.google.common.collect.ImmutableRangeMap$Builder put(com.google.common.collect.Range,java.lang.Object) -> put
    com.google.common.collect.ImmutableRangeMap$Builder putAll(com.google.common.collect.RangeMap) -> putAll
    com.google.common.collect.ImmutableRangeMap$Builder combine(com.google.common.collect.ImmutableRangeMap$Builder) -> combine
    com.google.common.collect.ImmutableRangeMap build() -> build
com.google.common.collect.ImmutableRangeMap$SerializedForm -> com.google.common.collect.ImmutableRangeMap$SerializedForm:
    com.google.common.collect.ImmutableMap mapOfRanges -> mapOfRanges
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
    java.lang.Object createRangeMap() -> createRangeMap
com.google.common.collect.ImmutableRangeSet -> com.google.common.collect.ImmutableRangeSet:
    com.google.common.collect.ImmutableRangeSet EMPTY -> EMPTY
    com.google.common.collect.ImmutableRangeSet ALL -> ALL
    com.google.common.collect.ImmutableList ranges -> ranges
    com.google.common.collect.ImmutableRangeSet complement -> complement
    java.util.stream.Collector toImmutableRangeSet() -> toImmutableRangeSet
    com.google.common.collect.ImmutableRangeSet of() -> of
    com.google.common.collect.ImmutableRangeSet of(com.google.common.collect.Range) -> of
    com.google.common.collect.ImmutableRangeSet all() -> all
    com.google.common.collect.ImmutableRangeSet copyOf(com.google.common.collect.RangeSet) -> copyOf
    com.google.common.collect.ImmutableRangeSet copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableRangeSet unionOf(java.lang.Iterable) -> unionOf
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableRangeSet) -> <init>
    boolean intersects(com.google.common.collect.Range) -> intersects
    boolean encloses(com.google.common.collect.Range) -> encloses
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    com.google.common.collect.Range span() -> span
    boolean isEmpty() -> isEmpty
    void add(com.google.common.collect.Range) -> add
    void addAll(com.google.common.collect.RangeSet) -> addAll
    void addAll(java.lang.Iterable) -> addAll
    void remove(com.google.common.collect.Range) -> remove
    void removeAll(com.google.common.collect.RangeSet) -> removeAll
    void removeAll(java.lang.Iterable) -> removeAll
    com.google.common.collect.ImmutableSet asRanges() -> asRanges
    com.google.common.collect.ImmutableSet asDescendingSetOfRanges() -> asDescendingSetOfRanges
    com.google.common.collect.ImmutableRangeSet complement() -> complement
    com.google.common.collect.ImmutableRangeSet union(com.google.common.collect.RangeSet) -> union
    com.google.common.collect.ImmutableRangeSet intersection(com.google.common.collect.RangeSet) -> intersection
    com.google.common.collect.ImmutableRangeSet difference(com.google.common.collect.RangeSet) -> difference
    com.google.common.collect.ImmutableList intersectRanges(com.google.common.collect.Range) -> intersectRanges
    com.google.common.collect.ImmutableRangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    com.google.common.collect.ImmutableSortedSet asSet(com.google.common.collect.DiscreteDomain) -> asSet
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableRangeSet$Builder builder() -> builder
    java.lang.Object writeReplace() -> writeReplace
    boolean equals(java.lang.Object) -> equals
    boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    void clear() -> clear
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    com.google.common.collect.RangeSet complement() -> complement
    java.util.Set asDescendingSetOfRanges() -> asDescendingSetOfRanges
    java.util.Set asRanges() -> asRanges
    com.google.common.collect.ImmutableList access$000(com.google.common.collect.ImmutableRangeSet) -> access$000
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableRangeSet$1 -> com.google.common.collect.ImmutableRangeSet$1:
    int val$length -> val$length
    int val$fromIndex -> val$fromIndex
    com.google.common.collect.Range val$range -> val$range
    com.google.common.collect.ImmutableRangeSet this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableRangeSet,int,int,com.google.common.collect.Range) -> <init>
    int size() -> size
    com.google.common.collect.Range get(int) -> get
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableRangeSet$AsSet -> com.google.common.collect.ImmutableRangeSet$AsSet:
    com.google.common.collect.DiscreteDomain domain -> domain
    java.lang.Integer size -> size
    com.google.common.collect.ImmutableRangeSet this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableRangeSet,com.google.common.collect.DiscreteDomain) -> <init>
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    com.google.common.collect.ImmutableSortedSet subSet(com.google.common.collect.Range) -> subSet
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Comparable,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Comparable,boolean) -> tailSetImpl
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    boolean isPartialView() -> isPartialView
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
    com.google.common.collect.DiscreteDomain access$100(com.google.common.collect.ImmutableRangeSet$AsSet) -> access$100
com.google.common.collect.ImmutableRangeSet$AsSet$1 -> com.google.common.collect.ImmutableRangeSet$AsSet$1:
    java.util.Iterator rangeItr -> rangeItr
    java.util.Iterator elemItr -> elemItr
    com.google.common.collect.ImmutableRangeSet$AsSet this$1 -> this$1
    void <init>(com.google.common.collect.ImmutableRangeSet$AsSet) -> <init>
    java.lang.Comparable computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.ImmutableRangeSet$AsSet$2 -> com.google.common.collect.ImmutableRangeSet$AsSet$2:
    java.util.Iterator rangeItr -> rangeItr
    java.util.Iterator elemItr -> elemItr
    com.google.common.collect.ImmutableRangeSet$AsSet this$1 -> this$1
    void <init>(com.google.common.collect.ImmutableRangeSet$AsSet) -> <init>
    java.lang.Comparable computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm -> com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:
    com.google.common.collect.ImmutableList ranges -> ranges
    com.google.common.collect.DiscreteDomain domain -> domain
    void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.DiscreteDomain) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableRangeSet$Builder -> com.google.common.collect.ImmutableRangeSet$Builder:
    java.util.List ranges -> ranges
    void <init>() -> <init>
    com.google.common.collect.ImmutableRangeSet$Builder add(com.google.common.collect.Range) -> add
    com.google.common.collect.ImmutableRangeSet$Builder addAll(com.google.common.collect.RangeSet) -> addAll
    com.google.common.collect.ImmutableRangeSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableRangeSet$Builder combine(com.google.common.collect.ImmutableRangeSet$Builder) -> combine
    com.google.common.collect.ImmutableRangeSet build() -> build
com.google.common.collect.ImmutableRangeSet$ComplementRanges -> com.google.common.collect.ImmutableRangeSet$ComplementRanges:
    boolean positiveBoundedBelow -> positiveBoundedBelow
    boolean positiveBoundedAbove -> positiveBoundedAbove
    int size -> size
    com.google.common.collect.ImmutableRangeSet this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableRangeSet) -> <init>
    int size() -> size
    com.google.common.collect.Range get(int) -> get
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableRangeSet$SerializedForm -> com.google.common.collect.ImmutableRangeSet$SerializedForm:
    com.google.common.collect.ImmutableList ranges -> ranges
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSet -> com.google.common.collect.ImmutableSet:
    int SPLITERATOR_CHARACTERISTICS -> SPLITERATOR_CHARACTERISTICS
    com.google.common.collect.ImmutableList asList -> asList
    int MAX_TABLE_SIZE -> MAX_TABLE_SIZE
    double DESIRED_LOAD_FACTOR -> DESIRED_LOAD_FACTOR
    int CUTOFF -> CUTOFF
    double HASH_FLOODING_FPP -> HASH_FLOODING_FPP
    int MAX_RUN_MULTIPLIER -> MAX_RUN_MULTIPLIER
    java.util.stream.Collector toImmutableSet() -> toImmutableSet
    com.google.common.collect.ImmutableSet of() -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableSet construct(int,java.lang.Object[]) -> construct
    com.google.common.collect.ImmutableSet copyOf(java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableSet copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSet copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSet copyOf(java.lang.Object[]) -> copyOf
    com.google.common.collect.ImmutableSet copyOfEnumSet(java.util.EnumSet) -> copyOfEnumSet
    void <init>() -> <init>
    boolean isHashCodeFast() -> isHashCodeFast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList asList() -> asList
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSet$Builder builder() -> builder
    com.google.common.collect.ImmutableSet$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    java.lang.Object[] rebuildHashTable(int,java.lang.Object[],int) -> rebuildHashTable
    int chooseTableSize(int) -> chooseTableSize
    boolean hashFloodingDetected(java.lang.Object[]) -> hashFloodingDetected
    int maxRunBeforeFallback(int) -> maxRunBeforeFallback
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSet$Builder -> com.google.common.collect.ImmutableSet$Builder:
    com.google.common.collect.ImmutableSet$SetBuilderImpl impl -> impl
    boolean forceCopy -> forceCopy
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(boolean) -> <init>
    void forceJdk() -> forceJdk
    void copyIfNecessary() -> copyIfNecessary
    void copy() -> copy
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSet$Builder combine(com.google.common.collect.ImmutableSet$Builder) -> combine
    com.google.common.collect.ImmutableSet build() -> build
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSet$Indexed -> com.google.common.collect.ImmutableSet$Indexed:
    void <init>() -> <init>
    java.lang.Object get(int) -> get
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSet$Indexed$1 -> com.google.common.collect.ImmutableSet$Indexed$1:
    com.google.common.collect.ImmutableSet$Indexed this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableSet$Indexed) -> <init>
    java.lang.Object get(int) -> get
    com.google.common.collect.ImmutableSet$Indexed delegateCollection() -> delegateCollection
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl -> com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:
    java.util.Set delegate -> delegate
    void <init>(com.google.common.collect.ImmutableSet$SetBuilderImpl) -> <init>
    com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSet$SetBuilderImpl copy() -> copy
    com.google.common.collect.ImmutableSet build() -> build
com.google.common.collect.ImmutableSet$RegularSetBuilderImpl -> com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:
    java.lang.Object[] hashTable -> hashTable
    int maxRunBeforeFallback -> maxRunBeforeFallback
    int expandTableThreshold -> expandTableThreshold
    int hashCode -> hashCode
    void <init>(int) -> <init>
    void <init>(com.google.common.collect.ImmutableSet$RegularSetBuilderImpl) -> <init>
    void ensureTableCapacity(int) -> ensureTableCapacity
    com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSet$SetBuilderImpl copy() -> copy
    com.google.common.collect.ImmutableSet$SetBuilderImpl review() -> review
    com.google.common.collect.ImmutableSet build() -> build
com.google.common.collect.ImmutableSet$SerializedForm -> com.google.common.collect.ImmutableSet$SerializedForm:
    java.lang.Object[] elements -> elements
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object[]) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSet$SetBuilderImpl -> com.google.common.collect.ImmutableSet$SetBuilderImpl:
    java.lang.Object[] dedupedElements -> dedupedElements
    int distinct -> distinct
    void <init>(int) -> <init>
    void <init>(com.google.common.collect.ImmutableSet$SetBuilderImpl) -> <init>
    void ensureCapacity(int) -> ensureCapacity
    void addDedupedElement(java.lang.Object) -> addDedupedElement
    com.google.common.collect.ImmutableSet$SetBuilderImpl add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSet$SetBuilderImpl combine(com.google.common.collect.ImmutableSet$SetBuilderImpl) -> combine
    com.google.common.collect.ImmutableSet$SetBuilderImpl copy() -> copy
    com.google.common.collect.ImmutableSet$SetBuilderImpl review() -> review
    com.google.common.collect.ImmutableSet build() -> build
com.google.common.collect.ImmutableSetMultimap -> com.google.common.collect.ImmutableSetMultimap:
    com.google.common.collect.ImmutableSet emptySet -> emptySet
    com.google.common.collect.ImmutableSetMultimap inverse -> inverse
    com.google.common.collect.ImmutableSet entries -> entries
    long serialVersionUID -> serialVersionUID
    java.util.stream.Collector toImmutableSetMultimap(java.util.function.Function,java.util.function.Function) -> toImmutableSetMultimap
    java.util.stream.Collector flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function) -> flatteningToImmutableSetMultimap
    com.google.common.collect.ImmutableSetMultimap of() -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSetMultimap$Builder builder() -> builder
    com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap) -> copyOf
    com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap,java.util.Comparator) -> copyOf
    com.google.common.collect.ImmutableSetMultimap copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSetMultimap fromMapEntries(java.util.Collection,java.util.Comparator) -> fromMapEntries
    void <init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator) -> <init>
    com.google.common.collect.ImmutableSet get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSetMultimap inverse() -> inverse
    com.google.common.collect.ImmutableSetMultimap invert() -> invert
    com.google.common.collect.ImmutableSet removeAll(java.lang.Object) -> removeAll
    com.google.common.collect.ImmutableSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.ImmutableSet entries() -> entries
    com.google.common.collect.ImmutableSet valueSet(java.util.Comparator,java.util.Collection) -> valueSet
    com.google.common.collect.ImmutableSet emptySet(java.util.Comparator) -> emptySet
    com.google.common.collect.ImmutableSet$Builder valuesBuilder(java.util.Comparator) -> valuesBuilder
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    java.util.Comparator valueComparator() -> valueComparator
    void readObject(java.io.ObjectInputStream) -> readObject
    com.google.common.collect.ImmutableCollection entries() -> entries
    com.google.common.collect.ImmutableMultimap inverse() -> inverse
    com.google.common.collect.ImmutableCollection get(java.lang.Object) -> get
    com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.ImmutableCollection removeAll(java.lang.Object) -> removeAll
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Set entries() -> entries
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    java.util.stream.Stream lambda$flatteningToImmutableSetMultimap$2(java.util.function.Function,java.lang.Object) -> lambda$flatteningToImmutableSetMultimap$2
    java.lang.Object lambda$flatteningToImmutableSetMultimap$1(java.util.function.Function,java.lang.Object) -> lambda$flatteningToImmutableSetMultimap$1
    void lambda$toImmutableSetMultimap$0(java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableSetMultimap$Builder,java.lang.Object) -> lambda$toImmutableSetMultimap$0
com.google.common.collect.ImmutableSetMultimap$Builder -> com.google.common.collect.ImmutableSetMultimap$Builder:
    void <init>() -> <init>
    java.util.Collection newMutableValueCollection() -> newMutableValueCollection
    com.google.common.collect.ImmutableSetMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableSetMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableSetMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> combine
    com.google.common.collect.ImmutableSetMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableSetMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableSetMultimap build() -> build
    com.google.common.collect.ImmutableMultimap build() -> build
    com.google.common.collect.ImmutableMultimap$Builder combine(com.google.common.collect.ImmutableMultimap$Builder) -> combine
    com.google.common.collect.ImmutableMultimap$Builder orderValuesBy(java.util.Comparator) -> orderValuesBy
    com.google.common.collect.ImmutableMultimap$Builder orderKeysBy(java.util.Comparator) -> orderKeysBy
    com.google.common.collect.ImmutableMultimap$Builder putAll(com.google.common.collect.Multimap) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Object[]) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Object,java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMultimap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMultimap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableSetMultimap$EntrySet -> com.google.common.collect.ImmutableSetMultimap$EntrySet:
    com.google.common.collect.ImmutableSetMultimap multimap -> multimap
    void <init>(com.google.common.collect.ImmutableSetMultimap) -> <init>
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean isPartialView() -> isPartialView
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSetMultimap$SetFieldSettersHolder -> com.google.common.collect.ImmutableSetMultimap$SetFieldSettersHolder:
    com.google.common.collect.Serialization$FieldSetter EMPTY_SET_FIELD_SETTER -> EMPTY_SET_FIELD_SETTER
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableSortedAsList -> com.google.common.collect.ImmutableSortedAsList:
    void <init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList) -> <init>
    com.google.common.collect.ImmutableSortedSet delegateCollection() -> delegateCollection
    java.util.Comparator comparator() -> comparator
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableList subListUnchecked(int,int) -> subListUnchecked
    java.util.Spliterator spliterator() -> spliterator
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.ImmutableSortedMap -> com.google.common.collect.ImmutableSortedMap:
    java.util.Comparator NATURAL_ORDER -> NATURAL_ORDER
    com.google.common.collect.ImmutableSortedMap NATURAL_EMPTY_MAP -> NATURAL_EMPTY_MAP
    com.google.common.collect.RegularImmutableSortedSet keySet -> keySet
    com.google.common.collect.ImmutableList valueList -> valueList
    com.google.common.collect.ImmutableSortedMap descendingMap -> descendingMap
    long serialVersionUID -> serialVersionUID
    java.util.stream.Collector toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function) -> toImmutableSortedMap
    java.util.stream.Collector toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableSortedMap
    com.google.common.collect.ImmutableSortedMap emptyMap(java.util.Comparator) -> emptyMap
    com.google.common.collect.ImmutableSortedMap of() -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.util.Comparator,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object,java.lang.Comparable,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap ofEntries(java.util.Map$Entry[]) -> ofEntries
    com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map) -> copyOf
    com.google.common.collect.ImmutableSortedMap copyOf(java.util.Map,java.util.Comparator) -> copyOf
    com.google.common.collect.ImmutableSortedMap copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedMap copyOf(java.lang.Iterable,java.util.Comparator) -> copyOf
    com.google.common.collect.ImmutableSortedMap copyOfSorted(java.util.SortedMap) -> copyOfSorted
    com.google.common.collect.ImmutableSortedMap copyOfInternal(java.util.Map,java.util.Comparator) -> copyOfInternal
    com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.lang.Iterable) -> fromEntries
    com.google.common.collect.ImmutableSortedMap fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int) -> fromEntries
    com.google.common.collect.ImmutableSortedMap$Builder naturalOrder() -> naturalOrder
    com.google.common.collect.ImmutableSortedMap$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.ImmutableSortedMap$Builder reverseOrder() -> reverseOrder
    void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList) -> <init>
    void <init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSortedMap) -> <init>
    int size() -> size
    void forEach(java.util.function.BiConsumer) -> forEach
    java.lang.Object get(java.lang.Object) -> get
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet entrySet() -> entrySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSortedSet keySet() -> keySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    com.google.common.collect.ImmutableSortedMap getSubMap(int,int) -> getSubMap
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object) -> headMap
    com.google.common.collect.ImmutableSortedMap headMap(java.lang.Object,boolean) -> headMap
    com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    com.google.common.collect.ImmutableSortedMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object) -> tailMap
    com.google.common.collect.ImmutableSortedMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.ImmutableSortedMap descendingMap() -> descendingMap
    com.google.common.collect.ImmutableSortedSet navigableKeySet() -> navigableKeySet
    com.google.common.collect.ImmutableSortedSet descendingKeySet() -> descendingKeySet
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSet keySet() -> keySet
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.TreeMap lambda$toImmutableSortedMap$0(java.util.Comparator) -> lambda$toImmutableSortedMap$0
    com.google.common.collect.ImmutableSortedMap access$000(java.util.Comparator,java.lang.Object,java.lang.Object) -> access$000
    com.google.common.collect.ImmutableSortedMap access$100(java.util.Comparator,boolean,java.util.Map$Entry[],int) -> access$100
    com.google.common.collect.RegularImmutableSortedSet access$200(com.google.common.collect.ImmutableSortedMap) -> access$200
    com.google.common.collect.ImmutableList access$300(com.google.common.collect.ImmutableSortedMap) -> access$300
    void <clinit>() -> <clinit>
com.google.common.collect.ImmutableSortedMap$1 -> com.google.common.collect.ImmutableSortedMap$1:
    java.util.Comparator val$comparator -> val$comparator
    void <init>(java.util.Comparator) -> <init>
    int compare(java.util.Map$Entry,java.util.Map$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.ImmutableSortedMap$1EntrySet -> com.google.common.collect.ImmutableSortedMap$1EntrySet:
    com.google.common.collect.ImmutableSortedMap this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableSortedMap) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    com.google.common.collect.ImmutableMap map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.ImmutableSortedMap$1EntrySet$1 -> com.google.common.collect.ImmutableSortedMap$1EntrySet$1:
    com.google.common.collect.ImmutableSortedMap$1EntrySet this$1 -> this$1
    void <init>(com.google.common.collect.ImmutableSortedMap$1EntrySet) -> <init>
    java.util.Map$Entry get(int) -> get
    java.util.Spliterator spliterator() -> spliterator
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.ImmutableSortedMap$Builder -> com.google.common.collect.ImmutableSortedMap$Builder:
    java.util.Comparator comparator -> comparator
    void <init>(java.util.Comparator) -> <init>
    com.google.common.collect.ImmutableSortedMap$Builder put(java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableSortedMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableSortedMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableSortedMap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableSortedMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    com.google.common.collect.ImmutableSortedMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> combine
    com.google.common.collect.ImmutableSortedMap build() -> build
    com.google.common.collect.ImmutableMap build() -> build
    com.google.common.collect.ImmutableMap$Builder combine(com.google.common.collect.ImmutableMap$Builder) -> combine
    com.google.common.collect.ImmutableMap$Builder orderEntriesByValue(java.util.Comparator) -> orderEntriesByValue
    com.google.common.collect.ImmutableMap$Builder putAll(java.lang.Iterable) -> putAll
    com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map) -> putAll
    com.google.common.collect.ImmutableMap$Builder put(java.util.Map$Entry) -> put
    com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object) -> put
com.google.common.collect.ImmutableSortedMap$SerializedForm -> com.google.common.collect.ImmutableSortedMap$SerializedForm:
    java.util.Comparator comparator -> comparator
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableSortedMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedMapFauxverideShim -> com.google.common.collect.ImmutableSortedMapFauxverideShim:
    void <init>() -> <init>
    java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function) -> toImmutableMap
    java.util.stream.Collector toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableMap
    com.google.common.collect.ImmutableSortedMap$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedMap$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
com.google.common.collect.ImmutableSortedMultiset -> com.google.common.collect.ImmutableSortedMultiset:
    com.google.common.collect.ImmutableSortedMultiset descendingMultiset -> descendingMultiset
    java.util.stream.Collector toImmutableSortedMultiset(java.util.Comparator) -> toImmutableSortedMultiset
    java.util.stream.Collector toImmutableSortedMultiset(java.util.Comparator,java.util.function.Function,java.util.function.ToIntFunction) -> toImmutableSortedMultiset
    com.google.common.collect.ImmutableSortedMultiset of() -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> of
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Comparable[]) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator,java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedMultiset copyOfSorted(com.google.common.collect.SortedMultiset) -> copyOfSorted
    com.google.common.collect.ImmutableSortedMultiset copyOfSortedEntries(java.util.Comparator,java.util.Collection) -> copyOfSortedEntries
    com.google.common.collect.ImmutableSortedMultiset emptyMultiset(java.util.Comparator) -> emptyMultiset
    void <init>() -> <init>
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    com.google.common.collect.ImmutableSortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.ImmutableSortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.ImmutableSortedMultiset$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.ImmutableSortedMultiset$Builder reverseOrder() -> reverseOrder
    com.google.common.collect.ImmutableSortedMultiset$Builder naturalOrder() -> naturalOrder
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
    java.util.Set elementSet() -> elementSet
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    java.util.NavigableSet elementSet() -> elementSet
    java.util.SortedSet elementSet() -> elementSet
    com.google.common.collect.ImmutableSortedMultiset lambda$toImmutableSortedMultiset$4(java.util.Comparator,com.google.common.collect.Multiset) -> lambda$toImmutableSortedMultiset$4
    com.google.common.collect.Multiset lambda$toImmutableSortedMultiset$3(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> lambda$toImmutableSortedMultiset$3
    void lambda$toImmutableSortedMultiset$2(java.util.function.Function,java.util.function.ToIntFunction,com.google.common.collect.Multiset,java.lang.Object) -> lambda$toImmutableSortedMultiset$2
    com.google.common.collect.Multiset lambda$toImmutableSortedMultiset$1(java.util.Comparator) -> lambda$toImmutableSortedMultiset$1
    int lambda$toImmutableSortedMultiset$0(java.lang.Object) -> lambda$toImmutableSortedMultiset$0
com.google.common.collect.ImmutableSortedMultiset$Builder -> com.google.common.collect.ImmutableSortedMultiset$Builder:
    void <init>(java.util.Comparator) -> <init>
    com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSortedMultiset$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSortedMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    com.google.common.collect.ImmutableSortedMultiset$Builder setCount(java.lang.Object,int) -> setCount
    com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSortedMultiset$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSortedMultiset build() -> build
    com.google.common.collect.ImmutableMultiset build() -> build
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableMultiset$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableMultiset$Builder setCount(java.lang.Object,int) -> setCount
    com.google.common.collect.ImmutableMultiset$Builder addCopies(java.lang.Object,int) -> addCopies
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableMultiset$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSortedMultiset$SerializedForm -> com.google.common.collect.ImmutableSortedMultiset$SerializedForm:
    java.util.Comparator comparator -> comparator
    java.lang.Object[] elements -> elements
    int[] counts -> counts
    void <init>(com.google.common.collect.SortedMultiset) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedMultisetFauxverideShim -> com.google.common.collect.ImmutableSortedMultisetFauxverideShim:
    void <init>() -> <init>
    java.util.stream.Collector toImmutableMultiset() -> toImmutableMultiset
    java.util.stream.Collector toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction) -> toImmutableMultiset
    com.google.common.collect.ImmutableSortedMultiset$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Object[]) -> copyOf
com.google.common.collect.ImmutableSortedSet -> com.google.common.collect.ImmutableSortedSet:
    int SPLITERATOR_CHARACTERISTICS -> SPLITERATOR_CHARACTERISTICS
    java.util.Comparator comparator -> comparator
    com.google.common.collect.ImmutableSortedSet descendingSet -> descendingSet
    java.util.stream.Collector toImmutableSortedSet(java.util.Comparator) -> toImmutableSortedSet
    com.google.common.collect.RegularImmutableSortedSet emptySet(java.util.Comparator) -> emptySet
    com.google.common.collect.ImmutableSortedSet of() -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> of
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Comparable[]) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Iterator) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOf(java.util.Comparator,java.util.Collection) -> copyOf
    com.google.common.collect.ImmutableSortedSet copyOfSorted(java.util.SortedSet) -> copyOfSorted
    com.google.common.collect.ImmutableSortedSet construct(java.util.Comparator,int,java.lang.Object[]) -> construct
    com.google.common.collect.ImmutableSortedSet$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.ImmutableSortedSet$Builder reverseOrder() -> reverseOrder
    com.google.common.collect.ImmutableSortedSet$Builder naturalOrder() -> naturalOrder
    int unsafeCompare(java.lang.Object,java.lang.Object) -> unsafeCompare
    int unsafeCompare(java.util.Comparator,java.lang.Object,java.lang.Object) -> unsafeCompare
    void <init>(java.util.Comparator) -> <init>
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object) -> headSet
    com.google.common.collect.ImmutableSortedSet headSet(java.lang.Object,boolean) -> headSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    com.google.common.collect.ImmutableSortedSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object) -> tailSet
    com.google.common.collect.ImmutableSortedSet tailSet(java.lang.Object,boolean) -> tailSet
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    com.google.common.collect.ImmutableSortedSet descendingSet() -> descendingSet
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.util.Spliterator spliterator() -> spliterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    int indexOf(java.lang.Object) -> indexOf
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object writeReplace() -> writeReplace
    java.util.Iterator iterator() -> iterator
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
com.google.common.collect.ImmutableSortedSet$1 -> com.google.common.collect.ImmutableSortedSet$1:
    com.google.common.collect.UnmodifiableIterator iterator -> iterator
    com.google.common.collect.ImmutableSortedSet this$0 -> this$0
    void <init>(com.google.common.collect.ImmutableSortedSet,long,int) -> <init>
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    java.util.Comparator getComparator() -> getComparator
com.google.common.collect.ImmutableSortedSet$Builder -> com.google.common.collect.ImmutableSortedSet$Builder:
    java.util.Comparator comparator -> comparator
    java.lang.Object[] elements -> elements
    int n -> n
    void <init>(java.util.Comparator) -> <init>
    void copy() -> copy
    void sortAndDedup() -> sortAndDedup
    com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableSortedSet$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSortedSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSortedSet$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSortedSet$Builder combine(com.google.common.collect.ImmutableSet$Builder) -> combine
    com.google.common.collect.ImmutableSortedSet build() -> build
    com.google.common.collect.ImmutableSet build() -> build
    com.google.common.collect.ImmutableSet$Builder combine(com.google.common.collect.ImmutableSet$Builder) -> combine
    com.google.common.collect.ImmutableSet$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableSet$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableSet$Builder add(java.lang.Object) -> add
    com.google.common.collect.ImmutableCollection build() -> build
    com.google.common.collect.ImmutableCollection$Builder addAll(java.util.Iterator) -> addAll
    com.google.common.collect.ImmutableCollection$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object[]) -> add
    com.google.common.collect.ImmutableCollection$Builder add(java.lang.Object) -> add
com.google.common.collect.ImmutableSortedSet$SerializedForm -> com.google.common.collect.ImmutableSortedSet$SerializedForm:
    java.util.Comparator comparator -> comparator
    java.lang.Object[] elements -> elements
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Comparator,java.lang.Object[]) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.ImmutableSortedSetFauxverideShim -> com.google.common.collect.ImmutableSortedSetFauxverideShim:
    void <init>() -> <init>
    java.util.stream.Collector toImmutableSet() -> toImmutableSet
    com.google.common.collect.ImmutableSortedSet$Builder builder() -> builder
    com.google.common.collect.ImmutableSortedSet$Builder builderWithExpectedSize(int) -> builderWithExpectedSize
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableSortedSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    com.google.common.collect.ImmutableSortedSet copyOf(java.lang.Object[]) -> copyOf
com.google.common.collect.ImmutableTable -> com.google.common.collect.ImmutableTable:
    java.util.stream.Collector toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function) -> toImmutableTable
    java.util.stream.Collector toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableTable
    com.google.common.collect.ImmutableTable of() -> of
    com.google.common.collect.ImmutableTable of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    com.google.common.collect.ImmutableTable copyOf(com.google.common.collect.Table) -> copyOf
    com.google.common.collect.ImmutableTable copyOf(java.lang.Iterable) -> copyOf
    com.google.common.collect.ImmutableTable$Builder builder() -> builder
    com.google.common.collect.Table$Cell cellOf(java.lang.Object,java.lang.Object,java.lang.Object) -> cellOf
    void <init>() -> <init>
    com.google.common.collect.ImmutableSet cellSet() -> cellSet
    com.google.common.collect.ImmutableSet createCellSet() -> createCellSet
    com.google.common.collect.UnmodifiableIterator cellIterator() -> cellIterator
    java.util.Spliterator cellSpliterator() -> cellSpliterator
    com.google.common.collect.ImmutableCollection values() -> values
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    java.util.Iterator valuesIterator() -> valuesIterator
    com.google.common.collect.ImmutableMap column(java.lang.Object) -> column
    com.google.common.collect.ImmutableSet columnKeySet() -> columnKeySet
    com.google.common.collect.ImmutableMap columnMap() -> columnMap
    com.google.common.collect.ImmutableMap row(java.lang.Object) -> row
    com.google.common.collect.ImmutableSet rowKeySet() -> rowKeySet
    com.google.common.collect.ImmutableMap rowMap() -> rowMap
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsValue(java.lang.Object) -> containsValue
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm() -> createSerializedForm
    java.lang.Object writeReplace() -> writeReplace
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Collection createValues() -> createValues
    java.util.Collection values() -> values
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Set createCellSet() -> createCellSet
    java.util.Set cellSet() -> cellSet
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Set rowKeySet() -> rowKeySet
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
    java.util.Map column(java.lang.Object) -> column
    java.util.Map row(java.lang.Object) -> row
    com.google.common.collect.ImmutableTable lambda$toImmutableTable$7(com.google.common.collect.ImmutableTable$CollectorState) -> lambda$toImmutableTable$7
    com.google.common.collect.ImmutableTable$CollectorState lambda$toImmutableTable$6(java.util.function.BinaryOperator,com.google.common.collect.ImmutableTable$CollectorState,com.google.common.collect.ImmutableTable$CollectorState) -> lambda$toImmutableTable$6
    void lambda$toImmutableTable$5(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,com.google.common.collect.ImmutableTable$CollectorState,java.lang.Object) -> lambda$toImmutableTable$5
    com.google.common.collect.ImmutableTable$CollectorState lambda$toImmutableTable$4() -> lambda$toImmutableTable$4
    com.google.common.collect.ImmutableTable lambda$toImmutableTable$3(com.google.common.collect.ImmutableTable$Builder) -> lambda$toImmutableTable$3
    com.google.common.collect.ImmutableTable$Builder lambda$toImmutableTable$2(com.google.common.collect.ImmutableTable$Builder,com.google.common.collect.ImmutableTable$Builder) -> lambda$toImmutableTable$2
    void lambda$toImmutableTable$1(java.util.function.Function,java.util.function.Function,java.util.function.Function,com.google.common.collect.ImmutableTable$Builder,java.lang.Object) -> lambda$toImmutableTable$1
    com.google.common.collect.ImmutableTable$Builder lambda$toImmutableTable$0() -> lambda$toImmutableTable$0
    com.google.common.collect.ImmutableTable access$000(java.lang.Iterable) -> access$000
com.google.common.collect.ImmutableTable$1 -> com.google.common.collect.ImmutableTable$1:
com.google.common.collect.ImmutableTable$Builder -> com.google.common.collect.ImmutableTable$Builder:
    java.util.List cells -> cells
    java.util.Comparator rowComparator -> rowComparator
    java.util.Comparator columnComparator -> columnComparator
    void <init>() -> <init>
    com.google.common.collect.ImmutableTable$Builder orderRowsBy(java.util.Comparator) -> orderRowsBy
    com.google.common.collect.ImmutableTable$Builder orderColumnsBy(java.util.Comparator) -> orderColumnsBy
    com.google.common.collect.ImmutableTable$Builder put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    com.google.common.collect.ImmutableTable$Builder put(com.google.common.collect.Table$Cell) -> put
    com.google.common.collect.ImmutableTable$Builder putAll(com.google.common.collect.Table) -> putAll
    com.google.common.collect.ImmutableTable$Builder combine(com.google.common.collect.ImmutableTable$Builder) -> combine
    com.google.common.collect.ImmutableTable build() -> build
com.google.common.collect.ImmutableTable$CollectorState -> com.google.common.collect.ImmutableTable$CollectorState:
    java.util.List insertionOrder -> insertionOrder
    com.google.common.collect.Table table -> table
    void <init>() -> <init>
    void put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator) -> put
    com.google.common.collect.ImmutableTable$CollectorState combine(com.google.common.collect.ImmutableTable$CollectorState,java.util.function.BinaryOperator) -> combine
    com.google.common.collect.ImmutableTable toTable() -> toTable
    void <init>(com.google.common.collect.ImmutableTable$1) -> <init>
com.google.common.collect.ImmutableTable$MutableCell -> com.google.common.collect.ImmutableTable$MutableCell:
    java.lang.Object row -> row
    java.lang.Object column -> column
    java.lang.Object value -> value
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getRowKey() -> getRowKey
    java.lang.Object getColumnKey() -> getColumnKey
    java.lang.Object getValue() -> getValue
    void merge(java.lang.Object,java.util.function.BinaryOperator) -> merge
com.google.common.collect.ImmutableTable$SerializedForm -> com.google.common.collect.ImmutableTable$SerializedForm:
    java.lang.Object[] rowKeys -> rowKeys
    java.lang.Object[] columnKeys -> columnKeys
    java.lang.Object[] cellValues -> cellValues
    int[] cellRowIndices -> cellRowIndices
    int[] cellColumnIndices -> cellColumnIndices
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object[],java.lang.Object[],java.lang.Object[],int[],int[]) -> <init>
    com.google.common.collect.ImmutableTable$SerializedForm create(com.google.common.collect.ImmutableTable,int[],int[]) -> create
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.IndexedImmutableSet -> com.google.common.collect.IndexedImmutableSet:
    void <init>() -> <init>
    java.lang.Object get(int) -> get
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.IndexedImmutableSet$1 -> com.google.common.collect.IndexedImmutableSet$1:
    com.google.common.collect.IndexedImmutableSet this$0 -> this$0
    void <init>(com.google.common.collect.IndexedImmutableSet) -> <init>
    java.lang.Object get(int) -> get
    boolean isPartialView() -> isPartialView
    int size() -> size
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
com.google.common.collect.Interner -> com.google.common.collect.Interner:
    java.lang.Object intern(java.lang.Object) -> intern
com.google.common.collect.Interners -> com.google.common.collect.Interners:
    void <init>() -> <init>
    com.google.common.collect.Interners$InternerBuilder newBuilder() -> newBuilder
    com.google.common.collect.Interner newStrongInterner() -> newStrongInterner
    com.google.common.collect.Interner newWeakInterner() -> newWeakInterner
    com.google.common.base.Function asFunction(com.google.common.collect.Interner) -> asFunction
com.google.common.collect.Interners$1 -> com.google.common.collect.Interners$1:
com.google.common.collect.Interners$InternerBuilder -> com.google.common.collect.Interners$InternerBuilder:
    com.google.common.collect.MapMaker mapMaker -> mapMaker
    boolean strong -> strong
    void <init>() -> <init>
    com.google.common.collect.Interners$InternerBuilder strong() -> strong
    com.google.common.collect.Interners$InternerBuilder weak() -> weak
    com.google.common.collect.Interners$InternerBuilder concurrencyLevel(int) -> concurrencyLevel
    com.google.common.collect.Interner build() -> build
    void <init>(com.google.common.collect.Interners$1) -> <init>
com.google.common.collect.Interners$InternerFunction -> com.google.common.collect.Interners$InternerFunction:
    com.google.common.collect.Interner interner -> interner
    void <init>(com.google.common.collect.Interner) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.collect.Interners$InternerImpl -> com.google.common.collect.Interners$InternerImpl:
    com.google.common.collect.MapMakerInternalMap map -> map
    void <init>(com.google.common.collect.MapMaker) -> <init>
    java.lang.Object intern(java.lang.Object) -> intern
    void <init>(com.google.common.collect.MapMaker,com.google.common.collect.Interners$1) -> <init>
com.google.common.collect.Iterables -> com.google.common.collect.Iterables:
    void <init>() -> <init>
    java.lang.Iterable unmodifiableIterable(java.lang.Iterable) -> unmodifiableIterable
    java.lang.Iterable unmodifiableIterable(com.google.common.collect.ImmutableCollection) -> unmodifiableIterable
    int size(java.lang.Iterable) -> size
    boolean contains(java.lang.Iterable,java.lang.Object) -> contains
    boolean removeAll(java.lang.Iterable,java.util.Collection) -> removeAll
    boolean retainAll(java.lang.Iterable,java.util.Collection) -> retainAll
    boolean removeIf(java.lang.Iterable,com.google.common.base.Predicate) -> removeIf
    java.lang.Object removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate) -> removeFirstMatching
    boolean elementsEqual(java.lang.Iterable,java.lang.Iterable) -> elementsEqual
    java.lang.String toString(java.lang.Iterable) -> toString
    java.lang.Object getOnlyElement(java.lang.Iterable) -> getOnlyElement
    java.lang.Object getOnlyElement(java.lang.Iterable,java.lang.Object) -> getOnlyElement
    java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class) -> toArray
    java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[]) -> toArray
    java.lang.Object[] toArray(java.lang.Iterable) -> toArray
    java.util.Collection castOrCopyToCollection(java.lang.Iterable) -> castOrCopyToCollection
    boolean addAll(java.util.Collection,java.lang.Iterable) -> addAll
    int frequency(java.lang.Iterable,java.lang.Object) -> frequency
    java.lang.Iterable cycle(java.lang.Iterable) -> cycle
    java.lang.Iterable cycle(java.lang.Object[]) -> cycle
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable) -> concat
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> concat
    java.lang.Iterable concat(java.lang.Iterable[]) -> concat
    java.lang.Iterable concat(java.lang.Iterable) -> concat
    java.lang.Iterable partition(java.lang.Iterable,int) -> partition
    java.lang.Iterable paddedPartition(java.lang.Iterable,int) -> paddedPartition
    java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate) -> filter
    java.lang.Iterable filter(java.lang.Iterable,java.lang.Class) -> filter
    boolean any(java.lang.Iterable,com.google.common.base.Predicate) -> any
    boolean all(java.lang.Iterable,com.google.common.base.Predicate) -> all
    java.lang.Object find(java.lang.Iterable,com.google.common.base.Predicate) -> find
    java.lang.Object find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object) -> find
    com.google.common.base.Optional tryFind(java.lang.Iterable,com.google.common.base.Predicate) -> tryFind
    int indexOf(java.lang.Iterable,com.google.common.base.Predicate) -> indexOf
    java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function) -> transform
    java.lang.Object get(java.lang.Iterable,int) -> get
    java.lang.Object get(java.lang.Iterable,int,java.lang.Object) -> get
    java.lang.Object getFirst(java.lang.Iterable,java.lang.Object) -> getFirst
    java.lang.Object getLast(java.lang.Iterable) -> getLast
    java.lang.Object getLast(java.lang.Iterable,java.lang.Object) -> getLast
    java.lang.Object getLastInNonemptyList(java.util.List) -> getLastInNonemptyList
    java.lang.Iterable skip(java.lang.Iterable,int) -> skip
    java.lang.Iterable limit(java.lang.Iterable,int) -> limit
    java.lang.Iterable consumingIterable(java.lang.Iterable) -> consumingIterable
    boolean isEmpty(java.lang.Iterable) -> isEmpty
    java.lang.Iterable mergeSorted(java.lang.Iterable,java.util.Comparator) -> mergeSorted
    com.google.common.base.Function toIterator() -> toIterator
com.google.common.collect.Iterables$1 -> com.google.common.collect.Iterables$1:
    java.lang.Iterable val$iterable -> val$iterable
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    java.lang.String toString() -> toString
    java.lang.Iterable lambda$spliterator$0(java.lang.Iterable) -> lambda$spliterator$0
com.google.common.collect.Iterables$10 -> com.google.common.collect.Iterables$10:
    void <init>() -> <init>
    java.util.Iterator apply(java.lang.Iterable) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Iterables$2 -> com.google.common.collect.Iterables$2:
    java.lang.Iterable val$iterable -> val$iterable
    int val$size -> val$size
    void <init>(java.lang.Iterable,int) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$3 -> com.google.common.collect.Iterables$3:
    java.lang.Iterable val$iterable -> val$iterable
    int val$size -> val$size
    void <init>(java.lang.Iterable,int) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$4 -> com.google.common.collect.Iterables$4:
    java.lang.Iterable val$unfiltered -> val$unfiltered
    com.google.common.base.Predicate val$retainIfTrue -> val$retainIfTrue
    void <init>(java.lang.Iterable,com.google.common.base.Predicate) -> <init>
    java.util.Iterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    java.util.Spliterator spliterator() -> spliterator
    void lambda$forEach$0(com.google.common.base.Predicate,java.util.function.Consumer,java.lang.Object) -> lambda$forEach$0
com.google.common.collect.Iterables$5 -> com.google.common.collect.Iterables$5:
    java.lang.Iterable val$fromIterable -> val$fromIterable
    com.google.common.base.Function val$function -> val$function
    void <init>(java.lang.Iterable,com.google.common.base.Function) -> <init>
    java.util.Iterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    java.util.Spliterator spliterator() -> spliterator
    void lambda$forEach$0(java.util.function.Consumer,com.google.common.base.Function,java.lang.Object) -> lambda$forEach$0
com.google.common.collect.Iterables$6 -> com.google.common.collect.Iterables$6:
    java.lang.Iterable val$iterable -> val$iterable
    int val$numberToSkip -> val$numberToSkip
    void <init>(java.lang.Iterable,int) -> <init>
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
com.google.common.collect.Iterables$6$1 -> com.google.common.collect.Iterables$6$1:
    boolean atStart -> atStart
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.Iterables$6 this$0 -> this$0
    void <init>(com.google.common.collect.Iterables$6,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterables$7 -> com.google.common.collect.Iterables$7:
    java.lang.Iterable val$iterable -> val$iterable
    int val$limitSize -> val$limitSize
    void <init>(java.lang.Iterable,int) -> <init>
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
com.google.common.collect.Iterables$8 -> com.google.common.collect.Iterables$8:
    java.lang.Iterable val$iterable -> val$iterable
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.google.common.collect.Iterables$9 -> com.google.common.collect.Iterables$9:
    java.lang.Iterable val$iterables -> val$iterables
    java.util.Comparator val$comparator -> val$comparator
    void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Iterables$UnmodifiableIterable -> com.google.common.collect.Iterables$UnmodifiableIterable:
    java.lang.Iterable iterable -> iterable
    void <init>(java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    java.util.Spliterator spliterator() -> spliterator
    java.lang.String toString() -> toString
    void <init>(java.lang.Iterable,com.google.common.collect.Iterables$1) -> <init>
com.google.common.collect.Iterators -> com.google.common.collect.Iterators:
    void <init>() -> <init>
    com.google.common.collect.UnmodifiableIterator emptyIterator() -> emptyIterator
    com.google.common.collect.UnmodifiableListIterator emptyListIterator() -> emptyListIterator
    java.util.Iterator emptyModifiableIterator() -> emptyModifiableIterator
    com.google.common.collect.UnmodifiableIterator unmodifiableIterator(java.util.Iterator) -> unmodifiableIterator
    com.google.common.collect.UnmodifiableIterator unmodifiableIterator(com.google.common.collect.UnmodifiableIterator) -> unmodifiableIterator
    int size(java.util.Iterator) -> size
    boolean contains(java.util.Iterator,java.lang.Object) -> contains
    boolean removeAll(java.util.Iterator,java.util.Collection) -> removeAll
    boolean removeIf(java.util.Iterator,com.google.common.base.Predicate) -> removeIf
    boolean retainAll(java.util.Iterator,java.util.Collection) -> retainAll
    boolean elementsEqual(java.util.Iterator,java.util.Iterator) -> elementsEqual
    java.lang.String toString(java.util.Iterator) -> toString
    java.lang.Object getOnlyElement(java.util.Iterator) -> getOnlyElement
    java.lang.Object getOnlyElement(java.util.Iterator,java.lang.Object) -> getOnlyElement
    java.lang.Object[] toArray(java.util.Iterator,java.lang.Class) -> toArray
    boolean addAll(java.util.Collection,java.util.Iterator) -> addAll
    int frequency(java.util.Iterator,java.lang.Object) -> frequency
    java.util.Iterator cycle(java.lang.Iterable) -> cycle
    java.util.Iterator cycle(java.lang.Object[]) -> cycle
    java.util.Iterator consumingForArray(java.lang.Object[]) -> consumingForArray
    java.util.Iterator concat(java.util.Iterator,java.util.Iterator) -> concat
    java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator) -> concat
    java.util.Iterator concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator) -> concat
    java.util.Iterator concat(java.util.Iterator[]) -> concat
    java.util.Iterator concat(java.util.Iterator) -> concat
    java.util.Iterator concatNoDefensiveCopy(java.util.Iterator[]) -> concatNoDefensiveCopy
    com.google.common.collect.UnmodifiableIterator partition(java.util.Iterator,int) -> partition
    com.google.common.collect.UnmodifiableIterator paddedPartition(java.util.Iterator,int) -> paddedPartition
    com.google.common.collect.UnmodifiableIterator partitionImpl(java.util.Iterator,int,boolean) -> partitionImpl
    com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,com.google.common.base.Predicate) -> filter
    com.google.common.collect.UnmodifiableIterator filter(java.util.Iterator,java.lang.Class) -> filter
    boolean any(java.util.Iterator,com.google.common.base.Predicate) -> any
    boolean all(java.util.Iterator,com.google.common.base.Predicate) -> all
    java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate) -> find
    java.lang.Object find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object) -> find
    com.google.common.base.Optional tryFind(java.util.Iterator,com.google.common.base.Predicate) -> tryFind
    int indexOf(java.util.Iterator,com.google.common.base.Predicate) -> indexOf
    java.util.Iterator transform(java.util.Iterator,com.google.common.base.Function) -> transform
    java.lang.Object get(java.util.Iterator,int) -> get
    java.lang.Object get(java.util.Iterator,int,java.lang.Object) -> get
    void checkNonnegative(int) -> checkNonnegative
    java.lang.Object getNext(java.util.Iterator,java.lang.Object) -> getNext
    java.lang.Object getLast(java.util.Iterator) -> getLast
    java.lang.Object getLast(java.util.Iterator,java.lang.Object) -> getLast
    int advance(java.util.Iterator,int) -> advance
    java.util.Iterator limit(java.util.Iterator,int) -> limit
    java.util.Iterator consumingIterator(java.util.Iterator) -> consumingIterator
    java.lang.Object pollNext(java.util.Iterator) -> pollNext
    void clear(java.util.Iterator) -> clear
    com.google.common.collect.UnmodifiableIterator forArray(java.lang.Object[]) -> forArray
    com.google.common.collect.UnmodifiableListIterator forArray(java.lang.Object[],int,int,int) -> forArray
    com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object) -> singletonIterator
    com.google.common.collect.UnmodifiableIterator forEnumeration(java.util.Enumeration) -> forEnumeration
    java.util.Enumeration asEnumeration(java.util.Iterator) -> asEnumeration
    com.google.common.collect.PeekingIterator peekingIterator(java.util.Iterator) -> peekingIterator
    com.google.common.collect.PeekingIterator peekingIterator(com.google.common.collect.PeekingIterator) -> peekingIterator
    com.google.common.collect.UnmodifiableIterator mergeSorted(java.lang.Iterable,java.util.Comparator) -> mergeSorted
    java.util.ListIterator cast(java.util.Iterator) -> cast
com.google.common.collect.Iterators$1 -> com.google.common.collect.Iterators$1:
    java.util.Iterator val$iterator -> val$iterator
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$10 -> com.google.common.collect.Iterators$10:
    java.util.Enumeration val$enumeration -> val$enumeration
    void <init>(java.util.Enumeration) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$11 -> com.google.common.collect.Iterators$11:
    java.util.Iterator val$iterator -> val$iterator
    void <init>(java.util.Iterator) -> <init>
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
com.google.common.collect.Iterators$2 -> com.google.common.collect.Iterators$2:
    java.util.Iterator iterator -> iterator
    java.lang.Iterable val$iterable -> val$iterable
    void <init>(java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$3 -> com.google.common.collect.Iterators$3:
    int index -> index
    java.lang.Object[] val$elements -> val$elements
    void <init>(java.lang.Object[]) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$4 -> com.google.common.collect.Iterators$4:
    java.util.Iterator val$iterator -> val$iterator
    int val$size -> val$size
    boolean val$pad -> val$pad
    void <init>(java.util.Iterator,int,boolean) -> <init>
    boolean hasNext() -> hasNext
    java.util.List next() -> next
    java.lang.Object next() -> next
com.google.common.collect.Iterators$5 -> com.google.common.collect.Iterators$5:
    java.util.Iterator val$unfiltered -> val$unfiltered
    com.google.common.base.Predicate val$retainIfTrue -> val$retainIfTrue
    void <init>(java.util.Iterator,com.google.common.base.Predicate) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Iterators$6 -> com.google.common.collect.Iterators$6:
    com.google.common.base.Function val$function -> val$function
    void <init>(java.util.Iterator,com.google.common.base.Function) -> <init>
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Iterators$7 -> com.google.common.collect.Iterators$7:
    int count -> count
    int val$limitSize -> val$limitSize
    java.util.Iterator val$iterator -> val$iterator
    void <init>(int,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$8 -> com.google.common.collect.Iterators$8:
    java.util.Iterator val$iterator -> val$iterator
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.lang.String toString() -> toString
com.google.common.collect.Iterators$9 -> com.google.common.collect.Iterators$9:
    boolean done -> done
    java.lang.Object val$value -> val$value
    void <init>(java.lang.Object) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$ArrayItr -> com.google.common.collect.Iterators$ArrayItr:
    com.google.common.collect.UnmodifiableListIterator EMPTY -> EMPTY
    java.lang.Object[] array -> array
    int offset -> offset
    void <init>(java.lang.Object[],int,int,int) -> <init>
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
com.google.common.collect.Iterators$ConcatenatedIterator -> com.google.common.collect.Iterators$ConcatenatedIterator:
    java.util.Iterator toRemove -> toRemove
    java.util.Iterator iterator -> iterator
    java.util.Iterator topMetaIterator -> topMetaIterator
    java.util.Deque metaIterators -> metaIterators
    void <init>(java.util.Iterator) -> <init>
    java.util.Iterator getTopMetaIterator() -> getTopMetaIterator
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Iterators$EmptyModifiableIterator -> com.google.common.collect.Iterators$EmptyModifiableIterator:
    com.google.common.collect.Iterators$EmptyModifiableIterator INSTANCE -> INSTANCE
    com.google.common.collect.Iterators$EmptyModifiableIterator[] $VALUES -> $VALUES
    com.google.common.collect.Iterators$EmptyModifiableIterator[] values() -> values
    com.google.common.collect.Iterators$EmptyModifiableIterator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    void <clinit>() -> <clinit>
com.google.common.collect.Iterators$MergingIterator -> com.google.common.collect.Iterators$MergingIterator:
    java.util.Queue queue -> queue
    void <init>(java.lang.Iterable,java.util.Comparator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Iterators$MergingIterator$1 -> com.google.common.collect.Iterators$MergingIterator$1:
    java.util.Comparator val$itemComparator -> val$itemComparator
    com.google.common.collect.Iterators$MergingIterator this$0 -> this$0
    void <init>(com.google.common.collect.Iterators$MergingIterator,java.util.Comparator) -> <init>
    int compare(com.google.common.collect.PeekingIterator,com.google.common.collect.PeekingIterator) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.Iterators$PeekingImpl -> com.google.common.collect.Iterators$PeekingImpl:
    java.util.Iterator iterator -> iterator
    boolean hasPeeked -> hasPeeked
    java.lang.Object peekedElement -> peekedElement
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.lang.Object peek() -> peek
com.google.common.collect.JdkBackedImmutableBiMap -> com.google.common.collect.JdkBackedImmutableBiMap:
    com.google.common.collect.ImmutableList entries -> entries
    java.util.Map forwardDelegate -> forwardDelegate
    java.util.Map backwardDelegate -> backwardDelegate
    com.google.common.collect.JdkBackedImmutableBiMap inverse -> inverse
    com.google.common.collect.ImmutableBiMap create(int,java.util.Map$Entry[]) -> create
    void <init>(com.google.common.collect.ImmutableList,java.util.Map,java.util.Map) -> <init>
    int size() -> size
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    boolean isPartialView() -> isPartialView
    com.google.common.collect.BiMap inverse() -> inverse
    com.google.common.collect.ImmutableList access$100(com.google.common.collect.JdkBackedImmutableBiMap) -> access$100
com.google.common.collect.JdkBackedImmutableBiMap$1 -> com.google.common.collect.JdkBackedImmutableBiMap$1:
com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries -> com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:
    com.google.common.collect.JdkBackedImmutableBiMap this$0 -> this$0
    void <init>(com.google.common.collect.JdkBackedImmutableBiMap) -> <init>
    java.util.Map$Entry get(int) -> get
    boolean isPartialView() -> isPartialView
    int size() -> size
    java.lang.Object get(int) -> get
    void <init>(com.google.common.collect.JdkBackedImmutableBiMap,com.google.common.collect.JdkBackedImmutableBiMap$1) -> <init>
com.google.common.collect.JdkBackedImmutableMap -> com.google.common.collect.JdkBackedImmutableMap:
    java.util.Map delegateMap -> delegateMap
    com.google.common.collect.ImmutableList entries -> entries
    com.google.common.collect.ImmutableMap create(int,java.util.Map$Entry[]) -> create
    void <init>(java.util.Map,com.google.common.collect.ImmutableList) -> <init>
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    void forEach(java.util.function.BiConsumer) -> forEach
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    boolean isPartialView() -> isPartialView
    void lambda$forEach$0(java.util.function.BiConsumer,java.util.Map$Entry) -> lambda$forEach$0
com.google.common.collect.JdkBackedImmutableMultiset -> com.google.common.collect.JdkBackedImmutableMultiset:
    java.util.Map delegateMap -> delegateMap
    com.google.common.collect.ImmutableList entries -> entries
    long size -> size
    com.google.common.collect.ImmutableSet elementSet -> elementSet
    com.google.common.collect.ImmutableMultiset create(java.util.Collection) -> create
    void <init>(java.util.Map,com.google.common.collect.ImmutableList,long) -> <init>
    int count(java.lang.Object) -> count
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    boolean isPartialView() -> isPartialView
    int size() -> size
    java.util.Set elementSet() -> elementSet
com.google.common.collect.JdkBackedImmutableSet -> com.google.common.collect.JdkBackedImmutableSet:
    java.util.Set delegate -> delegate
    com.google.common.collect.ImmutableList delegateList -> delegateList
    void <init>(java.util.Set,com.google.common.collect.ImmutableList) -> <init>
    java.lang.Object get(int) -> get
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    int size() -> size
com.google.common.collect.LexicographicalOrdering -> com.google.common.collect.LexicographicalOrdering:
    java.util.Comparator elementOrder -> elementOrder
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Comparator) -> <init>
    int compare(java.lang.Iterable,java.lang.Iterable) -> compare
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.LinkedHashMultimap -> com.google.common.collect.LinkedHashMultimap:
    int DEFAULT_KEY_CAPACITY -> DEFAULT_KEY_CAPACITY
    int DEFAULT_VALUE_SET_CAPACITY -> DEFAULT_VALUE_SET_CAPACITY
    double VALUE_SET_LOAD_FACTOR -> VALUE_SET_LOAD_FACTOR
    int valueSetCapacity -> valueSetCapacity
    com.google.common.collect.LinkedHashMultimap$ValueEntry multimapHeaderEntry -> multimapHeaderEntry
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.LinkedHashMultimap create() -> create
    com.google.common.collect.LinkedHashMultimap create(int,int) -> create
    com.google.common.collect.LinkedHashMultimap create(com.google.common.collect.Multimap) -> create
    void succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> succeedsInValueSet
    void succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry) -> succeedsInMultimap
    void deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> deleteFromValueSet
    void deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> deleteFromMultimap
    void <init>(int,int) -> <init>
    java.util.Set createCollection() -> createCollection
    java.util.Collection createCollection(java.lang.Object) -> createCollection
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    java.util.Iterator valueIterator() -> valueIterator
    java.util.Spliterator valueSpliterator() -> valueSpliterator
    void clear() -> clear
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    boolean equals(java.lang.Object) -> equals
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Map asMap() -> asMap
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    void forEach(java.util.function.BiConsumer) -> forEach
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    java.util.Collection createCollection() -> createCollection
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    com.google.common.collect.Multiset keys() -> keys
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isEmpty() -> isEmpty
    void access$200(com.google.common.collect.LinkedHashMultimap$ValueSetLink,com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> access$200
    com.google.common.collect.LinkedHashMultimap$ValueEntry access$300(com.google.common.collect.LinkedHashMultimap) -> access$300
    void access$400(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry) -> access$400
    void access$500(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> access$500
    void access$600(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> access$600
com.google.common.collect.LinkedHashMultimap$1 -> com.google.common.collect.LinkedHashMultimap$1:
    com.google.common.collect.LinkedHashMultimap$ValueEntry nextEntry -> nextEntry
    com.google.common.collect.LinkedHashMultimap$ValueEntry toRemove -> toRemove
    com.google.common.collect.LinkedHashMultimap this$0 -> this$0
    void <init>(com.google.common.collect.LinkedHashMultimap) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.LinkedHashMultimap$ValueEntry -> com.google.common.collect.LinkedHashMultimap$ValueEntry:
    int smearedValueHash -> smearedValueHash
    com.google.common.collect.LinkedHashMultimap$ValueEntry nextInValueBucket -> nextInValueBucket
    com.google.common.collect.LinkedHashMultimap$ValueSetLink predecessorInValueSet -> predecessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueSetLink successorInValueSet -> successorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueEntry predecessorInMultimap -> predecessorInMultimap
    com.google.common.collect.LinkedHashMultimap$ValueEntry successorInMultimap -> successorInMultimap
    void <init>(java.lang.Object,java.lang.Object,int,com.google.common.collect.LinkedHashMultimap$ValueEntry) -> <init>
    boolean matchesValue(java.lang.Object,int) -> matchesValue
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getPredecessorInValueSet() -> getPredecessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getSuccessorInValueSet() -> getSuccessorInValueSet
    void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setPredecessorInValueSet
    void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setSuccessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueEntry getPredecessorInMultimap() -> getPredecessorInMultimap
    com.google.common.collect.LinkedHashMultimap$ValueEntry getSuccessorInMultimap() -> getSuccessorInMultimap
    void setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> setSuccessorInMultimap
    void setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry) -> setPredecessorInMultimap
com.google.common.collect.LinkedHashMultimap$ValueSet -> com.google.common.collect.LinkedHashMultimap$ValueSet:
    java.lang.Object key -> key
    com.google.common.collect.LinkedHashMultimap$ValueEntry[] hashTable -> hashTable
    int size -> size
    int modCount -> modCount
    com.google.common.collect.LinkedHashMultimap$ValueSetLink firstEntry -> firstEntry
    com.google.common.collect.LinkedHashMultimap$ValueSetLink lastEntry -> lastEntry
    com.google.common.collect.LinkedHashMultimap this$0 -> this$0
    void <init>(com.google.common.collect.LinkedHashMultimap,java.lang.Object,int) -> <init>
    int mask() -> mask
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getPredecessorInValueSet() -> getPredecessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getSuccessorInValueSet() -> getSuccessorInValueSet
    void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setPredecessorInValueSet
    void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setSuccessorInValueSet
    java.util.Iterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    void rehashIfNecessary() -> rehashIfNecessary
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    com.google.common.collect.LinkedHashMultimap$ValueSetLink access$000(com.google.common.collect.LinkedHashMultimap$ValueSet) -> access$000
    int access$100(com.google.common.collect.LinkedHashMultimap$ValueSet) -> access$100
com.google.common.collect.LinkedHashMultimap$ValueSet$1 -> com.google.common.collect.LinkedHashMultimap$ValueSet$1:
    com.google.common.collect.LinkedHashMultimap$ValueSetLink nextEntry -> nextEntry
    com.google.common.collect.LinkedHashMultimap$ValueEntry toRemove -> toRemove
    int expectedModCount -> expectedModCount
    com.google.common.collect.LinkedHashMultimap$ValueSet this$1 -> this$1
    void <init>(com.google.common.collect.LinkedHashMultimap$ValueSet) -> <init>
    void checkForComodification() -> checkForComodification
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.LinkedHashMultimap$ValueSetLink -> com.google.common.collect.LinkedHashMultimap$ValueSetLink:
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getPredecessorInValueSet() -> getPredecessorInValueSet
    com.google.common.collect.LinkedHashMultimap$ValueSetLink getSuccessorInValueSet() -> getSuccessorInValueSet
    void setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setPredecessorInValueSet
    void setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink) -> setSuccessorInValueSet
com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies -> com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies:
    void <init>(java.util.Map) -> <init>
com.google.common.collect.LinkedHashMultiset -> com.google.common.collect.LinkedHashMultiset:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.LinkedHashMultiset create() -> create
    com.google.common.collect.LinkedHashMultiset create(int) -> create
    com.google.common.collect.LinkedHashMultiset create(java.lang.Iterable) -> create
    void <init>() -> <init>
    void <init>(int) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    int setCount(java.lang.Object,int) -> setCount
    int remove(java.lang.Object,int) -> remove
    int add(java.lang.Object,int) -> add
    int count(java.lang.Object) -> count
    java.util.Iterator iterator() -> iterator
    int size() -> size
    void clear() -> clear
    void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    java.util.Set entrySet() -> entrySet
    java.util.Set elementSet() -> elementSet
    boolean setCount(java.lang.Object,int,int) -> setCount
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
com.google.common.collect.LinkedListMultimap -> com.google.common.collect.LinkedListMultimap:
    com.google.common.collect.LinkedListMultimap$Node head -> head
    com.google.common.collect.LinkedListMultimap$Node tail -> tail
    java.util.Map keyToKeyList -> keyToKeyList
    int size -> size
    int modCount -> modCount
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.LinkedListMultimap create() -> create
    com.google.common.collect.LinkedListMultimap create(int) -> create
    com.google.common.collect.LinkedListMultimap create(com.google.common.collect.Multimap) -> create
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(com.google.common.collect.Multimap) -> <init>
    com.google.common.collect.LinkedListMultimap$Node addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node) -> addNode
    void removeNode(com.google.common.collect.LinkedListMultimap$Node) -> removeNode
    void removeAllNodes(java.lang.Object) -> removeAllNodes
    void checkElement(java.lang.Object) -> checkElement
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.List getCopy(java.lang.Object) -> getCopy
    java.util.List removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.List get(java.lang.Object) -> get
    java.util.Set createKeySet() -> createKeySet
    com.google.common.collect.Multiset createKeys() -> createKeys
    java.util.List values() -> values
    java.util.List createValues() -> createValues
    java.util.List entries() -> entries
    java.util.List createEntries() -> createEntries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.util.Map asMap() -> asMap
    java.util.Collection createValues() -> createValues
    java.util.Collection values() -> values
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    java.util.Collection createEntries() -> createEntries
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    int access$000(com.google.common.collect.LinkedListMultimap) -> access$000
    com.google.common.collect.LinkedListMultimap$Node access$100(com.google.common.collect.LinkedListMultimap) -> access$100
    com.google.common.collect.LinkedListMultimap$Node access$200(com.google.common.collect.LinkedListMultimap) -> access$200
    void access$300(java.lang.Object) -> access$300
    void access$400(com.google.common.collect.LinkedListMultimap,com.google.common.collect.LinkedListMultimap$Node) -> access$400
    void access$500(com.google.common.collect.LinkedListMultimap,java.lang.Object) -> access$500
    java.util.Map access$600(com.google.common.collect.LinkedListMultimap) -> access$600
    com.google.common.collect.LinkedListMultimap$Node access$700(com.google.common.collect.LinkedListMultimap,java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node) -> access$700
    int access$900(com.google.common.collect.LinkedListMultimap) -> access$900
com.google.common.collect.LinkedListMultimap$1 -> com.google.common.collect.LinkedListMultimap$1:
    java.lang.Object val$key -> val$key
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    void <init>(com.google.common.collect.LinkedListMultimap,java.lang.Object) -> <init>
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.LinkedListMultimap$1EntriesImpl -> com.google.common.collect.LinkedListMultimap$1EntriesImpl:
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    void <init>(com.google.common.collect.LinkedListMultimap) -> <init>
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
    void forEach(java.util.function.Consumer) -> forEach
com.google.common.collect.LinkedListMultimap$1KeySetImpl -> com.google.common.collect.LinkedListMultimap$1KeySetImpl:
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    void <init>(com.google.common.collect.LinkedListMultimap) -> <init>
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.LinkedListMultimap$1ValuesImpl -> com.google.common.collect.LinkedListMultimap$1ValuesImpl:
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    void <init>(com.google.common.collect.LinkedListMultimap) -> <init>
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.LinkedListMultimap$1ValuesImpl$1 -> com.google.common.collect.LinkedListMultimap$1ValuesImpl$1:
    com.google.common.collect.LinkedListMultimap$NodeIterator val$nodeItr -> val$nodeItr
    com.google.common.collect.LinkedListMultimap$1ValuesImpl this$1 -> this$1
    void <init>(com.google.common.collect.LinkedListMultimap$1ValuesImpl,java.util.ListIterator,com.google.common.collect.LinkedListMultimap$NodeIterator) -> <init>
    java.lang.Object transform(java.util.Map$Entry) -> transform
    void set(java.lang.Object) -> set
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.LinkedListMultimap$DistinctKeyIterator -> com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:
    java.util.Set seenKeys -> seenKeys
    com.google.common.collect.LinkedListMultimap$Node next -> next
    com.google.common.collect.LinkedListMultimap$Node current -> current
    int expectedModCount -> expectedModCount
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    void <init>(com.google.common.collect.LinkedListMultimap) -> <init>
    void checkForConcurrentModification() -> checkForConcurrentModification
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    void <init>(com.google.common.collect.LinkedListMultimap,com.google.common.collect.LinkedListMultimap$1) -> <init>
com.google.common.collect.LinkedListMultimap$KeyList -> com.google.common.collect.LinkedListMultimap$KeyList:
    com.google.common.collect.LinkedListMultimap$Node head -> head
    com.google.common.collect.LinkedListMultimap$Node tail -> tail
    int count -> count
    void <init>(com.google.common.collect.LinkedListMultimap$Node) -> <init>
com.google.common.collect.LinkedListMultimap$Node -> com.google.common.collect.LinkedListMultimap$Node:
    java.lang.Object key -> key
    java.lang.Object value -> value
    com.google.common.collect.LinkedListMultimap$Node next -> next
    com.google.common.collect.LinkedListMultimap$Node previous -> previous
    com.google.common.collect.LinkedListMultimap$Node nextSibling -> nextSibling
    com.google.common.collect.LinkedListMultimap$Node previousSibling -> previousSibling
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.LinkedListMultimap$NodeIterator -> com.google.common.collect.LinkedListMultimap$NodeIterator:
    int nextIndex -> nextIndex
    com.google.common.collect.LinkedListMultimap$Node next -> next
    com.google.common.collect.LinkedListMultimap$Node current -> current
    com.google.common.collect.LinkedListMultimap$Node previous -> previous
    int expectedModCount -> expectedModCount
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    void <init>(com.google.common.collect.LinkedListMultimap,int) -> <init>
    void checkForConcurrentModification() -> checkForConcurrentModification
    boolean hasNext() -> hasNext
    com.google.common.collect.LinkedListMultimap$Node next() -> next
    void remove() -> remove
    boolean hasPrevious() -> hasPrevious
    com.google.common.collect.LinkedListMultimap$Node previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.util.Map$Entry) -> set
    void add(java.util.Map$Entry) -> add
    void setValue(java.lang.Object) -> setValue
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
com.google.common.collect.LinkedListMultimap$ValueForKeyIterator -> com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:
    java.lang.Object key -> key
    int nextIndex -> nextIndex
    com.google.common.collect.LinkedListMultimap$Node next -> next
    com.google.common.collect.LinkedListMultimap$Node current -> current
    com.google.common.collect.LinkedListMultimap$Node previous -> previous
    com.google.common.collect.LinkedListMultimap this$0 -> this$0
    void <init>(com.google.common.collect.LinkedListMultimap,java.lang.Object) -> <init>
    void <init>(com.google.common.collect.LinkedListMultimap,java.lang.Object,int) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.ListMultimap -> com.google.common.collect.ListMultimap:
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.Lists -> com.google.common.collect.Lists:
    void <init>() -> <init>
    java.util.ArrayList newArrayList() -> newArrayList
    java.util.ArrayList newArrayList(java.lang.Object[]) -> newArrayList
    java.util.ArrayList newArrayList(java.lang.Iterable) -> newArrayList
    java.util.ArrayList newArrayList(java.util.Iterator) -> newArrayList
    int computeArrayListCapacity(int) -> computeArrayListCapacity
    java.util.ArrayList newArrayListWithCapacity(int) -> newArrayListWithCapacity
    java.util.ArrayList newArrayListWithExpectedSize(int) -> newArrayListWithExpectedSize
    java.util.LinkedList newLinkedList() -> newLinkedList
    java.util.LinkedList newLinkedList(java.lang.Iterable) -> newLinkedList
    java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList() -> newCopyOnWriteArrayList
    java.util.concurrent.CopyOnWriteArrayList newCopyOnWriteArrayList(java.lang.Iterable) -> newCopyOnWriteArrayList
    java.util.List asList(java.lang.Object,java.lang.Object[]) -> asList
    java.util.List asList(java.lang.Object,java.lang.Object,java.lang.Object[]) -> asList
    java.util.List cartesianProduct(java.util.List) -> cartesianProduct
    java.util.List cartesianProduct(java.util.List[]) -> cartesianProduct
    java.util.List transform(java.util.List,com.google.common.base.Function) -> transform
    java.util.List partition(java.util.List,int) -> partition
    com.google.common.collect.ImmutableList charactersOf(java.lang.String) -> charactersOf
    java.util.List charactersOf(java.lang.CharSequence) -> charactersOf
    java.util.List reverse(java.util.List) -> reverse
    int hashCodeImpl(java.util.List) -> hashCodeImpl
    boolean equalsImpl(java.util.List,java.lang.Object) -> equalsImpl
    boolean addAllImpl(java.util.List,int,java.lang.Iterable) -> addAllImpl
    int indexOfImpl(java.util.List,java.lang.Object) -> indexOfImpl
    int indexOfRandomAccess(java.util.List,java.lang.Object) -> indexOfRandomAccess
    int lastIndexOfImpl(java.util.List,java.lang.Object) -> lastIndexOfImpl
    int lastIndexOfRandomAccess(java.util.List,java.lang.Object) -> lastIndexOfRandomAccess
    java.util.ListIterator listIteratorImpl(java.util.List,int) -> listIteratorImpl
    java.util.List subListImpl(java.util.List,int,int) -> subListImpl
    java.util.List cast(java.lang.Iterable) -> cast
com.google.common.collect.Lists$1 -> com.google.common.collect.Lists$1:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$2 -> com.google.common.collect.Lists$2:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List) -> <init>
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.Lists$AbstractListWrapper -> com.google.common.collect.Lists$AbstractListWrapper:
    java.util.List backingList -> backingList
    void <init>(java.util.List) -> <init>
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    boolean contains(java.lang.Object) -> contains
    int size() -> size
com.google.common.collect.Lists$CharSequenceAsList -> com.google.common.collect.Lists$CharSequenceAsList:
    java.lang.CharSequence sequence -> sequence
    void <init>(java.lang.CharSequence) -> <init>
    java.lang.Character get(int) -> get
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$OnePlusArrayList -> com.google.common.collect.Lists$OnePlusArrayList:
    java.lang.Object first -> first
    java.lang.Object[] rest -> rest
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,java.lang.Object[]) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$Partition -> com.google.common.collect.Lists$Partition:
    java.util.List list -> list
    int size -> size
    void <init>(java.util.List,int) -> <init>
    java.util.List get(int) -> get
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$RandomAccessListWrapper -> com.google.common.collect.Lists$RandomAccessListWrapper:
    void <init>(java.util.List) -> <init>
com.google.common.collect.Lists$RandomAccessPartition -> com.google.common.collect.Lists$RandomAccessPartition:
    void <init>(java.util.List,int) -> <init>
com.google.common.collect.Lists$RandomAccessReverseList -> com.google.common.collect.Lists$RandomAccessReverseList:
    void <init>(java.util.List) -> <init>
com.google.common.collect.Lists$ReverseList -> com.google.common.collect.Lists$ReverseList:
    java.util.List forwardList -> forwardList
    void <init>(java.util.List) -> <init>
    java.util.List getForwardList() -> getForwardList
    int reverseIndex(int) -> reverseIndex
    int reversePosition(int) -> reversePosition
    void add(int,java.lang.Object) -> add
    void clear() -> clear
    java.lang.Object remove(int) -> remove
    void removeRange(int,int) -> removeRange
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    int size() -> size
    java.util.List subList(int,int) -> subList
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator(int) -> listIterator
    int access$000(com.google.common.collect.Lists$ReverseList,int) -> access$000
com.google.common.collect.Lists$ReverseList$1 -> com.google.common.collect.Lists$ReverseList$1:
    boolean canRemoveOrSet -> canRemoveOrSet
    java.util.ListIterator val$forwardIterator -> val$forwardIterator
    com.google.common.collect.Lists$ReverseList this$0 -> this$0
    void <init>(com.google.common.collect.Lists$ReverseList,java.util.ListIterator) -> <init>
    void add(java.lang.Object) -> add
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(java.lang.Object) -> set
com.google.common.collect.Lists$StringAsImmutableList -> com.google.common.collect.Lists$StringAsImmutableList:
    java.lang.String string -> string
    void <init>(java.lang.String) -> <init>
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    boolean isPartialView() -> isPartialView
    java.lang.Character get(int) -> get
    int size() -> size
    java.util.List subList(int,int) -> subList
    java.lang.Object get(int) -> get
com.google.common.collect.Lists$TransformingRandomAccessList -> com.google.common.collect.Lists$TransformingRandomAccessList:
    java.util.List fromList -> fromList
    com.google.common.base.Function function -> function
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List,com.google.common.base.Function) -> <init>
    void clear() -> clear
    java.lang.Object get(int) -> get
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator(int) -> listIterator
    boolean isEmpty() -> isEmpty
    boolean removeIf(java.util.function.Predicate) -> removeIf
    java.lang.Object remove(int) -> remove
    int size() -> size
    boolean lambda$removeIf$0(java.util.function.Predicate,java.lang.Object) -> lambda$removeIf$0
com.google.common.collect.Lists$TransformingRandomAccessList$1 -> com.google.common.collect.Lists$TransformingRandomAccessList$1:
    com.google.common.collect.Lists$TransformingRandomAccessList this$0 -> this$0
    void <init>(com.google.common.collect.Lists$TransformingRandomAccessList,java.util.ListIterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Lists$TransformingSequentialList -> com.google.common.collect.Lists$TransformingSequentialList:
    java.util.List fromList -> fromList
    com.google.common.base.Function function -> function
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List,com.google.common.base.Function) -> <init>
    void clear() -> clear
    int size() -> size
    java.util.ListIterator listIterator(int) -> listIterator
    boolean removeIf(java.util.function.Predicate) -> removeIf
    boolean lambda$removeIf$0(java.util.function.Predicate,java.lang.Object) -> lambda$removeIf$0
com.google.common.collect.Lists$TransformingSequentialList$1 -> com.google.common.collect.Lists$TransformingSequentialList$1:
    com.google.common.collect.Lists$TransformingSequentialList this$0 -> this$0
    void <init>(com.google.common.collect.Lists$TransformingSequentialList,java.util.ListIterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Lists$TwoPlusArrayList -> com.google.common.collect.Lists$TwoPlusArrayList:
    java.lang.Object first -> first
    java.lang.Object second -> second
    java.lang.Object[] rest -> rest
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object[]) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
com.google.common.collect.MapDifference -> com.google.common.collect.MapDifference:
    boolean areEqual() -> areEqual
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesDiffering() -> entriesDiffering
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MapDifference$ValueDifference -> com.google.common.collect.MapDifference$ValueDifference:
    java.lang.Object leftValue() -> leftValue
    java.lang.Object rightValue() -> rightValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.MapMaker -> com.google.common.collect.MapMaker:
    int DEFAULT_INITIAL_CAPACITY -> DEFAULT_INITIAL_CAPACITY
    int DEFAULT_CONCURRENCY_LEVEL -> DEFAULT_CONCURRENCY_LEVEL
    int UNSET_INT -> UNSET_INT
    boolean useCustomMap -> useCustomMap
    int initialCapacity -> initialCapacity
    int concurrencyLevel -> concurrencyLevel
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> valueStrength
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    void <init>() -> <init>
    com.google.common.collect.MapMaker keyEquivalence(com.google.common.base.Equivalence) -> keyEquivalence
    com.google.common.base.Equivalence getKeyEquivalence() -> getKeyEquivalence
    com.google.common.collect.MapMaker initialCapacity(int) -> initialCapacity
    int getInitialCapacity() -> getInitialCapacity
    com.google.common.collect.MapMaker concurrencyLevel(int) -> concurrencyLevel
    int getConcurrencyLevel() -> getConcurrencyLevel
    com.google.common.collect.MapMaker weakKeys() -> weakKeys
    com.google.common.collect.MapMaker setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength) -> setKeyStrength
    com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength() -> getKeyStrength
    com.google.common.collect.MapMaker weakValues() -> weakValues
    com.google.common.collect.MapMaker setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength) -> setValueStrength
    com.google.common.collect.MapMakerInternalMap$Strength getValueStrength() -> getValueStrength
    java.util.concurrent.ConcurrentMap makeMap() -> makeMap
    java.lang.String toString() -> toString
com.google.common.collect.MapMaker$Dummy -> com.google.common.collect.MapMaker$Dummy:
    com.google.common.collect.MapMaker$Dummy VALUE -> VALUE
    com.google.common.collect.MapMaker$Dummy[] $VALUES -> $VALUES
    com.google.common.collect.MapMaker$Dummy[] values() -> values
    com.google.common.collect.MapMaker$Dummy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap -> com.google.common.collect.MapMakerInternalMap:
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    int MAX_SEGMENTS -> MAX_SEGMENTS
    int CONTAINS_VALUE_RETRIES -> CONTAINS_VALUE_RETRIES
    int DRAIN_THRESHOLD -> DRAIN_THRESHOLD
    int DRAIN_MAX -> DRAIN_MAX
    long CLEANUP_EXECUTOR_DELAY_SECS -> CLEANUP_EXECUTOR_DELAY_SECS
    int segmentMask -> segmentMask
    int segmentShift -> segmentShift
    com.google.common.collect.MapMakerInternalMap$Segment[] segments -> segments
    int concurrencyLevel -> concurrencyLevel
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.collect.MapMakerInternalMap$InternalEntryHelper entryHelper -> entryHelper
    com.google.common.collect.MapMakerInternalMap$WeakValueReference UNSET_WEAK_VALUE_REFERENCE -> UNSET_WEAK_VALUE_REFERENCE
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper) -> <init>
    com.google.common.collect.MapMakerInternalMap create(com.google.common.collect.MapMaker) -> create
    com.google.common.collect.MapMakerInternalMap createWithDummyValues(com.google.common.collect.MapMaker) -> createWithDummyValues
    com.google.common.collect.MapMakerInternalMap$WeakValueReference unsetWeakValueReference() -> unsetWeakValueReference
    int rehash(int) -> rehash
    com.google.common.collect.MapMakerInternalMap$InternalEntry copyEntry(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copyEntry
    int hash(java.lang.Object) -> hash
    void reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> reclaimValue
    void reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> reclaimKey
    boolean isLiveForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> isLiveForTesting
    com.google.common.collect.MapMakerInternalMap$Segment segmentFor(int) -> segmentFor
    com.google.common.collect.MapMakerInternalMap$Segment createSegment(int,int) -> createSegment
    java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> getLiveValue
    com.google.common.collect.MapMakerInternalMap$Segment[] newSegmentArray(int) -> newSegmentArray
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> valueStrength
    com.google.common.base.Equivalence valueEquivalence() -> valueEquivalence
    boolean isEmpty() -> isEmpty
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry(java.lang.Object) -> getEntry
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.util.ArrayList toArrayList(java.util.Collection) -> toArrayList
    java.lang.Object writeReplace() -> writeReplace
    java.util.ArrayList access$900(java.util.Collection) -> access$900
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$1 -> com.google.common.collect.MapMakerInternalMap$1:
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$DummyInternalEntry getEntry() -> getEntry
    void clear() -> clear
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$DummyInternalEntry) -> copyFor
    com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copyFor
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry() -> getEntry
com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy -> com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength -> valueStrength
    com.google.common.base.Equivalence keyEquivalence -> keyEquivalence
    com.google.common.base.Equivalence valueEquivalence -> valueEquivalence
    int concurrencyLevel -> concurrencyLevel
    java.util.concurrent.ConcurrentMap delegate -> delegate
    void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap) -> <init>
    java.util.concurrent.ConcurrentMap delegate() -> delegate
    void writeMapTo(java.io.ObjectOutputStream) -> writeMapTo
    com.google.common.collect.MapMaker readMapMaker(java.io.ObjectInputStream) -> readMapMaker
    void readEntries(java.io.ObjectInputStream) -> readEntries
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry -> com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry:
    java.lang.Object key -> key
    int hash -> hash
    com.google.common.collect.MapMakerInternalMap$InternalEntry next -> next
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> <init>
    java.lang.Object getKey() -> getKey
    int getHash() -> getHash
    com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> getNext
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry -> com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry:
    int hash -> hash
    com.google.common.collect.MapMakerInternalMap$InternalEntry next -> next
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> <init>
    java.lang.Object getKey() -> getKey
    int getHash() -> getHash
    com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> getNext
com.google.common.collect.MapMakerInternalMap$CleanupMapTask -> com.google.common.collect.MapMakerInternalMap$CleanupMapTask:
    java.lang.ref.WeakReference mapReference -> mapReference
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    void run() -> run
com.google.common.collect.MapMakerInternalMap$DummyInternalEntry -> com.google.common.collect.MapMakerInternalMap$DummyInternalEntry:
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$DummyInternalEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> getNext
com.google.common.collect.MapMakerInternalMap$EntryIterator -> com.google.common.collect.MapMakerInternalMap$EntryIterator:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$EntrySet -> com.google.common.collect.MapMakerInternalMap$EntrySet:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$HashIterator -> com.google.common.collect.MapMakerInternalMap$HashIterator:
    int nextSegmentIndex -> nextSegmentIndex
    int nextTableIndex -> nextTableIndex
    com.google.common.collect.MapMakerInternalMap$Segment currentSegment -> currentSegment
    java.util.concurrent.atomic.AtomicReferenceArray currentTable -> currentTable
    com.google.common.collect.MapMakerInternalMap$InternalEntry nextEntry -> nextEntry
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextExternal -> nextExternal
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry lastReturned -> lastReturned
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.lang.Object next() -> next
    void advance() -> advance
    boolean nextInChain() -> nextInChain
    boolean nextInTable() -> nextInTable
    boolean advanceTo(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> advanceTo
    boolean hasNext() -> hasNext
    com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry() -> nextEntry
    void remove() -> remove
com.google.common.collect.MapMakerInternalMap$InternalEntry -> com.google.common.collect.MapMakerInternalMap$InternalEntry:
    com.google.common.collect.MapMakerInternalMap$InternalEntry getNext() -> getNext
    int getHash() -> getHash
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.MapMakerInternalMap$InternalEntryHelper -> com.google.common.collect.MapMakerInternalMap$InternalEntryHelper:
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> valueStrength
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copy
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> setValue
com.google.common.collect.MapMakerInternalMap$KeyIterator -> com.google.common.collect.MapMakerInternalMap$KeyIterator:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$KeySet -> com.google.common.collect.MapMakerInternalMap$KeySet:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.MapMakerInternalMap$SafeToArraySet -> com.google.common.collect.MapMakerInternalMap$SafeToArraySet:
    void <init>() -> <init>
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void <init>(com.google.common.collect.MapMakerInternalMap$1) -> <init>
com.google.common.collect.MapMakerInternalMap$Segment -> com.google.common.collect.MapMakerInternalMap$Segment:
    com.google.common.collect.MapMakerInternalMap map -> map
    int count -> count
    int modCount -> modCount
    int threshold -> threshold
    java.util.concurrent.atomic.AtomicReferenceArray table -> table
    int maxSegmentSize -> maxSegmentSize
    java.util.concurrent.atomic.AtomicInteger readCount -> readCount
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$Segment self() -> self
    void maybeDrainReferenceQueues() -> maybeDrainReferenceQueues
    void maybeClearReferenceQueues() -> maybeClearReferenceQueues
    void setValue(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$InternalEntry copyEntry(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copyEntry
    java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int) -> newEntryArray
    void initTable(java.util.concurrent.atomic.AtomicReferenceArray) -> initTable
    com.google.common.collect.MapMakerInternalMap$InternalEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    java.lang.ref.ReferenceQueue getKeyReferenceQueueForTesting() -> getKeyReferenceQueueForTesting
    java.lang.ref.ReferenceQueue getValueReferenceQueueForTesting() -> getValueReferenceQueueForTesting
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> getWeakValueReferenceForTesting
    com.google.common.collect.MapMakerInternalMap$WeakValueReference newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> newWeakValueReferenceForTesting
    void setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> setWeakValueReferenceForTesting
    void setTableEntryForTesting(int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> setTableEntryForTesting
    com.google.common.collect.MapMakerInternalMap$InternalEntry copyForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copyForTesting
    void setValueForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> setValueForTesting
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntryForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> newEntryForTesting
    boolean removeTableEntryForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> removeTableEntryForTesting
    com.google.common.collect.MapMakerInternalMap$InternalEntry removeFromChainForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> removeFromChainForTesting
    java.lang.Object getLiveValueForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> getLiveValueForTesting
    void tryDrainReferenceQueues() -> tryDrainReferenceQueues
    void drainKeyReferenceQueue(java.lang.ref.ReferenceQueue) -> drainKeyReferenceQueue
    void drainValueReferenceQueue(java.lang.ref.ReferenceQueue) -> drainValueReferenceQueue
    void clearReferenceQueue(java.lang.ref.ReferenceQueue) -> clearReferenceQueue
    com.google.common.collect.MapMakerInternalMap$InternalEntry getFirst(int) -> getFirst
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry(java.lang.Object,int) -> getEntry
    com.google.common.collect.MapMakerInternalMap$InternalEntry getLiveEntry(java.lang.Object,int) -> getLiveEntry
    java.lang.Object get(java.lang.Object,int) -> get
    boolean containsKey(java.lang.Object,int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean) -> put
    void expand() -> expand
    boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,int,java.lang.Object) -> replace
    java.lang.Object remove(java.lang.Object,int) -> remove
    boolean remove(java.lang.Object,int,java.lang.Object) -> remove
    void clear() -> clear
    com.google.common.collect.MapMakerInternalMap$InternalEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> removeFromChain
    boolean reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry,int) -> reclaimKey
    boolean reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> reclaimValue
    boolean clearValueForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> clearValueForTesting
    boolean removeEntryForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> removeEntryForTesting
    boolean isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> isCollected
    java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> getLiveValue
    void postReadCleanup() -> postReadCleanup
    void preWriteCleanup() -> preWriteCleanup
    void runCleanup() -> runCleanup
    void runLockedCleanup() -> runLockedCleanup
com.google.common.collect.MapMakerInternalMap$SerializationProxy -> com.google.common.collect.MapMakerInternalMap$SerializationProxy:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.MapMakerInternalMap$Strength -> com.google.common.collect.MapMakerInternalMap$Strength:
    com.google.common.collect.MapMakerInternalMap$Strength STRONG -> STRONG
    com.google.common.collect.MapMakerInternalMap$Strength WEAK -> WEAK
    com.google.common.collect.MapMakerInternalMap$Strength[] $VALUES -> $VALUES
    com.google.common.collect.MapMakerInternalMap$Strength[] values() -> values
    com.google.common.collect.MapMakerInternalMap$Strength valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
    void <init>(java.lang.String,int,com.google.common.collect.MapMakerInternalMap$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$Strength$1 -> com.google.common.collect.MapMakerInternalMap$Strength$1:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.collect.MapMakerInternalMap$Strength$2 -> com.google.common.collect.MapMakerInternalMap$Strength$2:
    void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Equivalence defaultEquivalence() -> defaultEquivalence
com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry -> com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry:
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry) -> <init>
    com.google.common.collect.MapMaker$Dummy getValue() -> getValue
    void setValue(com.google.common.collect.MapMaker$Dummy) -> setValue
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry) -> copy
    java.lang.Object getValue() -> getValue
com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper -> com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper instance() -> instance
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> valueStrength
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry) -> copy
    void setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMaker$Dummy) -> setValue
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry) -> newEntry
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copy
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment -> com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment self() -> self
    com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$InternalEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$Segment self() -> self
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry -> com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry:
    java.lang.Object value -> value
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> <init>
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> copy
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper -> com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper instance() -> instance
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> valueStrength
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> copy
    void setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry) -> newEntry
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copy
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment -> com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment self() -> self
    com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$InternalEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$Segment self() -> self
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry -> com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference -> valueReference
    void <init>(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> <init>
    java.lang.Object getValue() -> getValue
    void clearValue() -> clearValue
    void setValue(java.lang.Object,java.lang.ref.ReferenceQueue) -> setValue
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> copy
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference() -> getValueReference
    com.google.common.collect.MapMakerInternalMap$WeakValueReference access$600(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> access$600
    com.google.common.collect.MapMakerInternalMap$WeakValueReference access$602(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> access$602
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper -> com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper instance() -> instance
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> valueStrength
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> copy
    void setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry) -> newEntry
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copy
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment -> com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:
    java.lang.ref.ReferenceQueue queueForValues -> queueForValues
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment self() -> self
    java.lang.ref.ReferenceQueue getValueReferenceQueueForTesting() -> getValueReferenceQueueForTesting
    com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> getWeakValueReferenceForTesting
    com.google.common.collect.MapMakerInternalMap$WeakValueReference newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> newWeakValueReferenceForTesting
    void setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> setWeakValueReferenceForTesting
    void maybeDrainReferenceQueues() -> maybeDrainReferenceQueues
    void maybeClearReferenceQueues() -> maybeClearReferenceQueues
    com.google.common.collect.MapMakerInternalMap$InternalEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$Segment self() -> self
    java.lang.ref.ReferenceQueue access$100(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment) -> access$100
com.google.common.collect.MapMakerInternalMap$StrongValueEntry -> com.google.common.collect.MapMakerInternalMap$StrongValueEntry:
com.google.common.collect.MapMakerInternalMap$ValueIterator -> com.google.common.collect.MapMakerInternalMap$ValueIterator:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.lang.Object next() -> next
com.google.common.collect.MapMakerInternalMap$Values -> com.google.common.collect.MapMakerInternalMap$Values:
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry -> com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry:
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry) -> <init>
    com.google.common.collect.MapMaker$Dummy getValue() -> getValue
    void setValue(com.google.common.collect.MapMaker$Dummy) -> setValue
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry) -> copy
    java.lang.Object getValue() -> getValue
com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper -> com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper instance() -> instance
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> valueStrength
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry) -> copy
    void setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMaker$Dummy) -> setValue
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry) -> newEntry
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copy
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment -> com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:
    java.lang.ref.ReferenceQueue queueForKeys -> queueForKeys
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment self() -> self
    java.lang.ref.ReferenceQueue getKeyReferenceQueueForTesting() -> getKeyReferenceQueueForTesting
    com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    void maybeDrainReferenceQueues() -> maybeDrainReferenceQueues
    void maybeClearReferenceQueues() -> maybeClearReferenceQueues
    com.google.common.collect.MapMakerInternalMap$InternalEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$Segment self() -> self
    java.lang.ref.ReferenceQueue access$200(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment) -> access$200
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry -> com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry:
    java.lang.Object value -> value
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> <init>
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> copy
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper -> com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper instance() -> instance
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> valueStrength
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> copy
    void setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry) -> newEntry
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copy
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment -> com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:
    java.lang.ref.ReferenceQueue queueForKeys -> queueForKeys
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment self() -> self
    java.lang.ref.ReferenceQueue getKeyReferenceQueueForTesting() -> getKeyReferenceQueueForTesting
    com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    void maybeDrainReferenceQueues() -> maybeDrainReferenceQueues
    void maybeClearReferenceQueues() -> maybeClearReferenceQueues
    com.google.common.collect.MapMakerInternalMap$InternalEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$Segment self() -> self
    java.lang.ref.ReferenceQueue access$300(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment) -> access$300
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry -> com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference -> valueReference
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> <init>
    java.lang.Object getValue() -> getValue
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> copy
    void clearValue() -> clearValue
    void setValue(java.lang.Object,java.lang.ref.ReferenceQueue) -> setValue
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference() -> getValueReference
    com.google.common.collect.MapMakerInternalMap$WeakValueReference access$700(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> access$700
    com.google.common.collect.MapMakerInternalMap$WeakValueReference access$702(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> access$702
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper -> com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper instance() -> instance
    com.google.common.collect.MapMakerInternalMap$Strength keyStrength() -> keyStrength
    com.google.common.collect.MapMakerInternalMap$Strength valueStrength() -> valueStrength
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> copy
    void setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry) -> newEntry
    void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> setValue
    com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copy
    com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> newEntry
    com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int) -> newSegment
    void <clinit>() -> <clinit>
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment -> com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:
    java.lang.ref.ReferenceQueue queueForKeys -> queueForKeys
    java.lang.ref.ReferenceQueue queueForValues -> queueForValues
    void <init>(com.google.common.collect.MapMakerInternalMap,int,int) -> <init>
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment self() -> self
    java.lang.ref.ReferenceQueue getKeyReferenceQueueForTesting() -> getKeyReferenceQueueForTesting
    java.lang.ref.ReferenceQueue getValueReferenceQueueForTesting() -> getValueReferenceQueueForTesting
    com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> getWeakValueReferenceForTesting
    com.google.common.collect.MapMakerInternalMap$WeakValueReference newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object) -> newWeakValueReferenceForTesting
    void setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference) -> setWeakValueReferenceForTesting
    void maybeDrainReferenceQueues() -> maybeDrainReferenceQueues
    void maybeClearReferenceQueues() -> maybeClearReferenceQueues
    com.google.common.collect.MapMakerInternalMap$InternalEntry castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry) -> castForTesting
    com.google.common.collect.MapMakerInternalMap$Segment self() -> self
    java.lang.ref.ReferenceQueue access$400(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment) -> access$400
    java.lang.ref.ReferenceQueue access$500(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment) -> access$500
com.google.common.collect.MapMakerInternalMap$WeakValueEntry -> com.google.common.collect.MapMakerInternalMap$WeakValueEntry:
    com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference() -> getValueReference
    void clearValue() -> clearValue
com.google.common.collect.MapMakerInternalMap$WeakValueReference -> com.google.common.collect.MapMakerInternalMap$WeakValueReference:
    java.lang.Object get() -> get
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry() -> getEntry
    void clear() -> clear
    com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copyFor
com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl -> com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl:
    com.google.common.collect.MapMakerInternalMap$InternalEntry entry -> entry
    void <init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> <init>
    com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry() -> getEntry
    com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry) -> copyFor
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry -> com.google.common.collect.MapMakerInternalMap$WriteThroughEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    com.google.common.collect.MapMakerInternalMap this$0 -> this$0
    void <init>(com.google.common.collect.MapMakerInternalMap,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.Maps -> com.google.common.collect.Maps:
    void <init>() -> <init>
    com.google.common.base.Function keyFunction() -> keyFunction
    com.google.common.base.Function valueFunction() -> valueFunction
    java.util.Iterator keyIterator(java.util.Iterator) -> keyIterator
    java.util.Iterator valueIterator(java.util.Iterator) -> valueIterator
    com.google.common.collect.ImmutableMap immutableEnumMap(java.util.Map) -> immutableEnumMap
    java.util.stream.Collector toImmutableEnumMap(java.util.function.Function,java.util.function.Function) -> toImmutableEnumMap
    java.util.stream.Collector toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator) -> toImmutableEnumMap
    java.util.HashMap newHashMap() -> newHashMap
    java.util.HashMap newHashMap(java.util.Map) -> newHashMap
    java.util.HashMap newHashMapWithExpectedSize(int) -> newHashMapWithExpectedSize
    int capacity(int) -> capacity
    java.util.LinkedHashMap newLinkedHashMap() -> newLinkedHashMap
    java.util.LinkedHashMap newLinkedHashMap(java.util.Map) -> newLinkedHashMap
    java.util.LinkedHashMap newLinkedHashMapWithExpectedSize(int) -> newLinkedHashMapWithExpectedSize
    java.util.concurrent.ConcurrentMap newConcurrentMap() -> newConcurrentMap
    java.util.TreeMap newTreeMap() -> newTreeMap
    java.util.TreeMap newTreeMap(java.util.SortedMap) -> newTreeMap
    java.util.TreeMap newTreeMap(java.util.Comparator) -> newTreeMap
    java.util.EnumMap newEnumMap(java.lang.Class) -> newEnumMap
    java.util.EnumMap newEnumMap(java.util.Map) -> newEnumMap
    java.util.IdentityHashMap newIdentityHashMap() -> newIdentityHashMap
    com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map) -> difference
    com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence) -> difference
    com.google.common.collect.SortedMapDifference difference(java.util.SortedMap,java.util.Map) -> difference
    void doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> doDifference
    java.util.Map unmodifiableMap(java.util.Map) -> unmodifiableMap
    java.util.Comparator orNaturalOrder(java.util.Comparator) -> orNaturalOrder
    java.util.Map asMap(java.util.Set,com.google.common.base.Function) -> asMap
    java.util.SortedMap asMap(java.util.SortedSet,com.google.common.base.Function) -> asMap
    java.util.NavigableMap asMap(java.util.NavigableSet,com.google.common.base.Function) -> asMap
    java.util.Iterator asMapEntryIterator(java.util.Set,com.google.common.base.Function) -> asMapEntryIterator
    java.util.Set removeOnlySet(java.util.Set) -> removeOnlySet
    java.util.SortedSet removeOnlySortedSet(java.util.SortedSet) -> removeOnlySortedSet
    java.util.NavigableSet removeOnlyNavigableSet(java.util.NavigableSet) -> removeOnlyNavigableSet
    com.google.common.collect.ImmutableMap toMap(java.lang.Iterable,com.google.common.base.Function) -> toMap
    com.google.common.collect.ImmutableMap toMap(java.util.Iterator,com.google.common.base.Function) -> toMap
    com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable,com.google.common.base.Function) -> uniqueIndex
    com.google.common.collect.ImmutableMap uniqueIndex(java.util.Iterator,com.google.common.base.Function) -> uniqueIndex
    com.google.common.collect.ImmutableMap fromProperties(java.util.Properties) -> fromProperties
    java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object) -> immutableEntry
    java.util.Set unmodifiableEntrySet(java.util.Set) -> unmodifiableEntrySet
    java.util.Map$Entry unmodifiableEntry(java.util.Map$Entry) -> unmodifiableEntry
    com.google.common.collect.UnmodifiableIterator unmodifiableEntryIterator(java.util.Iterator) -> unmodifiableEntryIterator
    com.google.common.base.Converter asConverter(com.google.common.collect.BiMap) -> asConverter
    com.google.common.collect.BiMap synchronizedBiMap(com.google.common.collect.BiMap) -> synchronizedBiMap
    com.google.common.collect.BiMap unmodifiableBiMap(com.google.common.collect.BiMap) -> unmodifiableBiMap
    java.util.Map transformValues(java.util.Map,com.google.common.base.Function) -> transformValues
    java.util.SortedMap transformValues(java.util.SortedMap,com.google.common.base.Function) -> transformValues
    java.util.NavigableMap transformValues(java.util.NavigableMap,com.google.common.base.Function) -> transformValues
    java.util.Map transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    java.util.SortedMap transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    java.util.NavigableMap transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    com.google.common.collect.Maps$EntryTransformer asEntryTransformer(com.google.common.base.Function) -> asEntryTransformer
    com.google.common.base.Function asValueToValueFunction(com.google.common.collect.Maps$EntryTransformer,java.lang.Object) -> asValueToValueFunction
    com.google.common.base.Function asEntryToValueFunction(com.google.common.collect.Maps$EntryTransformer) -> asEntryToValueFunction
    java.util.Map$Entry transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry) -> transformEntry
    com.google.common.base.Function asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer) -> asEntryToEntryFunction
    com.google.common.base.Predicate keyPredicateOnEntries(com.google.common.base.Predicate) -> keyPredicateOnEntries
    com.google.common.base.Predicate valuePredicateOnEntries(com.google.common.base.Predicate) -> valuePredicateOnEntries
    java.util.Map filterKeys(java.util.Map,com.google.common.base.Predicate) -> filterKeys
    java.util.SortedMap filterKeys(java.util.SortedMap,com.google.common.base.Predicate) -> filterKeys
    java.util.NavigableMap filterKeys(java.util.NavigableMap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.BiMap filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterKeys
    java.util.Map filterValues(java.util.Map,com.google.common.base.Predicate) -> filterValues
    java.util.SortedMap filterValues(java.util.SortedMap,com.google.common.base.Predicate) -> filterValues
    java.util.NavigableMap filterValues(java.util.NavigableMap,com.google.common.base.Predicate) -> filterValues
    com.google.common.collect.BiMap filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterValues
    java.util.Map filterEntries(java.util.Map,com.google.common.base.Predicate) -> filterEntries
    java.util.SortedMap filterEntries(java.util.SortedMap,com.google.common.base.Predicate) -> filterEntries
    java.util.NavigableMap filterEntries(java.util.NavigableMap,com.google.common.base.Predicate) -> filterEntries
    com.google.common.collect.BiMap filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> filterEntries
    java.util.Map filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate) -> filterFiltered
    java.util.SortedMap filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate) -> filterFiltered
    java.util.NavigableMap filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate) -> filterFiltered
    com.google.common.collect.BiMap filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate) -> filterFiltered
    java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap) -> unmodifiableNavigableMap
    java.util.Map$Entry unmodifiableOrNull(java.util.Map$Entry) -> unmodifiableOrNull
    java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap) -> synchronizedNavigableMap
    java.lang.Object safeGet(java.util.Map,java.lang.Object) -> safeGet
    boolean safeContainsKey(java.util.Map,java.lang.Object) -> safeContainsKey
    java.lang.Object safeRemove(java.util.Map,java.lang.Object) -> safeRemove
    boolean containsKeyImpl(java.util.Map,java.lang.Object) -> containsKeyImpl
    boolean containsValueImpl(java.util.Map,java.lang.Object) -> containsValueImpl
    boolean containsEntryImpl(java.util.Collection,java.lang.Object) -> containsEntryImpl
    boolean removeEntryImpl(java.util.Collection,java.lang.Object) -> removeEntryImpl
    boolean equalsImpl(java.util.Map,java.lang.Object) -> equalsImpl
    java.lang.String toStringImpl(java.util.Map) -> toStringImpl
    void putAllImpl(java.util.Map,java.util.Map) -> putAllImpl
    java.lang.Object keyOrNull(java.util.Map$Entry) -> keyOrNull
    java.lang.Object valueOrNull(java.util.Map$Entry) -> valueOrNull
    com.google.common.collect.ImmutableMap indexMap(java.util.Collection) -> indexMap
    java.util.NavigableMap subMap(java.util.NavigableMap,com.google.common.collect.Range) -> subMap
    void lambda$toImmutableEnumMap$4(java.util.function.Function,java.util.function.Function,com.google.common.collect.Maps$Accumulator,java.lang.Object) -> lambda$toImmutableEnumMap$4
    com.google.common.collect.Maps$Accumulator lambda$toImmutableEnumMap$3(java.util.function.BinaryOperator) -> lambda$toImmutableEnumMap$3
    void lambda$toImmutableEnumMap$2(java.util.function.Function,java.util.function.Function,com.google.common.collect.Maps$Accumulator,java.lang.Object) -> lambda$toImmutableEnumMap$2
    com.google.common.collect.Maps$Accumulator lambda$toImmutableEnumMap$1() -> lambda$toImmutableEnumMap$1
    java.lang.Object lambda$null$0(java.lang.Object,java.lang.Object) -> lambda$null$0
    java.util.Map access$100(java.util.Map) -> access$100
    java.util.Set access$200(java.util.Set) -> access$200
    java.util.SortedSet access$300(java.util.SortedSet) -> access$300
    java.util.NavigableSet access$400(java.util.NavigableSet) -> access$400
    java.util.Map$Entry access$800(java.util.Map$Entry) -> access$800
com.google.common.collect.Maps$1 -> com.google.common.collect.Maps$1:
    void <init>(java.util.Iterator) -> <init>
    java.lang.Object transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Maps$10 -> com.google.common.collect.Maps$10:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    java.lang.Object val$key -> val$key
    void <init>(com.google.common.collect.Maps$EntryTransformer,java.lang.Object) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$11 -> com.google.common.collect.Maps$11:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    void <init>(com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.lang.Object apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$12 -> com.google.common.collect.Maps$12:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    void <init>(java.util.Map$Entry,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.Maps$13 -> com.google.common.collect.Maps$13:
    com.google.common.collect.Maps$EntryTransformer val$transformer -> val$transformer
    void <init>(com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.Map$Entry apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$2 -> com.google.common.collect.Maps$2:
    void <init>(java.util.Iterator) -> <init>
    java.lang.Object transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Maps$3 -> com.google.common.collect.Maps$3:
    com.google.common.base.Function val$function -> val$function
    void <init>(java.util.Iterator,com.google.common.base.Function) -> <init>
    java.util.Map$Entry transform(java.lang.Object) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Maps$4 -> com.google.common.collect.Maps$4:
    java.util.Set val$set -> val$set
    void <init>(java.util.Set) -> <init>
    java.util.Set delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$5 -> com.google.common.collect.Maps$5:
    java.util.SortedSet val$set -> val$set
    void <init>(java.util.SortedSet) -> <init>
    java.util.SortedSet delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$6 -> com.google.common.collect.Maps$6:
    java.util.NavigableSet val$set -> val$set
    void <init>(java.util.NavigableSet) -> <init>
    java.util.NavigableSet delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$7 -> com.google.common.collect.Maps$7:
    java.util.Map$Entry val$entry -> val$entry
    void <init>(java.util.Map$Entry) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.Maps$8 -> com.google.common.collect.Maps$8:
    java.util.Iterator val$entryIterator -> val$entryIterator
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    java.lang.Object next() -> next
com.google.common.collect.Maps$9 -> com.google.common.collect.Maps$9:
    com.google.common.base.Function val$function -> val$function
    void <init>(com.google.common.base.Function) -> <init>
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Maps$AbstractFilteredMap -> com.google.common.collect.Maps$AbstractFilteredMap:
    java.util.Map unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(java.util.Map,com.google.common.base.Predicate) -> <init>
    boolean apply(java.lang.Object,java.lang.Object) -> apply
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Collection createValues() -> createValues
com.google.common.collect.Maps$Accumulator -> com.google.common.collect.Maps$Accumulator:
    java.util.function.BinaryOperator mergeFunction -> mergeFunction
    java.util.EnumMap map -> map
    void <init>(java.util.function.BinaryOperator) -> <init>
    void put(java.lang.Enum,java.lang.Object) -> put
    com.google.common.collect.Maps$Accumulator combine(com.google.common.collect.Maps$Accumulator) -> combine
    com.google.common.collect.ImmutableMap toImmutableMap() -> toImmutableMap
com.google.common.collect.Maps$AsMapView -> com.google.common.collect.Maps$AsMapView:
    java.util.Set set -> set
    com.google.common.base.Function function -> function
    java.util.Set backingSet() -> backingSet
    void <init>(java.util.Set,com.google.common.base.Function) -> <init>
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection createValues() -> createValues
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Set createEntrySet() -> createEntrySet
    void forEach(java.util.function.BiConsumer) -> forEach
    void lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object) -> lambda$forEach$0
com.google.common.collect.Maps$AsMapView$1EntrySetImpl -> com.google.common.collect.Maps$AsMapView$1EntrySetImpl:
    com.google.common.collect.Maps$AsMapView this$0 -> this$0
    void <init>(com.google.common.collect.Maps$AsMapView) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$BiMapConverter -> com.google.common.collect.Maps$BiMapConverter:
    com.google.common.collect.BiMap bimap -> bimap
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.BiMap) -> <init>
    java.lang.Object doForward(java.lang.Object) -> doForward
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object convert(com.google.common.collect.BiMap,java.lang.Object) -> convert
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Maps$DescendingMap -> com.google.common.collect.Maps$DescendingMap:
    java.util.Comparator comparator -> comparator
    java.util.Set entrySet -> entrySet
    java.util.NavigableSet navigableKeySet -> navigableKeySet
    void <init>() -> <init>
    java.util.NavigableMap forward() -> forward
    java.util.Map delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Ordering reverse(java.util.Comparator) -> reverse
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Set entrySet() -> entrySet
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set keySet() -> keySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Collection values() -> values
    java.lang.String toString() -> toString
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$DescendingMap$1EntrySetImpl -> com.google.common.collect.Maps$DescendingMap$1EntrySetImpl:
    com.google.common.collect.Maps$DescendingMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$DescendingMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Maps$EntryFunction -> com.google.common.collect.Maps$EntryFunction:
    com.google.common.collect.Maps$EntryFunction KEY -> KEY
    com.google.common.collect.Maps$EntryFunction VALUE -> VALUE
    com.google.common.collect.Maps$EntryFunction[] $VALUES -> $VALUES
    com.google.common.collect.Maps$EntryFunction[] values() -> values
    com.google.common.collect.Maps$EntryFunction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,com.google.common.collect.Maps$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.Maps$EntryFunction$1 -> com.google.common.collect.Maps$EntryFunction$1:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$EntryFunction$2 -> com.google.common.collect.Maps$EntryFunction$2:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Maps$EntrySet -> com.google.common.collect.Maps$EntrySet:
    void <init>() -> <init>
    java.util.Map map() -> map
    int size() -> size
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Maps$EntryTransformer -> com.google.common.collect.Maps$EntryTransformer:
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Maps$FilteredEntryBiMap -> com.google.common.collect.Maps$FilteredEntryBiMap:
    com.google.common.collect.BiMap inverse -> inverse
    com.google.common.base.Predicate inversePredicate(com.google.common.base.Predicate) -> inversePredicate
    void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate) -> <init>
    void <init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap) -> <init>
    com.google.common.collect.BiMap unfiltered() -> unfiltered
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
    java.util.Collection values() -> values
    java.lang.Object lambda$replaceAll$0(java.util.function.BiFunction,java.lang.Object,java.lang.Object) -> lambda$replaceAll$0
com.google.common.collect.Maps$FilteredEntryBiMap$1 -> com.google.common.collect.Maps$FilteredEntryBiMap$1:
    com.google.common.base.Predicate val$forwardPredicate -> val$forwardPredicate
    void <init>(com.google.common.base.Predicate) -> <init>
    boolean apply(java.util.Map$Entry) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.Maps$FilteredEntryMap -> com.google.common.collect.Maps$FilteredEntryMap:
    java.util.Set filteredEntrySet -> filteredEntrySet
    void <init>(java.util.Map,com.google.common.base.Predicate) -> <init>
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set createKeySet() -> createKeySet
    boolean removeAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection) -> removeAllKeys
    boolean retainAllKeys(java.util.Map,com.google.common.base.Predicate,java.util.Collection) -> retainAllKeys
com.google.common.collect.Maps$FilteredEntryMap$EntrySet -> com.google.common.collect.Maps$FilteredEntryMap$EntrySet:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$FilteredEntryMap) -> <init>
    java.util.Set delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.collect.Maps$FilteredEntryMap,com.google.common.collect.Maps$1) -> <init>
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 -> com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1:
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet this$1 -> this$1
    void <init>(com.google.common.collect.Maps$FilteredEntryMap$EntrySet,java.util.Iterator) -> <init>
    java.util.Map$Entry transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1 -> com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1 this$2 -> this$2
    void <init>(com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1,java.util.Map$Entry) -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$FilteredEntryMap$KeySet -> com.google.common.collect.Maps$FilteredEntryMap$KeySet:
    com.google.common.collect.Maps$FilteredEntryMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$FilteredEntryMap) -> <init>
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Maps$FilteredEntryNavigableMap -> com.google.common.collect.Maps$FilteredEntryNavigableMap:
    java.util.NavigableMap unfiltered -> unfiltered
    com.google.common.base.Predicate entryPredicate -> entryPredicate
    java.util.Map filteredDelegate -> filteredDelegate
    void <init>(java.util.NavigableMap,com.google.common.base.Predicate) -> <init>
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Collection values() -> values
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set entrySet() -> entrySet
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    com.google.common.base.Predicate access$500(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> access$500
    java.util.NavigableMap access$600(com.google.common.collect.Maps$FilteredEntryNavigableMap) -> access$600
com.google.common.collect.Maps$FilteredEntryNavigableMap$1 -> com.google.common.collect.Maps$FilteredEntryNavigableMap$1:
    com.google.common.collect.Maps$FilteredEntryNavigableMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$FilteredEntryNavigableMap,java.util.NavigableMap) -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Maps$FilteredEntrySortedMap -> com.google.common.collect.Maps$FilteredEntrySortedMap:
    void <init>(java.util.SortedMap,com.google.common.base.Predicate) -> <init>
    java.util.SortedMap sortedMap() -> sortedMap
    java.util.SortedSet keySet() -> keySet
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Set createKeySet() -> createKeySet
    java.util.Set keySet() -> keySet
com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet -> com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:
    com.google.common.collect.Maps$FilteredEntrySortedMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$FilteredEntrySortedMap) -> <init>
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
com.google.common.collect.Maps$FilteredKeyMap -> com.google.common.collect.Maps$FilteredKeyMap:
    com.google.common.base.Predicate keyPredicate -> keyPredicate
    void <init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate) -> <init>
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set createKeySet() -> createKeySet
    boolean containsKey(java.lang.Object) -> containsKey
com.google.common.collect.Maps$FilteredMapValues -> com.google.common.collect.Maps$FilteredMapValues:
    java.util.Map unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(java.util.Map,java.util.Map,com.google.common.base.Predicate) -> <init>
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
com.google.common.collect.Maps$IteratorBasedAbstractMap -> com.google.common.collect.Maps$IteratorBasedAbstractMap:
    void <init>() -> <init>
    int size() -> size
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    java.util.Set entrySet() -> entrySet
    void forEachEntry(java.util.function.Consumer) -> forEachEntry
    void clear() -> clear
com.google.common.collect.Maps$IteratorBasedAbstractMap$1 -> com.google.common.collect.Maps$IteratorBasedAbstractMap$1:
    com.google.common.collect.Maps$IteratorBasedAbstractMap this$0 -> this$0
    void <init>(com.google.common.collect.Maps$IteratorBasedAbstractMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
com.google.common.collect.Maps$KeySet -> com.google.common.collect.Maps$KeySet:
    java.util.Map map -> map
    void <init>(java.util.Map) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    void lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object) -> lambda$forEach$0
com.google.common.collect.Maps$MapDifferenceImpl -> com.google.common.collect.Maps$MapDifferenceImpl:
    java.util.Map onlyOnLeft -> onlyOnLeft
    java.util.Map onlyOnRight -> onlyOnRight
    java.util.Map onBoth -> onBoth
    java.util.Map differences -> differences
    void <init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> <init>
    boolean areEqual() -> areEqual
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesDiffering() -> entriesDiffering
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Maps$NavigableAsMapView -> com.google.common.collect.Maps$NavigableAsMapView:
    java.util.NavigableSet set -> set
    com.google.common.base.Function function -> function
    void <init>(java.util.NavigableSet,com.google.common.base.Function) -> <init>
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Comparator comparator() -> comparator
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    void clear() -> clear
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    int size() -> size
    java.util.NavigableMap descendingMap() -> descendingMap
    void lambda$forEach$1(java.util.function.BiConsumer,java.lang.Object) -> lambda$forEach$1
    java.util.Map$Entry lambda$entrySpliterator$0(java.lang.Object) -> lambda$entrySpliterator$0
com.google.common.collect.Maps$NavigableKeySet -> com.google.common.collect.Maps$NavigableKeySet:
    void <init>(java.util.NavigableMap) -> <init>
    java.util.NavigableMap map() -> map
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedMap map() -> map
    java.util.Map map() -> map
com.google.common.collect.Maps$SortedAsMapView -> com.google.common.collect.Maps$SortedAsMapView:
    void <init>(java.util.SortedSet,com.google.common.base.Function) -> <init>
    java.util.SortedSet backingSet() -> backingSet
    java.util.Comparator comparator() -> comparator
    java.util.Set keySet() -> keySet
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.Set backingSet() -> backingSet
com.google.common.collect.Maps$SortedKeySet -> com.google.common.collect.Maps$SortedKeySet:
    void <init>(java.util.SortedMap) -> <init>
    java.util.SortedMap map() -> map
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.Map map() -> map
com.google.common.collect.Maps$SortedMapDifferenceImpl -> com.google.common.collect.Maps$SortedMapDifferenceImpl:
    void <init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap) -> <init>
    java.util.SortedMap entriesDiffering() -> entriesDiffering
    java.util.SortedMap entriesInCommon() -> entriesInCommon
    java.util.SortedMap entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.SortedMap entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesDiffering() -> entriesDiffering
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
com.google.common.collect.Maps$TransformedEntriesMap -> com.google.common.collect.Maps$TransformedEntriesMap:
    java.util.Map fromMap -> fromMap
    com.google.common.collect.Maps$EntryTransformer transformer -> transformer
    void <init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer) -> <init>
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Collection values() -> values
    void lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> lambda$forEach$0
com.google.common.collect.Maps$TransformedEntriesNavigableMap -> com.google.common.collect.Maps$TransformedEntriesNavigableMap:
    void <init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.NavigableMap headMap(java.lang.Object) -> headMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.NavigableMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Map$Entry transformEntry(java.util.Map$Entry) -> transformEntry
    java.util.NavigableMap fromMap() -> fromMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap fromMap() -> fromMap
com.google.common.collect.Maps$TransformedEntriesSortedMap -> com.google.common.collect.Maps$TransformedEntriesSortedMap:
    java.util.SortedMap fromMap() -> fromMap
    void <init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
com.google.common.collect.Maps$UnmodifiableBiMap -> com.google.common.collect.Maps$UnmodifiableBiMap:
    java.util.Map unmodifiableMap -> unmodifiableMap
    com.google.common.collect.BiMap delegate -> delegate
    com.google.common.collect.BiMap inverse -> inverse
    java.util.Set values -> values
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap) -> <init>
    java.util.Map delegate() -> delegate
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Set values() -> values
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$UnmodifiableEntries -> com.google.common.collect.Maps$UnmodifiableEntries:
    java.util.Collection entries -> entries
    void <init>(java.util.Collection) -> <init>
    java.util.Collection delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$UnmodifiableEntrySet -> com.google.common.collect.Maps$UnmodifiableEntrySet:
    void <init>(java.util.Set) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Maps$UnmodifiableNavigableMap -> com.google.common.collect.Maps$UnmodifiableNavigableMap:
    java.util.NavigableMap delegate -> delegate
    com.google.common.collect.Maps$UnmodifiableNavigableMap descendingMap -> descendingMap
    void <init>(java.util.NavigableMap) -> <init>
    void <init>(java.util.NavigableMap,com.google.common.collect.Maps$UnmodifiableNavigableMap) -> <init>
    java.util.SortedMap delegate() -> delegate
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Set keySet() -> keySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Maps$ValueDifferenceImpl -> com.google.common.collect.Maps$ValueDifferenceImpl:
    java.lang.Object left -> left
    java.lang.Object right -> right
    com.google.common.collect.MapDifference$ValueDifference create(java.lang.Object,java.lang.Object) -> create
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object leftValue() -> leftValue
    java.lang.Object rightValue() -> rightValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Maps$Values -> com.google.common.collect.Maps$Values:
    java.util.Map map -> map
    void <init>(java.util.Map) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void clear() -> clear
    void lambda$forEach$0(java.util.function.Consumer,java.lang.Object,java.lang.Object) -> lambda$forEach$0
com.google.common.collect.Maps$ViewCachingAbstractMap -> com.google.common.collect.Maps$ViewCachingAbstractMap:
    java.util.Set entrySet -> entrySet
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    void <init>() -> <init>
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection values() -> values
    java.util.Collection createValues() -> createValues
com.google.common.collect.MinMaxPriorityQueue -> com.google.common.collect.MinMaxPriorityQueue:
    com.google.common.collect.MinMaxPriorityQueue$Heap minHeap -> minHeap
    com.google.common.collect.MinMaxPriorityQueue$Heap maxHeap -> maxHeap
    int maximumSize -> maximumSize
    java.lang.Object[] queue -> queue
    int size -> size
    int modCount -> modCount
    int EVEN_POWERS_OF_TWO -> EVEN_POWERS_OF_TWO
    int ODD_POWERS_OF_TWO -> ODD_POWERS_OF_TWO
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    com.google.common.collect.MinMaxPriorityQueue create() -> create
    com.google.common.collect.MinMaxPriorityQueue create(java.lang.Iterable) -> create
    com.google.common.collect.MinMaxPriorityQueue$Builder orderedBy(java.util.Comparator) -> orderedBy
    com.google.common.collect.MinMaxPriorityQueue$Builder expectedSize(int) -> expectedSize
    com.google.common.collect.MinMaxPriorityQueue$Builder maximumSize(int) -> maximumSize
    void <init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int) -> <init>
    int size() -> size
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object elementData(int) -> elementData
    java.lang.Object peek() -> peek
    int getMaxElementIndex() -> getMaxElementIndex
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object removeFirst() -> removeFirst
    java.lang.Object peekFirst() -> peekFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object removeLast() -> removeLast
    java.lang.Object peekLast() -> peekLast
    com.google.common.collect.MinMaxPriorityQueue$MoveDesc removeAt(int) -> removeAt
    com.google.common.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object) -> fillHole
    java.lang.Object removeAndGet(int) -> removeAndGet
    com.google.common.collect.MinMaxPriorityQueue$Heap heapForIndex(int) -> heapForIndex
    boolean isEvenLevel(int) -> isEvenLevel
    boolean isIntact() -> isIntact
    java.util.Iterator iterator() -> iterator
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.util.Comparator comparator() -> comparator
    int capacity() -> capacity
    int initialQueueSize(int,int,java.lang.Iterable) -> initialQueueSize
    void growIfNeeded() -> growIfNeeded
    int calculateNewCapacity() -> calculateNewCapacity
    int capAtMaximumSize(int,int) -> capAtMaximumSize
    void <init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int,com.google.common.collect.MinMaxPriorityQueue$1) -> <init>
    java.lang.Object[] access$500(com.google.common.collect.MinMaxPriorityQueue) -> access$500
    int access$600(com.google.common.collect.MinMaxPriorityQueue) -> access$600
    int access$700(com.google.common.collect.MinMaxPriorityQueue) -> access$700
com.google.common.collect.MinMaxPriorityQueue$1 -> com.google.common.collect.MinMaxPriorityQueue$1:
com.google.common.collect.MinMaxPriorityQueue$Builder -> com.google.common.collect.MinMaxPriorityQueue$Builder:
    int UNSET_EXPECTED_SIZE -> UNSET_EXPECTED_SIZE
    java.util.Comparator comparator -> comparator
    int expectedSize -> expectedSize
    int maximumSize -> maximumSize
    void <init>(java.util.Comparator) -> <init>
    com.google.common.collect.MinMaxPriorityQueue$Builder expectedSize(int) -> expectedSize
    com.google.common.collect.MinMaxPriorityQueue$Builder maximumSize(int) -> maximumSize
    com.google.common.collect.MinMaxPriorityQueue create() -> create
    com.google.common.collect.MinMaxPriorityQueue create(java.lang.Iterable) -> create
    com.google.common.collect.Ordering ordering() -> ordering
    void <init>(java.util.Comparator,com.google.common.collect.MinMaxPriorityQueue$1) -> <init>
    com.google.common.collect.Ordering access$200(com.google.common.collect.MinMaxPriorityQueue$Builder) -> access$200
    int access$300(com.google.common.collect.MinMaxPriorityQueue$Builder) -> access$300
com.google.common.collect.MinMaxPriorityQueue$Heap -> com.google.common.collect.MinMaxPriorityQueue$Heap:
    com.google.common.collect.Ordering ordering -> ordering
    com.google.common.collect.MinMaxPriorityQueue$Heap otherHeap -> otherHeap
    com.google.common.collect.MinMaxPriorityQueue this$0 -> this$0
    void <init>(com.google.common.collect.MinMaxPriorityQueue,com.google.common.collect.Ordering) -> <init>
    int compareElements(int,int) -> compareElements
    com.google.common.collect.MinMaxPriorityQueue$MoveDesc tryCrossOverAndBubbleUp(int,int,java.lang.Object) -> tryCrossOverAndBubbleUp
    void bubbleUp(int,java.lang.Object) -> bubbleUp
    int bubbleUpAlternatingLevels(int,java.lang.Object) -> bubbleUpAlternatingLevels
    int findMin(int,int) -> findMin
    int findMinChild(int) -> findMinChild
    int findMinGrandChild(int) -> findMinGrandChild
    int crossOverUp(int,java.lang.Object) -> crossOverUp
    int swapWithConceptuallyLastElement(java.lang.Object) -> swapWithConceptuallyLastElement
    int crossOver(int,java.lang.Object) -> crossOver
    int fillHoleAt(int) -> fillHoleAt
    boolean verifyIndex(int) -> verifyIndex
    int getLeftChildIndex(int) -> getLeftChildIndex
    int getRightChildIndex(int) -> getRightChildIndex
    int getParentIndex(int) -> getParentIndex
    int getGrandparentIndex(int) -> getGrandparentIndex
    boolean access$400(com.google.common.collect.MinMaxPriorityQueue$Heap,int) -> access$400
com.google.common.collect.MinMaxPriorityQueue$MoveDesc -> com.google.common.collect.MinMaxPriorityQueue$MoveDesc:
    java.lang.Object toTrickle -> toTrickle
    java.lang.Object replaced -> replaced
    void <init>(java.lang.Object,java.lang.Object) -> <init>
com.google.common.collect.MinMaxPriorityQueue$QueueIterator -> com.google.common.collect.MinMaxPriorityQueue$QueueIterator:
    int cursor -> cursor
    int nextCursor -> nextCursor
    int expectedModCount -> expectedModCount
    java.util.Queue forgetMeNot -> forgetMeNot
    java.util.List skipMe -> skipMe
    java.lang.Object lastFromForgetMeNot -> lastFromForgetMeNot
    boolean canRemove -> canRemove
    com.google.common.collect.MinMaxPriorityQueue this$0 -> this$0
    void <init>(com.google.common.collect.MinMaxPriorityQueue) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    boolean foundAndRemovedExactReference(java.lang.Iterable,java.lang.Object) -> foundAndRemovedExactReference
    boolean removeExact(java.lang.Object) -> removeExact
    void checkModCount() -> checkModCount
    void nextNotInSkipMe(int) -> nextNotInSkipMe
    void <init>(com.google.common.collect.MinMaxPriorityQueue,com.google.common.collect.MinMaxPriorityQueue$1) -> <init>
com.google.common.collect.MoreCollectors -> com.google.common.collect.MoreCollectors:
    java.util.stream.Collector TO_OPTIONAL -> TO_OPTIONAL
    java.lang.Object NULL_PLACEHOLDER -> NULL_PLACEHOLDER
    java.util.stream.Collector ONLY_ELEMENT -> ONLY_ELEMENT
    java.util.stream.Collector toOptional() -> toOptional
    java.util.stream.Collector onlyElement() -> onlyElement
    void <init>() -> <init>
    java.lang.Object lambda$static$1(com.google.common.collect.MoreCollectors$ToOptionalState) -> lambda$static$1
    void lambda$static$0(com.google.common.collect.MoreCollectors$ToOptionalState,java.lang.Object) -> lambda$static$0
    void <clinit>() -> <clinit>
com.google.common.collect.MoreCollectors$ToOptionalState -> com.google.common.collect.MoreCollectors$ToOptionalState:
    int MAX_EXTRAS -> MAX_EXTRAS
    java.lang.Object element -> element
    java.util.List extras -> extras
    void <init>() -> <init>
    java.lang.IllegalArgumentException multiples(boolean) -> multiples
    void add(java.lang.Object) -> add
    com.google.common.collect.MoreCollectors$ToOptionalState combine(com.google.common.collect.MoreCollectors$ToOptionalState) -> combine
    java.util.Optional getOptional() -> getOptional
    java.lang.Object getElement() -> getElement
com.google.common.collect.Multimap -> com.google.common.collect.Multimap:
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    com.google.common.collect.Multiset keys() -> keys
    java.util.Collection values() -> values
    java.util.Collection entries() -> entries
    void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void lambda$forEach$0(java.util.function.BiConsumer,java.util.Map$Entry) -> lambda$forEach$0
com.google.common.collect.MultimapBuilder -> com.google.common.collect.MultimapBuilder:
    int DEFAULT_EXPECTED_KEYS -> DEFAULT_EXPECTED_KEYS
    void <init>() -> <init>
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys hashKeys() -> hashKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys hashKeys(int) -> hashKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys linkedHashKeys() -> linkedHashKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys linkedHashKeys(int) -> linkedHashKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys treeKeys() -> treeKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys treeKeys(java.util.Comparator) -> treeKeys
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys enumKeys(java.lang.Class) -> enumKeys
    com.google.common.collect.Multimap build() -> build
    com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    void <init>(com.google.common.collect.MultimapBuilder$1) -> <init>
com.google.common.collect.MultimapBuilder$1 -> com.google.common.collect.MultimapBuilder$1:
    int val$expectedKeys -> val$expectedKeys
    void <init>(int) -> <init>
    java.util.Map createMap() -> createMap
com.google.common.collect.MultimapBuilder$2 -> com.google.common.collect.MultimapBuilder$2:
    int val$expectedKeys -> val$expectedKeys
    void <init>(int) -> <init>
    java.util.Map createMap() -> createMap
com.google.common.collect.MultimapBuilder$3 -> com.google.common.collect.MultimapBuilder$3:
    java.util.Comparator val$comparator -> val$comparator
    void <init>(java.util.Comparator) -> <init>
    java.util.Map createMap() -> createMap
com.google.common.collect.MultimapBuilder$4 -> com.google.common.collect.MultimapBuilder$4:
    java.lang.Class val$keyClass -> val$keyClass
    void <init>(java.lang.Class) -> <init>
    java.util.Map createMap() -> createMap
com.google.common.collect.MultimapBuilder$ArrayListSupplier -> com.google.common.collect.MultimapBuilder$ArrayListSupplier:
    int expectedValuesPerKey -> expectedValuesPerKey
    void <init>(int) -> <init>
    java.util.List get() -> get
    java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$EnumSetSupplier -> com.google.common.collect.MultimapBuilder$EnumSetSupplier:
    java.lang.Class clazz -> clazz
    void <init>(java.lang.Class) -> <init>
    java.util.Set get() -> get
    java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$HashSetSupplier -> com.google.common.collect.MultimapBuilder$HashSetSupplier:
    int expectedValuesPerKey -> expectedValuesPerKey
    void <init>(int) -> <init>
    java.util.Set get() -> get
    java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier -> com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:
    int expectedValuesPerKey -> expectedValuesPerKey
    void <init>(int) -> <init>
    java.util.Set get() -> get
    java.lang.Object get() -> get
com.google.common.collect.MultimapBuilder$LinkedListSupplier -> com.google.common.collect.MultimapBuilder$LinkedListSupplier:
    com.google.common.collect.MultimapBuilder$LinkedListSupplier INSTANCE -> INSTANCE
    com.google.common.collect.MultimapBuilder$LinkedListSupplier[] $VALUES -> $VALUES
    com.google.common.collect.MultimapBuilder$LinkedListSupplier[] values() -> values
    com.google.common.collect.MultimapBuilder$LinkedListSupplier valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.common.base.Supplier instance() -> instance
    java.util.List get() -> get
    java.lang.Object get() -> get
    void <clinit>() -> <clinit>
com.google.common.collect.MultimapBuilder$ListMultimapBuilder -> com.google.common.collect.MultimapBuilder$ListMultimapBuilder:
    void <init>() -> <init>
    com.google.common.collect.ListMultimap build() -> build
    com.google.common.collect.ListMultimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:
    int DEFAULT_EXPECTED_VALUES_PER_KEY -> DEFAULT_EXPECTED_VALUES_PER_KEY
    void <init>() -> <init>
    java.util.Map createMap() -> createMap
    com.google.common.collect.MultimapBuilder$ListMultimapBuilder arrayListValues() -> arrayListValues
    com.google.common.collect.MultimapBuilder$ListMultimapBuilder arrayListValues(int) -> arrayListValues
    com.google.common.collect.MultimapBuilder$ListMultimapBuilder linkedListValues() -> linkedListValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder hashSetValues() -> hashSetValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder hashSetValues(int) -> hashSetValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder linkedHashSetValues() -> linkedHashSetValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder linkedHashSetValues(int) -> linkedHashSetValues
    com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder treeSetValues() -> treeSetValues
    com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder treeSetValues(java.util.Comparator) -> treeSetValues
    com.google.common.collect.MultimapBuilder$SetMultimapBuilder enumSetValues(java.lang.Class) -> enumSetValues
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1:
    int val$expectedValuesPerKey -> val$expectedValuesPerKey
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,int) -> <init>
    com.google.common.collect.ListMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2:
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys) -> <init>
    com.google.common.collect.ListMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3:
    int val$expectedValuesPerKey -> val$expectedValuesPerKey
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,int) -> <init>
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4:
    int val$expectedValuesPerKey -> val$expectedValuesPerKey
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,int) -> <init>
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5:
    java.util.Comparator val$comparator -> val$comparator
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,java.util.Comparator) -> <init>
    com.google.common.collect.SortedSetMultimap build() -> build
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6 -> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6:
    java.lang.Class val$valueClass -> val$valueClass
    com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys this$0 -> this$0
    void <init>(com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys,java.lang.Class) -> <init>
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$SetMultimapBuilder -> com.google.common.collect.MultimapBuilder$SetMultimapBuilder:
    void <init>() -> <init>
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.SetMultimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder -> com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:
    void <init>() -> <init>
    com.google.common.collect.SortedSetMultimap build() -> build
    com.google.common.collect.SortedSetMultimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.SetMultimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.SetMultimap build() -> build
    com.google.common.collect.Multimap build(com.google.common.collect.Multimap) -> build
    com.google.common.collect.Multimap build() -> build
com.google.common.collect.MultimapBuilder$TreeSetSupplier -> com.google.common.collect.MultimapBuilder$TreeSetSupplier:
    java.util.Comparator comparator -> comparator
    void <init>(java.util.Comparator) -> <init>
    java.util.SortedSet get() -> get
    java.lang.Object get() -> get
com.google.common.collect.Multimaps -> com.google.common.collect.Multimaps:
    void <init>() -> <init>
    java.util.stream.Collector toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier) -> toMultimap
    java.util.stream.Collector flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier) -> flatteningToMultimap
    com.google.common.collect.Multimap newMultimap(java.util.Map,com.google.common.base.Supplier) -> newMultimap
    com.google.common.collect.ListMultimap newListMultimap(java.util.Map,com.google.common.base.Supplier) -> newListMultimap
    com.google.common.collect.SetMultimap newSetMultimap(java.util.Map,com.google.common.base.Supplier) -> newSetMultimap
    com.google.common.collect.SortedSetMultimap newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier) -> newSortedSetMultimap
    com.google.common.collect.Multimap invertFrom(com.google.common.collect.Multimap,com.google.common.collect.Multimap) -> invertFrom
    com.google.common.collect.Multimap synchronizedMultimap(com.google.common.collect.Multimap) -> synchronizedMultimap
    com.google.common.collect.Multimap unmodifiableMultimap(com.google.common.collect.Multimap) -> unmodifiableMultimap
    com.google.common.collect.Multimap unmodifiableMultimap(com.google.common.collect.ImmutableMultimap) -> unmodifiableMultimap
    com.google.common.collect.SetMultimap synchronizedSetMultimap(com.google.common.collect.SetMultimap) -> synchronizedSetMultimap
    com.google.common.collect.SetMultimap unmodifiableSetMultimap(com.google.common.collect.SetMultimap) -> unmodifiableSetMultimap
    com.google.common.collect.SetMultimap unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap) -> unmodifiableSetMultimap
    com.google.common.collect.SortedSetMultimap synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap) -> synchronizedSortedSetMultimap
    com.google.common.collect.SortedSetMultimap unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap) -> unmodifiableSortedSetMultimap
    com.google.common.collect.ListMultimap synchronizedListMultimap(com.google.common.collect.ListMultimap) -> synchronizedListMultimap
    com.google.common.collect.ListMultimap unmodifiableListMultimap(com.google.common.collect.ListMultimap) -> unmodifiableListMultimap
    com.google.common.collect.ListMultimap unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap) -> unmodifiableListMultimap
    java.util.Collection unmodifiableValueCollection(java.util.Collection) -> unmodifiableValueCollection
    java.util.Collection unmodifiableEntries(java.util.Collection) -> unmodifiableEntries
    java.util.Map asMap(com.google.common.collect.ListMultimap) -> asMap
    java.util.Map asMap(com.google.common.collect.SetMultimap) -> asMap
    java.util.Map asMap(com.google.common.collect.SortedSetMultimap) -> asMap
    java.util.Map asMap(com.google.common.collect.Multimap) -> asMap
    com.google.common.collect.SetMultimap forMap(java.util.Map) -> forMap
    com.google.common.collect.Multimap transformValues(com.google.common.collect.Multimap,com.google.common.base.Function) -> transformValues
    com.google.common.collect.ListMultimap transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function) -> transformValues
    com.google.common.collect.Multimap transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    com.google.common.collect.ListMultimap transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer) -> transformEntries
    com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function) -> index
    com.google.common.collect.ImmutableListMultimap index(java.util.Iterator,com.google.common.base.Function) -> index
    com.google.common.collect.Multimap filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.SetMultimap filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.ListMultimap filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate) -> filterKeys
    com.google.common.collect.Multimap filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterValues
    com.google.common.collect.SetMultimap filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterValues
    com.google.common.collect.Multimap filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate) -> filterEntries
    com.google.common.collect.SetMultimap filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate) -> filterEntries
    com.google.common.collect.Multimap filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate) -> filterFiltered
    com.google.common.collect.SetMultimap filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate) -> filterFiltered
    boolean equalsImpl(com.google.common.collect.Multimap,java.lang.Object) -> equalsImpl
    com.google.common.collect.Multimap lambda$flatteningToMultimap$3(com.google.common.collect.Multimap,com.google.common.collect.Multimap) -> lambda$flatteningToMultimap$3
    void lambda$flatteningToMultimap$2(java.util.function.Function,java.util.function.Function,com.google.common.collect.Multimap,java.lang.Object) -> lambda$flatteningToMultimap$2
    com.google.common.collect.Multimap lambda$toMultimap$1(com.google.common.collect.Multimap,com.google.common.collect.Multimap) -> lambda$toMultimap$1
    void lambda$toMultimap$0(java.util.function.Function,java.util.function.Function,com.google.common.collect.Multimap,java.lang.Object) -> lambda$toMultimap$0
    java.util.Collection access$000(java.util.Collection) -> access$000
    java.util.Collection access$100(java.util.Collection) -> access$100
com.google.common.collect.Multimaps$AsMap -> com.google.common.collect.Multimaps$AsMap:
    com.google.common.collect.Multimap multimap -> multimap
    void <init>(com.google.common.collect.Multimap) -> <init>
    int size() -> size
    java.util.Set createEntrySet() -> createEntrySet
    void removeValuesForKey(java.lang.Object) -> removeValuesForKey
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection remove(java.lang.Object) -> remove
    java.util.Set keySet() -> keySet
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.Multimap access$200(com.google.common.collect.Multimaps$AsMap) -> access$200
com.google.common.collect.Multimaps$AsMap$EntrySet -> com.google.common.collect.Multimaps$AsMap$EntrySet:
    com.google.common.collect.Multimaps$AsMap this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$AsMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.Multimaps$AsMap$EntrySet$1 -> com.google.common.collect.Multimaps$AsMap$EntrySet$1:
    com.google.common.collect.Multimaps$AsMap$EntrySet this$1 -> this$1
    void <init>(com.google.common.collect.Multimaps$AsMap$EntrySet) -> <init>
    java.util.Collection apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Multimaps$CustomListMultimap -> com.google.common.collect.Multimaps$CustomListMultimap:
    com.google.common.base.Supplier factory -> factory
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    java.util.Set createKeySet() -> createKeySet
    java.util.Map createAsMap() -> createAsMap
    java.util.List createCollection() -> createCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.Multimaps$CustomMultimap -> com.google.common.collect.Multimaps$CustomMultimap:
    com.google.common.base.Supplier factory -> factory
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    java.util.Set createKeySet() -> createKeySet
    java.util.Map createAsMap() -> createAsMap
    java.util.Collection createCollection() -> createCollection
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> wrapCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.collect.Multimaps$CustomSetMultimap -> com.google.common.collect.Multimaps$CustomSetMultimap:
    com.google.common.base.Supplier factory -> factory
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    java.util.Set createKeySet() -> createKeySet
    java.util.Map createAsMap() -> createAsMap
    java.util.Set createCollection() -> createCollection
    java.util.Collection unmodifiableCollectionSubclass(java.util.Collection) -> unmodifiableCollectionSubclass
    java.util.Collection wrapCollection(java.lang.Object,java.util.Collection) -> wrapCollection
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.Multimaps$CustomSortedSetMultimap -> com.google.common.collect.Multimaps$CustomSortedSetMultimap:
    com.google.common.base.Supplier factory -> factory
    java.util.Comparator valueComparator -> valueComparator
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    java.util.Set createKeySet() -> createKeySet
    java.util.Map createAsMap() -> createAsMap
    java.util.SortedSet createCollection() -> createCollection
    java.util.Comparator valueComparator() -> valueComparator
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.Set createCollection() -> createCollection
    java.util.Collection createCollection() -> createCollection
com.google.common.collect.Multimaps$Entries -> com.google.common.collect.Multimaps$Entries:
    void <init>() -> <init>
    com.google.common.collect.Multimap multimap() -> multimap
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.Multimaps$Keys -> com.google.common.collect.Multimaps$Keys:
    com.google.common.collect.Multimap multimap -> multimap
    void <init>(com.google.common.collect.Multimap) -> <init>
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    int distinctElements() -> distinctElements
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int count(java.lang.Object) -> count
    int remove(java.lang.Object,int) -> remove
    void clear() -> clear
    java.util.Set elementSet() -> elementSet
    java.util.Iterator elementIterator() -> elementIterator
    void lambda$forEach$0(java.util.function.Consumer,java.util.Map$Entry) -> lambda$forEach$0
com.google.common.collect.Multimaps$Keys$1 -> com.google.common.collect.Multimaps$Keys$1:
    com.google.common.collect.Multimaps$Keys this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$Keys,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Multimaps$Keys$1$1 -> com.google.common.collect.Multimaps$Keys$1$1:
    java.util.Map$Entry val$backingEntry -> val$backingEntry
    com.google.common.collect.Multimaps$Keys$1 this$1 -> this$1
    void <init>(com.google.common.collect.Multimaps$Keys$1,java.util.Map$Entry) -> <init>
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.Multimaps$MapMultimap -> com.google.common.collect.Multimaps$MapMultimap:
    java.util.Map map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    java.util.Set get(java.lang.Object) -> get
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Set removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection createValues() -> createValues
    java.util.Set entries() -> entries
    java.util.Collection createEntries() -> createEntries
    com.google.common.collect.Multiset createKeys() -> createKeys
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Map createAsMap() -> createAsMap
    int hashCode() -> hashCode
    java.util.Collection entries() -> entries
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
com.google.common.collect.Multimaps$MapMultimap$1 -> com.google.common.collect.Multimaps$MapMultimap$1:
    java.lang.Object val$key -> val$key
    com.google.common.collect.Multimaps$MapMultimap this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$MapMultimap,java.lang.Object) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.Multimaps$MapMultimap$1$1 -> com.google.common.collect.Multimaps$MapMultimap$1$1:
    int i -> i
    com.google.common.collect.Multimaps$MapMultimap$1 this$1 -> this$1
    void <init>(com.google.common.collect.Multimaps$MapMultimap$1) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Multimaps$TransformedEntriesListMultimap -> com.google.common.collect.Multimaps$TransformedEntriesListMultimap:
    void <init>(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.List transform(java.lang.Object,java.util.Collection) -> transform
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection transform(java.lang.Object,java.util.Collection) -> transform
com.google.common.collect.Multimaps$TransformedEntriesMultimap -> com.google.common.collect.Multimaps$TransformedEntriesMultimap:
    com.google.common.collect.Multimap fromMultimap -> fromMultimap
    com.google.common.collect.Maps$EntryTransformer transformer -> transformer
    void <init>(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer) -> <init>
    java.util.Collection transform(java.lang.Object,java.util.Collection) -> transform
    java.util.Map createAsMap() -> createAsMap
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Collection createEntries() -> createEntries
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection get(java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    java.util.Set createKeySet() -> createKeySet
    com.google.common.collect.Multiset createKeys() -> createKeys
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    int size() -> size
    java.util.Collection createValues() -> createValues
com.google.common.collect.Multimaps$TransformedEntriesMultimap$1 -> com.google.common.collect.Multimaps$TransformedEntriesMultimap$1:
    com.google.common.collect.Multimaps$TransformedEntriesMultimap this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$TransformedEntriesMultimap) -> <init>
    java.util.Collection transformEntry(java.lang.Object,java.util.Collection) -> transformEntry
    java.lang.Object transformEntry(java.lang.Object,java.lang.Object) -> transformEntry
com.google.common.collect.Multimaps$UnmodifiableListMultimap -> com.google.common.collect.Multimaps$UnmodifiableListMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ListMultimap) -> <init>
    com.google.common.collect.ListMultimap delegate() -> delegate
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableMultimap -> com.google.common.collect.Multimaps$UnmodifiableMultimap:
    com.google.common.collect.Multimap delegate -> delegate
    java.util.Collection entries -> entries
    com.google.common.collect.Multiset keys -> keys
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Map map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Multimap) -> <init>
    com.google.common.collect.Multimap delegate() -> delegate
    void clear() -> clear
    java.util.Map asMap() -> asMap
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multiset keys() -> keys
    java.util.Set keySet() -> keySet
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableMultimap$1 -> com.google.common.collect.Multimaps$UnmodifiableMultimap$1:
    com.google.common.collect.Multimaps$UnmodifiableMultimap this$0 -> this$0
    void <init>(com.google.common.collect.Multimaps$UnmodifiableMultimap) -> <init>
    java.util.Collection apply(java.util.Collection) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Multimaps$UnmodifiableSetMultimap -> com.google.common.collect.Multimaps$UnmodifiableSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SetMultimap) -> <init>
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Set get(java.lang.Object) -> get
    java.util.Set entries() -> entries
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection entries() -> entries
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap -> com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SortedSetMultimap) -> <init>
    com.google.common.collect.SortedSetMultimap delegate() -> delegate
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multiset -> com.google.common.collect.Multiset:
    int size() -> size
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    boolean add(java.lang.Object) -> add
    int remove(java.lang.Object,int) -> remove
    boolean remove(java.lang.Object) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void forEach(java.util.function.Consumer) -> forEach
    java.util.Spliterator spliterator() -> spliterator
    void lambda$forEach$1(java.util.function.Consumer,com.google.common.collect.Multiset$Entry) -> lambda$forEach$1
    void lambda$forEachEntry$0(java.util.function.ObjIntConsumer,com.google.common.collect.Multiset$Entry) -> lambda$forEachEntry$0
com.google.common.collect.Multiset$Entry -> com.google.common.collect.Multiset$Entry:
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Multisets -> com.google.common.collect.Multisets:
    void <init>() -> <init>
    java.util.stream.Collector toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier) -> toMultiset
    com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.Multiset) -> unmodifiableMultiset
    com.google.common.collect.Multiset unmodifiableMultiset(com.google.common.collect.ImmutableMultiset) -> unmodifiableMultiset
    com.google.common.collect.SortedMultiset unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset) -> unmodifiableSortedMultiset
    com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int) -> immutableEntry
    com.google.common.collect.Multiset filter(com.google.common.collect.Multiset,com.google.common.base.Predicate) -> filter
    int inferDistinctElements(java.lang.Iterable) -> inferDistinctElements
    com.google.common.collect.Multiset union(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> union
    com.google.common.collect.Multiset intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> intersection
    com.google.common.collect.Multiset sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> sum
    com.google.common.collect.Multiset difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> difference
    boolean containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> containsOccurrences
    boolean retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> retainOccurrences
    boolean retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> retainOccurrencesImpl
    boolean removeOccurrences(com.google.common.collect.Multiset,java.lang.Iterable) -> removeOccurrences
    boolean removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> removeOccurrences
    boolean equalsImpl(com.google.common.collect.Multiset,java.lang.Object) -> equalsImpl
    boolean addAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> addAllImpl
    boolean addAllImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> addAllImpl
    boolean removeAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> removeAllImpl
    boolean retainAllImpl(com.google.common.collect.Multiset,java.util.Collection) -> retainAllImpl
    int setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int) -> setCountImpl
    boolean setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int) -> setCountImpl
    java.util.Iterator elementIterator(java.util.Iterator) -> elementIterator
    java.util.Iterator iteratorImpl(com.google.common.collect.Multiset) -> iteratorImpl
    java.util.Spliterator spliteratorImpl(com.google.common.collect.Multiset) -> spliteratorImpl
    int linearTimeSizeImpl(com.google.common.collect.Multiset) -> linearTimeSizeImpl
    com.google.common.collect.Multiset cast(java.lang.Iterable) -> cast
    com.google.common.collect.ImmutableMultiset copyHighestCountFirst(com.google.common.collect.Multiset) -> copyHighestCountFirst
    java.util.Spliterator lambda$spliteratorImpl$2(com.google.common.collect.Multiset$Entry) -> lambda$spliteratorImpl$2
    com.google.common.collect.Multiset lambda$toMultiset$1(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> lambda$toMultiset$1
    void lambda$toMultiset$0(java.util.function.Function,java.util.function.ToIntFunction,com.google.common.collect.Multiset,java.lang.Object) -> lambda$toMultiset$0
com.google.common.collect.Multisets$1 -> com.google.common.collect.Multisets$1:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int count(java.lang.Object) -> count
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Iterator entryIterator() -> entryIterator
com.google.common.collect.Multisets$1$1 -> com.google.common.collect.Multisets$1$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    java.util.Iterator val$iterator2 -> val$iterator2
    com.google.common.collect.Multisets$1 this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$1,java.util.Iterator,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$2 -> com.google.common.collect.Multisets$2:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    int count(java.lang.Object) -> count
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Iterator entryIterator() -> entryIterator
com.google.common.collect.Multisets$2$1 -> com.google.common.collect.Multisets$2$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    com.google.common.collect.Multisets$2 this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$2,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$3 -> com.google.common.collect.Multisets$3:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    int size() -> size
    int count(java.lang.Object) -> count
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Iterator entryIterator() -> entryIterator
com.google.common.collect.Multisets$3$1 -> com.google.common.collect.Multisets$3$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    java.util.Iterator val$iterator2 -> val$iterator2
    com.google.common.collect.Multisets$3 this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$3,java.util.Iterator,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$4 -> com.google.common.collect.Multisets$4:
    com.google.common.collect.Multiset val$multiset1 -> val$multiset1
    com.google.common.collect.Multiset val$multiset2 -> val$multiset2
    void <init>(com.google.common.collect.Multiset,com.google.common.collect.Multiset) -> <init>
    int count(java.lang.Object) -> count
    void clear() -> clear
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Iterator entryIterator() -> entryIterator
    int distinctElements() -> distinctElements
com.google.common.collect.Multisets$4$1 -> com.google.common.collect.Multisets$4$1:
    java.util.Iterator val$iterator1 -> val$iterator1
    com.google.common.collect.Multisets$4 this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$4,java.util.Iterator) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$4$2 -> com.google.common.collect.Multisets$4$2:
    java.util.Iterator val$iterator1 -> val$iterator1
    com.google.common.collect.Multisets$4 this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$4,java.util.Iterator) -> <init>
    com.google.common.collect.Multiset$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Multisets$5 -> com.google.common.collect.Multisets$5:
    void <init>(java.util.Iterator) -> <init>
    java.lang.Object transform(com.google.common.collect.Multiset$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Multisets$AbstractEntry -> com.google.common.collect.Multisets$AbstractEntry:
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Multisets$DecreasingCount -> com.google.common.collect.Multisets$DecreasingCount:
    com.google.common.collect.Multisets$DecreasingCount INSTANCE -> INSTANCE
    void <init>() -> <init>
    int compare(com.google.common.collect.Multiset$Entry,com.google.common.collect.Multiset$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.collect.Multisets$ElementSet -> com.google.common.collect.Multisets$ElementSet:
    void <init>() -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    int size() -> size
com.google.common.collect.Multisets$EntrySet -> com.google.common.collect.Multisets$EntrySet:
    void <init>() -> <init>
    com.google.common.collect.Multiset multiset() -> multiset
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.common.collect.Multisets$FilteredMultiset -> com.google.common.collect.Multisets$FilteredMultiset:
    com.google.common.collect.Multiset unfiltered -> unfiltered
    com.google.common.base.Predicate predicate -> predicate
    void <init>(com.google.common.collect.Multiset,com.google.common.base.Predicate) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Set createElementSet() -> createElementSet
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Iterator entryIterator() -> entryIterator
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Multisets$FilteredMultiset$1 -> com.google.common.collect.Multisets$FilteredMultiset$1:
    com.google.common.collect.Multisets$FilteredMultiset this$0 -> this$0
    void <init>(com.google.common.collect.Multisets$FilteredMultiset) -> <init>
    boolean apply(com.google.common.collect.Multiset$Entry) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.collect.Multisets$ImmutableEntry -> com.google.common.collect.Multisets$ImmutableEntry:
    java.lang.Object element -> element
    int count -> count
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,int) -> <init>
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
    com.google.common.collect.Multisets$ImmutableEntry nextInBucket() -> nextInBucket
com.google.common.collect.Multisets$MultisetIteratorImpl -> com.google.common.collect.Multisets$MultisetIteratorImpl:
    com.google.common.collect.Multiset multiset -> multiset
    java.util.Iterator entryIterator -> entryIterator
    com.google.common.collect.Multiset$Entry currentEntry -> currentEntry
    int laterCount -> laterCount
    int totalCount -> totalCount
    boolean canRemove -> canRemove
    void <init>(com.google.common.collect.Multiset,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Multisets$UnmodifiableMultiset -> com.google.common.collect.Multisets$UnmodifiableMultiset:
    com.google.common.collect.Multiset delegate -> delegate
    java.util.Set elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Multiset) -> <init>
    com.google.common.collect.Multiset delegate() -> delegate
    java.util.Set createElementSet() -> createElementSet
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    java.util.Iterator iterator() -> iterator
    boolean add(java.lang.Object) -> add
    int add(java.lang.Object,int) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean remove(java.lang.Object) -> remove
    int remove(java.lang.Object,int) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Multisets$ViewMultiset -> com.google.common.collect.Multisets$ViewMultiset:
    void <init>() -> <init>
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
    int distinctElements() -> distinctElements
    void <init>(com.google.common.collect.Multisets$1) -> <init>
com.google.common.collect.MutableClassToInstanceMap -> com.google.common.collect.MutableClassToInstanceMap:
    java.util.Map delegate -> delegate
    com.google.common.collect.MutableClassToInstanceMap create() -> create
    com.google.common.collect.MutableClassToInstanceMap create(java.util.Map) -> create
    void <init>(java.util.Map) -> <init>
    java.util.Map delegate() -> delegate
    java.util.Map$Entry checkedEntry(java.util.Map$Entry) -> checkedEntry
    java.util.Set entrySet() -> entrySet
    java.lang.Object put(java.lang.Class,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object cast(java.lang.Class,java.lang.Object) -> cast
    java.lang.Object writeReplace() -> writeReplace
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object delegate() -> delegate
    java.lang.Object access$000(java.lang.Class,java.lang.Object) -> access$000
    java.util.Map$Entry access$100(java.util.Map$Entry) -> access$100
com.google.common.collect.MutableClassToInstanceMap$1 -> com.google.common.collect.MutableClassToInstanceMap$1:
    java.util.Map$Entry val$entry -> val$entry
    void <init>(java.util.Map$Entry) -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.MutableClassToInstanceMap$2 -> com.google.common.collect.MutableClassToInstanceMap$2:
    com.google.common.collect.MutableClassToInstanceMap this$0 -> this$0
    void <init>(com.google.common.collect.MutableClassToInstanceMap) -> <init>
    java.util.Set delegate() -> delegate
    java.util.Spliterator spliterator() -> spliterator
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.util.Map$Entry lambda$spliterator$0(java.util.Map$Entry) -> lambda$spliterator$0
com.google.common.collect.MutableClassToInstanceMap$2$1 -> com.google.common.collect.MutableClassToInstanceMap$2$1:
    com.google.common.collect.MutableClassToInstanceMap$2 this$1 -> this$1
    void <init>(com.google.common.collect.MutableClassToInstanceMap$2,java.util.Iterator) -> <init>
    java.util.Map$Entry transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.MutableClassToInstanceMap$SerializedForm -> com.google.common.collect.MutableClassToInstanceMap$SerializedForm:
    java.util.Map backingMap -> backingMap
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.NaturalOrdering -> com.google.common.collect.NaturalOrdering:
    com.google.common.collect.NaturalOrdering INSTANCE -> INSTANCE
    com.google.common.collect.Ordering nullsFirst -> nullsFirst
    com.google.common.collect.Ordering nullsLast -> nullsLast
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.collect.NullsFirstOrdering -> com.google.common.collect.NullsFirstOrdering:
    com.google.common.collect.Ordering ordering -> ordering
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.NullsLastOrdering -> com.google.common.collect.NullsLastOrdering:
    com.google.common.collect.Ordering ordering -> ordering
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.ObjectArrays -> com.google.common.collect.ObjectArrays:
    void <init>() -> <init>
    java.lang.Object[] newArray(java.lang.Class,int) -> newArray
    java.lang.Object[] newArray(java.lang.Object[],int) -> newArray
    java.lang.Object[] concat(java.lang.Object[],java.lang.Object[],java.lang.Class) -> concat
    java.lang.Object[] concat(java.lang.Object,java.lang.Object[]) -> concat
    java.lang.Object[] concat(java.lang.Object[],java.lang.Object) -> concat
    java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[]) -> toArrayImpl
    java.lang.Object[] toArrayImpl(java.lang.Object[],int,int,java.lang.Object[]) -> toArrayImpl
    java.lang.Object[] toArrayImpl(java.util.Collection) -> toArrayImpl
    java.lang.Object[] copyAsObjectArray(java.lang.Object[],int,int) -> copyAsObjectArray
    java.lang.Object[] fillArray(java.lang.Iterable,java.lang.Object[]) -> fillArray
    void swap(java.lang.Object[],int,int) -> swap
    java.lang.Object[] checkElementsNotNull(java.lang.Object[]) -> checkElementsNotNull
    java.lang.Object[] checkElementsNotNull(java.lang.Object[],int) -> checkElementsNotNull
    java.lang.Object checkElementNotNull(java.lang.Object,int) -> checkElementNotNull
com.google.common.collect.Ordering -> com.google.common.collect.Ordering:
    int LEFT_IS_GREATER -> LEFT_IS_GREATER
    int RIGHT_IS_GREATER -> RIGHT_IS_GREATER
    com.google.common.collect.Ordering natural() -> natural
    com.google.common.collect.Ordering from(java.util.Comparator) -> from
    com.google.common.collect.Ordering from(com.google.common.collect.Ordering) -> from
    com.google.common.collect.Ordering explicit(java.util.List) -> explicit
    com.google.common.collect.Ordering explicit(java.lang.Object,java.lang.Object[]) -> explicit
    com.google.common.collect.Ordering allEqual() -> allEqual
    com.google.common.collect.Ordering usingToString() -> usingToString
    com.google.common.collect.Ordering arbitrary() -> arbitrary
    void <init>() -> <init>
    com.google.common.collect.Ordering reverse() -> reverse
    com.google.common.collect.Ordering nullsFirst() -> nullsFirst
    com.google.common.collect.Ordering nullsLast() -> nullsLast
    com.google.common.collect.Ordering onResultOf(com.google.common.base.Function) -> onResultOf
    com.google.common.collect.Ordering onKeys() -> onKeys
    com.google.common.collect.Ordering compound(java.util.Comparator) -> compound
    com.google.common.collect.Ordering compound(java.lang.Iterable) -> compound
    com.google.common.collect.Ordering lexicographical() -> lexicographical
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.Object min(java.util.Iterator) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.util.List leastOf(java.lang.Iterable,int) -> leastOf
    java.util.List leastOf(java.util.Iterator,int) -> leastOf
    java.util.List greatestOf(java.lang.Iterable,int) -> greatestOf
    java.util.List greatestOf(java.util.Iterator,int) -> greatestOf
    java.util.List sortedCopy(java.lang.Iterable) -> sortedCopy
    com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable) -> immutableSortedCopy
    boolean isOrdered(java.lang.Iterable) -> isOrdered
    boolean isStrictlyOrdered(java.lang.Iterable) -> isStrictlyOrdered
    int binarySearch(java.util.List,java.lang.Object) -> binarySearch
com.google.common.collect.Ordering$ArbitraryOrdering -> com.google.common.collect.Ordering$ArbitraryOrdering:
    java.util.concurrent.atomic.AtomicInteger counter -> counter
    java.util.concurrent.ConcurrentMap uids -> uids
    void <init>() -> <init>
    java.lang.Integer getUid(java.lang.Object) -> getUid
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.String toString() -> toString
    int identityHashCode(java.lang.Object) -> identityHashCode
com.google.common.collect.Ordering$ArbitraryOrderingHolder -> com.google.common.collect.Ordering$ArbitraryOrderingHolder:
    com.google.common.collect.Ordering ARBITRARY_ORDERING -> ARBITRARY_ORDERING
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.Ordering$IncomparableValueException -> com.google.common.collect.Ordering$IncomparableValueException:
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object) -> <init>
com.google.common.collect.PeekingIterator -> com.google.common.collect.PeekingIterator:
    java.lang.Object peek() -> peek
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.Platform -> com.google.common.collect.Platform:
    java.util.Map newHashMapWithExpectedSize(int) -> newHashMapWithExpectedSize
    java.util.Map newLinkedHashMapWithExpectedSize(int) -> newLinkedHashMapWithExpectedSize
    java.util.Set newHashSetWithExpectedSize(int) -> newHashSetWithExpectedSize
    java.util.Set newLinkedHashSetWithExpectedSize(int) -> newLinkedHashSetWithExpectedSize
    java.util.Map preservesInsertionOrderOnPutsMap() -> preservesInsertionOrderOnPutsMap
    java.util.Set preservesInsertionOrderOnAddsSet() -> preservesInsertionOrderOnAddsSet
    java.lang.Object[] newArray(java.lang.Object[],int) -> newArray
    java.lang.Object[] copy(java.lang.Object[],int,int,java.lang.Object[]) -> copy
    com.google.common.collect.MapMaker tryWeakKeys(com.google.common.collect.MapMaker) -> tryWeakKeys
    int reduceIterationsIfGwt(int) -> reduceIterationsIfGwt
    int reduceExponentIfGwt(int) -> reduceExponentIfGwt
    void <init>() -> <init>
com.google.common.collect.Queues -> com.google.common.collect.Queues:
    void <init>() -> <init>
    java.util.concurrent.ArrayBlockingQueue newArrayBlockingQueue(int) -> newArrayBlockingQueue
    java.util.ArrayDeque newArrayDeque() -> newArrayDeque
    java.util.ArrayDeque newArrayDeque(java.lang.Iterable) -> newArrayDeque
    java.util.concurrent.ConcurrentLinkedQueue newConcurrentLinkedQueue() -> newConcurrentLinkedQueue
    java.util.concurrent.ConcurrentLinkedQueue newConcurrentLinkedQueue(java.lang.Iterable) -> newConcurrentLinkedQueue
    java.util.concurrent.LinkedBlockingDeque newLinkedBlockingDeque() -> newLinkedBlockingDeque
    java.util.concurrent.LinkedBlockingDeque newLinkedBlockingDeque(int) -> newLinkedBlockingDeque
    java.util.concurrent.LinkedBlockingDeque newLinkedBlockingDeque(java.lang.Iterable) -> newLinkedBlockingDeque
    java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue() -> newLinkedBlockingQueue
    java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue(int) -> newLinkedBlockingQueue
    java.util.concurrent.LinkedBlockingQueue newLinkedBlockingQueue(java.lang.Iterable) -> newLinkedBlockingQueue
    java.util.concurrent.PriorityBlockingQueue newPriorityBlockingQueue() -> newPriorityBlockingQueue
    java.util.concurrent.PriorityBlockingQueue newPriorityBlockingQueue(java.lang.Iterable) -> newPriorityBlockingQueue
    java.util.PriorityQueue newPriorityQueue() -> newPriorityQueue
    java.util.PriorityQueue newPriorityQueue(java.lang.Iterable) -> newPriorityQueue
    java.util.concurrent.SynchronousQueue newSynchronousQueue() -> newSynchronousQueue
    int drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit) -> drain
    int drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit) -> drainUninterruptibly
    java.util.Queue synchronizedQueue(java.util.Queue) -> synchronizedQueue
    java.util.Deque synchronizedDeque(java.util.Deque) -> synchronizedDeque
com.google.common.collect.Range -> com.google.common.collect.Range:
    com.google.common.collect.Range ALL -> ALL
    com.google.common.collect.Cut lowerBound -> lowerBound
    com.google.common.collect.Cut upperBound -> upperBound
    long serialVersionUID -> serialVersionUID
    com.google.common.base.Function lowerBoundFn() -> lowerBoundFn
    com.google.common.base.Function upperBoundFn() -> upperBoundFn
    com.google.common.collect.Ordering rangeLexOrdering() -> rangeLexOrdering
    com.google.common.collect.Range create(com.google.common.collect.Cut,com.google.common.collect.Cut) -> create
    com.google.common.collect.Range open(java.lang.Comparable,java.lang.Comparable) -> open
    com.google.common.collect.Range closed(java.lang.Comparable,java.lang.Comparable) -> closed
    com.google.common.collect.Range closedOpen(java.lang.Comparable,java.lang.Comparable) -> closedOpen
    com.google.common.collect.Range openClosed(java.lang.Comparable,java.lang.Comparable) -> openClosed
    com.google.common.collect.Range range(java.lang.Comparable,com.google.common.collect.BoundType,java.lang.Comparable,com.google.common.collect.BoundType) -> range
    com.google.common.collect.Range lessThan(java.lang.Comparable) -> lessThan
    com.google.common.collect.Range atMost(java.lang.Comparable) -> atMost
    com.google.common.collect.Range upTo(java.lang.Comparable,com.google.common.collect.BoundType) -> upTo
    com.google.common.collect.Range greaterThan(java.lang.Comparable) -> greaterThan
    com.google.common.collect.Range atLeast(java.lang.Comparable) -> atLeast
    com.google.common.collect.Range downTo(java.lang.Comparable,com.google.common.collect.BoundType) -> downTo
    com.google.common.collect.Range all() -> all
    com.google.common.collect.Range singleton(java.lang.Comparable) -> singleton
    com.google.common.collect.Range encloseAll(java.lang.Iterable) -> encloseAll
    void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut) -> <init>
    boolean hasLowerBound() -> hasLowerBound
    java.lang.Comparable lowerEndpoint() -> lowerEndpoint
    com.google.common.collect.BoundType lowerBoundType() -> lowerBoundType
    boolean hasUpperBound() -> hasUpperBound
    java.lang.Comparable upperEndpoint() -> upperEndpoint
    com.google.common.collect.BoundType upperBoundType() -> upperBoundType
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Comparable) -> contains
    boolean apply(java.lang.Comparable) -> apply
    boolean containsAll(java.lang.Iterable) -> containsAll
    boolean encloses(com.google.common.collect.Range) -> encloses
    boolean isConnected(com.google.common.collect.Range) -> isConnected
    com.google.common.collect.Range intersection(com.google.common.collect.Range) -> intersection
    com.google.common.collect.Range gap(com.google.common.collect.Range) -> gap
    com.google.common.collect.Range span(com.google.common.collect.Range) -> span
    com.google.common.collect.Range canonical(com.google.common.collect.DiscreteDomain) -> canonical
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String toString(com.google.common.collect.Cut,com.google.common.collect.Cut) -> toString
    java.util.SortedSet cast(java.lang.Iterable) -> cast
    java.lang.Object readResolve() -> readResolve
    int compareOrThrow(java.lang.Comparable,java.lang.Comparable) -> compareOrThrow
    boolean apply(java.lang.Object) -> apply
    void <clinit>() -> <clinit>
com.google.common.collect.Range$1 -> com.google.common.collect.Range$1:
    int[] $SwitchMap$com$google$common$collect$BoundType -> $SwitchMap$com$google$common$collect$BoundType
    void <clinit>() -> <clinit>
com.google.common.collect.Range$LowerBoundFn -> com.google.common.collect.Range$LowerBoundFn:
    com.google.common.collect.Range$LowerBoundFn INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.collect.Cut apply(com.google.common.collect.Range) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
    void <clinit>() -> <clinit>
com.google.common.collect.Range$RangeLexOrdering -> com.google.common.collect.Range$RangeLexOrdering:
    com.google.common.collect.Ordering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int compare(com.google.common.collect.Range,com.google.common.collect.Range) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.collect.Range$UpperBoundFn -> com.google.common.collect.Range$UpperBoundFn:
    com.google.common.collect.Range$UpperBoundFn INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.collect.Cut apply(com.google.common.collect.Range) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
    void <clinit>() -> <clinit>
com.google.common.collect.RangeGwtSerializationDependencies -> com.google.common.collect.RangeGwtSerializationDependencies:
    void <init>() -> <init>
com.google.common.collect.RangeMap -> com.google.common.collect.RangeMap:
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    com.google.common.collect.Range span() -> span
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    void remove(com.google.common.collect.Range) -> remove
    java.util.Map asMapOfRanges() -> asMapOfRanges
    java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.RangeSet -> com.google.common.collect.RangeSet:
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    boolean intersects(com.google.common.collect.Range) -> intersects
    boolean encloses(com.google.common.collect.Range) -> encloses
    boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    boolean enclosesAll(java.lang.Iterable) -> enclosesAll
    boolean isEmpty() -> isEmpty
    com.google.common.collect.Range span() -> span
    java.util.Set asRanges() -> asRanges
    java.util.Set asDescendingSetOfRanges() -> asDescendingSetOfRanges
    com.google.common.collect.RangeSet complement() -> complement
    com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    void clear() -> clear
    void addAll(com.google.common.collect.RangeSet) -> addAll
    void addAll(java.lang.Iterable) -> addAll
    void removeAll(com.google.common.collect.RangeSet) -> removeAll
    void removeAll(java.lang.Iterable) -> removeAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.RegularContiguousSet -> com.google.common.collect.RegularContiguousSet:
    com.google.common.collect.Range range -> range
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain) -> <init>
    com.google.common.collect.ContiguousSet intersectionInCurrentDomain(com.google.common.collect.Range) -> intersectionInCurrentDomain
    com.google.common.collect.ContiguousSet headSetImpl(java.lang.Comparable,boolean) -> headSetImpl
    com.google.common.collect.ContiguousSet subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean) -> subSetImpl
    com.google.common.collect.ContiguousSet tailSetImpl(java.lang.Comparable,boolean) -> tailSetImpl
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    boolean equalsOrThrow(java.lang.Comparable,java.lang.Comparable) -> equalsOrThrow
    boolean isPartialView() -> isPartialView
    java.lang.Comparable first() -> first
    java.lang.Comparable last() -> last
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    com.google.common.collect.ContiguousSet intersection(com.google.common.collect.ContiguousSet) -> intersection
    com.google.common.collect.Range range() -> range
    com.google.common.collect.Range range(com.google.common.collect.BoundType,com.google.common.collect.BoundType) -> range
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    java.lang.Object last() -> last
    java.lang.Object first() -> first
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
    boolean access$000(java.lang.Comparable,java.lang.Comparable) -> access$000
com.google.common.collect.RegularContiguousSet$1 -> com.google.common.collect.RegularContiguousSet$1:
    java.lang.Comparable last -> last
    com.google.common.collect.RegularContiguousSet this$0 -> this$0
    void <init>(com.google.common.collect.RegularContiguousSet,java.lang.Comparable) -> <init>
    java.lang.Comparable computeNext(java.lang.Comparable) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.RegularContiguousSet$2 -> com.google.common.collect.RegularContiguousSet$2:
    java.lang.Comparable first -> first
    com.google.common.collect.RegularContiguousSet this$0 -> this$0
    void <init>(com.google.common.collect.RegularContiguousSet,java.lang.Comparable) -> <init>
    java.lang.Comparable computeNext(java.lang.Comparable) -> computeNext
    java.lang.Object computeNext(java.lang.Object) -> computeNext
com.google.common.collect.RegularContiguousSet$3 -> com.google.common.collect.RegularContiguousSet$3:
    com.google.common.collect.RegularContiguousSet this$0 -> this$0
    void <init>(com.google.common.collect.RegularContiguousSet) -> <init>
    com.google.common.collect.ImmutableSortedSet delegateCollection() -> delegateCollection
    java.lang.Comparable get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.RegularContiguousSet$SerializedForm -> com.google.common.collect.RegularContiguousSet$SerializedForm:
    com.google.common.collect.Range range -> range
    com.google.common.collect.DiscreteDomain domain -> domain
    void <init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain) -> <init>
    java.lang.Object readResolve() -> readResolve
    void <init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain,com.google.common.collect.RegularContiguousSet$1) -> <init>
com.google.common.collect.RegularImmutableAsList -> com.google.common.collect.RegularImmutableAsList:
    com.google.common.collect.ImmutableCollection delegate -> delegate
    com.google.common.collect.ImmutableList delegateList -> delegateList
    void <init>(com.google.common.collect.ImmutableCollection,com.google.common.collect.ImmutableList) -> <init>
    void <init>(com.google.common.collect.ImmutableCollection,java.lang.Object[]) -> <init>
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    com.google.common.collect.ImmutableList delegateList() -> delegateList
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    void forEach(java.util.function.Consumer) -> forEach
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.lang.Object[] internalArray() -> internalArray
    int internalArrayStart() -> internalArrayStart
    int internalArrayEnd() -> internalArrayEnd
    java.lang.Object get(int) -> get
    java.util.ListIterator listIterator(int) -> listIterator
com.google.common.collect.RegularImmutableBiMap -> com.google.common.collect.RegularImmutableBiMap:
    com.google.common.collect.RegularImmutableBiMap EMPTY -> EMPTY
    double MAX_LOAD_FACTOR -> MAX_LOAD_FACTOR
    com.google.common.collect.ImmutableMapEntry[] keyTable -> keyTable
    com.google.common.collect.ImmutableMapEntry[] valueTable -> valueTable
    java.util.Map$Entry[] entries -> entries
    int mask -> mask
    int hashCode -> hashCode
    com.google.common.collect.ImmutableBiMap inverse -> inverse
    com.google.common.collect.ImmutableBiMap fromEntries(java.util.Map$Entry[]) -> fromEntries
    com.google.common.collect.ImmutableBiMap fromEntryArray(int,java.util.Map$Entry[]) -> fromEntryArray
    void <init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int) -> <init>
    int checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry) -> checkNoConflictInValueBucket
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    void forEach(java.util.function.BiConsumer) -> forEach
    boolean isHashCodeFast() -> isHashCodeFast
    int hashCode() -> hashCode
    boolean isPartialView() -> isPartialView
    int size() -> size
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    com.google.common.collect.BiMap inverse() -> inverse
    com.google.common.collect.ImmutableMapEntry[] access$100(com.google.common.collect.RegularImmutableBiMap) -> access$100
    int access$200(com.google.common.collect.RegularImmutableBiMap) -> access$200
    int access$300(com.google.common.collect.RegularImmutableBiMap) -> access$300
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableBiMap$1 -> com.google.common.collect.RegularImmutableBiMap$1:
com.google.common.collect.RegularImmutableBiMap$Inverse -> com.google.common.collect.RegularImmutableBiMap$Inverse:
    com.google.common.collect.RegularImmutableBiMap this$0 -> this$0
    void <init>(com.google.common.collect.RegularImmutableBiMap) -> <init>
    int size() -> size
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    void forEach(java.util.function.BiConsumer) -> forEach
    java.lang.Object get(java.lang.Object) -> get
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.collect.BiMap inverse() -> inverse
    void lambda$forEach$0(java.util.function.BiConsumer,java.lang.Object,java.lang.Object) -> lambda$forEach$0
    void <init>(com.google.common.collect.RegularImmutableBiMap,com.google.common.collect.RegularImmutableBiMap$1) -> <init>
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet -> com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:
    com.google.common.collect.RegularImmutableBiMap$Inverse this$1 -> this$1
    void <init>(com.google.common.collect.RegularImmutableBiMap$Inverse) -> <init>
    com.google.common.collect.ImmutableMap map() -> map
    boolean isHashCodeFast() -> isHashCodeFast
    int hashCode() -> hashCode
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1 -> com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1:
    com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet this$2 -> this$2
    void <init>(com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet) -> <init>
    java.util.Map$Entry get(int) -> get
    com.google.common.collect.ImmutableCollection delegateCollection() -> delegateCollection
    java.lang.Object get(int) -> get
com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm -> com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:
    com.google.common.collect.ImmutableBiMap forward -> forward
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableBiMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.RegularImmutableList -> com.google.common.collect.RegularImmutableList:
    com.google.common.collect.ImmutableList EMPTY -> EMPTY
    java.lang.Object[] array -> array
    void <init>(java.lang.Object[]) -> <init>
    int size() -> size
    boolean isPartialView() -> isPartialView
    java.lang.Object[] internalArray() -> internalArray
    int internalArrayStart() -> internalArrayStart
    int internalArrayEnd() -> internalArrayEnd
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    java.lang.Object get(int) -> get
    com.google.common.collect.UnmodifiableListIterator listIterator(int) -> listIterator
    java.util.Spliterator spliterator() -> spliterator
    java.util.ListIterator listIterator(int) -> listIterator
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableMap -> com.google.common.collect.RegularImmutableMap:
    com.google.common.collect.ImmutableMap EMPTY -> EMPTY
    double MAX_LOAD_FACTOR -> MAX_LOAD_FACTOR
    double HASH_FLOODING_FPP -> HASH_FLOODING_FPP
    int MAX_HASH_BUCKET_LENGTH -> MAX_HASH_BUCKET_LENGTH
    java.util.Map$Entry[] entries -> entries
    com.google.common.collect.ImmutableMapEntry[] table -> table
    int mask -> mask
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.ImmutableMap fromEntries(java.util.Map$Entry[]) -> fromEntries
    com.google.common.collect.ImmutableMap fromEntryArray(int,java.util.Map$Entry[]) -> fromEntryArray
    com.google.common.collect.ImmutableMapEntry makeImmutable(java.util.Map$Entry,java.lang.Object,java.lang.Object) -> makeImmutable
    com.google.common.collect.ImmutableMapEntry makeImmutable(java.util.Map$Entry) -> makeImmutable
    void <init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int) -> <init>
    int checkNoConflictInKeyBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry) -> checkNoConflictInKeyBucket
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int) -> get
    void forEach(java.util.function.BiConsumer) -> forEach
    int size() -> size
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableMap$KeySet -> com.google.common.collect.RegularImmutableMap$KeySet:
    com.google.common.collect.RegularImmutableMap map -> map
    void <init>(com.google.common.collect.RegularImmutableMap) -> <init>
    java.lang.Object get(int) -> get
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    int size() -> size
    java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm -> com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.RegularImmutableMap$Values -> com.google.common.collect.RegularImmutableMap$Values:
    com.google.common.collect.RegularImmutableMap map -> map
    void <init>(com.google.common.collect.RegularImmutableMap) -> <init>
    java.lang.Object get(int) -> get
    int size() -> size
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
com.google.common.collect.RegularImmutableMap$Values$SerializedForm -> com.google.common.collect.RegularImmutableMap$Values$SerializedForm:
    com.google.common.collect.ImmutableMap map -> map
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.collect.RegularImmutableMultiset -> com.google.common.collect.RegularImmutableMultiset:
    com.google.common.collect.ImmutableMultiset EMPTY -> EMPTY
    double MAX_LOAD_FACTOR -> MAX_LOAD_FACTOR
    double HASH_FLOODING_FPP -> HASH_FLOODING_FPP
    int MAX_HASH_BUCKET_LENGTH -> MAX_HASH_BUCKET_LENGTH
    com.google.common.collect.Multisets$ImmutableEntry[] entries -> entries
    com.google.common.collect.Multisets$ImmutableEntry[] hashTable -> hashTable
    int size -> size
    int hashCode -> hashCode
    com.google.common.collect.ImmutableSet elementSet -> elementSet
    com.google.common.collect.ImmutableMultiset create(java.util.Collection) -> create
    boolean hashFloodingDetected(com.google.common.collect.Multisets$ImmutableEntry[]) -> hashFloodingDetected
    void <init>(com.google.common.collect.Multisets$ImmutableEntry[],com.google.common.collect.Multisets$ImmutableEntry[],int,int,com.google.common.collect.ImmutableSet) -> <init>
    boolean isPartialView() -> isPartialView
    int count(java.lang.Object) -> count
    int size() -> size
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    int hashCode() -> hashCode
    java.util.Set elementSet() -> elementSet
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry -> com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry:
    com.google.common.collect.Multisets$ImmutableEntry nextInBucket -> nextInBucket
    void <init>(java.lang.Object,int,com.google.common.collect.Multisets$ImmutableEntry) -> <init>
    com.google.common.collect.Multisets$ImmutableEntry nextInBucket() -> nextInBucket
com.google.common.collect.RegularImmutableSet -> com.google.common.collect.RegularImmutableSet:
    com.google.common.collect.RegularImmutableSet EMPTY -> EMPTY
    java.lang.Object[] elements -> elements
    java.lang.Object[] table -> table
    int mask -> mask
    int hashCode -> hashCode
    void <init>(java.lang.Object[],int,java.lang.Object[],int) -> <init>
    boolean contains(java.lang.Object) -> contains
    int size() -> size
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    java.lang.Object[] internalArray() -> internalArray
    int internalArrayStart() -> internalArrayStart
    int internalArrayEnd() -> internalArrayEnd
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isPartialView() -> isPartialView
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableSortedMultiset -> com.google.common.collect.RegularImmutableSortedMultiset:
    long[] ZERO_CUMULATIVE_COUNTS -> ZERO_CUMULATIVE_COUNTS
    com.google.common.collect.ImmutableSortedMultiset NATURAL_EMPTY_MULTISET -> NATURAL_EMPTY_MULTISET
    com.google.common.collect.RegularImmutableSortedSet elementSet -> elementSet
    long[] cumulativeCounts -> cumulativeCounts
    int offset -> offset
    int length -> length
    void <init>(java.util.Comparator) -> <init>
    void <init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int) -> <init>
    int getCount(int) -> getCount
    com.google.common.collect.Multiset$Entry getEntry(int) -> getEntry
    void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    int count(java.lang.Object) -> count
    int size() -> size
    com.google.common.collect.ImmutableSortedSet elementSet() -> elementSet
    com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.ImmutableSortedMultiset getSubMultiset(int,int) -> getSubMultiset
    boolean isPartialView() -> isPartialView
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    java.util.NavigableSet elementSet() -> elementSet
    java.util.SortedSet elementSet() -> elementSet
    java.util.Set elementSet() -> elementSet
    com.google.common.collect.ImmutableSet elementSet() -> elementSet
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableSortedSet -> com.google.common.collect.RegularImmutableSortedSet:
    com.google.common.collect.RegularImmutableSortedSet NATURAL_EMPTY_SET -> NATURAL_EMPTY_SET
    com.google.common.collect.ImmutableList elements -> elements
    void <init>(com.google.common.collect.ImmutableList,java.util.Comparator) -> <init>
    java.lang.Object[] internalArray() -> internalArray
    int internalArrayStart() -> internalArrayStart
    int internalArrayEnd() -> internalArrayEnd
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.UnmodifiableIterator descendingIterator() -> descendingIterator
    java.util.Spliterator spliterator() -> spliterator
    void forEach(java.util.function.Consumer) -> forEach
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    int unsafeBinarySearch(java.lang.Object) -> unsafeBinarySearch
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    boolean equals(java.lang.Object) -> equals
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    com.google.common.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean) -> headSetImpl
    int headIndex(java.lang.Object,boolean) -> headIndex
    com.google.common.collect.ImmutableSortedSet subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean) -> subSetImpl
    com.google.common.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean) -> tailSetImpl
    int tailIndex(java.lang.Object,boolean) -> tailIndex
    java.util.Comparator unsafeComparator() -> unsafeComparator
    com.google.common.collect.RegularImmutableSortedSet getSubSet(int,int) -> getSubSet
    int indexOf(java.lang.Object) -> indexOf
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    com.google.common.collect.ImmutableSortedSet createDescendingSet() -> createDescendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Iterator iterator() -> iterator
    void <clinit>() -> <clinit>
com.google.common.collect.RegularImmutableTable -> com.google.common.collect.RegularImmutableTable:
    void <init>() -> <init>
    com.google.common.collect.Table$Cell getCell(int) -> getCell
    com.google.common.collect.ImmutableSet createCellSet() -> createCellSet
    java.lang.Object getValue(int) -> getValue
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    com.google.common.collect.RegularImmutableTable forCells(java.util.List,java.util.Comparator,java.util.Comparator) -> forCells
    com.google.common.collect.RegularImmutableTable forCells(java.lang.Iterable) -> forCells
    com.google.common.collect.RegularImmutableTable forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator) -> forCellsInternal
    com.google.common.collect.RegularImmutableTable forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet) -> forOrderedComponents
    java.util.Collection createValues() -> createValues
    java.util.Set createCellSet() -> createCellSet
com.google.common.collect.RegularImmutableTable$1 -> com.google.common.collect.RegularImmutableTable$1:
    java.util.Comparator val$rowComparator -> val$rowComparator
    java.util.Comparator val$columnComparator -> val$columnComparator
    void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    int compare(com.google.common.collect.Table$Cell,com.google.common.collect.Table$Cell) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.collect.RegularImmutableTable$CellSet -> com.google.common.collect.RegularImmutableTable$CellSet:
    com.google.common.collect.RegularImmutableTable this$0 -> this$0
    void <init>(com.google.common.collect.RegularImmutableTable) -> <init>
    int size() -> size
    com.google.common.collect.Table$Cell get(int) -> get
    boolean contains(java.lang.Object) -> contains
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
    void <init>(com.google.common.collect.RegularImmutableTable,com.google.common.collect.RegularImmutableTable$1) -> <init>
com.google.common.collect.RegularImmutableTable$Values -> com.google.common.collect.RegularImmutableTable$Values:
    com.google.common.collect.RegularImmutableTable this$0 -> this$0
    void <init>(com.google.common.collect.RegularImmutableTable) -> <init>
    int size() -> size
    java.lang.Object get(int) -> get
    boolean isPartialView() -> isPartialView
    void <init>(com.google.common.collect.RegularImmutableTable,com.google.common.collect.RegularImmutableTable$1) -> <init>
com.google.common.collect.ReverseNaturalOrdering -> com.google.common.collect.ReverseNaturalOrdering:
    com.google.common.collect.ReverseNaturalOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Comparable,java.lang.Comparable) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable) -> min
    java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> min
    java.lang.Comparable min(java.util.Iterator) -> min
    java.lang.Comparable min(java.lang.Iterable) -> min
    java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable) -> max
    java.lang.Comparable max(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable[]) -> max
    java.lang.Comparable max(java.util.Iterator) -> max
    java.lang.Comparable max(java.lang.Iterable) -> max
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    void <init>() -> <init>
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object min(java.util.Iterator) -> min
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.collect.ReverseOrdering -> com.google.common.collect.ReverseOrdering:
    com.google.common.collect.Ordering forwardOrder -> forwardOrder
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Ordering) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    com.google.common.collect.Ordering reverse() -> reverse
    java.lang.Object min(java.lang.Object,java.lang.Object) -> min
    java.lang.Object min(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> min
    java.lang.Object min(java.util.Iterator) -> min
    java.lang.Object min(java.lang.Iterable) -> min
    java.lang.Object max(java.lang.Object,java.lang.Object) -> max
    java.lang.Object max(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> max
    java.lang.Object max(java.util.Iterator) -> max
    java.lang.Object max(java.lang.Iterable) -> max
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.collect.RowSortedTable -> com.google.common.collect.RowSortedTable:
    java.util.SortedSet rowKeySet() -> rowKeySet
    java.util.SortedMap rowMap() -> rowMap
    java.util.Map rowMap() -> rowMap
    java.util.Set rowKeySet() -> rowKeySet
com.google.common.collect.Serialization -> com.google.common.collect.Serialization:
    void <init>() -> <init>
    int readCount(java.io.ObjectInputStream) -> readCount
    void writeMap(java.util.Map,java.io.ObjectOutputStream) -> writeMap
    void populateMap(java.util.Map,java.io.ObjectInputStream) -> populateMap
    void populateMap(java.util.Map,java.io.ObjectInputStream,int) -> populateMap
    void writeMultiset(com.google.common.collect.Multiset,java.io.ObjectOutputStream) -> writeMultiset
    void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream) -> populateMultiset
    void populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream,int) -> populateMultiset
    void writeMultimap(com.google.common.collect.Multimap,java.io.ObjectOutputStream) -> writeMultimap
    void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream) -> populateMultimap
    void populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream,int) -> populateMultimap
    com.google.common.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class,java.lang.String) -> getFieldSetter
com.google.common.collect.Serialization$1 -> com.google.common.collect.Serialization$1:
com.google.common.collect.Serialization$FieldSetter -> com.google.common.collect.Serialization$FieldSetter:
    java.lang.reflect.Field field -> field
    void <init>(java.lang.reflect.Field) -> <init>
    void set(java.lang.Object,java.lang.Object) -> set
    void set(java.lang.Object,int) -> set
    void <init>(java.lang.reflect.Field,com.google.common.collect.Serialization$1) -> <init>
com.google.common.collect.SetMultimap -> com.google.common.collect.SetMultimap:
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Map asMap() -> asMap
    boolean equals(java.lang.Object) -> equals
    java.util.Collection entries() -> entries
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.Sets -> com.google.common.collect.Sets:
    void <init>() -> <init>
    com.google.common.collect.ImmutableSet immutableEnumSet(java.lang.Enum,java.lang.Enum[]) -> immutableEnumSet
    com.google.common.collect.ImmutableSet immutableEnumSet(java.lang.Iterable) -> immutableEnumSet
    java.util.stream.Collector toImmutableEnumSet() -> toImmutableEnumSet
    java.util.EnumSet newEnumSet(java.lang.Iterable,java.lang.Class) -> newEnumSet
    java.util.HashSet newHashSet() -> newHashSet
    java.util.HashSet newHashSet(java.lang.Object[]) -> newHashSet
    java.util.HashSet newHashSet(java.lang.Iterable) -> newHashSet
    java.util.HashSet newHashSet(java.util.Iterator) -> newHashSet
    java.util.HashSet newHashSetWithExpectedSize(int) -> newHashSetWithExpectedSize
    java.util.Set newConcurrentHashSet() -> newConcurrentHashSet
    java.util.Set newConcurrentHashSet(java.lang.Iterable) -> newConcurrentHashSet
    java.util.LinkedHashSet newLinkedHashSet() -> newLinkedHashSet
    java.util.LinkedHashSet newLinkedHashSet(java.lang.Iterable) -> newLinkedHashSet
    java.util.LinkedHashSet newLinkedHashSetWithExpectedSize(int) -> newLinkedHashSetWithExpectedSize
    java.util.TreeSet newTreeSet() -> newTreeSet
    java.util.TreeSet newTreeSet(java.lang.Iterable) -> newTreeSet
    java.util.TreeSet newTreeSet(java.util.Comparator) -> newTreeSet
    java.util.Set newIdentityHashSet() -> newIdentityHashSet
    java.util.concurrent.CopyOnWriteArraySet newCopyOnWriteArraySet() -> newCopyOnWriteArraySet
    java.util.concurrent.CopyOnWriteArraySet newCopyOnWriteArraySet(java.lang.Iterable) -> newCopyOnWriteArraySet
    java.util.EnumSet complementOf(java.util.Collection) -> complementOf
    java.util.EnumSet complementOf(java.util.Collection,java.lang.Class) -> complementOf
    java.util.EnumSet makeComplementByHand(java.util.Collection,java.lang.Class) -> makeComplementByHand
    java.util.Set newSetFromMap(java.util.Map) -> newSetFromMap
    com.google.common.collect.Sets$SetView union(java.util.Set,java.util.Set) -> union
    com.google.common.collect.Sets$SetView intersection(java.util.Set,java.util.Set) -> intersection
    com.google.common.collect.Sets$SetView difference(java.util.Set,java.util.Set) -> difference
    com.google.common.collect.Sets$SetView symmetricDifference(java.util.Set,java.util.Set) -> symmetricDifference
    java.util.Set filter(java.util.Set,com.google.common.base.Predicate) -> filter
    java.util.SortedSet filter(java.util.SortedSet,com.google.common.base.Predicate) -> filter
    java.util.NavigableSet filter(java.util.NavigableSet,com.google.common.base.Predicate) -> filter
    java.util.Set cartesianProduct(java.util.List) -> cartesianProduct
    java.util.Set cartesianProduct(java.util.Set[]) -> cartesianProduct
    java.util.Set powerSet(java.util.Set) -> powerSet
    java.util.Set combinations(java.util.Set,int) -> combinations
    int hashCodeImpl(java.util.Set) -> hashCodeImpl
    boolean equalsImpl(java.util.Set,java.lang.Object) -> equalsImpl
    java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet) -> unmodifiableNavigableSet
    java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet) -> synchronizedNavigableSet
    boolean removeAllImpl(java.util.Set,java.util.Iterator) -> removeAllImpl
    boolean removeAllImpl(java.util.Set,java.util.Collection) -> removeAllImpl
    java.util.NavigableSet subSet(java.util.NavigableSet,com.google.common.collect.Range) -> subSet
com.google.common.collect.Sets$1 -> com.google.common.collect.Sets$1:
    java.util.Set val$set1 -> val$set1
    java.util.Set val$set2 -> val$set2
    void <init>(java.util.Set,java.util.Set) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.stream.Stream stream() -> stream
    java.util.stream.Stream parallelStream() -> parallelStream
    boolean contains(java.lang.Object) -> contains
    java.util.Set copyInto(java.util.Set) -> copyInto
    com.google.common.collect.ImmutableSet immutableCopy() -> immutableCopy
    java.util.Iterator iterator() -> iterator
    boolean lambda$stream$0(java.util.Set,java.lang.Object) -> lambda$stream$0
com.google.common.collect.Sets$1$1 -> com.google.common.collect.Sets$1$1:
    java.util.Iterator itr1 -> itr1
    java.util.Iterator itr2 -> itr2
    com.google.common.collect.Sets$1 this$0 -> this$0
    void <init>(com.google.common.collect.Sets$1) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$2 -> com.google.common.collect.Sets$2:
    java.util.Set val$set1 -> val$set1
    java.util.Set val$set2 -> val$set2
    void <init>(java.util.Set,java.util.Set) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.stream.Stream stream() -> stream
    java.util.stream.Stream parallelStream() -> parallelStream
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Sets$2$1 -> com.google.common.collect.Sets$2$1:
    java.util.Iterator itr -> itr
    com.google.common.collect.Sets$2 this$0 -> this$0
    void <init>(com.google.common.collect.Sets$2) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$3 -> com.google.common.collect.Sets$3:
    java.util.Set val$set1 -> val$set1
    java.util.Set val$set2 -> val$set2
    void <init>(java.util.Set,java.util.Set) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.stream.Stream stream() -> stream
    java.util.stream.Stream parallelStream() -> parallelStream
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean lambda$parallelStream$1(java.util.Set,java.lang.Object) -> lambda$parallelStream$1
    boolean lambda$stream$0(java.util.Set,java.lang.Object) -> lambda$stream$0
com.google.common.collect.Sets$3$1 -> com.google.common.collect.Sets$3$1:
    java.util.Iterator itr -> itr
    com.google.common.collect.Sets$3 this$0 -> this$0
    void <init>(com.google.common.collect.Sets$3) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$4 -> com.google.common.collect.Sets$4:
    java.util.Set val$set1 -> val$set1
    java.util.Set val$set2 -> val$set2
    void <init>(java.util.Set,java.util.Set) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Sets$4$1 -> com.google.common.collect.Sets$4$1:
    java.util.Iterator val$itr1 -> val$itr1
    java.util.Iterator val$itr2 -> val$itr2
    com.google.common.collect.Sets$4 this$0 -> this$0
    void <init>(com.google.common.collect.Sets$4,java.util.Iterator,java.util.Iterator) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$5 -> com.google.common.collect.Sets$5:
    int val$size -> val$size
    com.google.common.collect.ImmutableMap val$index -> val$index
    void <init>(int,com.google.common.collect.ImmutableMap) -> <init>
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int size() -> size
    java.lang.String toString() -> toString
com.google.common.collect.Sets$5$1 -> com.google.common.collect.Sets$5$1:
    java.util.BitSet bits -> bits
    com.google.common.collect.Sets$5 this$0 -> this$0
    void <init>(com.google.common.collect.Sets$5) -> <init>
    java.util.Set computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$5$1$1 -> com.google.common.collect.Sets$5$1$1:
    java.util.BitSet val$copy -> val$copy
    com.google.common.collect.Sets$5$1 this$1 -> this$1
    void <init>(com.google.common.collect.Sets$5$1,java.util.BitSet) -> <init>
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int size() -> size
com.google.common.collect.Sets$5$1$1$1 -> com.google.common.collect.Sets$5$1$1$1:
    int i -> i
    com.google.common.collect.Sets$5$1$1 this$2 -> this$2
    void <init>(com.google.common.collect.Sets$5$1$1) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.Sets$Accumulator -> com.google.common.collect.Sets$Accumulator:
    java.util.stream.Collector TO_IMMUTABLE_ENUM_SET -> TO_IMMUTABLE_ENUM_SET
    java.util.EnumSet set -> set
    void <init>() -> <init>
    void add(java.lang.Enum) -> add
    com.google.common.collect.Sets$Accumulator combine(com.google.common.collect.Sets$Accumulator) -> combine
    com.google.common.collect.ImmutableSet toImmutableSet() -> toImmutableSet
    void <clinit>() -> <clinit>
com.google.common.collect.Sets$CartesianSet -> com.google.common.collect.Sets$CartesianSet:
    com.google.common.collect.ImmutableList axes -> axes
    com.google.common.collect.CartesianList delegate -> delegate
    java.util.Set create(java.util.List) -> create
    void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.CartesianList) -> <init>
    java.util.Collection delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.Sets$CartesianSet$1 -> com.google.common.collect.Sets$CartesianSet$1:
    com.google.common.collect.ImmutableList val$axes -> val$axes
    void <init>(com.google.common.collect.ImmutableList) -> <init>
    int size() -> size
    java.util.List get(int) -> get
    boolean isPartialView() -> isPartialView
    java.lang.Object get(int) -> get
com.google.common.collect.Sets$DescendingSet -> com.google.common.collect.Sets$DescendingSet:
    java.util.NavigableSet forward -> forward
    void <init>(java.util.NavigableSet) -> <init>
    java.util.NavigableSet delegate() -> delegate
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Ordering reverse(java.util.Comparator) -> reverse
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.String toString() -> toString
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Sets$FilteredNavigableSet -> com.google.common.collect.Sets$FilteredNavigableSet:
    void <init>(java.util.NavigableSet,com.google.common.base.Predicate) -> <init>
    java.util.NavigableSet unfiltered() -> unfiltered
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.lang.Object last() -> last
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
com.google.common.collect.Sets$FilteredSet -> com.google.common.collect.Sets$FilteredSet:
    void <init>(java.util.Set,com.google.common.base.Predicate) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Sets$FilteredSortedSet -> com.google.common.collect.Sets$FilteredSortedSet:
    void <init>(java.util.SortedSet,com.google.common.base.Predicate) -> <init>
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
com.google.common.collect.Sets$ImprovedAbstractSet -> com.google.common.collect.Sets$ImprovedAbstractSet:
    void <init>() -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Sets$PowerSet -> com.google.common.collect.Sets$PowerSet:
    com.google.common.collect.ImmutableMap inputSet -> inputSet
    void <init>(java.util.Set) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Sets$PowerSet$1 -> com.google.common.collect.Sets$PowerSet$1:
    com.google.common.collect.Sets$PowerSet this$0 -> this$0
    void <init>(com.google.common.collect.Sets$PowerSet,int) -> <init>
    java.util.Set get(int) -> get
    java.lang.Object get(int) -> get
com.google.common.collect.Sets$SetView -> com.google.common.collect.Sets$SetView:
    void <init>() -> <init>
    com.google.common.collect.ImmutableSet immutableCopy() -> immutableCopy
    java.util.Set copyInto(java.util.Set) -> copyInto
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeIf(java.util.function.Predicate) -> removeIf
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
    void <init>(com.google.common.collect.Sets$1) -> <init>
com.google.common.collect.Sets$SubSet -> com.google.common.collect.Sets$SubSet:
    com.google.common.collect.ImmutableMap inputSet -> inputSet
    int mask -> mask
    void <init>(com.google.common.collect.ImmutableMap,int) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.ImmutableMap access$100(com.google.common.collect.Sets$SubSet) -> access$100
    int access$200(com.google.common.collect.Sets$SubSet) -> access$200
com.google.common.collect.Sets$SubSet$1 -> com.google.common.collect.Sets$SubSet$1:
    com.google.common.collect.ImmutableList elements -> elements
    int remainingSetBits -> remainingSetBits
    com.google.common.collect.Sets$SubSet this$0 -> this$0
    void <init>(com.google.common.collect.Sets$SubSet) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.Sets$UnmodifiableNavigableSet -> com.google.common.collect.Sets$UnmodifiableNavigableSet:
    java.util.NavigableSet delegate -> delegate
    java.util.SortedSet unmodifiableDelegate -> unmodifiableDelegate
    com.google.common.collect.Sets$UnmodifiableNavigableSet descendingSet -> descendingSet
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.NavigableSet) -> <init>
    java.util.SortedSet delegate() -> delegate
    boolean removeIf(java.util.function.Predicate) -> removeIf
    java.util.stream.Stream stream() -> stream
    java.util.stream.Stream parallelStream() -> parallelStream
    void forEach(java.util.function.Consumer) -> forEach
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.SingletonImmutableBiMap -> com.google.common.collect.SingletonImmutableBiMap:
    java.lang.Object singleKey -> singleKey
    java.lang.Object singleValue -> singleValue
    com.google.common.collect.ImmutableBiMap inverse -> inverse
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    void <init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableBiMap) -> <init>
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    void forEach(java.util.function.BiConsumer) -> forEach
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isPartialView() -> isPartialView
    com.google.common.collect.ImmutableSet createEntrySet() -> createEntrySet
    com.google.common.collect.ImmutableSet createKeySet() -> createKeySet
    com.google.common.collect.ImmutableBiMap inverse() -> inverse
    com.google.common.collect.BiMap inverse() -> inverse
com.google.common.collect.SingletonImmutableList -> com.google.common.collect.SingletonImmutableList:
    java.lang.Object element -> element
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get(int) -> get
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    int size() -> size
    com.google.common.collect.ImmutableList subList(int,int) -> subList
    java.lang.String toString() -> toString
    boolean isPartialView() -> isPartialView
    java.util.List subList(int,int) -> subList
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SingletonImmutableSet -> com.google.common.collect.SingletonImmutableSet:
    java.lang.Object element -> element
    int cachedHashCode -> cachedHashCode
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,int) -> <init>
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    com.google.common.collect.ImmutableList createAsList() -> createAsList
    boolean isPartialView() -> isPartialView
    int copyIntoArray(java.lang.Object[],int) -> copyIntoArray
    int hashCode() -> hashCode
    boolean isHashCodeFast() -> isHashCodeFast
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SingletonImmutableTable -> com.google.common.collect.SingletonImmutableTable:
    java.lang.Object singleRowKey -> singleRowKey
    java.lang.Object singleColumnKey -> singleColumnKey
    java.lang.Object singleValue -> singleValue
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    void <init>(com.google.common.collect.Table$Cell) -> <init>
    com.google.common.collect.ImmutableMap column(java.lang.Object) -> column
    com.google.common.collect.ImmutableMap columnMap() -> columnMap
    com.google.common.collect.ImmutableMap rowMap() -> rowMap
    int size() -> size
    com.google.common.collect.ImmutableSet createCellSet() -> createCellSet
    com.google.common.collect.ImmutableCollection createValues() -> createValues
    com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm() -> createSerializedForm
    java.util.Collection createValues() -> createValues
    java.util.Set createCellSet() -> createCellSet
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
    java.util.Map column(java.lang.Object) -> column
com.google.common.collect.SortedIterable -> com.google.common.collect.SortedIterable:
    java.util.Comparator comparator() -> comparator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.SortedIterables -> com.google.common.collect.SortedIterables:
    void <init>() -> <init>
    boolean hasSameComparator(java.util.Comparator,java.lang.Iterable) -> hasSameComparator
    java.util.Comparator comparator(java.util.SortedSet) -> comparator
com.google.common.collect.SortedLists -> com.google.common.collect.SortedLists:
    void <init>() -> <init>
    int binarySearch(java.util.List,java.lang.Comparable,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    int binarySearch(java.util.List,com.google.common.base.Function,java.lang.Comparable,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    int binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
    int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior) -> binarySearch
com.google.common.collect.SortedLists$1 -> com.google.common.collect.SortedLists$1:
com.google.common.collect.SortedLists$KeyAbsentBehavior -> com.google.common.collect.SortedLists$KeyAbsentBehavior:
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_LOWER -> NEXT_LOWER
    com.google.common.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER -> NEXT_HIGHER
    com.google.common.collect.SortedLists$KeyAbsentBehavior INVERTED_INSERTION_INDEX -> INVERTED_INSERTION_INDEX
    com.google.common.collect.SortedLists$KeyAbsentBehavior[] $VALUES -> $VALUES
    com.google.common.collect.SortedLists$KeyAbsentBehavior[] values() -> values
    com.google.common.collect.SortedLists$KeyAbsentBehavior valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> resultIndex
    void <init>(java.lang.String,int,com.google.common.collect.SortedLists$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.SortedLists$KeyAbsentBehavior$1 -> com.google.common.collect.SortedLists$KeyAbsentBehavior$1:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyAbsentBehavior$2 -> com.google.common.collect.SortedLists$KeyAbsentBehavior$2:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyAbsentBehavior$3 -> com.google.common.collect.SortedLists$KeyAbsentBehavior$3:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior -> com.google.common.collect.SortedLists$KeyPresentBehavior:
    com.google.common.collect.SortedLists$KeyPresentBehavior ANY_PRESENT -> ANY_PRESENT
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_PRESENT -> LAST_PRESENT
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_PRESENT -> FIRST_PRESENT
    com.google.common.collect.SortedLists$KeyPresentBehavior FIRST_AFTER -> FIRST_AFTER
    com.google.common.collect.SortedLists$KeyPresentBehavior LAST_BEFORE -> LAST_BEFORE
    com.google.common.collect.SortedLists$KeyPresentBehavior[] $VALUES -> $VALUES
    com.google.common.collect.SortedLists$KeyPresentBehavior[] values() -> values
    com.google.common.collect.SortedLists$KeyPresentBehavior valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
    void <init>(java.lang.String,int,com.google.common.collect.SortedLists$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.SortedLists$KeyPresentBehavior$1 -> com.google.common.collect.SortedLists$KeyPresentBehavior$1:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$2 -> com.google.common.collect.SortedLists$KeyPresentBehavior$2:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$3 -> com.google.common.collect.SortedLists$KeyPresentBehavior$3:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$4 -> com.google.common.collect.SortedLists$KeyPresentBehavior$4:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedLists$KeyPresentBehavior$5 -> com.google.common.collect.SortedLists$KeyPresentBehavior$5:
    void <init>(java.lang.String,int) -> <init>
    int resultIndex(java.util.Comparator,java.lang.Object,java.util.List,int) -> resultIndex
com.google.common.collect.SortedMapDifference -> com.google.common.collect.SortedMapDifference:
    java.util.SortedMap entriesOnlyOnLeft() -> entriesOnlyOnLeft
    java.util.SortedMap entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.SortedMap entriesInCommon() -> entriesInCommon
    java.util.SortedMap entriesDiffering() -> entriesDiffering
    java.util.Map entriesDiffering() -> entriesDiffering
    java.util.Map entriesInCommon() -> entriesInCommon
    java.util.Map entriesOnlyOnRight() -> entriesOnlyOnRight
    java.util.Map entriesOnlyOnLeft() -> entriesOnlyOnLeft
com.google.common.collect.SortedMultiset -> com.google.common.collect.SortedMultiset:
    java.util.Comparator comparator() -> comparator
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableSet elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    java.util.Iterator iterator() -> iterator
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    java.util.SortedSet elementSet() -> elementSet
    java.util.Set elementSet() -> elementSet
com.google.common.collect.SortedMultisetBridge -> com.google.common.collect.SortedMultisetBridge:
    java.util.SortedSet elementSet() -> elementSet
    java.util.Set elementSet() -> elementSet
com.google.common.collect.SortedMultisets -> com.google.common.collect.SortedMultisets:
    void <init>() -> <init>
    java.lang.Object getElementOrThrow(com.google.common.collect.Multiset$Entry) -> getElementOrThrow
    java.lang.Object getElementOrNull(com.google.common.collect.Multiset$Entry) -> getElementOrNull
    java.lang.Object access$000(com.google.common.collect.Multiset$Entry) -> access$000
    java.lang.Object access$100(com.google.common.collect.Multiset$Entry) -> access$100
com.google.common.collect.SortedMultisets$ElementSet -> com.google.common.collect.SortedMultisets$ElementSet:
    com.google.common.collect.SortedMultiset multiset -> multiset
    void <init>(com.google.common.collect.SortedMultiset) -> <init>
    com.google.common.collect.SortedMultiset multiset() -> multiset
    java.util.Iterator iterator() -> iterator
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    com.google.common.collect.Multiset multiset() -> multiset
com.google.common.collect.SortedMultisets$NavigableElementSet -> com.google.common.collect.SortedMultisets$NavigableElementSet:
    void <init>(com.google.common.collect.SortedMultiset) -> <init>
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object floor(java.lang.Object) -> floor
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.lang.Object higher(java.lang.Object) -> higher
    java.util.NavigableSet descendingSet() -> descendingSet
    java.util.Iterator descendingIterator() -> descendingIterator
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
com.google.common.collect.SortedSetMultimap -> com.google.common.collect.SortedSetMultimap:
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Map asMap() -> asMap
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
com.google.common.collect.SparseImmutableTable -> com.google.common.collect.SparseImmutableTable:
    com.google.common.collect.ImmutableTable EMPTY -> EMPTY
    com.google.common.collect.ImmutableMap rowMap -> rowMap
    com.google.common.collect.ImmutableMap columnMap -> columnMap
    int[] cellRowIndices -> cellRowIndices
    int[] cellColumnInRowIndices -> cellColumnInRowIndices
    void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet) -> <init>
    com.google.common.collect.ImmutableMap columnMap() -> columnMap
    com.google.common.collect.ImmutableMap rowMap() -> rowMap
    int size() -> size
    com.google.common.collect.Table$Cell getCell(int) -> getCell
    java.lang.Object getValue(int) -> getValue
    com.google.common.collect.ImmutableTable$SerializedForm createSerializedForm() -> createSerializedForm
    java.util.Map columnMap() -> columnMap
    java.util.Map rowMap() -> rowMap
    void <clinit>() -> <clinit>
com.google.common.collect.StandardRowSortedTable -> com.google.common.collect.StandardRowSortedTable:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.SortedMap,com.google.common.base.Supplier) -> <init>
    java.util.SortedMap sortedBackingMap() -> sortedBackingMap
    java.util.SortedSet rowKeySet() -> rowKeySet
    java.util.SortedMap rowMap() -> rowMap
    java.util.SortedMap createRowMap() -> createRowMap
    java.util.Map createRowMap() -> createRowMap
    java.util.Map rowMap() -> rowMap
    java.util.Set rowKeySet() -> rowKeySet
    java.util.SortedMap access$100(com.google.common.collect.StandardRowSortedTable) -> access$100
com.google.common.collect.StandardRowSortedTable$1 -> com.google.common.collect.StandardRowSortedTable$1:
com.google.common.collect.StandardRowSortedTable$RowSortedMap -> com.google.common.collect.StandardRowSortedTable$RowSortedMap:
    com.google.common.collect.StandardRowSortedTable this$0 -> this$0
    void <init>(com.google.common.collect.StandardRowSortedTable) -> <init>
    java.util.SortedSet keySet() -> keySet
    java.util.SortedSet createKeySet() -> createKeySet
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Set createKeySet() -> createKeySet
    java.util.Set keySet() -> keySet
    void <init>(com.google.common.collect.StandardRowSortedTable,com.google.common.collect.StandardRowSortedTable$1) -> <init>
com.google.common.collect.StandardTable -> com.google.common.collect.StandardTable:
    java.util.Map backingMap -> backingMap
    com.google.common.base.Supplier factory -> factory
    java.util.Set columnKeySet -> columnKeySet
    java.util.Map rowMap -> rowMap
    com.google.common.collect.StandardTable$ColumnMap columnMap -> columnMap
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,com.google.common.base.Supplier) -> <init>
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.util.Map getOrCreate(java.lang.Object) -> getOrCreate
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map removeColumn(java.lang.Object) -> removeColumn
    boolean containsMapping(java.lang.Object,java.lang.Object,java.lang.Object) -> containsMapping
    boolean removeMapping(java.lang.Object,java.lang.Object,java.lang.Object) -> removeMapping
    java.util.Set cellSet() -> cellSet
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Spliterator cellSpliterator() -> cellSpliterator
    java.util.Map row(java.lang.Object) -> row
    java.util.Map column(java.lang.Object) -> column
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Iterator createColumnKeyIterator() -> createColumnKeyIterator
    java.util.Collection values() -> values
    java.util.Map rowMap() -> rowMap
    java.util.Map createRowMap() -> createRowMap
    java.util.Map columnMap() -> columnMap
    java.util.Spliterator lambda$cellSpliterator$1(java.util.Map$Entry) -> lambda$cellSpliterator$1
    com.google.common.collect.Table$Cell lambda$null$0(java.util.Map$Entry,java.util.Map$Entry) -> lambda$null$0
    boolean access$300(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object) -> access$300
    boolean access$400(com.google.common.collect.StandardTable,java.lang.Object,java.lang.Object,java.lang.Object) -> access$400
    java.util.Map access$900(com.google.common.collect.StandardTable,java.lang.Object) -> access$900
com.google.common.collect.StandardTable$1 -> com.google.common.collect.StandardTable$1:
com.google.common.collect.StandardTable$CellIterator -> com.google.common.collect.StandardTable$CellIterator:
    java.util.Iterator rowIterator -> rowIterator
    java.util.Map$Entry rowEntry -> rowEntry
    java.util.Iterator columnIterator -> columnIterator
    com.google.common.collect.StandardTable this$0 -> this$0
    void <init>(com.google.common.collect.StandardTable) -> <init>
    boolean hasNext() -> hasNext
    com.google.common.collect.Table$Cell next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1) -> <init>
com.google.common.collect.StandardTable$Column -> com.google.common.collect.StandardTable$Column:
    java.lang.Object columnKey -> columnKey
    com.google.common.collect.StandardTable this$0 -> this$0
    void <init>(com.google.common.collect.StandardTable,java.lang.Object) -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object remove(java.lang.Object) -> remove
    boolean removeFromColumnIf(com.google.common.base.Predicate) -> removeFromColumnIf
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set createKeySet() -> createKeySet
    java.util.Collection createValues() -> createValues
com.google.common.collect.StandardTable$Column$EntrySet -> com.google.common.collect.StandardTable$Column$EntrySet:
    com.google.common.collect.StandardTable$Column this$1 -> this$1
    void <init>(com.google.common.collect.StandardTable$Column) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    boolean retainAll(java.util.Collection) -> retainAll
    void <init>(com.google.common.collect.StandardTable$Column,com.google.common.collect.StandardTable$1) -> <init>
com.google.common.collect.StandardTable$Column$EntrySetIterator -> com.google.common.collect.StandardTable$Column$EntrySetIterator:
    java.util.Iterator iterator -> iterator
    com.google.common.collect.StandardTable$Column this$1 -> this$1
    void <init>(com.google.common.collect.StandardTable$Column) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
    void <init>(com.google.common.collect.StandardTable$Column,com.google.common.collect.StandardTable$1) -> <init>
com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl -> com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.StandardTable$Column$EntrySetIterator this$2 -> this$2
    void <init>(com.google.common.collect.StandardTable$Column$EntrySetIterator,java.util.Map$Entry) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.StandardTable$Column$KeySet -> com.google.common.collect.StandardTable$Column$KeySet:
    com.google.common.collect.StandardTable$Column this$1 -> this$1
    void <init>(com.google.common.collect.StandardTable$Column) -> <init>
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$Column$Values -> com.google.common.collect.StandardTable$Column$Values:
    com.google.common.collect.StandardTable$Column this$1 -> this$1
    void <init>(com.google.common.collect.StandardTable$Column) -> <init>
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$ColumnKeyIterator -> com.google.common.collect.StandardTable$ColumnKeyIterator:
    java.util.Map seen -> seen
    java.util.Iterator mapIterator -> mapIterator
    java.util.Iterator entryIterator -> entryIterator
    com.google.common.collect.StandardTable this$0 -> this$0
    void <init>(com.google.common.collect.StandardTable) -> <init>
    java.lang.Object computeNext() -> computeNext
    void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1) -> <init>
com.google.common.collect.StandardTable$ColumnKeySet -> com.google.common.collect.StandardTable$ColumnKeySet:
    com.google.common.collect.StandardTable this$0 -> this$0
    void <init>(com.google.common.collect.StandardTable) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean contains(java.lang.Object) -> contains
    void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1) -> <init>
com.google.common.collect.StandardTable$ColumnMap -> com.google.common.collect.StandardTable$ColumnMap:
    com.google.common.collect.StandardTable this$0 -> this$0
    void <init>(com.google.common.collect.StandardTable) -> <init>
    java.util.Map get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Map remove(java.lang.Object) -> remove
    java.util.Set createEntrySet() -> createEntrySet
    java.util.Set keySet() -> keySet
    java.util.Collection createValues() -> createValues
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
    void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1) -> <init>
com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet -> com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:
    com.google.common.collect.StandardTable$ColumnMap this$1 -> this$1
    void <init>(com.google.common.collect.StandardTable$ColumnMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1 -> com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1:
    com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet this$2 -> this$2
    void <init>(com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet) -> <init>
    java.util.Map apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues -> com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:
    com.google.common.collect.StandardTable$ColumnMap this$1 -> this$1
    void <init>(com.google.common.collect.StandardTable$ColumnMap) -> <init>
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.StandardTable$Row -> com.google.common.collect.StandardTable$Row:
    java.lang.Object rowKey -> rowKey
    java.util.Map backingRowMap -> backingRowMap
    com.google.common.collect.StandardTable this$0 -> this$0
    void <init>(com.google.common.collect.StandardTable,java.lang.Object) -> <init>
    java.util.Map backingRowMap() -> backingRowMap
    java.util.Map computeBackingRowMap() -> computeBackingRowMap
    void maintainEmptyInvariant() -> maintainEmptyInvariant
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    int size() -> size
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Spliterator entrySpliterator() -> entrySpliterator
    java.util.Map$Entry wrapEntry(java.util.Map$Entry) -> wrapEntry
com.google.common.collect.StandardTable$Row$1 -> com.google.common.collect.StandardTable$Row$1:
    java.util.Iterator val$iterator -> val$iterator
    com.google.common.collect.StandardTable$Row this$1 -> this$1
    void <init>(com.google.common.collect.StandardTable$Row,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.StandardTable$Row$2 -> com.google.common.collect.StandardTable$Row$2:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.StandardTable$Row this$1 -> this$1
    void <init>(com.google.common.collect.StandardTable$Row,java.util.Map$Entry) -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    java.lang.Object delegate() -> delegate
com.google.common.collect.StandardTable$RowMap -> com.google.common.collect.StandardTable$RowMap:
    com.google.common.collect.StandardTable this$0 -> this$0
    void <init>(com.google.common.collect.StandardTable) -> <init>
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Map get(java.lang.Object) -> get
    java.util.Map remove(java.lang.Object) -> remove
    java.util.Set createEntrySet() -> createEntrySet
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.StandardTable$RowMap$EntrySet -> com.google.common.collect.StandardTable$RowMap$EntrySet:
    com.google.common.collect.StandardTable$RowMap this$1 -> this$1
    void <init>(com.google.common.collect.StandardTable$RowMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
com.google.common.collect.StandardTable$RowMap$EntrySet$1 -> com.google.common.collect.StandardTable$RowMap$EntrySet$1:
    com.google.common.collect.StandardTable$RowMap$EntrySet this$2 -> this$2
    void <init>(com.google.common.collect.StandardTable$RowMap$EntrySet) -> <init>
    java.util.Map apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.StandardTable$TableSet -> com.google.common.collect.StandardTable$TableSet:
    com.google.common.collect.StandardTable this$0 -> this$0
    void <init>(com.google.common.collect.StandardTable) -> <init>
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    void <init>(com.google.common.collect.StandardTable,com.google.common.collect.StandardTable$1) -> <init>
com.google.common.collect.Streams -> com.google.common.collect.Streams:
    java.util.stream.Stream stream(java.lang.Iterable) -> stream
    java.util.stream.Stream stream(java.util.Collection) -> stream
    java.util.stream.Stream stream(java.util.Iterator) -> stream
    java.util.stream.Stream stream(com.google.common.base.Optional) -> stream
    java.util.stream.Stream stream(java.util.Optional) -> stream
    java.util.stream.IntStream stream(java.util.OptionalInt) -> stream
    java.util.stream.LongStream stream(java.util.OptionalLong) -> stream
    java.util.stream.DoubleStream stream(java.util.OptionalDouble) -> stream
    java.util.stream.Stream concat(java.util.stream.Stream[]) -> concat
    java.util.stream.IntStream concat(java.util.stream.IntStream[]) -> concat
    java.util.stream.LongStream concat(java.util.stream.LongStream[]) -> concat
    java.util.stream.DoubleStream concat(java.util.stream.DoubleStream[]) -> concat
    java.util.stream.Stream zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction) -> zip
    void forEachPair(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiConsumer) -> forEachPair
    java.util.stream.Stream mapWithIndex(java.util.stream.Stream,com.google.common.collect.Streams$FunctionWithIndex) -> mapWithIndex
    java.util.stream.Stream mapWithIndex(java.util.stream.IntStream,com.google.common.collect.Streams$IntFunctionWithIndex) -> mapWithIndex
    java.util.stream.Stream mapWithIndex(java.util.stream.LongStream,com.google.common.collect.Streams$LongFunctionWithIndex) -> mapWithIndex
    java.util.stream.Stream mapWithIndex(java.util.stream.DoubleStream,com.google.common.collect.Streams$DoubleFunctionWithIndex) -> mapWithIndex
    java.util.Optional findLast(java.util.stream.Stream) -> findLast
    java.util.OptionalInt findLast(java.util.stream.IntStream) -> findLast
    java.util.OptionalLong findLast(java.util.stream.LongStream) -> findLast
    java.util.OptionalDouble findLast(java.util.stream.DoubleStream) -> findLast
    void <init>() -> <init>
    void lambda$forEachPair$5(java.util.function.BiConsumer,com.google.common.collect.Streams$TemporaryPair) -> lambda$forEachPair$5
    java.util.stream.DoubleStream lambda$concat$4(java.util.stream.DoubleStream) -> lambda$concat$4
    java.util.stream.LongStream lambda$concat$3(java.util.stream.LongStream) -> lambda$concat$3
    java.util.stream.IntStream lambda$concat$2(java.util.stream.IntStream) -> lambda$concat$2
    void lambda$concat$1(java.util.stream.Stream[]) -> lambda$concat$1
    java.util.Spliterator lambda$concat$0(java.util.Spliterator) -> lambda$concat$0
com.google.common.collect.Streams$1 -> com.google.common.collect.Streams$1:
    java.util.Iterator val$itrA -> val$itrA
    java.util.Iterator val$itrB -> val$itrB
    java.util.function.BiFunction val$function -> val$function
    void <init>(long,int,java.util.Iterator,java.util.Iterator,java.util.function.BiFunction) -> <init>
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$1OptionalState -> com.google.common.collect.Streams$1OptionalState:
    boolean set -> set
    java.lang.Object value -> value
    void <init>() -> <init>
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
com.google.common.collect.Streams$1Splitr -> com.google.common.collect.Streams$1Splitr:
    java.lang.Object holder -> holder
    com.google.common.collect.Streams$FunctionWithIndex val$function -> val$function
    void <init>(java.util.Spliterator,long,com.google.common.collect.Streams$FunctionWithIndex) -> <init>
    void accept(java.lang.Object) -> accept
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    com.google.common.collect.Streams$1Splitr createSplit(java.util.Spliterator,long) -> createSplit
    com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> createSplit
com.google.common.collect.Streams$2 -> com.google.common.collect.Streams$2:
    long index -> index
    java.util.Iterator val$fromIterator -> val$fromIterator
    com.google.common.collect.Streams$FunctionWithIndex val$function -> val$function
    void <init>(long,int,java.util.Iterator,com.google.common.collect.Streams$FunctionWithIndex) -> <init>
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$2Splitr -> com.google.common.collect.Streams$2Splitr:
    int holder -> holder
    com.google.common.collect.Streams$IntFunctionWithIndex val$function -> val$function
    void <init>(java.util.Spliterator$OfInt,long,com.google.common.collect.Streams$IntFunctionWithIndex) -> <init>
    void accept(int) -> accept
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    com.google.common.collect.Streams$2Splitr createSplit(java.util.Spliterator$OfInt,long) -> createSplit
    com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> createSplit
com.google.common.collect.Streams$3 -> com.google.common.collect.Streams$3:
    long index -> index
    java.util.PrimitiveIterator$OfInt val$fromIterator -> val$fromIterator
    com.google.common.collect.Streams$IntFunctionWithIndex val$function -> val$function
    void <init>(long,int,java.util.PrimitiveIterator$OfInt,com.google.common.collect.Streams$IntFunctionWithIndex) -> <init>
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$3Splitr -> com.google.common.collect.Streams$3Splitr:
    long holder -> holder
    com.google.common.collect.Streams$LongFunctionWithIndex val$function -> val$function
    void <init>(java.util.Spliterator$OfLong,long,com.google.common.collect.Streams$LongFunctionWithIndex) -> <init>
    void accept(long) -> accept
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    com.google.common.collect.Streams$3Splitr createSplit(java.util.Spliterator$OfLong,long) -> createSplit
    com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> createSplit
com.google.common.collect.Streams$4 -> com.google.common.collect.Streams$4:
    long index -> index
    java.util.PrimitiveIterator$OfLong val$fromIterator -> val$fromIterator
    com.google.common.collect.Streams$LongFunctionWithIndex val$function -> val$function
    void <init>(long,int,java.util.PrimitiveIterator$OfLong,com.google.common.collect.Streams$LongFunctionWithIndex) -> <init>
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$4Splitr -> com.google.common.collect.Streams$4Splitr:
    double holder -> holder
    com.google.common.collect.Streams$DoubleFunctionWithIndex val$function -> val$function
    void <init>(java.util.Spliterator$OfDouble,long,com.google.common.collect.Streams$DoubleFunctionWithIndex) -> <init>
    void accept(double) -> accept
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
    com.google.common.collect.Streams$4Splitr createSplit(java.util.Spliterator$OfDouble,long) -> createSplit
    com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> createSplit
com.google.common.collect.Streams$5 -> com.google.common.collect.Streams$5:
    long index -> index
    java.util.PrimitiveIterator$OfDouble val$fromIterator -> val$fromIterator
    com.google.common.collect.Streams$DoubleFunctionWithIndex val$function -> val$function
    void <init>(long,int,java.util.PrimitiveIterator$OfDouble,com.google.common.collect.Streams$DoubleFunctionWithIndex) -> <init>
    boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
com.google.common.collect.Streams$DoubleFunctionWithIndex -> com.google.common.collect.Streams$DoubleFunctionWithIndex:
    java.lang.Object apply(double,long) -> apply
com.google.common.collect.Streams$FunctionWithIndex -> com.google.common.collect.Streams$FunctionWithIndex:
    java.lang.Object apply(java.lang.Object,long) -> apply
com.google.common.collect.Streams$IntFunctionWithIndex -> com.google.common.collect.Streams$IntFunctionWithIndex:
    java.lang.Object apply(int,long) -> apply
com.google.common.collect.Streams$LongFunctionWithIndex -> com.google.common.collect.Streams$LongFunctionWithIndex:
    java.lang.Object apply(long,long) -> apply
com.google.common.collect.Streams$MapWithIndexSpliterator -> com.google.common.collect.Streams$MapWithIndexSpliterator:
    java.util.Spliterator fromSpliterator -> fromSpliterator
    long index -> index
    void <init>(java.util.Spliterator,long) -> <init>
    com.google.common.collect.Streams$MapWithIndexSpliterator createSplit(java.util.Spliterator,long) -> createSplit
    com.google.common.collect.Streams$MapWithIndexSpliterator trySplit() -> trySplit
    long estimateSize() -> estimateSize
    int characteristics() -> characteristics
    java.util.Spliterator trySplit() -> trySplit
com.google.common.collect.Streams$TemporaryPair -> com.google.common.collect.Streams$TemporaryPair:
    java.lang.Object a -> a
    java.lang.Object b -> b
    void <init>(java.lang.Object,java.lang.Object) -> <init>
com.google.common.collect.Synchronized -> com.google.common.collect.Synchronized:
    void <init>() -> <init>
    java.util.Collection collection(java.util.Collection,java.lang.Object) -> collection
    java.util.Set set(java.util.Set,java.lang.Object) -> set
    java.util.SortedSet sortedSet(java.util.SortedSet,java.lang.Object) -> sortedSet
    java.util.List list(java.util.List,java.lang.Object) -> list
    com.google.common.collect.Multiset multiset(com.google.common.collect.Multiset,java.lang.Object) -> multiset
    com.google.common.collect.Multimap multimap(com.google.common.collect.Multimap,java.lang.Object) -> multimap
    com.google.common.collect.ListMultimap listMultimap(com.google.common.collect.ListMultimap,java.lang.Object) -> listMultimap
    com.google.common.collect.SetMultimap setMultimap(com.google.common.collect.SetMultimap,java.lang.Object) -> setMultimap
    com.google.common.collect.SortedSetMultimap sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object) -> sortedSetMultimap
    java.util.Collection typePreservingCollection(java.util.Collection,java.lang.Object) -> typePreservingCollection
    java.util.Set typePreservingSet(java.util.Set,java.lang.Object) -> typePreservingSet
    java.util.Map map(java.util.Map,java.lang.Object) -> map
    java.util.SortedMap sortedMap(java.util.SortedMap,java.lang.Object) -> sortedMap
    com.google.common.collect.BiMap biMap(com.google.common.collect.BiMap,java.lang.Object) -> biMap
    java.util.NavigableSet navigableSet(java.util.NavigableSet,java.lang.Object) -> navigableSet
    java.util.NavigableSet navigableSet(java.util.NavigableSet) -> navigableSet
    java.util.NavigableMap navigableMap(java.util.NavigableMap) -> navigableMap
    java.util.NavigableMap navigableMap(java.util.NavigableMap,java.lang.Object) -> navigableMap
    java.util.Map$Entry nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object) -> nullableSynchronizedEntry
    java.util.Queue queue(java.util.Queue,java.lang.Object) -> queue
    java.util.Deque deque(java.util.Deque,java.lang.Object) -> deque
    com.google.common.collect.Table table(com.google.common.collect.Table,java.lang.Object) -> table
    java.util.SortedSet access$100(java.util.SortedSet,java.lang.Object) -> access$100
    java.util.List access$200(java.util.List,java.lang.Object) -> access$200
    java.util.Set access$300(java.util.Set,java.lang.Object) -> access$300
    java.util.Collection access$400(java.util.Collection,java.lang.Object) -> access$400
    java.util.Collection access$500(java.util.Collection,java.lang.Object) -> access$500
    java.util.Map$Entry access$700(java.util.Map$Entry,java.lang.Object) -> access$700
com.google.common.collect.Synchronized$1 -> com.google.common.collect.Synchronized$1:
com.google.common.collect.Synchronized$SynchronizedAsMap -> com.google.common.collect.Synchronized$SynchronizedAsMap:
    java.util.Set asMapEntrySet -> asMapEntrySet
    java.util.Collection asMapValues -> asMapValues
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,java.lang.Object) -> <init>
    java.util.Collection get(java.lang.Object) -> get
    java.util.Set entrySet() -> entrySet
    java.util.Collection values() -> values
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
com.google.common.collect.Synchronized$SynchronizedAsMapEntries -> com.google.common.collect.Synchronized$SynchronizedAsMapEntries:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Set,java.lang.Object) -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean equals(java.lang.Object) -> equals
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 -> com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1:
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries this$0 -> this$0
    void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapEntries,java.util.Iterator) -> <init>
    java.util.Map$Entry transform(java.util.Map$Entry) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1 -> com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1:
    java.util.Map$Entry val$entry -> val$entry
    com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1 this$1 -> this$1
    void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1,java.util.Map$Entry) -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.util.Collection getValue() -> getValue
    java.lang.Object getValue() -> getValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedAsMapValues -> com.google.common.collect.Synchronized$SynchronizedAsMapValues:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Collection,java.lang.Object) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.collect.Synchronized$SynchronizedAsMapValues$1 -> com.google.common.collect.Synchronized$SynchronizedAsMapValues$1:
    com.google.common.collect.Synchronized$SynchronizedAsMapValues this$0 -> this$0
    void <init>(com.google.common.collect.Synchronized$SynchronizedAsMapValues,java.util.Iterator) -> <init>
    java.util.Collection transform(java.util.Collection) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.Synchronized$SynchronizedBiMap -> com.google.common.collect.Synchronized$SynchronizedBiMap:
    java.util.Set valueSet -> valueSet
    com.google.common.collect.BiMap inverse -> inverse
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap) -> <init>
    com.google.common.collect.BiMap delegate() -> delegate
    java.util.Set values() -> values
    java.lang.Object forcePut(java.lang.Object,java.lang.Object) -> forcePut
    com.google.common.collect.BiMap inverse() -> inverse
    java.util.Collection values() -> values
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap,com.google.common.collect.Synchronized$1) -> <init>
com.google.common.collect.Synchronized$SynchronizedCollection -> com.google.common.collect.Synchronized$SynchronizedCollection:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Collection,java.lang.Object) -> <init>
    java.util.Collection delegate() -> delegate
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    java.util.Spliterator spliterator() -> spliterator
    java.util.stream.Stream stream() -> stream
    java.util.stream.Stream parallelStream() -> parallelStream
    void forEach(java.util.function.Consumer) -> forEach
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean removeIf(java.util.function.Predicate) -> removeIf
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object delegate() -> delegate
    void <init>(java.util.Collection,java.lang.Object,com.google.common.collect.Synchronized$1) -> <init>
com.google.common.collect.Synchronized$SynchronizedDeque -> com.google.common.collect.Synchronized$SynchronizedDeque:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Deque,java.lang.Object) -> <init>
    java.util.Deque delegate() -> delegate
    void addFirst(java.lang.Object) -> addFirst
    void addLast(java.lang.Object) -> addLast
    boolean offerFirst(java.lang.Object) -> offerFirst
    boolean offerLast(java.lang.Object) -> offerLast
    java.lang.Object removeFirst() -> removeFirst
    java.lang.Object removeLast() -> removeLast
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.lang.Object getFirst() -> getFirst
    java.lang.Object getLast() -> getLast
    java.lang.Object peekFirst() -> peekFirst
    java.lang.Object peekLast() -> peekLast
    boolean removeFirstOccurrence(java.lang.Object) -> removeFirstOccurrence
    boolean removeLastOccurrence(java.lang.Object) -> removeLastOccurrence
    void push(java.lang.Object) -> push
    java.lang.Object pop() -> pop
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedEntry -> com.google.common.collect.Synchronized$SynchronizedEntry:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map$Entry,java.lang.Object) -> <init>
    java.util.Map$Entry delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedList -> com.google.common.collect.Synchronized$SynchronizedList:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List,java.lang.Object) -> <init>
    java.util.List delegate() -> delegate
    void add(int,java.lang.Object) -> add
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object get(int) -> get
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    void replaceAll(java.util.function.UnaryOperator) -> replaceAll
    void sort(java.util.Comparator) -> sort
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedListMultimap -> com.google.common.collect.Synchronized$SynchronizedListMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.ListMultimap,java.lang.Object) -> <init>
    com.google.common.collect.ListMultimap delegate() -> delegate
    java.util.List get(java.lang.Object) -> get
    java.util.List removeAll(java.lang.Object) -> removeAll
    java.util.List replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedMap -> com.google.common.collect.Synchronized$SynchronizedMap:
    java.util.Set keySet -> keySet
    java.util.Collection values -> values
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Map,java.lang.Object) -> <init>
    java.util.Map delegate() -> delegate
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set entrySet() -> entrySet
    void forEach(java.util.function.BiConsumer) -> forEach
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getOrDefault(java.lang.Object,java.lang.Object) -> getOrDefault
    boolean isEmpty() -> isEmpty
    java.util.Set keySet() -> keySet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    boolean replace(java.lang.Object,java.lang.Object,java.lang.Object) -> replace
    java.lang.Object replace(java.lang.Object,java.lang.Object) -> replace
    java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function) -> computeIfAbsent
    java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction) -> computeIfPresent
    java.lang.Object compute(java.lang.Object,java.util.function.BiFunction) -> compute
    java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction) -> merge
    void putAll(java.util.Map) -> putAll
    void replaceAll(java.util.function.BiFunction) -> replaceAll
    java.lang.Object remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    int size() -> size
    java.util.Collection values() -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedMultimap -> com.google.common.collect.Synchronized$SynchronizedMultimap:
    java.util.Set keySet -> keySet
    java.util.Collection valuesCollection -> valuesCollection
    java.util.Collection entries -> entries
    java.util.Map asMap -> asMap
    com.google.common.collect.Multiset keys -> keys
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.Multimap delegate() -> delegate
    void <init>(com.google.common.collect.Multimap,java.lang.Object) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    java.util.Collection get(java.lang.Object) -> get
    boolean put(java.lang.Object,java.lang.Object) -> put
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Collection entries() -> entries
    void forEach(java.util.function.BiConsumer) -> forEach
    java.util.Map asMap() -> asMap
    com.google.common.collect.Multiset keys() -> keys
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedMultiset -> com.google.common.collect.Synchronized$SynchronizedMultiset:
    java.util.Set elementSet -> elementSet
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Multiset,java.lang.Object) -> <init>
    com.google.common.collect.Multiset delegate() -> delegate
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    java.util.Set elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedNavigableMap -> com.google.common.collect.Synchronized$SynchronizedNavigableMap:
    java.util.NavigableSet descendingKeySet -> descendingKeySet
    java.util.NavigableMap descendingMap -> descendingMap
    java.util.NavigableSet navigableKeySet -> navigableKeySet
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.NavigableMap,java.lang.Object) -> <init>
    java.util.NavigableMap delegate() -> delegate
    java.util.Map$Entry ceilingEntry(java.lang.Object) -> ceilingEntry
    java.lang.Object ceilingKey(java.lang.Object) -> ceilingKey
    java.util.NavigableSet descendingKeySet() -> descendingKeySet
    java.util.NavigableMap descendingMap() -> descendingMap
    java.util.Map$Entry firstEntry() -> firstEntry
    java.util.Map$Entry floorEntry(java.lang.Object) -> floorEntry
    java.lang.Object floorKey(java.lang.Object) -> floorKey
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.Map$Entry higherEntry(java.lang.Object) -> higherEntry
    java.lang.Object higherKey(java.lang.Object) -> higherKey
    java.util.Map$Entry lastEntry() -> lastEntry
    java.util.Map$Entry lowerEntry(java.lang.Object) -> lowerEntry
    java.lang.Object lowerKey(java.lang.Object) -> lowerKey
    java.util.Set keySet() -> keySet
    java.util.NavigableSet navigableKeySet() -> navigableKeySet
    java.util.Map$Entry pollFirstEntry() -> pollFirstEntry
    java.util.Map$Entry pollLastEntry() -> pollLastEntry
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.SortedMap delegate() -> delegate
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedNavigableSet -> com.google.common.collect.Synchronized$SynchronizedNavigableSet:
    java.util.NavigableSet descendingSet -> descendingSet
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.NavigableSet,java.lang.Object) -> <init>
    java.util.NavigableSet delegate() -> delegate
    java.lang.Object ceiling(java.lang.Object) -> ceiling
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.NavigableSet descendingSet() -> descendingSet
    java.lang.Object floor(java.lang.Object) -> floor
    java.util.NavigableSet headSet(java.lang.Object,boolean) -> headSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.lang.Object higher(java.lang.Object) -> higher
    java.lang.Object lower(java.lang.Object) -> lower
    java.lang.Object pollFirst() -> pollFirst
    java.lang.Object pollLast() -> pollLast
    java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean) -> subSet
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.NavigableSet tailSet(java.lang.Object,boolean) -> tailSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.util.SortedSet delegate() -> delegate
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedObject -> com.google.common.collect.Synchronized$SynchronizedObject:
    java.lang.Object delegate -> delegate
    java.lang.Object mutex -> mutex
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object delegate() -> delegate
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
com.google.common.collect.Synchronized$SynchronizedQueue -> com.google.common.collect.Synchronized$SynchronizedQueue:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Queue,java.lang.Object) -> <init>
    java.util.Queue delegate() -> delegate
    java.lang.Object element() -> element
    boolean offer(java.lang.Object) -> offer
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    java.lang.Object remove() -> remove
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedRandomAccessList -> com.google.common.collect.Synchronized$SynchronizedRandomAccessList:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.List,java.lang.Object) -> <init>
com.google.common.collect.Synchronized$SynchronizedSet -> com.google.common.collect.Synchronized$SynchronizedSet:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Set,java.lang.Object) -> <init>
    java.util.Set delegate() -> delegate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSetMultimap -> com.google.common.collect.Synchronized$SynchronizedSetMultimap:
    java.util.Set entrySet -> entrySet
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SetMultimap,java.lang.Object) -> <init>
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Set get(java.lang.Object) -> get
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set entries() -> entries
    java.util.Collection entries() -> entries
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Collection get(java.lang.Object) -> get
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSortedMap -> com.google.common.collect.Synchronized$SynchronizedSortedMap:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.SortedMap,java.lang.Object) -> <init>
    java.util.SortedMap delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.lang.Object firstKey() -> firstKey
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.util.Map delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSortedSet -> com.google.common.collect.Synchronized$SynchronizedSortedSet:
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.SortedSet,java.lang.Object) -> <init>
    java.util.SortedSet delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.util.SortedSet subSet(java.lang.Object,java.lang.Object) -> subSet
    java.util.SortedSet headSet(java.lang.Object) -> headSet
    java.util.SortedSet tailSet(java.lang.Object) -> tailSet
    java.lang.Object first() -> first
    java.lang.Object last() -> last
    java.util.Set delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap -> com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SortedSetMultimap,java.lang.Object) -> <init>
    com.google.common.collect.SortedSetMultimap delegate() -> delegate
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Comparator valueComparator() -> valueComparator
    java.util.Set replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.Set removeAll(java.lang.Object) -> removeAll
    java.util.Set get(java.lang.Object) -> get
    com.google.common.collect.SetMultimap delegate() -> delegate
    java.util.Collection get(java.lang.Object) -> get
    java.util.Collection removeAll(java.lang.Object) -> removeAll
    java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    com.google.common.collect.Multimap delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedTable -> com.google.common.collect.Synchronized$SynchronizedTable:
    void <init>(com.google.common.collect.Table,java.lang.Object) -> <init>
    com.google.common.collect.Table delegate() -> delegate
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    int size() -> size
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Map column(java.lang.Object) -> column
    java.util.Set cellSet() -> cellSet
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Collection values() -> values
    java.util.Map rowMap() -> rowMap
    java.util.Map columnMap() -> columnMap
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object delegate() -> delegate
com.google.common.collect.Synchronized$SynchronizedTable$1 -> com.google.common.collect.Synchronized$SynchronizedTable$1:
    com.google.common.collect.Synchronized$SynchronizedTable this$0 -> this$0
    void <init>(com.google.common.collect.Synchronized$SynchronizedTable) -> <init>
    java.util.Map apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Synchronized$SynchronizedTable$2 -> com.google.common.collect.Synchronized$SynchronizedTable$2:
    com.google.common.collect.Synchronized$SynchronizedTable this$0 -> this$0
    void <init>(com.google.common.collect.Synchronized$SynchronizedTable) -> <init>
    java.util.Map apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Table -> com.google.common.collect.Table:
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean isEmpty() -> isEmpty
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Map column(java.lang.Object) -> column
    java.util.Set cellSet() -> cellSet
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Collection values() -> values
    java.util.Map rowMap() -> rowMap
    java.util.Map columnMap() -> columnMap
com.google.common.collect.Table$Cell -> com.google.common.collect.Table$Cell:
    java.lang.Object getRowKey() -> getRowKey
    java.lang.Object getColumnKey() -> getColumnKey
    java.lang.Object getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.collect.Tables -> com.google.common.collect.Tables:
    com.google.common.base.Function UNMODIFIABLE_WRAPPER -> UNMODIFIABLE_WRAPPER
    void <init>() -> <init>
    java.util.stream.Collector toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier) -> toTable
    java.util.stream.Collector toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier) -> toTable
    void merge(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator) -> merge
    com.google.common.collect.Table$Cell immutableCell(java.lang.Object,java.lang.Object,java.lang.Object) -> immutableCell
    com.google.common.collect.Table transpose(com.google.common.collect.Table) -> transpose
    com.google.common.collect.Table newCustomTable(java.util.Map,com.google.common.base.Supplier) -> newCustomTable
    com.google.common.collect.Table transformValues(com.google.common.collect.Table,com.google.common.base.Function) -> transformValues
    com.google.common.collect.Table unmodifiableTable(com.google.common.collect.Table) -> unmodifiableTable
    com.google.common.collect.RowSortedTable unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable) -> unmodifiableRowSortedTable
    com.google.common.base.Function unmodifiableWrapper() -> unmodifiableWrapper
    com.google.common.collect.Table synchronizedTable(com.google.common.collect.Table) -> synchronizedTable
    boolean equalsImpl(com.google.common.collect.Table,java.lang.Object) -> equalsImpl
    com.google.common.collect.Table lambda$toTable$2(java.util.function.BinaryOperator,com.google.common.collect.Table,com.google.common.collect.Table) -> lambda$toTable$2
    void lambda$toTable$1(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,com.google.common.collect.Table,java.lang.Object) -> lambda$toTable$1
    java.lang.Object lambda$toTable$0(java.lang.Object,java.lang.Object) -> lambda$toTable$0
    com.google.common.base.Function access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.collect.Tables$1 -> com.google.common.collect.Tables$1:
    void <init>() -> <init>
    java.util.Map apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$AbstractCell -> com.google.common.collect.Tables$AbstractCell:
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.collect.Tables$ImmutableCell -> com.google.common.collect.Tables$ImmutableCell:
    java.lang.Object rowKey -> rowKey
    java.lang.Object columnKey -> columnKey
    java.lang.Object value -> value
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getRowKey() -> getRowKey
    java.lang.Object getColumnKey() -> getColumnKey
    java.lang.Object getValue() -> getValue
com.google.common.collect.Tables$TransformedTable -> com.google.common.collect.Tables$TransformedTable:
    com.google.common.collect.Table fromTable -> fromTable
    com.google.common.base.Function function -> function
    void <init>(com.google.common.collect.Table,com.google.common.base.Function) -> <init>
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    int size() -> size
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Map column(java.lang.Object) -> column
    com.google.common.base.Function cellFunction() -> cellFunction
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Spliterator cellSpliterator() -> cellSpliterator
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Collection createValues() -> createValues
    java.util.Map rowMap() -> rowMap
    java.util.Map columnMap() -> columnMap
com.google.common.collect.Tables$TransformedTable$1 -> com.google.common.collect.Tables$TransformedTable$1:
    com.google.common.collect.Tables$TransformedTable this$0 -> this$0
    void <init>(com.google.common.collect.Tables$TransformedTable) -> <init>
    com.google.common.collect.Table$Cell apply(com.google.common.collect.Table$Cell) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$TransformedTable$2 -> com.google.common.collect.Tables$TransformedTable$2:
    com.google.common.collect.Tables$TransformedTable this$0 -> this$0
    void <init>(com.google.common.collect.Tables$TransformedTable) -> <init>
    java.util.Map apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$TransformedTable$3 -> com.google.common.collect.Tables$TransformedTable$3:
    com.google.common.collect.Tables$TransformedTable this$0 -> this$0
    void <init>(com.google.common.collect.Tables$TransformedTable) -> <init>
    java.util.Map apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$TransposeTable -> com.google.common.collect.Tables$TransposeTable:
    com.google.common.collect.Table original -> original
    com.google.common.base.Function TRANSPOSE_CELL -> TRANSPOSE_CELL
    void <init>(com.google.common.collect.Table) -> <init>
    void clear() -> clear
    java.util.Map column(java.lang.Object) -> column
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Map columnMap() -> columnMap
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    int size() -> size
    java.util.Collection values() -> values
    java.util.Iterator cellIterator() -> cellIterator
    java.util.Spliterator cellSpliterator() -> cellSpliterator
    void <clinit>() -> <clinit>
com.google.common.collect.Tables$TransposeTable$1 -> com.google.common.collect.Tables$TransposeTable$1:
    void <init>() -> <init>
    com.google.common.collect.Table$Cell apply(com.google.common.collect.Table$Cell) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.Tables$UnmodifiableRowSortedMap -> com.google.common.collect.Tables$UnmodifiableRowSortedMap:
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.RowSortedTable) -> <init>
    com.google.common.collect.RowSortedTable delegate() -> delegate
    java.util.SortedMap rowMap() -> rowMap
    java.util.SortedSet rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    java.util.Set rowKeySet() -> rowKeySet
    com.google.common.collect.Table delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.collect.Tables$UnmodifiableTable -> com.google.common.collect.Tables$UnmodifiableTable:
    com.google.common.collect.Table delegate -> delegate
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.Table) -> <init>
    com.google.common.collect.Table delegate() -> delegate
    java.util.Set cellSet() -> cellSet
    void clear() -> clear
    java.util.Map column(java.lang.Object) -> column
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Map columnMap() -> columnMap
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void putAll(com.google.common.collect.Table) -> putAll
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.util.Map row(java.lang.Object) -> row
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map rowMap() -> rowMap
    java.util.Collection values() -> values
    java.lang.Object delegate() -> delegate
com.google.common.collect.TopKSelector -> com.google.common.collect.TopKSelector:
    int k -> k
    java.util.Comparator comparator -> comparator
    java.lang.Object[] buffer -> buffer
    int bufferSize -> bufferSize
    java.lang.Object threshold -> threshold
    com.google.common.collect.TopKSelector least(int) -> least
    com.google.common.collect.TopKSelector least(int,java.util.Comparator) -> least
    com.google.common.collect.TopKSelector greatest(int) -> greatest
    com.google.common.collect.TopKSelector greatest(int,java.util.Comparator) -> greatest
    void <init>(java.util.Comparator,int) -> <init>
    void offer(java.lang.Object) -> offer
    void trim() -> trim
    int partition(int,int,int) -> partition
    void swap(int,int) -> swap
    com.google.common.collect.TopKSelector combine(com.google.common.collect.TopKSelector) -> combine
    void offerAll(java.lang.Iterable) -> offerAll
    void offerAll(java.util.Iterator) -> offerAll
    java.util.List topK() -> topK
com.google.common.collect.TransformedIterator -> com.google.common.collect.TransformedIterator:
    java.util.Iterator backingIterator -> backingIterator
    void <init>(java.util.Iterator) -> <init>
    java.lang.Object transform(java.lang.Object) -> transform
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.common.collect.TransformedListIterator -> com.google.common.collect.TransformedListIterator:
    void <init>(java.util.ListIterator) -> <init>
    java.util.ListIterator backingIterator() -> backingIterator
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
com.google.common.collect.TreeBasedTable -> com.google.common.collect.TreeBasedTable:
    java.util.Comparator columnComparator -> columnComparator
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.TreeBasedTable create() -> create
    com.google.common.collect.TreeBasedTable create(java.util.Comparator,java.util.Comparator) -> create
    com.google.common.collect.TreeBasedTable create(com.google.common.collect.TreeBasedTable) -> create
    void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    java.util.Comparator rowComparator() -> rowComparator
    java.util.Comparator columnComparator() -> columnComparator
    java.util.SortedMap row(java.lang.Object) -> row
    java.util.SortedSet rowKeySet() -> rowKeySet
    java.util.SortedMap rowMap() -> rowMap
    java.util.Iterator createColumnKeyIterator() -> createColumnKeyIterator
    java.util.Map rowMap() -> rowMap
    java.util.Set rowKeySet() -> rowKeySet
    java.util.Map row(java.lang.Object) -> row
    java.util.Map columnMap() -> columnMap
    java.util.Collection values() -> values
    java.util.Set columnKeySet() -> columnKeySet
    java.util.Map column(java.lang.Object) -> column
    java.util.Set cellSet() -> cellSet
    java.lang.Object remove(java.lang.Object,java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object) -> put
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object,java.lang.Object) -> get
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsRow(java.lang.Object) -> containsRow
    boolean containsColumn(java.lang.Object) -> containsColumn
    boolean contains(java.lang.Object,java.lang.Object) -> contains
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void putAll(com.google.common.collect.Table) -> putAll
com.google.common.collect.TreeBasedTable$1 -> com.google.common.collect.TreeBasedTable$1:
    com.google.common.collect.TreeBasedTable this$0 -> this$0
    void <init>(com.google.common.collect.TreeBasedTable) -> <init>
    java.util.Iterator apply(java.util.Map) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.collect.TreeBasedTable$2 -> com.google.common.collect.TreeBasedTable$2:
    java.lang.Object lastValue -> lastValue
    java.util.Iterator val$merged -> val$merged
    java.util.Comparator val$comparator -> val$comparator
    com.google.common.collect.TreeBasedTable this$0 -> this$0
    void <init>(com.google.common.collect.TreeBasedTable,java.util.Iterator,java.util.Comparator) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeBasedTable$Factory -> com.google.common.collect.TreeBasedTable$Factory:
    java.util.Comparator comparator -> comparator
    long serialVersionUID -> serialVersionUID
    void <init>(java.util.Comparator) -> <init>
    java.util.TreeMap get() -> get
    java.lang.Object get() -> get
com.google.common.collect.TreeBasedTable$TreeRow -> com.google.common.collect.TreeBasedTable$TreeRow:
    java.lang.Object lowerBound -> lowerBound
    java.lang.Object upperBound -> upperBound
    java.util.SortedMap wholeRow -> wholeRow
    com.google.common.collect.TreeBasedTable this$0 -> this$0
    void <init>(com.google.common.collect.TreeBasedTable,java.lang.Object) -> <init>
    void <init>(com.google.common.collect.TreeBasedTable,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    java.util.SortedSet keySet() -> keySet
    java.util.Comparator comparator() -> comparator
    int compare(java.lang.Object,java.lang.Object) -> compare
    boolean rangeContains(java.lang.Object) -> rangeContains
    java.util.SortedMap subMap(java.lang.Object,java.lang.Object) -> subMap
    java.util.SortedMap headMap(java.lang.Object) -> headMap
    java.util.SortedMap tailMap(java.lang.Object) -> tailMap
    java.lang.Object firstKey() -> firstKey
    java.lang.Object lastKey() -> lastKey
    java.util.SortedMap wholeRow() -> wholeRow
    java.util.SortedMap backingRowMap() -> backingRowMap
    java.util.SortedMap computeBackingRowMap() -> computeBackingRowMap
    void maintainEmptyInvariant() -> maintainEmptyInvariant
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.util.Map computeBackingRowMap() -> computeBackingRowMap
    java.util.Map backingRowMap() -> backingRowMap
    java.util.Set keySet() -> keySet
com.google.common.collect.TreeMultimap -> com.google.common.collect.TreeMultimap:
    java.util.Comparator keyComparator -> keyComparator
    java.util.Comparator valueComparator -> valueComparator
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.TreeMultimap create() -> create
    com.google.common.collect.TreeMultimap create(java.util.Comparator,java.util.Comparator) -> create
    com.google.common.collect.TreeMultimap create(com.google.common.collect.Multimap) -> create
    void <init>(java.util.Comparator,java.util.Comparator) -> <init>
    void <init>(java.util.Comparator,java.util.Comparator,com.google.common.collect.Multimap) -> <init>
    java.util.Map createAsMap() -> createAsMap
    java.util.SortedSet createCollection() -> createCollection
    java.util.Collection createCollection(java.lang.Object) -> createCollection
    java.util.Comparator keyComparator() -> keyComparator
    java.util.Comparator valueComparator() -> valueComparator
    java.util.NavigableSet get(java.lang.Object) -> get
    java.util.NavigableSet keySet() -> keySet
    java.util.NavigableMap asMap() -> asMap
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.util.SortedSet keySet() -> keySet
    java.util.SortedMap asMap() -> asMap
    java.util.Collection values() -> values
    java.util.Map asMap() -> asMap
    java.util.SortedSet replaceValues(java.lang.Object,java.lang.Iterable) -> replaceValues
    java.util.SortedSet removeAll(java.lang.Object) -> removeAll
    java.util.SortedSet get(java.lang.Object) -> get
    java.util.Set get(java.lang.Object) -> get
    java.util.Set keySet() -> keySet
    java.util.Collection get(java.lang.Object) -> get
    boolean equals(java.lang.Object) -> equals
    boolean put(java.lang.Object,java.lang.Object) -> put
    java.util.Set entries() -> entries
    java.util.Set createCollection() -> createCollection
    void forEach(java.util.function.BiConsumer) -> forEach
    void clear() -> clear
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    java.util.Collection createCollection() -> createCollection
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    com.google.common.collect.Multiset keys() -> keys
    boolean putAll(com.google.common.collect.Multimap) -> putAll
    boolean putAll(java.lang.Object,java.lang.Iterable) -> putAll
    boolean remove(java.lang.Object,java.lang.Object) -> remove
    boolean containsEntry(java.lang.Object,java.lang.Object) -> containsEntry
    boolean containsValue(java.lang.Object) -> containsValue
    boolean isEmpty() -> isEmpty
com.google.common.collect.TreeMultiset -> com.google.common.collect.TreeMultiset:
    com.google.common.collect.TreeMultiset$Reference rootReference -> rootReference
    com.google.common.collect.GeneralRange range -> range
    com.google.common.collect.TreeMultiset$AvlNode header -> header
    long serialVersionUID -> serialVersionUID
    com.google.common.collect.TreeMultiset create() -> create
    com.google.common.collect.TreeMultiset create(java.util.Comparator) -> create
    com.google.common.collect.TreeMultiset create(java.lang.Iterable) -> create
    void <init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode) -> <init>
    void <init>(java.util.Comparator) -> <init>
    long aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate) -> aggregateForEntries
    long aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode) -> aggregateBelowRange
    long aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode) -> aggregateAboveRange
    int size() -> size
    int distinctElements() -> distinctElements
    int distinctElements(com.google.common.collect.TreeMultiset$AvlNode) -> distinctElements
    int count(java.lang.Object) -> count
    int add(java.lang.Object,int) -> add
    int remove(java.lang.Object,int) -> remove
    int setCount(java.lang.Object,int) -> setCount
    boolean setCount(java.lang.Object,int,int) -> setCount
    void clear() -> clear
    com.google.common.collect.Multiset$Entry wrapEntry(com.google.common.collect.TreeMultiset$AvlNode) -> wrapEntry
    com.google.common.collect.TreeMultiset$AvlNode firstNode() -> firstNode
    com.google.common.collect.TreeMultiset$AvlNode lastNode() -> lastNode
    java.util.Iterator elementIterator() -> elementIterator
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    void forEachEntry(java.util.function.ObjIntConsumer) -> forEachEntry
    java.util.Iterator iterator() -> iterator
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> successor
    void successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> successor
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet elementSet() -> elementSet
    java.util.Set entrySet() -> entrySet
    boolean contains(java.lang.Object) -> contains
    boolean isEmpty() -> isEmpty
    com.google.common.collect.TreeMultiset$AvlNode access$1200(com.google.common.collect.TreeMultiset) -> access$1200
    com.google.common.collect.GeneralRange access$1300(com.google.common.collect.TreeMultiset) -> access$1300
    com.google.common.collect.Multiset$Entry access$1400(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode) -> access$1400
    com.google.common.collect.TreeMultiset$AvlNode access$1500(com.google.common.collect.TreeMultiset) -> access$1500
    com.google.common.collect.TreeMultiset$AvlNode access$1600(com.google.common.collect.TreeMultiset) -> access$1600
    void access$1700(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$1700
    void access$1800(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$1800
com.google.common.collect.TreeMultiset$1 -> com.google.common.collect.TreeMultiset$1:
    com.google.common.collect.TreeMultiset$AvlNode val$baseEntry -> val$baseEntry
    com.google.common.collect.TreeMultiset this$0 -> this$0
    void <init>(com.google.common.collect.TreeMultiset,com.google.common.collect.TreeMultiset$AvlNode) -> <init>
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
com.google.common.collect.TreeMultiset$2 -> com.google.common.collect.TreeMultiset$2:
    com.google.common.collect.TreeMultiset$AvlNode current -> current
    com.google.common.collect.Multiset$Entry prevEntry -> prevEntry
    com.google.common.collect.TreeMultiset this$0 -> this$0
    void <init>(com.google.common.collect.TreeMultiset) -> <init>
    boolean hasNext() -> hasNext
    com.google.common.collect.Multiset$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.TreeMultiset$3 -> com.google.common.collect.TreeMultiset$3:
    com.google.common.collect.TreeMultiset$AvlNode current -> current
    com.google.common.collect.Multiset$Entry prevEntry -> prevEntry
    com.google.common.collect.TreeMultiset this$0 -> this$0
    void <init>(com.google.common.collect.TreeMultiset) -> <init>
    boolean hasNext() -> hasNext
    com.google.common.collect.Multiset$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.google.common.collect.TreeMultiset$4 -> com.google.common.collect.TreeMultiset$4:
    int[] $SwitchMap$com$google$common$collect$BoundType -> $SwitchMap$com$google$common$collect$BoundType
    void <clinit>() -> <clinit>
com.google.common.collect.TreeMultiset$Aggregate -> com.google.common.collect.TreeMultiset$Aggregate:
    com.google.common.collect.TreeMultiset$Aggregate SIZE -> SIZE
    com.google.common.collect.TreeMultiset$Aggregate DISTINCT -> DISTINCT
    com.google.common.collect.TreeMultiset$Aggregate[] $VALUES -> $VALUES
    com.google.common.collect.TreeMultiset$Aggregate[] values() -> values
    com.google.common.collect.TreeMultiset$Aggregate valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> nodeAggregate
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> treeAggregate
    void <init>(java.lang.String,int,com.google.common.collect.TreeMultiset$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.TreeMultiset$Aggregate$1 -> com.google.common.collect.TreeMultiset$Aggregate$1:
    void <init>(java.lang.String,int) -> <init>
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> nodeAggregate
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> treeAggregate
com.google.common.collect.TreeMultiset$Aggregate$2 -> com.google.common.collect.TreeMultiset$Aggregate$2:
    void <init>(java.lang.String,int) -> <init>
    int nodeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> nodeAggregate
    long treeAggregate(com.google.common.collect.TreeMultiset$AvlNode) -> treeAggregate
com.google.common.collect.TreeMultiset$AvlNode -> com.google.common.collect.TreeMultiset$AvlNode:
    java.lang.Object elem -> elem
    int elemCount -> elemCount
    int distinctElements -> distinctElements
    long totalCount -> totalCount
    int height -> height
    com.google.common.collect.TreeMultiset$AvlNode left -> left
    com.google.common.collect.TreeMultiset$AvlNode right -> right
    com.google.common.collect.TreeMultiset$AvlNode pred -> pred
    com.google.common.collect.TreeMultiset$AvlNode succ -> succ
    void <init>(java.lang.Object,int) -> <init>
    int count(java.util.Comparator,java.lang.Object) -> count
    com.google.common.collect.TreeMultiset$AvlNode addRightChild(java.lang.Object,int) -> addRightChild
    com.google.common.collect.TreeMultiset$AvlNode addLeftChild(java.lang.Object,int) -> addLeftChild
    com.google.common.collect.TreeMultiset$AvlNode add(java.util.Comparator,java.lang.Object,int,int[]) -> add
    com.google.common.collect.TreeMultiset$AvlNode remove(java.util.Comparator,java.lang.Object,int,int[]) -> remove
    com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int[]) -> setCount
    com.google.common.collect.TreeMultiset$AvlNode setCount(java.util.Comparator,java.lang.Object,int,int,int[]) -> setCount
    com.google.common.collect.TreeMultiset$AvlNode deleteMe() -> deleteMe
    com.google.common.collect.TreeMultiset$AvlNode removeMin(com.google.common.collect.TreeMultiset$AvlNode) -> removeMin
    com.google.common.collect.TreeMultiset$AvlNode removeMax(com.google.common.collect.TreeMultiset$AvlNode) -> removeMax
    void recomputeMultiset() -> recomputeMultiset
    void recomputeHeight() -> recomputeHeight
    void recompute() -> recompute
    com.google.common.collect.TreeMultiset$AvlNode rebalance() -> rebalance
    int balanceFactor() -> balanceFactor
    com.google.common.collect.TreeMultiset$AvlNode rotateLeft() -> rotateLeft
    com.google.common.collect.TreeMultiset$AvlNode rotateRight() -> rotateRight
    long totalCount(com.google.common.collect.TreeMultiset$AvlNode) -> totalCount
    int height(com.google.common.collect.TreeMultiset$AvlNode) -> height
    com.google.common.collect.TreeMultiset$AvlNode ceiling(java.util.Comparator,java.lang.Object) -> ceiling
    com.google.common.collect.TreeMultiset$AvlNode floor(java.util.Comparator,java.lang.Object) -> floor
    java.lang.Object getElement() -> getElement
    int getCount() -> getCount
    java.lang.String toString() -> toString
    int access$200(com.google.common.collect.TreeMultiset$AvlNode) -> access$200
    long access$300(com.google.common.collect.TreeMultiset$AvlNode) -> access$300
    int access$400(com.google.common.collect.TreeMultiset$AvlNode) -> access$400
    java.lang.Object access$500(com.google.common.collect.TreeMultiset$AvlNode) -> access$500
    com.google.common.collect.TreeMultiset$AvlNode access$600(com.google.common.collect.TreeMultiset$AvlNode) -> access$600
    com.google.common.collect.TreeMultiset$AvlNode access$700(com.google.common.collect.TreeMultiset$AvlNode) -> access$700
    com.google.common.collect.TreeMultiset$AvlNode access$800(com.google.common.collect.TreeMultiset$AvlNode) -> access$800
    int access$202(com.google.common.collect.TreeMultiset$AvlNode,int) -> access$202
    com.google.common.collect.TreeMultiset$AvlNode access$602(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$602
    com.google.common.collect.TreeMultiset$AvlNode access$702(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$702
    com.google.common.collect.TreeMultiset$AvlNode access$902(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$902
    com.google.common.collect.TreeMultiset$AvlNode access$802(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode) -> access$802
    com.google.common.collect.TreeMultiset$AvlNode access$1000(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object) -> access$1000
    com.google.common.collect.TreeMultiset$AvlNode access$1100(com.google.common.collect.TreeMultiset$AvlNode,java.util.Comparator,java.lang.Object) -> access$1100
    com.google.common.collect.TreeMultiset$AvlNode access$900(com.google.common.collect.TreeMultiset$AvlNode) -> access$900
com.google.common.collect.TreeMultiset$Reference -> com.google.common.collect.TreeMultiset$Reference:
    java.lang.Object value -> value
    void <init>() -> <init>
    java.lang.Object get() -> get
    void checkAndSet(java.lang.Object,java.lang.Object) -> checkAndSet
    void clear() -> clear
    void <init>(com.google.common.collect.TreeMultiset$1) -> <init>
com.google.common.collect.TreeRangeMap -> com.google.common.collect.TreeRangeMap:
    java.util.NavigableMap entriesByLowerBound -> entriesByLowerBound
    com.google.common.collect.RangeMap EMPTY_SUB_RANGE_MAP -> EMPTY_SUB_RANGE_MAP
    com.google.common.collect.TreeRangeMap create() -> create
    void <init>() -> <init>
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    com.google.common.collect.Range coalescedRange(com.google.common.collect.Range,java.lang.Object) -> coalescedRange
    com.google.common.collect.Range coalesce(com.google.common.collect.Range,java.lang.Object,java.util.Map$Entry) -> coalesce
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    com.google.common.collect.Range span() -> span
    void putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object) -> putRangeMapEntry
    void remove(com.google.common.collect.Range) -> remove
    java.util.Map asMapOfRanges() -> asMapOfRanges
    java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    com.google.common.collect.RangeMap emptySubRangeMap() -> emptySubRangeMap
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.NavigableMap access$000(com.google.common.collect.TreeRangeMap) -> access$000
    com.google.common.collect.Range access$100(com.google.common.collect.TreeRangeMap,com.google.common.collect.Range,java.lang.Object) -> access$100
    com.google.common.collect.RangeMap access$200(com.google.common.collect.TreeRangeMap) -> access$200
    void <clinit>() -> <clinit>
com.google.common.collect.TreeRangeMap$1 -> com.google.common.collect.TreeRangeMap$1:
    void <init>() -> <init>
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    com.google.common.collect.Range span() -> span
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    void remove(com.google.common.collect.Range) -> remove
    java.util.Map asMapOfRanges() -> asMapOfRanges
    java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
com.google.common.collect.TreeRangeMap$AsMapOfRanges -> com.google.common.collect.TreeRangeMap$AsMapOfRanges:
    java.lang.Iterable entryIterable -> entryIterable
    com.google.common.collect.TreeRangeMap this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeMap,java.lang.Iterable) -> <init>
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    java.util.Iterator entryIterator() -> entryIterator
com.google.common.collect.TreeRangeMap$RangeMapEntry -> com.google.common.collect.TreeRangeMap$RangeMapEntry:
    com.google.common.collect.Range range -> range
    java.lang.Object value -> value
    void <init>(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object) -> <init>
    void <init>(com.google.common.collect.Range,java.lang.Object) -> <init>
    com.google.common.collect.Range getKey() -> getKey
    java.lang.Object getValue() -> getValue
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.Cut getLowerBound() -> getLowerBound
    com.google.common.collect.Cut getUpperBound() -> getUpperBound
    java.lang.Object getKey() -> getKey
com.google.common.collect.TreeRangeMap$SubRangeMap -> com.google.common.collect.TreeRangeMap$SubRangeMap:
    com.google.common.collect.Range subRange -> subRange
    com.google.common.collect.TreeRangeMap this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeMap,com.google.common.collect.Range) -> <init>
    java.lang.Object get(java.lang.Comparable) -> get
    java.util.Map$Entry getEntry(java.lang.Comparable) -> getEntry
    com.google.common.collect.Range span() -> span
    void put(com.google.common.collect.Range,java.lang.Object) -> put
    void putCoalescing(com.google.common.collect.Range,java.lang.Object) -> putCoalescing
    void putAll(com.google.common.collect.RangeMap) -> putAll
    void clear() -> clear
    void remove(com.google.common.collect.Range) -> remove
    com.google.common.collect.RangeMap subRangeMap(com.google.common.collect.Range) -> subRangeMap
    java.util.Map asMapOfRanges() -> asMapOfRanges
    java.util.Map asDescendingMapOfRanges() -> asDescendingMapOfRanges
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.common.collect.Range access$300(com.google.common.collect.TreeRangeMap$SubRangeMap) -> access$300
com.google.common.collect.TreeRangeMap$SubRangeMap$1 -> com.google.common.collect.TreeRangeMap$SubRangeMap$1:
    com.google.common.collect.TreeRangeMap$SubRangeMap this$1 -> this$1
    void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap) -> <init>
    java.util.Iterator entryIterator() -> entryIterator
com.google.common.collect.TreeRangeMap$SubRangeMap$1$1 -> com.google.common.collect.TreeRangeMap$SubRangeMap$1$1:
    java.util.Iterator val$backingItr -> val$backingItr
    com.google.common.collect.TreeRangeMap$SubRangeMap$1 this$2 -> this$2
    void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$1,java.util.Iterator) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:
    com.google.common.collect.TreeRangeMap$SubRangeMap this$1 -> this$1
    void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap) -> <init>
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean removeEntryIf(com.google.common.base.Predicate) -> removeEntryIf
    java.util.Set keySet() -> keySet
    java.util.Set entrySet() -> entrySet
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Collection values() -> values
    boolean access$400(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,com.google.common.base.Predicate) -> access$400
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1 -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> this$2
    void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,java.util.Map) -> <init>
    boolean remove(java.lang.Object) -> remove
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2 -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> this$2
    void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    boolean isEmpty() -> isEmpty
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3 -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3:
    java.util.Iterator val$backingItr -> val$backingItr
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> this$2
    void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,java.util.Iterator) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4 -> com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4:
    com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap this$2 -> this$2
    void <init>(com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap,java.util.Map) -> <init>
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
com.google.common.collect.TreeRangeSet -> com.google.common.collect.TreeRangeSet:
    java.util.NavigableMap rangesByLowerBound -> rangesByLowerBound
    java.util.Set asRanges -> asRanges
    java.util.Set asDescendingSetOfRanges -> asDescendingSetOfRanges
    com.google.common.collect.RangeSet complement -> complement
    com.google.common.collect.TreeRangeSet create() -> create
    com.google.common.collect.TreeRangeSet create(com.google.common.collect.RangeSet) -> create
    com.google.common.collect.TreeRangeSet create(java.lang.Iterable) -> create
    void <init>(java.util.NavigableMap) -> <init>
    java.util.Set asRanges() -> asRanges
    java.util.Set asDescendingSetOfRanges() -> asDescendingSetOfRanges
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    boolean intersects(com.google.common.collect.Range) -> intersects
    boolean encloses(com.google.common.collect.Range) -> encloses
    com.google.common.collect.Range rangeEnclosing(com.google.common.collect.Range) -> rangeEnclosing
    com.google.common.collect.Range span() -> span
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    void replaceRangeWithSameLowerBound(com.google.common.collect.Range) -> replaceRangeWithSameLowerBound
    com.google.common.collect.RangeSet complement() -> complement
    com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
    boolean equals(java.lang.Object) -> equals
    void removeAll(com.google.common.collect.RangeSet) -> removeAll
    void addAll(com.google.common.collect.RangeSet) -> addAll
    boolean enclosesAll(com.google.common.collect.RangeSet) -> enclosesAll
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Comparable) -> contains
    void <init>(java.util.NavigableMap,com.google.common.collect.TreeRangeSet$1) -> <init>
    com.google.common.collect.Range access$600(com.google.common.collect.TreeRangeSet,com.google.common.collect.Range) -> access$600
com.google.common.collect.TreeRangeSet$1 -> com.google.common.collect.TreeRangeSet$1:
com.google.common.collect.TreeRangeSet$AsRanges -> com.google.common.collect.TreeRangeSet$AsRanges:
    java.util.Collection delegate -> delegate
    com.google.common.collect.TreeRangeSet this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeSet,java.util.Collection) -> <init>
    java.util.Collection delegate() -> delegate
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object delegate() -> delegate
com.google.common.collect.TreeRangeSet$Complement -> com.google.common.collect.TreeRangeSet$Complement:
    com.google.common.collect.TreeRangeSet this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeSet) -> <init>
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    boolean contains(java.lang.Comparable) -> contains
    com.google.common.collect.RangeSet complement() -> complement
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound -> com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:
    java.util.NavigableMap positiveRangesByLowerBound -> positiveRangesByLowerBound
    java.util.NavigableMap positiveRangesByUpperBound -> positiveRangesByUpperBound
    com.google.common.collect.Range complementLowerBoundWindow -> complementLowerBoundWindow
    void <init>(java.util.NavigableMap) -> <init>
    void <init>(java.util.NavigableMap,com.google.common.collect.Range) -> <init>
    java.util.NavigableMap subMap(com.google.common.collect.Range) -> subMap
    java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean) -> subMap
    java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean) -> headMap
    java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean) -> tailMap
    java.util.Comparator comparator() -> comparator
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    int size() -> size
    com.google.common.collect.Range get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    com.google.common.collect.Range access$100(com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound) -> access$100
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1 -> com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$1:
    com.google.common.collect.Cut nextComplementRangeLowerBound -> nextComplementRangeLowerBound
    com.google.common.collect.Cut val$firstComplementRangeLowerBound -> val$firstComplementRangeLowerBound
    com.google.common.collect.PeekingIterator val$positiveItr -> val$positiveItr
    com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound,com.google.common.collect.Cut,com.google.common.collect.PeekingIterator) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2 -> com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound$2:
    com.google.common.collect.Cut nextComplementRangeUpperBound -> nextComplementRangeUpperBound
    com.google.common.collect.Cut val$firstComplementRangeUpperBound -> val$firstComplementRangeUpperBound
    com.google.common.collect.PeekingIterator val$positiveItr -> val$positiveItr
    com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound,com.google.common.collect.Cut,com.google.common.collect.PeekingIterator) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$RangesByUpperBound -> com.google.common.collect.TreeRangeSet$RangesByUpperBound:
    java.util.NavigableMap rangesByLowerBound -> rangesByLowerBound
    com.google.common.collect.Range upperBoundWindow -> upperBoundWindow
    void <init>(java.util.NavigableMap) -> <init>
    void <init>(java.util.NavigableMap,com.google.common.collect.Range) -> <init>
    java.util.NavigableMap subMap(com.google.common.collect.Range) -> subMap
    java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean) -> subMap
    java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean) -> headMap
    java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean) -> tailMap
    java.util.Comparator comparator() -> comparator
    boolean containsKey(java.lang.Object) -> containsKey
    com.google.common.collect.Range get(java.lang.Object) -> get
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Object get(java.lang.Object) -> get
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    com.google.common.collect.Range access$000(com.google.common.collect.TreeRangeSet$RangesByUpperBound) -> access$000
com.google.common.collect.TreeRangeSet$RangesByUpperBound$1 -> com.google.common.collect.TreeRangeSet$RangesByUpperBound$1:
    java.util.Iterator val$backingItr -> val$backingItr
    com.google.common.collect.TreeRangeSet$RangesByUpperBound this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeSet$RangesByUpperBound,java.util.Iterator) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$RangesByUpperBound$2 -> com.google.common.collect.TreeRangeSet$RangesByUpperBound$2:
    com.google.common.collect.PeekingIterator val$backingItr -> val$backingItr
    com.google.common.collect.TreeRangeSet$RangesByUpperBound this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeSet$RangesByUpperBound,com.google.common.collect.PeekingIterator) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$SubRangeSet -> com.google.common.collect.TreeRangeSet$SubRangeSet:
    com.google.common.collect.Range restriction -> restriction
    com.google.common.collect.TreeRangeSet this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeSet,com.google.common.collect.Range) -> <init>
    boolean encloses(com.google.common.collect.Range) -> encloses
    com.google.common.collect.Range rangeContaining(java.lang.Comparable) -> rangeContaining
    void add(com.google.common.collect.Range) -> add
    void remove(com.google.common.collect.Range) -> remove
    boolean contains(java.lang.Comparable) -> contains
    void clear() -> clear
    com.google.common.collect.RangeSet subRangeSet(com.google.common.collect.Range) -> subRangeSet
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound -> com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:
    com.google.common.collect.Range lowerBoundWindow -> lowerBoundWindow
    com.google.common.collect.Range restriction -> restriction
    java.util.NavigableMap rangesByLowerBound -> rangesByLowerBound
    java.util.NavigableMap rangesByUpperBound -> rangesByUpperBound
    void <init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap) -> <init>
    java.util.NavigableMap subMap(com.google.common.collect.Range) -> subMap
    java.util.NavigableMap subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean) -> subMap
    java.util.NavigableMap headMap(com.google.common.collect.Cut,boolean) -> headMap
    java.util.NavigableMap tailMap(com.google.common.collect.Cut,boolean) -> tailMap
    java.util.Comparator comparator() -> comparator
    boolean containsKey(java.lang.Object) -> containsKey
    com.google.common.collect.Range get(java.lang.Object) -> get
    java.util.Iterator entryIterator() -> entryIterator
    java.util.Iterator descendingEntryIterator() -> descendingEntryIterator
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    java.util.NavigableMap tailMap(java.lang.Object,boolean) -> tailMap
    java.util.NavigableMap headMap(java.lang.Object,boolean) -> headMap
    java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean) -> subMap
    com.google.common.collect.Range access$300(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound) -> access$300
    com.google.common.collect.Range access$400(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound) -> access$400
    void <init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap,com.google.common.collect.TreeRangeSet$1) -> <init>
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1 -> com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$1:
    java.util.Iterator val$completeRangeItr -> val$completeRangeItr
    com.google.common.collect.Cut val$upperBoundOnLowerBounds -> val$upperBoundOnLowerBounds
    com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound,java.util.Iterator,com.google.common.collect.Cut) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2 -> com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound$2:
    java.util.Iterator val$completeRangeItr -> val$completeRangeItr
    com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound this$0 -> this$0
    void <init>(com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound,java.util.Iterator) -> <init>
    java.util.Map$Entry computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.collect.TreeTraverser -> com.google.common.collect.TreeTraverser:
    void <init>() -> <init>
    com.google.common.collect.TreeTraverser using(com.google.common.base.Function) -> using
    java.lang.Iterable children(java.lang.Object) -> children
    com.google.common.collect.FluentIterable preOrderTraversal(java.lang.Object) -> preOrderTraversal
    com.google.common.collect.UnmodifiableIterator preOrderIterator(java.lang.Object) -> preOrderIterator
    com.google.common.collect.FluentIterable postOrderTraversal(java.lang.Object) -> postOrderTraversal
    com.google.common.collect.UnmodifiableIterator postOrderIterator(java.lang.Object) -> postOrderIterator
    com.google.common.collect.FluentIterable breadthFirstTraversal(java.lang.Object) -> breadthFirstTraversal
com.google.common.collect.TreeTraverser$1 -> com.google.common.collect.TreeTraverser$1:
    com.google.common.base.Function val$nodeToChildrenFunction -> val$nodeToChildrenFunction
    void <init>(com.google.common.base.Function) -> <init>
    java.lang.Iterable children(java.lang.Object) -> children
com.google.common.collect.TreeTraverser$2 -> com.google.common.collect.TreeTraverser$2:
    java.lang.Object val$root -> val$root
    com.google.common.collect.TreeTraverser this$0 -> this$0
    void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    java.util.Iterator iterator() -> iterator
com.google.common.collect.TreeTraverser$2$1 -> com.google.common.collect.TreeTraverser$2$1:
    java.util.function.Consumer val$action -> val$action
    com.google.common.collect.TreeTraverser$2 this$1 -> this$1
    void <init>(com.google.common.collect.TreeTraverser$2,java.util.function.Consumer) -> <init>
    void accept(java.lang.Object) -> accept
com.google.common.collect.TreeTraverser$3 -> com.google.common.collect.TreeTraverser$3:
    java.lang.Object val$root -> val$root
    com.google.common.collect.TreeTraverser this$0 -> this$0
    void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    void forEach(java.util.function.Consumer) -> forEach
    java.util.Iterator iterator() -> iterator
com.google.common.collect.TreeTraverser$3$1 -> com.google.common.collect.TreeTraverser$3$1:
    java.util.function.Consumer val$action -> val$action
    com.google.common.collect.TreeTraverser$3 this$1 -> this$1
    void <init>(com.google.common.collect.TreeTraverser$3,java.util.function.Consumer) -> <init>
    void accept(java.lang.Object) -> accept
com.google.common.collect.TreeTraverser$4 -> com.google.common.collect.TreeTraverser$4:
    java.lang.Object val$root -> val$root
    com.google.common.collect.TreeTraverser this$0 -> this$0
    void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    java.util.Iterator iterator() -> iterator
com.google.common.collect.TreeTraverser$BreadthFirstIterator -> com.google.common.collect.TreeTraverser$BreadthFirstIterator:
    java.util.Queue queue -> queue
    com.google.common.collect.TreeTraverser this$0 -> this$0
    void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object peek() -> peek
    java.lang.Object next() -> next
com.google.common.collect.TreeTraverser$PostOrderIterator -> com.google.common.collect.TreeTraverser$PostOrderIterator:
    java.util.ArrayDeque stack -> stack
    com.google.common.collect.TreeTraverser this$0 -> this$0
    void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    java.lang.Object computeNext() -> computeNext
    com.google.common.collect.TreeTraverser$PostOrderNode expand(java.lang.Object) -> expand
com.google.common.collect.TreeTraverser$PostOrderNode -> com.google.common.collect.TreeTraverser$PostOrderNode:
    java.lang.Object root -> root
    java.util.Iterator childIterator -> childIterator
    void <init>(java.lang.Object,java.util.Iterator) -> <init>
com.google.common.collect.TreeTraverser$PreOrderIterator -> com.google.common.collect.TreeTraverser$PreOrderIterator:
    java.util.Deque stack -> stack
    com.google.common.collect.TreeTraverser this$0 -> this$0
    void <init>(com.google.common.collect.TreeTraverser,java.lang.Object) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.collect.UnmodifiableIterator -> com.google.common.collect.UnmodifiableIterator:
    void <init>() -> <init>
    void remove() -> remove
com.google.common.collect.UnmodifiableListIterator -> com.google.common.collect.UnmodifiableListIterator:
    void <init>() -> <init>
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
com.google.common.collect.UnmodifiableSortedMultiset -> com.google.common.collect.UnmodifiableSortedMultiset:
    com.google.common.collect.UnmodifiableSortedMultiset descendingMultiset -> descendingMultiset
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.collect.SortedMultiset) -> <init>
    com.google.common.collect.SortedMultiset delegate() -> delegate
    java.util.Comparator comparator() -> comparator
    java.util.NavigableSet createElementSet() -> createElementSet
    java.util.NavigableSet elementSet() -> elementSet
    com.google.common.collect.SortedMultiset descendingMultiset() -> descendingMultiset
    com.google.common.collect.Multiset$Entry firstEntry() -> firstEntry
    com.google.common.collect.Multiset$Entry lastEntry() -> lastEntry
    com.google.common.collect.Multiset$Entry pollFirstEntry() -> pollFirstEntry
    com.google.common.collect.Multiset$Entry pollLastEntry() -> pollLastEntry
    com.google.common.collect.SortedMultiset headMultiset(java.lang.Object,com.google.common.collect.BoundType) -> headMultiset
    com.google.common.collect.SortedMultiset subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType) -> subMultiset
    com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object,com.google.common.collect.BoundType) -> tailMultiset
    java.util.Set elementSet() -> elementSet
    java.util.Set createElementSet() -> createElementSet
    com.google.common.collect.Multiset delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.util.SortedSet elementSet() -> elementSet
com.google.common.collect.UsingToStringOrdering -> com.google.common.collect.UsingToStringOrdering:
    com.google.common.collect.UsingToStringOrdering INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    int compare(java.lang.Object,java.lang.Object) -> compare
    java.lang.Object readResolve() -> readResolve
    java.lang.String toString() -> toString
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.collect.WellBehavedMap -> com.google.common.collect.WellBehavedMap:
    java.util.Map delegate -> delegate
    java.util.Set entrySet -> entrySet
    void <init>(java.util.Map) -> <init>
    com.google.common.collect.WellBehavedMap wrap(java.util.Map) -> wrap
    java.util.Map delegate() -> delegate
    java.util.Set entrySet() -> entrySet
    java.lang.Object delegate() -> delegate
com.google.common.collect.WellBehavedMap$1 -> com.google.common.collect.WellBehavedMap$1:
com.google.common.collect.WellBehavedMap$EntrySet -> com.google.common.collect.WellBehavedMap$EntrySet:
    com.google.common.collect.WellBehavedMap this$0 -> this$0
    void <init>(com.google.common.collect.WellBehavedMap) -> <init>
    java.util.Map map() -> map
    java.util.Iterator iterator() -> iterator
    void <init>(com.google.common.collect.WellBehavedMap,com.google.common.collect.WellBehavedMap$1) -> <init>
com.google.common.collect.WellBehavedMap$EntrySet$1 -> com.google.common.collect.WellBehavedMap$EntrySet$1:
    com.google.common.collect.WellBehavedMap$EntrySet this$1 -> this$1
    void <init>(com.google.common.collect.WellBehavedMap$EntrySet,java.util.Iterator) -> <init>
    java.util.Map$Entry transform(java.lang.Object) -> transform
    java.lang.Object transform(java.lang.Object) -> transform
com.google.common.collect.WellBehavedMap$EntrySet$1$1 -> com.google.common.collect.WellBehavedMap$EntrySet$1$1:
    java.lang.Object val$key -> val$key
    com.google.common.collect.WellBehavedMap$EntrySet$1 this$2 -> this$2
    void <init>(com.google.common.collect.WellBehavedMap$EntrySet$1,java.lang.Object) -> <init>
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
com.google.common.collect.package-info -> com.google.common.collect.package-info:
com.google.common.escape.ArrayBasedCharEscaper -> com.google.common.escape.ArrayBasedCharEscaper:
    char[][] replacements -> replacements
    int replacementsLength -> replacementsLength
    char safeMin -> safeMin
    char safeMax -> safeMax
    void <init>(java.util.Map,char,char) -> <init>
    void <init>(com.google.common.escape.ArrayBasedEscaperMap,char,char) -> <init>
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(char) -> escape
    char[] escapeUnsafe(char) -> escapeUnsafe
com.google.common.escape.ArrayBasedEscaperMap -> com.google.common.escape.ArrayBasedEscaperMap:
    char[][] replacementArray -> replacementArray
    char[][] EMPTY_REPLACEMENT_ARRAY -> EMPTY_REPLACEMENT_ARRAY
    com.google.common.escape.ArrayBasedEscaperMap create(java.util.Map) -> create
    void <init>(char[][]) -> <init>
    char[][] getReplacementArray() -> getReplacementArray
    char[][] createReplacementArray(java.util.Map) -> createReplacementArray
    void <clinit>() -> <clinit>
com.google.common.escape.ArrayBasedUnicodeEscaper -> com.google.common.escape.ArrayBasedUnicodeEscaper:
    char[][] replacements -> replacements
    int replacementsLength -> replacementsLength
    int safeMin -> safeMin
    int safeMax -> safeMax
    char safeMinChar -> safeMinChar
    char safeMaxChar -> safeMaxChar
    void <init>(java.util.Map,int,int,java.lang.String) -> <init>
    void <init>(com.google.common.escape.ArrayBasedEscaperMap,int,int,java.lang.String) -> <init>
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(int) -> escape
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> nextEscapeIndex
    char[] escapeUnsafe(int) -> escapeUnsafe
com.google.common.escape.CharEscaper -> com.google.common.escape.CharEscaper:
    int DEST_PAD_MULTIPLIER -> DEST_PAD_MULTIPLIER
    void <init>() -> <init>
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(char) -> escape
    java.lang.String escapeSlow(java.lang.String,int) -> escapeSlow
    char[] growBuffer(char[],int,int) -> growBuffer
com.google.common.escape.CharEscaperBuilder -> com.google.common.escape.CharEscaperBuilder:
    java.util.Map map -> map
    int max -> max
    void <init>() -> <init>
    com.google.common.escape.CharEscaperBuilder addEscape(char,java.lang.String) -> addEscape
    com.google.common.escape.CharEscaperBuilder addEscapes(char[],java.lang.String) -> addEscapes
    char[][] toArray() -> toArray
    com.google.common.escape.Escaper toEscaper() -> toEscaper
com.google.common.escape.CharEscaperBuilder$CharArrayDecorator -> com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:
    char[][] replacements -> replacements
    int replaceLength -> replaceLength
    void <init>(char[][]) -> <init>
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(char) -> escape
com.google.common.escape.Escaper -> com.google.common.escape.Escaper:
    com.google.common.base.Function asFunction -> asFunction
    void <init>() -> <init>
    java.lang.String escape(java.lang.String) -> escape
    com.google.common.base.Function asFunction() -> asFunction
com.google.common.escape.Escaper$1 -> com.google.common.escape.Escaper$1:
    com.google.common.escape.Escaper this$0 -> this$0
    void <init>(com.google.common.escape.Escaper) -> <init>
    java.lang.String apply(java.lang.String) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.escape.Escapers -> com.google.common.escape.Escapers:
    com.google.common.escape.Escaper NULL_ESCAPER -> NULL_ESCAPER
    void <init>() -> <init>
    com.google.common.escape.Escaper nullEscaper() -> nullEscaper
    com.google.common.escape.Escapers$Builder builder() -> builder
    com.google.common.escape.UnicodeEscaper asUnicodeEscaper(com.google.common.escape.Escaper) -> asUnicodeEscaper
    java.lang.String computeReplacement(com.google.common.escape.CharEscaper,char) -> computeReplacement
    java.lang.String computeReplacement(com.google.common.escape.UnicodeEscaper,int) -> computeReplacement
    java.lang.String stringOrNull(char[]) -> stringOrNull
    com.google.common.escape.UnicodeEscaper wrap(com.google.common.escape.CharEscaper) -> wrap
    void <clinit>() -> <clinit>
com.google.common.escape.Escapers$1 -> com.google.common.escape.Escapers$1:
    void <init>() -> <init>
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(char) -> escape
com.google.common.escape.Escapers$2 -> com.google.common.escape.Escapers$2:
    com.google.common.escape.CharEscaper val$escaper -> val$escaper
    void <init>(com.google.common.escape.CharEscaper) -> <init>
    char[] escape(int) -> escape
com.google.common.escape.Escapers$Builder -> com.google.common.escape.Escapers$Builder:
    java.util.Map replacementMap -> replacementMap
    char safeMin -> safeMin
    char safeMax -> safeMax
    java.lang.String unsafeReplacement -> unsafeReplacement
    void <init>() -> <init>
    com.google.common.escape.Escapers$Builder setSafeRange(char,char) -> setSafeRange
    com.google.common.escape.Escapers$Builder setUnsafeReplacement(java.lang.String) -> setUnsafeReplacement
    com.google.common.escape.Escapers$Builder addEscape(char,java.lang.String) -> addEscape
    com.google.common.escape.Escaper build() -> build
    void <init>(com.google.common.escape.Escapers$1) -> <init>
    java.lang.String access$100(com.google.common.escape.Escapers$Builder) -> access$100
com.google.common.escape.Escapers$Builder$1 -> com.google.common.escape.Escapers$Builder$1:
    char[] replacementChars -> replacementChars
    com.google.common.escape.Escapers$Builder this$0 -> this$0
    void <init>(com.google.common.escape.Escapers$Builder,java.util.Map,char,char) -> <init>
    char[] escapeUnsafe(char) -> escapeUnsafe
com.google.common.escape.Platform -> com.google.common.escape.Platform:
    java.lang.ThreadLocal DEST_TL -> DEST_TL
    void <init>() -> <init>
    char[] charBufferFromThreadLocal() -> charBufferFromThreadLocal
    void <clinit>() -> <clinit>
com.google.common.escape.Platform$1 -> com.google.common.escape.Platform$1:
    void <init>() -> <init>
    char[] initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.google.common.escape.UnicodeEscaper -> com.google.common.escape.UnicodeEscaper:
    int DEST_PAD -> DEST_PAD
    void <init>() -> <init>
    char[] escape(int) -> escape
    java.lang.String escape(java.lang.String) -> escape
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> nextEscapeIndex
    java.lang.String escapeSlow(java.lang.String,int) -> escapeSlow
    int codePointAt(java.lang.CharSequence,int,int) -> codePointAt
    char[] growBuffer(char[],int,int) -> growBuffer
com.google.common.escape.package-info -> com.google.common.escape.package-info:
com.google.common.eventbus.AllowConcurrentEvents -> com.google.common.eventbus.AllowConcurrentEvents:
com.google.common.eventbus.AsyncEventBus -> com.google.common.eventbus.AsyncEventBus:
    void <init>(java.lang.String,java.util.concurrent.Executor) -> <init>
    void <init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler) -> <init>
    void <init>(java.util.concurrent.Executor) -> <init>
com.google.common.eventbus.DeadEvent -> com.google.common.eventbus.DeadEvent:
    java.lang.Object source -> source
    java.lang.Object event -> event
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getSource() -> getSource
    java.lang.Object getEvent() -> getEvent
    java.lang.String toString() -> toString
com.google.common.eventbus.Dispatcher -> com.google.common.eventbus.Dispatcher:
    void <init>() -> <init>
    com.google.common.eventbus.Dispatcher perThreadDispatchQueue() -> perThreadDispatchQueue
    com.google.common.eventbus.Dispatcher legacyAsync() -> legacyAsync
    com.google.common.eventbus.Dispatcher immediate() -> immediate
    void dispatch(java.lang.Object,java.util.Iterator) -> dispatch
com.google.common.eventbus.Dispatcher$1 -> com.google.common.eventbus.Dispatcher$1:
com.google.common.eventbus.Dispatcher$ImmediateDispatcher -> com.google.common.eventbus.Dispatcher$ImmediateDispatcher:
    com.google.common.eventbus.Dispatcher$ImmediateDispatcher INSTANCE -> INSTANCE
    void <init>() -> <init>
    void dispatch(java.lang.Object,java.util.Iterator) -> dispatch
    com.google.common.eventbus.Dispatcher$ImmediateDispatcher access$200() -> access$200
    void <clinit>() -> <clinit>
com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher -> com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher:
    java.util.concurrent.ConcurrentLinkedQueue queue -> queue
    void <init>() -> <init>
    void dispatch(java.lang.Object,java.util.Iterator) -> dispatch
    void <init>(com.google.common.eventbus.Dispatcher$1) -> <init>
com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber -> com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber:
    java.lang.Object event -> event
    com.google.common.eventbus.Subscriber subscriber -> subscriber
    void <init>(java.lang.Object,com.google.common.eventbus.Subscriber) -> <init>
    void <init>(java.lang.Object,com.google.common.eventbus.Subscriber,com.google.common.eventbus.Dispatcher$1) -> <init>
    java.lang.Object access$700(com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber) -> access$700
    com.google.common.eventbus.Subscriber access$800(com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher$EventWithSubscriber) -> access$800
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher -> com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher:
    java.lang.ThreadLocal queue -> queue
    java.lang.ThreadLocal dispatching -> dispatching
    void <init>() -> <init>
    void dispatch(java.lang.Object,java.util.Iterator) -> dispatch
    void <init>(com.google.common.eventbus.Dispatcher$1) -> <init>
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$1 -> com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$1:
    com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher this$0 -> this$0
    void <init>(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher) -> <init>
    java.util.Queue initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$2 -> com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$2:
    com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher this$0 -> this$0
    void <init>(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher) -> <init>
    java.lang.Boolean initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event -> com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event:
    java.lang.Object event -> event
    java.util.Iterator subscribers -> subscribers
    void <init>(java.lang.Object,java.util.Iterator) -> <init>
    void <init>(java.lang.Object,java.util.Iterator,com.google.common.eventbus.Dispatcher$1) -> <init>
    java.util.Iterator access$400(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event) -> access$400
    java.lang.Object access$500(com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher$Event) -> access$500
com.google.common.eventbus.EventBus -> com.google.common.eventbus.EventBus:
    java.util.logging.Logger logger -> logger
    java.lang.String identifier -> identifier
    java.util.concurrent.Executor executor -> executor
    com.google.common.eventbus.SubscriberExceptionHandler exceptionHandler -> exceptionHandler
    com.google.common.eventbus.SubscriberRegistry subscribers -> subscribers
    com.google.common.eventbus.Dispatcher dispatcher -> dispatcher
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(com.google.common.eventbus.SubscriberExceptionHandler) -> <init>
    void <init>(java.lang.String,java.util.concurrent.Executor,com.google.common.eventbus.Dispatcher,com.google.common.eventbus.SubscriberExceptionHandler) -> <init>
    java.lang.String identifier() -> identifier
    java.util.concurrent.Executor executor() -> executor
    void handleSubscriberException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext) -> handleSubscriberException
    void register(java.lang.Object) -> register
    void unregister(java.lang.Object) -> unregister
    void post(java.lang.Object) -> post
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.eventbus.EventBus$LoggingHandler -> com.google.common.eventbus.EventBus$LoggingHandler:
    com.google.common.eventbus.EventBus$LoggingHandler INSTANCE -> INSTANCE
    void <init>() -> <init>
    void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext) -> handleException
    java.util.logging.Logger logger(com.google.common.eventbus.SubscriberExceptionContext) -> logger
    java.lang.String message(com.google.common.eventbus.SubscriberExceptionContext) -> message
    void <clinit>() -> <clinit>
com.google.common.eventbus.Subscribe -> com.google.common.eventbus.Subscribe:
com.google.common.eventbus.Subscriber -> com.google.common.eventbus.Subscriber:
    com.google.common.eventbus.EventBus bus -> bus
    java.lang.Object target -> target
    java.lang.reflect.Method method -> method
    java.util.concurrent.Executor executor -> executor
    com.google.common.eventbus.Subscriber create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method) -> create
    void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method) -> <init>
    void dispatchEvent(java.lang.Object) -> dispatchEvent
    void invokeSubscriberMethod(java.lang.Object) -> invokeSubscriberMethod
    com.google.common.eventbus.SubscriberExceptionContext context(java.lang.Object) -> context
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isDeclaredThreadSafe(java.lang.reflect.Method) -> isDeclaredThreadSafe
    com.google.common.eventbus.SubscriberExceptionContext access$100(com.google.common.eventbus.Subscriber,java.lang.Object) -> access$100
    com.google.common.eventbus.EventBus access$200(com.google.common.eventbus.Subscriber) -> access$200
    void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method,com.google.common.eventbus.Subscriber$1) -> <init>
com.google.common.eventbus.Subscriber$1 -> com.google.common.eventbus.Subscriber$1:
    java.lang.Object val$event -> val$event
    com.google.common.eventbus.Subscriber this$0 -> this$0
    void <init>(com.google.common.eventbus.Subscriber,java.lang.Object) -> <init>
    void run() -> run
com.google.common.eventbus.Subscriber$SynchronizedSubscriber -> com.google.common.eventbus.Subscriber$SynchronizedSubscriber:
    void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method) -> <init>
    void invokeSubscriberMethod(java.lang.Object) -> invokeSubscriberMethod
    void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method,com.google.common.eventbus.Subscriber$1) -> <init>
com.google.common.eventbus.SubscriberExceptionContext -> com.google.common.eventbus.SubscriberExceptionContext:
    com.google.common.eventbus.EventBus eventBus -> eventBus
    java.lang.Object event -> event
    java.lang.Object subscriber -> subscriber
    java.lang.reflect.Method subscriberMethod -> subscriberMethod
    void <init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.Object,java.lang.reflect.Method) -> <init>
    com.google.common.eventbus.EventBus getEventBus() -> getEventBus
    java.lang.Object getEvent() -> getEvent
    java.lang.Object getSubscriber() -> getSubscriber
    java.lang.reflect.Method getSubscriberMethod() -> getSubscriberMethod
com.google.common.eventbus.SubscriberExceptionHandler -> com.google.common.eventbus.SubscriberExceptionHandler:
    void handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext) -> handleException
com.google.common.eventbus.SubscriberRegistry -> com.google.common.eventbus.SubscriberRegistry:
    java.util.concurrent.ConcurrentMap subscribers -> subscribers
    com.google.common.eventbus.EventBus bus -> bus
    com.google.common.cache.LoadingCache subscriberMethodsCache -> subscriberMethodsCache
    com.google.common.cache.LoadingCache flattenHierarchyCache -> flattenHierarchyCache
    void <init>(com.google.common.eventbus.EventBus) -> <init>
    void register(java.lang.Object) -> register
    void unregister(java.lang.Object) -> unregister
    java.util.Set getSubscribersForTesting(java.lang.Class) -> getSubscribersForTesting
    java.util.Iterator getSubscribers(java.lang.Object) -> getSubscribers
    com.google.common.collect.Multimap findAllSubscribers(java.lang.Object) -> findAllSubscribers
    com.google.common.collect.ImmutableList getAnnotatedMethods(java.lang.Class) -> getAnnotatedMethods
    com.google.common.collect.ImmutableList getAnnotatedMethodsNotCached(java.lang.Class) -> getAnnotatedMethodsNotCached
    com.google.common.collect.ImmutableSet flattenHierarchy(java.lang.Class) -> flattenHierarchy
    com.google.common.collect.ImmutableList access$000(java.lang.Class) -> access$000
    void <clinit>() -> <clinit>
com.google.common.eventbus.SubscriberRegistry$1 -> com.google.common.eventbus.SubscriberRegistry$1:
    void <init>() -> <init>
    com.google.common.collect.ImmutableList load(java.lang.Class) -> load
    java.lang.Object load(java.lang.Object) -> load
com.google.common.eventbus.SubscriberRegistry$2 -> com.google.common.eventbus.SubscriberRegistry$2:
    void <init>() -> <init>
    com.google.common.collect.ImmutableSet load(java.lang.Class) -> load
    java.lang.Object load(java.lang.Object) -> load
com.google.common.eventbus.SubscriberRegistry$MethodIdentifier -> com.google.common.eventbus.SubscriberRegistry$MethodIdentifier:
    java.lang.String name -> name
    java.util.List parameterTypes -> parameterTypes
    void <init>(java.lang.reflect.Method) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.eventbus.package-info -> com.google.common.eventbus.package-info:
com.google.common.graph.AbstractBaseGraph -> com.google.common.graph.AbstractBaseGraph:
    void <init>() -> <init>
    long edgeCount() -> edgeCount
    java.util.Set edges() -> edges
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
com.google.common.graph.AbstractBaseGraph$1 -> com.google.common.graph.AbstractBaseGraph$1:
    com.google.common.graph.AbstractBaseGraph this$0 -> this$0
    void <init>(com.google.common.graph.AbstractBaseGraph) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet -> com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet:
    java.lang.Object node -> node
    com.google.common.graph.BaseGraph graph -> graph
    com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet of(com.google.common.graph.BaseGraph,java.lang.Object) -> of
    void <init>(com.google.common.graph.BaseGraph,java.lang.Object) -> <init>
    boolean remove(java.lang.Object) -> remove
    void <init>(com.google.common.graph.BaseGraph,java.lang.Object,com.google.common.graph.AbstractBaseGraph$1) -> <init>
com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed -> com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed:
    void <init>(com.google.common.graph.BaseGraph,java.lang.Object) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    void <init>(com.google.common.graph.BaseGraph,java.lang.Object,com.google.common.graph.AbstractBaseGraph$1) -> <init>
com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed$1 -> com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed$1:
    com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed this$0 -> this$0
    void <init>(com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed) -> <init>
    com.google.common.graph.EndpointPair apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed$2 -> com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed$2:
    com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed this$0 -> this$0
    void <init>(com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Directed) -> <init>
    com.google.common.graph.EndpointPair apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Undirected -> com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Undirected:
    void <init>(com.google.common.graph.BaseGraph,java.lang.Object) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    void <init>(com.google.common.graph.BaseGraph,java.lang.Object,com.google.common.graph.AbstractBaseGraph$1) -> <init>
com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Undirected$1 -> com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Undirected$1:
    com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Undirected this$0 -> this$0
    void <init>(com.google.common.graph.AbstractBaseGraph$IncidentEdgeSet$Undirected) -> <init>
    com.google.common.graph.EndpointPair apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractDirectedNetworkConnections -> com.google.common.graph.AbstractDirectedNetworkConnections:
    java.util.Map inEdgeMap -> inEdgeMap
    java.util.Map outEdgeMap -> outEdgeMap
    int selfLoopCount -> selfLoopCount
    void <init>(java.util.Map,java.util.Map,int) -> <init>
    java.util.Set adjacentNodes() -> adjacentNodes
    java.util.Set incidentEdges() -> incidentEdges
    java.util.Set inEdges() -> inEdges
    java.util.Set outEdges() -> outEdges
    java.lang.Object adjacentNode(java.lang.Object) -> adjacentNode
    java.lang.Object removeInEdge(java.lang.Object,boolean) -> removeInEdge
    java.lang.Object removeOutEdge(java.lang.Object) -> removeOutEdge
    void addInEdge(java.lang.Object,java.lang.Object,boolean) -> addInEdge
    void addOutEdge(java.lang.Object,java.lang.Object) -> addOutEdge
    int access$000(com.google.common.graph.AbstractDirectedNetworkConnections) -> access$000
com.google.common.graph.AbstractDirectedNetworkConnections$1 -> com.google.common.graph.AbstractDirectedNetworkConnections$1:
    com.google.common.graph.AbstractDirectedNetworkConnections this$0 -> this$0
    void <init>(com.google.common.graph.AbstractDirectedNetworkConnections) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.common.graph.AbstractGraph -> com.google.common.graph.AbstractGraph:
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    int outDegree(java.lang.Object) -> outDegree
    int inDegree(java.lang.Object) -> inDegree
    int degree(java.lang.Object) -> degree
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    java.util.Set edges() -> edges
com.google.common.graph.AbstractGraphBuilder -> com.google.common.graph.AbstractGraphBuilder:
    boolean directed -> directed
    boolean allowsSelfLoops -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder -> nodeOrder
    com.google.common.base.Optional expectedNodeCount -> expectedNodeCount
    void <init>(boolean) -> <init>
com.google.common.graph.AbstractNetwork -> com.google.common.graph.AbstractNetwork:
    void <init>() -> <init>
    com.google.common.graph.Graph asGraph() -> asGraph
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    java.util.Set adjacentEdges(java.lang.Object) -> adjacentEdges
    java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    com.google.common.base.Predicate connectedPredicate(java.lang.Object,java.lang.Object) -> connectedPredicate
    java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object) -> edgeConnecting
    java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object) -> edgeConnectingOrNull
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Map edgeIncidentNodesMap(com.google.common.graph.Network) -> edgeIncidentNodesMap
com.google.common.graph.AbstractNetwork$1 -> com.google.common.graph.AbstractNetwork$1:
    com.google.common.graph.AbstractNetwork this$0 -> this$0
    void <init>(com.google.common.graph.AbstractNetwork) -> <init>
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.AbstractNetwork$1$1 -> com.google.common.graph.AbstractNetwork$1$1:
    com.google.common.graph.AbstractNetwork$1 this$1 -> this$1
    void <init>(com.google.common.graph.AbstractNetwork$1) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
com.google.common.graph.AbstractNetwork$1$1$1 -> com.google.common.graph.AbstractNetwork$1$1$1:
    com.google.common.graph.AbstractNetwork$1$1 this$2 -> this$2
    void <init>(com.google.common.graph.AbstractNetwork$1$1) -> <init>
    com.google.common.graph.EndpointPair apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractNetwork$2 -> com.google.common.graph.AbstractNetwork$2:
    java.lang.Object val$nodePresent -> val$nodePresent
    java.lang.Object val$nodeToCheck -> val$nodeToCheck
    com.google.common.graph.AbstractNetwork this$0 -> this$0
    void <init>(com.google.common.graph.AbstractNetwork,java.lang.Object,java.lang.Object) -> <init>
    boolean apply(java.lang.Object) -> apply
com.google.common.graph.AbstractNetwork$3 -> com.google.common.graph.AbstractNetwork$3:
    com.google.common.graph.Network val$network -> val$network
    void <init>(com.google.common.graph.Network) -> <init>
    com.google.common.graph.EndpointPair apply(java.lang.Object) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.AbstractUndirectedNetworkConnections -> com.google.common.graph.AbstractUndirectedNetworkConnections:
    java.util.Map incidentEdgeMap -> incidentEdgeMap
    void <init>(java.util.Map) -> <init>
    java.util.Set predecessors() -> predecessors
    java.util.Set successors() -> successors
    java.util.Set incidentEdges() -> incidentEdges
    java.util.Set inEdges() -> inEdges
    java.util.Set outEdges() -> outEdges
    java.lang.Object adjacentNode(java.lang.Object) -> adjacentNode
    java.lang.Object removeInEdge(java.lang.Object,boolean) -> removeInEdge
    java.lang.Object removeOutEdge(java.lang.Object) -> removeOutEdge
    void addInEdge(java.lang.Object,java.lang.Object,boolean) -> addInEdge
    void addOutEdge(java.lang.Object,java.lang.Object) -> addOutEdge
com.google.common.graph.AbstractValueGraph -> com.google.common.graph.AbstractValueGraph:
    void <init>() -> <init>
    com.google.common.graph.Graph asGraph() -> asGraph
    java.util.Optional edgeValue(java.lang.Object,java.lang.Object) -> edgeValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Map edgeValueMap(com.google.common.graph.ValueGraph) -> edgeValueMap
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    int outDegree(java.lang.Object) -> outDegree
    int inDegree(java.lang.Object) -> inDegree
    int degree(java.lang.Object) -> degree
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    java.util.Set edges() -> edges
com.google.common.graph.AbstractValueGraph$1 -> com.google.common.graph.AbstractValueGraph$1:
    com.google.common.graph.AbstractValueGraph this$0 -> this$0
    void <init>(com.google.common.graph.AbstractValueGraph) -> <init>
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.AbstractValueGraph$2 -> com.google.common.graph.AbstractValueGraph$2:
    com.google.common.graph.ValueGraph val$graph -> val$graph
    void <init>(com.google.common.graph.ValueGraph) -> <init>
    java.lang.Object apply(com.google.common.graph.EndpointPair) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.BaseGraph -> com.google.common.graph.BaseGraph:
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ConfigurableMutableGraph -> com.google.common.graph.ConfigurableMutableGraph:
    com.google.common.graph.MutableValueGraph backingValueGraph -> backingValueGraph
    void <init>(com.google.common.graph.AbstractGraphBuilder) -> <init>
    com.google.common.graph.BaseGraph delegate() -> delegate
    boolean addNode(java.lang.Object) -> addNode
    boolean putEdge(java.lang.Object,java.lang.Object) -> putEdge
    boolean removeNode(java.lang.Object) -> removeNode
    boolean removeEdge(java.lang.Object,java.lang.Object) -> removeEdge
com.google.common.graph.ConfigurableMutableNetwork -> com.google.common.graph.ConfigurableMutableNetwork:
    void <init>(com.google.common.graph.NetworkBuilder) -> <init>
    boolean addNode(java.lang.Object) -> addNode
    com.google.common.graph.NetworkConnections addNodeInternal(java.lang.Object) -> addNodeInternal
    boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object) -> addEdge
    boolean removeNode(java.lang.Object) -> removeNode
    boolean removeEdge(java.lang.Object) -> removeEdge
    com.google.common.graph.NetworkConnections newConnections() -> newConnections
com.google.common.graph.ConfigurableMutableValueGraph -> com.google.common.graph.ConfigurableMutableValueGraph:
    void <init>(com.google.common.graph.AbstractGraphBuilder) -> <init>
    boolean addNode(java.lang.Object) -> addNode
    com.google.common.graph.GraphConnections addNodeInternal(java.lang.Object) -> addNodeInternal
    java.lang.Object putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object) -> putEdgeValue
    boolean removeNode(java.lang.Object) -> removeNode
    java.lang.Object removeEdge(java.lang.Object,java.lang.Object) -> removeEdge
    com.google.common.graph.GraphConnections newConnections() -> newConnections
com.google.common.graph.ConfigurableNetwork -> com.google.common.graph.ConfigurableNetwork:
    boolean isDirected -> isDirected
    boolean allowsParallelEdges -> allowsParallelEdges
    boolean allowsSelfLoops -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder -> nodeOrder
    com.google.common.graph.ElementOrder edgeOrder -> edgeOrder
    com.google.common.graph.MapIteratorCache nodeConnections -> nodeConnections
    com.google.common.graph.MapIteratorCache edgeToReferenceNode -> edgeToReferenceNode
    void <init>(com.google.common.graph.NetworkBuilder) -> <init>
    void <init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map) -> <init>
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    boolean isDirected() -> isDirected
    boolean allowsParallelEdges() -> allowsParallelEdges
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    com.google.common.graph.ElementOrder edgeOrder() -> edgeOrder
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    java.util.Set inEdges(java.lang.Object) -> inEdges
    java.util.Set outEdges(java.lang.Object) -> outEdges
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    com.google.common.graph.NetworkConnections checkedConnections(java.lang.Object) -> checkedConnections
    java.lang.Object checkedReferenceNode(java.lang.Object) -> checkedReferenceNode
    boolean containsNode(java.lang.Object) -> containsNode
    boolean containsEdge(java.lang.Object) -> containsEdge
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ConfigurableValueGraph -> com.google.common.graph.ConfigurableValueGraph:
    boolean isDirected -> isDirected
    boolean allowsSelfLoops -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder -> nodeOrder
    com.google.common.graph.MapIteratorCache nodeConnections -> nodeConnections
    long edgeCount -> edgeCount
    void <init>(com.google.common.graph.AbstractGraphBuilder) -> <init>
    void <init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long) -> <init>
    java.util.Set nodes() -> nodes
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    long edgeCount() -> edgeCount
    com.google.common.graph.GraphConnections checkedConnections(java.lang.Object) -> checkedConnections
    boolean containsNode(java.lang.Object) -> containsNode
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.DirectedGraphConnections -> com.google.common.graph.DirectedGraphConnections:
    java.lang.Object PRED -> PRED
    java.util.Map adjacentNodeValues -> adjacentNodeValues
    int predecessorCount -> predecessorCount
    int successorCount -> successorCount
    void <init>(java.util.Map,int,int) -> <init>
    com.google.common.graph.DirectedGraphConnections of() -> of
    com.google.common.graph.DirectedGraphConnections ofImmutable(java.util.Set,java.util.Map) -> ofImmutable
    java.util.Set adjacentNodes() -> adjacentNodes
    java.util.Set predecessors() -> predecessors
    java.util.Set successors() -> successors
    java.lang.Object value(java.lang.Object) -> value
    void removePredecessor(java.lang.Object) -> removePredecessor
    java.lang.Object removeSuccessor(java.lang.Object) -> removeSuccessor
    void addPredecessor(java.lang.Object,java.lang.Object) -> addPredecessor
    java.lang.Object addSuccessor(java.lang.Object,java.lang.Object) -> addSuccessor
    boolean isPredecessor(java.lang.Object) -> isPredecessor
    boolean isSuccessor(java.lang.Object) -> isSuccessor
    java.util.Map access$000(com.google.common.graph.DirectedGraphConnections) -> access$000
    boolean access$100(java.lang.Object) -> access$100
    int access$200(com.google.common.graph.DirectedGraphConnections) -> access$200
    boolean access$300(java.lang.Object) -> access$300
    int access$400(com.google.common.graph.DirectedGraphConnections) -> access$400
    void <clinit>() -> <clinit>
com.google.common.graph.DirectedGraphConnections$1 -> com.google.common.graph.DirectedGraphConnections$1:
    com.google.common.graph.DirectedGraphConnections this$0 -> this$0
    void <init>(com.google.common.graph.DirectedGraphConnections) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.common.graph.DirectedGraphConnections$1$1 -> com.google.common.graph.DirectedGraphConnections$1$1:
    java.util.Iterator val$entries -> val$entries
    com.google.common.graph.DirectedGraphConnections$1 this$1 -> this$1
    void <init>(com.google.common.graph.DirectedGraphConnections$1,java.util.Iterator) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.graph.DirectedGraphConnections$2 -> com.google.common.graph.DirectedGraphConnections$2:
    com.google.common.graph.DirectedGraphConnections this$0 -> this$0
    void <init>(com.google.common.graph.DirectedGraphConnections) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.common.graph.DirectedGraphConnections$2$1 -> com.google.common.graph.DirectedGraphConnections$2$1:
    java.util.Iterator val$entries -> val$entries
    com.google.common.graph.DirectedGraphConnections$2 this$1 -> this$1
    void <init>(com.google.common.graph.DirectedGraphConnections$2,java.util.Iterator) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.graph.DirectedGraphConnections$PredAndSucc -> com.google.common.graph.DirectedGraphConnections$PredAndSucc:
    java.lang.Object successorValue -> successorValue
    void <init>(java.lang.Object) -> <init>
    java.lang.Object access$500(com.google.common.graph.DirectedGraphConnections$PredAndSucc) -> access$500
com.google.common.graph.DirectedMultiNetworkConnections -> com.google.common.graph.DirectedMultiNetworkConnections:
    java.lang.ref.Reference predecessorsReference -> predecessorsReference
    java.lang.ref.Reference successorsReference -> successorsReference
    void <init>(java.util.Map,java.util.Map,int) -> <init>
    com.google.common.graph.DirectedMultiNetworkConnections of() -> of
    com.google.common.graph.DirectedMultiNetworkConnections ofImmutable(java.util.Map,java.util.Map,int) -> ofImmutable
    java.util.Set predecessors() -> predecessors
    com.google.common.collect.Multiset predecessorsMultiset() -> predecessorsMultiset
    java.util.Set successors() -> successors
    com.google.common.collect.Multiset successorsMultiset() -> successorsMultiset
    java.util.Set edgesConnecting(java.lang.Object) -> edgesConnecting
    java.lang.Object removeInEdge(java.lang.Object,boolean) -> removeInEdge
    java.lang.Object removeOutEdge(java.lang.Object) -> removeOutEdge
    void addInEdge(java.lang.Object,java.lang.Object,boolean) -> addInEdge
    void addOutEdge(java.lang.Object,java.lang.Object) -> addOutEdge
    java.lang.Object getReference(java.lang.ref.Reference) -> getReference
    com.google.common.collect.Multiset access$000(com.google.common.graph.DirectedMultiNetworkConnections) -> access$000
com.google.common.graph.DirectedMultiNetworkConnections$1 -> com.google.common.graph.DirectedMultiNetworkConnections$1:
    java.lang.Object val$node -> val$node
    com.google.common.graph.DirectedMultiNetworkConnections this$0 -> this$0
    void <init>(com.google.common.graph.DirectedMultiNetworkConnections,java.util.Map,java.lang.Object,java.lang.Object) -> <init>
    int size() -> size
com.google.common.graph.DirectedNetworkConnections -> com.google.common.graph.DirectedNetworkConnections:
    void <init>(java.util.Map,java.util.Map,int) -> <init>
    com.google.common.graph.DirectedNetworkConnections of() -> of
    com.google.common.graph.DirectedNetworkConnections ofImmutable(java.util.Map,java.util.Map,int) -> ofImmutable
    java.util.Set predecessors() -> predecessors
    java.util.Set successors() -> successors
    java.util.Set edgesConnecting(java.lang.Object) -> edgesConnecting
com.google.common.graph.EdgesConnecting -> com.google.common.graph.EdgesConnecting:
    java.util.Map nodeToOutEdge -> nodeToOutEdge
    java.lang.Object targetNode -> targetNode
    void <init>(java.util.Map,java.lang.Object) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.lang.Object getConnectingEdge() -> getConnectingEdge
    java.util.Iterator iterator() -> iterator
com.google.common.graph.ElementOrder -> com.google.common.graph.ElementOrder:
    com.google.common.graph.ElementOrder$Type type -> type
    java.util.Comparator comparator -> comparator
    void <init>(com.google.common.graph.ElementOrder$Type,java.util.Comparator) -> <init>
    com.google.common.graph.ElementOrder unordered() -> unordered
    com.google.common.graph.ElementOrder insertion() -> insertion
    com.google.common.graph.ElementOrder natural() -> natural
    com.google.common.graph.ElementOrder sorted(java.util.Comparator) -> sorted
    com.google.common.graph.ElementOrder$Type type() -> type
    java.util.Comparator comparator() -> comparator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Map createMap(int) -> createMap
    com.google.common.graph.ElementOrder cast() -> cast
com.google.common.graph.ElementOrder$1 -> com.google.common.graph.ElementOrder$1:
    int[] $SwitchMap$com$google$common$graph$ElementOrder$Type -> $SwitchMap$com$google$common$graph$ElementOrder$Type
    void <clinit>() -> <clinit>
com.google.common.graph.ElementOrder$Type -> com.google.common.graph.ElementOrder$Type:
    com.google.common.graph.ElementOrder$Type UNORDERED -> UNORDERED
    com.google.common.graph.ElementOrder$Type INSERTION -> INSERTION
    com.google.common.graph.ElementOrder$Type SORTED -> SORTED
    com.google.common.graph.ElementOrder$Type[] $VALUES -> $VALUES
    com.google.common.graph.ElementOrder$Type[] values() -> values
    com.google.common.graph.ElementOrder$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.graph.EndpointPair -> com.google.common.graph.EndpointPair:
    java.lang.Object nodeU -> nodeU
    java.lang.Object nodeV -> nodeV
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    com.google.common.graph.EndpointPair ordered(java.lang.Object,java.lang.Object) -> ordered
    com.google.common.graph.EndpointPair unordered(java.lang.Object,java.lang.Object) -> unordered
    com.google.common.graph.EndpointPair of(com.google.common.graph.Graph,java.lang.Object,java.lang.Object) -> of
    com.google.common.graph.EndpointPair of(com.google.common.graph.Network,java.lang.Object,java.lang.Object) -> of
    java.lang.Object source() -> source
    java.lang.Object target() -> target
    java.lang.Object nodeU() -> nodeU
    java.lang.Object nodeV() -> nodeV
    java.lang.Object adjacentNode(java.lang.Object) -> adjacentNode
    boolean isOrdered() -> isOrdered
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Iterator iterator() -> iterator
    void <init>(java.lang.Object,java.lang.Object,com.google.common.graph.EndpointPair$1) -> <init>
com.google.common.graph.EndpointPair$1 -> com.google.common.graph.EndpointPair$1:
com.google.common.graph.EndpointPair$Ordered -> com.google.common.graph.EndpointPair$Ordered:
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object source() -> source
    java.lang.Object target() -> target
    boolean isOrdered() -> isOrdered
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    void <init>(java.lang.Object,java.lang.Object,com.google.common.graph.EndpointPair$1) -> <init>
com.google.common.graph.EndpointPair$Unordered -> com.google.common.graph.EndpointPair$Unordered:
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object source() -> source
    java.lang.Object target() -> target
    boolean isOrdered() -> isOrdered
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    void <init>(java.lang.Object,java.lang.Object,com.google.common.graph.EndpointPair$1) -> <init>
com.google.common.graph.EndpointPairIterator -> com.google.common.graph.EndpointPairIterator:
    com.google.common.graph.BaseGraph graph -> graph
    java.util.Iterator nodeIterator -> nodeIterator
    java.lang.Object node -> node
    java.util.Iterator successorIterator -> successorIterator
    com.google.common.graph.EndpointPairIterator of(com.google.common.graph.BaseGraph) -> of
    void <init>(com.google.common.graph.BaseGraph) -> <init>
    boolean advance() -> advance
    void <init>(com.google.common.graph.BaseGraph,com.google.common.graph.EndpointPairIterator$1) -> <init>
com.google.common.graph.EndpointPairIterator$1 -> com.google.common.graph.EndpointPairIterator$1:
com.google.common.graph.EndpointPairIterator$Directed -> com.google.common.graph.EndpointPairIterator$Directed:
    void <init>(com.google.common.graph.BaseGraph) -> <init>
    com.google.common.graph.EndpointPair computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
    void <init>(com.google.common.graph.BaseGraph,com.google.common.graph.EndpointPairIterator$1) -> <init>
com.google.common.graph.EndpointPairIterator$Undirected -> com.google.common.graph.EndpointPairIterator$Undirected:
    java.util.Set visitedNodes -> visitedNodes
    void <init>(com.google.common.graph.BaseGraph) -> <init>
    com.google.common.graph.EndpointPair computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
    void <init>(com.google.common.graph.BaseGraph,com.google.common.graph.EndpointPairIterator$1) -> <init>
com.google.common.graph.ForwardingGraph -> com.google.common.graph.ForwardingGraph:
    void <init>() -> <init>
    com.google.common.graph.BaseGraph delegate() -> delegate
    java.util.Set nodes() -> nodes
    long edgeCount() -> edgeCount
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ForwardingNetwork -> com.google.common.graph.ForwardingNetwork:
    void <init>() -> <init>
    com.google.common.graph.Network delegate() -> delegate
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    boolean isDirected() -> isDirected
    boolean allowsParallelEdges() -> allowsParallelEdges
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    com.google.common.graph.ElementOrder edgeOrder() -> edgeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    java.util.Set inEdges(java.lang.Object) -> inEdges
    java.util.Set outEdges(java.lang.Object) -> outEdges
    com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    java.util.Set adjacentEdges(java.lang.Object) -> adjacentEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object) -> edgeConnecting
    java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object) -> edgeConnectingOrNull
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ForwardingValueGraph -> com.google.common.graph.ForwardingValueGraph:
    void <init>() -> <init>
    com.google.common.graph.ValueGraph delegate() -> delegate
    java.util.Set nodes() -> nodes
    long edgeCount() -> edgeCount
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    java.util.Optional edgeValue(java.lang.Object,java.lang.Object) -> edgeValue
    java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.Graph -> com.google.common.graph.Graph:
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.GraphBuilder -> com.google.common.graph.GraphBuilder:
    void <init>(boolean) -> <init>
    com.google.common.graph.GraphBuilder directed() -> directed
    com.google.common.graph.GraphBuilder undirected() -> undirected
    com.google.common.graph.GraphBuilder from(com.google.common.graph.Graph) -> from
    com.google.common.graph.GraphBuilder allowsSelfLoops(boolean) -> allowsSelfLoops
    com.google.common.graph.GraphBuilder expectedNodeCount(int) -> expectedNodeCount
    com.google.common.graph.GraphBuilder nodeOrder(com.google.common.graph.ElementOrder) -> nodeOrder
    com.google.common.graph.MutableGraph build() -> build
    com.google.common.graph.GraphBuilder cast() -> cast
com.google.common.graph.GraphConnections -> com.google.common.graph.GraphConnections:
    java.util.Set adjacentNodes() -> adjacentNodes
    java.util.Set predecessors() -> predecessors
    java.util.Set successors() -> successors
    java.lang.Object value(java.lang.Object) -> value
    void removePredecessor(java.lang.Object) -> removePredecessor
    java.lang.Object removeSuccessor(java.lang.Object) -> removeSuccessor
    void addPredecessor(java.lang.Object,java.lang.Object) -> addPredecessor
    java.lang.Object addSuccessor(java.lang.Object,java.lang.Object) -> addSuccessor
com.google.common.graph.GraphConstants -> com.google.common.graph.GraphConstants:
    int EXPECTED_DEGREE -> EXPECTED_DEGREE
    int DEFAULT_NODE_COUNT -> DEFAULT_NODE_COUNT
    int DEFAULT_EDGE_COUNT -> DEFAULT_EDGE_COUNT
    float INNER_LOAD_FACTOR -> INNER_LOAD_FACTOR
    int INNER_CAPACITY -> INNER_CAPACITY
    java.lang.String NODE_NOT_IN_GRAPH -> NODE_NOT_IN_GRAPH
    java.lang.String EDGE_NOT_IN_GRAPH -> EDGE_NOT_IN_GRAPH
    java.lang.String REUSING_EDGE -> REUSING_EDGE
    java.lang.String MULTIPLE_EDGES_CONNECTING -> MULTIPLE_EDGES_CONNECTING
    java.lang.String PARALLEL_EDGES_NOT_ALLOWED -> PARALLEL_EDGES_NOT_ALLOWED
    java.lang.String SELF_LOOPS_NOT_ALLOWED -> SELF_LOOPS_NOT_ALLOWED
    java.lang.String NOT_AVAILABLE_ON_UNDIRECTED -> NOT_AVAILABLE_ON_UNDIRECTED
    java.lang.String EDGE_ALREADY_EXISTS -> EDGE_ALREADY_EXISTS
    void <init>() -> <init>
com.google.common.graph.GraphConstants$Presence -> com.google.common.graph.GraphConstants$Presence:
    com.google.common.graph.GraphConstants$Presence EDGE_EXISTS -> EDGE_EXISTS
    com.google.common.graph.GraphConstants$Presence[] $VALUES -> $VALUES
    com.google.common.graph.GraphConstants$Presence[] values() -> values
    com.google.common.graph.GraphConstants$Presence valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.graph.Graphs -> com.google.common.graph.Graphs:
    void <init>() -> <init>
    boolean hasCycle(com.google.common.graph.Graph) -> hasCycle
    boolean hasCycle(com.google.common.graph.Network) -> hasCycle
    boolean subgraphHasCycle(com.google.common.graph.Graph,java.util.Map,java.lang.Object,java.lang.Object) -> subgraphHasCycle
    boolean canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object) -> canTraverseWithoutReusingEdge
    com.google.common.graph.Graph transitiveClosure(com.google.common.graph.Graph) -> transitiveClosure
    java.util.Set reachableNodes(com.google.common.graph.Graph,java.lang.Object) -> reachableNodes
    com.google.common.graph.Graph transpose(com.google.common.graph.Graph) -> transpose
    com.google.common.graph.ValueGraph transpose(com.google.common.graph.ValueGraph) -> transpose
    com.google.common.graph.Network transpose(com.google.common.graph.Network) -> transpose
    com.google.common.graph.MutableGraph inducedSubgraph(com.google.common.graph.Graph,java.lang.Iterable) -> inducedSubgraph
    com.google.common.graph.MutableValueGraph inducedSubgraph(com.google.common.graph.ValueGraph,java.lang.Iterable) -> inducedSubgraph
    com.google.common.graph.MutableNetwork inducedSubgraph(com.google.common.graph.Network,java.lang.Iterable) -> inducedSubgraph
    com.google.common.graph.MutableGraph copyOf(com.google.common.graph.Graph) -> copyOf
    com.google.common.graph.MutableValueGraph copyOf(com.google.common.graph.ValueGraph) -> copyOf
    com.google.common.graph.MutableNetwork copyOf(com.google.common.graph.Network) -> copyOf
    int checkNonNegative(int) -> checkNonNegative
    long checkNonNegative(long) -> checkNonNegative
    int checkPositive(int) -> checkPositive
    long checkPositive(long) -> checkPositive
com.google.common.graph.Graphs$NodeVisitState -> com.google.common.graph.Graphs$NodeVisitState:
    com.google.common.graph.Graphs$NodeVisitState PENDING -> PENDING
    com.google.common.graph.Graphs$NodeVisitState COMPLETE -> COMPLETE
    com.google.common.graph.Graphs$NodeVisitState[] $VALUES -> $VALUES
    com.google.common.graph.Graphs$NodeVisitState[] values() -> values
    com.google.common.graph.Graphs$NodeVisitState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.graph.Graphs$TransposedGraph -> com.google.common.graph.Graphs$TransposedGraph:
    com.google.common.graph.Graph graph -> graph
    void <init>(com.google.common.graph.Graph) -> <init>
    com.google.common.graph.Graph delegate() -> delegate
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    com.google.common.graph.BaseGraph delegate() -> delegate
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
    com.google.common.graph.Graph access$000(com.google.common.graph.Graphs$TransposedGraph) -> access$000
com.google.common.graph.Graphs$TransposedNetwork -> com.google.common.graph.Graphs$TransposedNetwork:
    com.google.common.graph.Network network -> network
    void <init>(com.google.common.graph.Network) -> <init>
    com.google.common.graph.Network delegate() -> delegate
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    java.util.Set inEdges(java.lang.Object) -> inEdges
    java.util.Set outEdges(java.lang.Object) -> outEdges
    com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object) -> edgeConnecting
    java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object) -> edgeConnectingOrNull
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
    com.google.common.graph.Network access$200(com.google.common.graph.Graphs$TransposedNetwork) -> access$200
com.google.common.graph.Graphs$TransposedValueGraph -> com.google.common.graph.Graphs$TransposedValueGraph:
    com.google.common.graph.ValueGraph graph -> graph
    void <init>(com.google.common.graph.ValueGraph) -> <init>
    com.google.common.graph.ValueGraph delegate() -> delegate
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    java.util.Optional edgeValue(java.lang.Object,java.lang.Object) -> edgeValue
    java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
    com.google.common.graph.ValueGraph access$100(com.google.common.graph.Graphs$TransposedValueGraph) -> access$100
com.google.common.graph.ImmutableGraph -> com.google.common.graph.ImmutableGraph:
    com.google.common.graph.BaseGraph backingGraph -> backingGraph
    void <init>(com.google.common.graph.BaseGraph) -> <init>
    com.google.common.graph.ImmutableGraph copyOf(com.google.common.graph.Graph) -> copyOf
    com.google.common.graph.ImmutableGraph copyOf(com.google.common.graph.ImmutableGraph) -> copyOf
    com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.Graph) -> getNodeConnections
    com.google.common.graph.GraphConnections connectionsOf(com.google.common.graph.Graph,java.lang.Object) -> connectionsOf
    com.google.common.graph.BaseGraph delegate() -> delegate
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    int outDegree(java.lang.Object) -> outDegree
    int inDegree(java.lang.Object) -> inDegree
    int degree(java.lang.Object) -> degree
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    boolean allowsSelfLoops() -> allowsSelfLoops
    boolean isDirected() -> isDirected
    java.util.Set nodes() -> nodes
com.google.common.graph.ImmutableNetwork -> com.google.common.graph.ImmutableNetwork:
    void <init>(com.google.common.graph.Network) -> <init>
    com.google.common.graph.ImmutableNetwork copyOf(com.google.common.graph.Network) -> copyOf
    com.google.common.graph.ImmutableNetwork copyOf(com.google.common.graph.ImmutableNetwork) -> copyOf
    com.google.common.graph.ImmutableGraph asGraph() -> asGraph
    java.util.Map getNodeConnections(com.google.common.graph.Network) -> getNodeConnections
    java.util.Map getEdgeToReferenceNode(com.google.common.graph.Network) -> getEdgeToReferenceNode
    com.google.common.graph.NetworkConnections connectionsOf(com.google.common.graph.Network,java.lang.Object) -> connectionsOf
    com.google.common.base.Function sourceNodeFn(com.google.common.graph.Network) -> sourceNodeFn
    com.google.common.base.Function targetNodeFn(com.google.common.graph.Network) -> targetNodeFn
    com.google.common.base.Function adjacentNodeFn(com.google.common.graph.Network,java.lang.Object) -> adjacentNodeFn
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set outEdges(java.lang.Object) -> outEdges
    java.util.Set inEdges(java.lang.Object) -> inEdges
    java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    com.google.common.graph.ElementOrder edgeOrder() -> edgeOrder
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    boolean allowsSelfLoops() -> allowsSelfLoops
    boolean allowsParallelEdges() -> allowsParallelEdges
    boolean isDirected() -> isDirected
    java.util.Set edges() -> edges
    java.util.Set nodes() -> nodes
    com.google.common.graph.Graph asGraph() -> asGraph
com.google.common.graph.ImmutableNetwork$1 -> com.google.common.graph.ImmutableNetwork$1:
    com.google.common.graph.Network val$network -> val$network
    void <init>(com.google.common.graph.Network) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.ImmutableNetwork$2 -> com.google.common.graph.ImmutableNetwork$2:
    com.google.common.graph.Network val$network -> val$network
    void <init>(com.google.common.graph.Network) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.ImmutableNetwork$3 -> com.google.common.graph.ImmutableNetwork$3:
    com.google.common.graph.Network val$network -> val$network
    java.lang.Object val$node -> val$node
    void <init>(com.google.common.graph.Network,java.lang.Object) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.ImmutableValueGraph -> com.google.common.graph.ImmutableValueGraph:
    void <init>(com.google.common.graph.ValueGraph) -> <init>
    com.google.common.graph.ImmutableValueGraph copyOf(com.google.common.graph.ValueGraph) -> copyOf
    com.google.common.graph.ImmutableValueGraph copyOf(com.google.common.graph.ImmutableValueGraph) -> copyOf
    com.google.common.graph.ImmutableGraph asGraph() -> asGraph
    com.google.common.collect.ImmutableMap getNodeConnections(com.google.common.graph.ValueGraph) -> getNodeConnections
    com.google.common.graph.GraphConnections connectionsOf(com.google.common.graph.ValueGraph,java.lang.Object) -> connectionsOf
    java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    boolean allowsSelfLoops() -> allowsSelfLoops
    boolean isDirected() -> isDirected
    java.util.Set nodes() -> nodes
    com.google.common.graph.Graph asGraph() -> asGraph
com.google.common.graph.ImmutableValueGraph$1 -> com.google.common.graph.ImmutableValueGraph$1:
    com.google.common.graph.ValueGraph val$graph -> val$graph
    java.lang.Object val$node -> val$node
    void <init>(com.google.common.graph.ValueGraph,java.lang.Object) -> <init>
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.graph.MapIteratorCache -> com.google.common.graph.MapIteratorCache:
    java.util.Map backingMap -> backingMap
    java.util.Map$Entry entrySetCache -> entrySetCache
    void <init>(java.util.Map) -> <init>
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getWithoutCaching(java.lang.Object) -> getWithoutCaching
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Set unmodifiableKeySet() -> unmodifiableKeySet
    java.lang.Object getIfCached(java.lang.Object) -> getIfCached
    void clearCache() -> clearCache
    java.util.Map access$000(com.google.common.graph.MapIteratorCache) -> access$000
    java.util.Map$Entry access$102(com.google.common.graph.MapIteratorCache,java.util.Map$Entry) -> access$102
com.google.common.graph.MapIteratorCache$1 -> com.google.common.graph.MapIteratorCache$1:
    com.google.common.graph.MapIteratorCache this$0 -> this$0
    void <init>(com.google.common.graph.MapIteratorCache) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
com.google.common.graph.MapIteratorCache$1$1 -> com.google.common.graph.MapIteratorCache$1$1:
    java.util.Iterator val$entryIterator -> val$entryIterator
    com.google.common.graph.MapIteratorCache$1 this$1 -> this$1
    void <init>(com.google.common.graph.MapIteratorCache$1,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.graph.MapRetrievalCache -> com.google.common.graph.MapRetrievalCache:
    com.google.common.graph.MapRetrievalCache$CacheEntry cacheEntry1 -> cacheEntry1
    com.google.common.graph.MapRetrievalCache$CacheEntry cacheEntry2 -> cacheEntry2
    void <init>(java.util.Map) -> <init>
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getIfCached(java.lang.Object) -> getIfCached
    void clearCache() -> clearCache
    void addToCache(java.lang.Object,java.lang.Object) -> addToCache
    void addToCache(com.google.common.graph.MapRetrievalCache$CacheEntry) -> addToCache
com.google.common.graph.MapRetrievalCache$CacheEntry -> com.google.common.graph.MapRetrievalCache$CacheEntry:
    java.lang.Object key -> key
    java.lang.Object value -> value
    void <init>(java.lang.Object,java.lang.Object) -> <init>
com.google.common.graph.MultiEdgesConnecting -> com.google.common.graph.MultiEdgesConnecting:
    java.util.Map outEdgeToNode -> outEdgeToNode
    java.lang.Object targetNode -> targetNode
    void <init>(java.util.Map,java.lang.Object) -> <init>
    com.google.common.collect.UnmodifiableIterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    java.lang.Object access$000(com.google.common.graph.MultiEdgesConnecting) -> access$000
com.google.common.graph.MultiEdgesConnecting$1 -> com.google.common.graph.MultiEdgesConnecting$1:
    java.util.Iterator val$entries -> val$entries
    com.google.common.graph.MultiEdgesConnecting this$0 -> this$0
    void <init>(com.google.common.graph.MultiEdgesConnecting,java.util.Iterator) -> <init>
    java.lang.Object computeNext() -> computeNext
com.google.common.graph.MutableGraph -> com.google.common.graph.MutableGraph:
    boolean addNode(java.lang.Object) -> addNode
    boolean putEdge(java.lang.Object,java.lang.Object) -> putEdge
    boolean removeNode(java.lang.Object) -> removeNode
    boolean removeEdge(java.lang.Object,java.lang.Object) -> removeEdge
com.google.common.graph.MutableNetwork -> com.google.common.graph.MutableNetwork:
    boolean addNode(java.lang.Object) -> addNode
    boolean addEdge(java.lang.Object,java.lang.Object,java.lang.Object) -> addEdge
    boolean removeNode(java.lang.Object) -> removeNode
    boolean removeEdge(java.lang.Object) -> removeEdge
com.google.common.graph.MutableValueGraph -> com.google.common.graph.MutableValueGraph:
    boolean addNode(java.lang.Object) -> addNode
    java.lang.Object putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object) -> putEdgeValue
    boolean removeNode(java.lang.Object) -> removeNode
    java.lang.Object removeEdge(java.lang.Object,java.lang.Object) -> removeEdge
com.google.common.graph.Network -> com.google.common.graph.Network:
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    com.google.common.graph.Graph asGraph() -> asGraph
    boolean isDirected() -> isDirected
    boolean allowsParallelEdges() -> allowsParallelEdges
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    com.google.common.graph.ElementOrder edgeOrder() -> edgeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    java.util.Set inEdges(java.lang.Object) -> inEdges
    java.util.Set outEdges(java.lang.Object) -> outEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    com.google.common.graph.EndpointPair incidentNodes(java.lang.Object) -> incidentNodes
    java.util.Set adjacentEdges(java.lang.Object) -> adjacentEdges
    java.util.Set edgesConnecting(java.lang.Object,java.lang.Object) -> edgesConnecting
    java.util.Optional edgeConnecting(java.lang.Object,java.lang.Object) -> edgeConnecting
    java.lang.Object edgeConnectingOrNull(java.lang.Object,java.lang.Object) -> edgeConnectingOrNull
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.NetworkBuilder -> com.google.common.graph.NetworkBuilder:
    boolean allowsParallelEdges -> allowsParallelEdges
    com.google.common.graph.ElementOrder edgeOrder -> edgeOrder
    com.google.common.base.Optional expectedEdgeCount -> expectedEdgeCount
    void <init>(boolean) -> <init>
    com.google.common.graph.NetworkBuilder directed() -> directed
    com.google.common.graph.NetworkBuilder undirected() -> undirected
    com.google.common.graph.NetworkBuilder from(com.google.common.graph.Network) -> from
    com.google.common.graph.NetworkBuilder allowsParallelEdges(boolean) -> allowsParallelEdges
    com.google.common.graph.NetworkBuilder allowsSelfLoops(boolean) -> allowsSelfLoops
    com.google.common.graph.NetworkBuilder expectedNodeCount(int) -> expectedNodeCount
    com.google.common.graph.NetworkBuilder expectedEdgeCount(int) -> expectedEdgeCount
    com.google.common.graph.NetworkBuilder nodeOrder(com.google.common.graph.ElementOrder) -> nodeOrder
    com.google.common.graph.NetworkBuilder edgeOrder(com.google.common.graph.ElementOrder) -> edgeOrder
    com.google.common.graph.MutableNetwork build() -> build
    com.google.common.graph.NetworkBuilder cast() -> cast
com.google.common.graph.NetworkConnections -> com.google.common.graph.NetworkConnections:
    java.util.Set adjacentNodes() -> adjacentNodes
    java.util.Set predecessors() -> predecessors
    java.util.Set successors() -> successors
    java.util.Set incidentEdges() -> incidentEdges
    java.util.Set inEdges() -> inEdges
    java.util.Set outEdges() -> outEdges
    java.util.Set edgesConnecting(java.lang.Object) -> edgesConnecting
    java.lang.Object adjacentNode(java.lang.Object) -> adjacentNode
    java.lang.Object removeInEdge(java.lang.Object,boolean) -> removeInEdge
    java.lang.Object removeOutEdge(java.lang.Object) -> removeOutEdge
    void addInEdge(java.lang.Object,java.lang.Object,boolean) -> addInEdge
    void addOutEdge(java.lang.Object,java.lang.Object) -> addOutEdge
com.google.common.graph.PredecessorsFunction -> com.google.common.graph.PredecessorsFunction:
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.SuccessorsFunction -> com.google.common.graph.SuccessorsFunction:
    java.lang.Iterable successors(java.lang.Object) -> successors
com.google.common.graph.Traverser -> com.google.common.graph.Traverser:
    com.google.common.graph.Traverser forGraph(com.google.common.graph.SuccessorsFunction) -> forGraph
    com.google.common.graph.Traverser forTree(com.google.common.graph.SuccessorsFunction) -> forTree
    java.lang.Iterable breadthFirst(java.lang.Object) -> breadthFirst
    java.lang.Iterable breadthFirst(java.lang.Iterable) -> breadthFirst
    java.lang.Iterable depthFirstPreOrder(java.lang.Object) -> depthFirstPreOrder
    java.lang.Iterable depthFirstPreOrder(java.lang.Iterable) -> depthFirstPreOrder
    java.lang.Iterable depthFirstPostOrder(java.lang.Object) -> depthFirstPostOrder
    java.lang.Iterable depthFirstPostOrder(java.lang.Iterable) -> depthFirstPostOrder
    void <init>() -> <init>
    void <init>(com.google.common.graph.Traverser$1) -> <init>
com.google.common.graph.Traverser$1 -> com.google.common.graph.Traverser$1:
com.google.common.graph.Traverser$GraphTraverser -> com.google.common.graph.Traverser$GraphTraverser:
    com.google.common.graph.SuccessorsFunction graph -> graph
    void <init>(com.google.common.graph.SuccessorsFunction) -> <init>
    java.lang.Iterable breadthFirst(java.lang.Object) -> breadthFirst
    java.lang.Iterable breadthFirst(java.lang.Iterable) -> breadthFirst
    java.lang.Iterable depthFirstPreOrder(java.lang.Object) -> depthFirstPreOrder
    java.lang.Iterable depthFirstPreOrder(java.lang.Iterable) -> depthFirstPreOrder
    java.lang.Iterable depthFirstPostOrder(java.lang.Object) -> depthFirstPostOrder
    java.lang.Iterable depthFirstPostOrder(java.lang.Iterable) -> depthFirstPostOrder
    void checkThatNodeIsInGraph(java.lang.Object) -> checkThatNodeIsInGraph
    com.google.common.graph.SuccessorsFunction access$100(com.google.common.graph.Traverser$GraphTraverser) -> access$100
com.google.common.graph.Traverser$GraphTraverser$1 -> com.google.common.graph.Traverser$GraphTraverser$1:
    java.lang.Iterable val$startNodes -> val$startNodes
    com.google.common.graph.Traverser$GraphTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$GraphTraverser$2 -> com.google.common.graph.Traverser$GraphTraverser$2:
    java.lang.Iterable val$startNodes -> val$startNodes
    com.google.common.graph.Traverser$GraphTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$GraphTraverser$3 -> com.google.common.graph.Traverser$GraphTraverser$3:
    java.lang.Iterable val$startNodes -> val$startNodes
    com.google.common.graph.Traverser$GraphTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$GraphTraverser$BreadthFirstIterator -> com.google.common.graph.Traverser$GraphTraverser$BreadthFirstIterator:
    java.util.Queue queue -> queue
    java.util.Set visited -> visited
    com.google.common.graph.Traverser$GraphTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator -> com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator:
    java.util.Deque stack -> stack
    java.util.Set visited -> visited
    com.google.common.graph.Traverser$Order order -> order
    com.google.common.graph.Traverser$GraphTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$GraphTraverser,java.lang.Iterable,com.google.common.graph.Traverser$Order) -> <init>
    java.lang.Object computeNext() -> computeNext
    com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator$NodeAndSuccessors withSuccessors(java.lang.Object) -> withSuccessors
com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator$NodeAndSuccessors -> com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator$NodeAndSuccessors:
    java.lang.Object node -> node
    java.util.Iterator successorIterator -> successorIterator
    com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator this$1 -> this$1
    void <init>(com.google.common.graph.Traverser$GraphTraverser$DepthFirstIterator,java.lang.Object,java.lang.Iterable) -> <init>
com.google.common.graph.Traverser$Order -> com.google.common.graph.Traverser$Order:
    com.google.common.graph.Traverser$Order PREORDER -> PREORDER
    com.google.common.graph.Traverser$Order POSTORDER -> POSTORDER
    com.google.common.graph.Traverser$Order[] $VALUES -> $VALUES
    com.google.common.graph.Traverser$Order[] values() -> values
    com.google.common.graph.Traverser$Order valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.graph.Traverser$TreeTraverser -> com.google.common.graph.Traverser$TreeTraverser:
    com.google.common.graph.SuccessorsFunction tree -> tree
    void <init>(com.google.common.graph.SuccessorsFunction) -> <init>
    java.lang.Iterable breadthFirst(java.lang.Object) -> breadthFirst
    java.lang.Iterable breadthFirst(java.lang.Iterable) -> breadthFirst
    java.lang.Iterable depthFirstPreOrder(java.lang.Object) -> depthFirstPreOrder
    java.lang.Iterable depthFirstPreOrder(java.lang.Iterable) -> depthFirstPreOrder
    java.lang.Iterable depthFirstPostOrder(java.lang.Object) -> depthFirstPostOrder
    java.lang.Iterable depthFirstPostOrder(java.lang.Iterable) -> depthFirstPostOrder
    void checkThatNodeIsInTree(java.lang.Object) -> checkThatNodeIsInTree
    com.google.common.graph.SuccessorsFunction access$200(com.google.common.graph.Traverser$TreeTraverser) -> access$200
com.google.common.graph.Traverser$TreeTraverser$1 -> com.google.common.graph.Traverser$TreeTraverser$1:
    java.lang.Iterable val$startNodes -> val$startNodes
    com.google.common.graph.Traverser$TreeTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$TreeTraverser$2 -> com.google.common.graph.Traverser$TreeTraverser$2:
    java.lang.Iterable val$startNodes -> val$startNodes
    com.google.common.graph.Traverser$TreeTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$TreeTraverser$3 -> com.google.common.graph.Traverser$TreeTraverser$3:
    java.lang.Iterable val$startNodes -> val$startNodes
    com.google.common.graph.Traverser$TreeTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    java.util.Iterator iterator() -> iterator
com.google.common.graph.Traverser$TreeTraverser$BreadthFirstIterator -> com.google.common.graph.Traverser$TreeTraverser$BreadthFirstIterator:
    java.util.Queue queue -> queue
    com.google.common.graph.Traverser$TreeTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator -> com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator:
    java.util.ArrayDeque stack -> stack
    com.google.common.graph.Traverser$TreeTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    java.lang.Object computeNext() -> computeNext
    com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator$NodeAndChildren withChildren(java.lang.Object) -> withChildren
com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator$NodeAndChildren -> com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator$NodeAndChildren:
    java.lang.Object node -> node
    java.util.Iterator childIterator -> childIterator
    com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator this$1 -> this$1
    void <init>(com.google.common.graph.Traverser$TreeTraverser$DepthFirstPostOrderIterator,java.lang.Object,java.lang.Iterable) -> <init>
com.google.common.graph.Traverser$TreeTraverser$DepthFirstPreOrderIterator -> com.google.common.graph.Traverser$TreeTraverser$DepthFirstPreOrderIterator:
    java.util.Deque stack -> stack
    com.google.common.graph.Traverser$TreeTraverser this$0 -> this$0
    void <init>(com.google.common.graph.Traverser$TreeTraverser,java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
com.google.common.graph.UndirectedGraphConnections -> com.google.common.graph.UndirectedGraphConnections:
    java.util.Map adjacentNodeValues -> adjacentNodeValues
    void <init>(java.util.Map) -> <init>
    com.google.common.graph.UndirectedGraphConnections of() -> of
    com.google.common.graph.UndirectedGraphConnections ofImmutable(java.util.Map) -> ofImmutable
    java.util.Set adjacentNodes() -> adjacentNodes
    java.util.Set predecessors() -> predecessors
    java.util.Set successors() -> successors
    java.lang.Object value(java.lang.Object) -> value
    void removePredecessor(java.lang.Object) -> removePredecessor
    java.lang.Object removeSuccessor(java.lang.Object) -> removeSuccessor
    void addPredecessor(java.lang.Object,java.lang.Object) -> addPredecessor
    java.lang.Object addSuccessor(java.lang.Object,java.lang.Object) -> addSuccessor
com.google.common.graph.UndirectedMultiNetworkConnections -> com.google.common.graph.UndirectedMultiNetworkConnections:
    java.lang.ref.Reference adjacentNodesReference -> adjacentNodesReference
    void <init>(java.util.Map) -> <init>
    com.google.common.graph.UndirectedMultiNetworkConnections of() -> of
    com.google.common.graph.UndirectedMultiNetworkConnections ofImmutable(java.util.Map) -> ofImmutable
    java.util.Set adjacentNodes() -> adjacentNodes
    com.google.common.collect.Multiset adjacentNodesMultiset() -> adjacentNodesMultiset
    java.util.Set edgesConnecting(java.lang.Object) -> edgesConnecting
    java.lang.Object removeInEdge(java.lang.Object,boolean) -> removeInEdge
    java.lang.Object removeOutEdge(java.lang.Object) -> removeOutEdge
    void addInEdge(java.lang.Object,java.lang.Object,boolean) -> addInEdge
    void addOutEdge(java.lang.Object,java.lang.Object) -> addOutEdge
    java.lang.Object getReference(java.lang.ref.Reference) -> getReference
    com.google.common.collect.Multiset access$000(com.google.common.graph.UndirectedMultiNetworkConnections) -> access$000
com.google.common.graph.UndirectedMultiNetworkConnections$1 -> com.google.common.graph.UndirectedMultiNetworkConnections$1:
    java.lang.Object val$node -> val$node
    com.google.common.graph.UndirectedMultiNetworkConnections this$0 -> this$0
    void <init>(com.google.common.graph.UndirectedMultiNetworkConnections,java.util.Map,java.lang.Object,java.lang.Object) -> <init>
    int size() -> size
com.google.common.graph.UndirectedNetworkConnections -> com.google.common.graph.UndirectedNetworkConnections:
    void <init>(java.util.Map) -> <init>
    com.google.common.graph.UndirectedNetworkConnections of() -> of
    com.google.common.graph.UndirectedNetworkConnections ofImmutable(java.util.Map) -> ofImmutable
    java.util.Set adjacentNodes() -> adjacentNodes
    java.util.Set edgesConnecting(java.lang.Object) -> edgesConnecting
com.google.common.graph.ValueGraph -> com.google.common.graph.ValueGraph:
    java.util.Set nodes() -> nodes
    java.util.Set edges() -> edges
    com.google.common.graph.Graph asGraph() -> asGraph
    boolean isDirected() -> isDirected
    boolean allowsSelfLoops() -> allowsSelfLoops
    com.google.common.graph.ElementOrder nodeOrder() -> nodeOrder
    java.util.Set adjacentNodes(java.lang.Object) -> adjacentNodes
    java.util.Set predecessors(java.lang.Object) -> predecessors
    java.util.Set successors(java.lang.Object) -> successors
    java.util.Set incidentEdges(java.lang.Object) -> incidentEdges
    int degree(java.lang.Object) -> degree
    int inDegree(java.lang.Object) -> inDegree
    int outDegree(java.lang.Object) -> outDegree
    boolean hasEdgeConnecting(java.lang.Object,java.lang.Object) -> hasEdgeConnecting
    java.util.Optional edgeValue(java.lang.Object,java.lang.Object) -> edgeValue
    java.lang.Object edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object) -> edgeValueOrDefault
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Iterable successors(java.lang.Object) -> successors
    java.lang.Iterable predecessors(java.lang.Object) -> predecessors
com.google.common.graph.ValueGraphBuilder -> com.google.common.graph.ValueGraphBuilder:
    void <init>(boolean) -> <init>
    com.google.common.graph.ValueGraphBuilder directed() -> directed
    com.google.common.graph.ValueGraphBuilder undirected() -> undirected
    com.google.common.graph.ValueGraphBuilder from(com.google.common.graph.ValueGraph) -> from
    com.google.common.graph.ValueGraphBuilder allowsSelfLoops(boolean) -> allowsSelfLoops
    com.google.common.graph.ValueGraphBuilder expectedNodeCount(int) -> expectedNodeCount
    com.google.common.graph.ValueGraphBuilder nodeOrder(com.google.common.graph.ElementOrder) -> nodeOrder
    com.google.common.graph.MutableValueGraph build() -> build
    com.google.common.graph.ValueGraphBuilder cast() -> cast
com.google.common.graph.package-info -> com.google.common.graph.package-info:
com.google.common.hash.AbstractByteHasher -> com.google.common.hash.AbstractByteHasher:
    java.nio.ByteBuffer scratch -> scratch
    void <init>() -> <init>
    void update(byte) -> update
    void update(byte[]) -> update
    void update(byte[],int,int) -> update
    void update(java.nio.ByteBuffer) -> update
    com.google.common.hash.Hasher update(int) -> update
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.AbstractCompositeHashFunction -> com.google.common.hash.AbstractCompositeHashFunction:
    com.google.common.hash.HashFunction[] functions -> functions
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.hash.HashFunction[]) -> <init>
    com.google.common.hash.HashCode makeHash(com.google.common.hash.Hasher[]) -> makeHash
    com.google.common.hash.Hasher newHasher() -> newHasher
    com.google.common.hash.Hasher newHasher(int) -> newHasher
    com.google.common.hash.Hasher fromHashers(com.google.common.hash.Hasher[]) -> fromHashers
com.google.common.hash.AbstractCompositeHashFunction$1 -> com.google.common.hash.AbstractCompositeHashFunction$1:
    com.google.common.hash.Hasher[] val$hashers -> val$hashers
    com.google.common.hash.AbstractCompositeHashFunction this$0 -> this$0
    void <init>(com.google.common.hash.AbstractCompositeHashFunction,com.google.common.hash.Hasher[]) -> <init>
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putFloat(float) -> putFloat
    com.google.common.hash.Hasher putDouble(double) -> putDouble
    com.google.common.hash.Hasher putBoolean(boolean) -> putBoolean
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    com.google.common.hash.HashCode hash() -> hash
    com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.AbstractHashFunction -> com.google.common.hash.AbstractHashFunction:
    void <init>() -> <init>
    com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel) -> hashObject
    com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    com.google.common.hash.HashCode hashInt(int) -> hashInt
    com.google.common.hash.HashCode hashLong(long) -> hashLong
    com.google.common.hash.HashCode hashBytes(byte[]) -> hashBytes
    com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer) -> hashBytes
    com.google.common.hash.Hasher newHasher(int) -> newHasher
com.google.common.hash.AbstractHasher -> com.google.common.hash.AbstractHasher:
    void <init>() -> <init>
    com.google.common.hash.Hasher putBoolean(boolean) -> putBoolean
    com.google.common.hash.Hasher putDouble(double) -> putDouble
    com.google.common.hash.Hasher putFloat(float) -> putFloat
    com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
com.google.common.hash.AbstractNonStreamingHashFunction -> com.google.common.hash.AbstractNonStreamingHashFunction:
    void <init>() -> <init>
    com.google.common.hash.Hasher newHasher() -> newHasher
    com.google.common.hash.Hasher newHasher(int) -> newHasher
    com.google.common.hash.HashCode hashInt(int) -> hashInt
    com.google.common.hash.HashCode hashLong(long) -> hashLong
    com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer) -> hashBytes
com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher -> com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:
    com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream -> stream
    com.google.common.hash.AbstractNonStreamingHashFunction this$0 -> this$0
    void <init>(com.google.common.hash.AbstractNonStreamingHashFunction,int) -> <init>
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.HashCode hash() -> hash
    com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream -> com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream:
    void <init>(int) -> <init>
    void write(java.nio.ByteBuffer) -> write
    byte[] byteArray() -> byteArray
    int length() -> length
com.google.common.hash.AbstractStreamingHasher -> com.google.common.hash.AbstractStreamingHasher:
    java.nio.ByteBuffer buffer -> buffer
    int bufferSize -> bufferSize
    int chunkSize -> chunkSize
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void process(java.nio.ByteBuffer) -> process
    void processRemaining(java.nio.ByteBuffer) -> processRemaining
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.Hasher putBytesInternal(java.nio.ByteBuffer) -> putBytesInternal
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.HashCode hash() -> hash
    com.google.common.hash.HashCode makeHash() -> makeHash
    void munchIfFull() -> munchIfFull
    void munch() -> munch
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.BloomFilter -> com.google.common.hash.BloomFilter:
    com.google.common.hash.BloomFilterStrategies$LockFreeBitArray bits -> bits
    int numHashFunctions -> numHashFunctions
    com.google.common.hash.Funnel funnel -> funnel
    com.google.common.hash.BloomFilter$Strategy strategy -> strategy
    void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy) -> <init>
    com.google.common.hash.BloomFilter copy() -> copy
    boolean mightContain(java.lang.Object) -> mightContain
    boolean apply(java.lang.Object) -> apply
    boolean put(java.lang.Object) -> put
    double expectedFpp() -> expectedFpp
    long approximateElementCount() -> approximateElementCount
    long bitSize() -> bitSize
    boolean isCompatible(com.google.common.hash.BloomFilter) -> isCompatible
    void putAll(com.google.common.hash.BloomFilter) -> putAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.stream.Collector toBloomFilter(com.google.common.hash.Funnel,long) -> toBloomFilter
    java.util.stream.Collector toBloomFilter(com.google.common.hash.Funnel,long,double) -> toBloomFilter
    com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,int,double) -> create
    com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double) -> create
    com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy) -> create
    com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,int) -> create
    com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,long) -> create
    int optimalNumOfHashFunctions(long,long) -> optimalNumOfHashFunctions
    long optimalNumOfBits(long,double) -> optimalNumOfBits
    java.lang.Object writeReplace() -> writeReplace
    void writeTo(java.io.OutputStream) -> writeTo
    com.google.common.hash.BloomFilter readFrom(java.io.InputStream,com.google.common.hash.Funnel) -> readFrom
    com.google.common.hash.BloomFilter lambda$toBloomFilter$1(com.google.common.hash.BloomFilter,com.google.common.hash.BloomFilter) -> lambda$toBloomFilter$1
    com.google.common.hash.BloomFilter lambda$toBloomFilter$0(com.google.common.hash.Funnel,long,double) -> lambda$toBloomFilter$0
    com.google.common.hash.BloomFilterStrategies$LockFreeBitArray access$000(com.google.common.hash.BloomFilter) -> access$000
    int access$100(com.google.common.hash.BloomFilter) -> access$100
    com.google.common.hash.Funnel access$200(com.google.common.hash.BloomFilter) -> access$200
    com.google.common.hash.BloomFilter$Strategy access$300(com.google.common.hash.BloomFilter) -> access$300
    void <init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy,com.google.common.hash.BloomFilter$1) -> <init>
com.google.common.hash.BloomFilter$1 -> com.google.common.hash.BloomFilter$1:
com.google.common.hash.BloomFilter$SerialForm -> com.google.common.hash.BloomFilter$SerialForm:
    long[] data -> data
    int numHashFunctions -> numHashFunctions
    com.google.common.hash.Funnel funnel -> funnel
    com.google.common.hash.BloomFilter$Strategy strategy -> strategy
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.hash.BloomFilter) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.hash.BloomFilter$Strategy -> com.google.common.hash.BloomFilter$Strategy:
    boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> put
    boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> mightContain
    int ordinal() -> ordinal
com.google.common.hash.BloomFilterStrategies -> com.google.common.hash.BloomFilterStrategies:
    com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_32 -> MURMUR128_MITZ_32
    com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_64 -> MURMUR128_MITZ_64
    com.google.common.hash.BloomFilterStrategies[] $VALUES -> $VALUES
    com.google.common.hash.BloomFilterStrategies[] values() -> values
    com.google.common.hash.BloomFilterStrategies valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,com.google.common.hash.BloomFilterStrategies$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.BloomFilterStrategies$1 -> com.google.common.hash.BloomFilterStrategies$1:
    void <init>(java.lang.String,int) -> <init>
    boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> put
    boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> mightContain
com.google.common.hash.BloomFilterStrategies$2 -> com.google.common.hash.BloomFilterStrategies$2:
    void <init>(java.lang.String,int) -> <init>
    boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> put
    boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> mightContain
    long lowerEight(byte[]) -> lowerEight
    long upperEight(byte[]) -> upperEight
com.google.common.hash.BloomFilterStrategies$LockFreeBitArray -> com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:
    int LONG_ADDRESSABLE_BITS -> LONG_ADDRESSABLE_BITS
    java.util.concurrent.atomic.AtomicLongArray data -> data
    com.google.common.hash.LongAddable bitCount -> bitCount
    void <init>(long) -> <init>
    void <init>(long[]) -> <init>
    boolean set(long) -> set
    boolean get(long) -> get
    long[] toPlainArray(java.util.concurrent.atomic.AtomicLongArray) -> toPlainArray
    long bitSize() -> bitSize
    long bitCount() -> bitCount
    com.google.common.hash.BloomFilterStrategies$LockFreeBitArray copy() -> copy
    void putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray) -> putAll
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.hash.ChecksumHashFunction -> com.google.common.hash.ChecksumHashFunction:
    com.google.common.hash.ImmutableSupplier checksumSupplier -> checksumSupplier
    int bits -> bits
    java.lang.String toString -> toString
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.hash.ImmutableSupplier,int,java.lang.String) -> <init>
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
    int access$100(com.google.common.hash.ChecksumHashFunction) -> access$100
com.google.common.hash.ChecksumHashFunction$1 -> com.google.common.hash.ChecksumHashFunction$1:
com.google.common.hash.ChecksumHashFunction$ChecksumHasher -> com.google.common.hash.ChecksumHashFunction$ChecksumHasher:
    java.util.zip.Checksum checksum -> checksum
    com.google.common.hash.ChecksumHashFunction this$0 -> this$0
    void <init>(com.google.common.hash.ChecksumHashFunction,java.util.zip.Checksum) -> <init>
    void update(byte) -> update
    void update(byte[],int,int) -> update
    com.google.common.hash.HashCode hash() -> hash
    void <init>(com.google.common.hash.ChecksumHashFunction,java.util.zip.Checksum,com.google.common.hash.ChecksumHashFunction$1) -> <init>
com.google.common.hash.Crc32cHashFunction -> com.google.common.hash.Crc32cHashFunction:
    com.google.common.hash.HashFunction CRC_32_C -> CRC_32_C
    void <init>() -> <init>
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.hash.Crc32cHashFunction$Crc32cHasher -> com.google.common.hash.Crc32cHashFunction$Crc32cHasher:
    int[] CRC_TABLE -> CRC_TABLE
    int crc -> crc
    void <init>() -> <init>
    void update(byte) -> update
    com.google.common.hash.HashCode hash() -> hash
    void <clinit>() -> <clinit>
com.google.common.hash.FarmHashFingerprint64 -> com.google.common.hash.FarmHashFingerprint64:
    com.google.common.hash.HashFunction FARMHASH_FINGERPRINT_64 -> FARMHASH_FINGERPRINT_64
    long K0 -> K0
    long K1 -> K1
    long K2 -> K2
    void <init>() -> <init>
    com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    int bits() -> bits
    java.lang.String toString() -> toString
    long fingerprint(byte[],int,int) -> fingerprint
    long shiftMix(long) -> shiftMix
    long hashLength16(long,long,long) -> hashLength16
    void weakHashLength32WithSeeds(byte[],int,long,long,long[]) -> weakHashLength32WithSeeds
    long hashLength0to16(byte[],int,int) -> hashLength0to16
    long hashLength17to32(byte[],int,int) -> hashLength17to32
    long hashLength33To64(byte[],int,int) -> hashLength33To64
    long hashLength65Plus(byte[],int,int) -> hashLength65Plus
    void <clinit>() -> <clinit>
com.google.common.hash.Funnel -> com.google.common.hash.Funnel:
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels -> com.google.common.hash.Funnels:
    void <init>() -> <init>
    com.google.common.hash.Funnel byteArrayFunnel() -> byteArrayFunnel
    com.google.common.hash.Funnel unencodedCharsFunnel() -> unencodedCharsFunnel
    com.google.common.hash.Funnel stringFunnel(java.nio.charset.Charset) -> stringFunnel
    com.google.common.hash.Funnel integerFunnel() -> integerFunnel
    com.google.common.hash.Funnel sequentialFunnel(com.google.common.hash.Funnel) -> sequentialFunnel
    com.google.common.hash.Funnel longFunnel() -> longFunnel
    java.io.OutputStream asOutputStream(com.google.common.hash.PrimitiveSink) -> asOutputStream
com.google.common.hash.Funnels$ByteArrayFunnel -> com.google.common.hash.Funnels$ByteArrayFunnel:
    com.google.common.hash.Funnels$ByteArrayFunnel INSTANCE -> INSTANCE
    com.google.common.hash.Funnels$ByteArrayFunnel[] $VALUES -> $VALUES
    com.google.common.hash.Funnels$ByteArrayFunnel[] values() -> values
    com.google.common.hash.Funnels$ByteArrayFunnel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void funnel(byte[],com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
    void <clinit>() -> <clinit>
com.google.common.hash.Funnels$IntegerFunnel -> com.google.common.hash.Funnels$IntegerFunnel:
    com.google.common.hash.Funnels$IntegerFunnel INSTANCE -> INSTANCE
    com.google.common.hash.Funnels$IntegerFunnel[] $VALUES -> $VALUES
    com.google.common.hash.Funnels$IntegerFunnel[] values() -> values
    com.google.common.hash.Funnels$IntegerFunnel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void funnel(java.lang.Integer,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
    void <clinit>() -> <clinit>
com.google.common.hash.Funnels$LongFunnel -> com.google.common.hash.Funnels$LongFunnel:
    com.google.common.hash.Funnels$LongFunnel INSTANCE -> INSTANCE
    com.google.common.hash.Funnels$LongFunnel[] $VALUES -> $VALUES
    com.google.common.hash.Funnels$LongFunnel[] values() -> values
    com.google.common.hash.Funnels$LongFunnel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void funnel(java.lang.Long,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
    void <clinit>() -> <clinit>
com.google.common.hash.Funnels$SequentialFunnel -> com.google.common.hash.Funnels$SequentialFunnel:
    com.google.common.hash.Funnel elementFunnel -> elementFunnel
    void <init>(com.google.common.hash.Funnel) -> <init>
    void funnel(java.lang.Iterable,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels$SinkAsStream -> com.google.common.hash.Funnels$SinkAsStream:
    com.google.common.hash.PrimitiveSink sink -> sink
    void <init>(com.google.common.hash.PrimitiveSink) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    java.lang.String toString() -> toString
com.google.common.hash.Funnels$StringCharsetFunnel -> com.google.common.hash.Funnels$StringCharsetFunnel:
    java.nio.charset.Charset charset -> charset
    void <init>(java.nio.charset.Charset) -> <init>
    void funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object writeReplace() -> writeReplace
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm -> com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:
    java.lang.String charsetCanonicalName -> charsetCanonicalName
    long serialVersionUID -> serialVersionUID
    void <init>(java.nio.charset.Charset) -> <init>
    java.lang.Object readResolve() -> readResolve
com.google.common.hash.Funnels$UnencodedCharsFunnel -> com.google.common.hash.Funnels$UnencodedCharsFunnel:
    com.google.common.hash.Funnels$UnencodedCharsFunnel INSTANCE -> INSTANCE
    com.google.common.hash.Funnels$UnencodedCharsFunnel[] $VALUES -> $VALUES
    com.google.common.hash.Funnels$UnencodedCharsFunnel[] values() -> values
    com.google.common.hash.Funnels$UnencodedCharsFunnel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void funnel(java.lang.CharSequence,com.google.common.hash.PrimitiveSink) -> funnel
    java.lang.String toString() -> toString
    void funnel(java.lang.Object,com.google.common.hash.PrimitiveSink) -> funnel
    void <clinit>() -> <clinit>
com.google.common.hash.HashCode -> com.google.common.hash.HashCode:
    char[] hexDigits -> hexDigits
    void <init>() -> <init>
    int bits() -> bits
    int asInt() -> asInt
    long asLong() -> asLong
    long padToLong() -> padToLong
    byte[] asBytes() -> asBytes
    int writeBytesTo(byte[],int,int) -> writeBytesTo
    void writeBytesToImpl(byte[],int,int) -> writeBytesToImpl
    byte[] getBytesInternal() -> getBytesInternal
    boolean equalsSameBits(com.google.common.hash.HashCode) -> equalsSameBits
    com.google.common.hash.HashCode fromInt(int) -> fromInt
    com.google.common.hash.HashCode fromLong(long) -> fromLong
    com.google.common.hash.HashCode fromBytes(byte[]) -> fromBytes
    com.google.common.hash.HashCode fromBytesNoCopy(byte[]) -> fromBytesNoCopy
    com.google.common.hash.HashCode fromString(java.lang.String) -> fromString
    int decode(char) -> decode
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.hash.HashCode$BytesHashCode -> com.google.common.hash.HashCode$BytesHashCode:
    byte[] bytes -> bytes
    long serialVersionUID -> serialVersionUID
    void <init>(byte[]) -> <init>
    int bits() -> bits
    byte[] asBytes() -> asBytes
    int asInt() -> asInt
    long asLong() -> asLong
    long padToLong() -> padToLong
    void writeBytesToImpl(byte[],int,int) -> writeBytesToImpl
    byte[] getBytesInternal() -> getBytesInternal
    boolean equalsSameBits(com.google.common.hash.HashCode) -> equalsSameBits
com.google.common.hash.HashCode$IntHashCode -> com.google.common.hash.HashCode$IntHashCode:
    int hash -> hash
    long serialVersionUID -> serialVersionUID
    void <init>(int) -> <init>
    int bits() -> bits
    byte[] asBytes() -> asBytes
    int asInt() -> asInt
    long asLong() -> asLong
    long padToLong() -> padToLong
    void writeBytesToImpl(byte[],int,int) -> writeBytesToImpl
    boolean equalsSameBits(com.google.common.hash.HashCode) -> equalsSameBits
com.google.common.hash.HashCode$LongHashCode -> com.google.common.hash.HashCode$LongHashCode:
    long hash -> hash
    long serialVersionUID -> serialVersionUID
    void <init>(long) -> <init>
    int bits() -> bits
    byte[] asBytes() -> asBytes
    int asInt() -> asInt
    long asLong() -> asLong
    long padToLong() -> padToLong
    void writeBytesToImpl(byte[],int,int) -> writeBytesToImpl
    boolean equalsSameBits(com.google.common.hash.HashCode) -> equalsSameBits
com.google.common.hash.HashFunction -> com.google.common.hash.HashFunction:
    com.google.common.hash.Hasher newHasher() -> newHasher
    com.google.common.hash.Hasher newHasher(int) -> newHasher
    com.google.common.hash.HashCode hashInt(int) -> hashInt
    com.google.common.hash.HashCode hashLong(long) -> hashLong
    com.google.common.hash.HashCode hashBytes(byte[]) -> hashBytes
    com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    com.google.common.hash.HashCode hashBytes(java.nio.ByteBuffer) -> hashBytes
    com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel) -> hashObject
    int bits() -> bits
com.google.common.hash.Hasher -> com.google.common.hash.Hasher:
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[]) -> putBytes
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.Hasher putShort(short) -> putShort
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putFloat(float) -> putFloat
    com.google.common.hash.Hasher putDouble(double) -> putDouble
    com.google.common.hash.Hasher putBoolean(boolean) -> putBoolean
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel) -> putObject
    com.google.common.hash.HashCode hash() -> hash
    int hashCode() -> hashCode
    com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.Hashing -> com.google.common.hash.Hashing:
    int GOOD_FAST_HASH_SEED -> GOOD_FAST_HASH_SEED
    com.google.common.hash.HashFunction goodFastHash(int) -> goodFastHash
    com.google.common.hash.HashFunction murmur3_32(int) -> murmur3_32
    com.google.common.hash.HashFunction murmur3_32() -> murmur3_32
    com.google.common.hash.HashFunction murmur3_128(int) -> murmur3_128
    com.google.common.hash.HashFunction murmur3_128() -> murmur3_128
    com.google.common.hash.HashFunction sipHash24() -> sipHash24
    com.google.common.hash.HashFunction sipHash24(long,long) -> sipHash24
    com.google.common.hash.HashFunction md5() -> md5
    com.google.common.hash.HashFunction sha1() -> sha1
    com.google.common.hash.HashFunction sha256() -> sha256
    com.google.common.hash.HashFunction sha384() -> sha384
    com.google.common.hash.HashFunction sha512() -> sha512
    com.google.common.hash.HashFunction hmacMd5(java.security.Key) -> hmacMd5
    com.google.common.hash.HashFunction hmacMd5(byte[]) -> hmacMd5
    com.google.common.hash.HashFunction hmacSha1(java.security.Key) -> hmacSha1
    com.google.common.hash.HashFunction hmacSha1(byte[]) -> hmacSha1
    com.google.common.hash.HashFunction hmacSha256(java.security.Key) -> hmacSha256
    com.google.common.hash.HashFunction hmacSha256(byte[]) -> hmacSha256
    com.google.common.hash.HashFunction hmacSha512(java.security.Key) -> hmacSha512
    com.google.common.hash.HashFunction hmacSha512(byte[]) -> hmacSha512
    java.lang.String hmacToString(java.lang.String,java.security.Key) -> hmacToString
    com.google.common.hash.HashFunction crc32c() -> crc32c
    com.google.common.hash.HashFunction crc32() -> crc32
    com.google.common.hash.HashFunction adler32() -> adler32
    com.google.common.hash.HashFunction farmHashFingerprint64() -> farmHashFingerprint64
    int consistentHash(com.google.common.hash.HashCode,int) -> consistentHash
    int consistentHash(long,int) -> consistentHash
    com.google.common.hash.HashCode combineOrdered(java.lang.Iterable) -> combineOrdered
    com.google.common.hash.HashCode combineUnordered(java.lang.Iterable) -> combineUnordered
    int checkPositiveAndMakeMultipleOf32(int) -> checkPositiveAndMakeMultipleOf32
    com.google.common.hash.HashFunction concatenating(com.google.common.hash.HashFunction,com.google.common.hash.HashFunction,com.google.common.hash.HashFunction[]) -> concatenating
    com.google.common.hash.HashFunction concatenating(java.lang.Iterable) -> concatenating
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.Hashing$1 -> com.google.common.hash.Hashing$1:
com.google.common.hash.Hashing$ChecksumType -> com.google.common.hash.Hashing$ChecksumType:
    com.google.common.hash.Hashing$ChecksumType CRC_32 -> CRC_32
    com.google.common.hash.Hashing$ChecksumType ADLER_32 -> ADLER_32
    com.google.common.hash.HashFunction hashFunction -> hashFunction
    com.google.common.hash.Hashing$ChecksumType[] $VALUES -> $VALUES
    com.google.common.hash.Hashing$ChecksumType[] values() -> values
    com.google.common.hash.Hashing$ChecksumType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int,java.lang.String,com.google.common.hash.Hashing$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.Hashing$ChecksumType$1 -> com.google.common.hash.Hashing$ChecksumType$1:
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.util.zip.Checksum get() -> get
    java.lang.Object get() -> get
com.google.common.hash.Hashing$ChecksumType$2 -> com.google.common.hash.Hashing$ChecksumType$2:
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.util.zip.Checksum get() -> get
    java.lang.Object get() -> get
com.google.common.hash.Hashing$ConcatenatedHashFunction -> com.google.common.hash.Hashing$ConcatenatedHashFunction:
    void <init>(com.google.common.hash.HashFunction[]) -> <init>
    com.google.common.hash.HashCode makeHash(com.google.common.hash.Hasher[]) -> makeHash
    int bits() -> bits
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(com.google.common.hash.HashFunction[],com.google.common.hash.Hashing$1) -> <init>
com.google.common.hash.Hashing$LinearCongruentialGenerator -> com.google.common.hash.Hashing$LinearCongruentialGenerator:
    long state -> state
    void <init>(long) -> <init>
    double nextDouble() -> nextDouble
com.google.common.hash.Hashing$Md5Holder -> com.google.common.hash.Hashing$Md5Holder:
    com.google.common.hash.HashFunction MD5 -> MD5
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.Hashing$Sha1Holder -> com.google.common.hash.Hashing$Sha1Holder:
    com.google.common.hash.HashFunction SHA_1 -> SHA_1
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.Hashing$Sha256Holder -> com.google.common.hash.Hashing$Sha256Holder:
    com.google.common.hash.HashFunction SHA_256 -> SHA_256
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.Hashing$Sha384Holder -> com.google.common.hash.Hashing$Sha384Holder:
    com.google.common.hash.HashFunction SHA_384 -> SHA_384
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.Hashing$Sha512Holder -> com.google.common.hash.Hashing$Sha512Holder:
    com.google.common.hash.HashFunction SHA_512 -> SHA_512
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.HashingInputStream -> com.google.common.hash.HashingInputStream:
    com.google.common.hash.Hasher hasher -> hasher
    void <init>(com.google.common.hash.HashFunction,java.io.InputStream) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    com.google.common.hash.HashCode hash() -> hash
com.google.common.hash.HashingOutputStream -> com.google.common.hash.HashingOutputStream:
    com.google.common.hash.Hasher hasher -> hasher
    void <init>(com.google.common.hash.HashFunction,java.io.OutputStream) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
    com.google.common.hash.HashCode hash() -> hash
    void close() -> close
com.google.common.hash.ImmutableSupplier -> com.google.common.hash.ImmutableSupplier:
com.google.common.hash.LittleEndianByteArray -> com.google.common.hash.LittleEndianByteArray:
    com.google.common.hash.LittleEndianByteArray$LittleEndianBytes byteArray -> byteArray
    boolean $assertionsDisabled -> $assertionsDisabled
    long load64(byte[],int) -> load64
    long load64Safely(byte[],int,int) -> load64Safely
    void store64(byte[],int,long) -> store64
    int load32(byte[],int) -> load32
    boolean usingUnsafe() -> usingUnsafe
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.LittleEndianByteArray$1 -> com.google.common.hash.LittleEndianByteArray$1:
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes -> com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes:
    com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes INSTANCE -> INSTANCE
    com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes[] $VALUES -> $VALUES
    com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes[] values() -> values
    com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,com.google.common.hash.LittleEndianByteArray$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1 -> com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1:
    void <init>(java.lang.String,int) -> <init>
    long getLongLittleEndian(byte[],int) -> getLongLittleEndian
    void putLongLittleEndian(byte[],int,long) -> putLongLittleEndian
com.google.common.hash.LittleEndianByteArray$LittleEndianBytes -> com.google.common.hash.LittleEndianByteArray$LittleEndianBytes:
    long getLongLittleEndian(byte[],int) -> getLongLittleEndian
    void putLongLittleEndian(byte[],int,long) -> putLongLittleEndian
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray -> com.google.common.hash.LittleEndianByteArray$UnsafeByteArray:
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray UNSAFE_LITTLE_ENDIAN -> UNSAFE_LITTLE_ENDIAN
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray UNSAFE_BIG_ENDIAN -> UNSAFE_BIG_ENDIAN
    sun.misc.Unsafe theUnsafe -> theUnsafe
    int BYTE_ARRAY_BASE_OFFSET -> BYTE_ARRAY_BASE_OFFSET
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray[] $VALUES -> $VALUES
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray[] values() -> values
    com.google.common.hash.LittleEndianByteArray$UnsafeByteArray valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    sun.misc.Unsafe getUnsafe() -> getUnsafe
    void <init>(java.lang.String,int,com.google.common.hash.LittleEndianByteArray$1) -> <init>
    int access$100() -> access$100
    sun.misc.Unsafe access$200() -> access$200
    void <clinit>() -> <clinit>
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1 -> com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1:
    void <init>(java.lang.String,int) -> <init>
    long getLongLittleEndian(byte[],int) -> getLongLittleEndian
    void putLongLittleEndian(byte[],int,long) -> putLongLittleEndian
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2 -> com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2:
    void <init>(java.lang.String,int) -> <init>
    long getLongLittleEndian(byte[],int) -> getLongLittleEndian
    void putLongLittleEndian(byte[],int,long) -> putLongLittleEndian
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3 -> com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3:
    void <init>() -> <init>
    sun.misc.Unsafe run() -> run
    java.lang.Object run() -> run
com.google.common.hash.LongAddable -> com.google.common.hash.LongAddable:
    void increment() -> increment
    void add(long) -> add
    long sum() -> sum
com.google.common.hash.LongAddables -> com.google.common.hash.LongAddables:
    com.google.common.base.Supplier SUPPLIER -> SUPPLIER
    void <init>() -> <init>
    com.google.common.hash.LongAddable create() -> create
    void <clinit>() -> <clinit>
com.google.common.hash.LongAddables$1 -> com.google.common.hash.LongAddables$1:
    void <init>() -> <init>
    com.google.common.hash.LongAddable get() -> get
    java.lang.Object get() -> get
com.google.common.hash.LongAddables$2 -> com.google.common.hash.LongAddables$2:
    void <init>() -> <init>
    com.google.common.hash.LongAddable get() -> get
    java.lang.Object get() -> get
com.google.common.hash.LongAddables$PureJavaLongAddable -> com.google.common.hash.LongAddables$PureJavaLongAddable:
    void <init>() -> <init>
    void increment() -> increment
    void add(long) -> add
    long sum() -> sum
    void <init>(com.google.common.hash.LongAddables$1) -> <init>
com.google.common.hash.LongAdder -> com.google.common.hash.LongAdder:
    long serialVersionUID -> serialVersionUID
    long fn(long,long) -> fn
    void <init>() -> <init>
    void add(long) -> add
    void increment() -> increment
    void decrement() -> decrement
    long sum() -> sum
    void reset() -> reset
    long sumThenReset() -> sumThenReset
    java.lang.String toString() -> toString
    long longValue() -> longValue
    int intValue() -> intValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.hash.MacHashFunction -> com.google.common.hash.MacHashFunction:
    javax.crypto.Mac prototype -> prototype
    java.security.Key key -> key
    java.lang.String toString -> toString
    int bits -> bits
    boolean supportsClone -> supportsClone
    void <init>(java.lang.String,java.security.Key,java.lang.String) -> <init>
    int bits() -> bits
    boolean supportsClone(javax.crypto.Mac) -> supportsClone
    javax.crypto.Mac getMac(java.lang.String,java.security.Key) -> getMac
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
com.google.common.hash.MacHashFunction$1 -> com.google.common.hash.MacHashFunction$1:
com.google.common.hash.MacHashFunction$MacHasher -> com.google.common.hash.MacHashFunction$MacHasher:
    javax.crypto.Mac mac -> mac
    boolean done -> done
    void <init>(javax.crypto.Mac) -> <init>
    void update(byte) -> update
    void update(byte[]) -> update
    void update(byte[],int,int) -> update
    void update(java.nio.ByteBuffer) -> update
    void checkNotDone() -> checkNotDone
    com.google.common.hash.HashCode hash() -> hash
    void <init>(javax.crypto.Mac,com.google.common.hash.MacHashFunction$1) -> <init>
com.google.common.hash.MessageDigestHashFunction -> com.google.common.hash.MessageDigestHashFunction:
    java.security.MessageDigest prototype -> prototype
    int bytes -> bytes
    boolean supportsClone -> supportsClone
    java.lang.String toString -> toString
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    boolean supportsClone(java.security.MessageDigest) -> supportsClone
    int bits() -> bits
    java.lang.String toString() -> toString
    java.security.MessageDigest getMessageDigest(java.lang.String) -> getMessageDigest
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.Object writeReplace() -> writeReplace
com.google.common.hash.MessageDigestHashFunction$1 -> com.google.common.hash.MessageDigestHashFunction$1:
com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher -> com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:
    java.security.MessageDigest digest -> digest
    int bytes -> bytes
    boolean done -> done
    void <init>(java.security.MessageDigest,int) -> <init>
    void update(byte) -> update
    void update(byte[],int,int) -> update
    void update(java.nio.ByteBuffer) -> update
    void checkNotDone() -> checkNotDone
    com.google.common.hash.HashCode hash() -> hash
    void <init>(java.security.MessageDigest,int,com.google.common.hash.MessageDigestHashFunction$1) -> <init>
com.google.common.hash.MessageDigestHashFunction$SerializedForm -> com.google.common.hash.MessageDigestHashFunction$SerializedForm:
    java.lang.String algorithmName -> algorithmName
    int bytes -> bytes
    java.lang.String toString -> toString
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.Object readResolve() -> readResolve
    void <init>(java.lang.String,int,java.lang.String,com.google.common.hash.MessageDigestHashFunction$1) -> <init>
com.google.common.hash.Murmur3_128HashFunction -> com.google.common.hash.Murmur3_128HashFunction:
    com.google.common.hash.HashFunction MURMUR3_128 -> MURMUR3_128
    com.google.common.hash.HashFunction GOOD_FAST_HASH_128 -> GOOD_FAST_HASH_128
    int seed -> seed
    long serialVersionUID -> serialVersionUID
    void <init>(int) -> <init>
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher -> com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:
    int CHUNK_SIZE -> CHUNK_SIZE
    long C1 -> C1
    long C2 -> C2
    long h1 -> h1
    long h2 -> h2
    int length -> length
    void <init>(int) -> <init>
    void process(java.nio.ByteBuffer) -> process
    void bmix64(long,long) -> bmix64
    void processRemaining(java.nio.ByteBuffer) -> processRemaining
    com.google.common.hash.HashCode makeHash() -> makeHash
    long fmix64(long) -> fmix64
    long mixK1(long) -> mixK1
    long mixK2(long) -> mixK2
com.google.common.hash.Murmur3_32HashFunction -> com.google.common.hash.Murmur3_32HashFunction:
    com.google.common.hash.HashFunction MURMUR3_32 -> MURMUR3_32
    com.google.common.hash.HashFunction GOOD_FAST_HASH_32 -> GOOD_FAST_HASH_32
    int CHUNK_SIZE -> CHUNK_SIZE
    int C1 -> C1
    int C2 -> C2
    int seed -> seed
    long serialVersionUID -> serialVersionUID
    void <init>(int) -> <init>
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.common.hash.HashCode hashInt(int) -> hashInt
    com.google.common.hash.HashCode hashLong(long) -> hashLong
    com.google.common.hash.HashCode hashUnencodedChars(java.lang.CharSequence) -> hashUnencodedChars
    com.google.common.hash.HashCode hashString(java.lang.CharSequence,java.nio.charset.Charset) -> hashString
    com.google.common.hash.HashCode hashBytes(byte[],int,int) -> hashBytes
    int getIntLittleEndian(byte[],int) -> getIntLittleEndian
    int mixK1(int) -> mixK1
    int mixH1(int,int) -> mixH1
    com.google.common.hash.HashCode fmix(int,int) -> fmix
    long codePointToFourUtf8Bytes(int) -> codePointToFourUtf8Bytes
    long charToThreeUtf8Bytes(char) -> charToThreeUtf8Bytes
    long charToTwoUtf8Bytes(char) -> charToTwoUtf8Bytes
    int access$000(int) -> access$000
    int access$100(int,int) -> access$100
    int access$200(byte[],int) -> access$200
    long access$300(char) -> access$300
    long access$400(char) -> access$400
    long access$500(int) -> access$500
    com.google.common.hash.HashCode access$600(int,int) -> access$600
    void <clinit>() -> <clinit>
com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher -> com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:
    int h1 -> h1
    long buffer -> buffer
    int shift -> shift
    int length -> length
    boolean isDone -> isDone
    void <init>(int) -> <init>
    void update(int,long) -> update
    com.google.common.hash.Hasher putByte(byte) -> putByte
    com.google.common.hash.Hasher putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.Hasher putInt(int) -> putInt
    com.google.common.hash.Hasher putLong(long) -> putLong
    com.google.common.hash.Hasher putChar(char) -> putChar
    com.google.common.hash.Hasher putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.HashCode hash() -> hash
    com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
com.google.common.hash.PrimitiveSink -> com.google.common.hash.PrimitiveSink:
    com.google.common.hash.PrimitiveSink putByte(byte) -> putByte
    com.google.common.hash.PrimitiveSink putBytes(byte[]) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(byte[],int,int) -> putBytes
    com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer) -> putBytes
    com.google.common.hash.PrimitiveSink putShort(short) -> putShort
    com.google.common.hash.PrimitiveSink putInt(int) -> putInt
    com.google.common.hash.PrimitiveSink putLong(long) -> putLong
    com.google.common.hash.PrimitiveSink putFloat(float) -> putFloat
    com.google.common.hash.PrimitiveSink putDouble(double) -> putDouble
    com.google.common.hash.PrimitiveSink putBoolean(boolean) -> putBoolean
    com.google.common.hash.PrimitiveSink putChar(char) -> putChar
    com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence) -> putUnencodedChars
    com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence,java.nio.charset.Charset) -> putString
com.google.common.hash.SipHashFunction -> com.google.common.hash.SipHashFunction:
    com.google.common.hash.HashFunction SIP_HASH_24 -> SIP_HASH_24
    int c -> c
    int d -> d
    long k0 -> k0
    long k1 -> k1
    long serialVersionUID -> serialVersionUID
    void <init>(int,int,long,long) -> <init>
    int bits() -> bits
    com.google.common.hash.Hasher newHasher() -> newHasher
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
com.google.common.hash.SipHashFunction$SipHasher -> com.google.common.hash.SipHashFunction$SipHasher:
    int CHUNK_SIZE -> CHUNK_SIZE
    int c -> c
    int d -> d
    long v0 -> v0
    long v1 -> v1
    long v2 -> v2
    long v3 -> v3
    long b -> b
    long finalM -> finalM
    void <init>(int,int,long,long) -> <init>
    void process(java.nio.ByteBuffer) -> process
    void processRemaining(java.nio.ByteBuffer) -> processRemaining
    com.google.common.hash.HashCode makeHash() -> makeHash
    void processM(long) -> processM
    void sipRound(int) -> sipRound
com.google.common.hash.Striped64 -> com.google.common.hash.Striped64:
    java.lang.ThreadLocal threadHashCode -> threadHashCode
    java.util.Random rng -> rng
    int NCPU -> NCPU
    com.google.common.hash.Striped64$Cell[] cells -> cells
    long base -> base
    int busy -> busy
    sun.misc.Unsafe UNSAFE -> UNSAFE
    long baseOffset -> baseOffset
    long busyOffset -> busyOffset
    void <init>() -> <init>
    boolean casBase(long,long) -> casBase
    boolean casBusy() -> casBusy
    long fn(long,long) -> fn
    void retryUpdate(long,int[],boolean) -> retryUpdate
    void internalReset(long) -> internalReset
    sun.misc.Unsafe getUnsafe() -> getUnsafe
    sun.misc.Unsafe access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.hash.Striped64$1 -> com.google.common.hash.Striped64$1:
    void <init>() -> <init>
    sun.misc.Unsafe run() -> run
    java.lang.Object run() -> run
com.google.common.hash.Striped64$Cell -> com.google.common.hash.Striped64$Cell:
    long p0 -> p0
    long p1 -> p1
    long p2 -> p2
    long p3 -> p3
    long p4 -> p4
    long p5 -> p5
    long p6 -> p6
    long value -> value
    long q0 -> q0
    long q1 -> q1
    long q2 -> q2
    long q3 -> q3
    long q4 -> q4
    long q5 -> q5
    long q6 -> q6
    sun.misc.Unsafe UNSAFE -> UNSAFE
    long valueOffset -> valueOffset
    void <init>(long) -> <init>
    boolean cas(long,long) -> cas
    void <clinit>() -> <clinit>
com.google.common.hash.package-info -> com.google.common.hash.package-info:
com.google.common.html.HtmlEscapers -> com.google.common.html.HtmlEscapers:
    com.google.common.escape.Escaper HTML_ESCAPER -> HTML_ESCAPER
    com.google.common.escape.Escaper htmlEscaper() -> htmlEscaper
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.html.package-info -> com.google.common.html.package-info:
com.google.common.io.AppendableWriter -> com.google.common.io.AppendableWriter:
    java.lang.Appendable target -> target
    boolean closed -> closed
    void <init>(java.lang.Appendable) -> <init>
    void write(char[],int,int) -> write
    void write(int) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
    void flush() -> flush
    void close() -> close
    java.io.Writer append(char) -> append
    java.io.Writer append(java.lang.CharSequence) -> append
    java.io.Writer append(java.lang.CharSequence,int,int) -> append
    void checkNotClosed() -> checkNotClosed
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.google.common.io.BaseEncoding -> com.google.common.io.BaseEncoding:
    com.google.common.io.BaseEncoding BASE64 -> BASE64
    com.google.common.io.BaseEncoding BASE64_URL -> BASE64_URL
    com.google.common.io.BaseEncoding BASE32 -> BASE32
    com.google.common.io.BaseEncoding BASE32_HEX -> BASE32_HEX
    com.google.common.io.BaseEncoding BASE16 -> BASE16
    void <init>() -> <init>
    java.lang.String encode(byte[]) -> encode
    java.lang.String encode(byte[],int,int) -> encode
    java.io.OutputStream encodingStream(java.io.Writer) -> encodingStream
    com.google.common.io.ByteSink encodingSink(com.google.common.io.CharSink) -> encodingSink
    byte[] extract(byte[],int) -> extract
    boolean canDecode(java.lang.CharSequence) -> canDecode
    byte[] decode(java.lang.CharSequence) -> decode
    byte[] decodeChecked(java.lang.CharSequence) -> decodeChecked
    java.io.InputStream decodingStream(java.io.Reader) -> decodingStream
    com.google.common.io.ByteSource decodingSource(com.google.common.io.CharSource) -> decodingSource
    int maxEncodedSize(int) -> maxEncodedSize
    void encodeTo(java.lang.Appendable,byte[],int,int) -> encodeTo
    int maxDecodedSize(int) -> maxDecodedSize
    int decodeTo(byte[],java.lang.CharSequence) -> decodeTo
    java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence) -> trimTrailingPadding
    com.google.common.io.BaseEncoding omitPadding() -> omitPadding
    com.google.common.io.BaseEncoding withPadChar(char) -> withPadChar
    com.google.common.io.BaseEncoding withSeparator(java.lang.String,int) -> withSeparator
    com.google.common.io.BaseEncoding upperCase() -> upperCase
    com.google.common.io.BaseEncoding lowerCase() -> lowerCase
    com.google.common.io.BaseEncoding base64() -> base64
    com.google.common.io.BaseEncoding base64Url() -> base64Url
    com.google.common.io.BaseEncoding base32() -> base32
    com.google.common.io.BaseEncoding base32Hex() -> base32Hex
    com.google.common.io.BaseEncoding base16() -> base16
    java.io.Reader ignoringReader(java.io.Reader,java.lang.String) -> ignoringReader
    java.lang.Appendable separatingAppendable(java.lang.Appendable,java.lang.String,int) -> separatingAppendable
    java.io.Writer separatingWriter(java.io.Writer,java.lang.String,int) -> separatingWriter
    void <clinit>() -> <clinit>
com.google.common.io.BaseEncoding$1 -> com.google.common.io.BaseEncoding$1:
    com.google.common.io.CharSink val$encodedSink -> val$encodedSink
    com.google.common.io.BaseEncoding this$0 -> this$0
    void <init>(com.google.common.io.BaseEncoding,com.google.common.io.CharSink) -> <init>
    java.io.OutputStream openStream() -> openStream
com.google.common.io.BaseEncoding$2 -> com.google.common.io.BaseEncoding$2:
    com.google.common.io.CharSource val$encodedSource -> val$encodedSource
    com.google.common.io.BaseEncoding this$0 -> this$0
    void <init>(com.google.common.io.BaseEncoding,com.google.common.io.CharSource) -> <init>
    java.io.InputStream openStream() -> openStream
com.google.common.io.BaseEncoding$3 -> com.google.common.io.BaseEncoding$3:
    java.io.Reader val$delegate -> val$delegate
    java.lang.String val$toIgnore -> val$toIgnore
    void <init>(java.io.Reader,java.lang.String) -> <init>
    int read() -> read
    int read(char[],int,int) -> read
    void close() -> close
com.google.common.io.BaseEncoding$4 -> com.google.common.io.BaseEncoding$4:
    int charsUntilSeparator -> charsUntilSeparator
    int val$afterEveryChars -> val$afterEveryChars
    java.lang.Appendable val$delegate -> val$delegate
    java.lang.String val$separator -> val$separator
    void <init>(int,java.lang.Appendable,java.lang.String) -> <init>
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.google.common.io.BaseEncoding$5 -> com.google.common.io.BaseEncoding$5:
    java.lang.Appendable val$seperatingAppendable -> val$seperatingAppendable
    java.io.Writer val$delegate -> val$delegate
    void <init>(java.lang.Appendable,java.io.Writer) -> <init>
    void write(int) -> write
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.google.common.io.BaseEncoding$Alphabet -> com.google.common.io.BaseEncoding$Alphabet:
    java.lang.String name -> name
    char[] chars -> chars
    int mask -> mask
    int bitsPerChar -> bitsPerChar
    int charsPerChunk -> charsPerChunk
    int bytesPerChunk -> bytesPerChunk
    byte[] decodabet -> decodabet
    boolean[] validPadding -> validPadding
    void <init>(java.lang.String,char[]) -> <init>
    char encode(int) -> encode
    boolean isValidPaddingStartPosition(int) -> isValidPaddingStartPosition
    boolean canDecode(char) -> canDecode
    int decode(char) -> decode
    boolean hasLowerCase() -> hasLowerCase
    boolean hasUpperCase() -> hasUpperCase
    com.google.common.io.BaseEncoding$Alphabet upperCase() -> upperCase
    com.google.common.io.BaseEncoding$Alphabet lowerCase() -> lowerCase
    boolean matches(char) -> matches
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    char[] access$000(com.google.common.io.BaseEncoding$Alphabet) -> access$000
com.google.common.io.BaseEncoding$Base16Encoding -> com.google.common.io.BaseEncoding$Base16Encoding:
    char[] encoding -> encoding
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(com.google.common.io.BaseEncoding$Alphabet) -> <init>
    void encodeTo(java.lang.Appendable,byte[],int,int) -> encodeTo
    int decodeTo(byte[],java.lang.CharSequence) -> decodeTo
    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> newInstance
com.google.common.io.BaseEncoding$Base64Encoding -> com.google.common.io.BaseEncoding$Base64Encoding:
    void <init>(java.lang.String,java.lang.String,java.lang.Character) -> <init>
    void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> <init>
    void encodeTo(java.lang.Appendable,byte[],int,int) -> encodeTo
    int decodeTo(byte[],java.lang.CharSequence) -> decodeTo
    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> newInstance
com.google.common.io.BaseEncoding$DecodingException -> com.google.common.io.BaseEncoding$DecodingException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.common.io.BaseEncoding$SeparatedBaseEncoding -> com.google.common.io.BaseEncoding$SeparatedBaseEncoding:
    com.google.common.io.BaseEncoding delegate -> delegate
    java.lang.String separator -> separator
    int afterEveryChars -> afterEveryChars
    void <init>(com.google.common.io.BaseEncoding,java.lang.String,int) -> <init>
    java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence) -> trimTrailingPadding
    int maxEncodedSize(int) -> maxEncodedSize
    java.io.OutputStream encodingStream(java.io.Writer) -> encodingStream
    void encodeTo(java.lang.Appendable,byte[],int,int) -> encodeTo
    int maxDecodedSize(int) -> maxDecodedSize
    boolean canDecode(java.lang.CharSequence) -> canDecode
    int decodeTo(byte[],java.lang.CharSequence) -> decodeTo
    java.io.InputStream decodingStream(java.io.Reader) -> decodingStream
    com.google.common.io.BaseEncoding omitPadding() -> omitPadding
    com.google.common.io.BaseEncoding withPadChar(char) -> withPadChar
    com.google.common.io.BaseEncoding withSeparator(java.lang.String,int) -> withSeparator
    com.google.common.io.BaseEncoding upperCase() -> upperCase
    com.google.common.io.BaseEncoding lowerCase() -> lowerCase
    java.lang.String toString() -> toString
com.google.common.io.BaseEncoding$StandardBaseEncoding -> com.google.common.io.BaseEncoding$StandardBaseEncoding:
    com.google.common.io.BaseEncoding$Alphabet alphabet -> alphabet
    java.lang.Character paddingChar -> paddingChar
    com.google.common.io.BaseEncoding upperCase -> upperCase
    com.google.common.io.BaseEncoding lowerCase -> lowerCase
    void <init>(java.lang.String,java.lang.String,java.lang.Character) -> <init>
    void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> <init>
    int maxEncodedSize(int) -> maxEncodedSize
    java.io.OutputStream encodingStream(java.io.Writer) -> encodingStream
    void encodeTo(java.lang.Appendable,byte[],int,int) -> encodeTo
    void encodeChunkTo(java.lang.Appendable,byte[],int,int) -> encodeChunkTo
    int maxDecodedSize(int) -> maxDecodedSize
    java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence) -> trimTrailingPadding
    boolean canDecode(java.lang.CharSequence) -> canDecode
    int decodeTo(byte[],java.lang.CharSequence) -> decodeTo
    java.io.InputStream decodingStream(java.io.Reader) -> decodingStream
    com.google.common.io.BaseEncoding omitPadding() -> omitPadding
    com.google.common.io.BaseEncoding withPadChar(char) -> withPadChar
    com.google.common.io.BaseEncoding withSeparator(java.lang.String,int) -> withSeparator
    com.google.common.io.BaseEncoding upperCase() -> upperCase
    com.google.common.io.BaseEncoding lowerCase() -> lowerCase
    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character) -> newInstance
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.common.io.BaseEncoding$StandardBaseEncoding$1 -> com.google.common.io.BaseEncoding$StandardBaseEncoding$1:
    int bitBuffer -> bitBuffer
    int bitBufferLength -> bitBufferLength
    int writtenChars -> writtenChars
    java.io.Writer val$out -> val$out
    com.google.common.io.BaseEncoding$StandardBaseEncoding this$0 -> this$0
    void <init>(com.google.common.io.BaseEncoding$StandardBaseEncoding,java.io.Writer) -> <init>
    void write(int) -> write
    void flush() -> flush
    void close() -> close
com.google.common.io.BaseEncoding$StandardBaseEncoding$2 -> com.google.common.io.BaseEncoding$StandardBaseEncoding$2:
    int bitBuffer -> bitBuffer
    int bitBufferLength -> bitBufferLength
    int readChars -> readChars
    boolean hitPadding -> hitPadding
    java.io.Reader val$reader -> val$reader
    com.google.common.io.BaseEncoding$StandardBaseEncoding this$0 -> this$0
    void <init>(com.google.common.io.BaseEncoding$StandardBaseEncoding,java.io.Reader) -> <init>
    int read() -> read
    void close() -> close
com.google.common.io.ByteArrayDataInput -> com.google.common.io.ByteArrayDataInput:
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
com.google.common.io.ByteArrayDataOutput -> com.google.common.io.ByteArrayDataOutput:
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeShort(int) -> writeShort
    void writeChar(int) -> writeChar
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeChars(java.lang.String) -> writeChars
    void writeUTF(java.lang.String) -> writeUTF
    void writeBytes(java.lang.String) -> writeBytes
    byte[] toByteArray() -> toByteArray
com.google.common.io.ByteProcessor -> com.google.common.io.ByteProcessor:
    boolean processBytes(byte[],int,int) -> processBytes
    java.lang.Object getResult() -> getResult
com.google.common.io.ByteSink -> com.google.common.io.ByteSink:
    void <init>() -> <init>
    com.google.common.io.CharSink asCharSink(java.nio.charset.Charset) -> asCharSink
    java.io.OutputStream openStream() -> openStream
    java.io.OutputStream openBufferedStream() -> openBufferedStream
    void write(byte[]) -> write
    long writeFrom(java.io.InputStream) -> writeFrom
com.google.common.io.ByteSink$1 -> com.google.common.io.ByteSink$1:
com.google.common.io.ByteSink$AsCharSink -> com.google.common.io.ByteSink$AsCharSink:
    java.nio.charset.Charset charset -> charset
    com.google.common.io.ByteSink this$0 -> this$0
    void <init>(com.google.common.io.ByteSink,java.nio.charset.Charset) -> <init>
    java.io.Writer openStream() -> openStream
    java.lang.String toString() -> toString
    void <init>(com.google.common.io.ByteSink,java.nio.charset.Charset,com.google.common.io.ByteSink$1) -> <init>
com.google.common.io.ByteSource -> com.google.common.io.ByteSource:
    void <init>() -> <init>
    com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    java.io.InputStream openStream() -> openStream
    java.io.InputStream openBufferedStream() -> openBufferedStream
    com.google.common.io.ByteSource slice(long,long) -> slice
    boolean isEmpty() -> isEmpty
    com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    long size() -> size
    long countBySkipping(java.io.InputStream) -> countBySkipping
    long copyTo(java.io.OutputStream) -> copyTo
    long copyTo(com.google.common.io.ByteSink) -> copyTo
    byte[] read() -> read
    java.lang.Object read(com.google.common.io.ByteProcessor) -> read
    com.google.common.hash.HashCode hash(com.google.common.hash.HashFunction) -> hash
    boolean contentEquals(com.google.common.io.ByteSource) -> contentEquals
    com.google.common.io.ByteSource concat(java.lang.Iterable) -> concat
    com.google.common.io.ByteSource concat(java.util.Iterator) -> concat
    com.google.common.io.ByteSource concat(com.google.common.io.ByteSource[]) -> concat
    com.google.common.io.ByteSource wrap(byte[]) -> wrap
    com.google.common.io.ByteSource empty() -> empty
com.google.common.io.ByteSource$AsCharSource -> com.google.common.io.ByteSource$AsCharSource:
    java.nio.charset.Charset charset -> charset
    com.google.common.io.ByteSource this$0 -> this$0
    void <init>(com.google.common.io.ByteSource,java.nio.charset.Charset) -> <init>
    com.google.common.io.ByteSource asByteSource(java.nio.charset.Charset) -> asByteSource
    java.io.Reader openStream() -> openStream
    java.lang.String read() -> read
    java.lang.String toString() -> toString
com.google.common.io.ByteSource$ByteArrayByteSource -> com.google.common.io.ByteSource$ByteArrayByteSource:
    byte[] bytes -> bytes
    int offset -> offset
    int length -> length
    void <init>(byte[]) -> <init>
    void <init>(byte[],int,int) -> <init>
    java.io.InputStream openStream() -> openStream
    java.io.InputStream openBufferedStream() -> openBufferedStream
    boolean isEmpty() -> isEmpty
    long size() -> size
    com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    byte[] read() -> read
    java.lang.Object read(com.google.common.io.ByteProcessor) -> read
    long copyTo(java.io.OutputStream) -> copyTo
    com.google.common.hash.HashCode hash(com.google.common.hash.HashFunction) -> hash
    com.google.common.io.ByteSource slice(long,long) -> slice
    java.lang.String toString() -> toString
com.google.common.io.ByteSource$ConcatenatedByteSource -> com.google.common.io.ByteSource$ConcatenatedByteSource:
    java.lang.Iterable sources -> sources
    void <init>(java.lang.Iterable) -> <init>
    java.io.InputStream openStream() -> openStream
    boolean isEmpty() -> isEmpty
    com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    long size() -> size
    java.lang.String toString() -> toString
com.google.common.io.ByteSource$EmptyByteSource -> com.google.common.io.ByteSource$EmptyByteSource:
    com.google.common.io.ByteSource$EmptyByteSource INSTANCE -> INSTANCE
    void <init>() -> <init>
    com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    byte[] read() -> read
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.io.ByteSource$SlicedByteSource -> com.google.common.io.ByteSource$SlicedByteSource:
    long offset -> offset
    long length -> length
    com.google.common.io.ByteSource this$0 -> this$0
    void <init>(com.google.common.io.ByteSource,long,long) -> <init>
    java.io.InputStream openStream() -> openStream
    java.io.InputStream openBufferedStream() -> openBufferedStream
    java.io.InputStream sliceStream(java.io.InputStream) -> sliceStream
    com.google.common.io.ByteSource slice(long,long) -> slice
    boolean isEmpty() -> isEmpty
    com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    java.lang.String toString() -> toString
com.google.common.io.ByteStreams -> com.google.common.io.ByteStreams:
    int BUFFER_SIZE -> BUFFER_SIZE
    int ZERO_COPY_CHUNK_SIZE -> ZERO_COPY_CHUNK_SIZE
    int MAX_ARRAY_LEN -> MAX_ARRAY_LEN
    int TO_BYTE_ARRAY_DEQUE_SIZE -> TO_BYTE_ARRAY_DEQUE_SIZE
    java.io.OutputStream NULL_OUTPUT_STREAM -> NULL_OUTPUT_STREAM
    byte[] createBuffer() -> createBuffer
    void <init>() -> <init>
    long copy(java.io.InputStream,java.io.OutputStream) -> copy
    long copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel) -> copy
    byte[] toByteArrayInternal(java.io.InputStream,java.util.Deque,int) -> toByteArrayInternal
    byte[] combineBuffers(java.util.Deque,int) -> combineBuffers
    byte[] toByteArray(java.io.InputStream) -> toByteArray
    byte[] toByteArray(java.io.InputStream,long) -> toByteArray
    long exhaust(java.io.InputStream) -> exhaust
    com.google.common.io.ByteArrayDataInput newDataInput(byte[]) -> newDataInput
    com.google.common.io.ByteArrayDataInput newDataInput(byte[],int) -> newDataInput
    com.google.common.io.ByteArrayDataInput newDataInput(java.io.ByteArrayInputStream) -> newDataInput
    com.google.common.io.ByteArrayDataOutput newDataOutput() -> newDataOutput
    com.google.common.io.ByteArrayDataOutput newDataOutput(int) -> newDataOutput
    com.google.common.io.ByteArrayDataOutput newDataOutput(java.io.ByteArrayOutputStream) -> newDataOutput
    java.io.OutputStream nullOutputStream() -> nullOutputStream
    java.io.InputStream limit(java.io.InputStream,long) -> limit
    void readFully(java.io.InputStream,byte[]) -> readFully
    void readFully(java.io.InputStream,byte[],int,int) -> readFully
    void skipFully(java.io.InputStream,long) -> skipFully
    long skipUpTo(java.io.InputStream,long) -> skipUpTo
    long skipSafely(java.io.InputStream,long) -> skipSafely
    java.lang.Object readBytes(java.io.InputStream,com.google.common.io.ByteProcessor) -> readBytes
    int read(java.io.InputStream,byte[],int,int) -> read
    void <clinit>() -> <clinit>
com.google.common.io.ByteStreams$1 -> com.google.common.io.ByteStreams$1:
    void <init>() -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    java.lang.String toString() -> toString
com.google.common.io.ByteStreams$ByteArrayDataInputStream -> com.google.common.io.ByteStreams$ByteArrayDataInputStream:
    java.io.DataInput input -> input
    void <init>(java.io.ByteArrayInputStream) -> <init>
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
com.google.common.io.ByteStreams$ByteArrayDataOutputStream -> com.google.common.io.ByteStreams$ByteArrayDataOutputStream:
    java.io.DataOutput output -> output
    java.io.ByteArrayOutputStream byteArrayOutputSteam -> byteArrayOutputSteam
    void <init>(java.io.ByteArrayOutputStream) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeBytes(java.lang.String) -> writeBytes
    void writeChar(int) -> writeChar
    void writeChars(java.lang.String) -> writeChars
    void writeDouble(double) -> writeDouble
    void writeFloat(float) -> writeFloat
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeShort(int) -> writeShort
    void writeUTF(java.lang.String) -> writeUTF
    byte[] toByteArray() -> toByteArray
com.google.common.io.ByteStreams$LimitedInputStream -> com.google.common.io.ByteStreams$LimitedInputStream:
    long left -> left
    long mark -> mark
    void <init>(java.io.InputStream,long) -> <init>
    int available() -> available
    void mark(int) -> mark
    int read() -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    long skip(long) -> skip
com.google.common.io.CharSequenceReader -> com.google.common.io.CharSequenceReader:
    java.lang.CharSequence seq -> seq
    int pos -> pos
    int mark -> mark
    void <init>(java.lang.CharSequence) -> <init>
    void checkOpen() -> checkOpen
    boolean hasRemaining() -> hasRemaining
    int remaining() -> remaining
    int read(java.nio.CharBuffer) -> read
    int read() -> read
    int read(char[],int,int) -> read
    long skip(long) -> skip
    boolean ready() -> ready
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    void close() -> close
com.google.common.io.CharSink -> com.google.common.io.CharSink:
    void <init>() -> <init>
    java.io.Writer openStream() -> openStream
    java.io.Writer openBufferedStream() -> openBufferedStream
    void write(java.lang.CharSequence) -> write
    void writeLines(java.lang.Iterable) -> writeLines
    void writeLines(java.lang.Iterable,java.lang.String) -> writeLines
    void writeLines(java.util.stream.Stream) -> writeLines
    void writeLines(java.util.stream.Stream,java.lang.String) -> writeLines
    void writeLines(java.util.Iterator,java.lang.String) -> writeLines
    long writeFrom(java.lang.Readable) -> writeFrom
com.google.common.io.CharSource -> com.google.common.io.CharSource:
    void <init>() -> <init>
    com.google.common.io.ByteSource asByteSource(java.nio.charset.Charset) -> asByteSource
    java.io.Reader openStream() -> openStream
    java.io.BufferedReader openBufferedStream() -> openBufferedStream
    java.util.stream.Stream lines() -> lines
    com.google.common.base.Optional lengthIfKnown() -> lengthIfKnown
    long length() -> length
    long countBySkipping(java.io.Reader) -> countBySkipping
    long copyTo(java.lang.Appendable) -> copyTo
    long copyTo(com.google.common.io.CharSink) -> copyTo
    java.lang.String read() -> read
    java.lang.String readFirstLine() -> readFirstLine
    com.google.common.collect.ImmutableList readLines() -> readLines
    java.lang.Object readLines(com.google.common.io.LineProcessor) -> readLines
    void forEachLine(java.util.function.Consumer) -> forEachLine
    boolean isEmpty() -> isEmpty
    com.google.common.io.CharSource concat(java.lang.Iterable) -> concat
    com.google.common.io.CharSource concat(java.util.Iterator) -> concat
    com.google.common.io.CharSource concat(com.google.common.io.CharSource[]) -> concat
    com.google.common.io.CharSource wrap(java.lang.CharSequence) -> wrap
    com.google.common.io.CharSource empty() -> empty
    void lambda$lines$0(java.io.BufferedReader) -> lambda$lines$0
com.google.common.io.CharSource$AsByteSource -> com.google.common.io.CharSource$AsByteSource:
    java.nio.charset.Charset charset -> charset
    com.google.common.io.CharSource this$0 -> this$0
    void <init>(com.google.common.io.CharSource,java.nio.charset.Charset) -> <init>
    com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    java.io.InputStream openStream() -> openStream
    java.lang.String toString() -> toString
com.google.common.io.CharSource$CharSequenceCharSource -> com.google.common.io.CharSource$CharSequenceCharSource:
    com.google.common.base.Splitter LINE_SPLITTER -> LINE_SPLITTER
    java.lang.CharSequence seq -> seq
    void <init>(java.lang.CharSequence) -> <init>
    java.io.Reader openStream() -> openStream
    java.lang.String read() -> read
    boolean isEmpty() -> isEmpty
    long length() -> length
    com.google.common.base.Optional lengthIfKnown() -> lengthIfKnown
    java.util.Iterator linesIterator() -> linesIterator
    java.util.stream.Stream lines() -> lines
    java.lang.String readFirstLine() -> readFirstLine
    com.google.common.collect.ImmutableList readLines() -> readLines
    java.lang.Object readLines(com.google.common.io.LineProcessor) -> readLines
    java.lang.String toString() -> toString
    com.google.common.base.Splitter access$100() -> access$100
    void <clinit>() -> <clinit>
com.google.common.io.CharSource$CharSequenceCharSource$1 -> com.google.common.io.CharSource$CharSequenceCharSource$1:
    java.util.Iterator lines -> lines
    com.google.common.io.CharSource$CharSequenceCharSource this$0 -> this$0
    void <init>(com.google.common.io.CharSource$CharSequenceCharSource) -> <init>
    java.lang.String computeNext() -> computeNext
    java.lang.Object computeNext() -> computeNext
com.google.common.io.CharSource$ConcatenatedCharSource -> com.google.common.io.CharSource$ConcatenatedCharSource:
    java.lang.Iterable sources -> sources
    void <init>(java.lang.Iterable) -> <init>
    java.io.Reader openStream() -> openStream
    boolean isEmpty() -> isEmpty
    com.google.common.base.Optional lengthIfKnown() -> lengthIfKnown
    long length() -> length
    java.lang.String toString() -> toString
com.google.common.io.CharSource$EmptyCharSource -> com.google.common.io.CharSource$EmptyCharSource:
    com.google.common.io.CharSource$EmptyCharSource INSTANCE -> INSTANCE
    void <init>() -> <init>
    java.lang.String toString() -> toString
    com.google.common.io.CharSource$EmptyCharSource access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.io.CharSource$StringCharSource -> com.google.common.io.CharSource$StringCharSource:
    void <init>(java.lang.String) -> <init>
    java.io.Reader openStream() -> openStream
    long copyTo(java.lang.Appendable) -> copyTo
    long copyTo(com.google.common.io.CharSink) -> copyTo
com.google.common.io.CharStreams -> com.google.common.io.CharStreams:
    int DEFAULT_BUF_SIZE -> DEFAULT_BUF_SIZE
    java.nio.CharBuffer createBuffer() -> createBuffer
    void <init>() -> <init>
    long copy(java.lang.Readable,java.lang.Appendable) -> copy
    long copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder) -> copyReaderToBuilder
    long copyReaderToWriter(java.io.Reader,java.io.Writer) -> copyReaderToWriter
    java.lang.String toString(java.lang.Readable) -> toString
    java.lang.StringBuilder toStringBuilder(java.lang.Readable) -> toStringBuilder
    java.util.List readLines(java.lang.Readable) -> readLines
    java.lang.Object readLines(java.lang.Readable,com.google.common.io.LineProcessor) -> readLines
    long exhaust(java.lang.Readable) -> exhaust
    void skipFully(java.io.Reader,long) -> skipFully
    java.io.Writer nullWriter() -> nullWriter
    java.io.Writer asWriter(java.lang.Appendable) -> asWriter
com.google.common.io.CharStreams$NullWriter -> com.google.common.io.CharStreams$NullWriter:
    com.google.common.io.CharStreams$NullWriter INSTANCE -> INSTANCE
    void <init>() -> <init>
    void write(int) -> write
    void write(char[]) -> write
    void write(char[],int,int) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
    java.io.Writer append(java.lang.CharSequence) -> append
    java.io.Writer append(java.lang.CharSequence,int,int) -> append
    java.io.Writer append(char) -> append
    void flush() -> flush
    void close() -> close
    java.lang.String toString() -> toString
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    com.google.common.io.CharStreams$NullWriter access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.io.Closeables -> com.google.common.io.Closeables:
    java.util.logging.Logger logger -> logger
    void <init>() -> <init>
    void close(java.io.Closeable,boolean) -> close
    void closeQuietly(java.io.InputStream) -> closeQuietly
    void closeQuietly(java.io.Reader) -> closeQuietly
    void <clinit>() -> <clinit>
com.google.common.io.Closer -> com.google.common.io.Closer:
    com.google.common.io.Closer$Suppressor SUPPRESSOR -> SUPPRESSOR
    com.google.common.io.Closer$Suppressor suppressor -> suppressor
    java.util.Deque stack -> stack
    java.lang.Throwable thrown -> thrown
    com.google.common.io.Closer create() -> create
    void <init>(com.google.common.io.Closer$Suppressor) -> <init>
    java.io.Closeable register(java.io.Closeable) -> register
    java.lang.RuntimeException rethrow(java.lang.Throwable) -> rethrow
    java.lang.RuntimeException rethrow(java.lang.Throwable,java.lang.Class) -> rethrow
    java.lang.RuntimeException rethrow(java.lang.Throwable,java.lang.Class,java.lang.Class) -> rethrow
    void close() -> close
    void <clinit>() -> <clinit>
com.google.common.io.Closer$LoggingSuppressor -> com.google.common.io.Closer$LoggingSuppressor:
    com.google.common.io.Closer$LoggingSuppressor INSTANCE -> INSTANCE
    void <init>() -> <init>
    void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable) -> suppress
    void <clinit>() -> <clinit>
com.google.common.io.Closer$SuppressingSuppressor -> com.google.common.io.Closer$SuppressingSuppressor:
    com.google.common.io.Closer$SuppressingSuppressor INSTANCE -> INSTANCE
    java.lang.reflect.Method addSuppressed -> addSuppressed
    void <init>() -> <init>
    boolean isAvailable() -> isAvailable
    java.lang.reflect.Method getAddSuppressed() -> getAddSuppressed
    void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable) -> suppress
    void <clinit>() -> <clinit>
com.google.common.io.Closer$Suppressor -> com.google.common.io.Closer$Suppressor:
    void suppress(java.io.Closeable,java.lang.Throwable,java.lang.Throwable) -> suppress
com.google.common.io.CountingInputStream -> com.google.common.io.CountingInputStream:
    long count -> count
    long mark -> mark
    void <init>(java.io.InputStream) -> <init>
    long getCount() -> getCount
    int read() -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    void mark(int) -> mark
    void reset() -> reset
com.google.common.io.CountingOutputStream -> com.google.common.io.CountingOutputStream:
    long count -> count
    void <init>(java.io.OutputStream) -> <init>
    long getCount() -> getCount
    void write(byte[],int,int) -> write
    void write(int) -> write
    void close() -> close
com.google.common.io.FileBackedOutputStream -> com.google.common.io.FileBackedOutputStream:
    int fileThreshold -> fileThreshold
    boolean resetOnFinalize -> resetOnFinalize
    com.google.common.io.ByteSource source -> source
    java.io.OutputStream out -> out
    com.google.common.io.FileBackedOutputStream$MemoryOutput memory -> memory
    java.io.File file -> file
    java.io.File getFile() -> getFile
    void <init>(int) -> <init>
    void <init>(int,boolean) -> <init>
    com.google.common.io.ByteSource asByteSource() -> asByteSource
    java.io.InputStream openInputStream() -> openInputStream
    void reset() -> reset
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void close() -> close
    void flush() -> flush
    void update(int) -> update
    java.io.InputStream access$100(com.google.common.io.FileBackedOutputStream) -> access$100
com.google.common.io.FileBackedOutputStream$1 -> com.google.common.io.FileBackedOutputStream$1:
    com.google.common.io.FileBackedOutputStream this$0 -> this$0
    void <init>(com.google.common.io.FileBackedOutputStream) -> <init>
    java.io.InputStream openStream() -> openStream
    void finalize() -> finalize
com.google.common.io.FileBackedOutputStream$2 -> com.google.common.io.FileBackedOutputStream$2:
    com.google.common.io.FileBackedOutputStream this$0 -> this$0
    void <init>(com.google.common.io.FileBackedOutputStream) -> <init>
    java.io.InputStream openStream() -> openStream
com.google.common.io.FileBackedOutputStream$MemoryOutput -> com.google.common.io.FileBackedOutputStream$MemoryOutput:
    void <init>() -> <init>
    byte[] getBuffer() -> getBuffer
    int getCount() -> getCount
    void <init>(com.google.common.io.FileBackedOutputStream$1) -> <init>
com.google.common.io.FileWriteMode -> com.google.common.io.FileWriteMode:
    com.google.common.io.FileWriteMode APPEND -> APPEND
    com.google.common.io.FileWriteMode[] $VALUES -> $VALUES
    com.google.common.io.FileWriteMode[] values() -> values
    com.google.common.io.FileWriteMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.io.Files -> com.google.common.io.Files:
    int TEMP_DIR_ATTEMPTS -> TEMP_DIR_ATTEMPTS
    com.google.common.collect.TreeTraverser FILE_TREE_TRAVERSER -> FILE_TREE_TRAVERSER
    com.google.common.graph.SuccessorsFunction FILE_TREE -> FILE_TREE
    void <init>() -> <init>
    java.io.BufferedReader newReader(java.io.File,java.nio.charset.Charset) -> newReader
    java.io.BufferedWriter newWriter(java.io.File,java.nio.charset.Charset) -> newWriter
    com.google.common.io.ByteSource asByteSource(java.io.File) -> asByteSource
    com.google.common.io.ByteSink asByteSink(java.io.File,com.google.common.io.FileWriteMode[]) -> asByteSink
    com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset) -> asCharSource
    com.google.common.io.CharSink asCharSink(java.io.File,java.nio.charset.Charset,com.google.common.io.FileWriteMode[]) -> asCharSink
    byte[] toByteArray(java.io.File) -> toByteArray
    java.lang.String toString(java.io.File,java.nio.charset.Charset) -> toString
    void write(byte[],java.io.File) -> write
    void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset) -> write
    void copy(java.io.File,java.io.OutputStream) -> copy
    void copy(java.io.File,java.io.File) -> copy
    void copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable) -> copy
    void append(java.lang.CharSequence,java.io.File,java.nio.charset.Charset) -> append
    boolean equal(java.io.File,java.io.File) -> equal
    java.io.File createTempDir() -> createTempDir
    void touch(java.io.File) -> touch
    void createParentDirs(java.io.File) -> createParentDirs
    void move(java.io.File,java.io.File) -> move
    java.lang.String readFirstLine(java.io.File,java.nio.charset.Charset) -> readFirstLine
    java.util.List readLines(java.io.File,java.nio.charset.Charset) -> readLines
    java.lang.Object readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor) -> readLines
    java.lang.Object readBytes(java.io.File,com.google.common.io.ByteProcessor) -> readBytes
    com.google.common.hash.HashCode hash(java.io.File,com.google.common.hash.HashFunction) -> hash
    java.nio.MappedByteBuffer map(java.io.File) -> map
    java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode) -> map
    java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode,long) -> map
    java.nio.MappedByteBuffer mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long) -> mapInternal
    java.lang.String simplifyPath(java.lang.String) -> simplifyPath
    java.lang.String getFileExtension(java.lang.String) -> getFileExtension
    java.lang.String getNameWithoutExtension(java.lang.String) -> getNameWithoutExtension
    com.google.common.collect.TreeTraverser fileTreeTraverser() -> fileTreeTraverser
    com.google.common.graph.Traverser fileTraverser() -> fileTraverser
    java.lang.Iterable fileTreeChildren(java.io.File) -> fileTreeChildren
    com.google.common.base.Predicate isDirectory() -> isDirectory
    com.google.common.base.Predicate isFile() -> isFile
    java.lang.Iterable access$200(java.io.File) -> access$200
    void <clinit>() -> <clinit>
com.google.common.io.Files$1 -> com.google.common.io.Files$1:
    java.util.List result -> result
    void <init>() -> <init>
    boolean processLine(java.lang.String) -> processLine
    java.util.List getResult() -> getResult
    java.lang.Object getResult() -> getResult
com.google.common.io.Files$2 -> com.google.common.io.Files$2:
    void <init>() -> <init>
    java.lang.Iterable children(java.io.File) -> children
    java.lang.String toString() -> toString
    java.lang.Iterable children(java.lang.Object) -> children
com.google.common.io.Files$3 -> com.google.common.io.Files$3:
    void <init>() -> <init>
    java.lang.Iterable successors(java.io.File) -> successors
    java.lang.Iterable successors(java.lang.Object) -> successors
com.google.common.io.Files$FileByteSink -> com.google.common.io.Files$FileByteSink:
    java.io.File file -> file
    com.google.common.collect.ImmutableSet modes -> modes
    void <init>(java.io.File,com.google.common.io.FileWriteMode[]) -> <init>
    java.io.FileOutputStream openStream() -> openStream
    java.lang.String toString() -> toString
    java.io.OutputStream openStream() -> openStream
    void <init>(java.io.File,com.google.common.io.FileWriteMode[],com.google.common.io.Files$1) -> <init>
com.google.common.io.Files$FileByteSource -> com.google.common.io.Files$FileByteSource:
    java.io.File file -> file
    void <init>(java.io.File) -> <init>
    java.io.FileInputStream openStream() -> openStream
    com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    long size() -> size
    byte[] read() -> read
    java.lang.String toString() -> toString
    java.io.InputStream openStream() -> openStream
    void <init>(java.io.File,com.google.common.io.Files$1) -> <init>
com.google.common.io.Files$FilePredicate -> com.google.common.io.Files$FilePredicate:
    com.google.common.io.Files$FilePredicate IS_DIRECTORY -> IS_DIRECTORY
    com.google.common.io.Files$FilePredicate IS_FILE -> IS_FILE
    com.google.common.io.Files$FilePredicate[] $VALUES -> $VALUES
    com.google.common.io.Files$FilePredicate[] values() -> values
    com.google.common.io.Files$FilePredicate valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,com.google.common.io.Files$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.io.Files$FilePredicate$1 -> com.google.common.io.Files$FilePredicate$1:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.io.File) -> apply
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.io.Files$FilePredicate$2 -> com.google.common.io.Files$FilePredicate$2:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(java.io.File) -> apply
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.io.Flushables -> com.google.common.io.Flushables:
    java.util.logging.Logger logger -> logger
    void <init>() -> <init>
    void flush(java.io.Flushable,boolean) -> flush
    void flushQuietly(java.io.Flushable) -> flushQuietly
    void <clinit>() -> <clinit>
com.google.common.io.InsecureRecursiveDeleteException -> com.google.common.io.InsecureRecursiveDeleteException:
    void <init>(java.lang.String) -> <init>
com.google.common.io.LineBuffer -> com.google.common.io.LineBuffer:
    java.lang.StringBuilder line -> line
    boolean sawReturn -> sawReturn
    void <init>() -> <init>
    void add(char[],int,int) -> add
    boolean finishLine(boolean) -> finishLine
    void finish() -> finish
    void handleLine(java.lang.String,java.lang.String) -> handleLine
com.google.common.io.LineProcessor -> com.google.common.io.LineProcessor:
    boolean processLine(java.lang.String) -> processLine
    java.lang.Object getResult() -> getResult
com.google.common.io.LineReader -> com.google.common.io.LineReader:
    java.lang.Readable readable -> readable
    java.io.Reader reader -> reader
    java.nio.CharBuffer cbuf -> cbuf
    char[] buf -> buf
    java.util.Queue lines -> lines
    com.google.common.io.LineBuffer lineBuf -> lineBuf
    void <init>(java.lang.Readable) -> <init>
    java.lang.String readLine() -> readLine
    java.util.Queue access$000(com.google.common.io.LineReader) -> access$000
com.google.common.io.LineReader$1 -> com.google.common.io.LineReader$1:
    com.google.common.io.LineReader this$0 -> this$0
    void <init>(com.google.common.io.LineReader) -> <init>
    void handleLine(java.lang.String,java.lang.String) -> handleLine
com.google.common.io.LittleEndianDataInputStream -> com.google.common.io.LittleEndianDataInputStream:
    void <init>(java.io.InputStream) -> <init>
    java.lang.String readLine() -> readLine
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    int readUnsignedByte() -> readUnsignedByte
    int readUnsignedShort() -> readUnsignedShort
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readUTF() -> readUTF
    short readShort() -> readShort
    char readChar() -> readChar
    byte readByte() -> readByte
    boolean readBoolean() -> readBoolean
    byte readAndCheckByte() -> readAndCheckByte
com.google.common.io.LittleEndianDataOutputStream -> com.google.common.io.LittleEndianDataOutputStream:
    void <init>(java.io.OutputStream) -> <init>
    void write(byte[],int,int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeBytes(java.lang.String) -> writeBytes
    void writeChar(int) -> writeChar
    void writeChars(java.lang.String) -> writeChars
    void writeDouble(double) -> writeDouble
    void writeFloat(float) -> writeFloat
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeShort(int) -> writeShort
    void writeUTF(java.lang.String) -> writeUTF
    void close() -> close
com.google.common.io.MoreFiles -> com.google.common.io.MoreFiles:
    com.google.common.graph.SuccessorsFunction FILE_TREE -> FILE_TREE
    void <init>() -> <init>
    com.google.common.io.ByteSource asByteSource(java.nio.file.Path,java.nio.file.OpenOption[]) -> asByteSource
    com.google.common.io.ByteSink asByteSink(java.nio.file.Path,java.nio.file.OpenOption[]) -> asByteSink
    com.google.common.io.CharSource asCharSource(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption[]) -> asCharSource
    com.google.common.io.CharSink asCharSink(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption[]) -> asCharSink
    com.google.common.collect.ImmutableList listFiles(java.nio.file.Path) -> listFiles
    com.google.common.graph.Traverser fileTraverser() -> fileTraverser
    java.lang.Iterable fileTreeChildren(java.nio.file.Path) -> fileTreeChildren
    com.google.common.base.Predicate isDirectory(java.nio.file.LinkOption[]) -> isDirectory
    boolean isDirectory(java.nio.file.SecureDirectoryStream,java.nio.file.Path,java.nio.file.LinkOption[]) -> isDirectory
    com.google.common.base.Predicate isRegularFile(java.nio.file.LinkOption[]) -> isRegularFile
    boolean equal(java.nio.file.Path,java.nio.file.Path) -> equal
    void touch(java.nio.file.Path) -> touch
    void createParentDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[]) -> createParentDirectories
    java.lang.String getFileExtension(java.nio.file.Path) -> getFileExtension
    java.lang.String getNameWithoutExtension(java.nio.file.Path) -> getNameWithoutExtension
    void deleteRecursively(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[]) -> deleteRecursively
    void deleteDirectoryContents(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[]) -> deleteDirectoryContents
    java.util.Collection deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path) -> deleteRecursivelySecure
    java.util.Collection deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream) -> deleteDirectoryContentsSecure
    java.util.Collection deleteRecursivelyInsecure(java.nio.file.Path) -> deleteRecursivelyInsecure
    java.util.Collection deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream) -> deleteDirectoryContentsInsecure
    java.nio.file.Path getParentPath(java.nio.file.Path) -> getParentPath
    void checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[]) -> checkAllowsInsecure
    java.util.Collection addException(java.util.Collection,java.io.IOException) -> addException
    java.util.Collection concat(java.util.Collection,java.util.Collection) -> concat
    void throwDeleteFailed(java.nio.file.Path,java.util.Collection) -> throwDeleteFailed
    java.lang.Iterable access$300(java.nio.file.Path) -> access$300
    void <clinit>() -> <clinit>
com.google.common.io.MoreFiles$1 -> com.google.common.io.MoreFiles$1:
    void <init>() -> <init>
    java.lang.Iterable successors(java.nio.file.Path) -> successors
    java.lang.Iterable successors(java.lang.Object) -> successors
com.google.common.io.MoreFiles$2 -> com.google.common.io.MoreFiles$2:
    java.nio.file.LinkOption[] val$optionsCopy -> val$optionsCopy
    void <init>(java.nio.file.LinkOption[]) -> <init>
    boolean apply(java.nio.file.Path) -> apply
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.io.MoreFiles$3 -> com.google.common.io.MoreFiles$3:
    java.nio.file.LinkOption[] val$optionsCopy -> val$optionsCopy
    void <init>(java.nio.file.LinkOption[]) -> <init>
    boolean apply(java.nio.file.Path) -> apply
    java.lang.String toString() -> toString
    boolean apply(java.lang.Object) -> apply
com.google.common.io.MoreFiles$PathByteSink -> com.google.common.io.MoreFiles$PathByteSink:
    java.nio.file.Path path -> path
    java.nio.file.OpenOption[] options -> options
    void <init>(java.nio.file.Path,java.nio.file.OpenOption[]) -> <init>
    java.io.OutputStream openStream() -> openStream
    java.lang.String toString() -> toString
    void <init>(java.nio.file.Path,java.nio.file.OpenOption[],com.google.common.io.MoreFiles$1) -> <init>
com.google.common.io.MoreFiles$PathByteSource -> com.google.common.io.MoreFiles$PathByteSource:
    java.nio.file.LinkOption[] FOLLOW_LINKS -> FOLLOW_LINKS
    java.nio.file.Path path -> path
    java.nio.file.OpenOption[] options -> options
    boolean followLinks -> followLinks
    void <init>(java.nio.file.Path,java.nio.file.OpenOption[]) -> <init>
    boolean followLinks(java.nio.file.OpenOption[]) -> followLinks
    java.io.InputStream openStream() -> openStream
    java.nio.file.attribute.BasicFileAttributes readAttributes() -> readAttributes
    com.google.common.base.Optional sizeIfKnown() -> sizeIfKnown
    long size() -> size
    byte[] read() -> read
    com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    java.lang.String toString() -> toString
    void <init>(java.nio.file.Path,java.nio.file.OpenOption[],com.google.common.io.MoreFiles$1) -> <init>
    java.nio.file.Path access$100(com.google.common.io.MoreFiles$PathByteSource) -> access$100
    void <clinit>() -> <clinit>
com.google.common.io.MoreFiles$PathByteSource$1 -> com.google.common.io.MoreFiles$PathByteSource$1:
    com.google.common.io.MoreFiles$PathByteSource this$0 -> this$0
    void <init>(com.google.common.io.MoreFiles$PathByteSource,java.nio.charset.Charset) -> <init>
    java.util.stream.Stream lines() -> lines
com.google.common.io.MultiInputStream -> com.google.common.io.MultiInputStream:
    java.util.Iterator it -> it
    java.io.InputStream in -> in
    void <init>(java.util.Iterator) -> <init>
    void close() -> close
    void advance() -> advance
    int available() -> available
    boolean markSupported() -> markSupported
    int read() -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
com.google.common.io.MultiReader -> com.google.common.io.MultiReader:
    java.util.Iterator it -> it
    java.io.Reader current -> current
    void <init>(java.util.Iterator) -> <init>
    void advance() -> advance
    int read(char[],int,int) -> read
    long skip(long) -> skip
    boolean ready() -> ready
    void close() -> close
com.google.common.io.PatternFilenameFilter -> com.google.common.io.PatternFilenameFilter:
    java.util.regex.Pattern pattern -> pattern
    void <init>(java.lang.String) -> <init>
    void <init>(java.util.regex.Pattern) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
com.google.common.io.ReaderInputStream -> com.google.common.io.ReaderInputStream:
    java.io.Reader reader -> reader
    java.nio.charset.CharsetEncoder encoder -> encoder
    byte[] singleByte -> singleByte
    java.nio.CharBuffer charBuffer -> charBuffer
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    boolean endOfInput -> endOfInput
    boolean draining -> draining
    boolean doneFlushing -> doneFlushing
    void <init>(java.io.Reader,java.nio.charset.Charset,int) -> <init>
    void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int) -> <init>
    void close() -> close
    int read() -> read
    int read(byte[],int,int) -> read
    java.nio.CharBuffer grow(java.nio.CharBuffer) -> grow
    void readMoreChars() -> readMoreChars
    int availableCapacity(java.nio.Buffer) -> availableCapacity
    void startDraining(boolean) -> startDraining
    int drain(byte[],int,int) -> drain
com.google.common.io.RecursiveDeleteOption -> com.google.common.io.RecursiveDeleteOption:
    com.google.common.io.RecursiveDeleteOption ALLOW_INSECURE -> ALLOW_INSECURE
    com.google.common.io.RecursiveDeleteOption[] $VALUES -> $VALUES
    com.google.common.io.RecursiveDeleteOption[] values() -> values
    com.google.common.io.RecursiveDeleteOption valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.io.Resources -> com.google.common.io.Resources:
    void <init>() -> <init>
    com.google.common.io.ByteSource asByteSource(java.net.URL) -> asByteSource
    com.google.common.io.CharSource asCharSource(java.net.URL,java.nio.charset.Charset) -> asCharSource
    byte[] toByteArray(java.net.URL) -> toByteArray
    java.lang.String toString(java.net.URL,java.nio.charset.Charset) -> toString
    java.lang.Object readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor) -> readLines
    java.util.List readLines(java.net.URL,java.nio.charset.Charset) -> readLines
    void copy(java.net.URL,java.io.OutputStream) -> copy
    java.net.URL getResource(java.lang.String) -> getResource
    java.net.URL getResource(java.lang.Class,java.lang.String) -> getResource
com.google.common.io.Resources$1 -> com.google.common.io.Resources$1:
    java.util.List result -> result
    void <init>() -> <init>
    boolean processLine(java.lang.String) -> processLine
    java.util.List getResult() -> getResult
    java.lang.Object getResult() -> getResult
com.google.common.io.Resources$UrlByteSource -> com.google.common.io.Resources$UrlByteSource:
    java.net.URL url -> url
    void <init>(java.net.URL) -> <init>
    java.io.InputStream openStream() -> openStream
    java.lang.String toString() -> toString
    void <init>(java.net.URL,com.google.common.io.Resources$1) -> <init>
com.google.common.io.package-info -> com.google.common.io.package-info:
com.google.common.math.BigIntegerMath -> com.google.common.math.BigIntegerMath:
    int SQRT2_PRECOMPUTE_THRESHOLD -> SQRT2_PRECOMPUTE_THRESHOLD
    java.math.BigInteger SQRT2_PRECOMPUTED_BITS -> SQRT2_PRECOMPUTED_BITS
    double LN_10 -> LN_10
    double LN_2 -> LN_2
    java.math.BigInteger ceilingPowerOfTwo(java.math.BigInteger) -> ceilingPowerOfTwo
    java.math.BigInteger floorPowerOfTwo(java.math.BigInteger) -> floorPowerOfTwo
    boolean isPowerOfTwo(java.math.BigInteger) -> isPowerOfTwo
    int log2(java.math.BigInteger,java.math.RoundingMode) -> log2
    int log10(java.math.BigInteger,java.math.RoundingMode) -> log10
    java.math.BigInteger sqrt(java.math.BigInteger,java.math.RoundingMode) -> sqrt
    java.math.BigInteger sqrtFloor(java.math.BigInteger) -> sqrtFloor
    java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger) -> sqrtApproxWithDoubles
    java.math.BigInteger divide(java.math.BigInteger,java.math.BigInteger,java.math.RoundingMode) -> divide
    java.math.BigInteger factorial(int) -> factorial
    java.math.BigInteger listProduct(java.util.List) -> listProduct
    java.math.BigInteger listProduct(java.util.List,int,int) -> listProduct
    java.math.BigInteger binomial(int,int) -> binomial
    boolean fitsInLong(java.math.BigInteger) -> fitsInLong
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.math.BigIntegerMath$1 -> com.google.common.math.BigIntegerMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
    void <clinit>() -> <clinit>
com.google.common.math.DoubleMath -> com.google.common.math.DoubleMath:
    double MIN_INT_AS_DOUBLE -> MIN_INT_AS_DOUBLE
    double MAX_INT_AS_DOUBLE -> MAX_INT_AS_DOUBLE
    double MIN_LONG_AS_DOUBLE -> MIN_LONG_AS_DOUBLE
    double MAX_LONG_AS_DOUBLE_PLUS_ONE -> MAX_LONG_AS_DOUBLE_PLUS_ONE
    double LN_2 -> LN_2
    int MAX_FACTORIAL -> MAX_FACTORIAL
    double[] everySixteenthFactorial -> everySixteenthFactorial
    double roundIntermediate(double,java.math.RoundingMode) -> roundIntermediate
    int roundToInt(double,java.math.RoundingMode) -> roundToInt
    long roundToLong(double,java.math.RoundingMode) -> roundToLong
    java.math.BigInteger roundToBigInteger(double,java.math.RoundingMode) -> roundToBigInteger
    boolean isPowerOfTwo(double) -> isPowerOfTwo
    double log2(double) -> log2
    int log2(double,java.math.RoundingMode) -> log2
    boolean isMathematicalInteger(double) -> isMathematicalInteger
    double factorial(int) -> factorial
    boolean fuzzyEquals(double,double,double) -> fuzzyEquals
    int fuzzyCompare(double,double,double) -> fuzzyCompare
    double mean(double[]) -> mean
    double mean(int[]) -> mean
    double mean(long[]) -> mean
    double mean(java.lang.Iterable) -> mean
    double mean(java.util.Iterator) -> mean
    double checkFinite(double) -> checkFinite
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.math.DoubleMath$1 -> com.google.common.math.DoubleMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
    void <clinit>() -> <clinit>
com.google.common.math.DoubleUtils -> com.google.common.math.DoubleUtils:
    long SIGNIFICAND_MASK -> SIGNIFICAND_MASK
    long EXPONENT_MASK -> EXPONENT_MASK
    long SIGN_MASK -> SIGN_MASK
    int SIGNIFICAND_BITS -> SIGNIFICAND_BITS
    int EXPONENT_BIAS -> EXPONENT_BIAS
    long IMPLICIT_BIT -> IMPLICIT_BIT
    long ONE_BITS -> ONE_BITS
    void <init>() -> <init>
    double nextDown(double) -> nextDown
    long getSignificand(double) -> getSignificand
    boolean isFinite(double) -> isFinite
    boolean isNormal(double) -> isNormal
    double scaleNormalize(double) -> scaleNormalize
    double bigToDouble(java.math.BigInteger) -> bigToDouble
    double ensureNonNegative(double) -> ensureNonNegative
com.google.common.math.IntMath -> com.google.common.math.IntMath:
    int MAX_SIGNED_POWER_OF_TWO -> MAX_SIGNED_POWER_OF_TWO
    int MAX_POWER_OF_SQRT2_UNSIGNED -> MAX_POWER_OF_SQRT2_UNSIGNED
    byte[] maxLog10ForLeadingZeros -> maxLog10ForLeadingZeros
    int[] powersOf10 -> powersOf10
    int[] halfPowersOf10 -> halfPowersOf10
    int FLOOR_SQRT_MAX_INT -> FLOOR_SQRT_MAX_INT
    int[] factorials -> factorials
    int[] biggestBinomials -> biggestBinomials
    int ceilingPowerOfTwo(int) -> ceilingPowerOfTwo
    int floorPowerOfTwo(int) -> floorPowerOfTwo
    boolean isPowerOfTwo(int) -> isPowerOfTwo
    int lessThanBranchFree(int,int) -> lessThanBranchFree
    int log2(int,java.math.RoundingMode) -> log2
    int log10(int,java.math.RoundingMode) -> log10
    int log10Floor(int) -> log10Floor
    int pow(int,int) -> pow
    int sqrt(int,java.math.RoundingMode) -> sqrt
    int sqrtFloor(int) -> sqrtFloor
    int divide(int,int,java.math.RoundingMode) -> divide
    int mod(int,int) -> mod
    int gcd(int,int) -> gcd
    int checkedAdd(int,int) -> checkedAdd
    int checkedSubtract(int,int) -> checkedSubtract
    int checkedMultiply(int,int) -> checkedMultiply
    int checkedPow(int,int) -> checkedPow
    int saturatedAdd(int,int) -> saturatedAdd
    int saturatedSubtract(int,int) -> saturatedSubtract
    int saturatedMultiply(int,int) -> saturatedMultiply
    int saturatedPow(int,int) -> saturatedPow
    int factorial(int) -> factorial
    int binomial(int,int) -> binomial
    int mean(int,int) -> mean
    boolean isPrime(int) -> isPrime
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.math.IntMath$1 -> com.google.common.math.IntMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
    void <clinit>() -> <clinit>
com.google.common.math.LinearTransformation -> com.google.common.math.LinearTransformation:
    void <init>() -> <init>
    com.google.common.math.LinearTransformation$LinearTransformationBuilder mapping(double,double) -> mapping
    com.google.common.math.LinearTransformation vertical(double) -> vertical
    com.google.common.math.LinearTransformation horizontal(double) -> horizontal
    com.google.common.math.LinearTransformation forNaN() -> forNaN
    boolean isVertical() -> isVertical
    boolean isHorizontal() -> isHorizontal
    double slope() -> slope
    double transform(double) -> transform
    com.google.common.math.LinearTransformation inverse() -> inverse
com.google.common.math.LinearTransformation$1 -> com.google.common.math.LinearTransformation$1:
com.google.common.math.LinearTransformation$LinearTransformationBuilder -> com.google.common.math.LinearTransformation$LinearTransformationBuilder:
    double x1 -> x1
    double y1 -> y1
    void <init>(double,double) -> <init>
    com.google.common.math.LinearTransformation and(double,double) -> and
    com.google.common.math.LinearTransformation withSlope(double) -> withSlope
    void <init>(double,double,com.google.common.math.LinearTransformation$1) -> <init>
com.google.common.math.LinearTransformation$NaNLinearTransformation -> com.google.common.math.LinearTransformation$NaNLinearTransformation:
    com.google.common.math.LinearTransformation$NaNLinearTransformation INSTANCE -> INSTANCE
    void <init>() -> <init>
    boolean isVertical() -> isVertical
    boolean isHorizontal() -> isHorizontal
    double slope() -> slope
    double transform(double) -> transform
    com.google.common.math.LinearTransformation inverse() -> inverse
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.math.LinearTransformation$RegularLinearTransformation -> com.google.common.math.LinearTransformation$RegularLinearTransformation:
    double slope -> slope
    double yIntercept -> yIntercept
    com.google.common.math.LinearTransformation inverse -> inverse
    void <init>(double,double) -> <init>
    void <init>(double,double,com.google.common.math.LinearTransformation) -> <init>
    boolean isVertical() -> isVertical
    boolean isHorizontal() -> isHorizontal
    double slope() -> slope
    double transform(double) -> transform
    com.google.common.math.LinearTransformation inverse() -> inverse
    java.lang.String toString() -> toString
    com.google.common.math.LinearTransformation createInverse() -> createInverse
com.google.common.math.LinearTransformation$VerticalLinearTransformation -> com.google.common.math.LinearTransformation$VerticalLinearTransformation:
    double x -> x
    com.google.common.math.LinearTransformation inverse -> inverse
    void <init>(double) -> <init>
    void <init>(double,com.google.common.math.LinearTransformation) -> <init>
    boolean isVertical() -> isVertical
    boolean isHorizontal() -> isHorizontal
    double slope() -> slope
    double transform(double) -> transform
    com.google.common.math.LinearTransformation inverse() -> inverse
    java.lang.String toString() -> toString
    com.google.common.math.LinearTransformation createInverse() -> createInverse
com.google.common.math.LongMath -> com.google.common.math.LongMath:
    long MAX_SIGNED_POWER_OF_TWO -> MAX_SIGNED_POWER_OF_TWO
    long MAX_POWER_OF_SQRT2_UNSIGNED -> MAX_POWER_OF_SQRT2_UNSIGNED
    byte[] maxLog10ForLeadingZeros -> maxLog10ForLeadingZeros
    long[] powersOf10 -> powersOf10
    long[] halfPowersOf10 -> halfPowersOf10
    long FLOOR_SQRT_MAX_LONG -> FLOOR_SQRT_MAX_LONG
    long[] factorials -> factorials
    int[] biggestBinomials -> biggestBinomials
    int[] biggestSimpleBinomials -> biggestSimpleBinomials
    int SIEVE_30 -> SIEVE_30
    long[][] millerRabinBaseSets -> millerRabinBaseSets
    long ceilingPowerOfTwo(long) -> ceilingPowerOfTwo
    long floorPowerOfTwo(long) -> floorPowerOfTwo
    boolean isPowerOfTwo(long) -> isPowerOfTwo
    int lessThanBranchFree(long,long) -> lessThanBranchFree
    int log2(long,java.math.RoundingMode) -> log2
    int log10(long,java.math.RoundingMode) -> log10
    int log10Floor(long) -> log10Floor
    long pow(long,int) -> pow
    long sqrt(long,java.math.RoundingMode) -> sqrt
    long divide(long,long,java.math.RoundingMode) -> divide
    int mod(long,int) -> mod
    long mod(long,long) -> mod
    long gcd(long,long) -> gcd
    long checkedAdd(long,long) -> checkedAdd
    long checkedSubtract(long,long) -> checkedSubtract
    long checkedMultiply(long,long) -> checkedMultiply
    long checkedPow(long,int) -> checkedPow
    long saturatedAdd(long,long) -> saturatedAdd
    long saturatedSubtract(long,long) -> saturatedSubtract
    long saturatedMultiply(long,long) -> saturatedMultiply
    long saturatedPow(long,int) -> saturatedPow
    long factorial(int) -> factorial
    long binomial(int,int) -> binomial
    long multiplyFraction(long,long,long) -> multiplyFraction
    boolean fitsInInt(long) -> fitsInInt
    long mean(long,long) -> mean
    boolean isPrime(long) -> isPrime
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.math.LongMath$1 -> com.google.common.math.LongMath$1:
    int[] $SwitchMap$java$math$RoundingMode -> $SwitchMap$java$math$RoundingMode
    void <clinit>() -> <clinit>
com.google.common.math.LongMath$MillerRabinTester -> com.google.common.math.LongMath$MillerRabinTester:
    com.google.common.math.LongMath$MillerRabinTester SMALL -> SMALL
    com.google.common.math.LongMath$MillerRabinTester LARGE -> LARGE
    com.google.common.math.LongMath$MillerRabinTester[] $VALUES -> $VALUES
    com.google.common.math.LongMath$MillerRabinTester[] values() -> values
    com.google.common.math.LongMath$MillerRabinTester valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean test(long,long) -> test
    long mulMod(long,long,long) -> mulMod
    long squareMod(long,long) -> squareMod
    long powMod(long,long,long) -> powMod
    boolean testWitness(long,long) -> testWitness
    void <init>(java.lang.String,int,com.google.common.math.LongMath$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.math.LongMath$MillerRabinTester$1 -> com.google.common.math.LongMath$MillerRabinTester$1:
    void <init>(java.lang.String,int) -> <init>
    long mulMod(long,long,long) -> mulMod
    long squareMod(long,long) -> squareMod
com.google.common.math.LongMath$MillerRabinTester$2 -> com.google.common.math.LongMath$MillerRabinTester$2:
    void <init>(java.lang.String,int) -> <init>
    long plusMod(long,long,long) -> plusMod
    long times2ToThe32Mod(long,long) -> times2ToThe32Mod
    long mulMod(long,long,long) -> mulMod
    long squareMod(long,long) -> squareMod
com.google.common.math.MathPreconditions -> com.google.common.math.MathPreconditions:
    int checkPositive(java.lang.String,int) -> checkPositive
    long checkPositive(java.lang.String,long) -> checkPositive
    java.math.BigInteger checkPositive(java.lang.String,java.math.BigInteger) -> checkPositive
    int checkNonNegative(java.lang.String,int) -> checkNonNegative
    long checkNonNegative(java.lang.String,long) -> checkNonNegative
    java.math.BigInteger checkNonNegative(java.lang.String,java.math.BigInteger) -> checkNonNegative
    double checkNonNegative(java.lang.String,double) -> checkNonNegative
    void checkRoundingUnnecessary(boolean) -> checkRoundingUnnecessary
    void checkInRangeForRoundingInputs(boolean,double,java.math.RoundingMode) -> checkInRangeForRoundingInputs
    void checkNoOverflow(boolean,java.lang.String,int,int) -> checkNoOverflow
    void checkNoOverflow(boolean,java.lang.String,long,long) -> checkNoOverflow
    void <init>() -> <init>
com.google.common.math.PairedStats -> com.google.common.math.PairedStats:
    com.google.common.math.Stats xStats -> xStats
    com.google.common.math.Stats yStats -> yStats
    double sumOfProductsOfDeltas -> sumOfProductsOfDeltas
    int BYTES -> BYTES
    long serialVersionUID -> serialVersionUID
    void <init>(com.google.common.math.Stats,com.google.common.math.Stats,double) -> <init>
    long count() -> count
    com.google.common.math.Stats xStats() -> xStats
    com.google.common.math.Stats yStats() -> yStats
    double populationCovariance() -> populationCovariance
    double sampleCovariance() -> sampleCovariance
    double pearsonsCorrelationCoefficient() -> pearsonsCorrelationCoefficient
    com.google.common.math.LinearTransformation leastSquaresFit() -> leastSquaresFit
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double sumOfProductsOfDeltas() -> sumOfProductsOfDeltas
    double ensurePositive(double) -> ensurePositive
    double ensureInUnitRange(double) -> ensureInUnitRange
    byte[] toByteArray() -> toByteArray
    com.google.common.math.PairedStats fromByteArray(byte[]) -> fromByteArray
com.google.common.math.PairedStatsAccumulator -> com.google.common.math.PairedStatsAccumulator:
    com.google.common.math.StatsAccumulator xStats -> xStats
    com.google.common.math.StatsAccumulator yStats -> yStats
    double sumOfProductsOfDeltas -> sumOfProductsOfDeltas
    void <init>() -> <init>
    void add(double,double) -> add
    void addAll(com.google.common.math.PairedStats) -> addAll
    com.google.common.math.PairedStats snapshot() -> snapshot
    long count() -> count
    com.google.common.math.Stats xStats() -> xStats
    com.google.common.math.Stats yStats() -> yStats
    double populationCovariance() -> populationCovariance
    double sampleCovariance() -> sampleCovariance
    double pearsonsCorrelationCoefficient() -> pearsonsCorrelationCoefficient
    com.google.common.math.LinearTransformation leastSquaresFit() -> leastSquaresFit
    double ensurePositive(double) -> ensurePositive
    double ensureInUnitRange(double) -> ensureInUnitRange
com.google.common.math.Quantiles -> com.google.common.math.Quantiles:
    void <init>() -> <init>
    com.google.common.math.Quantiles$ScaleAndIndex median() -> median
    com.google.common.math.Quantiles$Scale quartiles() -> quartiles
    com.google.common.math.Quantiles$Scale percentiles() -> percentiles
    com.google.common.math.Quantiles$Scale scale(int) -> scale
    boolean containsNaN(double[]) -> containsNaN
    double interpolate(double,double,double,double) -> interpolate
    void checkIndex(int,int) -> checkIndex
    double[] longsToDoubles(long[]) -> longsToDoubles
    double[] intsToDoubles(int[]) -> intsToDoubles
    void selectInPlace(int,double[],int,int) -> selectInPlace
    int partition(double[],int,int) -> partition
    void movePivotToStartOfSlice(double[],int,int) -> movePivotToStartOfSlice
    void selectAllInPlace(int[],int,int,double[],int,int) -> selectAllInPlace
    int chooseNextSelection(int[],int,int,int,int) -> chooseNextSelection
    void swap(double[],int,int) -> swap
    void access$300(int,int) -> access$300
    double[] access$400(long[]) -> access$400
    double[] access$500(int[]) -> access$500
    boolean access$600(double[]) -> access$600
    void access$700(int,double[],int,int) -> access$700
    double access$800(double,double,double,double) -> access$800
    void access$900(int[],int,int,double[],int,int) -> access$900
com.google.common.math.Quantiles$1 -> com.google.common.math.Quantiles$1:
com.google.common.math.Quantiles$Scale -> com.google.common.math.Quantiles$Scale:
    int scale -> scale
    void <init>(int) -> <init>
    com.google.common.math.Quantiles$ScaleAndIndex index(int) -> index
    com.google.common.math.Quantiles$ScaleAndIndexes indexes(int[]) -> indexes
    com.google.common.math.Quantiles$ScaleAndIndexes indexes(java.util.Collection) -> indexes
    void <init>(int,com.google.common.math.Quantiles$1) -> <init>
com.google.common.math.Quantiles$ScaleAndIndex -> com.google.common.math.Quantiles$ScaleAndIndex:
    int scale -> scale
    int index -> index
    void <init>(int,int) -> <init>
    double compute(java.util.Collection) -> compute
    double compute(double[]) -> compute
    double compute(long[]) -> compute
    double compute(int[]) -> compute
    double computeInPlace(double[]) -> computeInPlace
    void <init>(int,int,com.google.common.math.Quantiles$1) -> <init>
com.google.common.math.Quantiles$ScaleAndIndexes -> com.google.common.math.Quantiles$ScaleAndIndexes:
    int scale -> scale
    int[] indexes -> indexes
    void <init>(int,int[]) -> <init>
    java.util.Map compute(java.util.Collection) -> compute
    java.util.Map compute(double[]) -> compute
    java.util.Map compute(long[]) -> compute
    java.util.Map compute(int[]) -> compute
    java.util.Map computeInPlace(double[]) -> computeInPlace
    void <init>(int,int[],com.google.common.math.Quantiles$1) -> <init>
com.google.common.math.Stats -> com.google.common.math.Stats:
    long count -> count
    double mean -> mean
    double sumOfSquaresOfDeltas -> sumOfSquaresOfDeltas
    double min -> min
    double max -> max
    int BYTES -> BYTES
    long serialVersionUID -> serialVersionUID
    void <init>(long,double,double,double,double) -> <init>
    com.google.common.math.Stats of(java.lang.Iterable) -> of
    com.google.common.math.Stats of(java.util.Iterator) -> of
    com.google.common.math.Stats of(double[]) -> of
    com.google.common.math.Stats of(int[]) -> of
    com.google.common.math.Stats of(long[]) -> of
    long count() -> count
    double mean() -> mean
    double sum() -> sum
    double populationVariance() -> populationVariance
    double populationStandardDeviation() -> populationStandardDeviation
    double sampleVariance() -> sampleVariance
    double sampleStandardDeviation() -> sampleStandardDeviation
    double min() -> min
    double max() -> max
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double sumOfSquaresOfDeltas() -> sumOfSquaresOfDeltas
    double meanOf(java.lang.Iterable) -> meanOf
    double meanOf(java.util.Iterator) -> meanOf
    double meanOf(double[]) -> meanOf
    double meanOf(int[]) -> meanOf
    double meanOf(long[]) -> meanOf
    byte[] toByteArray() -> toByteArray
    void writeTo(java.nio.ByteBuffer) -> writeTo
    com.google.common.math.Stats fromByteArray(byte[]) -> fromByteArray
    com.google.common.math.Stats readFrom(java.nio.ByteBuffer) -> readFrom
com.google.common.math.StatsAccumulator -> com.google.common.math.StatsAccumulator:
    long count -> count
    double mean -> mean
    double sumOfSquaresOfDeltas -> sumOfSquaresOfDeltas
    double min -> min
    double max -> max
    void <init>() -> <init>
    void add(double) -> add
    void addAll(java.lang.Iterable) -> addAll
    void addAll(java.util.Iterator) -> addAll
    void addAll(double[]) -> addAll
    void addAll(int[]) -> addAll
    void addAll(long[]) -> addAll
    void addAll(com.google.common.math.Stats) -> addAll
    com.google.common.math.Stats snapshot() -> snapshot
    long count() -> count
    double mean() -> mean
    double sum() -> sum
    double populationVariance() -> populationVariance
    double populationStandardDeviation() -> populationStandardDeviation
    double sampleVariance() -> sampleVariance
    double sampleStandardDeviation() -> sampleStandardDeviation
    double min() -> min
    double max() -> max
    double sumOfSquaresOfDeltas() -> sumOfSquaresOfDeltas
    double calculateNewMeanNonFinite(double,double) -> calculateNewMeanNonFinite
com.google.common.math.package-info -> com.google.common.math.package-info:
com.google.common.net.HostAndPort -> com.google.common.net.HostAndPort:
    int NO_PORT -> NO_PORT
    java.lang.String host -> host
    int port -> port
    boolean hasBracketlessColons -> hasBracketlessColons
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,int,boolean) -> <init>
    java.lang.String getHost() -> getHost
    boolean hasPort() -> hasPort
    int getPort() -> getPort
    int getPortOrDefault(int) -> getPortOrDefault
    com.google.common.net.HostAndPort fromParts(java.lang.String,int) -> fromParts
    com.google.common.net.HostAndPort fromHost(java.lang.String) -> fromHost
    com.google.common.net.HostAndPort fromString(java.lang.String) -> fromString
    java.lang.String[] getHostAndPortFromBracketedHost(java.lang.String) -> getHostAndPortFromBracketedHost
    com.google.common.net.HostAndPort withDefaultPort(int) -> withDefaultPort
    com.google.common.net.HostAndPort requireBracketsForIPv6() -> requireBracketsForIPv6
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isValidPort(int) -> isValidPort
com.google.common.net.HostSpecifier -> com.google.common.net.HostSpecifier:
    java.lang.String canonicalForm -> canonicalForm
    void <init>(java.lang.String) -> <init>
    com.google.common.net.HostSpecifier fromValid(java.lang.String) -> fromValid
    com.google.common.net.HostSpecifier from(java.lang.String) -> from
    boolean isValid(java.lang.String) -> isValid
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.net.HttpHeaders -> com.google.common.net.HttpHeaders:
    java.lang.String CACHE_CONTROL -> CACHE_CONTROL
    java.lang.String CONTENT_LENGTH -> CONTENT_LENGTH
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String DATE -> DATE
    java.lang.String PRAGMA -> PRAGMA
    java.lang.String VIA -> VIA
    java.lang.String WARNING -> WARNING
    java.lang.String ACCEPT -> ACCEPT
    java.lang.String ACCEPT_CHARSET -> ACCEPT_CHARSET
    java.lang.String ACCEPT_ENCODING -> ACCEPT_ENCODING
    java.lang.String ACCEPT_LANGUAGE -> ACCEPT_LANGUAGE
    java.lang.String ACCESS_CONTROL_REQUEST_HEADERS -> ACCESS_CONTROL_REQUEST_HEADERS
    java.lang.String ACCESS_CONTROL_REQUEST_METHOD -> ACCESS_CONTROL_REQUEST_METHOD
    java.lang.String AUTHORIZATION -> AUTHORIZATION
    java.lang.String CONNECTION -> CONNECTION
    java.lang.String COOKIE -> COOKIE
    java.lang.String EARLY_DATA -> EARLY_DATA
    java.lang.String EXPECT -> EXPECT
    java.lang.String FROM -> FROM
    java.lang.String FORWARDED -> FORWARDED
    java.lang.String FOLLOW_ONLY_WHEN_PRERENDER_SHOWN -> FOLLOW_ONLY_WHEN_PRERENDER_SHOWN
    java.lang.String HOST -> HOST
    java.lang.String HTTP2_SETTINGS -> HTTP2_SETTINGS
    java.lang.String IF_MATCH -> IF_MATCH
    java.lang.String IF_MODIFIED_SINCE -> IF_MODIFIED_SINCE
    java.lang.String IF_NONE_MATCH -> IF_NONE_MATCH
    java.lang.String IF_RANGE -> IF_RANGE
    java.lang.String IF_UNMODIFIED_SINCE -> IF_UNMODIFIED_SINCE
    java.lang.String LAST_EVENT_ID -> LAST_EVENT_ID
    java.lang.String MAX_FORWARDS -> MAX_FORWARDS
    java.lang.String ORIGIN -> ORIGIN
    java.lang.String PROXY_AUTHORIZATION -> PROXY_AUTHORIZATION
    java.lang.String RANGE -> RANGE
    java.lang.String REFERER -> REFERER
    java.lang.String REFERRER_POLICY -> REFERRER_POLICY
    java.lang.String SERVICE_WORKER -> SERVICE_WORKER
    java.lang.String TE -> TE
    java.lang.String UPGRADE -> UPGRADE
    java.lang.String USER_AGENT -> USER_AGENT
    java.lang.String ACCEPT_RANGES -> ACCEPT_RANGES
    java.lang.String ACCESS_CONTROL_ALLOW_HEADERS -> ACCESS_CONTROL_ALLOW_HEADERS
    java.lang.String ACCESS_CONTROL_ALLOW_METHODS -> ACCESS_CONTROL_ALLOW_METHODS
    java.lang.String ACCESS_CONTROL_ALLOW_ORIGIN -> ACCESS_CONTROL_ALLOW_ORIGIN
    java.lang.String ACCESS_CONTROL_ALLOW_CREDENTIALS -> ACCESS_CONTROL_ALLOW_CREDENTIALS
    java.lang.String ACCESS_CONTROL_EXPOSE_HEADERS -> ACCESS_CONTROL_EXPOSE_HEADERS
    java.lang.String ACCESS_CONTROL_MAX_AGE -> ACCESS_CONTROL_MAX_AGE
    java.lang.String AGE -> AGE
    java.lang.String ALLOW -> ALLOW
    java.lang.String CONTENT_DISPOSITION -> CONTENT_DISPOSITION
    java.lang.String CONTENT_ENCODING -> CONTENT_ENCODING
    java.lang.String CONTENT_LANGUAGE -> CONTENT_LANGUAGE
    java.lang.String CONTENT_LOCATION -> CONTENT_LOCATION
    java.lang.String CONTENT_MD5 -> CONTENT_MD5
    java.lang.String CONTENT_RANGE -> CONTENT_RANGE
    java.lang.String CONTENT_SECURITY_POLICY -> CONTENT_SECURITY_POLICY
    java.lang.String CONTENT_SECURITY_POLICY_REPORT_ONLY -> CONTENT_SECURITY_POLICY_REPORT_ONLY
    java.lang.String X_CONTENT_SECURITY_POLICY -> X_CONTENT_SECURITY_POLICY
    java.lang.String X_CONTENT_SECURITY_POLICY_REPORT_ONLY -> X_CONTENT_SECURITY_POLICY_REPORT_ONLY
    java.lang.String X_WEBKIT_CSP -> X_WEBKIT_CSP
    java.lang.String X_WEBKIT_CSP_REPORT_ONLY -> X_WEBKIT_CSP_REPORT_ONLY
    java.lang.String ETAG -> ETAG
    java.lang.String EXPIRES -> EXPIRES
    java.lang.String LAST_MODIFIED -> LAST_MODIFIED
    java.lang.String LINK -> LINK
    java.lang.String LOCATION -> LOCATION
    java.lang.String P3P -> P3P
    java.lang.String PROXY_AUTHENTICATE -> PROXY_AUTHENTICATE
    java.lang.String REFRESH -> REFRESH
    java.lang.String RETRY_AFTER -> RETRY_AFTER
    java.lang.String SERVER -> SERVER
    java.lang.String SERVER_TIMING -> SERVER_TIMING
    java.lang.String SERVICE_WORKER_ALLOWED -> SERVICE_WORKER_ALLOWED
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String SET_COOKIE2 -> SET_COOKIE2
    java.lang.String STRICT_TRANSPORT_SECURITY -> STRICT_TRANSPORT_SECURITY
    java.lang.String TIMING_ALLOW_ORIGIN -> TIMING_ALLOW_ORIGIN
    java.lang.String TRAILER -> TRAILER
    java.lang.String TRANSFER_ENCODING -> TRANSFER_ENCODING
    java.lang.String VARY -> VARY
    java.lang.String WWW_AUTHENTICATE -> WWW_AUTHENTICATE
    java.lang.String DNT -> DNT
    java.lang.String X_CONTENT_TYPE_OPTIONS -> X_CONTENT_TYPE_OPTIONS
    java.lang.String X_DO_NOT_TRACK -> X_DO_NOT_TRACK
    java.lang.String X_FORWARDED_FOR -> X_FORWARDED_FOR
    java.lang.String X_FORWARDED_PROTO -> X_FORWARDED_PROTO
    java.lang.String X_FORWARDED_HOST -> X_FORWARDED_HOST
    java.lang.String X_FORWARDED_PORT -> X_FORWARDED_PORT
    java.lang.String X_FRAME_OPTIONS -> X_FRAME_OPTIONS
    java.lang.String X_POWERED_BY -> X_POWERED_BY
    java.lang.String PUBLIC_KEY_PINS -> PUBLIC_KEY_PINS
    java.lang.String PUBLIC_KEY_PINS_REPORT_ONLY -> PUBLIC_KEY_PINS_REPORT_ONLY
    java.lang.String X_REQUESTED_WITH -> X_REQUESTED_WITH
    java.lang.String X_USER_IP -> X_USER_IP
    java.lang.String X_DOWNLOAD_OPTIONS -> X_DOWNLOAD_OPTIONS
    java.lang.String X_XSS_PROTECTION -> X_XSS_PROTECTION
    java.lang.String X_DNS_PREFETCH_CONTROL -> X_DNS_PREFETCH_CONTROL
    java.lang.String PING_FROM -> PING_FROM
    java.lang.String PING_TO -> PING_TO
    java.lang.String SEC_METADATA -> SEC_METADATA
    java.lang.String SEC_TOKEN_BINDING -> SEC_TOKEN_BINDING
    java.lang.String SEC_PROVIDED_TOKEN_BINDING_ID -> SEC_PROVIDED_TOKEN_BINDING_ID
    java.lang.String SEC_REFERRED_TOKEN_BINDING_ID -> SEC_REFERRED_TOKEN_BINDING_ID
    void <init>() -> <init>
com.google.common.net.HttpHeaders$ReferrerPolicyValues -> com.google.common.net.HttpHeaders$ReferrerPolicyValues:
    java.lang.String NO_REFERRER -> NO_REFERRER
    java.lang.String NO_REFFERER_WHEN_DOWNGRADE -> NO_REFFERER_WHEN_DOWNGRADE
    java.lang.String SAME_ORIGIN -> SAME_ORIGIN
    java.lang.String ORIGIN -> ORIGIN
    java.lang.String STRICT_ORIGIN -> STRICT_ORIGIN
    java.lang.String ORIGIN_WHEN_CROSS_ORIGIN -> ORIGIN_WHEN_CROSS_ORIGIN
    java.lang.String STRICT_ORIGIN_WHEN_CROSS_ORIGIN -> STRICT_ORIGIN_WHEN_CROSS_ORIGIN
    java.lang.String UNSAFE_URL -> UNSAFE_URL
    void <init>() -> <init>
com.google.common.net.InetAddresses -> com.google.common.net.InetAddresses:
    int IPV4_PART_COUNT -> IPV4_PART_COUNT
    int IPV6_PART_COUNT -> IPV6_PART_COUNT
    com.google.common.base.Splitter IPV4_SPLITTER -> IPV4_SPLITTER
    com.google.common.base.Splitter IPV6_SPLITTER -> IPV6_SPLITTER
    java.net.Inet4Address LOOPBACK4 -> LOOPBACK4
    java.net.Inet4Address ANY4 -> ANY4
    void <init>() -> <init>
    java.net.Inet4Address getInet4Address(byte[]) -> getInet4Address
    java.net.InetAddress forString(java.lang.String) -> forString
    boolean isInetAddress(java.lang.String) -> isInetAddress
    byte[] ipStringToBytes(java.lang.String) -> ipStringToBytes
    byte[] textToNumericFormatV4(java.lang.String) -> textToNumericFormatV4
    byte[] textToNumericFormatV6(java.lang.String) -> textToNumericFormatV6
    java.lang.String convertDottedQuadToHex(java.lang.String) -> convertDottedQuadToHex
    byte parseOctet(java.lang.String) -> parseOctet
    short parseHextet(java.lang.String) -> parseHextet
    java.net.InetAddress bytesToInetAddress(byte[]) -> bytesToInetAddress
    java.lang.String toAddrString(java.net.InetAddress) -> toAddrString
    void compressLongestRunOfZeroes(int[]) -> compressLongestRunOfZeroes
    java.lang.String hextetsToIPv6String(int[]) -> hextetsToIPv6String
    java.lang.String toUriString(java.net.InetAddress) -> toUriString
    java.net.InetAddress forUriString(java.lang.String) -> forUriString
    java.net.InetAddress forUriStringNoThrow(java.lang.String) -> forUriStringNoThrow
    boolean isUriInetAddress(java.lang.String) -> isUriInetAddress
    boolean isCompatIPv4Address(java.net.Inet6Address) -> isCompatIPv4Address
    java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address) -> getCompatIPv4Address
    boolean is6to4Address(java.net.Inet6Address) -> is6to4Address
    java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address) -> get6to4IPv4Address
    boolean isTeredoAddress(java.net.Inet6Address) -> isTeredoAddress
    com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address) -> getTeredoInfo
    boolean isIsatapAddress(java.net.Inet6Address) -> isIsatapAddress
    java.net.Inet4Address getIsatapIPv4Address(java.net.Inet6Address) -> getIsatapIPv4Address
    boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address) -> hasEmbeddedIPv4ClientAddress
    java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address) -> getEmbeddedIPv4ClientAddress
    boolean isMappedIPv4Address(java.lang.String) -> isMappedIPv4Address
    java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress) -> getCoercedIPv4Address
    int coerceToInteger(java.net.InetAddress) -> coerceToInteger
    java.net.Inet4Address fromInteger(int) -> fromInteger
    java.net.InetAddress fromLittleEndianByteArray(byte[]) -> fromLittleEndianByteArray
    java.net.InetAddress decrement(java.net.InetAddress) -> decrement
    java.net.InetAddress increment(java.net.InetAddress) -> increment
    boolean isMaximum(java.net.InetAddress) -> isMaximum
    java.lang.IllegalArgumentException formatIllegalArgumentException(java.lang.String,java.lang.Object[]) -> formatIllegalArgumentException
    java.net.Inet4Address access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.net.InetAddresses$TeredoInfo -> com.google.common.net.InetAddresses$TeredoInfo:
    java.net.Inet4Address server -> server
    java.net.Inet4Address client -> client
    int port -> port
    int flags -> flags
    void <init>(java.net.Inet4Address,java.net.Inet4Address,int,int) -> <init>
    java.net.Inet4Address getServer() -> getServer
    java.net.Inet4Address getClient() -> getClient
    int getPort() -> getPort
    int getFlags() -> getFlags
com.google.common.net.InternetDomainName -> com.google.common.net.InternetDomainName:
    com.google.common.base.CharMatcher DOTS_MATCHER -> DOTS_MATCHER
    com.google.common.base.Splitter DOT_SPLITTER -> DOT_SPLITTER
    com.google.common.base.Joiner DOT_JOINER -> DOT_JOINER
    int NO_SUFFIX_FOUND -> NO_SUFFIX_FOUND
    int MAX_PARTS -> MAX_PARTS
    int MAX_LENGTH -> MAX_LENGTH
    int MAX_DOMAIN_PART_LENGTH -> MAX_DOMAIN_PART_LENGTH
    java.lang.String name -> name
    com.google.common.collect.ImmutableList parts -> parts
    int publicSuffixIndex -> publicSuffixIndex
    int registrySuffixIndex -> registrySuffixIndex
    com.google.common.base.CharMatcher DASH_MATCHER -> DASH_MATCHER
    com.google.common.base.CharMatcher PART_CHAR_MATCHER -> PART_CHAR_MATCHER
    void <init>(java.lang.String) -> <init>
    int findSuffixOfType(com.google.common.base.Optional) -> findSuffixOfType
    com.google.common.net.InternetDomainName from(java.lang.String) -> from
    boolean validateSyntax(java.util.List) -> validateSyntax
    boolean validatePart(java.lang.String,boolean) -> validatePart
    com.google.common.collect.ImmutableList parts() -> parts
    boolean isPublicSuffix() -> isPublicSuffix
    boolean hasPublicSuffix() -> hasPublicSuffix
    com.google.common.net.InternetDomainName publicSuffix() -> publicSuffix
    boolean isUnderPublicSuffix() -> isUnderPublicSuffix
    boolean isTopPrivateDomain() -> isTopPrivateDomain
    com.google.common.net.InternetDomainName topPrivateDomain() -> topPrivateDomain
    boolean isRegistrySuffix() -> isRegistrySuffix
    boolean hasRegistrySuffix() -> hasRegistrySuffix
    com.google.common.net.InternetDomainName registrySuffix() -> registrySuffix
    boolean isUnderRegistrySuffix() -> isUnderRegistrySuffix
    boolean isTopDomainUnderRegistrySuffix() -> isTopDomainUnderRegistrySuffix
    com.google.common.net.InternetDomainName topDomainUnderRegistrySuffix() -> topDomainUnderRegistrySuffix
    boolean hasParent() -> hasParent
    com.google.common.net.InternetDomainName parent() -> parent
    com.google.common.net.InternetDomainName ancestor(int) -> ancestor
    com.google.common.net.InternetDomainName child(java.lang.String) -> child
    boolean isValid(java.lang.String) -> isValid
    boolean matchesWildcardSuffixType(com.google.common.base.Optional,java.lang.String) -> matchesWildcardSuffixType
    boolean matchesType(com.google.common.base.Optional,com.google.common.base.Optional) -> matchesType
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
com.google.common.net.MediaType -> com.google.common.net.MediaType:
    java.lang.String CHARSET_ATTRIBUTE -> CHARSET_ATTRIBUTE
    com.google.common.collect.ImmutableListMultimap UTF_8_CONSTANT_PARAMETERS -> UTF_8_CONSTANT_PARAMETERS
    com.google.common.base.CharMatcher TOKEN_MATCHER -> TOKEN_MATCHER
    com.google.common.base.CharMatcher QUOTED_TEXT_MATCHER -> QUOTED_TEXT_MATCHER
    com.google.common.base.CharMatcher LINEAR_WHITE_SPACE -> LINEAR_WHITE_SPACE
    java.lang.String APPLICATION_TYPE -> APPLICATION_TYPE
    java.lang.String AUDIO_TYPE -> AUDIO_TYPE
    java.lang.String IMAGE_TYPE -> IMAGE_TYPE
    java.lang.String TEXT_TYPE -> TEXT_TYPE
    java.lang.String VIDEO_TYPE -> VIDEO_TYPE
    java.lang.String WILDCARD -> WILDCARD
    java.util.Map KNOWN_TYPES -> KNOWN_TYPES
    com.google.common.net.MediaType ANY_TYPE -> ANY_TYPE
    com.google.common.net.MediaType ANY_TEXT_TYPE -> ANY_TEXT_TYPE
    com.google.common.net.MediaType ANY_IMAGE_TYPE -> ANY_IMAGE_TYPE
    com.google.common.net.MediaType ANY_AUDIO_TYPE -> ANY_AUDIO_TYPE
    com.google.common.net.MediaType ANY_VIDEO_TYPE -> ANY_VIDEO_TYPE
    com.google.common.net.MediaType ANY_APPLICATION_TYPE -> ANY_APPLICATION_TYPE
    com.google.common.net.MediaType CACHE_MANIFEST_UTF_8 -> CACHE_MANIFEST_UTF_8
    com.google.common.net.MediaType CSS_UTF_8 -> CSS_UTF_8
    com.google.common.net.MediaType CSV_UTF_8 -> CSV_UTF_8
    com.google.common.net.MediaType HTML_UTF_8 -> HTML_UTF_8
    com.google.common.net.MediaType I_CALENDAR_UTF_8 -> I_CALENDAR_UTF_8
    com.google.common.net.MediaType PLAIN_TEXT_UTF_8 -> PLAIN_TEXT_UTF_8
    com.google.common.net.MediaType TEXT_JAVASCRIPT_UTF_8 -> TEXT_JAVASCRIPT_UTF_8
    com.google.common.net.MediaType TSV_UTF_8 -> TSV_UTF_8
    com.google.common.net.MediaType VCARD_UTF_8 -> VCARD_UTF_8
    com.google.common.net.MediaType WML_UTF_8 -> WML_UTF_8
    com.google.common.net.MediaType XML_UTF_8 -> XML_UTF_8
    com.google.common.net.MediaType VTT_UTF_8 -> VTT_UTF_8
    com.google.common.net.MediaType BMP -> BMP
    com.google.common.net.MediaType CRW -> CRW
    com.google.common.net.MediaType GIF -> GIF
    com.google.common.net.MediaType ICO -> ICO
    com.google.common.net.MediaType JPEG -> JPEG
    com.google.common.net.MediaType PNG -> PNG
    com.google.common.net.MediaType PSD -> PSD
    com.google.common.net.MediaType SVG_UTF_8 -> SVG_UTF_8
    com.google.common.net.MediaType TIFF -> TIFF
    com.google.common.net.MediaType WEBP -> WEBP
    com.google.common.net.MediaType MP4_AUDIO -> MP4_AUDIO
    com.google.common.net.MediaType MPEG_AUDIO -> MPEG_AUDIO
    com.google.common.net.MediaType OGG_AUDIO -> OGG_AUDIO
    com.google.common.net.MediaType WEBM_AUDIO -> WEBM_AUDIO
    com.google.common.net.MediaType L16_AUDIO -> L16_AUDIO
    com.google.common.net.MediaType L24_AUDIO -> L24_AUDIO
    com.google.common.net.MediaType BASIC_AUDIO -> BASIC_AUDIO
    com.google.common.net.MediaType AAC_AUDIO -> AAC_AUDIO
    com.google.common.net.MediaType VORBIS_AUDIO -> VORBIS_AUDIO
    com.google.common.net.MediaType WMA_AUDIO -> WMA_AUDIO
    com.google.common.net.MediaType WAX_AUDIO -> WAX_AUDIO
    com.google.common.net.MediaType VND_REAL_AUDIO -> VND_REAL_AUDIO
    com.google.common.net.MediaType VND_WAVE_AUDIO -> VND_WAVE_AUDIO
    com.google.common.net.MediaType MP4_VIDEO -> MP4_VIDEO
    com.google.common.net.MediaType MPEG_VIDEO -> MPEG_VIDEO
    com.google.common.net.MediaType OGG_VIDEO -> OGG_VIDEO
    com.google.common.net.MediaType QUICKTIME -> QUICKTIME
    com.google.common.net.MediaType WEBM_VIDEO -> WEBM_VIDEO
    com.google.common.net.MediaType WMV -> WMV
    com.google.common.net.MediaType FLV_VIDEO -> FLV_VIDEO
    com.google.common.net.MediaType THREE_GPP_VIDEO -> THREE_GPP_VIDEO
    com.google.common.net.MediaType THREE_GPP2_VIDEO -> THREE_GPP2_VIDEO
    com.google.common.net.MediaType APPLICATION_XML_UTF_8 -> APPLICATION_XML_UTF_8
    com.google.common.net.MediaType ATOM_UTF_8 -> ATOM_UTF_8
    com.google.common.net.MediaType BZIP2 -> BZIP2
    com.google.common.net.MediaType DART_UTF_8 -> DART_UTF_8
    com.google.common.net.MediaType APPLE_PASSBOOK -> APPLE_PASSBOOK
    com.google.common.net.MediaType EOT -> EOT
    com.google.common.net.MediaType EPUB -> EPUB
    com.google.common.net.MediaType FORM_DATA -> FORM_DATA
    com.google.common.net.MediaType KEY_ARCHIVE -> KEY_ARCHIVE
    com.google.common.net.MediaType APPLICATION_BINARY -> APPLICATION_BINARY
    com.google.common.net.MediaType GZIP -> GZIP
    com.google.common.net.MediaType HAL_JSON -> HAL_JSON
    com.google.common.net.MediaType JAVASCRIPT_UTF_8 -> JAVASCRIPT_UTF_8
    com.google.common.net.MediaType JSON_UTF_8 -> JSON_UTF_8
    com.google.common.net.MediaType MANIFEST_JSON_UTF_8 -> MANIFEST_JSON_UTF_8
    com.google.common.net.MediaType KML -> KML
    com.google.common.net.MediaType KMZ -> KMZ
    com.google.common.net.MediaType MBOX -> MBOX
    com.google.common.net.MediaType APPLE_MOBILE_CONFIG -> APPLE_MOBILE_CONFIG
    com.google.common.net.MediaType MICROSOFT_EXCEL -> MICROSOFT_EXCEL
    com.google.common.net.MediaType MICROSOFT_POWERPOINT -> MICROSOFT_POWERPOINT
    com.google.common.net.MediaType MICROSOFT_WORD -> MICROSOFT_WORD
    com.google.common.net.MediaType WASM_APPLICATION -> WASM_APPLICATION
    com.google.common.net.MediaType NACL_APPLICATION -> NACL_APPLICATION
    com.google.common.net.MediaType NACL_PORTABLE_APPLICATION -> NACL_PORTABLE_APPLICATION
    com.google.common.net.MediaType OCTET_STREAM -> OCTET_STREAM
    com.google.common.net.MediaType OGG_CONTAINER -> OGG_CONTAINER
    com.google.common.net.MediaType OOXML_DOCUMENT -> OOXML_DOCUMENT
    com.google.common.net.MediaType OOXML_PRESENTATION -> OOXML_PRESENTATION
    com.google.common.net.MediaType OOXML_SHEET -> OOXML_SHEET
    com.google.common.net.MediaType OPENDOCUMENT_GRAPHICS -> OPENDOCUMENT_GRAPHICS
    com.google.common.net.MediaType OPENDOCUMENT_PRESENTATION -> OPENDOCUMENT_PRESENTATION
    com.google.common.net.MediaType OPENDOCUMENT_SPREADSHEET -> OPENDOCUMENT_SPREADSHEET
    com.google.common.net.MediaType OPENDOCUMENT_TEXT -> OPENDOCUMENT_TEXT
    com.google.common.net.MediaType PDF -> PDF
    com.google.common.net.MediaType POSTSCRIPT -> POSTSCRIPT
    com.google.common.net.MediaType PROTOBUF -> PROTOBUF
    com.google.common.net.MediaType RDF_XML_UTF_8 -> RDF_XML_UTF_8
    com.google.common.net.MediaType RTF_UTF_8 -> RTF_UTF_8
    com.google.common.net.MediaType SFNT -> SFNT
    com.google.common.net.MediaType SHOCKWAVE_FLASH -> SHOCKWAVE_FLASH
    com.google.common.net.MediaType SKETCHUP -> SKETCHUP
    com.google.common.net.MediaType SOAP_XML_UTF_8 -> SOAP_XML_UTF_8
    com.google.common.net.MediaType TAR -> TAR
    com.google.common.net.MediaType WOFF -> WOFF
    com.google.common.net.MediaType WOFF2 -> WOFF2
    com.google.common.net.MediaType XHTML_UTF_8 -> XHTML_UTF_8
    com.google.common.net.MediaType XRD_UTF_8 -> XRD_UTF_8
    com.google.common.net.MediaType ZIP -> ZIP
    java.lang.String type -> type
    java.lang.String subtype -> subtype
    com.google.common.collect.ImmutableListMultimap parameters -> parameters
    java.lang.String toString -> toString
    int hashCode -> hashCode
    com.google.common.base.Optional parsedCharset -> parsedCharset
    com.google.common.base.Joiner$MapJoiner PARAMETER_JOINER -> PARAMETER_JOINER
    com.google.common.net.MediaType createConstant(java.lang.String,java.lang.String) -> createConstant
    com.google.common.net.MediaType createConstantUtf8(java.lang.String,java.lang.String) -> createConstantUtf8
    com.google.common.net.MediaType addKnownType(com.google.common.net.MediaType) -> addKnownType
    void <init>(java.lang.String,java.lang.String,com.google.common.collect.ImmutableListMultimap) -> <init>
    java.lang.String type() -> type
    java.lang.String subtype() -> subtype
    com.google.common.collect.ImmutableListMultimap parameters() -> parameters
    java.util.Map parametersAsMap() -> parametersAsMap
    com.google.common.base.Optional charset() -> charset
    com.google.common.net.MediaType withoutParameters() -> withoutParameters
    com.google.common.net.MediaType withParameters(com.google.common.collect.Multimap) -> withParameters
    com.google.common.net.MediaType withParameters(java.lang.String,java.lang.Iterable) -> withParameters
    com.google.common.net.MediaType withParameter(java.lang.String,java.lang.String) -> withParameter
    com.google.common.net.MediaType withCharset(java.nio.charset.Charset) -> withCharset
    boolean hasWildcard() -> hasWildcard
    boolean is(com.google.common.net.MediaType) -> is
    com.google.common.net.MediaType create(java.lang.String,java.lang.String) -> create
    com.google.common.net.MediaType create(java.lang.String,java.lang.String,com.google.common.collect.Multimap) -> create
    com.google.common.net.MediaType createApplicationType(java.lang.String) -> createApplicationType
    com.google.common.net.MediaType createAudioType(java.lang.String) -> createAudioType
    com.google.common.net.MediaType createImageType(java.lang.String) -> createImageType
    com.google.common.net.MediaType createTextType(java.lang.String) -> createTextType
    com.google.common.net.MediaType createVideoType(java.lang.String) -> createVideoType
    java.lang.String normalizeToken(java.lang.String) -> normalizeToken
    java.lang.String normalizeParameterValue(java.lang.String,java.lang.String) -> normalizeParameterValue
    com.google.common.net.MediaType parse(java.lang.String) -> parse
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String computeToString() -> computeToString
    java.lang.String escapeAndQuote(java.lang.String) -> escapeAndQuote
    com.google.common.base.CharMatcher access$000() -> access$000
    java.lang.String access$100(java.lang.String) -> access$100
    void <clinit>() -> <clinit>
com.google.common.net.MediaType$1 -> com.google.common.net.MediaType$1:
    com.google.common.net.MediaType this$0 -> this$0
    void <init>(com.google.common.net.MediaType) -> <init>
    com.google.common.collect.ImmutableMultiset apply(java.util.Collection) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.net.MediaType$2 -> com.google.common.net.MediaType$2:
    com.google.common.net.MediaType this$0 -> this$0
    void <init>(com.google.common.net.MediaType) -> <init>
    java.lang.String apply(java.lang.String) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.net.MediaType$Tokenizer -> com.google.common.net.MediaType$Tokenizer:
    java.lang.String input -> input
    int position -> position
    void <init>(java.lang.String) -> <init>
    java.lang.String consumeTokenIfPresent(com.google.common.base.CharMatcher) -> consumeTokenIfPresent
    java.lang.String consumeToken(com.google.common.base.CharMatcher) -> consumeToken
    char consumeCharacter(com.google.common.base.CharMatcher) -> consumeCharacter
    char consumeCharacter(char) -> consumeCharacter
    char previewChar() -> previewChar
    boolean hasMore() -> hasMore
com.google.common.net.PercentEscaper -> com.google.common.net.PercentEscaper:
    char[] PLUS_SIGN -> PLUS_SIGN
    char[] UPPER_HEX_DIGITS -> UPPER_HEX_DIGITS
    boolean plusForSpace -> plusForSpace
    boolean[] safeOctets -> safeOctets
    void <init>(java.lang.String,boolean) -> <init>
    boolean[] createSafeOctets(java.lang.String) -> createSafeOctets
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> nextEscapeIndex
    java.lang.String escape(java.lang.String) -> escape
    char[] escape(int) -> escape
    void <clinit>() -> <clinit>
com.google.common.net.UrlEscapers -> com.google.common.net.UrlEscapers:
    java.lang.String URL_FORM_PARAMETER_OTHER_SAFE_CHARS -> URL_FORM_PARAMETER_OTHER_SAFE_CHARS
    java.lang.String URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS -> URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS
    com.google.common.escape.Escaper URL_FORM_PARAMETER_ESCAPER -> URL_FORM_PARAMETER_ESCAPER
    com.google.common.escape.Escaper URL_PATH_SEGMENT_ESCAPER -> URL_PATH_SEGMENT_ESCAPER
    com.google.common.escape.Escaper URL_FRAGMENT_ESCAPER -> URL_FRAGMENT_ESCAPER
    void <init>() -> <init>
    com.google.common.escape.Escaper urlFormParameterEscaper() -> urlFormParameterEscaper
    com.google.common.escape.Escaper urlPathSegmentEscaper() -> urlPathSegmentEscaper
    com.google.common.escape.Escaper urlFragmentEscaper() -> urlFragmentEscaper
    void <clinit>() -> <clinit>
com.google.common.net.package-info -> com.google.common.net.package-info:
com.google.common.primitives.Booleans -> com.google.common.primitives.Booleans:
    void <init>() -> <init>
    java.util.Comparator trueFirst() -> trueFirst
    java.util.Comparator falseFirst() -> falseFirst
    int hashCode(boolean) -> hashCode
    int compare(boolean,boolean) -> compare
    boolean contains(boolean[],boolean) -> contains
    int indexOf(boolean[],boolean) -> indexOf
    int indexOf(boolean[],boolean,int,int) -> indexOf
    int indexOf(boolean[],boolean[]) -> indexOf
    int lastIndexOf(boolean[],boolean) -> lastIndexOf
    int lastIndexOf(boolean[],boolean,int,int) -> lastIndexOf
    boolean[] concat(boolean[][]) -> concat
    boolean[] ensureCapacity(boolean[],int,int) -> ensureCapacity
    java.lang.String join(java.lang.String,boolean[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    boolean[] toArray(java.util.Collection) -> toArray
    java.util.List asList(boolean[]) -> asList
    int countTrue(boolean[]) -> countTrue
    void reverse(boolean[]) -> reverse
    void reverse(boolean[],int,int) -> reverse
    int access$000(boolean[],boolean,int,int) -> access$000
    int access$100(boolean[],boolean,int,int) -> access$100
com.google.common.primitives.Booleans$BooleanArrayAsList -> com.google.common.primitives.Booleans$BooleanArrayAsList:
    boolean[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    void <init>(boolean[]) -> <init>
    void <init>(boolean[],int,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Boolean get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Boolean set(int,java.lang.Boolean) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean[] toBooleanArray() -> toBooleanArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Booleans$BooleanComparator -> com.google.common.primitives.Booleans$BooleanComparator:
    com.google.common.primitives.Booleans$BooleanComparator TRUE_FIRST -> TRUE_FIRST
    com.google.common.primitives.Booleans$BooleanComparator FALSE_FIRST -> FALSE_FIRST
    int trueValue -> trueValue
    java.lang.String toString -> toString
    com.google.common.primitives.Booleans$BooleanComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Booleans$BooleanComparator[] values() -> values
    com.google.common.primitives.Booleans$BooleanComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    int compare(java.lang.Boolean,java.lang.Boolean) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.Booleans$LexicographicalComparator -> com.google.common.primitives.Booleans$LexicographicalComparator:
    com.google.common.primitives.Booleans$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Booleans$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Booleans$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Booleans$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(boolean[],boolean[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.Bytes -> com.google.common.primitives.Bytes:
    void <init>() -> <init>
    int hashCode(byte) -> hashCode
    boolean contains(byte[],byte) -> contains
    int indexOf(byte[],byte) -> indexOf
    int indexOf(byte[],byte,int,int) -> indexOf
    int indexOf(byte[],byte[]) -> indexOf
    int lastIndexOf(byte[],byte) -> lastIndexOf
    int lastIndexOf(byte[],byte,int,int) -> lastIndexOf
    byte[] concat(byte[][]) -> concat
    byte[] ensureCapacity(byte[],int,int) -> ensureCapacity
    byte[] toArray(java.util.Collection) -> toArray
    java.util.List asList(byte[]) -> asList
    void reverse(byte[]) -> reverse
    void reverse(byte[],int,int) -> reverse
    int access$000(byte[],byte,int,int) -> access$000
    int access$100(byte[],byte,int,int) -> access$100
com.google.common.primitives.Bytes$ByteArrayAsList -> com.google.common.primitives.Bytes$ByteArrayAsList:
    byte[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    void <init>(byte[]) -> <init>
    void <init>(byte[],int,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Byte get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Byte set(int,java.lang.Byte) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte[] toByteArray() -> toByteArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Chars -> com.google.common.primitives.Chars:
    int BYTES -> BYTES
    void <init>() -> <init>
    int hashCode(char) -> hashCode
    char checkedCast(long) -> checkedCast
    char saturatedCast(long) -> saturatedCast
    int compare(char,char) -> compare
    boolean contains(char[],char) -> contains
    int indexOf(char[],char) -> indexOf
    int indexOf(char[],char,int,int) -> indexOf
    int indexOf(char[],char[]) -> indexOf
    int lastIndexOf(char[],char) -> lastIndexOf
    int lastIndexOf(char[],char,int,int) -> lastIndexOf
    char min(char[]) -> min
    char max(char[]) -> max
    char constrainToRange(char,char,char) -> constrainToRange
    char[] concat(char[][]) -> concat
    byte[] toByteArray(char) -> toByteArray
    char fromByteArray(byte[]) -> fromByteArray
    char fromBytes(byte,byte) -> fromBytes
    char[] ensureCapacity(char[],int,int) -> ensureCapacity
    java.lang.String join(java.lang.String,char[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    char[] toArray(java.util.Collection) -> toArray
    void sortDescending(char[]) -> sortDescending
    void sortDescending(char[],int,int) -> sortDescending
    void reverse(char[]) -> reverse
    void reverse(char[],int,int) -> reverse
    java.util.List asList(char[]) -> asList
    int access$000(char[],char,int,int) -> access$000
    int access$100(char[],char,int,int) -> access$100
com.google.common.primitives.Chars$CharArrayAsList -> com.google.common.primitives.Chars$CharArrayAsList:
    char[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    void <init>(char[]) -> <init>
    void <init>(char[],int,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Character get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Character set(int,java.lang.Character) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char[] toCharArray() -> toCharArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Chars$LexicographicalComparator -> com.google.common.primitives.Chars$LexicographicalComparator:
    com.google.common.primitives.Chars$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Chars$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Chars$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Chars$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(char[],char[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.Doubles -> com.google.common.primitives.Doubles:
    int BYTES -> BYTES
    java.util.regex.Pattern FLOATING_POINT_PATTERN -> FLOATING_POINT_PATTERN
    void <init>() -> <init>
    int hashCode(double) -> hashCode
    int compare(double,double) -> compare
    boolean isFinite(double) -> isFinite
    boolean contains(double[],double) -> contains
    int indexOf(double[],double) -> indexOf
    int indexOf(double[],double,int,int) -> indexOf
    int indexOf(double[],double[]) -> indexOf
    int lastIndexOf(double[],double) -> lastIndexOf
    int lastIndexOf(double[],double,int,int) -> lastIndexOf
    double min(double[]) -> min
    double max(double[]) -> max
    double constrainToRange(double,double,double) -> constrainToRange
    double[] concat(double[][]) -> concat
    com.google.common.base.Converter stringConverter() -> stringConverter
    double[] ensureCapacity(double[],int,int) -> ensureCapacity
    java.lang.String join(java.lang.String,double[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    void sortDescending(double[]) -> sortDescending
    void sortDescending(double[],int,int) -> sortDescending
    void reverse(double[]) -> reverse
    void reverse(double[],int,int) -> reverse
    double[] toArray(java.util.Collection) -> toArray
    java.util.List asList(double[]) -> asList
    java.util.regex.Pattern fpPattern() -> fpPattern
    java.lang.Double tryParse(java.lang.String) -> tryParse
    int access$000(double[],double,int,int) -> access$000
    int access$100(double[],double,int,int) -> access$100
    void <clinit>() -> <clinit>
com.google.common.primitives.Doubles$DoubleArrayAsList -> com.google.common.primitives.Doubles$DoubleArrayAsList:
    double[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    void <init>(double[]) -> <init>
    void <init>(double[],int,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Double get(int) -> get
    java.util.Spliterator$OfDouble spliterator() -> spliterator
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Double set(int,java.lang.Double) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double[] toDoubleArray() -> toDoubleArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    java.util.Spliterator spliterator() -> spliterator
com.google.common.primitives.Doubles$DoubleConverter -> com.google.common.primitives.Doubles$DoubleConverter:
    com.google.common.primitives.Doubles$DoubleConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Double doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Double) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
    void <clinit>() -> <clinit>
com.google.common.primitives.Doubles$LexicographicalComparator -> com.google.common.primitives.Doubles$LexicographicalComparator:
    com.google.common.primitives.Doubles$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Doubles$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Doubles$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Doubles$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(double[],double[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.Floats -> com.google.common.primitives.Floats:
    int BYTES -> BYTES
    void <init>() -> <init>
    int hashCode(float) -> hashCode
    int compare(float,float) -> compare
    boolean isFinite(float) -> isFinite
    boolean contains(float[],float) -> contains
    int indexOf(float[],float) -> indexOf
    int indexOf(float[],float,int,int) -> indexOf
    int indexOf(float[],float[]) -> indexOf
    int lastIndexOf(float[],float) -> lastIndexOf
    int lastIndexOf(float[],float,int,int) -> lastIndexOf
    float min(float[]) -> min
    float max(float[]) -> max
    float constrainToRange(float,float,float) -> constrainToRange
    float[] concat(float[][]) -> concat
    com.google.common.base.Converter stringConverter() -> stringConverter
    float[] ensureCapacity(float[],int,int) -> ensureCapacity
    java.lang.String join(java.lang.String,float[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    void sortDescending(float[]) -> sortDescending
    void sortDescending(float[],int,int) -> sortDescending
    void reverse(float[]) -> reverse
    void reverse(float[],int,int) -> reverse
    float[] toArray(java.util.Collection) -> toArray
    java.util.List asList(float[]) -> asList
    java.lang.Float tryParse(java.lang.String) -> tryParse
    int access$000(float[],float,int,int) -> access$000
    int access$100(float[],float,int,int) -> access$100
com.google.common.primitives.Floats$FloatArrayAsList -> com.google.common.primitives.Floats$FloatArrayAsList:
    float[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    void <init>(float[]) -> <init>
    void <init>(float[],int,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Float get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Float set(int,java.lang.Float) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float[] toFloatArray() -> toFloatArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Floats$FloatConverter -> com.google.common.primitives.Floats$FloatConverter:
    com.google.common.primitives.Floats$FloatConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Float doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Float) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
    void <clinit>() -> <clinit>
com.google.common.primitives.Floats$LexicographicalComparator -> com.google.common.primitives.Floats$LexicographicalComparator:
    com.google.common.primitives.Floats$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Floats$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Floats$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Floats$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(float[],float[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.ImmutableDoubleArray -> com.google.common.primitives.ImmutableDoubleArray:
    com.google.common.primitives.ImmutableDoubleArray EMPTY -> EMPTY
    double[] array -> array
    int start -> start
    int end -> end
    com.google.common.primitives.ImmutableDoubleArray of() -> of
    com.google.common.primitives.ImmutableDoubleArray of(double) -> of
    com.google.common.primitives.ImmutableDoubleArray of(double,double) -> of
    com.google.common.primitives.ImmutableDoubleArray of(double,double,double) -> of
    com.google.common.primitives.ImmutableDoubleArray of(double,double,double,double) -> of
    com.google.common.primitives.ImmutableDoubleArray of(double,double,double,double,double) -> of
    com.google.common.primitives.ImmutableDoubleArray of(double,double,double,double,double,double) -> of
    com.google.common.primitives.ImmutableDoubleArray of(double,double[]) -> of
    com.google.common.primitives.ImmutableDoubleArray copyOf(double[]) -> copyOf
    com.google.common.primitives.ImmutableDoubleArray copyOf(java.util.Collection) -> copyOf
    com.google.common.primitives.ImmutableDoubleArray copyOf(java.lang.Iterable) -> copyOf
    com.google.common.primitives.ImmutableDoubleArray copyOf(java.util.stream.DoubleStream) -> copyOf
    com.google.common.primitives.ImmutableDoubleArray$Builder builder(int) -> builder
    com.google.common.primitives.ImmutableDoubleArray$Builder builder() -> builder
    void <init>(double[]) -> <init>
    void <init>(double[],int,int) -> <init>
    int length() -> length
    boolean isEmpty() -> isEmpty
    double get(int) -> get
    int indexOf(double) -> indexOf
    int lastIndexOf(double) -> lastIndexOf
    boolean contains(double) -> contains
    void forEach(java.util.function.DoubleConsumer) -> forEach
    java.util.stream.DoubleStream stream() -> stream
    double[] toArray() -> toArray
    com.google.common.primitives.ImmutableDoubleArray subArray(int,int) -> subArray
    java.util.Spliterator$OfDouble spliterator() -> spliterator
    java.util.List asList() -> asList
    boolean equals(java.lang.Object) -> equals
    boolean areEqual(double,double) -> areEqual
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.common.primitives.ImmutableDoubleArray trimmed() -> trimmed
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    java.lang.Object readResolve() -> readResolve
    double[] access$000(com.google.common.primitives.ImmutableDoubleArray) -> access$000
    int access$100(com.google.common.primitives.ImmutableDoubleArray) -> access$100
    com.google.common.primitives.ImmutableDoubleArray access$200() -> access$200
    void <init>(double[],int,int,com.google.common.primitives.ImmutableDoubleArray$1) -> <init>
    java.util.Spliterator$OfDouble access$500(com.google.common.primitives.ImmutableDoubleArray) -> access$500
    boolean access$600(double,double) -> access$600
    void <clinit>() -> <clinit>
com.google.common.primitives.ImmutableDoubleArray$1 -> com.google.common.primitives.ImmutableDoubleArray$1:
com.google.common.primitives.ImmutableDoubleArray$AsList -> com.google.common.primitives.ImmutableDoubleArray$AsList:
    com.google.common.primitives.ImmutableDoubleArray parent -> parent
    void <init>(com.google.common.primitives.ImmutableDoubleArray) -> <init>
    int size() -> size
    java.lang.Double get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.List subList(int,int) -> subList
    java.util.Spliterator spliterator() -> spliterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object get(int) -> get
    void <init>(com.google.common.primitives.ImmutableDoubleArray,com.google.common.primitives.ImmutableDoubleArray$1) -> <init>
com.google.common.primitives.ImmutableDoubleArray$Builder -> com.google.common.primitives.ImmutableDoubleArray$Builder:
    double[] array -> array
    int count -> count
    void <init>(int) -> <init>
    com.google.common.primitives.ImmutableDoubleArray$Builder add(double) -> add
    com.google.common.primitives.ImmutableDoubleArray$Builder addAll(double[]) -> addAll
    com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.util.Collection) -> addAll
    com.google.common.primitives.ImmutableDoubleArray$Builder addAll(java.util.stream.DoubleStream) -> addAll
    com.google.common.primitives.ImmutableDoubleArray$Builder addAll(com.google.common.primitives.ImmutableDoubleArray) -> addAll
    void ensureRoomFor(int) -> ensureRoomFor
    int expandedCapacity(int,int) -> expandedCapacity
    com.google.common.primitives.ImmutableDoubleArray build() -> build
com.google.common.primitives.ImmutableIntArray -> com.google.common.primitives.ImmutableIntArray:
    com.google.common.primitives.ImmutableIntArray EMPTY -> EMPTY
    int[] array -> array
    int start -> start
    int end -> end
    com.google.common.primitives.ImmutableIntArray of() -> of
    com.google.common.primitives.ImmutableIntArray of(int) -> of
    com.google.common.primitives.ImmutableIntArray of(int,int) -> of
    com.google.common.primitives.ImmutableIntArray of(int,int,int) -> of
    com.google.common.primitives.ImmutableIntArray of(int,int,int,int) -> of
    com.google.common.primitives.ImmutableIntArray of(int,int,int,int,int) -> of
    com.google.common.primitives.ImmutableIntArray of(int,int,int,int,int,int) -> of
    com.google.common.primitives.ImmutableIntArray of(int,int[]) -> of
    com.google.common.primitives.ImmutableIntArray copyOf(int[]) -> copyOf
    com.google.common.primitives.ImmutableIntArray copyOf(java.util.Collection) -> copyOf
    com.google.common.primitives.ImmutableIntArray copyOf(java.lang.Iterable) -> copyOf
    com.google.common.primitives.ImmutableIntArray copyOf(java.util.stream.IntStream) -> copyOf
    com.google.common.primitives.ImmutableIntArray$Builder builder(int) -> builder
    com.google.common.primitives.ImmutableIntArray$Builder builder() -> builder
    void <init>(int[]) -> <init>
    void <init>(int[],int,int) -> <init>
    int length() -> length
    boolean isEmpty() -> isEmpty
    int get(int) -> get
    int indexOf(int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    boolean contains(int) -> contains
    void forEach(java.util.function.IntConsumer) -> forEach
    java.util.stream.IntStream stream() -> stream
    int[] toArray() -> toArray
    com.google.common.primitives.ImmutableIntArray subArray(int,int) -> subArray
    java.util.Spliterator$OfInt spliterator() -> spliterator
    java.util.List asList() -> asList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.common.primitives.ImmutableIntArray trimmed() -> trimmed
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    java.lang.Object readResolve() -> readResolve
    int[] access$000(com.google.common.primitives.ImmutableIntArray) -> access$000
    int access$100(com.google.common.primitives.ImmutableIntArray) -> access$100
    com.google.common.primitives.ImmutableIntArray access$200() -> access$200
    void <init>(int[],int,int,com.google.common.primitives.ImmutableIntArray$1) -> <init>
    java.util.Spliterator$OfInt access$500(com.google.common.primitives.ImmutableIntArray) -> access$500
    void <clinit>() -> <clinit>
com.google.common.primitives.ImmutableIntArray$1 -> com.google.common.primitives.ImmutableIntArray$1:
com.google.common.primitives.ImmutableIntArray$AsList -> com.google.common.primitives.ImmutableIntArray$AsList:
    com.google.common.primitives.ImmutableIntArray parent -> parent
    void <init>(com.google.common.primitives.ImmutableIntArray) -> <init>
    int size() -> size
    java.lang.Integer get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.List subList(int,int) -> subList
    java.util.Spliterator spliterator() -> spliterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object get(int) -> get
    void <init>(com.google.common.primitives.ImmutableIntArray,com.google.common.primitives.ImmutableIntArray$1) -> <init>
com.google.common.primitives.ImmutableIntArray$Builder -> com.google.common.primitives.ImmutableIntArray$Builder:
    int[] array -> array
    int count -> count
    void <init>(int) -> <init>
    com.google.common.primitives.ImmutableIntArray$Builder add(int) -> add
    com.google.common.primitives.ImmutableIntArray$Builder addAll(int[]) -> addAll
    com.google.common.primitives.ImmutableIntArray$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.primitives.ImmutableIntArray$Builder addAll(java.util.Collection) -> addAll
    com.google.common.primitives.ImmutableIntArray$Builder addAll(java.util.stream.IntStream) -> addAll
    com.google.common.primitives.ImmutableIntArray$Builder addAll(com.google.common.primitives.ImmutableIntArray) -> addAll
    void ensureRoomFor(int) -> ensureRoomFor
    int expandedCapacity(int,int) -> expandedCapacity
    com.google.common.primitives.ImmutableIntArray build() -> build
com.google.common.primitives.ImmutableLongArray -> com.google.common.primitives.ImmutableLongArray:
    com.google.common.primitives.ImmutableLongArray EMPTY -> EMPTY
    long[] array -> array
    int start -> start
    int end -> end
    com.google.common.primitives.ImmutableLongArray of() -> of
    com.google.common.primitives.ImmutableLongArray of(long) -> of
    com.google.common.primitives.ImmutableLongArray of(long,long) -> of
    com.google.common.primitives.ImmutableLongArray of(long,long,long) -> of
    com.google.common.primitives.ImmutableLongArray of(long,long,long,long) -> of
    com.google.common.primitives.ImmutableLongArray of(long,long,long,long,long) -> of
    com.google.common.primitives.ImmutableLongArray of(long,long,long,long,long,long) -> of
    com.google.common.primitives.ImmutableLongArray of(long,long[]) -> of
    com.google.common.primitives.ImmutableLongArray copyOf(long[]) -> copyOf
    com.google.common.primitives.ImmutableLongArray copyOf(java.util.Collection) -> copyOf
    com.google.common.primitives.ImmutableLongArray copyOf(java.lang.Iterable) -> copyOf
    com.google.common.primitives.ImmutableLongArray copyOf(java.util.stream.LongStream) -> copyOf
    com.google.common.primitives.ImmutableLongArray$Builder builder(int) -> builder
    com.google.common.primitives.ImmutableLongArray$Builder builder() -> builder
    void <init>(long[]) -> <init>
    void <init>(long[],int,int) -> <init>
    int length() -> length
    boolean isEmpty() -> isEmpty
    long get(int) -> get
    int indexOf(long) -> indexOf
    int lastIndexOf(long) -> lastIndexOf
    boolean contains(long) -> contains
    void forEach(java.util.function.LongConsumer) -> forEach
    java.util.stream.LongStream stream() -> stream
    long[] toArray() -> toArray
    com.google.common.primitives.ImmutableLongArray subArray(int,int) -> subArray
    java.util.Spliterator$OfLong spliterator() -> spliterator
    java.util.List asList() -> asList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.common.primitives.ImmutableLongArray trimmed() -> trimmed
    boolean isPartialView() -> isPartialView
    java.lang.Object writeReplace() -> writeReplace
    java.lang.Object readResolve() -> readResolve
    long[] access$000(com.google.common.primitives.ImmutableLongArray) -> access$000
    int access$100(com.google.common.primitives.ImmutableLongArray) -> access$100
    com.google.common.primitives.ImmutableLongArray access$200() -> access$200
    void <init>(long[],int,int,com.google.common.primitives.ImmutableLongArray$1) -> <init>
    java.util.Spliterator$OfLong access$500(com.google.common.primitives.ImmutableLongArray) -> access$500
    void <clinit>() -> <clinit>
com.google.common.primitives.ImmutableLongArray$1 -> com.google.common.primitives.ImmutableLongArray$1:
com.google.common.primitives.ImmutableLongArray$AsList -> com.google.common.primitives.ImmutableLongArray$AsList:
    com.google.common.primitives.ImmutableLongArray parent -> parent
    void <init>(com.google.common.primitives.ImmutableLongArray) -> <init>
    int size() -> size
    java.lang.Long get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.List subList(int,int) -> subList
    java.util.Spliterator spliterator() -> spliterator
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object get(int) -> get
    void <init>(com.google.common.primitives.ImmutableLongArray,com.google.common.primitives.ImmutableLongArray$1) -> <init>
com.google.common.primitives.ImmutableLongArray$Builder -> com.google.common.primitives.ImmutableLongArray$Builder:
    long[] array -> array
    int count -> count
    void <init>(int) -> <init>
    com.google.common.primitives.ImmutableLongArray$Builder add(long) -> add
    com.google.common.primitives.ImmutableLongArray$Builder addAll(long[]) -> addAll
    com.google.common.primitives.ImmutableLongArray$Builder addAll(java.lang.Iterable) -> addAll
    com.google.common.primitives.ImmutableLongArray$Builder addAll(java.util.Collection) -> addAll
    com.google.common.primitives.ImmutableLongArray$Builder addAll(java.util.stream.LongStream) -> addAll
    com.google.common.primitives.ImmutableLongArray$Builder addAll(com.google.common.primitives.ImmutableLongArray) -> addAll
    void ensureRoomFor(int) -> ensureRoomFor
    int expandedCapacity(int,int) -> expandedCapacity
    com.google.common.primitives.ImmutableLongArray build() -> build
com.google.common.primitives.Ints -> com.google.common.primitives.Ints:
    int BYTES -> BYTES
    int MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    void <init>() -> <init>
    int hashCode(int) -> hashCode
    int checkedCast(long) -> checkedCast
    int saturatedCast(long) -> saturatedCast
    int compare(int,int) -> compare
    boolean contains(int[],int) -> contains
    int indexOf(int[],int) -> indexOf
    int indexOf(int[],int,int,int) -> indexOf
    int indexOf(int[],int[]) -> indexOf
    int lastIndexOf(int[],int) -> lastIndexOf
    int lastIndexOf(int[],int,int,int) -> lastIndexOf
    int min(int[]) -> min
    int max(int[]) -> max
    int constrainToRange(int,int,int) -> constrainToRange
    int[] concat(int[][]) -> concat
    byte[] toByteArray(int) -> toByteArray
    int fromByteArray(byte[]) -> fromByteArray
    int fromBytes(byte,byte,byte,byte) -> fromBytes
    com.google.common.base.Converter stringConverter() -> stringConverter
    int[] ensureCapacity(int[],int,int) -> ensureCapacity
    java.lang.String join(java.lang.String,int[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    void sortDescending(int[]) -> sortDescending
    void sortDescending(int[],int,int) -> sortDescending
    void reverse(int[]) -> reverse
    void reverse(int[],int,int) -> reverse
    int[] toArray(java.util.Collection) -> toArray
    java.util.List asList(int[]) -> asList
    java.lang.Integer tryParse(java.lang.String) -> tryParse
    java.lang.Integer tryParse(java.lang.String,int) -> tryParse
    int access$000(int[],int,int,int) -> access$000
    int access$100(int[],int,int,int) -> access$100
com.google.common.primitives.Ints$IntArrayAsList -> com.google.common.primitives.Ints$IntArrayAsList:
    int[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    void <init>(int[]) -> <init>
    void <init>(int[],int,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Integer get(int) -> get
    java.util.Spliterator$OfInt spliterator() -> spliterator
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Integer set(int,java.lang.Integer) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int[] toIntArray() -> toIntArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    java.util.Spliterator spliterator() -> spliterator
com.google.common.primitives.Ints$IntConverter -> com.google.common.primitives.Ints$IntConverter:
    com.google.common.primitives.Ints$IntConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Integer doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Integer) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
    void <clinit>() -> <clinit>
com.google.common.primitives.Ints$LexicographicalComparator -> com.google.common.primitives.Ints$LexicographicalComparator:
    com.google.common.primitives.Ints$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Ints$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Ints$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Ints$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(int[],int[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.Longs -> com.google.common.primitives.Longs:
    int BYTES -> BYTES
    long MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    void <init>() -> <init>
    int hashCode(long) -> hashCode
    int compare(long,long) -> compare
    boolean contains(long[],long) -> contains
    int indexOf(long[],long) -> indexOf
    int indexOf(long[],long,int,int) -> indexOf
    int indexOf(long[],long[]) -> indexOf
    int lastIndexOf(long[],long) -> lastIndexOf
    int lastIndexOf(long[],long,int,int) -> lastIndexOf
    long min(long[]) -> min
    long max(long[]) -> max
    long constrainToRange(long,long,long) -> constrainToRange
    long[] concat(long[][]) -> concat
    byte[] toByteArray(long) -> toByteArray
    long fromByteArray(byte[]) -> fromByteArray
    long fromBytes(byte,byte,byte,byte,byte,byte,byte,byte) -> fromBytes
    java.lang.Long tryParse(java.lang.String) -> tryParse
    java.lang.Long tryParse(java.lang.String,int) -> tryParse
    com.google.common.base.Converter stringConverter() -> stringConverter
    long[] ensureCapacity(long[],int,int) -> ensureCapacity
    java.lang.String join(java.lang.String,long[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    void sortDescending(long[]) -> sortDescending
    void sortDescending(long[],int,int) -> sortDescending
    void reverse(long[]) -> reverse
    void reverse(long[],int,int) -> reverse
    long[] toArray(java.util.Collection) -> toArray
    java.util.List asList(long[]) -> asList
    int access$000(long[],long,int,int) -> access$000
    int access$100(long[],long,int,int) -> access$100
com.google.common.primitives.Longs$AsciiDigits -> com.google.common.primitives.Longs$AsciiDigits:
    byte[] asciiDigits -> asciiDigits
    void <init>() -> <init>
    int digit(char) -> digit
    void <clinit>() -> <clinit>
com.google.common.primitives.Longs$LexicographicalComparator -> com.google.common.primitives.Longs$LexicographicalComparator:
    com.google.common.primitives.Longs$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Longs$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Longs$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Longs$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(long[],long[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.Longs$LongArrayAsList -> com.google.common.primitives.Longs$LongArrayAsList:
    long[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    void <init>(long[]) -> <init>
    void <init>(long[],int,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Long get(int) -> get
    java.util.Spliterator$OfLong spliterator() -> spliterator
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Long set(int,java.lang.Long) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long[] toLongArray() -> toLongArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    java.util.Spliterator spliterator() -> spliterator
com.google.common.primitives.Longs$LongConverter -> com.google.common.primitives.Longs$LongConverter:
    com.google.common.primitives.Longs$LongConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Long doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Long) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
    void <clinit>() -> <clinit>
com.google.common.primitives.ParseRequest -> com.google.common.primitives.ParseRequest:
    java.lang.String rawValue -> rawValue
    int radix -> radix
    void <init>(java.lang.String,int) -> <init>
    com.google.common.primitives.ParseRequest fromString(java.lang.String) -> fromString
com.google.common.primitives.Primitives -> com.google.common.primitives.Primitives:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> PRIMITIVE_TO_WRAPPER_TYPE
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> WRAPPER_TO_PRIMITIVE_TYPE
    void <init>() -> <init>
    void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> add
    java.util.Set allPrimitiveTypes() -> allPrimitiveTypes
    java.util.Set allWrapperTypes() -> allWrapperTypes
    boolean isWrapperType(java.lang.Class) -> isWrapperType
    java.lang.Class wrap(java.lang.Class) -> wrap
    java.lang.Class unwrap(java.lang.Class) -> unwrap
    void <clinit>() -> <clinit>
com.google.common.primitives.Shorts -> com.google.common.primitives.Shorts:
    int BYTES -> BYTES
    short MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    void <init>() -> <init>
    int hashCode(short) -> hashCode
    short checkedCast(long) -> checkedCast
    short saturatedCast(long) -> saturatedCast
    int compare(short,short) -> compare
    boolean contains(short[],short) -> contains
    int indexOf(short[],short) -> indexOf
    int indexOf(short[],short,int,int) -> indexOf
    int indexOf(short[],short[]) -> indexOf
    int lastIndexOf(short[],short) -> lastIndexOf
    int lastIndexOf(short[],short,int,int) -> lastIndexOf
    short min(short[]) -> min
    short max(short[]) -> max
    short constrainToRange(short,short,short) -> constrainToRange
    short[] concat(short[][]) -> concat
    byte[] toByteArray(short) -> toByteArray
    short fromByteArray(byte[]) -> fromByteArray
    short fromBytes(byte,byte) -> fromBytes
    com.google.common.base.Converter stringConverter() -> stringConverter
    short[] ensureCapacity(short[],int,int) -> ensureCapacity
    java.lang.String join(java.lang.String,short[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    void sortDescending(short[]) -> sortDescending
    void sortDescending(short[],int,int) -> sortDescending
    void reverse(short[]) -> reverse
    void reverse(short[],int,int) -> reverse
    short[] toArray(java.util.Collection) -> toArray
    java.util.List asList(short[]) -> asList
    int access$000(short[],short,int,int) -> access$000
    int access$100(short[],short,int,int) -> access$100
com.google.common.primitives.Shorts$LexicographicalComparator -> com.google.common.primitives.Shorts$LexicographicalComparator:
    com.google.common.primitives.Shorts$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.Shorts$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.Shorts$LexicographicalComparator[] values() -> values
    com.google.common.primitives.Shorts$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(short[],short[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.Shorts$ShortArrayAsList -> com.google.common.primitives.Shorts$ShortArrayAsList:
    short[] array -> array
    int start -> start
    int end -> end
    long serialVersionUID -> serialVersionUID
    void <init>(short[]) -> <init>
    void <init>(short[],int,int) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.lang.Short get(int) -> get
    boolean contains(java.lang.Object) -> contains
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.lang.Short set(int,java.lang.Short) -> set
    java.util.List subList(int,int) -> subList
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short[] toShortArray() -> toShortArray
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.common.primitives.Shorts$ShortConverter -> com.google.common.primitives.Shorts$ShortConverter:
    com.google.common.primitives.Shorts$ShortConverter INSTANCE -> INSTANCE
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Short doForward(java.lang.String) -> doForward
    java.lang.String doBackward(java.lang.Short) -> doBackward
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
    java.lang.Object doBackward(java.lang.Object) -> doBackward
    java.lang.Object doForward(java.lang.Object) -> doForward
    void <clinit>() -> <clinit>
com.google.common.primitives.SignedBytes -> com.google.common.primitives.SignedBytes:
    byte MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    void <init>() -> <init>
    byte checkedCast(long) -> checkedCast
    byte saturatedCast(long) -> saturatedCast
    int compare(byte,byte) -> compare
    byte min(byte[]) -> min
    byte max(byte[]) -> max
    java.lang.String join(java.lang.String,byte[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    void sortDescending(byte[]) -> sortDescending
    void sortDescending(byte[],int,int) -> sortDescending
com.google.common.primitives.SignedBytes$LexicographicalComparator -> com.google.common.primitives.SignedBytes$LexicographicalComparator:
    com.google.common.primitives.SignedBytes$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.SignedBytes$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.SignedBytes$LexicographicalComparator[] values() -> values
    com.google.common.primitives.SignedBytes$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(byte[],byte[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedBytes -> com.google.common.primitives.UnsignedBytes:
    byte MAX_POWER_OF_TWO -> MAX_POWER_OF_TWO
    byte MAX_VALUE -> MAX_VALUE
    int UNSIGNED_MASK -> UNSIGNED_MASK
    void <init>() -> <init>
    int toInt(byte) -> toInt
    byte checkedCast(long) -> checkedCast
    byte saturatedCast(long) -> saturatedCast
    int compare(byte,byte) -> compare
    byte min(byte[]) -> min
    byte max(byte[]) -> max
    java.lang.String toString(byte) -> toString
    java.lang.String toString(byte,int) -> toString
    byte parseUnsignedByte(java.lang.String) -> parseUnsignedByte
    byte parseUnsignedByte(java.lang.String,int) -> parseUnsignedByte
    java.lang.String join(java.lang.String,byte[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    java.util.Comparator lexicographicalComparatorJavaImpl() -> lexicographicalComparatorJavaImpl
    byte flip(byte) -> flip
    void sort(byte[]) -> sort
    void sort(byte[],int,int) -> sort
    void sortDescending(byte[]) -> sortDescending
    void sortDescending(byte[],int,int) -> sortDescending
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder -> com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder:
    java.lang.String UNSAFE_COMPARATOR_NAME -> UNSAFE_COMPARATOR_NAME
    java.util.Comparator BEST_COMPARATOR -> BEST_COMPARATOR
    void <init>() -> <init>
    java.util.Comparator getBestComparator() -> getBestComparator
    void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator -> com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator:
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator INSTANCE -> INSTANCE
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] $VALUES -> $VALUES
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[] values() -> values
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(byte[],byte[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator -> com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator INSTANCE -> INSTANCE
    boolean BIG_ENDIAN -> BIG_ENDIAN
    sun.misc.Unsafe theUnsafe -> theUnsafe
    int BYTE_ARRAY_BASE_OFFSET -> BYTE_ARRAY_BASE_OFFSET
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[] $VALUES -> $VALUES
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[] values() -> values
    com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    sun.misc.Unsafe getUnsafe() -> getUnsafe
    int compare(byte[],byte[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1 -> com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1:
    void <init>() -> <init>
    sun.misc.Unsafe run() -> run
    java.lang.Object run() -> run
com.google.common.primitives.UnsignedInteger -> com.google.common.primitives.UnsignedInteger:
    com.google.common.primitives.UnsignedInteger ZERO -> ZERO
    com.google.common.primitives.UnsignedInteger ONE -> ONE
    com.google.common.primitives.UnsignedInteger MAX_VALUE -> MAX_VALUE
    int value -> value
    void <init>(int) -> <init>
    com.google.common.primitives.UnsignedInteger fromIntBits(int) -> fromIntBits
    com.google.common.primitives.UnsignedInteger valueOf(long) -> valueOf
    com.google.common.primitives.UnsignedInteger valueOf(java.math.BigInteger) -> valueOf
    com.google.common.primitives.UnsignedInteger valueOf(java.lang.String) -> valueOf
    com.google.common.primitives.UnsignedInteger valueOf(java.lang.String,int) -> valueOf
    com.google.common.primitives.UnsignedInteger plus(com.google.common.primitives.UnsignedInteger) -> plus
    com.google.common.primitives.UnsignedInteger minus(com.google.common.primitives.UnsignedInteger) -> minus
    com.google.common.primitives.UnsignedInteger times(com.google.common.primitives.UnsignedInteger) -> times
    com.google.common.primitives.UnsignedInteger dividedBy(com.google.common.primitives.UnsignedInteger) -> dividedBy
    com.google.common.primitives.UnsignedInteger mod(com.google.common.primitives.UnsignedInteger) -> mod
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.math.BigInteger bigIntegerValue() -> bigIntegerValue
    int compareTo(com.google.common.primitives.UnsignedInteger) -> compareTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedInts -> com.google.common.primitives.UnsignedInts:
    long INT_MASK -> INT_MASK
    void <init>() -> <init>
    int flip(int) -> flip
    int compare(int,int) -> compare
    long toLong(int) -> toLong
    int checkedCast(long) -> checkedCast
    int saturatedCast(long) -> saturatedCast
    int min(int[]) -> min
    int max(int[]) -> max
    java.lang.String join(java.lang.String,int[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    void sort(int[]) -> sort
    void sort(int[],int,int) -> sort
    void sortDescending(int[]) -> sortDescending
    void sortDescending(int[],int,int) -> sortDescending
    int divide(int,int) -> divide
    int remainder(int,int) -> remainder
    int decode(java.lang.String) -> decode
    int parseUnsignedInt(java.lang.String) -> parseUnsignedInt
    int parseUnsignedInt(java.lang.String,int) -> parseUnsignedInt
    java.lang.String toString(int) -> toString
    java.lang.String toString(int,int) -> toString
com.google.common.primitives.UnsignedInts$LexicographicalComparator -> com.google.common.primitives.UnsignedInts$LexicographicalComparator:
    com.google.common.primitives.UnsignedInts$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.UnsignedInts$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.UnsignedInts$LexicographicalComparator[] values() -> values
    com.google.common.primitives.UnsignedInts$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(int[],int[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedLong -> com.google.common.primitives.UnsignedLong:
    long UNSIGNED_MASK -> UNSIGNED_MASK
    com.google.common.primitives.UnsignedLong ZERO -> ZERO
    com.google.common.primitives.UnsignedLong ONE -> ONE
    com.google.common.primitives.UnsignedLong MAX_VALUE -> MAX_VALUE
    long value -> value
    void <init>(long) -> <init>
    com.google.common.primitives.UnsignedLong fromLongBits(long) -> fromLongBits
    com.google.common.primitives.UnsignedLong valueOf(long) -> valueOf
    com.google.common.primitives.UnsignedLong valueOf(java.math.BigInteger) -> valueOf
    com.google.common.primitives.UnsignedLong valueOf(java.lang.String) -> valueOf
    com.google.common.primitives.UnsignedLong valueOf(java.lang.String,int) -> valueOf
    com.google.common.primitives.UnsignedLong plus(com.google.common.primitives.UnsignedLong) -> plus
    com.google.common.primitives.UnsignedLong minus(com.google.common.primitives.UnsignedLong) -> minus
    com.google.common.primitives.UnsignedLong times(com.google.common.primitives.UnsignedLong) -> times
    com.google.common.primitives.UnsignedLong dividedBy(com.google.common.primitives.UnsignedLong) -> dividedBy
    com.google.common.primitives.UnsignedLong mod(com.google.common.primitives.UnsignedLong) -> mod
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.math.BigInteger bigIntegerValue() -> bigIntegerValue
    int compareTo(com.google.common.primitives.UnsignedLong) -> compareTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedLongs -> com.google.common.primitives.UnsignedLongs:
    long MAX_VALUE -> MAX_VALUE
    void <init>() -> <init>
    long flip(long) -> flip
    int compare(long,long) -> compare
    long min(long[]) -> min
    long max(long[]) -> max
    java.lang.String join(java.lang.String,long[]) -> join
    java.util.Comparator lexicographicalComparator() -> lexicographicalComparator
    void sort(long[]) -> sort
    void sort(long[],int,int) -> sort
    void sortDescending(long[]) -> sortDescending
    void sortDescending(long[],int,int) -> sortDescending
    long divide(long,long) -> divide
    long remainder(long,long) -> remainder
    long parseUnsignedLong(java.lang.String) -> parseUnsignedLong
    long parseUnsignedLong(java.lang.String,int) -> parseUnsignedLong
    long decode(java.lang.String) -> decode
    java.lang.String toString(long) -> toString
    java.lang.String toString(long,int) -> toString
com.google.common.primitives.UnsignedLongs$LexicographicalComparator -> com.google.common.primitives.UnsignedLongs$LexicographicalComparator:
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator INSTANCE -> INSTANCE
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator[] $VALUES -> $VALUES
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator[] values() -> values
    com.google.common.primitives.UnsignedLongs$LexicographicalComparator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    int compare(long[],long[]) -> compare
    java.lang.String toString() -> toString
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.google.common.primitives.UnsignedLongs$ParseOverflowDetection -> com.google.common.primitives.UnsignedLongs$ParseOverflowDetection:
    long[] maxValueDivs -> maxValueDivs
    int[] maxValueMods -> maxValueMods
    int[] maxSafeDigits -> maxSafeDigits
    void <init>() -> <init>
    boolean overflowInParse(long,int,int) -> overflowInParse
    void <clinit>() -> <clinit>
com.google.common.primitives.package-info -> com.google.common.primitives.package-info:
com.google.common.reflect.AbstractInvocationHandler -> com.google.common.reflect.AbstractInvocationHandler:
    java.lang.Object[] NO_ARGS -> NO_ARGS
    void <init>() -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    java.lang.Object handleInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> handleInvocation
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isProxyOfSameInterfaces(java.lang.Object,java.lang.Class) -> isProxyOfSameInterfaces
    void <clinit>() -> <clinit>
com.google.common.reflect.ClassPath -> com.google.common.reflect.ClassPath:
    java.util.logging.Logger logger -> logger
    com.google.common.base.Predicate IS_TOP_LEVEL -> IS_TOP_LEVEL
    com.google.common.base.Splitter CLASS_PATH_ATTRIBUTE_SEPARATOR -> CLASS_PATH_ATTRIBUTE_SEPARATOR
    java.lang.String CLASS_FILE_NAME_EXTENSION -> CLASS_FILE_NAME_EXTENSION
    com.google.common.collect.ImmutableSet resources -> resources
    void <init>(com.google.common.collect.ImmutableSet) -> <init>
    com.google.common.reflect.ClassPath from(java.lang.ClassLoader) -> from
    com.google.common.collect.ImmutableSet getResources() -> getResources
    com.google.common.collect.ImmutableSet getAllClasses() -> getAllClasses
    com.google.common.collect.ImmutableSet getTopLevelClasses() -> getTopLevelClasses
    com.google.common.collect.ImmutableSet getTopLevelClasses(java.lang.String) -> getTopLevelClasses
    com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String) -> getTopLevelClassesRecursive
    java.lang.String getClassName(java.lang.String) -> getClassName
    java.io.File toFile(java.net.URL) -> toFile
    java.util.logging.Logger access$100() -> access$100
    com.google.common.base.Splitter access$200() -> access$200
    void <clinit>() -> <clinit>
com.google.common.reflect.ClassPath$1 -> com.google.common.reflect.ClassPath$1:
    void <init>() -> <init>
    boolean apply(com.google.common.reflect.ClassPath$ClassInfo) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.reflect.ClassPath$ClassInfo -> com.google.common.reflect.ClassPath$ClassInfo:
    java.lang.String className -> className
    void <init>(java.lang.String,java.lang.ClassLoader) -> <init>
    java.lang.String getPackageName() -> getPackageName
    java.lang.String getSimpleName() -> getSimpleName
    java.lang.String getName() -> getName
    java.lang.Class load() -> load
    java.lang.String toString() -> toString
    java.lang.String access$000(com.google.common.reflect.ClassPath$ClassInfo) -> access$000
com.google.common.reflect.ClassPath$DefaultScanner -> com.google.common.reflect.ClassPath$DefaultScanner:
    com.google.common.collect.SetMultimap resources -> resources
    void <init>() -> <init>
    com.google.common.collect.ImmutableSet getResources() -> getResources
    void scanJarFile(java.lang.ClassLoader,java.util.jar.JarFile) -> scanJarFile
    void scanDirectory(java.lang.ClassLoader,java.io.File) -> scanDirectory
    void scanDirectory(java.io.File,java.lang.ClassLoader,java.lang.String,java.util.Set) -> scanDirectory
com.google.common.reflect.ClassPath$ResourceInfo -> com.google.common.reflect.ClassPath$ResourceInfo:
    java.lang.String resourceName -> resourceName
    java.lang.ClassLoader loader -> loader
    com.google.common.reflect.ClassPath$ResourceInfo of(java.lang.String,java.lang.ClassLoader) -> of
    void <init>(java.lang.String,java.lang.ClassLoader) -> <init>
    java.net.URL url() -> url
    com.google.common.io.ByteSource asByteSource() -> asByteSource
    com.google.common.io.CharSource asCharSource(java.nio.charset.Charset) -> asCharSource
    java.lang.String getResourceName() -> getResourceName
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.reflect.ClassPath$Scanner -> com.google.common.reflect.ClassPath$Scanner:
    java.util.Set scannedUris -> scannedUris
    void <init>() -> <init>
    void scan(java.lang.ClassLoader) -> scan
    void scan(java.io.File,java.lang.ClassLoader) -> scan
    void scanDirectory(java.lang.ClassLoader,java.io.File) -> scanDirectory
    void scanJarFile(java.lang.ClassLoader,java.util.jar.JarFile) -> scanJarFile
    void scanFrom(java.io.File,java.lang.ClassLoader) -> scanFrom
    void scanJar(java.io.File,java.lang.ClassLoader) -> scanJar
    com.google.common.collect.ImmutableSet getClassPathFromManifest(java.io.File,java.util.jar.Manifest) -> getClassPathFromManifest
    com.google.common.collect.ImmutableMap getClassPathEntries(java.lang.ClassLoader) -> getClassPathEntries
    com.google.common.collect.ImmutableList getClassLoaderUrls(java.lang.ClassLoader) -> getClassLoaderUrls
    com.google.common.collect.ImmutableList parseJavaClassPath() -> parseJavaClassPath
    java.net.URL getClassPathEntry(java.io.File,java.lang.String) -> getClassPathEntry
com.google.common.reflect.Element -> com.google.common.reflect.Element:
    java.lang.reflect.AccessibleObject accessibleObject -> accessibleObject
    java.lang.reflect.Member member -> member
    void <init>(java.lang.reflect.AccessibleObject) -> <init>
    com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    boolean isAnnotationPresent(java.lang.Class) -> isAnnotationPresent
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.annotation.Annotation[] getAnnotations() -> getAnnotations
    java.lang.annotation.Annotation[] getDeclaredAnnotations() -> getDeclaredAnnotations
    void setAccessible(boolean) -> setAccessible
    boolean isAccessible() -> isAccessible
    java.lang.Class getDeclaringClass() -> getDeclaringClass
    java.lang.String getName() -> getName
    int getModifiers() -> getModifiers
    boolean isSynthetic() -> isSynthetic
    boolean isPublic() -> isPublic
    boolean isProtected() -> isProtected
    boolean isPackagePrivate() -> isPackagePrivate
    boolean isPrivate() -> isPrivate
    boolean isStatic() -> isStatic
    boolean isFinal() -> isFinal
    boolean isAbstract() -> isAbstract
    boolean isNative() -> isNative
    boolean isSynchronized() -> isSynchronized
    boolean isVolatile() -> isVolatile
    boolean isTransient() -> isTransient
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.reflect.ImmutableTypeToInstanceMap -> com.google.common.reflect.ImmutableTypeToInstanceMap:
    com.google.common.collect.ImmutableMap delegate -> delegate
    com.google.common.reflect.ImmutableTypeToInstanceMap of() -> of
    com.google.common.reflect.ImmutableTypeToInstanceMap$Builder builder() -> builder
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    java.lang.Object getInstance(com.google.common.reflect.TypeToken) -> getInstance
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object) -> putInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object put(com.google.common.reflect.TypeToken,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.util.Map delegate() -> delegate
    java.lang.Object trustedGet(com.google.common.reflect.TypeToken) -> trustedGet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.collect.ImmutableMap,com.google.common.reflect.ImmutableTypeToInstanceMap$1) -> <init>
com.google.common.reflect.ImmutableTypeToInstanceMap$1 -> com.google.common.reflect.ImmutableTypeToInstanceMap$1:
com.google.common.reflect.ImmutableTypeToInstanceMap$Builder -> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:
    com.google.common.collect.ImmutableMap$Builder mapBuilder -> mapBuilder
    void <init>() -> <init>
    com.google.common.reflect.ImmutableTypeToInstanceMap$Builder put(java.lang.Class,java.lang.Object) -> put
    com.google.common.reflect.ImmutableTypeToInstanceMap$Builder put(com.google.common.reflect.TypeToken,java.lang.Object) -> put
    com.google.common.reflect.ImmutableTypeToInstanceMap build() -> build
    void <init>(com.google.common.reflect.ImmutableTypeToInstanceMap$1) -> <init>
com.google.common.reflect.Invokable -> com.google.common.reflect.Invokable:
    void <init>(java.lang.reflect.AccessibleObject) -> <init>
    com.google.common.reflect.Invokable from(java.lang.reflect.Method) -> from
    com.google.common.reflect.Invokable from(java.lang.reflect.Constructor) -> from
    boolean isOverridable() -> isOverridable
    boolean isVarArgs() -> isVarArgs
    java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> invoke
    com.google.common.reflect.TypeToken getReturnType() -> getReturnType
    com.google.common.collect.ImmutableList getParameters() -> getParameters
    com.google.common.collect.ImmutableList getExceptionTypes() -> getExceptionTypes
    com.google.common.reflect.Invokable returning(java.lang.Class) -> returning
    com.google.common.reflect.Invokable returning(com.google.common.reflect.TypeToken) -> returning
    java.lang.Class getDeclaringClass() -> getDeclaringClass
    com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> invokeInternal
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes() -> getAnnotatedParameterTypes
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> getParameterAnnotations
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.reflect.AnnotatedType getAnnotatedReturnType() -> getAnnotatedReturnType
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Invokable$ConstructorInvokable -> com.google.common.reflect.Invokable$ConstructorInvokable:
    java.lang.reflect.Constructor constructor -> constructor
    void <init>(java.lang.reflect.Constructor) -> <init>
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> invokeInternal
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes() -> getAnnotatedParameterTypes
    java.lang.reflect.AnnotatedType getAnnotatedReturnType() -> getAnnotatedReturnType
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> getParameterAnnotations
    java.lang.reflect.TypeVariable[] getTypeParameters() -> getTypeParameters
    boolean isOverridable() -> isOverridable
    boolean isVarArgs() -> isVarArgs
    boolean mayNeedHiddenThis() -> mayNeedHiddenThis
com.google.common.reflect.Invokable$MethodInvokable -> com.google.common.reflect.Invokable$MethodInvokable:
    java.lang.reflect.Method method -> method
    void <init>(java.lang.reflect.Method) -> <init>
    java.lang.Object invokeInternal(java.lang.Object,java.lang.Object[]) -> invokeInternal
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes() -> getAnnotatedParameterTypes
    java.lang.reflect.AnnotatedType getAnnotatedReturnType() -> getAnnotatedReturnType
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    java.lang.annotation.Annotation[][] getParameterAnnotations() -> getParameterAnnotations
    java.lang.reflect.TypeVariable[] getTypeParameters() -> getTypeParameters
    boolean isOverridable() -> isOverridable
    boolean isVarArgs() -> isVarArgs
com.google.common.reflect.MutableTypeToInstanceMap -> com.google.common.reflect.MutableTypeToInstanceMap:
    java.util.Map backingMap -> backingMap
    void <init>() -> <init>
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object getInstance(com.google.common.reflect.TypeToken) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object) -> putInstance
    java.lang.Object put(com.google.common.reflect.TypeToken,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.util.Set entrySet() -> entrySet
    java.util.Map delegate() -> delegate
    java.lang.Object trustedPut(com.google.common.reflect.TypeToken,java.lang.Object) -> trustedPut
    java.lang.Object trustedGet(com.google.common.reflect.TypeToken) -> trustedGet
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object delegate() -> delegate
com.google.common.reflect.MutableTypeToInstanceMap$1 -> com.google.common.reflect.MutableTypeToInstanceMap$1:
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry -> com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:
    java.util.Map$Entry delegate -> delegate
    java.util.Set transformEntries(java.util.Set) -> transformEntries
    java.util.Iterator transformEntries(java.util.Iterator) -> transformEntries
    void <init>(java.util.Map$Entry) -> <init>
    java.util.Map$Entry delegate() -> delegate
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object delegate() -> delegate
    java.util.Iterator access$000(java.util.Iterator) -> access$000
    void <init>(java.util.Map$Entry,com.google.common.reflect.MutableTypeToInstanceMap$1) -> <init>
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1 -> com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1:
    java.util.Set val$entries -> val$entries
    void <init>(java.util.Set) -> <init>
    java.util.Set delegate() -> delegate
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2 -> com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2:
    void <init>() -> <init>
    java.util.Map$Entry apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.reflect.Parameter -> com.google.common.reflect.Parameter:
    com.google.common.reflect.Invokable declaration -> declaration
    int position -> position
    com.google.common.reflect.TypeToken type -> type
    com.google.common.collect.ImmutableList annotations -> annotations
    java.lang.reflect.AnnotatedType annotatedType -> annotatedType
    void <init>(com.google.common.reflect.Invokable,int,com.google.common.reflect.TypeToken,java.lang.annotation.Annotation[],java.lang.reflect.AnnotatedType) -> <init>
    com.google.common.reflect.TypeToken getType() -> getType
    com.google.common.reflect.Invokable getDeclaringInvokable() -> getDeclaringInvokable
    boolean isAnnotationPresent(java.lang.Class) -> isAnnotationPresent
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.annotation.Annotation[] getAnnotations() -> getAnnotations
    java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Class) -> getAnnotationsByType
    java.lang.annotation.Annotation[] getDeclaredAnnotations() -> getDeclaredAnnotations
    java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class) -> getDeclaredAnnotation
    java.lang.annotation.Annotation[] getDeclaredAnnotationsByType(java.lang.Class) -> getDeclaredAnnotationsByType
    java.lang.reflect.AnnotatedType getAnnotatedType() -> getAnnotatedType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.reflect.Reflection -> com.google.common.reflect.Reflection:
    java.lang.String getPackageName(java.lang.Class) -> getPackageName
    java.lang.String getPackageName(java.lang.String) -> getPackageName
    void initialize(java.lang.Class[]) -> initialize
    java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler) -> newProxy
    void <init>() -> <init>
com.google.common.reflect.TypeCapture -> com.google.common.reflect.TypeCapture:
    void <init>() -> <init>
    java.lang.reflect.Type capture() -> capture
com.google.common.reflect.TypeParameter -> com.google.common.reflect.TypeParameter:
    java.lang.reflect.TypeVariable typeVariable -> typeVariable
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.google.common.reflect.TypeResolver -> com.google.common.reflect.TypeResolver:
    com.google.common.reflect.TypeResolver$TypeTable typeTable -> typeTable
    void <init>() -> <init>
    void <init>(com.google.common.reflect.TypeResolver$TypeTable) -> <init>
    com.google.common.reflect.TypeResolver covariantly(java.lang.reflect.Type) -> covariantly
    com.google.common.reflect.TypeResolver invariantly(java.lang.reflect.Type) -> invariantly
    com.google.common.reflect.TypeResolver where(java.lang.reflect.Type,java.lang.reflect.Type) -> where
    com.google.common.reflect.TypeResolver where(java.util.Map) -> where
    void populateTypeMappings(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type) -> populateTypeMappings
    java.lang.reflect.Type resolveType(java.lang.reflect.Type) -> resolveType
    java.lang.reflect.Type[] resolveTypesInPlace(java.lang.reflect.Type[]) -> resolveTypesInPlace
    java.lang.reflect.Type[] resolveTypes(java.lang.reflect.Type[]) -> resolveTypes
    java.lang.reflect.WildcardType resolveWildcardType(java.lang.reflect.WildcardType) -> resolveWildcardType
    java.lang.reflect.Type resolveGenericArrayType(java.lang.reflect.GenericArrayType) -> resolveGenericArrayType
    java.lang.reflect.ParameterizedType resolveParameterizedType(java.lang.reflect.ParameterizedType) -> resolveParameterizedType
    java.lang.Object expectArgument(java.lang.Class,java.lang.Object) -> expectArgument
    void access$000(java.util.Map,java.lang.reflect.Type,java.lang.reflect.Type) -> access$000
    java.lang.Object access$100(java.lang.Class,java.lang.Object) -> access$100
    void <init>(com.google.common.reflect.TypeResolver$TypeTable,com.google.common.reflect.TypeResolver$1) -> <init>
    java.lang.reflect.Type[] access$300(com.google.common.reflect.TypeResolver,java.lang.reflect.Type[]) -> access$300
com.google.common.reflect.TypeResolver$1 -> com.google.common.reflect.TypeResolver$1:
    java.util.Map val$mappings -> val$mappings
    java.lang.reflect.Type val$to -> val$to
    void <init>(java.util.Map,java.lang.reflect.Type) -> <init>
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
    void visitClass(java.lang.Class) -> visitClass
com.google.common.reflect.TypeResolver$TypeMappingIntrospector -> com.google.common.reflect.TypeResolver$TypeMappingIntrospector:
    java.util.Map mappings -> mappings
    void <init>() -> <init>
    com.google.common.collect.ImmutableMap getTypeMappings(java.lang.reflect.Type) -> getTypeMappings
    void visitClass(java.lang.Class) -> visitClass
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type) -> map
com.google.common.reflect.TypeResolver$TypeTable -> com.google.common.reflect.TypeResolver$TypeTable:
    com.google.common.collect.ImmutableMap map -> map
    void <init>() -> <init>
    void <init>(com.google.common.collect.ImmutableMap) -> <init>
    com.google.common.reflect.TypeResolver$TypeTable where(java.util.Map) -> where
    java.lang.reflect.Type resolve(java.lang.reflect.TypeVariable) -> resolve
    java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable) -> resolveInternal
com.google.common.reflect.TypeResolver$TypeTable$1 -> com.google.common.reflect.TypeResolver$TypeTable$1:
    java.lang.reflect.TypeVariable val$var -> val$var
    com.google.common.reflect.TypeResolver$TypeTable val$unguarded -> val$unguarded
    com.google.common.reflect.TypeResolver$TypeTable this$0 -> this$0
    void <init>(com.google.common.reflect.TypeResolver$TypeTable,java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable) -> <init>
    java.lang.reflect.Type resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable) -> resolveInternal
com.google.common.reflect.TypeResolver$TypeVariableKey -> com.google.common.reflect.TypeResolver$TypeVariableKey:
    java.lang.reflect.TypeVariable var -> var
    void <init>(java.lang.reflect.TypeVariable) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.common.reflect.TypeResolver$TypeVariableKey forLookup(java.lang.reflect.Type) -> forLookup
    boolean equalsType(java.lang.reflect.Type) -> equalsType
    boolean equalsTypeVariable(java.lang.reflect.TypeVariable) -> equalsTypeVariable
com.google.common.reflect.TypeResolver$WildcardCapturer -> com.google.common.reflect.TypeResolver$WildcardCapturer:
    com.google.common.reflect.TypeResolver$WildcardCapturer INSTANCE -> INSTANCE
    java.util.concurrent.atomic.AtomicInteger id -> id
    void <init>() -> <init>
    void <init>(java.util.concurrent.atomic.AtomicInteger) -> <init>
    java.lang.reflect.Type capture(java.lang.reflect.Type) -> capture
    java.lang.reflect.TypeVariable captureAsTypeVariable(java.lang.reflect.Type[]) -> captureAsTypeVariable
    com.google.common.reflect.TypeResolver$WildcardCapturer forTypeVariable(java.lang.reflect.TypeVariable) -> forTypeVariable
    com.google.common.reflect.TypeResolver$WildcardCapturer notForTypeVariable() -> notForTypeVariable
    java.lang.reflect.Type captureNullable(java.lang.reflect.Type) -> captureNullable
    void <init>(java.util.concurrent.atomic.AtomicInteger,com.google.common.reflect.TypeResolver$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.reflect.TypeResolver$WildcardCapturer$1 -> com.google.common.reflect.TypeResolver$WildcardCapturer$1:
    java.lang.reflect.TypeVariable val$typeParam -> val$typeParam
    com.google.common.reflect.TypeResolver$WildcardCapturer this$0 -> this$0
    void <init>(com.google.common.reflect.TypeResolver$WildcardCapturer,java.util.concurrent.atomic.AtomicInteger,java.lang.reflect.TypeVariable) -> <init>
    java.lang.reflect.TypeVariable captureAsTypeVariable(java.lang.reflect.Type[]) -> captureAsTypeVariable
com.google.common.reflect.TypeToInstanceMap -> com.google.common.reflect.TypeToInstanceMap:
    java.lang.Object getInstance(java.lang.Class) -> getInstance
    java.lang.Object getInstance(com.google.common.reflect.TypeToken) -> getInstance
    java.lang.Object putInstance(java.lang.Class,java.lang.Object) -> putInstance
    java.lang.Object putInstance(com.google.common.reflect.TypeToken,java.lang.Object) -> putInstance
com.google.common.reflect.TypeToken -> com.google.common.reflect.TypeToken:
    java.lang.reflect.Type runtimeType -> runtimeType
    com.google.common.reflect.TypeResolver invariantTypeResolver -> invariantTypeResolver
    com.google.common.reflect.TypeResolver covariantTypeResolver -> covariantTypeResolver
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.lang.Class) -> <init>
    void <init>(java.lang.reflect.Type) -> <init>
    com.google.common.reflect.TypeToken of(java.lang.Class) -> of
    com.google.common.reflect.TypeToken of(java.lang.reflect.Type) -> of
    java.lang.Class getRawType() -> getRawType
    java.lang.reflect.Type getType() -> getType
    com.google.common.reflect.TypeToken where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken) -> where
    com.google.common.reflect.TypeToken where(com.google.common.reflect.TypeParameter,java.lang.Class) -> where
    com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type) -> resolveType
    com.google.common.reflect.TypeToken resolveSupertype(java.lang.reflect.Type) -> resolveSupertype
    com.google.common.reflect.TypeToken getGenericSuperclass() -> getGenericSuperclass
    com.google.common.reflect.TypeToken boundAsSuperclass(java.lang.reflect.Type) -> boundAsSuperclass
    com.google.common.collect.ImmutableList getGenericInterfaces() -> getGenericInterfaces
    com.google.common.collect.ImmutableList boundsAsInterfaces(java.lang.reflect.Type[]) -> boundsAsInterfaces
    com.google.common.reflect.TypeToken$TypeSet getTypes() -> getTypes
    com.google.common.reflect.TypeToken getSupertype(java.lang.Class) -> getSupertype
    com.google.common.reflect.TypeToken getSubtype(java.lang.Class) -> getSubtype
    boolean isSupertypeOf(com.google.common.reflect.TypeToken) -> isSupertypeOf
    boolean isSupertypeOf(java.lang.reflect.Type) -> isSupertypeOf
    boolean isSubtypeOf(com.google.common.reflect.TypeToken) -> isSubtypeOf
    boolean isSubtypeOf(java.lang.reflect.Type) -> isSubtypeOf
    boolean isArray() -> isArray
    boolean isPrimitive() -> isPrimitive
    com.google.common.reflect.TypeToken wrap() -> wrap
    boolean isWrapper() -> isWrapper
    com.google.common.reflect.TypeToken unwrap() -> unwrap
    com.google.common.reflect.TypeToken getComponentType() -> getComponentType
    com.google.common.reflect.Invokable method(java.lang.reflect.Method) -> method
    com.google.common.reflect.Invokable constructor(java.lang.reflect.Constructor) -> constructor
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
    com.google.common.reflect.TypeToken rejectTypeVariables() -> rejectTypeVariables
    boolean someRawTypeIsSubclassOf(java.lang.Class) -> someRawTypeIsSubclassOf
    boolean isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType) -> isSubtypeOfParameterizedType
    boolean isSubtypeOfArrayType(java.lang.reflect.GenericArrayType) -> isSubtypeOfArrayType
    boolean isSupertypeOfArray(java.lang.reflect.GenericArrayType) -> isSupertypeOfArray
    boolean is(java.lang.reflect.Type,java.lang.reflect.TypeVariable) -> is
    java.lang.reflect.Type canonicalizeTypeArg(java.lang.reflect.TypeVariable,java.lang.reflect.Type) -> canonicalizeTypeArg
    java.lang.reflect.Type canonicalizeWildcardsInType(java.lang.reflect.Type) -> canonicalizeWildcardsInType
    java.lang.reflect.WildcardType canonicalizeWildcardType(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType) -> canonicalizeWildcardType
    java.lang.reflect.ParameterizedType canonicalizeWildcardsInParameterizedType(java.lang.reflect.ParameterizedType) -> canonicalizeWildcardsInParameterizedType
    com.google.common.reflect.TypeToken$Bounds every(java.lang.reflect.Type[]) -> every
    com.google.common.reflect.TypeToken$Bounds any(java.lang.reflect.Type[]) -> any
    com.google.common.collect.ImmutableSet getRawTypes() -> getRawTypes
    boolean isOwnedBySubtypeOf(java.lang.reflect.Type) -> isOwnedBySubtypeOf
    java.lang.reflect.Type getOwnerTypeIfPresent() -> getOwnerTypeIfPresent
    com.google.common.reflect.TypeToken toGenericType(java.lang.Class) -> toGenericType
    com.google.common.reflect.TypeResolver getCovariantTypeResolver() -> getCovariantTypeResolver
    com.google.common.reflect.TypeResolver getInvariantTypeResolver() -> getInvariantTypeResolver
    com.google.common.reflect.TypeToken getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[]) -> getSupertypeFromUpperBounds
    com.google.common.reflect.TypeToken getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[]) -> getSubtypeFromLowerBounds
    com.google.common.reflect.TypeToken getArraySupertype(java.lang.Class) -> getArraySupertype
    com.google.common.reflect.TypeToken getArraySubtype(java.lang.Class) -> getArraySubtype
    java.lang.reflect.Type resolveTypeArgsForSubclass(java.lang.Class) -> resolveTypeArgsForSubclass
    java.lang.reflect.Type newArrayClassOrGenericArrayType(java.lang.reflect.Type) -> newArrayClassOrGenericArrayType
    com.google.common.reflect.TypeResolver access$000(com.google.common.reflect.TypeToken) -> access$000
    com.google.common.reflect.TypeResolver access$100(com.google.common.reflect.TypeToken) -> access$100
    com.google.common.collect.ImmutableSet access$300(com.google.common.reflect.TypeToken) -> access$300
    java.lang.reflect.Type access$500(com.google.common.reflect.TypeToken) -> access$500
    void <init>(java.lang.reflect.Type,com.google.common.reflect.TypeToken$1) -> <init>
com.google.common.reflect.TypeToken$1 -> com.google.common.reflect.TypeToken$1:
    com.google.common.reflect.TypeToken this$0 -> this$0
    void <init>(com.google.common.reflect.TypeToken,java.lang.reflect.Method) -> <init>
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    java.lang.String toString() -> toString
com.google.common.reflect.TypeToken$2 -> com.google.common.reflect.TypeToken$2:
    com.google.common.reflect.TypeToken this$0 -> this$0
    void <init>(com.google.common.reflect.TypeToken,java.lang.reflect.Constructor) -> <init>
    java.lang.reflect.Type getGenericReturnType() -> getGenericReturnType
    java.lang.reflect.Type[] getGenericParameterTypes() -> getGenericParameterTypes
    java.lang.reflect.Type[] getGenericExceptionTypes() -> getGenericExceptionTypes
    com.google.common.reflect.TypeToken getOwnerType() -> getOwnerType
    java.lang.String toString() -> toString
com.google.common.reflect.TypeToken$3 -> com.google.common.reflect.TypeToken$3:
    com.google.common.reflect.TypeToken this$0 -> this$0
    void <init>(com.google.common.reflect.TypeToken) -> <init>
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
com.google.common.reflect.TypeToken$4 -> com.google.common.reflect.TypeToken$4:
    com.google.common.collect.ImmutableSet$Builder val$builder -> val$builder
    com.google.common.reflect.TypeToken this$0 -> this$0
    void <init>(com.google.common.reflect.TypeToken,com.google.common.collect.ImmutableSet$Builder) -> <init>
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitClass(java.lang.Class) -> visitClass
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
com.google.common.reflect.TypeToken$Bounds -> com.google.common.reflect.TypeToken$Bounds:
    java.lang.reflect.Type[] bounds -> bounds
    boolean target -> target
    void <init>(java.lang.reflect.Type[],boolean) -> <init>
    boolean isSubtypeOf(java.lang.reflect.Type) -> isSubtypeOf
    boolean isSupertypeOf(java.lang.reflect.Type) -> isSupertypeOf
com.google.common.reflect.TypeToken$ClassSet -> com.google.common.reflect.TypeToken$ClassSet:
    com.google.common.collect.ImmutableSet classes -> classes
    long serialVersionUID -> serialVersionUID
    com.google.common.reflect.TypeToken this$0 -> this$0
    void <init>(com.google.common.reflect.TypeToken) -> <init>
    java.util.Set delegate() -> delegate
    com.google.common.reflect.TypeToken$TypeSet classes() -> classes
    java.util.Set rawTypes() -> rawTypes
    com.google.common.reflect.TypeToken$TypeSet interfaces() -> interfaces
    java.lang.Object readResolve() -> readResolve
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
    void <init>(com.google.common.reflect.TypeToken,com.google.common.reflect.TypeToken$1) -> <init>
com.google.common.reflect.TypeToken$InterfaceSet -> com.google.common.reflect.TypeToken$InterfaceSet:
    com.google.common.reflect.TypeToken$TypeSet allTypes -> allTypes
    com.google.common.collect.ImmutableSet interfaces -> interfaces
    long serialVersionUID -> serialVersionUID
    com.google.common.reflect.TypeToken this$0 -> this$0
    void <init>(com.google.common.reflect.TypeToken,com.google.common.reflect.TypeToken$TypeSet) -> <init>
    java.util.Set delegate() -> delegate
    com.google.common.reflect.TypeToken$TypeSet interfaces() -> interfaces
    java.util.Set rawTypes() -> rawTypes
    com.google.common.reflect.TypeToken$TypeSet classes() -> classes
    java.lang.Object readResolve() -> readResolve
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.reflect.TypeToken$InterfaceSet$1 -> com.google.common.reflect.TypeToken$InterfaceSet$1:
    com.google.common.reflect.TypeToken$InterfaceSet this$1 -> this$1
    void <init>(com.google.common.reflect.TypeToken$InterfaceSet) -> <init>
    boolean apply(java.lang.Class) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.reflect.TypeToken$SimpleTypeToken -> com.google.common.reflect.TypeToken$SimpleTypeToken:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.reflect.Type) -> <init>
com.google.common.reflect.TypeToken$TypeCollector -> com.google.common.reflect.TypeToken$TypeCollector:
    com.google.common.reflect.TypeToken$TypeCollector FOR_GENERIC_TYPE -> FOR_GENERIC_TYPE
    com.google.common.reflect.TypeToken$TypeCollector FOR_RAW_TYPE -> FOR_RAW_TYPE
    void <init>() -> <init>
    com.google.common.reflect.TypeToken$TypeCollector classesOnly() -> classesOnly
    com.google.common.collect.ImmutableList collectTypes(java.lang.Object) -> collectTypes
    com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable) -> collectTypes
    int collectTypes(java.lang.Object,java.util.Map) -> collectTypes
    com.google.common.collect.ImmutableList sortKeysByValue(java.util.Map,java.util.Comparator) -> sortKeysByValue
    java.lang.Class getRawType(java.lang.Object) -> getRawType
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    java.lang.Object getSuperclass(java.lang.Object) -> getSuperclass
    void <init>(com.google.common.reflect.TypeToken$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.reflect.TypeToken$TypeCollector$1 -> com.google.common.reflect.TypeToken$TypeCollector$1:
    void <init>() -> <init>
    java.lang.Class getRawType(com.google.common.reflect.TypeToken) -> getRawType
    java.lang.Iterable getInterfaces(com.google.common.reflect.TypeToken) -> getInterfaces
    com.google.common.reflect.TypeToken getSuperclass(com.google.common.reflect.TypeToken) -> getSuperclass
    java.lang.Object getSuperclass(java.lang.Object) -> getSuperclass
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    java.lang.Class getRawType(java.lang.Object) -> getRawType
com.google.common.reflect.TypeToken$TypeCollector$2 -> com.google.common.reflect.TypeToken$TypeCollector$2:
    void <init>() -> <init>
    java.lang.Class getRawType(java.lang.Class) -> getRawType
    java.lang.Iterable getInterfaces(java.lang.Class) -> getInterfaces
    java.lang.Class getSuperclass(java.lang.Class) -> getSuperclass
    java.lang.Object getSuperclass(java.lang.Object) -> getSuperclass
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    java.lang.Class getRawType(java.lang.Object) -> getRawType
com.google.common.reflect.TypeToken$TypeCollector$3 -> com.google.common.reflect.TypeToken$TypeCollector$3:
    com.google.common.reflect.TypeToken$TypeCollector this$0 -> this$0
    void <init>(com.google.common.reflect.TypeToken$TypeCollector,com.google.common.reflect.TypeToken$TypeCollector) -> <init>
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    com.google.common.collect.ImmutableList collectTypes(java.lang.Iterable) -> collectTypes
com.google.common.reflect.TypeToken$TypeCollector$4 -> com.google.common.reflect.TypeToken$TypeCollector$4:
    java.util.Comparator val$valueComparator -> val$valueComparator
    java.util.Map val$map -> val$map
    void <init>(java.util.Comparator,java.util.Map) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector -> com.google.common.reflect.TypeToken$TypeCollector$ForwardingTypeCollector:
    com.google.common.reflect.TypeToken$TypeCollector delegate -> delegate
    void <init>(com.google.common.reflect.TypeToken$TypeCollector) -> <init>
    java.lang.Class getRawType(java.lang.Object) -> getRawType
    java.lang.Iterable getInterfaces(java.lang.Object) -> getInterfaces
    java.lang.Object getSuperclass(java.lang.Object) -> getSuperclass
com.google.common.reflect.TypeToken$TypeFilter -> com.google.common.reflect.TypeToken$TypeFilter:
    com.google.common.reflect.TypeToken$TypeFilter IGNORE_TYPE_VARIABLE_OR_WILDCARD -> IGNORE_TYPE_VARIABLE_OR_WILDCARD
    com.google.common.reflect.TypeToken$TypeFilter INTERFACE_ONLY -> INTERFACE_ONLY
    com.google.common.reflect.TypeToken$TypeFilter[] $VALUES -> $VALUES
    com.google.common.reflect.TypeToken$TypeFilter[] values() -> values
    com.google.common.reflect.TypeToken$TypeFilter valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,com.google.common.reflect.TypeToken$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.reflect.TypeToken$TypeFilter$1 -> com.google.common.reflect.TypeToken$TypeFilter$1:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(com.google.common.reflect.TypeToken) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.reflect.TypeToken$TypeFilter$2 -> com.google.common.reflect.TypeToken$TypeFilter$2:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(com.google.common.reflect.TypeToken) -> apply
    boolean apply(java.lang.Object) -> apply
com.google.common.reflect.TypeToken$TypeSet -> com.google.common.reflect.TypeToken$TypeSet:
    com.google.common.collect.ImmutableSet types -> types
    long serialVersionUID -> serialVersionUID
    com.google.common.reflect.TypeToken this$0 -> this$0
    void <init>(com.google.common.reflect.TypeToken) -> <init>
    com.google.common.reflect.TypeToken$TypeSet interfaces() -> interfaces
    com.google.common.reflect.TypeToken$TypeSet classes() -> classes
    java.util.Set delegate() -> delegate
    java.util.Set rawTypes() -> rawTypes
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.reflect.TypeVisitor -> com.google.common.reflect.TypeVisitor:
    java.util.Set visited -> visited
    void <init>() -> <init>
    void visit(java.lang.reflect.Type[]) -> visit
    void visitClass(java.lang.Class) -> visitClass
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
    void visitParameterizedType(java.lang.reflect.ParameterizedType) -> visitParameterizedType
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
com.google.common.reflect.Types -> com.google.common.reflect.Types:
    com.google.common.base.Function TYPE_NAME -> TYPE_NAME
    com.google.common.base.Joiner COMMA_JOINER -> COMMA_JOINER
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[]) -> newParameterizedTypeWithOwner
    java.lang.reflect.ParameterizedType newParameterizedType(java.lang.Class,java.lang.reflect.Type[]) -> newParameterizedType
    java.lang.reflect.TypeVariable newArtificialTypeVariable(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[]) -> newArtificialTypeVariable
    java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type) -> subtypeOf
    java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type) -> supertypeOf
    java.lang.String toString(java.lang.reflect.Type) -> toString
    java.lang.reflect.Type getComponentType(java.lang.reflect.Type) -> getComponentType
    java.lang.reflect.Type subtypeOfComponentType(java.lang.reflect.Type[]) -> subtypeOfComponentType
    java.lang.reflect.TypeVariable newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[]) -> newTypeVariableImpl
    java.lang.reflect.Type[] toArray(java.util.Collection) -> toArray
    java.lang.Iterable filterUpperBounds(java.lang.Iterable) -> filterUpperBounds
    void disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String) -> disallowPrimitiveType
    java.lang.Class getArrayClass(java.lang.Class) -> getArrayClass
    void <init>() -> <init>
    java.lang.reflect.Type access$100(java.lang.reflect.Type[]) -> access$100
    void access$200(java.lang.reflect.Type[],java.lang.String) -> access$200
    java.lang.reflect.Type[] access$300(java.util.Collection) -> access$300
    com.google.common.base.Function access$400() -> access$400
    com.google.common.base.Joiner access$500() -> access$500
    java.lang.Iterable access$700(java.lang.Iterable) -> access$700
    void <clinit>() -> <clinit>
com.google.common.reflect.Types$1 -> com.google.common.reflect.Types$1:
    void <init>() -> <init>
    java.lang.String apply(java.lang.reflect.Type) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.reflect.Types$2 -> com.google.common.reflect.Types$2:
    java.util.concurrent.atomic.AtomicReference val$result -> val$result
    void <init>(java.util.concurrent.atomic.AtomicReference) -> <init>
    void visitTypeVariable(java.lang.reflect.TypeVariable) -> visitTypeVariable
    void visitWildcardType(java.lang.reflect.WildcardType) -> visitWildcardType
    void visitGenericArrayType(java.lang.reflect.GenericArrayType) -> visitGenericArrayType
    void visitClass(java.lang.Class) -> visitClass
com.google.common.reflect.Types$ClassOwnership -> com.google.common.reflect.Types$ClassOwnership:
    com.google.common.reflect.Types$ClassOwnership OWNED_BY_ENCLOSING_CLASS -> OWNED_BY_ENCLOSING_CLASS
    com.google.common.reflect.Types$ClassOwnership LOCAL_CLASS_HAS_NO_OWNER -> LOCAL_CLASS_HAS_NO_OWNER
    com.google.common.reflect.Types$ClassOwnership JVM_BEHAVIOR -> JVM_BEHAVIOR
    com.google.common.reflect.Types$ClassOwnership[] $VALUES -> $VALUES
    com.google.common.reflect.Types$ClassOwnership[] values() -> values
    com.google.common.reflect.Types$ClassOwnership valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.Class getOwnerType(java.lang.Class) -> getOwnerType
    com.google.common.reflect.Types$ClassOwnership detectJvmBehavior() -> detectJvmBehavior
    void <init>(java.lang.String,int,com.google.common.reflect.Types$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.reflect.Types$ClassOwnership$1 -> com.google.common.reflect.Types$ClassOwnership$1:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Class getOwnerType(java.lang.Class) -> getOwnerType
com.google.common.reflect.Types$ClassOwnership$1LocalClass -> com.google.common.reflect.Types$ClassOwnership$1LocalClass:
    void <init>() -> <init>
com.google.common.reflect.Types$ClassOwnership$2 -> com.google.common.reflect.Types$ClassOwnership$2:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Class getOwnerType(java.lang.Class) -> getOwnerType
com.google.common.reflect.Types$ClassOwnership$3 -> com.google.common.reflect.Types$ClassOwnership$3:
    void <init>() -> <init>
com.google.common.reflect.Types$GenericArrayTypeImpl -> com.google.common.reflect.Types$GenericArrayTypeImpl:
    java.lang.reflect.Type componentType -> componentType
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.reflect.Type) -> <init>
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Types$JavaVersion -> com.google.common.reflect.Types$JavaVersion:
    com.google.common.reflect.Types$JavaVersion JAVA6 -> JAVA6
    com.google.common.reflect.Types$JavaVersion JAVA7 -> JAVA7
    com.google.common.reflect.Types$JavaVersion JAVA8 -> JAVA8
    com.google.common.reflect.Types$JavaVersion JAVA9 -> JAVA9
    com.google.common.reflect.Types$JavaVersion CURRENT -> CURRENT
    com.google.common.reflect.Types$JavaVersion[] $VALUES -> $VALUES
    com.google.common.reflect.Types$JavaVersion[] values() -> values
    com.google.common.reflect.Types$JavaVersion valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> usedInGenericType
    com.google.common.collect.ImmutableList usedInGenericType(java.lang.reflect.Type[]) -> usedInGenericType
    java.lang.String typeName(java.lang.reflect.Type) -> typeName
    boolean jdkTypeDuplicatesOwnerName() -> jdkTypeDuplicatesOwnerName
    void <init>(java.lang.String,int,com.google.common.reflect.Types$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.reflect.Types$JavaVersion$1 -> com.google.common.reflect.Types$JavaVersion$1:
    void <init>(java.lang.String,int) -> <init>
    java.lang.reflect.GenericArrayType newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> usedInGenericType
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
com.google.common.reflect.Types$JavaVersion$2 -> com.google.common.reflect.Types$JavaVersion$2:
    void <init>(java.lang.String,int) -> <init>
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> usedInGenericType
com.google.common.reflect.Types$JavaVersion$3 -> com.google.common.reflect.Types$JavaVersion$3:
    void <init>(java.lang.String,int) -> <init>
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> usedInGenericType
    java.lang.String typeName(java.lang.reflect.Type) -> typeName
com.google.common.reflect.Types$JavaVersion$4 -> com.google.common.reflect.Types$JavaVersion$4:
    void <init>(java.lang.String,int) -> <init>
    java.lang.reflect.Type newArrayType(java.lang.reflect.Type) -> newArrayType
    java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type) -> usedInGenericType
    java.lang.String typeName(java.lang.reflect.Type) -> typeName
    boolean jdkTypeDuplicatesOwnerName() -> jdkTypeDuplicatesOwnerName
com.google.common.reflect.Types$JavaVersion$5 -> com.google.common.reflect.Types$JavaVersion$5:
    void <init>() -> <init>
com.google.common.reflect.Types$JavaVersion$6 -> com.google.common.reflect.Types$JavaVersion$6:
    void <init>() -> <init>
com.google.common.reflect.Types$NativeTypeVariableEquals -> com.google.common.reflect.Types$NativeTypeVariableEquals:
    boolean NATIVE_TYPE_VARIABLE_ONLY -> NATIVE_TYPE_VARIABLE_ONLY
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.reflect.Types$ParameterizedTypeImpl -> com.google.common.reflect.Types$ParameterizedTypeImpl:
    java.lang.reflect.Type ownerType -> ownerType
    com.google.common.collect.ImmutableList argumentsList -> argumentsList
    java.lang.Class rawType -> rawType
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[]) -> <init>
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Types$TypeVariableImpl -> com.google.common.reflect.Types$TypeVariableImpl:
    java.lang.reflect.GenericDeclaration genericDeclaration -> genericDeclaration
    java.lang.String name -> name
    com.google.common.collect.ImmutableList bounds -> bounds
    void <init>(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[]) -> <init>
    java.lang.reflect.Type[] getBounds() -> getBounds
    java.lang.reflect.GenericDeclaration getGenericDeclaration() -> getGenericDeclaration
    java.lang.String getName() -> getName
    java.lang.String getTypeName() -> getTypeName
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.common.reflect.Types$TypeVariableInvocationHandler -> com.google.common.reflect.Types$TypeVariableInvocationHandler:
    com.google.common.collect.ImmutableMap typeVariableMethods -> typeVariableMethods
    com.google.common.reflect.Types$TypeVariableImpl typeVariableImpl -> typeVariableImpl
    void <init>(com.google.common.reflect.Types$TypeVariableImpl) -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    com.google.common.reflect.Types$TypeVariableImpl access$600(com.google.common.reflect.Types$TypeVariableInvocationHandler) -> access$600
    void <clinit>() -> <clinit>
com.google.common.reflect.Types$WildcardTypeImpl -> com.google.common.reflect.Types$WildcardTypeImpl:
    com.google.common.collect.ImmutableList lowerBounds -> lowerBounds
    com.google.common.collect.ImmutableList upperBounds -> upperBounds
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.reflect.Type[],java.lang.reflect.Type[]) -> <init>
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.common.reflect.package-info -> com.google.common.reflect.package-info:
com.google.common.util.concurrent.AbstractCatchingFuture -> com.google.common.util.concurrent.AbstractCatchingFuture:
    com.google.common.util.concurrent.ListenableFuture inputFuture -> inputFuture
    java.lang.Class exceptionType -> exceptionType
    java.lang.Object fallback -> fallback
    com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor) -> create
    com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> create
    void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object) -> <init>
    void run() -> run
    java.lang.String pendingToString() -> pendingToString
    java.lang.Object doFallback(java.lang.Object,java.lang.Throwable) -> doFallback
    void setResult(java.lang.Object) -> setResult
    void afterDone() -> afterDone
com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture -> com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture:
    void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction) -> <init>
    com.google.common.util.concurrent.ListenableFuture doFallback(com.google.common.util.concurrent.AsyncFunction,java.lang.Throwable) -> doFallback
    void setResult(com.google.common.util.concurrent.ListenableFuture) -> setResult
    void setResult(java.lang.Object) -> setResult
    java.lang.Object doFallback(java.lang.Object,java.lang.Throwable) -> doFallback
com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture -> com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture:
    void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function) -> <init>
    java.lang.Object doFallback(com.google.common.base.Function,java.lang.Throwable) -> doFallback
    void setResult(java.lang.Object) -> setResult
    java.lang.Object doFallback(java.lang.Object,java.lang.Throwable) -> doFallback
com.google.common.util.concurrent.AbstractCheckedFuture -> com.google.common.util.concurrent.AbstractCheckedFuture:
    void <init>(com.google.common.util.concurrent.ListenableFuture) -> <init>
    java.lang.Exception mapException(java.lang.Exception) -> mapException
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
com.google.common.util.concurrent.AbstractExecutionThreadService -> com.google.common.util.concurrent.AbstractExecutionThreadService:
    java.util.logging.Logger logger -> logger
    com.google.common.util.concurrent.Service delegate -> delegate
    void <init>() -> <init>
    void startUp() -> startUp
    void run() -> run
    void shutDown() -> shutDown
    void triggerShutdown() -> triggerShutdown
    java.util.concurrent.Executor executor() -> executor
    java.lang.String toString() -> toString
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    java.lang.Throwable failureCause() -> failureCause
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    java.lang.String serviceName() -> serviceName
    java.util.logging.Logger access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractExecutionThreadService$1 -> com.google.common.util.concurrent.AbstractExecutionThreadService$1:
    com.google.common.util.concurrent.AbstractExecutionThreadService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractExecutionThreadService) -> <init>
    void doStart() -> doStart
    void doStop() -> doStop
    java.lang.String toString() -> toString
com.google.common.util.concurrent.AbstractExecutionThreadService$1$1 -> com.google.common.util.concurrent.AbstractExecutionThreadService$1$1:
    com.google.common.util.concurrent.AbstractExecutionThreadService$1 this$1 -> this$1
    void <init>(com.google.common.util.concurrent.AbstractExecutionThreadService$1) -> <init>
    java.lang.String get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.AbstractExecutionThreadService$1$2 -> com.google.common.util.concurrent.AbstractExecutionThreadService$1$2:
    com.google.common.util.concurrent.AbstractExecutionThreadService$1 this$1 -> this$1
    void <init>(com.google.common.util.concurrent.AbstractExecutionThreadService$1) -> <init>
    void run() -> run
com.google.common.util.concurrent.AbstractExecutionThreadService$2 -> com.google.common.util.concurrent.AbstractExecutionThreadService$2:
    com.google.common.util.concurrent.AbstractExecutionThreadService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractExecutionThreadService) -> <init>
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.AbstractFuture -> com.google.common.util.concurrent.AbstractFuture:
    boolean GENERATE_CANCELLATION_CAUSES -> GENERATE_CANCELLATION_CAUSES
    java.util.logging.Logger log -> log
    long SPIN_THRESHOLD_NANOS -> SPIN_THRESHOLD_NANOS
    com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER -> ATOMIC_HELPER
    java.lang.Object NULL -> NULL
    java.lang.Object value -> value
    com.google.common.util.concurrent.AbstractFuture$Listener listeners -> listeners
    com.google.common.util.concurrent.AbstractFuture$Waiter waiters -> waiters
    void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter) -> removeWaiter
    void <init>() -> <init>
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    java.lang.Object get() -> get
    java.lang.Object getDoneValue(java.lang.Object) -> getDoneValue
    boolean isDone() -> isDone
    boolean isCancelled() -> isCancelled
    boolean cancel(boolean) -> cancel
    void interruptTask() -> interruptTask
    boolean wasInterrupted() -> wasInterrupted
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    boolean set(java.lang.Object) -> set
    boolean setException(java.lang.Throwable) -> setException
    boolean setFuture(com.google.common.util.concurrent.ListenableFuture) -> setFuture
    java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture) -> getFutureValue
    java.lang.Object getUninterruptibly(java.util.concurrent.Future) -> getUninterruptibly
    void complete(com.google.common.util.concurrent.AbstractFuture) -> complete
    void afterDone() -> afterDone
    java.lang.Throwable tryInternalFastPathGetFailure() -> tryInternalFastPathGetFailure
    void maybePropagateCancellationTo(java.util.concurrent.Future) -> maybePropagateCancellationTo
    void releaseWaiters() -> releaseWaiters
    com.google.common.util.concurrent.AbstractFuture$Listener clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener) -> clearListeners
    java.lang.String toString() -> toString
    java.lang.String pendingToString() -> pendingToString
    void addDoneString(java.lang.StringBuilder) -> addDoneString
    java.lang.String userObjectToString(java.lang.Object) -> userObjectToString
    void executeListener(java.lang.Runnable,java.util.concurrent.Executor) -> executeListener
    java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable) -> cancellationExceptionWithCause
    com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200() -> access$200
    boolean access$300() -> access$300
    java.lang.Object access$400(com.google.common.util.concurrent.AbstractFuture) -> access$400
    java.lang.Object access$500(com.google.common.util.concurrent.ListenableFuture) -> access$500
    void access$600(com.google.common.util.concurrent.AbstractFuture) -> access$600
    com.google.common.util.concurrent.AbstractFuture$Waiter access$800(com.google.common.util.concurrent.AbstractFuture) -> access$800
    com.google.common.util.concurrent.AbstractFuture$Waiter access$802(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter) -> access$802
    com.google.common.util.concurrent.AbstractFuture$Listener access$900(com.google.common.util.concurrent.AbstractFuture) -> access$900
    com.google.common.util.concurrent.AbstractFuture$Listener access$902(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener) -> access$902
    java.lang.Object access$402(com.google.common.util.concurrent.AbstractFuture,java.lang.Object) -> access$402
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$1 -> com.google.common.util.concurrent.AbstractFuture$1:
com.google.common.util.concurrent.AbstractFuture$AtomicHelper -> com.google.common.util.concurrent.AbstractFuture$AtomicHelper:
    void <init>() -> <init>
    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> putThread
    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> putNext
    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> casWaiters
    boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> casListeners
    boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> casValue
    void <init>(com.google.common.util.concurrent.AbstractFuture$1) -> <init>
com.google.common.util.concurrent.AbstractFuture$Cancellation -> com.google.common.util.concurrent.AbstractFuture$Cancellation:
    com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED -> CAUSELESS_INTERRUPTED
    com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED -> CAUSELESS_CANCELLED
    boolean wasInterrupted -> wasInterrupted
    java.lang.Throwable cause -> cause
    void <init>(boolean,java.lang.Throwable) -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$Failure -> com.google.common.util.concurrent.AbstractFuture$Failure:
    com.google.common.util.concurrent.AbstractFuture$Failure FALLBACK_INSTANCE -> FALLBACK_INSTANCE
    java.lang.Throwable exception -> exception
    void <init>(java.lang.Throwable) -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$Failure$1 -> com.google.common.util.concurrent.AbstractFuture$Failure$1:
    void <init>(java.lang.String) -> <init>
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
com.google.common.util.concurrent.AbstractFuture$Listener -> com.google.common.util.concurrent.AbstractFuture$Listener:
    com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE -> TOMBSTONE
    java.lang.Runnable task -> task
    java.util.concurrent.Executor executor -> executor
    com.google.common.util.concurrent.AbstractFuture$Listener next -> next
    void <init>(java.lang.Runnable,java.util.concurrent.Executor) -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper -> com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper:
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater -> waiterThreadUpdater
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater -> waiterNextUpdater
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater -> waitersUpdater
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater -> listenersUpdater
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater -> valueUpdater
    void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater) -> <init>
    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> putThread
    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> putNext
    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> casWaiters
    boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> casListeners
    boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> casValue
com.google.common.util.concurrent.AbstractFuture$SetFuture -> com.google.common.util.concurrent.AbstractFuture$SetFuture:
    com.google.common.util.concurrent.AbstractFuture owner -> owner
    com.google.common.util.concurrent.ListenableFuture future -> future
    void <init>(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.ListenableFuture) -> <init>
    void run() -> run
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper -> com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper:
    void <init>() -> <init>
    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> putThread
    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> putNext
    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> casWaiters
    boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> casListeners
    boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> casValue
    void <init>(com.google.common.util.concurrent.AbstractFuture$1) -> <init>
com.google.common.util.concurrent.AbstractFuture$Trusted -> com.google.common.util.concurrent.AbstractFuture$Trusted:
com.google.common.util.concurrent.AbstractFuture$TrustedFuture -> com.google.common.util.concurrent.AbstractFuture$TrustedFuture:
    void <init>() -> <init>
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    boolean isDone() -> isDone
    boolean isCancelled() -> isCancelled
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    boolean cancel(boolean) -> cancel
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper -> com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper:
    sun.misc.Unsafe UNSAFE -> UNSAFE
    long LISTENERS_OFFSET -> LISTENERS_OFFSET
    long WAITERS_OFFSET -> WAITERS_OFFSET
    long VALUE_OFFSET -> VALUE_OFFSET
    long WAITER_THREAD_OFFSET -> WAITER_THREAD_OFFSET
    long WAITER_NEXT_OFFSET -> WAITER_NEXT_OFFSET
    void <init>() -> <init>
    void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread) -> putThread
    void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> putNext
    boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter) -> casWaiters
    boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener) -> casListeners
    boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object) -> casValue
    void <init>(com.google.common.util.concurrent.AbstractFuture$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1 -> com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1:
    void <init>() -> <init>
    sun.misc.Unsafe run() -> run
    java.lang.Object run() -> run
com.google.common.util.concurrent.AbstractFuture$Waiter -> com.google.common.util.concurrent.AbstractFuture$Waiter:
    com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE -> TOMBSTONE
    java.lang.Thread thread -> thread
    com.google.common.util.concurrent.AbstractFuture$Waiter next -> next
    void <init>(boolean) -> <init>
    void <init>() -> <init>
    void setNext(com.google.common.util.concurrent.AbstractFuture$Waiter) -> setNext
    void unpark() -> unpark
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractIdleService -> com.google.common.util.concurrent.AbstractIdleService:
    com.google.common.base.Supplier threadNameSupplier -> threadNameSupplier
    com.google.common.util.concurrent.Service delegate -> delegate
    void <init>() -> <init>
    void startUp() -> startUp
    void shutDown() -> shutDown
    java.util.concurrent.Executor executor() -> executor
    java.lang.String toString() -> toString
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    java.lang.Throwable failureCause() -> failureCause
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    java.lang.String serviceName() -> serviceName
    com.google.common.base.Supplier access$200(com.google.common.util.concurrent.AbstractIdleService) -> access$200
com.google.common.util.concurrent.AbstractIdleService$1 -> com.google.common.util.concurrent.AbstractIdleService$1:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractIdleService) -> <init>
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.AbstractIdleService$DelegateService -> com.google.common.util.concurrent.AbstractIdleService$DelegateService:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractIdleService) -> <init>
    void doStart() -> doStart
    void doStop() -> doStop
    java.lang.String toString() -> toString
    void <init>(com.google.common.util.concurrent.AbstractIdleService,com.google.common.util.concurrent.AbstractIdleService$1) -> <init>
com.google.common.util.concurrent.AbstractIdleService$DelegateService$1 -> com.google.common.util.concurrent.AbstractIdleService$DelegateService$1:
    com.google.common.util.concurrent.AbstractIdleService$DelegateService this$1 -> this$1
    void <init>(com.google.common.util.concurrent.AbstractIdleService$DelegateService) -> <init>
    void run() -> run
com.google.common.util.concurrent.AbstractIdleService$DelegateService$2 -> com.google.common.util.concurrent.AbstractIdleService$DelegateService$2:
    com.google.common.util.concurrent.AbstractIdleService$DelegateService this$1 -> this$1
    void <init>(com.google.common.util.concurrent.AbstractIdleService$DelegateService) -> <init>
    void run() -> run
com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier -> com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier:
    com.google.common.util.concurrent.AbstractIdleService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractIdleService) -> <init>
    java.lang.String get() -> get
    java.lang.Object get() -> get
    void <init>(com.google.common.util.concurrent.AbstractIdleService,com.google.common.util.concurrent.AbstractIdleService$1) -> <init>
com.google.common.util.concurrent.AbstractListeningExecutorService -> com.google.common.util.concurrent.AbstractListeningExecutorService:
    void <init>() -> <init>
    java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object) -> newTaskFor
    java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable) -> newTaskFor
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
com.google.common.util.concurrent.AbstractScheduledService -> com.google.common.util.concurrent.AbstractScheduledService:
    java.util.logging.Logger logger -> logger
    com.google.common.util.concurrent.AbstractService delegate -> delegate
    void <init>() -> <init>
    void runOneIteration() -> runOneIteration
    void startUp() -> startUp
    void shutDown() -> shutDown
    com.google.common.util.concurrent.AbstractScheduledService$Scheduler scheduler() -> scheduler
    java.util.concurrent.ScheduledExecutorService executor() -> executor
    java.lang.String serviceName() -> serviceName
    java.lang.String toString() -> toString
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    java.lang.Throwable failureCause() -> failureCause
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    java.util.logging.Logger access$400() -> access$400
    com.google.common.util.concurrent.AbstractService access$500(com.google.common.util.concurrent.AbstractScheduledService) -> access$500
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractScheduledService$1 -> com.google.common.util.concurrent.AbstractScheduledService$1:
    java.util.concurrent.ScheduledExecutorService val$executor -> val$executor
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractScheduledService,java.util.concurrent.ScheduledExecutorService) -> <init>
    void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl -> com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl:
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractScheduledService) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler -> com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:
    void <init>() -> <init>
    java.util.concurrent.Future schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> schedule
    com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule getNextSchedule() -> getNextSchedule
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable -> com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:
    java.lang.Runnable wrappedRunnable -> wrappedRunnable
    java.util.concurrent.ScheduledExecutorService executor -> executor
    com.google.common.util.concurrent.AbstractService service -> service
    java.util.concurrent.locks.ReentrantLock lock -> lock
    java.util.concurrent.Future currentFuture -> currentFuture
    com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler,com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> <init>
    java.lang.Void call() -> call
    void reschedule() -> reschedule
    boolean cancel(boolean) -> cancel
    boolean isCancelled() -> isCancelled
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
    java.lang.Object call() -> call
com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule -> com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:
    long delay -> delay
    java.util.concurrent.TimeUnit unit -> unit
    void <init>(long,java.util.concurrent.TimeUnit) -> <init>
    long access$800(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule) -> access$800
    java.util.concurrent.TimeUnit access$900(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule) -> access$900
com.google.common.util.concurrent.AbstractScheduledService$Scheduler -> com.google.common.util.concurrent.AbstractScheduledService$Scheduler:
    com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedDelaySchedule(long,long,java.util.concurrent.TimeUnit) -> newFixedDelaySchedule
    com.google.common.util.concurrent.AbstractScheduledService$Scheduler newFixedRateSchedule(long,long,java.util.concurrent.TimeUnit) -> newFixedRateSchedule
    java.util.concurrent.Future schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> schedule
    void <init>() -> <init>
    void <init>(com.google.common.util.concurrent.AbstractScheduledService$1) -> <init>
com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1 -> com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1:
    long val$initialDelay -> val$initialDelay
    long val$delay -> val$delay
    java.util.concurrent.TimeUnit val$unit -> val$unit
    void <init>(long,long,java.util.concurrent.TimeUnit) -> <init>
    java.util.concurrent.Future schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> schedule
com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2 -> com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2:
    long val$initialDelay -> val$initialDelay
    long val$period -> val$period
    java.util.concurrent.TimeUnit val$unit -> val$unit
    void <init>(long,long,java.util.concurrent.TimeUnit) -> <init>
    java.util.concurrent.Future schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable) -> schedule
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate -> com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:
    java.util.concurrent.Future runningTask -> runningTask
    java.util.concurrent.ScheduledExecutorService executorService -> executorService
    java.util.concurrent.locks.ReentrantLock lock -> lock
    java.lang.Runnable task -> task
    com.google.common.util.concurrent.AbstractScheduledService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractScheduledService) -> <init>
    void doStart() -> doStart
    void doStop() -> doStop
    java.lang.String toString() -> toString
    void <init>(com.google.common.util.concurrent.AbstractScheduledService,com.google.common.util.concurrent.AbstractScheduledService$1) -> <init>
    java.util.concurrent.locks.ReentrantLock access$200(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> access$200
    java.util.concurrent.Future access$300(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> access$300
    java.util.concurrent.Future access$302(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate,java.util.concurrent.Future) -> access$302
    java.util.concurrent.ScheduledExecutorService access$600(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> access$600
    java.lang.Runnable access$700(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> access$700
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1 -> com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> this$1
    void <init>(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> <init>
    java.lang.String get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$2 -> com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$2:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> this$1
    void <init>(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> <init>
    void run() -> run
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$3 -> com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$3:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> this$1
    void <init>(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> <init>
    void run() -> run
com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task -> com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task:
    com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate this$1 -> this$1
    void <init>(com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate) -> <init>
    void run() -> run
com.google.common.util.concurrent.AbstractService -> com.google.common.util.concurrent.AbstractService:
    com.google.common.util.concurrent.ListenerCallQueue$Event STARTING_EVENT -> STARTING_EVENT
    com.google.common.util.concurrent.ListenerCallQueue$Event RUNNING_EVENT -> RUNNING_EVENT
    com.google.common.util.concurrent.ListenerCallQueue$Event STOPPING_FROM_STARTING_EVENT -> STOPPING_FROM_STARTING_EVENT
    com.google.common.util.concurrent.ListenerCallQueue$Event STOPPING_FROM_RUNNING_EVENT -> STOPPING_FROM_RUNNING_EVENT
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_NEW_EVENT -> TERMINATED_FROM_NEW_EVENT
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_STARTING_EVENT -> TERMINATED_FROM_STARTING_EVENT
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_RUNNING_EVENT -> TERMINATED_FROM_RUNNING_EVENT
    com.google.common.util.concurrent.ListenerCallQueue$Event TERMINATED_FROM_STOPPING_EVENT -> TERMINATED_FROM_STOPPING_EVENT
    com.google.common.util.concurrent.Monitor monitor -> monitor
    com.google.common.util.concurrent.Monitor$Guard isStartable -> isStartable
    com.google.common.util.concurrent.Monitor$Guard isStoppable -> isStoppable
    com.google.common.util.concurrent.Monitor$Guard hasReachedRunning -> hasReachedRunning
    com.google.common.util.concurrent.Monitor$Guard isStopped -> isStopped
    com.google.common.util.concurrent.ListenerCallQueue listeners -> listeners
    com.google.common.util.concurrent.AbstractService$StateSnapshot snapshot -> snapshot
    com.google.common.util.concurrent.ListenerCallQueue$Event terminatedEvent(com.google.common.util.concurrent.Service$State) -> terminatedEvent
    com.google.common.util.concurrent.ListenerCallQueue$Event stoppingEvent(com.google.common.util.concurrent.Service$State) -> stoppingEvent
    void <init>() -> <init>
    void doStart() -> doStart
    void doStop() -> doStop
    void doCancelStart() -> doCancelStart
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    void checkCurrentState(com.google.common.util.concurrent.Service$State) -> checkCurrentState
    void notifyStarted() -> notifyStarted
    void notifyStopped() -> notifyStopped
    void notifyFailed(java.lang.Throwable) -> notifyFailed
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    java.lang.Throwable failureCause() -> failureCause
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
    java.lang.String toString() -> toString
    void dispatchListenerEvents() -> dispatchListenerEvents
    void enqueueStartingEvent() -> enqueueStartingEvent
    void enqueueRunningEvent() -> enqueueRunningEvent
    void enqueueStoppingEvent(com.google.common.util.concurrent.Service$State) -> enqueueStoppingEvent
    void enqueueTerminatedEvent(com.google.common.util.concurrent.Service$State) -> enqueueTerminatedEvent
    void enqueueFailedEvent(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> enqueueFailedEvent
    com.google.common.util.concurrent.Monitor access$000(com.google.common.util.concurrent.AbstractService) -> access$000
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractService$1 -> com.google.common.util.concurrent.AbstractService$1:
    void <init>() -> <init>
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    java.lang.String toString() -> toString
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$2 -> com.google.common.util.concurrent.AbstractService$2:
    void <init>() -> <init>
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    java.lang.String toString() -> toString
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$3 -> com.google.common.util.concurrent.AbstractService$3:
    com.google.common.util.concurrent.Service$State val$from -> val$from
    void <init>(com.google.common.util.concurrent.Service$State) -> <init>
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    java.lang.String toString() -> toString
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$4 -> com.google.common.util.concurrent.AbstractService$4:
    com.google.common.util.concurrent.Service$State val$from -> val$from
    void <init>(com.google.common.util.concurrent.Service$State) -> <init>
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    java.lang.String toString() -> toString
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$5 -> com.google.common.util.concurrent.AbstractService$5:
    com.google.common.util.concurrent.Service$State val$from -> val$from
    java.lang.Throwable val$cause -> val$cause
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractService,com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> <init>
    void call(com.google.common.util.concurrent.Service$Listener) -> call
    java.lang.String toString() -> toString
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.AbstractService$6 -> com.google.common.util.concurrent.AbstractService$6:
    int[] $SwitchMap$com$google$common$util$concurrent$Service$State -> $SwitchMap$com$google$common$util$concurrent$Service$State
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard -> com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard:
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractService) -> <init>
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$IsStartableGuard -> com.google.common.util.concurrent.AbstractService$IsStartableGuard:
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractService) -> <init>
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$IsStoppableGuard -> com.google.common.util.concurrent.AbstractService$IsStoppableGuard:
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractService) -> <init>
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$IsStoppedGuard -> com.google.common.util.concurrent.AbstractService$IsStoppedGuard:
    com.google.common.util.concurrent.AbstractService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AbstractService) -> <init>
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.AbstractService$StateSnapshot -> com.google.common.util.concurrent.AbstractService$StateSnapshot:
    com.google.common.util.concurrent.Service$State state -> state
    boolean shutdownWhenStartupFinishes -> shutdownWhenStartupFinishes
    java.lang.Throwable failure -> failure
    void <init>(com.google.common.util.concurrent.Service$State) -> <init>
    void <init>(com.google.common.util.concurrent.Service$State,boolean,java.lang.Throwable) -> <init>
    com.google.common.util.concurrent.Service$State externalState() -> externalState
    java.lang.Throwable failureCause() -> failureCause
com.google.common.util.concurrent.AbstractTransformFuture -> com.google.common.util.concurrent.AbstractTransformFuture:
    com.google.common.util.concurrent.ListenableFuture inputFuture -> inputFuture
    java.lang.Object function -> function
    com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> create
    com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor) -> create
    void <init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Object) -> <init>
    void run() -> run
    java.lang.Object doTransform(java.lang.Object,java.lang.Object) -> doTransform
    void setResult(java.lang.Object) -> setResult
    void afterDone() -> afterDone
    java.lang.String pendingToString() -> pendingToString
com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture -> com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:
    void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction) -> <init>
    com.google.common.util.concurrent.ListenableFuture doTransform(com.google.common.util.concurrent.AsyncFunction,java.lang.Object) -> doTransform
    void setResult(com.google.common.util.concurrent.ListenableFuture) -> setResult
    void setResult(java.lang.Object) -> setResult
    java.lang.Object doTransform(java.lang.Object,java.lang.Object) -> doTransform
com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture -> com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:
    void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function) -> <init>
    java.lang.Object doTransform(com.google.common.base.Function,java.lang.Object) -> doTransform
    void setResult(java.lang.Object) -> setResult
    java.lang.Object doTransform(java.lang.Object,java.lang.Object) -> doTransform
com.google.common.util.concurrent.AggregateFuture -> com.google.common.util.concurrent.AggregateFuture:
    java.util.logging.Logger logger -> logger
    com.google.common.util.concurrent.AggregateFuture$RunningState runningState -> runningState
    void <init>() -> <init>
    void afterDone() -> afterDone
    java.lang.String pendingToString() -> pendingToString
    void init(com.google.common.util.concurrent.AggregateFuture$RunningState) -> init
    boolean addCausalChain(java.util.Set,java.lang.Throwable) -> addCausalChain
    boolean access$400(java.util.Set,java.lang.Throwable) -> access$400
    java.util.logging.Logger access$500() -> access$500
    com.google.common.util.concurrent.AggregateFuture$RunningState access$602(com.google.common.util.concurrent.AggregateFuture,com.google.common.util.concurrent.AggregateFuture$RunningState) -> access$602
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AggregateFuture$RunningState -> com.google.common.util.concurrent.AggregateFuture$RunningState:
    com.google.common.collect.ImmutableCollection futures -> futures
    boolean allMustSucceed -> allMustSucceed
    boolean collectsValues -> collectsValues
    com.google.common.util.concurrent.AggregateFuture this$0 -> this$0
    void <init>(com.google.common.util.concurrent.AggregateFuture,com.google.common.collect.ImmutableCollection,boolean,boolean) -> <init>
    void run() -> run
    void init() -> init
    void handleException(java.lang.Throwable) -> handleException
    void addInitialException(java.util.Set) -> addInitialException
    void handleOneInputDone(int,java.util.concurrent.Future) -> handleOneInputDone
    void decrementCountAndMaybeComplete() -> decrementCountAndMaybeComplete
    void processCompleted() -> processCompleted
    void releaseResourcesAfterFailure() -> releaseResourcesAfterFailure
    void collectOneValue(boolean,int,java.lang.Object) -> collectOneValue
    void handleAllCompleted() -> handleAllCompleted
    void interruptTask() -> interruptTask
    com.google.common.collect.ImmutableCollection access$000(com.google.common.util.concurrent.AggregateFuture$RunningState) -> access$000
    void access$100(com.google.common.util.concurrent.AggregateFuture$RunningState) -> access$100
    void access$200(com.google.common.util.concurrent.AggregateFuture$RunningState,int,java.util.concurrent.Future) -> access$200
    void access$300(com.google.common.util.concurrent.AggregateFuture$RunningState) -> access$300
com.google.common.util.concurrent.AggregateFuture$RunningState$1 -> com.google.common.util.concurrent.AggregateFuture$RunningState$1:
    int val$index -> val$index
    com.google.common.util.concurrent.ListenableFuture val$listenable -> val$listenable
    com.google.common.util.concurrent.AggregateFuture$RunningState this$1 -> this$1
    void <init>(com.google.common.util.concurrent.AggregateFuture$RunningState,int,com.google.common.util.concurrent.ListenableFuture) -> <init>
    void run() -> run
com.google.common.util.concurrent.AggregateFutureState -> com.google.common.util.concurrent.AggregateFutureState:
    java.util.Set seenExceptions -> seenExceptions
    int remaining -> remaining
    com.google.common.util.concurrent.AggregateFutureState$AtomicHelper ATOMIC_HELPER -> ATOMIC_HELPER
    java.util.logging.Logger log -> log
    void <init>(int) -> <init>
    java.util.Set getOrInitSeenExceptions() -> getOrInitSeenExceptions
    void addInitialException(java.util.Set) -> addInitialException
    int decrementRemainingAndGet() -> decrementRemainingAndGet
    java.util.Set access$200(com.google.common.util.concurrent.AggregateFutureState) -> access$200
    java.util.Set access$202(com.google.common.util.concurrent.AggregateFutureState,java.util.Set) -> access$202
    int access$310(com.google.common.util.concurrent.AggregateFutureState) -> access$310
    int access$300(com.google.common.util.concurrent.AggregateFutureState) -> access$300
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AggregateFutureState$1 -> com.google.common.util.concurrent.AggregateFutureState$1:
com.google.common.util.concurrent.AggregateFutureState$AtomicHelper -> com.google.common.util.concurrent.AggregateFutureState$AtomicHelper:
    void <init>() -> <init>
    void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set) -> compareAndSetSeenExceptions
    int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState) -> decrementAndGetRemainingCount
    void <init>(com.google.common.util.concurrent.AggregateFutureState$1) -> <init>
com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper -> com.google.common.util.concurrent.AggregateFutureState$SafeAtomicHelper:
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater seenExceptionsUpdater -> seenExceptionsUpdater
    java.util.concurrent.atomic.AtomicIntegerFieldUpdater remainingCountUpdater -> remainingCountUpdater
    void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicIntegerFieldUpdater) -> <init>
    void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set) -> compareAndSetSeenExceptions
    int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState) -> decrementAndGetRemainingCount
com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper -> com.google.common.util.concurrent.AggregateFutureState$SynchronizedAtomicHelper:
    void <init>() -> <init>
    void compareAndSetSeenExceptions(com.google.common.util.concurrent.AggregateFutureState,java.util.Set,java.util.Set) -> compareAndSetSeenExceptions
    int decrementAndGetRemainingCount(com.google.common.util.concurrent.AggregateFutureState) -> decrementAndGetRemainingCount
    void <init>(com.google.common.util.concurrent.AggregateFutureState$1) -> <init>
com.google.common.util.concurrent.AsyncCallable -> com.google.common.util.concurrent.AsyncCallable:
    com.google.common.util.concurrent.ListenableFuture call() -> call
com.google.common.util.concurrent.AsyncFunction -> com.google.common.util.concurrent.AsyncFunction:
    com.google.common.util.concurrent.ListenableFuture apply(java.lang.Object) -> apply
com.google.common.util.concurrent.AtomicDouble -> com.google.common.util.concurrent.AtomicDouble:
    long serialVersionUID -> serialVersionUID
    long value -> value
    java.util.concurrent.atomic.AtomicLongFieldUpdater updater -> updater
    void <init>(double) -> <init>
    void <init>() -> <init>
    double get() -> get
    void set(double) -> set
    void lazySet(double) -> lazySet
    double getAndSet(double) -> getAndSet
    boolean compareAndSet(double,double) -> compareAndSet
    boolean weakCompareAndSet(double,double) -> weakCompareAndSet
    double getAndAdd(double) -> getAndAdd
    double addAndGet(double) -> addAndGet
    java.lang.String toString() -> toString
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.AtomicDoubleArray -> com.google.common.util.concurrent.AtomicDoubleArray:
    long serialVersionUID -> serialVersionUID
    java.util.concurrent.atomic.AtomicLongArray longs -> longs
    void <init>(int) -> <init>
    void <init>(double[]) -> <init>
    int length() -> length
    double get(int) -> get
    void set(int,double) -> set
    void lazySet(int,double) -> lazySet
    double getAndSet(int,double) -> getAndSet
    boolean compareAndSet(int,double,double) -> compareAndSet
    boolean weakCompareAndSet(int,double,double) -> weakCompareAndSet
    double getAndAdd(int,double) -> getAndAdd
    double addAndGet(int,double) -> addAndGet
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
com.google.common.util.concurrent.AtomicLongMap -> com.google.common.util.concurrent.AtomicLongMap:
    java.util.concurrent.ConcurrentHashMap map -> map
    java.util.Map asMap -> asMap
    void <init>(java.util.concurrent.ConcurrentHashMap) -> <init>
    com.google.common.util.concurrent.AtomicLongMap create() -> create
    com.google.common.util.concurrent.AtomicLongMap create(java.util.Map) -> create
    long get(java.lang.Object) -> get
    long incrementAndGet(java.lang.Object) -> incrementAndGet
    long decrementAndGet(java.lang.Object) -> decrementAndGet
    long addAndGet(java.lang.Object,long) -> addAndGet
    long getAndIncrement(java.lang.Object) -> getAndIncrement
    long getAndDecrement(java.lang.Object) -> getAndDecrement
    long getAndAdd(java.lang.Object,long) -> getAndAdd
    long updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator) -> updateAndGet
    long getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator) -> getAndUpdate
    long accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator) -> accumulateAndGet
    long getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator) -> getAndAccumulate
    long put(java.lang.Object,long) -> put
    void putAll(java.util.Map) -> putAll
    long remove(java.lang.Object) -> remove
    boolean remove(java.lang.Object,long) -> remove
    boolean removeIfZero(java.lang.Object) -> removeIfZero
    void removeAllZeros() -> removeAllZeros
    long sum() -> sum
    java.util.Map asMap() -> asMap
    java.util.Map createAsMap() -> createAsMap
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    java.lang.String toString() -> toString
    long putIfAbsent(java.lang.Object,long) -> putIfAbsent
    boolean replace(java.lang.Object,long,long) -> replace
    java.lang.Long lambda$putIfAbsent$6(java.util.concurrent.atomic.AtomicBoolean,long,java.lang.Object,java.lang.Long) -> lambda$putIfAbsent$6
    boolean lambda$removeAllZeros$5(java.lang.Long) -> lambda$removeAllZeros$5
    long lambda$put$4(long,long) -> lambda$put$4
    long lambda$getAndAccumulate$3(java.util.function.LongBinaryOperator,long,long) -> lambda$getAndAccumulate$3
    long lambda$accumulateAndGet$2(java.util.function.LongBinaryOperator,long,long) -> lambda$accumulateAndGet$2
    java.lang.Long lambda$getAndUpdate$1(java.util.concurrent.atomic.AtomicLong,java.util.function.LongUnaryOperator,java.lang.Object,java.lang.Long) -> lambda$getAndUpdate$1
    java.lang.Long lambda$updateAndGet$0(java.util.function.LongUnaryOperator,java.lang.Object,java.lang.Long) -> lambda$updateAndGet$0
com.google.common.util.concurrent.Atomics -> com.google.common.util.concurrent.Atomics:
    void <init>() -> <init>
    java.util.concurrent.atomic.AtomicReference newReference() -> newReference
    java.util.concurrent.atomic.AtomicReference newReference(java.lang.Object) -> newReference
    java.util.concurrent.atomic.AtomicReferenceArray newReferenceArray(int) -> newReferenceArray
    java.util.concurrent.atomic.AtomicReferenceArray newReferenceArray(java.lang.Object[]) -> newReferenceArray
com.google.common.util.concurrent.Callables -> com.google.common.util.concurrent.Callables:
    void <init>() -> <init>
    java.util.concurrent.Callable returning(java.lang.Object) -> returning
    com.google.common.util.concurrent.AsyncCallable asAsyncCallable(java.util.concurrent.Callable,com.google.common.util.concurrent.ListeningExecutorService) -> asAsyncCallable
    java.util.concurrent.Callable threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier) -> threadRenaming
    java.lang.Runnable threadRenaming(java.lang.Runnable,com.google.common.base.Supplier) -> threadRenaming
    boolean trySetName(java.lang.String,java.lang.Thread) -> trySetName
    boolean access$000(java.lang.String,java.lang.Thread) -> access$000
com.google.common.util.concurrent.Callables$1 -> com.google.common.util.concurrent.Callables$1:
    java.lang.Object val$value -> val$value
    void <init>(java.lang.Object) -> <init>
    java.lang.Object call() -> call
com.google.common.util.concurrent.Callables$2 -> com.google.common.util.concurrent.Callables$2:
    com.google.common.util.concurrent.ListeningExecutorService val$listeningExecutorService -> val$listeningExecutorService
    java.util.concurrent.Callable val$callable -> val$callable
    void <init>(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable) -> <init>
    com.google.common.util.concurrent.ListenableFuture call() -> call
com.google.common.util.concurrent.Callables$3 -> com.google.common.util.concurrent.Callables$3:
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    java.util.concurrent.Callable val$callable -> val$callable
    void <init>(com.google.common.base.Supplier,java.util.concurrent.Callable) -> <init>
    java.lang.Object call() -> call
com.google.common.util.concurrent.Callables$4 -> com.google.common.util.concurrent.Callables$4:
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    java.lang.Runnable val$task -> val$task
    void <init>(com.google.common.base.Supplier,java.lang.Runnable) -> <init>
    void run() -> run
com.google.common.util.concurrent.CheckedFuture -> com.google.common.util.concurrent.CheckedFuture:
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
com.google.common.util.concurrent.CollectionFuture -> com.google.common.util.concurrent.CollectionFuture:
    void <init>() -> <init>
com.google.common.util.concurrent.CollectionFuture$CollectionFutureRunningState -> com.google.common.util.concurrent.CollectionFuture$CollectionFutureRunningState:
    java.util.List values -> values
    com.google.common.util.concurrent.CollectionFuture this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CollectionFuture,com.google.common.collect.ImmutableCollection,boolean) -> <init>
    void collectOneValue(boolean,int,java.lang.Object) -> collectOneValue
    void handleAllCompleted() -> handleAllCompleted
    void releaseResourcesAfterFailure() -> releaseResourcesAfterFailure
    java.lang.Object combine(java.util.List) -> combine
com.google.common.util.concurrent.CollectionFuture$ListFuture -> com.google.common.util.concurrent.CollectionFuture$ListFuture:
    void <init>(com.google.common.collect.ImmutableCollection,boolean) -> <init>
com.google.common.util.concurrent.CollectionFuture$ListFuture$ListFutureRunningState -> com.google.common.util.concurrent.CollectionFuture$ListFuture$ListFutureRunningState:
    com.google.common.util.concurrent.CollectionFuture$ListFuture this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CollectionFuture$ListFuture,com.google.common.collect.ImmutableCollection,boolean) -> <init>
    java.util.List combine(java.util.List) -> combine
    java.lang.Object combine(java.util.List) -> combine
com.google.common.util.concurrent.CombinedFuture -> com.google.common.util.concurrent.CombinedFuture:
    void <init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,com.google.common.util.concurrent.AsyncCallable) -> <init>
    void <init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,java.util.concurrent.Callable) -> <init>
com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask -> com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:
    com.google.common.util.concurrent.AsyncCallable callable -> callable
    com.google.common.util.concurrent.CombinedFuture this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CombinedFuture,com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor) -> <init>
    com.google.common.util.concurrent.ListenableFuture runInterruptibly() -> runInterruptibly
    void setValue(com.google.common.util.concurrent.ListenableFuture) -> setValue
    java.lang.String toPendingString() -> toPendingString
    void setValue(java.lang.Object) -> setValue
    java.lang.Object runInterruptibly() -> runInterruptibly
com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask -> com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask:
    java.util.concurrent.Callable callable -> callable
    com.google.common.util.concurrent.CombinedFuture this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CombinedFuture,java.util.concurrent.Callable,java.util.concurrent.Executor) -> <init>
    java.lang.Object runInterruptibly() -> runInterruptibly
    void setValue(java.lang.Object) -> setValue
    java.lang.String toPendingString() -> toPendingString
com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask -> com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask:
    java.util.concurrent.Executor listenerExecutor -> listenerExecutor
    boolean thrownByExecute -> thrownByExecute
    com.google.common.util.concurrent.CombinedFuture this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CombinedFuture,java.util.concurrent.Executor) -> <init>
    boolean isDone() -> isDone
    void execute() -> execute
    void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> afterRanInterruptibly
    void setValue(java.lang.Object) -> setValue
com.google.common.util.concurrent.CombinedFuture$CombinedFutureRunningState -> com.google.common.util.concurrent.CombinedFuture$CombinedFutureRunningState:
    com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask task -> task
    com.google.common.util.concurrent.CombinedFuture this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CombinedFuture,com.google.common.collect.ImmutableCollection,boolean,com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask) -> <init>
    void collectOneValue(boolean,int,java.lang.Object) -> collectOneValue
    void handleAllCompleted() -> handleAllCompleted
    void releaseResourcesAfterFailure() -> releaseResourcesAfterFailure
    void interruptTask() -> interruptTask
com.google.common.util.concurrent.CycleDetectingLockFactory -> com.google.common.util.concurrent.CycleDetectingLockFactory:
    java.util.concurrent.ConcurrentMap lockGraphNodesPerType -> lockGraphNodesPerType
    java.util.logging.Logger logger -> logger
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policy policy -> policy
    java.lang.ThreadLocal acquiredLocks -> acquiredLocks
    com.google.common.util.concurrent.CycleDetectingLockFactory newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy) -> newInstance
    java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String) -> newReentrantLock
    java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String,boolean) -> newReentrantLock
    java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String) -> newReentrantReadWriteLock
    java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String,boolean) -> newReentrantReadWriteLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy) -> newInstanceWithExplicitOrdering
    java.util.Map getOrCreateNodes(java.lang.Class) -> getOrCreateNodes
    java.util.Map createNodes(java.lang.Class) -> createNodes
    java.lang.String getLockName(java.lang.Enum) -> getLockName
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy) -> <init>
    void aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> aboutToAcquire
    void lockStateChanged(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> lockStateChanged
    java.util.logging.Logger access$100() -> access$100
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$1) -> <init>
    void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> access$600
    void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock) -> access$700
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.CycleDetectingLockFactory$1 -> com.google.common.util.concurrent.CycleDetectingLockFactory$1:
    void <init>() -> <init>
    java.util.ArrayList initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode() -> getLockGraphNode
    boolean isAcquiredByCurrentThread() -> isAcquiredByCurrentThread
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode -> lockGraphNode
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean) -> <init>
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode() -> getLockGraphNode
    boolean isAcquiredByCurrentThread() -> isAcquiredByCurrentThread
    void lock() -> lock
    void lockInterruptibly() -> lockInterruptibly
    boolean tryLock() -> tryLock
    boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    void unlock() -> unlock
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean,com.google.common.util.concurrent.CycleDetectingLockFactory$1) -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock -> readWriteLock
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock) -> <init>
    void lock() -> lock
    void lockInterruptibly() -> lockInterruptibly
    boolean tryLock() -> tryLock
    boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    void unlock() -> unlock
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock readLock -> readLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock writeLock -> writeLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode lockGraphNode -> lockGraphNode
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean) -> <init>
    java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock() -> readLock
    java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock() -> writeLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode getLockGraphNode() -> getLockGraphNode
    boolean isAcquiredByCurrentThread() -> isAcquiredByCurrentThread
    java.util.concurrent.locks.Lock writeLock() -> writeLock
    java.util.concurrent.locks.Lock readLock() -> readLock
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,boolean,com.google.common.util.concurrent.CycleDetectingLockFactory$1) -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock -> com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock:
    com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock readWriteLock -> readWriteLock
    com.google.common.util.concurrent.CycleDetectingLockFactory this$0 -> this$0
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory,com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock) -> <init>
    void lock() -> lock
    void lockInterruptibly() -> lockInterruptibly
    boolean tryLock() -> tryLock
    boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    void unlock() -> unlock
com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace -> com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace:
    java.lang.StackTraceElement[] EMPTY_STACK_TRACE -> EMPTY_STACK_TRACE
    com.google.common.collect.ImmutableSet EXCLUDED_CLASS_NAMES -> EXCLUDED_CLASS_NAMES
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode -> com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:
    java.util.Map allowedPriorLocks -> allowedPriorLocks
    java.util.Map disallowedPriorLocks -> disallowedPriorLocks
    java.lang.String lockName -> lockName
    void <init>(java.lang.String) -> <init>
    java.lang.String getLockName() -> getLockName
    void checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List) -> checkAcquiredLocks
    void checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) -> checkAcquiredLock
    com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set) -> findPathTo
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies:
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies THROW -> THROW
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies WARN -> WARN
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies DISABLED -> DISABLED
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] $VALUES -> $VALUES
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] values() -> values
    com.google.common.util.concurrent.CycleDetectingLockFactory$Policies valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,com.google.common.util.concurrent.CycleDetectingLockFactory$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1 -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1:
    void <init>(java.lang.String,int) -> <init>
    void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2 -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2:
    void <init>(java.lang.String,int) -> <init>
    void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3 -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3:
    void <init>(java.lang.String,int) -> <init>
    void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$Policy -> com.google.common.util.concurrent.CycleDetectingLockFactory$Policy:
    void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException) -> handlePotentialDeadlock
com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException -> com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:
    com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace conflictingStackTrace -> conflictingStackTrace
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace) -> <init>
    com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace getConflictingStackTrace() -> getConflictingStackTrace
    java.lang.String getMessage() -> getMessage
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace,com.google.common.util.concurrent.CycleDetectingLockFactory$1) -> <init>
com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering -> com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering:
    java.util.Map lockGraphNodes -> lockGraphNodes
    void <init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.Map) -> <init>
    java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.Enum) -> newReentrantLock
    java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.Enum,boolean) -> newReentrantLock
    java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.Enum) -> newReentrantReadWriteLock
    java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.Enum,boolean) -> newReentrantReadWriteLock
com.google.common.util.concurrent.DirectExecutor -> com.google.common.util.concurrent.DirectExecutor:
    com.google.common.util.concurrent.DirectExecutor INSTANCE -> INSTANCE
    com.google.common.util.concurrent.DirectExecutor[] $VALUES -> $VALUES
    com.google.common.util.concurrent.DirectExecutor[] values() -> values
    com.google.common.util.concurrent.DirectExecutor valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void execute(java.lang.Runnable) -> execute
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.ExecutionError -> com.google.common.util.concurrent.ExecutionError:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Error) -> <init>
    void <init>(java.lang.Error) -> <init>
com.google.common.util.concurrent.ExecutionList -> com.google.common.util.concurrent.ExecutionList:
    java.util.logging.Logger log -> log
    com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair runnables -> runnables
    boolean executed -> executed
    void <init>() -> <init>
    void add(java.lang.Runnable,java.util.concurrent.Executor) -> add
    void execute() -> execute
    void executeListener(java.lang.Runnable,java.util.concurrent.Executor) -> executeListener
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair -> com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair:
    java.lang.Runnable runnable -> runnable
    java.util.concurrent.Executor executor -> executor
    com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair next -> next
    void <init>(java.lang.Runnable,java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionList$RunnableExecutorPair) -> <init>
com.google.common.util.concurrent.ExecutionSequencer -> com.google.common.util.concurrent.ExecutionSequencer:
    java.util.concurrent.atomic.AtomicReference ref -> ref
    void <init>() -> <init>
    com.google.common.util.concurrent.ExecutionSequencer create() -> create
    com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable,java.util.concurrent.Executor) -> submit
    com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor) -> submitAsync
com.google.common.util.concurrent.ExecutionSequencer$1 -> com.google.common.util.concurrent.ExecutionSequencer$1:
    java.util.concurrent.Callable val$callable -> val$callable
    com.google.common.util.concurrent.ExecutionSequencer this$0 -> this$0
    void <init>(com.google.common.util.concurrent.ExecutionSequencer,java.util.concurrent.Callable) -> <init>
    com.google.common.util.concurrent.ListenableFuture call() -> call
    java.lang.String toString() -> toString
com.google.common.util.concurrent.ExecutionSequencer$2 -> com.google.common.util.concurrent.ExecutionSequencer$2:
    java.util.concurrent.atomic.AtomicReference val$runningState -> val$runningState
    com.google.common.util.concurrent.AsyncCallable val$callable -> val$callable
    com.google.common.util.concurrent.ExecutionSequencer this$0 -> this$0
    void <init>(com.google.common.util.concurrent.ExecutionSequencer,java.util.concurrent.atomic.AtomicReference,com.google.common.util.concurrent.AsyncCallable) -> <init>
    com.google.common.util.concurrent.ListenableFuture call() -> call
    java.lang.String toString() -> toString
com.google.common.util.concurrent.ExecutionSequencer$3 -> com.google.common.util.concurrent.ExecutionSequencer$3:
    com.google.common.util.concurrent.ListenableFuture val$oldFuture -> val$oldFuture
    java.util.concurrent.Executor val$executor -> val$executor
    com.google.common.util.concurrent.ExecutionSequencer this$0 -> this$0
    void <init>(com.google.common.util.concurrent.ExecutionSequencer,com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.Executor) -> <init>
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.ExecutionSequencer$4 -> com.google.common.util.concurrent.ExecutionSequencer$4:
    com.google.common.util.concurrent.ListenableFuture val$taskFuture -> val$taskFuture
    com.google.common.util.concurrent.ListenableFuture val$outputFuture -> val$outputFuture
    java.util.concurrent.atomic.AtomicReference val$runningState -> val$runningState
    com.google.common.util.concurrent.SettableFuture val$newFuture -> val$newFuture
    com.google.common.util.concurrent.ListenableFuture val$oldFuture -> val$oldFuture
    com.google.common.util.concurrent.ExecutionSequencer this$0 -> this$0
    void <init>(com.google.common.util.concurrent.ExecutionSequencer,com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.atomic.AtomicReference,com.google.common.util.concurrent.SettableFuture,com.google.common.util.concurrent.ListenableFuture) -> <init>
    void run() -> run
com.google.common.util.concurrent.ExecutionSequencer$RunningState -> com.google.common.util.concurrent.ExecutionSequencer$RunningState:
    com.google.common.util.concurrent.ExecutionSequencer$RunningState NOT_RUN -> NOT_RUN
    com.google.common.util.concurrent.ExecutionSequencer$RunningState CANCELLED -> CANCELLED
    com.google.common.util.concurrent.ExecutionSequencer$RunningState STARTED -> STARTED
    com.google.common.util.concurrent.ExecutionSequencer$RunningState[] $VALUES -> $VALUES
    com.google.common.util.concurrent.ExecutionSequencer$RunningState[] values() -> values
    com.google.common.util.concurrent.ExecutionSequencer$RunningState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.FakeTimeLimiter -> com.google.common.util.concurrent.FakeTimeLimiter:
    void <init>() -> <init>
    java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit) -> newProxy
    java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callWithTimeout
    java.lang.Object callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callUninterruptiblyWithTimeout
    void runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runWithTimeout
    void runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runUninterruptiblyWithTimeout
com.google.common.util.concurrent.FluentFuture -> com.google.common.util.concurrent.FluentFuture:
    void <init>() -> <init>
    com.google.common.util.concurrent.FluentFuture from(com.google.common.util.concurrent.ListenableFuture) -> from
    com.google.common.util.concurrent.FluentFuture catching(java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor) -> catching
    com.google.common.util.concurrent.FluentFuture catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> catchingAsync
    com.google.common.util.concurrent.FluentFuture withTimeout(long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService) -> withTimeout
    com.google.common.util.concurrent.FluentFuture transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> transformAsync
    com.google.common.util.concurrent.FluentFuture transform(com.google.common.base.Function,java.util.concurrent.Executor) -> transform
    void addCallback(com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor) -> addCallback
com.google.common.util.concurrent.FluentFuture$TrustedFuture -> com.google.common.util.concurrent.FluentFuture$TrustedFuture:
    void <init>() -> <init>
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    boolean isDone() -> isDone
    boolean isCancelled() -> isCancelled
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    boolean cancel(boolean) -> cancel
com.google.common.util.concurrent.ForwardingBlockingDeque -> com.google.common.util.concurrent.ForwardingBlockingDeque:
    void <init>() -> <init>
    java.util.concurrent.BlockingDeque delegate() -> delegate
    int remainingCapacity() -> remainingCapacity
    void putFirst(java.lang.Object) -> putFirst
    void putLast(java.lang.Object) -> putLast
    boolean offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerFirst
    boolean offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offerLast
    java.lang.Object takeFirst() -> takeFirst
    java.lang.Object takeLast() -> takeLast
    java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit) -> pollFirst
    java.lang.Object pollLast(long,java.util.concurrent.TimeUnit) -> pollLast
    void put(java.lang.Object) -> put
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    java.lang.Object take() -> take
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    int drainTo(java.util.Collection) -> drainTo
    int drainTo(java.util.Collection,int) -> drainTo
    java.util.Deque delegate() -> delegate
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingBlockingQueue -> com.google.common.util.concurrent.ForwardingBlockingQueue:
    void <init>() -> <init>
    java.util.concurrent.BlockingQueue delegate() -> delegate
    int drainTo(java.util.Collection,int) -> drainTo
    int drainTo(java.util.Collection) -> drainTo
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    void put(java.lang.Object) -> put
    int remainingCapacity() -> remainingCapacity
    java.lang.Object take() -> take
    java.util.Queue delegate() -> delegate
    java.util.Collection delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingCheckedFuture -> com.google.common.util.concurrent.ForwardingCheckedFuture:
    void <init>() -> <init>
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
    com.google.common.util.concurrent.CheckedFuture delegate() -> delegate
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture -> com.google.common.util.concurrent.ForwardingCheckedFuture$SimpleForwardingCheckedFuture:
    com.google.common.util.concurrent.CheckedFuture delegate -> delegate
    void <init>(com.google.common.util.concurrent.CheckedFuture) -> <init>
    com.google.common.util.concurrent.CheckedFuture delegate() -> delegate
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingCondition -> com.google.common.util.concurrent.ForwardingCondition:
    void <init>() -> <init>
    java.util.concurrent.locks.Condition delegate() -> delegate
    void await() -> await
    boolean await(long,java.util.concurrent.TimeUnit) -> await
    void awaitUninterruptibly() -> awaitUninterruptibly
    long awaitNanos(long) -> awaitNanos
    boolean awaitUntil(java.util.Date) -> awaitUntil
    void signal() -> signal
    void signalAll() -> signalAll
com.google.common.util.concurrent.ForwardingExecutorService -> com.google.common.util.concurrent.ForwardingExecutorService:
    void <init>() -> <init>
    java.util.concurrent.ExecutorService delegate() -> delegate
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    java.util.List invokeAll(java.util.Collection) -> invokeAll
    java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAll
    java.lang.Object invokeAny(java.util.Collection) -> invokeAny
    java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAny
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    void execute(java.lang.Runnable) -> execute
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingFluentFuture -> com.google.common.util.concurrent.ForwardingFluentFuture:
    com.google.common.util.concurrent.ListenableFuture delegate -> delegate
    void <init>(com.google.common.util.concurrent.ListenableFuture) -> <init>
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    boolean cancel(boolean) -> cancel
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
com.google.common.util.concurrent.ForwardingFuture -> com.google.common.util.concurrent.ForwardingFuture:
    void <init>() -> <init>
    java.util.concurrent.Future delegate() -> delegate
    boolean cancel(boolean) -> cancel
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture -> com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:
    java.util.concurrent.Future delegate -> delegate
    void <init>(java.util.concurrent.Future) -> <init>
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingListenableFuture -> com.google.common.util.concurrent.ForwardingListenableFuture:
    void <init>() -> <init>
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture -> com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:
    com.google.common.util.concurrent.ListenableFuture delegate -> delegate
    void <init>(com.google.common.util.concurrent.ListenableFuture) -> <init>
    com.google.common.util.concurrent.ListenableFuture delegate() -> delegate
    java.util.concurrent.Future delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingListeningExecutorService -> com.google.common.util.concurrent.ForwardingListeningExecutorService:
    void <init>() -> <init>
    com.google.common.util.concurrent.ListeningExecutorService delegate() -> delegate
    com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.ExecutorService delegate() -> delegate
    java.lang.Object delegate() -> delegate
com.google.common.util.concurrent.ForwardingLock -> com.google.common.util.concurrent.ForwardingLock:
    void <init>() -> <init>
    java.util.concurrent.locks.Lock delegate() -> delegate
    void lock() -> lock
    void lockInterruptibly() -> lockInterruptibly
    boolean tryLock() -> tryLock
    boolean tryLock(long,java.util.concurrent.TimeUnit) -> tryLock
    void unlock() -> unlock
    java.util.concurrent.locks.Condition newCondition() -> newCondition
com.google.common.util.concurrent.FutureCallback -> com.google.common.util.concurrent.FutureCallback:
    void onSuccess(java.lang.Object) -> onSuccess
    void onFailure(java.lang.Throwable) -> onFailure
com.google.common.util.concurrent.Futures -> com.google.common.util.concurrent.Futures:
    void <init>() -> <init>
    com.google.common.util.concurrent.CheckedFuture makeChecked(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function) -> makeChecked
    com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object) -> immediateFuture
    com.google.common.util.concurrent.CheckedFuture immediateCheckedFuture(java.lang.Object) -> immediateCheckedFuture
    com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable) -> immediateFailedFuture
    com.google.common.util.concurrent.ListenableFuture immediateCancelledFuture() -> immediateCancelledFuture
    com.google.common.util.concurrent.CheckedFuture immediateFailedCheckedFuture(java.lang.Exception) -> immediateFailedCheckedFuture
    com.google.common.util.concurrent.ListenableFuture submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor) -> submitAsync
    com.google.common.util.concurrent.ListenableFuture scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService) -> scheduleAsync
    com.google.common.util.concurrent.ListenableFuture catching(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor) -> catching
    com.google.common.util.concurrent.ListenableFuture catchingAsync(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> catchingAsync
    com.google.common.util.concurrent.ListenableFuture withTimeout(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService) -> withTimeout
    com.google.common.util.concurrent.ListenableFuture transformAsync(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor) -> transformAsync
    com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor) -> transform
    java.util.concurrent.Future lazyTransform(java.util.concurrent.Future,com.google.common.base.Function) -> lazyTransform
    com.google.common.util.concurrent.ListenableFuture allAsList(com.google.common.util.concurrent.ListenableFuture[]) -> allAsList
    com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable) -> allAsList
    com.google.common.util.concurrent.Futures$FutureCombiner whenAllComplete(com.google.common.util.concurrent.ListenableFuture[]) -> whenAllComplete
    com.google.common.util.concurrent.Futures$FutureCombiner whenAllComplete(java.lang.Iterable) -> whenAllComplete
    com.google.common.util.concurrent.Futures$FutureCombiner whenAllSucceed(com.google.common.util.concurrent.ListenableFuture[]) -> whenAllSucceed
    com.google.common.util.concurrent.Futures$FutureCombiner whenAllSucceed(java.lang.Iterable) -> whenAllSucceed
    com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture) -> nonCancellationPropagating
    com.google.common.util.concurrent.ListenableFuture successfulAsList(com.google.common.util.concurrent.ListenableFuture[]) -> successfulAsList
    com.google.common.util.concurrent.ListenableFuture successfulAsList(java.lang.Iterable) -> successfulAsList
    com.google.common.collect.ImmutableList inCompletionOrder(java.lang.Iterable) -> inCompletionOrder
    void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor) -> addCallback
    java.lang.Object getDone(java.util.concurrent.Future) -> getDone
    java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class) -> getChecked
    java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit) -> getChecked
    java.lang.Object getUnchecked(java.util.concurrent.Future) -> getUnchecked
    void wrapAndThrowUnchecked(java.lang.Throwable) -> wrapAndThrowUnchecked
com.google.common.util.concurrent.Futures$1 -> com.google.common.util.concurrent.Futures$1:
    java.util.concurrent.Future val$scheduled -> val$scheduled
    void <init>(java.util.concurrent.Future) -> <init>
    void run() -> run
com.google.common.util.concurrent.Futures$2 -> com.google.common.util.concurrent.Futures$2:
    java.util.concurrent.Future val$input -> val$input
    com.google.common.base.Function val$function -> val$function
    void <init>(java.util.concurrent.Future,com.google.common.base.Function) -> <init>
    boolean cancel(boolean) -> cancel
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    java.lang.Object applyTransformation(java.lang.Object) -> applyTransformation
com.google.common.util.concurrent.Futures$3 -> com.google.common.util.concurrent.Futures$3:
    com.google.common.util.concurrent.Futures$InCompletionOrderState val$state -> val$state
    com.google.common.collect.ImmutableList val$delegates -> val$delegates
    int val$localI -> val$localI
    void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState,com.google.common.collect.ImmutableList,int) -> <init>
    void run() -> run
com.google.common.util.concurrent.Futures$CallbackListener -> com.google.common.util.concurrent.Futures$CallbackListener:
    java.util.concurrent.Future future -> future
    com.google.common.util.concurrent.FutureCallback callback -> callback
    void <init>(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback) -> <init>
    void run() -> run
    java.lang.String toString() -> toString
com.google.common.util.concurrent.Futures$FutureCombiner -> com.google.common.util.concurrent.Futures$FutureCombiner:
    boolean allMustSucceed -> allMustSucceed
    com.google.common.collect.ImmutableList futures -> futures
    void <init>(boolean,com.google.common.collect.ImmutableList) -> <init>
    com.google.common.util.concurrent.ListenableFuture callAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor) -> callAsync
    com.google.common.util.concurrent.ListenableFuture call(java.util.concurrent.Callable,java.util.concurrent.Executor) -> call
    com.google.common.util.concurrent.ListenableFuture run(java.lang.Runnable,java.util.concurrent.Executor) -> run
    void <init>(boolean,com.google.common.collect.ImmutableList,com.google.common.util.concurrent.Futures$1) -> <init>
com.google.common.util.concurrent.Futures$FutureCombiner$1 -> com.google.common.util.concurrent.Futures$FutureCombiner$1:
    java.lang.Runnable val$combiner -> val$combiner
    com.google.common.util.concurrent.Futures$FutureCombiner this$0 -> this$0
    void <init>(com.google.common.util.concurrent.Futures$FutureCombiner,java.lang.Runnable) -> <init>
    java.lang.Void call() -> call
    java.lang.Object call() -> call
com.google.common.util.concurrent.Futures$InCompletionOrderFuture -> com.google.common.util.concurrent.Futures$InCompletionOrderFuture:
    com.google.common.util.concurrent.Futures$InCompletionOrderState state -> state
    void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState) -> <init>
    boolean cancel(boolean) -> cancel
    void afterDone() -> afterDone
    java.lang.String pendingToString() -> pendingToString
    void <init>(com.google.common.util.concurrent.Futures$InCompletionOrderState,com.google.common.util.concurrent.Futures$1) -> <init>
com.google.common.util.concurrent.Futures$InCompletionOrderState -> com.google.common.util.concurrent.Futures$InCompletionOrderState:
    boolean wasCancelled -> wasCancelled
    boolean shouldInterrupt -> shouldInterrupt
    java.util.concurrent.atomic.AtomicInteger incompleteOutputCount -> incompleteOutputCount
    com.google.common.util.concurrent.ListenableFuture[] inputFutures -> inputFutures
    int delegateIndex -> delegateIndex
    void <init>(com.google.common.util.concurrent.ListenableFuture[]) -> <init>
    void recordOutputCancellation(boolean) -> recordOutputCancellation
    void recordInputCompletion(com.google.common.collect.ImmutableList,int) -> recordInputCompletion
    void recordCompletion() -> recordCompletion
    void <init>(com.google.common.util.concurrent.ListenableFuture[],com.google.common.util.concurrent.Futures$1) -> <init>
    void access$300(com.google.common.util.concurrent.Futures$InCompletionOrderState,com.google.common.collect.ImmutableList,int) -> access$300
    void access$400(com.google.common.util.concurrent.Futures$InCompletionOrderState,boolean) -> access$400
    com.google.common.util.concurrent.ListenableFuture[] access$500(com.google.common.util.concurrent.Futures$InCompletionOrderState) -> access$500
    java.util.concurrent.atomic.AtomicInteger access$600(com.google.common.util.concurrent.Futures$InCompletionOrderState) -> access$600
com.google.common.util.concurrent.Futures$MappingCheckedFuture -> com.google.common.util.concurrent.Futures$MappingCheckedFuture:
    com.google.common.base.Function mapper -> mapper
    void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function) -> <init>
    java.lang.Exception mapException(java.lang.Exception) -> mapException
com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture -> com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:
    com.google.common.util.concurrent.ListenableFuture delegate -> delegate
    void <init>(com.google.common.util.concurrent.ListenableFuture) -> <init>
    void run() -> run
    java.lang.String pendingToString() -> pendingToString
    void afterDone() -> afterDone
com.google.common.util.concurrent.FuturesGetChecked -> com.google.common.util.concurrent.FuturesGetChecked:
    com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST -> WITH_STRING_PARAM_FIRST
    java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class) -> getChecked
    java.lang.Object getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class) -> getChecked
    java.lang.Object getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit) -> getChecked
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator bestGetCheckedTypeValidator() -> bestGetCheckedTypeValidator
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator weakSetValidator() -> weakSetValidator
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator classValueValidator() -> classValueValidator
    void wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class) -> wrapAndThrowExceptionOrError
    boolean hasConstructorUsableByGetChecked(java.lang.Class) -> hasConstructorUsableByGetChecked
    java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable) -> newWithCause
    java.util.List preferringStrings(java.util.List) -> preferringStrings
    java.lang.Object newFromConstructor(java.lang.reflect.Constructor,java.lang.Throwable) -> newFromConstructor
    boolean isCheckedException(java.lang.Class) -> isCheckedException
    void checkExceptionClassValidity(java.lang.Class) -> checkExceptionClassValidity
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.FuturesGetChecked$1 -> com.google.common.util.concurrent.FuturesGetChecked$1:
    void <init>() -> <init>
    java.lang.Boolean apply(java.lang.reflect.Constructor) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator -> com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator:
    void validateClass(java.lang.Class) -> validateClass
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder -> com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder:
    java.lang.String CLASS_VALUE_VALIDATOR_NAME -> CLASS_VALUE_VALIDATOR_NAME
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator BEST_VALIDATOR -> BEST_VALIDATOR
    void <init>() -> <init>
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator getBestValidator() -> getBestValidator
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator -> com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator:
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator INSTANCE -> INSTANCE
    java.lang.ClassValue isValidClass -> isValidClass
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator[] $VALUES -> $VALUES
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator[] values() -> values
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void validateClass(java.lang.Class) -> validateClass
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator$1 -> com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator$1:
    void <init>() -> <init>
    java.lang.Boolean computeValue(java.lang.Class) -> computeValue
    java.lang.Object computeValue(java.lang.Class) -> computeValue
com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator -> com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator:
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator INSTANCE -> INSTANCE
    java.util.Set validClasses -> validClasses
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator[] $VALUES -> $VALUES
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator[] values() -> values
    com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void validateClass(java.lang.Class) -> validateClass
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization -> com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization:
    void <init>() -> <init>
com.google.common.util.concurrent.GwtFuturesCatchingSpecialization -> com.google.common.util.concurrent.GwtFuturesCatchingSpecialization:
    void <init>() -> <init>
com.google.common.util.concurrent.ImmediateFuture -> com.google.common.util.concurrent.ImmediateFuture:
    java.util.logging.Logger log -> log
    void <init>() -> <init>
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    boolean cancel(boolean) -> cancel
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture -> com.google.common.util.concurrent.ImmediateFuture$ImmediateCancelledFuture:
    void <init>() -> <init>
com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture -> com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture:
    java.lang.Exception thrown -> thrown
    void <init>(java.lang.Exception) -> <init>
    java.lang.Object get() -> get
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
    java.lang.String toString() -> toString
com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture -> com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedFuture:
    void <init>(java.lang.Throwable) -> <init>
com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture -> com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture:
    java.lang.Object value -> value
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
    java.lang.Object checkedGet() -> checkedGet
    java.lang.Object checkedGet(long,java.util.concurrent.TimeUnit) -> checkedGet
    java.lang.String toString() -> toString
com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture -> com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture:
    com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture NULL -> NULL
    java.lang.Object value -> value
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.InterruptibleTask -> com.google.common.util.concurrent.InterruptibleTask:
    java.lang.Runnable DONE -> DONE
    java.lang.Runnable INTERRUPTING -> INTERRUPTING
    void <init>() -> <init>
    void run() -> run
    boolean isDone() -> isDone
    java.lang.Object runInterruptibly() -> runInterruptibly
    void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> afterRanInterruptibly
    void interruptTask() -> interruptTask
    java.lang.String toString() -> toString
    java.lang.String toPendingString() -> toPendingString
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.InterruptibleTask$1 -> com.google.common.util.concurrent.InterruptibleTask$1:
com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable -> com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable:
    void <init>() -> <init>
    void run() -> run
    void <init>(com.google.common.util.concurrent.InterruptibleTask$1) -> <init>
com.google.common.util.concurrent.JdkFutureAdapters -> com.google.common.util.concurrent.JdkFutureAdapters:
    com.google.common.util.concurrent.ListenableFuture listenInPoolThread(java.util.concurrent.Future) -> listenInPoolThread
    com.google.common.util.concurrent.ListenableFuture listenInPoolThread(java.util.concurrent.Future,java.util.concurrent.Executor) -> listenInPoolThread
    void <init>() -> <init>
com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter -> com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:
    java.util.concurrent.ThreadFactory threadFactory -> threadFactory
    java.util.concurrent.Executor defaultAdapterExecutor -> defaultAdapterExecutor
    java.util.concurrent.Executor adapterExecutor -> adapterExecutor
    com.google.common.util.concurrent.ExecutionList executionList -> executionList
    java.util.concurrent.atomic.AtomicBoolean hasListeners -> hasListeners
    java.util.concurrent.Future delegate -> delegate
    void <init>(java.util.concurrent.Future) -> <init>
    void <init>(java.util.concurrent.Future,java.util.concurrent.Executor) -> <init>
    java.util.concurrent.Future delegate() -> delegate
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    java.lang.Object delegate() -> delegate
    java.util.concurrent.Future access$000(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> access$000
    com.google.common.util.concurrent.ExecutionList access$100(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> access$100
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1 -> com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1:
    com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter this$0 -> this$0
    void <init>(com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter) -> <init>
    void run() -> run
com.google.common.util.concurrent.ListenableFuture -> com.google.common.util.concurrent.ListenableFuture:
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
com.google.common.util.concurrent.ListenableFutureTask -> com.google.common.util.concurrent.ListenableFutureTask:
    com.google.common.util.concurrent.ExecutionList executionList -> executionList
    com.google.common.util.concurrent.ListenableFutureTask create(java.util.concurrent.Callable) -> create
    com.google.common.util.concurrent.ListenableFutureTask create(java.lang.Runnable,java.lang.Object) -> create
    void <init>(java.util.concurrent.Callable) -> <init>
    void <init>(java.lang.Runnable,java.lang.Object) -> <init>
    void addListener(java.lang.Runnable,java.util.concurrent.Executor) -> addListener
    void done() -> done
com.google.common.util.concurrent.ListenableScheduledFuture -> com.google.common.util.concurrent.ListenableScheduledFuture:
com.google.common.util.concurrent.ListenerCallQueue -> com.google.common.util.concurrent.ListenerCallQueue:
    java.util.logging.Logger logger -> logger
    java.util.List listeners -> listeners
    void <init>() -> <init>
    void addListener(java.lang.Object,java.util.concurrent.Executor) -> addListener
    void enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event) -> enqueue
    void enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.String) -> enqueue
    void enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object) -> enqueueHelper
    void dispatch() -> dispatch
    java.util.logging.Logger access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.ListenerCallQueue$Event -> com.google.common.util.concurrent.ListenerCallQueue$Event:
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue -> com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:
    java.lang.Object listener -> listener
    java.util.concurrent.Executor executor -> executor
    java.util.Queue waitQueue -> waitQueue
    java.util.Queue labelQueue -> labelQueue
    boolean isThreadScheduled -> isThreadScheduled
    void <init>(java.lang.Object,java.util.concurrent.Executor) -> <init>
    void add(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object) -> add
    void dispatch() -> dispatch
    void run() -> run
com.google.common.util.concurrent.ListeningExecutorService -> com.google.common.util.concurrent.ListeningExecutorService:
    com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable) -> submit
    com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.List invokeAll(java.util.Collection) -> invokeAll
    java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAll
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
com.google.common.util.concurrent.ListeningScheduledExecutorService -> com.google.common.util.concurrent.ListeningScheduledExecutorService:
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
com.google.common.util.concurrent.Monitor -> com.google.common.util.concurrent.Monitor:
    boolean fair -> fair
    java.util.concurrent.locks.ReentrantLock lock -> lock
    com.google.common.util.concurrent.Monitor$Guard activeGuards -> activeGuards
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    com.google.common.util.concurrent.Monitor$Guard newGuard(java.util.function.BooleanSupplier) -> newGuard
    void enter() -> enter
    boolean enter(long,java.util.concurrent.TimeUnit) -> enter
    void enterInterruptibly() -> enterInterruptibly
    boolean enterInterruptibly(long,java.util.concurrent.TimeUnit) -> enterInterruptibly
    boolean tryEnter() -> tryEnter
    void enterWhen(com.google.common.util.concurrent.Monitor$Guard) -> enterWhen
    boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterWhen
    void enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard) -> enterWhenUninterruptibly
    boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterWhenUninterruptibly
    boolean enterIf(com.google.common.util.concurrent.Monitor$Guard) -> enterIf
    boolean enterIf(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterIf
    boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard) -> enterIfInterruptibly
    boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> enterIfInterruptibly
    boolean tryEnterIf(com.google.common.util.concurrent.Monitor$Guard) -> tryEnterIf
    void waitFor(com.google.common.util.concurrent.Monitor$Guard) -> waitFor
    boolean waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> waitFor
    void waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard) -> waitForUninterruptibly
    boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit) -> waitForUninterruptibly
    void leave() -> leave
    boolean isFair() -> isFair
    boolean isOccupied() -> isOccupied
    boolean isOccupiedByCurrentThread() -> isOccupiedByCurrentThread
    int getOccupiedDepth() -> getOccupiedDepth
    int getQueueLength() -> getQueueLength
    boolean hasQueuedThreads() -> hasQueuedThreads
    boolean hasQueuedThread(java.lang.Thread) -> hasQueuedThread
    boolean hasWaiters(com.google.common.util.concurrent.Monitor$Guard) -> hasWaiters
    int getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard) -> getWaitQueueLength
    long toSafeNanos(long,java.util.concurrent.TimeUnit) -> toSafeNanos
    long initNanoTime(long) -> initNanoTime
    long remainingNanos(long,long) -> remainingNanos
    void signalNextWaiter() -> signalNextWaiter
    boolean isSatisfied(com.google.common.util.concurrent.Monitor$Guard) -> isSatisfied
    void signalAllWaiters() -> signalAllWaiters
    void beginWaitingFor(com.google.common.util.concurrent.Monitor$Guard) -> beginWaitingFor
    void endWaitingFor(com.google.common.util.concurrent.Monitor$Guard) -> endWaitingFor
    void await(com.google.common.util.concurrent.Monitor$Guard,boolean) -> await
    void awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean) -> awaitUninterruptibly
    boolean awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean) -> awaitNanos
    java.util.concurrent.locks.ReentrantLock access$000(com.google.common.util.concurrent.Monitor) -> access$000
com.google.common.util.concurrent.Monitor$1 -> com.google.common.util.concurrent.Monitor$1:
    java.util.function.BooleanSupplier val$isSatisfied -> val$isSatisfied
    com.google.common.util.concurrent.Monitor this$0 -> this$0
    void <init>(com.google.common.util.concurrent.Monitor,com.google.common.util.concurrent.Monitor,java.util.function.BooleanSupplier) -> <init>
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.Monitor$Guard -> com.google.common.util.concurrent.Monitor$Guard:
    com.google.common.util.concurrent.Monitor monitor -> monitor
    java.util.concurrent.locks.Condition condition -> condition
    int waiterCount -> waiterCount
    com.google.common.util.concurrent.Monitor$Guard next -> next
    void <init>(com.google.common.util.concurrent.Monitor) -> <init>
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.MoreExecutors -> com.google.common.util.concurrent.MoreExecutors:
    void <init>() -> <init>
    java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingExecutorService
    java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor) -> getExitingExecutorService
    java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingScheduledExecutorService
    java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor) -> getExitingScheduledExecutorService
    void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> addDelayedShutdownHook
    void useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor) -> useDaemonThreadFactory
    com.google.common.util.concurrent.ListeningExecutorService newDirectExecutorService() -> newDirectExecutorService
    java.util.concurrent.Executor directExecutor() -> directExecutor
    java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor) -> newSequentialExecutor
    com.google.common.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService) -> listeningDecorator
    com.google.common.util.concurrent.ListeningScheduledExecutorService listeningDecorator(java.util.concurrent.ScheduledExecutorService) -> listeningDecorator
    java.lang.Object invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long,java.util.concurrent.TimeUnit) -> invokeAnyImpl
    com.google.common.util.concurrent.ListenableFuture submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue) -> submitAndAddQueueListener
    java.util.concurrent.ThreadFactory platformThreadFactory() -> platformThreadFactory
    boolean isAppEngine() -> isAppEngine
    java.lang.Thread newThread(java.lang.String,java.lang.Runnable) -> newThread
    java.util.concurrent.Executor renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier) -> renamingDecorator
    java.util.concurrent.ExecutorService renamingDecorator(java.util.concurrent.ExecutorService,com.google.common.base.Supplier) -> renamingDecorator
    java.util.concurrent.ScheduledExecutorService renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier) -> renamingDecorator
    boolean shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> shutdownAndAwaitTermination
    java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture) -> rejectionPropagatingExecutor
    void access$000(java.util.concurrent.ThreadPoolExecutor) -> access$000
com.google.common.util.concurrent.MoreExecutors$1 -> com.google.common.util.concurrent.MoreExecutors$1:
    java.util.concurrent.BlockingQueue val$queue -> val$queue
    com.google.common.util.concurrent.ListenableFuture val$future -> val$future
    void <init>(java.util.concurrent.BlockingQueue,com.google.common.util.concurrent.ListenableFuture) -> <init>
    void run() -> run
com.google.common.util.concurrent.MoreExecutors$2 -> com.google.common.util.concurrent.MoreExecutors$2:
    java.util.concurrent.Executor val$executor -> val$executor
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    void <init>(java.util.concurrent.Executor,com.google.common.base.Supplier) -> <init>
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.MoreExecutors$3 -> com.google.common.util.concurrent.MoreExecutors$3:
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    void <init>(java.util.concurrent.ExecutorService,com.google.common.base.Supplier) -> <init>
    java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable) -> wrapTask
    java.lang.Runnable wrapTask(java.lang.Runnable) -> wrapTask
com.google.common.util.concurrent.MoreExecutors$4 -> com.google.common.util.concurrent.MoreExecutors$4:
    com.google.common.base.Supplier val$nameSupplier -> val$nameSupplier
    void <init>(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier) -> <init>
    java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable) -> wrapTask
    java.lang.Runnable wrapTask(java.lang.Runnable) -> wrapTask
com.google.common.util.concurrent.MoreExecutors$5 -> com.google.common.util.concurrent.MoreExecutors$5:
    boolean thrownFromDelegate -> thrownFromDelegate
    java.util.concurrent.Executor val$delegate -> val$delegate
    com.google.common.util.concurrent.AbstractFuture val$future -> val$future
    void <init>(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture) -> <init>
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.MoreExecutors$5$1 -> com.google.common.util.concurrent.MoreExecutors$5$1:
    java.lang.Runnable val$command -> val$command
    com.google.common.util.concurrent.MoreExecutors$5 this$0 -> this$0
    void <init>(com.google.common.util.concurrent.MoreExecutors$5,java.lang.Runnable) -> <init>
    void run() -> run
com.google.common.util.concurrent.MoreExecutors$Application -> com.google.common.util.concurrent.MoreExecutors$Application:
    void <init>() -> <init>
    java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingExecutorService
    java.util.concurrent.ExecutorService getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor) -> getExitingExecutorService
    java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit) -> getExitingScheduledExecutorService
    java.util.concurrent.ScheduledExecutorService getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor) -> getExitingScheduledExecutorService
    void addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> addDelayedShutdownHook
    void addShutdownHook(java.lang.Thread) -> addShutdownHook
com.google.common.util.concurrent.MoreExecutors$Application$1 -> com.google.common.util.concurrent.MoreExecutors$Application$1:
    java.util.concurrent.ExecutorService val$service -> val$service
    long val$terminationTimeout -> val$terminationTimeout
    java.util.concurrent.TimeUnit val$timeUnit -> val$timeUnit
    com.google.common.util.concurrent.MoreExecutors$Application this$0 -> this$0
    void <init>(com.google.common.util.concurrent.MoreExecutors$Application,java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit) -> <init>
    void run() -> run
com.google.common.util.concurrent.MoreExecutors$DirectExecutorService -> com.google.common.util.concurrent.MoreExecutors$DirectExecutorService:
    java.lang.Object lock -> lock
    int runningTasks -> runningTasks
    boolean shutdown -> shutdown
    void <init>() -> <init>
    void execute(java.lang.Runnable) -> execute
    boolean isShutdown() -> isShutdown
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    boolean isTerminated() -> isTerminated
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    void startTask() -> startTask
    void endTask() -> endTask
    void <init>(com.google.common.util.concurrent.MoreExecutors$1) -> <init>
com.google.common.util.concurrent.MoreExecutors$ListeningDecorator -> com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:
    java.util.concurrent.ExecutorService delegate -> delegate
    void <init>(java.util.concurrent.ExecutorService) -> <init>
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    void execute(java.lang.Runnable) -> execute
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator -> com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:
    java.util.concurrent.ScheduledExecutorService delegate -> delegate
    void <init>(java.util.concurrent.ScheduledExecutorService) -> <init>
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    com.google.common.util.concurrent.ListenableScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
    java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask -> com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:
    java.util.concurrent.ScheduledFuture scheduledDelegate -> scheduledDelegate
    void <init>(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.ScheduledFuture) -> <init>
    boolean cancel(boolean) -> cancel
    long getDelay(java.util.concurrent.TimeUnit) -> getDelay
    int compareTo(java.util.concurrent.Delayed) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask -> com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:
    java.lang.Runnable delegate -> delegate
    void <init>(java.lang.Runnable) -> <init>
    void run() -> run
com.google.common.util.concurrent.Partially -> com.google.common.util.concurrent.Partially:
    void <init>() -> <init>
com.google.common.util.concurrent.Partially$GwtIncompatible -> com.google.common.util.concurrent.Partially$GwtIncompatible:
    java.lang.String value() -> value
com.google.common.util.concurrent.Platform -> com.google.common.util.concurrent.Platform:
    boolean isInstanceOfThrowableClass(java.lang.Throwable,java.lang.Class) -> isInstanceOfThrowableClass
    void <init>() -> <init>
com.google.common.util.concurrent.RateLimiter -> com.google.common.util.concurrent.RateLimiter:
    com.google.common.util.concurrent.RateLimiter$SleepingStopwatch stopwatch -> stopwatch
    java.lang.Object mutexDoNotUseDirectly -> mutexDoNotUseDirectly
    com.google.common.util.concurrent.RateLimiter create(double) -> create
    com.google.common.util.concurrent.RateLimiter create(double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch) -> create
    com.google.common.util.concurrent.RateLimiter create(double,long,java.util.concurrent.TimeUnit) -> create
    com.google.common.util.concurrent.RateLimiter create(double,long,java.util.concurrent.TimeUnit,double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch) -> create
    java.lang.Object mutex() -> mutex
    void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch) -> <init>
    void setRate(double) -> setRate
    void doSetRate(double,long) -> doSetRate
    double getRate() -> getRate
    double doGetRate() -> doGetRate
    double acquire() -> acquire
    double acquire(int) -> acquire
    long reserve(int) -> reserve
    boolean tryAcquire(long,java.util.concurrent.TimeUnit) -> tryAcquire
    boolean tryAcquire(int) -> tryAcquire
    boolean tryAcquire() -> tryAcquire
    boolean tryAcquire(int,long,java.util.concurrent.TimeUnit) -> tryAcquire
    boolean canAcquire(long,long) -> canAcquire
    long reserveAndGetWaitLength(int,long) -> reserveAndGetWaitLength
    long queryEarliestAvailable(long) -> queryEarliestAvailable
    long reserveEarliestAvailable(int,long) -> reserveEarliestAvailable
    java.lang.String toString() -> toString
    void checkPermits(int) -> checkPermits
com.google.common.util.concurrent.RateLimiter$SleepingStopwatch -> com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:
    void <init>() -> <init>
    long readMicros() -> readMicros
    void sleepMicrosUninterruptibly(long) -> sleepMicrosUninterruptibly
    com.google.common.util.concurrent.RateLimiter$SleepingStopwatch createFromSystemTimer() -> createFromSystemTimer
com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1 -> com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:
    com.google.common.base.Stopwatch stopwatch -> stopwatch
    void <init>() -> <init>
    long readMicros() -> readMicros
    void sleepMicrosUninterruptibly(long) -> sleepMicrosUninterruptibly
com.google.common.util.concurrent.Runnables -> com.google.common.util.concurrent.Runnables:
    java.lang.Runnable EMPTY_RUNNABLE -> EMPTY_RUNNABLE
    java.lang.Runnable doNothing() -> doNothing
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.Runnables$1 -> com.google.common.util.concurrent.Runnables$1:
    void <init>() -> <init>
    void run() -> run
com.google.common.util.concurrent.SequentialExecutor -> com.google.common.util.concurrent.SequentialExecutor:
    java.util.logging.Logger log -> log
    java.util.concurrent.Executor executor -> executor
    java.util.Deque queue -> queue
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState workerRunningState -> workerRunningState
    long workerRunCount -> workerRunCount
    com.google.common.util.concurrent.SequentialExecutor$QueueWorker worker -> worker
    void <init>(java.util.concurrent.Executor) -> <init>
    void execute(java.lang.Runnable) -> execute
    java.util.Deque access$100(com.google.common.util.concurrent.SequentialExecutor) -> access$100
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState access$202(com.google.common.util.concurrent.SequentialExecutor,com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState) -> access$202
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState access$200(com.google.common.util.concurrent.SequentialExecutor) -> access$200
    long access$308(com.google.common.util.concurrent.SequentialExecutor) -> access$308
    java.util.logging.Logger access$400() -> access$400
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.SequentialExecutor$1 -> com.google.common.util.concurrent.SequentialExecutor$1:
    java.lang.Runnable val$task -> val$task
    com.google.common.util.concurrent.SequentialExecutor this$0 -> this$0
    void <init>(com.google.common.util.concurrent.SequentialExecutor,java.lang.Runnable) -> <init>
    void run() -> run
com.google.common.util.concurrent.SequentialExecutor$QueueWorker -> com.google.common.util.concurrent.SequentialExecutor$QueueWorker:
    com.google.common.util.concurrent.SequentialExecutor this$0 -> this$0
    void <init>(com.google.common.util.concurrent.SequentialExecutor) -> <init>
    void run() -> run
    void workOnQueue() -> workOnQueue
    void <init>(com.google.common.util.concurrent.SequentialExecutor,com.google.common.util.concurrent.SequentialExecutor$1) -> <init>
com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState -> com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState:
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState IDLE -> IDLE
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUING -> QUEUING
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState QUEUED -> QUEUED
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState RUNNING -> RUNNING
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState[] $VALUES -> $VALUES
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState[] values() -> values
    com.google.common.util.concurrent.SequentialExecutor$WorkerRunningState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.Service -> com.google.common.util.concurrent.Service:
    com.google.common.util.concurrent.Service startAsync() -> startAsync
    boolean isRunning() -> isRunning
    com.google.common.util.concurrent.Service$State state() -> state
    com.google.common.util.concurrent.Service stopAsync() -> stopAsync
    void awaitRunning() -> awaitRunning
    void awaitRunning(long,java.util.concurrent.TimeUnit) -> awaitRunning
    void awaitTerminated() -> awaitTerminated
    void awaitTerminated(long,java.util.concurrent.TimeUnit) -> awaitTerminated
    java.lang.Throwable failureCause() -> failureCause
    void addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor) -> addListener
com.google.common.util.concurrent.Service$1 -> com.google.common.util.concurrent.Service$1:
com.google.common.util.concurrent.Service$Listener -> com.google.common.util.concurrent.Service$Listener:
    void <init>() -> <init>
    void starting() -> starting
    void running() -> running
    void stopping(com.google.common.util.concurrent.Service$State) -> stopping
    void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.Service$State -> com.google.common.util.concurrent.Service$State:
    com.google.common.util.concurrent.Service$State NEW -> NEW
    com.google.common.util.concurrent.Service$State STARTING -> STARTING
    com.google.common.util.concurrent.Service$State RUNNING -> RUNNING
    com.google.common.util.concurrent.Service$State STOPPING -> STOPPING
    com.google.common.util.concurrent.Service$State TERMINATED -> TERMINATED
    com.google.common.util.concurrent.Service$State FAILED -> FAILED
    com.google.common.util.concurrent.Service$State[] $VALUES -> $VALUES
    com.google.common.util.concurrent.Service$State[] values() -> values
    com.google.common.util.concurrent.Service$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isTerminal() -> isTerminal
    void <init>(java.lang.String,int,com.google.common.util.concurrent.Service$1) -> <init>
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.Service$State$1 -> com.google.common.util.concurrent.Service$State$1:
    void <init>(java.lang.String,int) -> <init>
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$2 -> com.google.common.util.concurrent.Service$State$2:
    void <init>(java.lang.String,int) -> <init>
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$3 -> com.google.common.util.concurrent.Service$State$3:
    void <init>(java.lang.String,int) -> <init>
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$4 -> com.google.common.util.concurrent.Service$State$4:
    void <init>(java.lang.String,int) -> <init>
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$5 -> com.google.common.util.concurrent.Service$State$5:
    void <init>(java.lang.String,int) -> <init>
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.Service$State$6 -> com.google.common.util.concurrent.Service$State$6:
    void <init>(java.lang.String,int) -> <init>
    boolean isTerminal() -> isTerminal
com.google.common.util.concurrent.ServiceManager -> com.google.common.util.concurrent.ServiceManager:
    java.util.logging.Logger logger -> logger
    com.google.common.util.concurrent.ListenerCallQueue$Event HEALTHY_EVENT -> HEALTHY_EVENT
    com.google.common.util.concurrent.ListenerCallQueue$Event STOPPED_EVENT -> STOPPED_EVENT
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState state -> state
    com.google.common.collect.ImmutableList services -> services
    void <init>(java.lang.Iterable) -> <init>
    void addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor) -> addListener
    void addListener(com.google.common.util.concurrent.ServiceManager$Listener) -> addListener
    com.google.common.util.concurrent.ServiceManager startAsync() -> startAsync
    void awaitHealthy() -> awaitHealthy
    void awaitHealthy(long,java.util.concurrent.TimeUnit) -> awaitHealthy
    com.google.common.util.concurrent.ServiceManager stopAsync() -> stopAsync
    void awaitStopped() -> awaitStopped
    void awaitStopped(long,java.util.concurrent.TimeUnit) -> awaitStopped
    boolean isHealthy() -> isHealthy
    com.google.common.collect.ImmutableMultimap servicesByState() -> servicesByState
    com.google.common.collect.ImmutableMap startupTimes() -> startupTimes
    java.lang.String toString() -> toString
    java.util.logging.Logger access$200() -> access$200
    com.google.common.util.concurrent.ListenerCallQueue$Event access$300() -> access$300
    com.google.common.util.concurrent.ListenerCallQueue$Event access$400() -> access$400
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.ServiceManager$1 -> com.google.common.util.concurrent.ServiceManager$1:
    void <init>() -> <init>
    void call(com.google.common.util.concurrent.ServiceManager$Listener) -> call
    java.lang.String toString() -> toString
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.ServiceManager$2 -> com.google.common.util.concurrent.ServiceManager$2:
    void <init>() -> <init>
    void call(com.google.common.util.concurrent.ServiceManager$Listener) -> call
    java.lang.String toString() -> toString
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning -> com.google.common.util.concurrent.ServiceManager$EmptyServiceManagerWarning:
    void <init>() -> <init>
    void <init>(com.google.common.util.concurrent.ServiceManager$1) -> <init>
com.google.common.util.concurrent.ServiceManager$FailedService -> com.google.common.util.concurrent.ServiceManager$FailedService:
    void <init>(com.google.common.util.concurrent.Service) -> <init>
com.google.common.util.concurrent.ServiceManager$Listener -> com.google.common.util.concurrent.ServiceManager$Listener:
    void <init>() -> <init>
    void healthy() -> healthy
    void stopped() -> stopped
    void failure(com.google.common.util.concurrent.Service) -> failure
com.google.common.util.concurrent.ServiceManager$NoOpService -> com.google.common.util.concurrent.ServiceManager$NoOpService:
    void <init>() -> <init>
    void doStart() -> doStart
    void doStop() -> doStop
    void <init>(com.google.common.util.concurrent.ServiceManager$1) -> <init>
com.google.common.util.concurrent.ServiceManager$ServiceListener -> com.google.common.util.concurrent.ServiceManager$ServiceListener:
    com.google.common.util.concurrent.Service service -> service
    java.lang.ref.WeakReference state -> state
    void <init>(com.google.common.util.concurrent.Service,java.lang.ref.WeakReference) -> <init>
    void starting() -> starting
    void running() -> running
    void stopping(com.google.common.util.concurrent.Service$State) -> stopping
    void terminated(com.google.common.util.concurrent.Service$State) -> terminated
    void failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable) -> failed
com.google.common.util.concurrent.ServiceManager$ServiceManagerState -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState:
    com.google.common.util.concurrent.Monitor monitor -> monitor
    com.google.common.collect.SetMultimap servicesByState -> servicesByState
    com.google.common.collect.Multiset states -> states
    java.util.Map startupTimers -> startupTimers
    boolean ready -> ready
    boolean transitioned -> transitioned
    int numberOfServices -> numberOfServices
    com.google.common.util.concurrent.Monitor$Guard awaitHealthGuard -> awaitHealthGuard
    com.google.common.util.concurrent.Monitor$Guard stoppedGuard -> stoppedGuard
    com.google.common.util.concurrent.ListenerCallQueue listeners -> listeners
    void <init>(com.google.common.collect.ImmutableCollection) -> <init>
    void tryStartTiming(com.google.common.util.concurrent.Service) -> tryStartTiming
    void markReady() -> markReady
    void addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor) -> addListener
    void awaitHealthy() -> awaitHealthy
    void awaitHealthy(long,java.util.concurrent.TimeUnit) -> awaitHealthy
    void awaitStopped() -> awaitStopped
    void awaitStopped(long,java.util.concurrent.TimeUnit) -> awaitStopped
    com.google.common.collect.ImmutableMultimap servicesByState() -> servicesByState
    com.google.common.collect.ImmutableMap startupTimes() -> startupTimes
    void transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State) -> transitionService
    void enqueueStoppedEvent() -> enqueueStoppedEvent
    void enqueueHealthyEvent() -> enqueueHealthyEvent
    void enqueueFailedEvent(com.google.common.util.concurrent.Service) -> enqueueFailedEvent
    void dispatchListenerEvents() -> dispatchListenerEvents
    void checkHealthy() -> checkHealthy
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1 -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> this$0
    void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState) -> <init>
    java.lang.Long apply(java.util.Map$Entry) -> apply
    java.lang.Object apply(java.lang.Object) -> apply
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2 -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2:
    com.google.common.util.concurrent.Service val$service -> val$service
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> this$0
    void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState,com.google.common.util.concurrent.Service) -> <init>
    void call(com.google.common.util.concurrent.ServiceManager$Listener) -> call
    java.lang.String toString() -> toString
    void call(java.lang.Object) -> call
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> this$0
    void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState) -> <init>
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard -> com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard:
    com.google.common.util.concurrent.ServiceManager$ServiceManagerState this$0 -> this$0
    void <init>(com.google.common.util.concurrent.ServiceManager$ServiceManagerState) -> <init>
    boolean isSatisfied() -> isSatisfied
com.google.common.util.concurrent.SettableFuture -> com.google.common.util.concurrent.SettableFuture:
    com.google.common.util.concurrent.SettableFuture create() -> create
    boolean set(java.lang.Object) -> set
    boolean setException(java.lang.Throwable) -> setException
    boolean setFuture(com.google.common.util.concurrent.ListenableFuture) -> setFuture
    void <init>() -> <init>
com.google.common.util.concurrent.SimpleTimeLimiter -> com.google.common.util.concurrent.SimpleTimeLimiter:
    java.util.concurrent.ExecutorService executor -> executor
    void <init>(java.util.concurrent.ExecutorService) -> <init>
    com.google.common.util.concurrent.SimpleTimeLimiter create(java.util.concurrent.ExecutorService) -> create
    java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit) -> newProxy
    java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler) -> newProxy
    java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean) -> callWithTimeout
    java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callWithTimeout
    java.lang.Object callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callUninterruptiblyWithTimeout
    void runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runWithTimeout
    void runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runUninterruptiblyWithTimeout
    java.lang.Exception throwCause(java.lang.Exception,boolean) -> throwCause
    java.util.Set findInterruptibleMethods(java.lang.Class) -> findInterruptibleMethods
    boolean declaresInterruptedEx(java.lang.reflect.Method) -> declaresInterruptedEx
    void wrapAndThrowExecutionExceptionOrError(java.lang.Throwable) -> wrapAndThrowExecutionExceptionOrError
    void wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable) -> wrapAndThrowRuntimeExecutionExceptionOrError
    void checkPositiveTimeout(long) -> checkPositiveTimeout
    java.lang.Exception access$000(java.lang.Exception,boolean) -> access$000
    java.lang.Object access$100(com.google.common.util.concurrent.SimpleTimeLimiter,java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean) -> access$100
com.google.common.util.concurrent.SimpleTimeLimiter$1 -> com.google.common.util.concurrent.SimpleTimeLimiter$1:
    java.lang.Object val$target -> val$target
    long val$timeoutDuration -> val$timeoutDuration
    java.util.concurrent.TimeUnit val$timeoutUnit -> val$timeoutUnit
    java.util.Set val$interruptibleMethods -> val$interruptibleMethods
    com.google.common.util.concurrent.SimpleTimeLimiter this$0 -> this$0
    void <init>(com.google.common.util.concurrent.SimpleTimeLimiter,java.lang.Object,long,java.util.concurrent.TimeUnit,java.util.Set) -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
com.google.common.util.concurrent.SimpleTimeLimiter$1$1 -> com.google.common.util.concurrent.SimpleTimeLimiter$1$1:
    java.lang.reflect.Method val$method -> val$method
    java.lang.Object[] val$args -> val$args
    com.google.common.util.concurrent.SimpleTimeLimiter$1 this$1 -> this$1
    void <init>(com.google.common.util.concurrent.SimpleTimeLimiter$1,java.lang.reflect.Method,java.lang.Object[]) -> <init>
    java.lang.Object call() -> call
com.google.common.util.concurrent.SmoothRateLimiter -> com.google.common.util.concurrent.SmoothRateLimiter:
    double storedPermits -> storedPermits
    double maxPermits -> maxPermits
    double stableIntervalMicros -> stableIntervalMicros
    long nextFreeTicketMicros -> nextFreeTicketMicros
    void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch) -> <init>
    void doSetRate(double,long) -> doSetRate
    void doSetRate(double,double) -> doSetRate
    double doGetRate() -> doGetRate
    long queryEarliestAvailable(long) -> queryEarliestAvailable
    long reserveEarliestAvailable(int,long) -> reserveEarliestAvailable
    long storedPermitsToWaitTime(double,double) -> storedPermitsToWaitTime
    double coolDownIntervalMicros() -> coolDownIntervalMicros
    void resync(long) -> resync
    void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,com.google.common.util.concurrent.SmoothRateLimiter$1) -> <init>
com.google.common.util.concurrent.SmoothRateLimiter$1 -> com.google.common.util.concurrent.SmoothRateLimiter$1:
com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty -> com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty:
    double maxBurstSeconds -> maxBurstSeconds
    void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,double) -> <init>
    void doSetRate(double,double) -> doSetRate
    long storedPermitsToWaitTime(double,double) -> storedPermitsToWaitTime
    double coolDownIntervalMicros() -> coolDownIntervalMicros
com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp -> com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:
    long warmupPeriodMicros -> warmupPeriodMicros
    double slope -> slope
    double thresholdPermits -> thresholdPermits
    double coldFactor -> coldFactor
    void <init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,long,java.util.concurrent.TimeUnit,double) -> <init>
    void doSetRate(double,double) -> doSetRate
    long storedPermitsToWaitTime(double,double) -> storedPermitsToWaitTime
    double permitsToTime(double) -> permitsToTime
    double coolDownIntervalMicros() -> coolDownIntervalMicros
com.google.common.util.concurrent.Striped -> com.google.common.util.concurrent.Striped:
    int LARGE_LAZY_CUTOFF -> LARGE_LAZY_CUTOFF
    com.google.common.base.Supplier READ_WRITE_LOCK_SUPPLIER -> READ_WRITE_LOCK_SUPPLIER
    com.google.common.base.Supplier WEAK_SAFE_READ_WRITE_LOCK_SUPPLIER -> WEAK_SAFE_READ_WRITE_LOCK_SUPPLIER
    int ALL_SET -> ALL_SET
    void <init>() -> <init>
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getAt(int) -> getAt
    int indexFor(java.lang.Object) -> indexFor
    int size() -> size
    java.lang.Iterable bulkGet(java.lang.Iterable) -> bulkGet
    com.google.common.util.concurrent.Striped custom(int,com.google.common.base.Supplier) -> custom
    com.google.common.util.concurrent.Striped lock(int) -> lock
    com.google.common.util.concurrent.Striped lazyWeakLock(int) -> lazyWeakLock
    com.google.common.util.concurrent.Striped lazy(int,com.google.common.base.Supplier) -> lazy
    com.google.common.util.concurrent.Striped semaphore(int,int) -> semaphore
    com.google.common.util.concurrent.Striped lazyWeakSemaphore(int,int) -> lazyWeakSemaphore
    com.google.common.util.concurrent.Striped readWriteLock(int) -> readWriteLock
    com.google.common.util.concurrent.Striped lazyWeakReadWriteLock(int) -> lazyWeakReadWriteLock
    int ceilToPowerOfTwo(int) -> ceilToPowerOfTwo
    int smear(int) -> smear
    void <init>(com.google.common.util.concurrent.Striped$1) -> <init>
    int access$200(int) -> access$200
    int access$300(int) -> access$300
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.Striped$1 -> com.google.common.util.concurrent.Striped$1:
    void <init>() -> <init>
    java.util.concurrent.locks.Lock get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$2 -> com.google.common.util.concurrent.Striped$2:
    void <init>() -> <init>
    java.util.concurrent.locks.Lock get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$3 -> com.google.common.util.concurrent.Striped$3:
    int val$permits -> val$permits
    void <init>(int) -> <init>
    java.util.concurrent.Semaphore get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$4 -> com.google.common.util.concurrent.Striped$4:
    int val$permits -> val$permits
    void <init>(int) -> <init>
    java.util.concurrent.Semaphore get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$5 -> com.google.common.util.concurrent.Striped$5:
    void <init>() -> <init>
    java.util.concurrent.locks.ReadWriteLock get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$6 -> com.google.common.util.concurrent.Striped$6:
    void <init>() -> <init>
    java.util.concurrent.locks.ReadWriteLock get() -> get
    java.lang.Object get() -> get
com.google.common.util.concurrent.Striped$CompactStriped -> com.google.common.util.concurrent.Striped$CompactStriped:
    java.lang.Object[] array -> array
    void <init>(int,com.google.common.base.Supplier) -> <init>
    java.lang.Object getAt(int) -> getAt
    int size() -> size
    void <init>(int,com.google.common.base.Supplier,com.google.common.util.concurrent.Striped$1) -> <init>
com.google.common.util.concurrent.Striped$LargeLazyStriped -> com.google.common.util.concurrent.Striped$LargeLazyStriped:
    java.util.concurrent.ConcurrentMap locks -> locks
    com.google.common.base.Supplier supplier -> supplier
    int size -> size
    void <init>(int,com.google.common.base.Supplier) -> <init>
    java.lang.Object getAt(int) -> getAt
    int size() -> size
com.google.common.util.concurrent.Striped$PaddedLock -> com.google.common.util.concurrent.Striped$PaddedLock:
    long unused1 -> unused1
    long unused2 -> unused2
    long unused3 -> unused3
    void <init>() -> <init>
com.google.common.util.concurrent.Striped$PaddedSemaphore -> com.google.common.util.concurrent.Striped$PaddedSemaphore:
    long unused1 -> unused1
    long unused2 -> unused2
    long unused3 -> unused3
    void <init>(int) -> <init>
com.google.common.util.concurrent.Striped$PowerOfTwoStriped -> com.google.common.util.concurrent.Striped$PowerOfTwoStriped:
    int mask -> mask
    void <init>(int) -> <init>
    int indexFor(java.lang.Object) -> indexFor
    java.lang.Object get(java.lang.Object) -> get
com.google.common.util.concurrent.Striped$SmallLazyStriped -> com.google.common.util.concurrent.Striped$SmallLazyStriped:
    java.util.concurrent.atomic.AtomicReferenceArray locks -> locks
    com.google.common.base.Supplier supplier -> supplier
    int size -> size
    java.lang.ref.ReferenceQueue queue -> queue
    void <init>(int,com.google.common.base.Supplier) -> <init>
    java.lang.Object getAt(int) -> getAt
    void drainQueue() -> drainQueue
    int size() -> size
com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference -> com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference:
    int index -> index
    void <init>(java.lang.Object,int,java.lang.ref.ReferenceQueue) -> <init>
com.google.common.util.concurrent.Striped$WeakSafeCondition -> com.google.common.util.concurrent.Striped$WeakSafeCondition:
    java.util.concurrent.locks.Condition delegate -> delegate
    com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock strongReference -> strongReference
    void <init>(java.util.concurrent.locks.Condition,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock) -> <init>
    java.util.concurrent.locks.Condition delegate() -> delegate
com.google.common.util.concurrent.Striped$WeakSafeLock -> com.google.common.util.concurrent.Striped$WeakSafeLock:
    java.util.concurrent.locks.Lock delegate -> delegate
    com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock strongReference -> strongReference
    void <init>(java.util.concurrent.locks.Lock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock) -> <init>
    java.util.concurrent.locks.Lock delegate() -> delegate
    java.util.concurrent.locks.Condition newCondition() -> newCondition
com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock -> com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:
    java.util.concurrent.locks.ReadWriteLock delegate -> delegate
    void <init>() -> <init>
    java.util.concurrent.locks.Lock readLock() -> readLock
    java.util.concurrent.locks.Lock writeLock() -> writeLock
com.google.common.util.concurrent.ThreadFactoryBuilder -> com.google.common.util.concurrent.ThreadFactoryBuilder:
    java.lang.String nameFormat -> nameFormat
    java.lang.Boolean daemon -> daemon
    java.lang.Integer priority -> priority
    java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler -> uncaughtExceptionHandler
    java.util.concurrent.ThreadFactory backingThreadFactory -> backingThreadFactory
    void <init>() -> <init>
    com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String) -> setNameFormat
    com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean) -> setDaemon
    com.google.common.util.concurrent.ThreadFactoryBuilder setPriority(int) -> setPriority
    com.google.common.util.concurrent.ThreadFactoryBuilder setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler) -> setUncaughtExceptionHandler
    com.google.common.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory) -> setThreadFactory
    java.util.concurrent.ThreadFactory build() -> build
    java.util.concurrent.ThreadFactory doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder) -> doBuild
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    java.lang.String access$000(java.lang.String,java.lang.Object[]) -> access$000
com.google.common.util.concurrent.ThreadFactoryBuilder$1 -> com.google.common.util.concurrent.ThreadFactoryBuilder$1:
    java.util.concurrent.ThreadFactory val$backingThreadFactory -> val$backingThreadFactory
    java.lang.String val$nameFormat -> val$nameFormat
    java.util.concurrent.atomic.AtomicLong val$count -> val$count
    java.lang.Boolean val$daemon -> val$daemon
    java.lang.Integer val$priority -> val$priority
    java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler -> val$uncaughtExceptionHandler
    void <init>(java.util.concurrent.ThreadFactory,java.lang.String,java.util.concurrent.atomic.AtomicLong,java.lang.Boolean,java.lang.Integer,java.lang.Thread$UncaughtExceptionHandler) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.google.common.util.concurrent.TimeLimiter -> com.google.common.util.concurrent.TimeLimiter:
    java.lang.Object newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit) -> newProxy
    java.lang.Object callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callWithTimeout
    java.lang.Object callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> callUninterruptiblyWithTimeout
    void runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runWithTimeout
    void runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> runUninterruptiblyWithTimeout
com.google.common.util.concurrent.TimeoutFuture -> com.google.common.util.concurrent.TimeoutFuture:
    com.google.common.util.concurrent.ListenableFuture delegateRef -> delegateRef
    java.util.concurrent.ScheduledFuture timer -> timer
    com.google.common.util.concurrent.ListenableFuture create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService) -> create
    void <init>(com.google.common.util.concurrent.ListenableFuture) -> <init>
    java.lang.String pendingToString() -> pendingToString
    void afterDone() -> afterDone
    com.google.common.util.concurrent.ListenableFuture access$000(com.google.common.util.concurrent.TimeoutFuture) -> access$000
    java.util.concurrent.ScheduledFuture access$100(com.google.common.util.concurrent.TimeoutFuture) -> access$100
    java.util.concurrent.ScheduledFuture access$102(com.google.common.util.concurrent.TimeoutFuture,java.util.concurrent.ScheduledFuture) -> access$102
com.google.common.util.concurrent.TimeoutFuture$1 -> com.google.common.util.concurrent.TimeoutFuture$1:
com.google.common.util.concurrent.TimeoutFuture$Fire -> com.google.common.util.concurrent.TimeoutFuture$Fire:
    com.google.common.util.concurrent.TimeoutFuture timeoutFutureRef -> timeoutFutureRef
    void <init>(com.google.common.util.concurrent.TimeoutFuture) -> <init>
    void run() -> run
com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException -> com.google.common.util.concurrent.TimeoutFuture$TimeoutFutureException:
    void <init>(java.lang.String) -> <init>
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
    void <init>(java.lang.String,com.google.common.util.concurrent.TimeoutFuture$1) -> <init>
com.google.common.util.concurrent.TrustedListenableFutureTask -> com.google.common.util.concurrent.TrustedListenableFutureTask:
    com.google.common.util.concurrent.InterruptibleTask task -> task
    com.google.common.util.concurrent.TrustedListenableFutureTask create(com.google.common.util.concurrent.AsyncCallable) -> create
    com.google.common.util.concurrent.TrustedListenableFutureTask create(java.util.concurrent.Callable) -> create
    com.google.common.util.concurrent.TrustedListenableFutureTask create(java.lang.Runnable,java.lang.Object) -> create
    void <init>(java.util.concurrent.Callable) -> <init>
    void <init>(com.google.common.util.concurrent.AsyncCallable) -> <init>
    void run() -> run
    void afterDone() -> afterDone
    java.lang.String pendingToString() -> pendingToString
com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask -> com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:
    com.google.common.util.concurrent.AsyncCallable callable -> callable
    com.google.common.util.concurrent.TrustedListenableFutureTask this$0 -> this$0
    void <init>(com.google.common.util.concurrent.TrustedListenableFutureTask,com.google.common.util.concurrent.AsyncCallable) -> <init>
    boolean isDone() -> isDone
    com.google.common.util.concurrent.ListenableFuture runInterruptibly() -> runInterruptibly
    void afterRanInterruptibly(com.google.common.util.concurrent.ListenableFuture,java.lang.Throwable) -> afterRanInterruptibly
    java.lang.String toPendingString() -> toPendingString
    void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> afterRanInterruptibly
    java.lang.Object runInterruptibly() -> runInterruptibly
com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask -> com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask:
    java.util.concurrent.Callable callable -> callable
    com.google.common.util.concurrent.TrustedListenableFutureTask this$0 -> this$0
    void <init>(com.google.common.util.concurrent.TrustedListenableFutureTask,java.util.concurrent.Callable) -> <init>
    boolean isDone() -> isDone
    java.lang.Object runInterruptibly() -> runInterruptibly
    void afterRanInterruptibly(java.lang.Object,java.lang.Throwable) -> afterRanInterruptibly
    java.lang.String toPendingString() -> toPendingString
com.google.common.util.concurrent.UncaughtExceptionHandlers -> com.google.common.util.concurrent.UncaughtExceptionHandlers:
    void <init>() -> <init>
    java.lang.Thread$UncaughtExceptionHandler systemExit() -> systemExit
com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter -> com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter:
    java.util.logging.Logger logger -> logger
    java.lang.Runtime runtime -> runtime
    void <init>(java.lang.Runtime) -> <init>
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    void <clinit>() -> <clinit>
com.google.common.util.concurrent.UncheckedExecutionException -> com.google.common.util.concurrent.UncheckedExecutionException:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.common.util.concurrent.UncheckedTimeoutException -> com.google.common.util.concurrent.UncheckedTimeoutException:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.google.common.util.concurrent.Uninterruptibles -> com.google.common.util.concurrent.Uninterruptibles:
    void awaitUninterruptibly(java.util.concurrent.CountDownLatch) -> awaitUninterruptibly
    boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch,long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    boolean awaitUninterruptibly(java.util.concurrent.locks.Condition,long,java.util.concurrent.TimeUnit) -> awaitUninterruptibly
    void joinUninterruptibly(java.lang.Thread) -> joinUninterruptibly
    void joinUninterruptibly(java.lang.Thread,long,java.util.concurrent.TimeUnit) -> joinUninterruptibly
    java.lang.Object getUninterruptibly(java.util.concurrent.Future) -> getUninterruptibly
    java.lang.Object getUninterruptibly(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit) -> getUninterruptibly
    java.lang.Object takeUninterruptibly(java.util.concurrent.BlockingQueue) -> takeUninterruptibly
    void putUninterruptibly(java.util.concurrent.BlockingQueue,java.lang.Object) -> putUninterruptibly
    void sleepUninterruptibly(long,java.util.concurrent.TimeUnit) -> sleepUninterruptibly
    boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,long,java.util.concurrent.TimeUnit) -> tryAcquireUninterruptibly
    boolean tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,long,java.util.concurrent.TimeUnit) -> tryAcquireUninterruptibly
    void <init>() -> <init>
com.google.common.util.concurrent.WrappingExecutorService -> com.google.common.util.concurrent.WrappingExecutorService:
    java.util.concurrent.ExecutorService delegate -> delegate
    void <init>(java.util.concurrent.ExecutorService) -> <init>
    java.util.concurrent.Callable wrapTask(java.util.concurrent.Callable) -> wrapTask
    java.lang.Runnable wrapTask(java.lang.Runnable) -> wrapTask
    com.google.common.collect.ImmutableList wrapTasks(java.util.Collection) -> wrapTasks
    void execute(java.lang.Runnable) -> execute
    java.util.concurrent.Future submit(java.util.concurrent.Callable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable) -> submit
    java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object) -> submit
    java.util.List invokeAll(java.util.Collection) -> invokeAll
    java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAll
    java.lang.Object invokeAny(java.util.Collection) -> invokeAny
    java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit) -> invokeAny
    void shutdown() -> shutdown
    java.util.List shutdownNow() -> shutdownNow
    boolean isShutdown() -> isShutdown
    boolean isTerminated() -> isTerminated
    boolean awaitTermination(long,java.util.concurrent.TimeUnit) -> awaitTermination
com.google.common.util.concurrent.WrappingExecutorService$1 -> com.google.common.util.concurrent.WrappingExecutorService$1:
    java.util.concurrent.Callable val$wrapped -> val$wrapped
    com.google.common.util.concurrent.WrappingExecutorService this$0 -> this$0
    void <init>(com.google.common.util.concurrent.WrappingExecutorService,java.util.concurrent.Callable) -> <init>
    void run() -> run
com.google.common.util.concurrent.WrappingScheduledExecutorService -> com.google.common.util.concurrent.WrappingScheduledExecutorService:
    java.util.concurrent.ScheduledExecutorService delegate -> delegate
    void <init>(java.util.concurrent.ScheduledExecutorService) -> <init>
    java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit) -> schedule
    java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit) -> schedule
    java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleAtFixedRate
    java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit) -> scheduleWithFixedDelay
com.google.common.util.concurrent.internal.InternalFutureFailureAccess -> com.google.common.util.concurrent.internal.InternalFutureFailureAccess:
    void <init>() -> <init>
    java.lang.Throwable tryInternalFastPathGetFailure() -> tryInternalFastPathGetFailure
com.google.common.util.concurrent.internal.InternalFutures -> com.google.common.util.concurrent.internal.InternalFutures:
    java.lang.Throwable tryInternalFastPathGetFailure(com.google.common.util.concurrent.internal.InternalFutureFailureAccess) -> tryInternalFastPathGetFailure
    void <init>() -> <init>
com.google.common.util.concurrent.package-info -> com.google.common.util.concurrent.package-info:
com.google.common.xml.XmlEscapers -> com.google.common.xml.XmlEscapers:
    char MIN_ASCII_CONTROL_CHAR -> MIN_ASCII_CONTROL_CHAR
    char MAX_ASCII_CONTROL_CHAR -> MAX_ASCII_CONTROL_CHAR
    com.google.common.escape.Escaper XML_ESCAPER -> XML_ESCAPER
    com.google.common.escape.Escaper XML_CONTENT_ESCAPER -> XML_CONTENT_ESCAPER
    com.google.common.escape.Escaper XML_ATTRIBUTE_ESCAPER -> XML_ATTRIBUTE_ESCAPER
    void <init>() -> <init>
    com.google.common.escape.Escaper xmlContentEscaper() -> xmlContentEscaper
    com.google.common.escape.Escaper xmlAttributeEscaper() -> xmlAttributeEscaper
    void <clinit>() -> <clinit>
com.google.common.xml.package-info -> com.google.common.xml.package-info:
com.google.errorprone.annotations.CanIgnoreReturnValue -> com.google.errorprone.annotations.CanIgnoreReturnValue:
com.google.errorprone.annotations.CheckReturnValue -> com.google.errorprone.annotations.CheckReturnValue:
com.google.errorprone.annotations.CompatibleWith -> com.google.errorprone.annotations.CompatibleWith:
    java.lang.String value() -> value
com.google.errorprone.annotations.CompileTimeConstant -> com.google.errorprone.annotations.CompileTimeConstant:
com.google.errorprone.annotations.DoNotCall -> com.google.errorprone.annotations.DoNotCall:
    java.lang.String value() -> value
com.google.errorprone.annotations.DoNotMock -> com.google.errorprone.annotations.DoNotMock:
    java.lang.String value() -> value
com.google.errorprone.annotations.ForOverride -> com.google.errorprone.annotations.ForOverride:
com.google.errorprone.annotations.FormatMethod -> com.google.errorprone.annotations.FormatMethod:
com.google.errorprone.annotations.FormatString -> com.google.errorprone.annotations.FormatString:
com.google.errorprone.annotations.Immutable -> com.google.errorprone.annotations.Immutable:
    java.lang.String[] containerOf() -> containerOf
com.google.errorprone.annotations.IncompatibleModifiers -> com.google.errorprone.annotations.IncompatibleModifiers:
    javax.lang.model.element.Modifier[] value() -> value
com.google.errorprone.annotations.MustBeClosed -> com.google.errorprone.annotations.MustBeClosed:
com.google.errorprone.annotations.NoAllocation -> com.google.errorprone.annotations.NoAllocation:
com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper -> com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper:
com.google.errorprone.annotations.RequiredModifiers -> com.google.errorprone.annotations.RequiredModifiers:
    javax.lang.model.element.Modifier[] value() -> value
com.google.errorprone.annotations.RestrictedApi -> com.google.errorprone.annotations.RestrictedApi:
    java.lang.String checkerName() -> checkerName
    java.lang.String explanation() -> explanation
    java.lang.String link() -> link
    java.lang.String allowedOnPath() -> allowedOnPath
    java.lang.Class[] whitelistAnnotations() -> whitelistAnnotations
    java.lang.Class[] whitelistWithWarningAnnotations() -> whitelistWithWarningAnnotations
com.google.errorprone.annotations.SuppressPackageLocation -> com.google.errorprone.annotations.SuppressPackageLocation:
com.google.errorprone.annotations.Var -> com.google.errorprone.annotations.Var:
com.google.errorprone.annotations.concurrent.GuardedBy -> com.google.errorprone.annotations.concurrent.GuardedBy:
    java.lang.String value() -> value
com.google.errorprone.annotations.concurrent.LazyInit -> com.google.errorprone.annotations.concurrent.LazyInit:
com.google.errorprone.annotations.concurrent.LockMethod -> com.google.errorprone.annotations.concurrent.LockMethod:
    java.lang.String[] value() -> value
com.google.errorprone.annotations.concurrent.UnlockMethod -> com.google.errorprone.annotations.concurrent.UnlockMethod:
    java.lang.String[] value() -> value
com.google.googlejavaformat.CloseOp -> com.google.googlejavaformat.CloseOp:
    com.google.googlejavaformat.CloseOp CLOSE -> CLOSE
    com.google.googlejavaformat.CloseOp[] $VALUES -> $VALUES
    com.google.googlejavaformat.CloseOp[] values() -> values
    com.google.googlejavaformat.CloseOp valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.googlejavaformat.Op make() -> make
    void add(com.google.googlejavaformat.DocBuilder) -> add
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.googlejavaformat.CommentsHelper -> com.google.googlejavaformat.CommentsHelper:
    java.lang.String rewrite(com.google.googlejavaformat.Input$Tok,int,int) -> rewrite
com.google.googlejavaformat.Doc -> com.google.googlejavaformat.Doc:
    com.google.common.collect.Range EMPTY_RANGE -> EMPTY_RANGE
    com.google.common.collect.DiscreteDomain INTEGERS -> INTEGERS
    boolean widthComputed -> widthComputed
    float width -> width
    boolean flatComputed -> flatComputed
    java.lang.String flat -> flat
    boolean rangeComputed -> rangeComputed
    com.google.common.collect.Range range -> range
    void <init>() -> <init>
    float getWidth() -> getWidth
    java.lang.String getFlat() -> getFlat
    com.google.common.collect.Range range() -> range
    float computeWidth() -> computeWidth
    java.lang.String computeFlat() -> computeFlat
    com.google.common.collect.Range computeRange() -> computeRange
    com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State) -> computeBreaks
    void write(com.google.googlejavaformat.Output) -> write
    com.google.common.collect.Range access$000() -> access$000
    com.google.common.collect.DiscreteDomain access$200() -> access$200
    void <clinit>() -> <clinit>
com.google.googlejavaformat.Doc$Break -> com.google.googlejavaformat.Doc$Break:
    com.google.googlejavaformat.Doc$FillMode fillMode -> fillMode
    java.lang.String flat -> flat
    com.google.googlejavaformat.Indent plusIndent -> plusIndent
    java.util.Optional optTag -> optTag
    boolean broken -> broken
    int newIndent -> newIndent
    void <init>(com.google.googlejavaformat.Doc$FillMode,java.lang.String,com.google.googlejavaformat.Indent,java.util.Optional) -> <init>
    com.google.googlejavaformat.Doc$Break make(com.google.googlejavaformat.Doc$FillMode,java.lang.String,com.google.googlejavaformat.Indent) -> make
    com.google.googlejavaformat.Doc$Break make(com.google.googlejavaformat.Doc$FillMode,java.lang.String,com.google.googlejavaformat.Indent,java.util.Optional) -> make
    com.google.googlejavaformat.Doc$Break makeForced() -> makeForced
    int getPlusIndent() -> getPlusIndent
    boolean isForced() -> isForced
    void add(com.google.googlejavaformat.DocBuilder) -> add
    float computeWidth() -> computeWidth
    java.lang.String computeFlat() -> computeFlat
    com.google.common.collect.Range computeRange() -> computeRange
    com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.Doc$State,int,boolean) -> computeBreaks
    com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State) -> computeBreaks
    void write(com.google.googlejavaformat.Output) -> write
    java.lang.String toString() -> toString
    com.google.googlejavaformat.Doc$FillMode access$100(com.google.googlejavaformat.Doc$Break) -> access$100
com.google.googlejavaformat.Doc$FillMode -> com.google.googlejavaformat.Doc$FillMode:
    com.google.googlejavaformat.Doc$FillMode UNIFIED -> UNIFIED
    com.google.googlejavaformat.Doc$FillMode INDEPENDENT -> INDEPENDENT
    com.google.googlejavaformat.Doc$FillMode FORCED -> FORCED
    com.google.googlejavaformat.Doc$FillMode[] $VALUES -> $VALUES
    com.google.googlejavaformat.Doc$FillMode[] values() -> values
    com.google.googlejavaformat.Doc$FillMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.googlejavaformat.Doc$Level -> com.google.googlejavaformat.Doc$Level:
    com.google.googlejavaformat.Indent plusIndent -> plusIndent
    java.util.List docs -> docs
    boolean oneLine -> oneLine
    java.util.List splits -> splits
    java.util.List breaks -> breaks
    void <init>(com.google.googlejavaformat.Indent) -> <init>
    com.google.googlejavaformat.Doc$Level make(com.google.googlejavaformat.Indent) -> make
    void add(com.google.googlejavaformat.Doc) -> add
    float computeWidth() -> computeWidth
    java.lang.String computeFlat() -> computeFlat
    com.google.common.collect.Range computeRange() -> computeRange
    com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State) -> computeBreaks
    void splitByBreaks(java.util.List,java.util.List,java.util.List) -> splitByBreaks
    com.google.googlejavaformat.Doc$State computeBroken(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State) -> computeBroken
    com.google.googlejavaformat.Doc$State computeBreakAndSplit(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State,java.util.Optional,java.util.List) -> computeBreakAndSplit
    com.google.googlejavaformat.Doc$State computeSplit(com.google.googlejavaformat.CommentsHelper,int,java.util.List,com.google.googlejavaformat.Doc$State) -> computeSplit
    void write(com.google.googlejavaformat.Output) -> write
    void writeFilled(com.google.googlejavaformat.Output) -> writeFilled
    float getWidth(java.util.List) -> getWidth
    com.google.common.collect.Range union(com.google.common.collect.Range,com.google.common.collect.Range) -> union
    java.lang.String toString() -> toString
com.google.googlejavaformat.Doc$Space -> com.google.googlejavaformat.Doc$Space:
    com.google.googlejavaformat.Doc$Space SPACE -> SPACE
    void <init>() -> <init>
    com.google.googlejavaformat.Doc$Space make() -> make
    void add(com.google.googlejavaformat.DocBuilder) -> add
    float computeWidth() -> computeWidth
    java.lang.String computeFlat() -> computeFlat
    com.google.common.collect.Range computeRange() -> computeRange
    com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State) -> computeBreaks
    void write(com.google.googlejavaformat.Output) -> write
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.googlejavaformat.Doc$State -> com.google.googlejavaformat.Doc$State:
    int lastIndent -> lastIndent
    int indent -> indent
    int column -> column
    boolean mustBreak -> mustBreak
    void <init>(int,int,int,boolean) -> <init>
    void <init>(int,int) -> <init>
    com.google.googlejavaformat.Doc$State withColumn(int) -> withColumn
    com.google.googlejavaformat.Doc$State withMustBreak(boolean) -> withMustBreak
    java.lang.String toString() -> toString
com.google.googlejavaformat.Doc$Tok -> com.google.googlejavaformat.Doc$Tok:
    com.google.googlejavaformat.Input$Tok tok -> tok
    java.lang.String text -> text
    void <init>(com.google.googlejavaformat.Input$Tok) -> <init>
    com.google.googlejavaformat.Doc$Tok make(com.google.googlejavaformat.Input$Tok) -> make
    void add(com.google.googlejavaformat.DocBuilder) -> add
    float computeWidth() -> computeWidth
    java.lang.String computeFlat() -> computeFlat
    com.google.common.collect.Range computeRange() -> computeRange
    com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State) -> computeBreaks
    void write(com.google.googlejavaformat.Output) -> write
    java.lang.String toString() -> toString
com.google.googlejavaformat.Doc$Token -> com.google.googlejavaformat.Doc$Token:
    com.google.googlejavaformat.Input$Token token -> token
    com.google.googlejavaformat.Doc$Token$RealOrImaginary realOrImaginary -> realOrImaginary
    com.google.googlejavaformat.Indent plusIndentCommentsBefore -> plusIndentCommentsBefore
    java.util.Optional breakAndIndentTrailingComment -> breakAndIndentTrailingComment
    void <init>(com.google.googlejavaformat.Input$Token,com.google.googlejavaformat.Doc$Token$RealOrImaginary,com.google.googlejavaformat.Indent,java.util.Optional) -> <init>
    com.google.googlejavaformat.Indent getPlusIndentCommentsBefore() -> getPlusIndentCommentsBefore
    java.util.Optional breakAndIndentTrailingComment() -> breakAndIndentTrailingComment
    com.google.googlejavaformat.Op make(com.google.googlejavaformat.Input$Token,com.google.googlejavaformat.Doc$Token$RealOrImaginary,com.google.googlejavaformat.Indent,java.util.Optional) -> make
    com.google.googlejavaformat.Input$Token getToken() -> getToken
    com.google.googlejavaformat.Doc$Token$RealOrImaginary realOrImaginary() -> realOrImaginary
    void add(com.google.googlejavaformat.DocBuilder) -> add
    float computeWidth() -> computeWidth
    java.lang.String computeFlat() -> computeFlat
    com.google.common.collect.Range computeRange() -> computeRange
    com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State) -> computeBreaks
    void write(com.google.googlejavaformat.Output) -> write
    java.lang.String toString() -> toString
com.google.googlejavaformat.Doc$Token$RealOrImaginary -> com.google.googlejavaformat.Doc$Token$RealOrImaginary:
    com.google.googlejavaformat.Doc$Token$RealOrImaginary REAL -> REAL
    com.google.googlejavaformat.Doc$Token$RealOrImaginary IMAGINARY -> IMAGINARY
    com.google.googlejavaformat.Doc$Token$RealOrImaginary[] $VALUES -> $VALUES
    com.google.googlejavaformat.Doc$Token$RealOrImaginary[] values() -> values
    com.google.googlejavaformat.Doc$Token$RealOrImaginary valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isReal() -> isReal
    void <clinit>() -> <clinit>
com.google.googlejavaformat.DocBuilder -> com.google.googlejavaformat.DocBuilder:
    com.google.googlejavaformat.Doc$Level base -> base
    java.util.ArrayDeque stack -> stack
    com.google.googlejavaformat.Doc$Level appendLevel -> appendLevel
    void <init>() -> <init>
    com.google.googlejavaformat.DocBuilder withOps(java.util.List) -> withOps
    void open(com.google.googlejavaformat.Indent) -> open
    void close() -> close
    void add(com.google.googlejavaformat.Doc) -> add
    void breakDoc(com.google.googlejavaformat.Doc$Break) -> breakDoc
    com.google.googlejavaformat.Doc build() -> build
    java.lang.String toString() -> toString
com.google.googlejavaformat.FormatterDiagnostic -> com.google.googlejavaformat.FormatterDiagnostic:
    int lineNumber -> lineNumber
    java.lang.String message -> message
    int column -> column
    com.google.googlejavaformat.FormatterDiagnostic create(java.lang.String) -> create
    com.google.googlejavaformat.FormatterDiagnostic create(int,int,java.lang.String) -> create
    void <init>(int,int,java.lang.String) -> <init>
    int line() -> line
    int column() -> column
    java.lang.String message() -> message
    java.lang.String toString() -> toString
com.google.googlejavaformat.FormattingError -> com.google.googlejavaformat.FormattingError:
    com.google.common.collect.ImmutableList diagnostics -> diagnostics
    void <init>(com.google.googlejavaformat.FormatterDiagnostic) -> <init>
    void <init>(java.lang.Iterable) -> <init>
    com.google.common.collect.ImmutableList diagnostics() -> diagnostics
com.google.googlejavaformat.Indent -> com.google.googlejavaformat.Indent:
    void <init>() -> <init>
    int eval() -> eval
com.google.googlejavaformat.Indent$Const -> com.google.googlejavaformat.Indent$Const:
    int n -> n
    com.google.googlejavaformat.Indent$Const ZERO -> ZERO
    void <init>(int) -> <init>
    com.google.googlejavaformat.Indent$Const make(int,int) -> make
    int eval() -> eval
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.googlejavaformat.Indent$If -> com.google.googlejavaformat.Indent$If:
    com.google.googlejavaformat.Output$BreakTag condition -> condition
    com.google.googlejavaformat.Indent thenIndent -> thenIndent
    com.google.googlejavaformat.Indent elseIndent -> elseIndent
    void <init>(com.google.googlejavaformat.Output$BreakTag,com.google.googlejavaformat.Indent,com.google.googlejavaformat.Indent) -> <init>
    com.google.googlejavaformat.Indent$If make(com.google.googlejavaformat.Output$BreakTag,com.google.googlejavaformat.Indent,com.google.googlejavaformat.Indent) -> make
    int eval() -> eval
    java.lang.String toString() -> toString
com.google.googlejavaformat.Input -> com.google.googlejavaformat.Input:
    void <init>() -> <init>
    com.google.common.collect.ImmutableList getTokens() -> getTokens
    com.google.common.collect.ImmutableRangeMap getPositionTokenMap() -> getPositionTokenMap
    com.google.common.collect.ImmutableMap getPositionToColumnMap() -> getPositionToColumnMap
    java.lang.String getText() -> getText
    java.lang.String toString() -> toString
    int getLineNumber(int) -> getLineNumber
    int getColumnNumber(int) -> getColumnNumber
    com.google.googlejavaformat.FormatterDiagnostic createDiagnostic(int,java.lang.String) -> createDiagnostic
com.google.googlejavaformat.Input$Tok -> com.google.googlejavaformat.Input$Tok:
    int getIndex() -> getIndex
    int getPosition() -> getPosition
    int getColumn() -> getColumn
    java.lang.String getText() -> getText
    java.lang.String getOriginalText() -> getOriginalText
    int length() -> length
    boolean isNewline() -> isNewline
    boolean isSlashSlashComment() -> isSlashSlashComment
    boolean isSlashStarComment() -> isSlashStarComment
    boolean isJavadocComment() -> isJavadocComment
    boolean isComment() -> isComment
com.google.googlejavaformat.Input$Token -> com.google.googlejavaformat.Input$Token:
    com.google.googlejavaformat.Input$Tok getTok() -> getTok
    com.google.common.collect.ImmutableList getToksBefore() -> getToksBefore
    com.google.common.collect.ImmutableList getToksAfter() -> getToksAfter
com.google.googlejavaformat.InputOutput -> com.google.googlejavaformat.InputOutput:
    com.google.common.collect.ImmutableList lines -> lines
    com.google.common.collect.Range EMPTY_RANGE -> EMPTY_RANGE
    com.google.common.collect.DiscreteDomain INTEGERS -> INTEGERS
    java.util.List ranges -> ranges
    void <init>() -> <init>
    void setLines(com.google.common.collect.ImmutableList) -> setLines
    int getLineCount() -> getLineCount
    java.lang.String getLine(int) -> getLine
    void addToRanges(java.util.List,int,int) -> addToRanges
    void computeRanges(java.util.List) -> computeRanges
    java.util.Map makeKToIJ(com.google.googlejavaformat.InputOutput) -> makeKToIJ
    com.google.common.collect.Range getRanges(int) -> getRanges
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.googlejavaformat.Newlines -> com.google.googlejavaformat.Newlines:
    com.google.common.collect.ImmutableSet BREAKS -> BREAKS
    void <init>() -> <init>
    int count(java.lang.String) -> count
    int firstBreak(java.lang.String) -> firstBreak
    boolean isNewline(java.lang.String) -> isNewline
    int hasNewlineAt(java.lang.String,int) -> hasNewlineAt
    java.lang.String getLineEnding(java.lang.String) -> getLineEnding
    java.lang.String guessLineSeparator(java.lang.String) -> guessLineSeparator
    boolean containsBreaks(java.lang.String) -> containsBreaks
    java.util.Iterator lineOffsetIterator(java.lang.String) -> lineOffsetIterator
    java.util.Iterator lineIterator(java.lang.String) -> lineIterator
    void <clinit>() -> <clinit>
com.google.googlejavaformat.Newlines$1 -> com.google.googlejavaformat.Newlines$1:
com.google.googlejavaformat.Newlines$LineIterator -> com.google.googlejavaformat.Newlines$LineIterator:
    int idx -> idx
    java.lang.String curr -> curr
    java.lang.String input -> input
    java.util.Iterator indices -> indices
    void <init>(java.lang.String) -> <init>
    void advance() -> advance
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(java.lang.String,com.google.googlejavaformat.Newlines$1) -> <init>
com.google.googlejavaformat.Newlines$LineOffsetIterator -> com.google.googlejavaformat.Newlines$LineOffsetIterator:
    int curr -> curr
    int idx -> idx
    java.lang.String input -> input
    void <init>(java.lang.String) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Integer next() -> next
    void advance() -> advance
    void remove() -> remove
    java.lang.Object next() -> next
    void <init>(java.lang.String,com.google.googlejavaformat.Newlines$1) -> <init>
com.google.googlejavaformat.Op -> com.google.googlejavaformat.Op:
    void add(com.google.googlejavaformat.DocBuilder) -> add
com.google.googlejavaformat.OpenOp -> com.google.googlejavaformat.OpenOp:
    com.google.googlejavaformat.Indent plusIndent -> plusIndent
    void <init>(com.google.googlejavaformat.Indent) -> <init>
    com.google.googlejavaformat.Op make(com.google.googlejavaformat.Indent) -> make
    void add(com.google.googlejavaformat.DocBuilder) -> add
    java.lang.String toString() -> toString
com.google.googlejavaformat.OpsBuilder -> com.google.googlejavaformat.OpsBuilder:
    com.google.googlejavaformat.Input input -> input
    java.util.List ops -> ops
    com.google.googlejavaformat.Output output -> output
    com.google.googlejavaformat.Indent$Const ZERO -> ZERO
    int tokenI -> tokenI
    int inputPosition -> inputPosition
    int depth -> depth
    int lastPartialFormatBoundary -> lastPartialFormatBoundary
    com.google.googlejavaformat.Doc$Space SPACE -> SPACE
    int actualSize(int,int) -> actualSize
    java.lang.Integer actualStartColumn(int) -> actualStartColumn
    void add(com.google.googlejavaformat.Op) -> add
    void addAll(java.util.List) -> addAll
    void <init>(com.google.googlejavaformat.Input,com.google.googlejavaformat.Output) -> <init>
    com.google.googlejavaformat.Input getInput() -> getInput
    int depth() -> depth
    void checkClosed(int) -> checkClosed
    com.google.googlejavaformat.FormatterDiagnostic diagnostic(java.lang.String) -> diagnostic
    void sync(int) -> sync
    void drain() -> drain
    void open(com.google.googlejavaformat.Indent) -> open
    void close() -> close
    java.util.Optional peekToken() -> peekToken
    java.util.Optional peekToken(int) -> peekToken
    void guessToken(java.lang.String) -> guessToken
    void token(java.lang.String,com.google.googlejavaformat.Doc$Token$RealOrImaginary,com.google.googlejavaformat.Indent,java.util.Optional) -> token
    void op(java.lang.String) -> op
    void space() -> space
    void breakOp() -> breakOp
    void breakOp(com.google.googlejavaformat.Indent) -> breakOp
    void breakToFill() -> breakToFill
    void forcedBreak() -> forcedBreak
    void forcedBreak(com.google.googlejavaformat.Indent) -> forcedBreak
    void breakOp(java.lang.String) -> breakOp
    void breakToFill(java.lang.String) -> breakToFill
    void breakOp(com.google.googlejavaformat.Doc$FillMode,java.lang.String,com.google.googlejavaformat.Indent) -> breakOp
    void breakOp(com.google.googlejavaformat.Doc$FillMode,java.lang.String,com.google.googlejavaformat.Indent,java.util.Optional) -> breakOp
    void markForPartialFormat() -> markForPartialFormat
    void blankLineWanted(com.google.googlejavaformat.OpsBuilder$BlankLineWanted) -> blankLineWanted
    int getI(com.google.googlejavaformat.Input$Token) -> getI
    com.google.common.collect.ImmutableList build() -> build
    boolean isForcedBreak(com.google.googlejavaformat.Op) -> isForcedBreak
    java.util.List makeComment(com.google.googlejavaformat.Input$Tok) -> makeComment
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.googlejavaformat.OpsBuilder$BlankLineWanted -> com.google.googlejavaformat.OpsBuilder$BlankLineWanted:
    com.google.googlejavaformat.OpsBuilder$BlankLineWanted YES -> YES
    com.google.googlejavaformat.OpsBuilder$BlankLineWanted NO -> NO
    com.google.googlejavaformat.OpsBuilder$BlankLineWanted PRESERVE -> PRESERVE
    void <init>() -> <init>
    java.util.Optional wanted() -> wanted
    com.google.googlejavaformat.OpsBuilder$BlankLineWanted merge(com.google.googlejavaformat.OpsBuilder$BlankLineWanted) -> merge
    com.google.googlejavaformat.OpsBuilder$BlankLineWanted conditional(com.google.googlejavaformat.Output$BreakTag) -> conditional
    void <clinit>() -> <clinit>
com.google.googlejavaformat.OpsBuilder$BlankLineWanted$ConditionalBlankLine -> com.google.googlejavaformat.OpsBuilder$BlankLineWanted$ConditionalBlankLine:
    com.google.common.collect.ImmutableList tags -> tags
    void <init>(java.lang.Iterable) -> <init>
    java.util.Optional wanted() -> wanted
    com.google.googlejavaformat.OpsBuilder$BlankLineWanted merge(com.google.googlejavaformat.OpsBuilder$BlankLineWanted) -> merge
com.google.googlejavaformat.OpsBuilder$BlankLineWanted$SimpleBlankLine -> com.google.googlejavaformat.OpsBuilder$BlankLineWanted$SimpleBlankLine:
    java.util.Optional wanted -> wanted
    void <init>(java.util.Optional) -> <init>
    java.util.Optional wanted() -> wanted
    com.google.googlejavaformat.OpsBuilder$BlankLineWanted merge(com.google.googlejavaformat.OpsBuilder$BlankLineWanted) -> merge
com.google.googlejavaformat.Output -> com.google.googlejavaformat.Output:
    void <init>() -> <init>
    void indent(int) -> indent
    void append(java.lang.String,com.google.common.collect.Range) -> append
    void blankLine(int,com.google.googlejavaformat.OpsBuilder$BlankLineWanted) -> blankLine
    void markForPartialFormat(com.google.googlejavaformat.Input$Token,com.google.googlejavaformat.Input$Token) -> markForPartialFormat
    com.google.googlejavaformat.CommentsHelper getCommentsHelper() -> getCommentsHelper
    java.lang.String toString() -> toString
com.google.googlejavaformat.Output$BreakTag -> com.google.googlejavaformat.Output$BreakTag:
    java.util.Optional taken -> taken
    void <init>() -> <init>
    void recordBroken(boolean) -> recordBroken
    boolean wasBreakTaken() -> wasBreakTaken
com.google.googlejavaformat.java.CommandLineOptions -> com.google.googlejavaformat.java.CommandLineOptions:
    com.google.common.collect.ImmutableList files -> files
    boolean inPlace -> inPlace
    com.google.common.collect.ImmutableRangeSet lines -> lines
    com.google.common.collect.ImmutableList offsets -> offsets
    com.google.common.collect.ImmutableList lengths -> lengths
    boolean aosp -> aosp
    boolean version -> version
    boolean help -> help
    boolean stdin -> stdin
    boolean fixImportsOnly -> fixImportsOnly
    boolean sortImports -> sortImports
    boolean removeUnusedImports -> removeUnusedImports
    boolean dryRun -> dryRun
    boolean setExitIfChanged -> setExitIfChanged
    java.util.Optional assumeFilename -> assumeFilename
    void <init>(com.google.common.collect.ImmutableList,boolean,com.google.common.collect.ImmutableRangeSet,com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.util.Optional) -> <init>
    com.google.common.collect.ImmutableList files() -> files
    boolean inPlace() -> inPlace
    com.google.common.collect.ImmutableRangeSet lines() -> lines
    com.google.common.collect.ImmutableList offsets() -> offsets
    com.google.common.collect.ImmutableList lengths() -> lengths
    boolean aosp() -> aosp
    boolean version() -> version
    boolean help() -> help
    boolean stdin() -> stdin
    boolean fixImportsOnly() -> fixImportsOnly
    boolean sortImports() -> sortImports
    boolean removeUnusedImports() -> removeUnusedImports
    boolean dryRun() -> dryRun
    boolean setExitIfChanged() -> setExitIfChanged
    java.util.Optional assumeFilename() -> assumeFilename
    boolean isSelection() -> isSelection
    com.google.googlejavaformat.java.CommandLineOptions$Builder builder() -> builder
com.google.googlejavaformat.java.CommandLineOptions$Builder -> com.google.googlejavaformat.java.CommandLineOptions$Builder:
    com.google.common.collect.ImmutableList$Builder files -> files
    com.google.common.collect.ImmutableRangeSet$Builder lines -> lines
    com.google.common.collect.ImmutableList$Builder offsets -> offsets
    com.google.common.collect.ImmutableList$Builder lengths -> lengths
    boolean inPlace -> inPlace
    boolean aosp -> aosp
    boolean version -> version
    boolean help -> help
    boolean stdin -> stdin
    boolean fixImportsOnly -> fixImportsOnly
    boolean sortImports -> sortImports
    boolean removeUnusedImports -> removeUnusedImports
    boolean dryRun -> dryRun
    boolean setExitIfChanged -> setExitIfChanged
    java.util.Optional assumeFilename -> assumeFilename
    void <init>() -> <init>
    com.google.common.collect.ImmutableList$Builder filesBuilder() -> filesBuilder
    com.google.googlejavaformat.java.CommandLineOptions$Builder inPlace(boolean) -> inPlace
    com.google.common.collect.ImmutableRangeSet$Builder linesBuilder() -> linesBuilder
    com.google.googlejavaformat.java.CommandLineOptions$Builder addOffset(java.lang.Integer) -> addOffset
    com.google.googlejavaformat.java.CommandLineOptions$Builder addLength(java.lang.Integer) -> addLength
    com.google.googlejavaformat.java.CommandLineOptions$Builder aosp(boolean) -> aosp
    com.google.googlejavaformat.java.CommandLineOptions$Builder version(boolean) -> version
    com.google.googlejavaformat.java.CommandLineOptions$Builder help(boolean) -> help
    com.google.googlejavaformat.java.CommandLineOptions$Builder stdin(boolean) -> stdin
    com.google.googlejavaformat.java.CommandLineOptions$Builder fixImportsOnly(boolean) -> fixImportsOnly
    com.google.googlejavaformat.java.CommandLineOptions$Builder sortImports(boolean) -> sortImports
    com.google.googlejavaformat.java.CommandLineOptions$Builder removeUnusedImports(boolean) -> removeUnusedImports
    com.google.googlejavaformat.java.CommandLineOptions$Builder dryRun(boolean) -> dryRun
    com.google.googlejavaformat.java.CommandLineOptions$Builder setExitIfChanged(boolean) -> setExitIfChanged
    com.google.googlejavaformat.java.CommandLineOptions$Builder assumeFilename(java.lang.String) -> assumeFilename
    com.google.googlejavaformat.java.CommandLineOptions build() -> build
com.google.googlejavaformat.java.CommandLineOptionsParser -> com.google.googlejavaformat.java.CommandLineOptionsParser:
    com.google.common.base.Splitter COMMA_SPLITTER -> COMMA_SPLITTER
    com.google.common.base.Splitter COLON_SPLITTER -> COLON_SPLITTER
    com.google.common.base.Splitter ARG_SPLITTER -> ARG_SPLITTER
    void <init>() -> <init>
    com.google.googlejavaformat.java.CommandLineOptions parse(java.lang.Iterable) -> parse
    java.lang.Integer parseInteger(java.util.Iterator,java.lang.String,java.lang.String) -> parseInteger
    java.lang.String getValue(java.lang.String,java.util.Iterator,java.lang.String) -> getValue
    void parseRangeSet(com.google.common.collect.ImmutableRangeSet$Builder,java.lang.String) -> parseRangeSet
    com.google.common.collect.Range parseRange(java.lang.String) -> parseRange
    void expandParamsFiles(java.lang.Iterable,java.util.List) -> expandParamsFiles
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.DimensionHelpers -> com.google.googlejavaformat.java.DimensionHelpers:
    void <init>() -> <init>
    com.google.googlejavaformat.java.DimensionHelpers$TypeWithDims extractDims(org.openjdk.source.tree.Tree,com.google.googlejavaformat.java.DimensionHelpers$SortedDims) -> extractDims
    java.lang.Iterable reorderBySourcePosition(java.util.Deque) -> reorderBySourcePosition
    org.openjdk.source.tree.Tree extractDims(java.util.Deque,org.openjdk.source.tree.Tree) -> extractDims
com.google.googlejavaformat.java.DimensionHelpers$1 -> com.google.googlejavaformat.java.DimensionHelpers$1:
    int[] $SwitchMap$org$openjdk$source$tree$Tree$Kind -> $SwitchMap$org$openjdk$source$tree$Tree$Kind
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.DimensionHelpers$SortedDims -> com.google.googlejavaformat.java.DimensionHelpers$SortedDims:
    com.google.googlejavaformat.java.DimensionHelpers$SortedDims YES -> YES
    com.google.googlejavaformat.java.DimensionHelpers$SortedDims NO -> NO
    com.google.googlejavaformat.java.DimensionHelpers$SortedDims[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.DimensionHelpers$SortedDims[] values() -> values
    com.google.googlejavaformat.java.DimensionHelpers$SortedDims valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.DimensionHelpers$TypeWithDims -> com.google.googlejavaformat.java.DimensionHelpers$TypeWithDims:
    org.openjdk.source.tree.Tree node -> node
    com.google.common.collect.ImmutableList dims -> dims
    void <init>(org.openjdk.source.tree.Tree,com.google.common.collect.ImmutableList) -> <init>
com.google.googlejavaformat.java.FormatFileCallable -> com.google.googlejavaformat.java.FormatFileCallable:
    java.lang.String input -> input
    com.google.googlejavaformat.java.CommandLineOptions parameters -> parameters
    com.google.googlejavaformat.java.JavaFormatterOptions options -> options
    void <init>(com.google.googlejavaformat.java.CommandLineOptions,java.lang.String,com.google.googlejavaformat.java.JavaFormatterOptions) -> <init>
    java.lang.String call() -> call
    java.lang.String fixImports(java.lang.String) -> fixImports
    com.google.common.collect.RangeSet characterRanges(java.lang.String) -> characterRanges
    java.lang.Object call() -> call
com.google.googlejavaformat.java.Formatter -> com.google.googlejavaformat.java.Formatter:
    com.google.common.collect.Range EMPTY_RANGE -> EMPTY_RANGE
    com.google.googlejavaformat.java.JavaFormatterOptions options -> options
    void <init>() -> <init>
    void <init>(com.google.googlejavaformat.java.JavaFormatterOptions) -> <init>
    void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions) -> format
    boolean errorDiagnostic(org.openjdk.javax.tools.Diagnostic) -> errorDiagnostic
    void formatSource(com.google.common.io.CharSource,com.google.common.io.CharSink) -> formatSource
    java.lang.String formatSource(java.lang.String) -> formatSource
    java.lang.String formatSourceAndFixImports(java.lang.String) -> formatSourceAndFixImports
    java.lang.String formatSource(java.lang.String,java.util.Collection) -> formatSource
    com.google.common.collect.ImmutableList getFormatReplacements(java.lang.String,java.util.Collection) -> getFormatReplacements
    com.google.common.collect.RangeSet lineRangesToCharRanges(java.lang.String,com.google.common.collect.RangeSet) -> lineRangesToCharRanges
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.Formatter$1 -> com.google.googlejavaformat.java.Formatter$1:
    com.google.googlejavaformat.java.JavaInput val$javaInput -> val$javaInput
    void <init>(java.net.URI,org.openjdk.javax.tools.JavaFileObject$Kind,com.google.googlejavaformat.java.JavaInput) -> <init>
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
com.google.googlejavaformat.java.FormatterException -> com.google.googlejavaformat.java.FormatterException:
    com.google.common.collect.ImmutableList diagnostics -> diagnostics
    void <init>(java.lang.String) -> <init>
    void <init>(com.google.googlejavaformat.FormatterDiagnostic) -> <init>
    void <init>(java.lang.Iterable) -> <init>
    java.util.List diagnostics() -> diagnostics
    com.google.googlejavaformat.java.FormatterException fromJavacDiagnostics(java.lang.Iterable) -> fromJavacDiagnostics
    com.google.googlejavaformat.FormatterDiagnostic toFormatterDiagnostic(org.openjdk.javax.tools.Diagnostic) -> toFormatterDiagnostic
    com.google.googlejavaformat.FormatterDiagnostic lambda$fromJavacDiagnostics$0(org.openjdk.javax.tools.Diagnostic) -> lambda$fromJavacDiagnostics$0
com.google.googlejavaformat.java.GoogleJavaFormatVersion -> com.google.googlejavaformat.java.GoogleJavaFormatVersion:
    void <init>() -> <init>
    java.lang.String version() -> version
com.google.googlejavaformat.java.ImportOrderer -> com.google.googlejavaformat.java.ImportOrderer:
    com.google.common.collect.ImmutableSet CLASS_START -> CLASS_START
    com.google.common.collect.ImmutableSet IMPORT_OR_CLASS_START -> IMPORT_OR_CLASS_START
    java.lang.String text -> text
    com.google.common.collect.ImmutableList toks -> toks
    java.lang.String lineSeparator -> lineSeparator
    java.lang.String reorderImports(java.lang.String) -> reorderImports
    void <init>(java.lang.String,com.google.common.collect.ImmutableList) -> <init>
    java.lang.String reorderImports() -> reorderImports
    java.lang.String tokString(int,int) -> tokString
    com.google.googlejavaformat.java.ImportOrderer$ImportsAndIndex scanImports(int) -> scanImports
    java.lang.String reorderedImportsString(com.google.common.collect.ImmutableSortedSet) -> reorderedImportsString
    com.google.googlejavaformat.java.ImportOrderer$StringAndIndex scanImported(int) -> scanImported
    java.util.Optional findIdentifier(int,com.google.common.collect.ImmutableSet) -> findIdentifier
    int unindent(int) -> unindent
    java.lang.String tokenAt(int) -> tokenAt
    boolean isIdentifierToken(int) -> isIdentifierToken
    boolean isSpaceToken(int) -> isSpaceToken
    boolean isSlashSlashCommentToken(int) -> isSlashSlashCommentToken
    boolean isNewlineToken(int) -> isNewlineToken
    boolean lambda$reorderImports$0(java.lang.String) -> lambda$reorderImports$0
    java.lang.String access$000(com.google.googlejavaformat.java.ImportOrderer) -> access$000
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.ImportOrderer$Import -> com.google.googlejavaformat.java.ImportOrderer$Import:
    java.lang.String imported -> imported
    java.lang.String trailing -> trailing
    boolean isStatic -> isStatic
    com.google.googlejavaformat.java.ImportOrderer this$0 -> this$0
    void <init>(com.google.googlejavaformat.java.ImportOrderer,java.lang.String,java.lang.String,boolean) -> <init>
    int compareTo(com.google.googlejavaformat.java.ImportOrderer$Import) -> compareTo
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.google.googlejavaformat.java.ImportOrderer$ImportsAndIndex -> com.google.googlejavaformat.java.ImportOrderer$ImportsAndIndex:
    com.google.common.collect.ImmutableSortedSet imports -> imports
    int index -> index
    void <init>(com.google.common.collect.ImmutableSortedSet,int) -> <init>
com.google.googlejavaformat.java.ImportOrderer$StringAndIndex -> com.google.googlejavaformat.java.ImportOrderer$StringAndIndex:
    java.lang.String string -> string
    int index -> index
    void <init>(java.lang.String,int) -> <init>
    java.lang.String access$100(com.google.googlejavaformat.java.ImportOrderer$StringAndIndex) -> access$100
    int access$200(com.google.googlejavaformat.java.ImportOrderer$StringAndIndex) -> access$200
com.google.googlejavaformat.java.JavaCommentsHelper -> com.google.googlejavaformat.java.JavaCommentsHelper:
    com.google.googlejavaformat.java.JavaFormatterOptions options -> options
    java.lang.String lineSeparator -> lineSeparator
    java.util.regex.Pattern LINE_COMMENT_MISSING_SPACE_PREFIX -> LINE_COMMENT_MISSING_SPACE_PREFIX
    void <init>(java.lang.String,com.google.googlejavaformat.java.JavaFormatterOptions) -> <init>
    java.lang.String rewrite(com.google.googlejavaformat.Input$Tok,int,int) -> rewrite
    java.lang.String preserveIndentation(java.util.List,int) -> preserveIndentation
    java.lang.String indentLineComments(java.util.List,int) -> indentLineComments
    java.util.List wrapLineComments(java.util.List,int,com.google.googlejavaformat.java.JavaFormatterOptions) -> wrapLineComments
    java.lang.String indentJavadoc(java.util.List,int) -> indentJavadoc
    boolean javadocShaped(java.util.List) -> javadocShaped
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaFormatterOptions -> com.google.googlejavaformat.java.JavaFormatterOptions:
    int DEFAULT_MAX_LINE_LENGTH -> DEFAULT_MAX_LINE_LENGTH
    com.google.googlejavaformat.java.JavaFormatterOptions$Style style -> style
    void <init>(com.google.googlejavaformat.java.JavaFormatterOptions$Style) -> <init>
    int maxLineLength() -> maxLineLength
    int indentationMultiplier() -> indentationMultiplier
    com.google.googlejavaformat.java.JavaFormatterOptions defaultOptions() -> defaultOptions
    com.google.googlejavaformat.java.JavaFormatterOptions$Builder builder() -> builder
    void <init>(com.google.googlejavaformat.java.JavaFormatterOptions$Style,com.google.googlejavaformat.java.JavaFormatterOptions$1) -> <init>
com.google.googlejavaformat.java.JavaFormatterOptions$1 -> com.google.googlejavaformat.java.JavaFormatterOptions$1:
com.google.googlejavaformat.java.JavaFormatterOptions$Builder -> com.google.googlejavaformat.java.JavaFormatterOptions$Builder:
    com.google.googlejavaformat.java.JavaFormatterOptions$Style style -> style
    void <init>() -> <init>
    com.google.googlejavaformat.java.JavaFormatterOptions$Builder style(com.google.googlejavaformat.java.JavaFormatterOptions$Style) -> style
    com.google.googlejavaformat.java.JavaFormatterOptions build() -> build
    void <init>(com.google.googlejavaformat.java.JavaFormatterOptions$1) -> <init>
com.google.googlejavaformat.java.JavaFormatterOptions$Style -> com.google.googlejavaformat.java.JavaFormatterOptions$Style:
    com.google.googlejavaformat.java.JavaFormatterOptions$Style GOOGLE -> GOOGLE
    com.google.googlejavaformat.java.JavaFormatterOptions$Style AOSP -> AOSP
    int indentationMultiplier -> indentationMultiplier
    com.google.googlejavaformat.java.JavaFormatterOptions$Style[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaFormatterOptions$Style[] values() -> values
    com.google.googlejavaformat.java.JavaFormatterOptions$Style valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int indentationMultiplier() -> indentationMultiplier
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInput -> com.google.googlejavaformat.java.JavaInput:
    java.lang.String text -> text
    int kN -> kN
    com.google.common.collect.ImmutableMap positionToColumnMap -> positionToColumnMap
    com.google.common.collect.ImmutableList tokens -> tokens
    com.google.common.collect.ImmutableRangeMap positionTokenMap -> positionTokenMap
    com.google.googlejavaformat.java.JavaInput$Token[] kToToken -> kToToken
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit unit -> unit
    void <init>(java.lang.String) -> <init>
    com.google.common.collect.ImmutableMap makePositionToColumnMap(java.util.List) -> makePositionToColumnMap
    java.lang.String getText() -> getText
    com.google.common.collect.ImmutableMap getPositionToColumnMap() -> getPositionToColumnMap
    com.google.common.collect.ImmutableList buildToks(java.lang.String) -> buildToks
    com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet) -> buildToks
    int updateColumn(int,java.lang.String) -> updateColumn
    com.google.common.collect.ImmutableList buildTokens(java.util.List) -> buildTokens
    boolean isParamComment(com.google.googlejavaformat.java.JavaInput$Tok) -> isParamComment
    com.google.common.collect.Range characterRangeToTokenRange(int,int) -> characterRangeToTokenRange
    int getkN() -> getkN
    com.google.googlejavaformat.java.JavaInput$Token getToken(int) -> getToken
    com.google.common.collect.ImmutableList getTokens() -> getTokens
    com.google.common.collect.ImmutableRangeMap getPositionTokenMap() -> getPositionTokenMap
    java.lang.String toString() -> toString
    int getLineNumber(int) -> getLineNumber
    int getColumnNumber(int) -> getColumnNumber
    void setCompilationUnit(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> setCompilationUnit
    com.google.common.collect.RangeSet characterRangesToTokenRanges(java.util.Collection) -> characterRangesToTokenRanges
    boolean lambda$buildToks$0(org.openjdk.tools.javac.util.JCDiagnostic) -> lambda$buildToks$0
com.google.googlejavaformat.java.JavaInput$1 -> com.google.googlejavaformat.java.JavaInput$1:
    java.lang.String val$text -> val$text
    void <init>(java.net.URI,org.openjdk.javax.tools.JavaFileObject$Kind,java.lang.String) -> <init>
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
com.google.googlejavaformat.java.JavaInput$Tok -> com.google.googlejavaformat.java.JavaInput$Tok:
    int index -> index
    java.lang.String originalText -> originalText
    java.lang.String text -> text
    int position -> position
    int columnI -> columnI
    boolean isToken -> isToken
    org.openjdk.tools.javac.parser.Tokens$TokenKind kind -> kind
    void <init>(int,java.lang.String,java.lang.String,int,int,boolean,org.openjdk.tools.javac.parser.Tokens$TokenKind) -> <init>
    int getIndex() -> getIndex
    java.lang.String getText() -> getText
    java.lang.String getOriginalText() -> getOriginalText
    int length() -> length
    int getPosition() -> getPosition
    int getColumn() -> getColumn
    boolean isToken() -> isToken
    boolean isNewline() -> isNewline
    boolean isSlashSlashComment() -> isSlashSlashComment
    boolean isSlashStarComment() -> isSlashStarComment
    boolean isJavadocComment() -> isJavadocComment
    boolean isComment() -> isComment
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.parser.Tokens$TokenKind kind() -> kind
com.google.googlejavaformat.java.JavaInput$Token -> com.google.googlejavaformat.java.JavaInput$Token:
    com.google.googlejavaformat.java.JavaInput$Tok tok -> tok
    com.google.common.collect.ImmutableList toksBefore -> toksBefore
    com.google.common.collect.ImmutableList toksAfter -> toksAfter
    void <init>(java.util.List,com.google.googlejavaformat.java.JavaInput$Tok,java.util.List) -> <init>
    com.google.googlejavaformat.java.JavaInput$Tok getTok() -> getTok
    com.google.common.collect.ImmutableList getToksBefore() -> getToksBefore
    com.google.common.collect.ImmutableList getToksAfter() -> getToksAfter
    java.lang.String toString() -> toString
    com.google.googlejavaformat.Input$Tok getTok() -> getTok
com.google.googlejavaformat.java.JavaInputAstVisitor -> com.google.googlejavaformat.java.JavaInputAstVisitor:
    com.google.googlejavaformat.OpsBuilder builder -> builder
    com.google.googlejavaformat.Indent$Const ZERO -> ZERO
    int indentMultiplier -> indentMultiplier
    com.google.googlejavaformat.Indent$Const minusTwo -> minusTwo
    com.google.googlejavaformat.Indent$Const minusFour -> minusFour
    com.google.googlejavaformat.Indent$Const plusTwo -> plusTwo
    com.google.googlejavaformat.Indent$Const plusFour -> plusFour
    com.google.common.collect.ImmutableList EMPTY_LIST -> EMPTY_LIST
    int MAX_ITEM_LENGTH_FOR_FILLING -> MAX_ITEM_LENGTH_FOR_FILLING
    java.util.Deque inExpression -> inExpression
    com.google.common.collect.ImmutableSet LOG_METHODS -> LOG_METHODS
    java.util.regex.Pattern FORMAT_SPECIFIER -> FORMAT_SPECIFIER
    com.google.common.collect.ImmutableList breakList(java.util.Optional) -> breakList
    com.google.common.collect.ImmutableList breakFillList(java.util.Optional) -> breakFillList
    com.google.common.collect.ImmutableList forceBreakList(java.util.Optional) -> forceBreakList
    void <init>(com.google.googlejavaformat.OpsBuilder,int) -> <init>
    boolean inExpression() -> inExpression
    java.lang.Void scan(org.openjdk.source.tree.Tree,java.lang.Void) -> scan
    java.lang.Void visitCompilationUnit(org.openjdk.source.tree.CompilationUnitTree,java.lang.Void) -> visitCompilationUnit
    void dropEmptyDeclarations() -> dropEmptyDeclarations
    java.lang.Void visitClass(org.openjdk.source.tree.ClassTree,java.lang.Void) -> visitClass
    void visitAnnotationType(org.openjdk.source.tree.ClassTree) -> visitAnnotationType
    java.lang.Void visitArrayAccess(org.openjdk.source.tree.ArrayAccessTree,java.lang.Void) -> visitArrayAccess
    java.lang.Void visitNewArray(org.openjdk.source.tree.NewArrayTree,java.lang.Void) -> visitNewArray
    boolean visitArrayInitializer(java.util.List) -> visitArrayInitializer
    boolean hasOnlyShortItems(java.util.List) -> hasOnlyShortItems
    java.lang.Void visitArrayType(org.openjdk.source.tree.ArrayTypeTree,java.lang.Void) -> visitArrayType
    void visitAnnotatedArrayType(org.openjdk.source.tree.Tree) -> visitAnnotatedArrayType
    java.lang.Void visitAssert(org.openjdk.source.tree.AssertTree,java.lang.Void) -> visitAssert
    java.lang.Void visitAssignment(org.openjdk.source.tree.AssignmentTree,java.lang.Void) -> visitAssignment
    java.lang.Void visitBlock(org.openjdk.source.tree.BlockTree,java.lang.Void) -> visitBlock
    java.lang.Void visitCompoundAssignment(org.openjdk.source.tree.CompoundAssignmentTree,java.lang.Void) -> visitCompoundAssignment
    java.lang.Void visitBreak(org.openjdk.source.tree.BreakTree,java.lang.Void) -> visitBreak
    java.lang.Void visitTypeCast(org.openjdk.source.tree.TypeCastTree,java.lang.Void) -> visitTypeCast
    java.lang.Void visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Void) -> visitNewClass
    java.lang.Void visitConditionalExpression(org.openjdk.source.tree.ConditionalExpressionTree,java.lang.Void) -> visitConditionalExpression
    java.lang.Void visitContinue(org.openjdk.source.tree.ContinueTree,java.lang.Void) -> visitContinue
    java.lang.Void visitDoWhileLoop(org.openjdk.source.tree.DoWhileLoopTree,java.lang.Void) -> visitDoWhileLoop
    java.lang.Void visitEmptyStatement(org.openjdk.source.tree.EmptyStatementTree,java.lang.Void) -> visitEmptyStatement
    java.lang.Void visitEnhancedForLoop(org.openjdk.source.tree.EnhancedForLoopTree,java.lang.Void) -> visitEnhancedForLoop
    void visitEnumConstantDeclaration(org.openjdk.source.tree.VariableTree) -> visitEnumConstantDeclaration
    boolean visitEnumDeclaration(org.openjdk.source.tree.ClassTree) -> visitEnumDeclaration
    java.lang.Void visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Void) -> visitMemberReference
    java.lang.Void visitExpressionStatement(org.openjdk.source.tree.ExpressionStatementTree,java.lang.Void) -> visitExpressionStatement
    java.lang.Void visitVariable(org.openjdk.source.tree.VariableTree,java.lang.Void) -> visitVariable
    void visitVariables(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction) -> visitVariables
    com.google.googlejavaformat.java.DimensionHelpers$TypeWithDims variableFragmentDims(boolean,int,org.openjdk.source.tree.Tree) -> variableFragmentDims
    java.lang.Void visitForLoop(org.openjdk.source.tree.ForLoopTree,java.lang.Void) -> visitForLoop
    java.lang.Void visitIf(org.openjdk.source.tree.IfTree,java.lang.Void) -> visitIf
    java.lang.Void visitImport(org.openjdk.source.tree.ImportTree,java.lang.Void) -> visitImport
    java.lang.Void visitBinary(org.openjdk.source.tree.BinaryTree,java.lang.Void) -> visitBinary
    java.lang.Void visitInstanceOf(org.openjdk.source.tree.InstanceOfTree,java.lang.Void) -> visitInstanceOf
    java.lang.Void visitIntersectionType(org.openjdk.source.tree.IntersectionTypeTree,java.lang.Void) -> visitIntersectionType
    java.lang.Void visitLabeledStatement(org.openjdk.source.tree.LabeledStatementTree,java.lang.Void) -> visitLabeledStatement
    java.lang.Void visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Void) -> visitLambdaExpression
    java.lang.Void visitAnnotation(org.openjdk.source.tree.AnnotationTree,java.lang.Void) -> visitAnnotation
    boolean isArrayValue(org.openjdk.source.tree.ExpressionTree) -> isArrayValue
    void visitAnnotationArgument(org.openjdk.source.tree.AssignmentTree) -> visitAnnotationArgument
    java.lang.Void visitAnnotatedType(org.openjdk.source.tree.AnnotatedTypeTree,java.lang.Void) -> visitAnnotatedType
    java.lang.Void visitMethod(org.openjdk.source.tree.MethodTree,java.lang.Void) -> visitMethod
    void methodBody(org.openjdk.source.tree.MethodTree) -> methodBody
    java.lang.Void visitMethodInvocation(org.openjdk.source.tree.MethodInvocationTree,java.lang.Void) -> visitMethodInvocation
    boolean handleLogStatement(org.openjdk.source.tree.MethodInvocationTree) -> handleLogStatement
    java.util.Optional handleStream(java.util.List) -> handleStream
    java.util.Optional indexIn(java.util.stream.Stream,com.google.common.base.Predicate) -> indexIn
    java.lang.Void visitMemberSelect(org.openjdk.source.tree.MemberSelectTree,java.lang.Void) -> visitMemberSelect
    java.lang.Void visitLiteral(org.openjdk.source.tree.LiteralTree,java.lang.Void) -> visitLiteral
    void visitPackage(org.openjdk.source.tree.ExpressionTree,java.util.List) -> visitPackage
    java.lang.Void visitParameterizedType(org.openjdk.source.tree.ParameterizedTypeTree,java.lang.Void) -> visitParameterizedType
    java.lang.Void visitParenthesized(org.openjdk.source.tree.ParenthesizedTree,java.lang.Void) -> visitParenthesized
    java.lang.Void visitUnary(org.openjdk.source.tree.UnaryTree,java.lang.Void) -> visitUnary
    void splitToken(java.lang.String) -> splitToken
    boolean ambiguousUnaryOperator(org.openjdk.source.tree.UnaryTree,java.lang.String) -> ambiguousUnaryOperator
    java.lang.Void visitPrimitiveType(org.openjdk.source.tree.PrimitiveTypeTree,java.lang.Void) -> visitPrimitiveType
    boolean visit(org.openjdk.javax.lang.model.element.Name) -> visit
    java.lang.Void visitReturn(org.openjdk.source.tree.ReturnTree,java.lang.Void) -> visitReturn
    boolean visitSingleMemberAnnotation(org.openjdk.source.tree.AnnotationTree) -> visitSingleMemberAnnotation
    java.lang.Void visitCase(org.openjdk.source.tree.CaseTree,java.lang.Void) -> visitCase
    java.lang.Void visitSwitch(org.openjdk.source.tree.SwitchTree,java.lang.Void) -> visitSwitch
    java.lang.Void visitSynchronized(org.openjdk.source.tree.SynchronizedTree,java.lang.Void) -> visitSynchronized
    java.lang.Void visitThrow(org.openjdk.source.tree.ThrowTree,java.lang.Void) -> visitThrow
    java.lang.Void visitTry(org.openjdk.source.tree.TryTree,java.lang.Void) -> visitTry
    void visitClassDeclaration(org.openjdk.source.tree.ClassTree) -> visitClassDeclaration
    java.lang.Void visitTypeParameter(org.openjdk.source.tree.TypeParameterTree,java.lang.Void) -> visitTypeParameter
    java.lang.Void visitUnionType(org.openjdk.source.tree.UnionTypeTree,java.lang.Void) -> visitUnionType
    java.lang.Void visitWhileLoop(org.openjdk.source.tree.WhileLoopTree,java.lang.Void) -> visitWhileLoop
    java.lang.Void visitWildcard(org.openjdk.source.tree.WildcardTree,java.lang.Void) -> visitWildcard
    void visitAnnotations(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot,com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot) -> visitAnnotations
    void visitBlock(org.openjdk.source.tree.BlockTree,com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine) -> visitBlock
    void visitStatement(org.openjdk.source.tree.StatementTree,com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine) -> visitStatement
    void visitStatements(java.util.List) -> visitStatements
    void visitAndBreakModifiers(org.openjdk.source.tree.ModifiersTree,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional) -> visitAndBreakModifiers
    java.lang.Void visitModifiers(org.openjdk.source.tree.ModifiersTree,java.lang.Void) -> visitModifiers
    java.util.List visitModifiers(org.openjdk.source.tree.ModifiersTree,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional) -> visitModifiers
    java.util.List visitModifiers(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional) -> visitModifiers
    boolean nextIsModifier() -> nextIsModifier
    java.lang.Void visitCatch(org.openjdk.source.tree.CatchTree,java.lang.Void) -> visitCatch
    void visitCatchClause(org.openjdk.source.tree.CatchTree,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine) -> visitCatchClause
    void visitUnionType(org.openjdk.source.tree.VariableTree) -> visitUnionType
    void walkInfix(int,org.openjdk.source.tree.ExpressionTree,java.util.List,java.util.List) -> walkInfix
    void visitFormals(java.util.Optional,java.util.List) -> visitFormals
    void visitThrowsClause(java.util.List) -> visitThrowsClause
    java.lang.Void visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Void) -> visitIdentifier
    java.lang.Void visitModule(org.openjdk.source.tree.ModuleTree,java.lang.Void) -> visitModule
    void visitDirective(java.lang.String,java.lang.String,org.openjdk.source.tree.ExpressionTree,java.util.List) -> visitDirective
    java.lang.Void visitExports(org.openjdk.source.tree.ExportsTree,java.lang.Void) -> visitExports
    java.lang.Void visitOpens(org.openjdk.source.tree.OpensTree,java.lang.Void) -> visitOpens
    java.lang.Void visitProvides(org.openjdk.source.tree.ProvidesTree,java.lang.Void) -> visitProvides
    java.lang.Void visitRequires(org.openjdk.source.tree.RequiresTree,java.lang.Void) -> visitRequires
    java.lang.Void visitUses(org.openjdk.source.tree.UsesTree,java.lang.Void) -> visitUses
    void visitName(org.openjdk.source.tree.Tree) -> visitName
    void visitToDeclare(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,org.openjdk.source.tree.VariableTree,java.util.Optional,java.lang.String,java.util.Optional) -> visitToDeclare
    void typeParametersRest(java.util.List,com.google.googlejavaformat.Indent) -> typeParametersRest
    void visitDot(org.openjdk.source.tree.ExpressionTree) -> visitDot
    void visitRegularDot(java.util.List,boolean) -> visitRegularDot
    boolean fillFirstArgument(org.openjdk.source.tree.ExpressionTree,java.util.List,com.google.googlejavaformat.Indent) -> fillFirstArgument
    void visitDotWithPrefix(java.util.List,boolean,java.util.Collection) -> visitDotWithPrefix
    java.util.List simpleNames(java.util.Deque) -> simpleNames
    void dotExpressionUpToArgs(org.openjdk.source.tree.ExpressionTree,java.util.Optional) -> dotExpressionUpToArgs
    org.openjdk.source.tree.ExpressionTree getArrayBase(org.openjdk.source.tree.ExpressionTree) -> getArrayBase
    org.openjdk.source.tree.ExpressionTree getMethodReceiver(org.openjdk.source.tree.MethodInvocationTree) -> getMethodReceiver
    void dotExpressionArgsAndParen(org.openjdk.source.tree.ExpressionTree,com.google.googlejavaformat.Indent,com.google.googlejavaformat.Indent) -> dotExpressionArgsAndParen
    void formatArrayIndices(java.util.Deque) -> formatArrayIndices
    java.util.Deque getArrayIndices(org.openjdk.source.tree.ExpressionTree) -> getArrayIndices
    void addTypeArguments(java.util.List,com.google.googlejavaformat.Indent) -> addTypeArguments
    void addArguments(java.util.List,com.google.googlejavaformat.Indent) -> addArguments
    void argList(java.util.List) -> argList
    boolean isFormatMethod(java.util.List) -> isFormatMethod
    boolean isStringConcat(org.openjdk.source.tree.ExpressionTree) -> isStringConcat
    int argumentsAreTabular(java.util.List) -> argumentsAreTabular
    int rowLength(java.util.List) -> rowLength
    java.lang.Integer actualColumn(org.openjdk.source.tree.ExpressionTree) -> actualColumn
    boolean expressionsAreParallel(java.util.List,int,int) -> expressionsAreParallel
    int declareOne(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional,org.openjdk.source.tree.Tree,org.openjdk.javax.lang.model.element.Name,java.lang.String,java.lang.String,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional) -> declareOne
    void maybeAddDims(java.util.Deque) -> maybeAddDims
    void maybeAddDims(java.util.Deque,java.util.Deque) -> maybeAddDims
    void declareMany(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction) -> declareMany
    void addBodyDeclarations(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot,com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot) -> addBodyDeclarations
    java.util.List variableFragments(com.google.common.collect.PeekingIterator,org.openjdk.source.tree.Tree) -> variableFragments
    boolean hasJavaDoc(org.openjdk.source.tree.Tree) -> hasJavaDoc
    java.util.Optional getNextToken(com.google.googlejavaformat.Input,int) -> getNextToken
    boolean hasTrailingToken(com.google.googlejavaformat.Input,java.util.List,java.lang.String) -> hasTrailingToken
    com.google.googlejavaformat.java.JavaInputAstVisitor$Direction canLocalHaveHorizontalAnnotations(org.openjdk.source.tree.ModifiersTree) -> canLocalHaveHorizontalAnnotations
    com.google.googlejavaformat.java.JavaInputAstVisitor$Direction fieldAnnotationDirection(org.openjdk.source.tree.ModifiersTree) -> fieldAnnotationDirection
    void token(java.lang.String) -> token
    void token(java.lang.String,com.google.googlejavaformat.Indent) -> token
    void tokenBreakTrailingComment(java.lang.String,com.google.googlejavaformat.Indent) -> tokenBreakTrailingComment
    void markForPartialFormat() -> markForPartialFormat
    void sync(org.openjdk.source.tree.Tree) -> sync
    com.google.googlejavaformat.Output$BreakTag genSym() -> genSym
    java.lang.String toString() -> toString
    java.lang.Object scan(org.openjdk.source.tree.Tree,java.lang.Object) -> scan
    java.lang.Object visitUses(org.openjdk.source.tree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitRequires(org.openjdk.source.tree.RequiresTree,java.lang.Object) -> visitRequires
    java.lang.Object visitProvides(org.openjdk.source.tree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitOpens(org.openjdk.source.tree.OpensTree,java.lang.Object) -> visitOpens
    java.lang.Object visitExports(org.openjdk.source.tree.ExportsTree,java.lang.Object) -> visitExports
    java.lang.Object visitModule(org.openjdk.source.tree.ModuleTree,java.lang.Object) -> visitModule
    java.lang.Object visitAnnotatedType(org.openjdk.source.tree.AnnotatedTypeTree,java.lang.Object) -> visitAnnotatedType
    java.lang.Object visitAnnotation(org.openjdk.source.tree.AnnotationTree,java.lang.Object) -> visitAnnotation
    java.lang.Object visitModifiers(org.openjdk.source.tree.ModifiersTree,java.lang.Object) -> visitModifiers
    java.lang.Object visitWildcard(org.openjdk.source.tree.WildcardTree,java.lang.Object) -> visitWildcard
    java.lang.Object visitTypeParameter(org.openjdk.source.tree.TypeParameterTree,java.lang.Object) -> visitTypeParameter
    java.lang.Object visitIntersectionType(org.openjdk.source.tree.IntersectionTypeTree,java.lang.Object) -> visitIntersectionType
    java.lang.Object visitUnionType(org.openjdk.source.tree.UnionTypeTree,java.lang.Object) -> visitUnionType
    java.lang.Object visitParameterizedType(org.openjdk.source.tree.ParameterizedTypeTree,java.lang.Object) -> visitParameterizedType
    java.lang.Object visitArrayType(org.openjdk.source.tree.ArrayTypeTree,java.lang.Object) -> visitArrayType
    java.lang.Object visitPrimitiveType(org.openjdk.source.tree.PrimitiveTypeTree,java.lang.Object) -> visitPrimitiveType
    java.lang.Object visitLiteral(org.openjdk.source.tree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Object) -> visitMemberReference
    java.lang.Object visitMemberSelect(org.openjdk.source.tree.MemberSelectTree,java.lang.Object) -> visitMemberSelect
    java.lang.Object visitArrayAccess(org.openjdk.source.tree.ArrayAccessTree,java.lang.Object) -> visitArrayAccess
    java.lang.Object visitInstanceOf(org.openjdk.source.tree.InstanceOfTree,java.lang.Object) -> visitInstanceOf
    java.lang.Object visitTypeCast(org.openjdk.source.tree.TypeCastTree,java.lang.Object) -> visitTypeCast
    java.lang.Object visitBinary(org.openjdk.source.tree.BinaryTree,java.lang.Object) -> visitBinary
    java.lang.Object visitUnary(org.openjdk.source.tree.UnaryTree,java.lang.Object) -> visitUnary
    java.lang.Object visitCompoundAssignment(org.openjdk.source.tree.CompoundAssignmentTree,java.lang.Object) -> visitCompoundAssignment
    java.lang.Object visitAssignment(org.openjdk.source.tree.AssignmentTree,java.lang.Object) -> visitAssignment
    java.lang.Object visitParenthesized(org.openjdk.source.tree.ParenthesizedTree,java.lang.Object) -> visitParenthesized
    java.lang.Object visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Object) -> visitLambdaExpression
    java.lang.Object visitNewArray(org.openjdk.source.tree.NewArrayTree,java.lang.Object) -> visitNewArray
    java.lang.Object visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Object) -> visitNewClass
    java.lang.Object visitMethodInvocation(org.openjdk.source.tree.MethodInvocationTree,java.lang.Object) -> visitMethodInvocation
    java.lang.Object visitAssert(org.openjdk.source.tree.AssertTree,java.lang.Object) -> visitAssert
    java.lang.Object visitThrow(org.openjdk.source.tree.ThrowTree,java.lang.Object) -> visitThrow
    java.lang.Object visitReturn(org.openjdk.source.tree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitContinue(org.openjdk.source.tree.ContinueTree,java.lang.Object) -> visitContinue
    java.lang.Object visitBreak(org.openjdk.source.tree.BreakTree,java.lang.Object) -> visitBreak
    java.lang.Object visitExpressionStatement(org.openjdk.source.tree.ExpressionStatementTree,java.lang.Object) -> visitExpressionStatement
    java.lang.Object visitIf(org.openjdk.source.tree.IfTree,java.lang.Object) -> visitIf
    java.lang.Object visitConditionalExpression(org.openjdk.source.tree.ConditionalExpressionTree,java.lang.Object) -> visitConditionalExpression
    java.lang.Object visitCatch(org.openjdk.source.tree.CatchTree,java.lang.Object) -> visitCatch
    java.lang.Object visitTry(org.openjdk.source.tree.TryTree,java.lang.Object) -> visitTry
    java.lang.Object visitSynchronized(org.openjdk.source.tree.SynchronizedTree,java.lang.Object) -> visitSynchronized
    java.lang.Object visitCase(org.openjdk.source.tree.CaseTree,java.lang.Object) -> visitCase
    java.lang.Object visitSwitch(org.openjdk.source.tree.SwitchTree,java.lang.Object) -> visitSwitch
    java.lang.Object visitLabeledStatement(org.openjdk.source.tree.LabeledStatementTree,java.lang.Object) -> visitLabeledStatement
    java.lang.Object visitEnhancedForLoop(org.openjdk.source.tree.EnhancedForLoopTree,java.lang.Object) -> visitEnhancedForLoop
    java.lang.Object visitForLoop(org.openjdk.source.tree.ForLoopTree,java.lang.Object) -> visitForLoop
    java.lang.Object visitWhileLoop(org.openjdk.source.tree.WhileLoopTree,java.lang.Object) -> visitWhileLoop
    java.lang.Object visitDoWhileLoop(org.openjdk.source.tree.DoWhileLoopTree,java.lang.Object) -> visitDoWhileLoop
    java.lang.Object visitBlock(org.openjdk.source.tree.BlockTree,java.lang.Object) -> visitBlock
    java.lang.Object visitEmptyStatement(org.openjdk.source.tree.EmptyStatementTree,java.lang.Object) -> visitEmptyStatement
    java.lang.Object visitVariable(org.openjdk.source.tree.VariableTree,java.lang.Object) -> visitVariable
    java.lang.Object visitMethod(org.openjdk.source.tree.MethodTree,java.lang.Object) -> visitMethod
    java.lang.Object visitClass(org.openjdk.source.tree.ClassTree,java.lang.Object) -> visitClass
    java.lang.Object visitImport(org.openjdk.source.tree.ImportTree,java.lang.Object) -> visitImport
    java.lang.Object visitCompilationUnit(org.openjdk.source.tree.CompilationUnitTree,java.lang.Object) -> visitCompilationUnit
    void lambda$visitDot$4(java.util.Set,java.lang.Long) -> lambda$visitDot$4
    java.lang.Boolean lambda$visitModule$3(org.openjdk.source.tree.DirectiveTree,org.openjdk.source.tree.Tree$Kind) -> lambda$visitModule$3
    boolean lambda$indexIn$2(java.lang.Long) -> lambda$indexIn$2
    java.lang.Long lambda$indexIn$1(com.google.common.base.Predicate,java.lang.Object,long) -> lambda$indexIn$1
    boolean lambda$handleStream$0(org.openjdk.source.tree.ExpressionTree) -> lambda$handleStream$0
    java.util.regex.Pattern access$000() -> access$000
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$1 -> com.google.googlejavaformat.java.JavaInputAstVisitor$1:
    boolean[] val$stringLiteral -> val$stringLiteral
    boolean[] val$formatString -> val$formatString
    com.google.googlejavaformat.java.JavaInputAstVisitor this$0 -> this$0
    void <init>(com.google.googlejavaformat.java.JavaInputAstVisitor,boolean[],boolean[]) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
com.google.googlejavaformat.java.JavaInputAstVisitor$2 -> com.google.googlejavaformat.java.JavaInputAstVisitor$2:
    int[] $SwitchMap$org$openjdk$source$tree$Tree$Kind -> $SwitchMap$org$openjdk$source$tree$Tree$Kind
    int[] $SwitchMap$org$openjdk$source$tree$MemberReferenceTree$ReferenceMode -> $SwitchMap$org$openjdk$source$tree$MemberReferenceTree$ReferenceMode
    int[] $SwitchMap$org$openjdk$javax$lang$model$type$TypeKind -> $SwitchMap$org$openjdk$javax$lang$model$type$TypeKind
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine -> com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine:
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine YES -> YES
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine NO -> NO
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine valueOf(boolean) -> valueOf
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine -> com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine:
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine YES -> YES
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine NO -> NO
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine valueOf(boolean) -> valueOf
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot -> com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot:
    com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot YES -> YES
    com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot NO -> NO
    com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isYes() -> isYes
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot -> com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot:
    com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot YES -> YES
    com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot NO -> NO
    com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isYes() -> isYes
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot -> com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot:
    com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot YES -> YES
    com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot NO -> NO
    com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot valueOf(boolean) -> valueOf
    boolean isYes() -> isYes
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind -> com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind:
    com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind NONE -> NONE
    com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind FIELD -> FIELD
    com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind PARAMETER -> PARAMETER
    com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$DimensionsOrNot -> com.google.googlejavaformat.java.JavaInputAstVisitor$DimensionsOrNot:
    com.google.googlejavaformat.java.JavaInputAstVisitor$DimensionsOrNot YES -> YES
    com.google.googlejavaformat.java.JavaInputAstVisitor$DimensionsOrNot NO -> NO
    com.google.googlejavaformat.java.JavaInputAstVisitor$DimensionsOrNot[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$DimensionsOrNot[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$DimensionsOrNot valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isYes() -> isYes
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$Direction -> com.google.googlejavaformat.java.JavaInputAstVisitor$Direction:
    com.google.googlejavaformat.java.JavaInputAstVisitor$Direction VERTICAL -> VERTICAL
    com.google.googlejavaformat.java.JavaInputAstVisitor$Direction HORIZONTAL -> HORIZONTAL
    com.google.googlejavaformat.java.JavaInputAstVisitor$Direction[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$Direction[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$Direction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isVertical() -> isVertical
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot -> com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot:
    com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot YES -> YES
    com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot NO -> NO
    com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isYes() -> isYes
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$ReceiverParameter -> com.google.googlejavaformat.java.JavaInputAstVisitor$ReceiverParameter:
    com.google.googlejavaformat.java.JavaInputAstVisitor$ReceiverParameter YES -> YES
    com.google.googlejavaformat.java.JavaInputAstVisitor$ReceiverParameter NO -> NO
    com.google.googlejavaformat.java.JavaInputAstVisitor$ReceiverParameter[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$ReceiverParameter[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$ReceiverParameter valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isYes() -> isYes
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot -> com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot:
    com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot YES -> YES
    com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot NO -> NO
    com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot[] values() -> values
    com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot valueOf(boolean) -> valueOf
    boolean isYes() -> isYes
    com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot fromVariable(org.openjdk.source.tree.VariableTree) -> fromVariable
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavaOutput -> com.google.googlejavaformat.java.JavaOutput:
    java.lang.String lineSeparator -> lineSeparator
    com.google.googlejavaformat.java.JavaInput javaInput -> javaInput
    com.google.googlejavaformat.CommentsHelper commentsHelper -> commentsHelper
    java.util.Map blankLines -> blankLines
    com.google.common.collect.RangeSet partialFormatRanges -> partialFormatRanges
    java.util.List mutableLines -> mutableLines
    int kN -> kN
    int iLine -> iLine
    int lastK -> lastK
    int spacesPending -> spacesPending
    int newlinesPending -> newlinesPending
    java.lang.StringBuilder lineBuilder -> lineBuilder
    void <init>(java.lang.String,com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.CommentsHelper) -> <init>
    void blankLine(int,com.google.googlejavaformat.OpsBuilder$BlankLineWanted) -> blankLine
    void markForPartialFormat(com.google.googlejavaformat.Input$Token,com.google.googlejavaformat.Input$Token) -> markForPartialFormat
    void append(java.lang.String,com.google.common.collect.Range) -> append
    void indent(int) -> indent
    void flush() -> flush
    com.google.googlejavaformat.CommentsHelper getCommentsHelper() -> getCommentsHelper
    com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet) -> getFormatReplacements
    com.google.common.collect.Range expandToBreakableRegions(com.google.common.collect.Range) -> expandToBreakableRegions
    java.lang.String applyReplacements(java.lang.String,java.util.List) -> applyReplacements
    int startPosition(com.google.googlejavaformat.Input$Token) -> startPosition
    com.google.googlejavaformat.Input$Tok startTok(com.google.googlejavaformat.Input$Token) -> startTok
    com.google.googlejavaformat.Input$Tok endTok(com.google.googlejavaformat.Input$Token) -> endTok
    boolean isComment(java.lang.String) -> isComment
    com.google.common.collect.Range union(com.google.common.collect.Range,com.google.common.collect.Range) -> union
    java.lang.String toString() -> toString
    java.lang.Integer lambda$applyReplacements$0(com.google.googlejavaformat.java.Replacement) -> lambda$applyReplacements$0
com.google.googlejavaformat.java.JavacTokens -> com.google.googlejavaformat.java.JavacTokens:
    java.lang.CharSequence EOF_COMMENT -> EOF_COMMENT
    void <init>() -> <init>
    com.google.common.collect.ImmutableList getTokens(java.lang.String,org.openjdk.tools.javac.util.Context,java.util.Set) -> getTokens
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.JavacTokens$AccessibleReader -> com.google.googlejavaformat.java.JavacTokens$AccessibleReader:
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,char[],int) -> <init>
com.google.googlejavaformat.java.JavacTokens$AccessibleScanner -> com.google.googlejavaformat.java.JavacTokens$AccessibleScanner:
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,org.openjdk.tools.javac.parser.JavaTokenizer) -> <init>
com.google.googlejavaformat.java.JavacTokens$CommentSavingTokenizer -> com.google.googlejavaformat.java.JavacTokens$CommentSavingTokenizer:
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,char[],int) -> <init>
    org.openjdk.tools.javac.parser.Tokens$Comment processComment(int,int,org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle) -> processComment
com.google.googlejavaformat.java.JavacTokens$CommentWithTextAndPosition -> com.google.googlejavaformat.java.JavacTokens$CommentWithTextAndPosition:
    int pos -> pos
    int endPos -> endPos
    com.google.googlejavaformat.java.JavacTokens$AccessibleReader reader -> reader
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle style -> style
    java.lang.String text -> text
    void <init>(int,int,com.google.googlejavaformat.java.JavacTokens$AccessibleReader,org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle) -> <init>
    int getSourcePos(int) -> getSourcePos
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle getStyle() -> getStyle
    java.lang.String getText() -> getText
    boolean isDeprecated() -> isDeprecated
    java.lang.String toString() -> toString
com.google.googlejavaformat.java.JavacTokens$RawTok -> com.google.googlejavaformat.java.JavacTokens$RawTok:
    java.lang.String stringVal -> stringVal
    org.openjdk.tools.javac.parser.Tokens$TokenKind kind -> kind
    int pos -> pos
    int endPos -> endPos
    void <init>(java.lang.String,org.openjdk.tools.javac.parser.Tokens$TokenKind,int,int) -> <init>
    org.openjdk.tools.javac.parser.Tokens$TokenKind kind() -> kind
    int pos() -> pos
    int endPos() -> endPos
    java.lang.String stringVal() -> stringVal
com.google.googlejavaformat.java.Main -> com.google.googlejavaformat.java.Main:
    int MAX_THREADS -> MAX_THREADS
    java.lang.String STDIN_FILENAME -> STDIN_FILENAME
    java.io.PrintWriter outWriter -> outWriter
    java.io.PrintWriter errWriter -> errWriter
    java.io.InputStream inStream -> inStream
    java.lang.String versionString() -> versionString
    void <init>(java.io.PrintWriter,java.io.PrintWriter,java.io.InputStream) -> <init>
    void main(java.lang.String[]) -> main
    int format(java.lang.String[]) -> format
    int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions) -> formatFiles
    int formatStdin(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions) -> formatStdin
    com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[]) -> processArgs
com.google.googlejavaformat.java.ModifierOrderer -> com.google.googlejavaformat.java.ModifierOrderer:
    void <init>() -> <init>
    org.openjdk.javax.lang.model.element.Modifier getModifier(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> getModifier
    com.google.googlejavaformat.java.JavaInput reorderModifiers(java.lang.String) -> reorderModifiers
    com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection) -> reorderModifiers
    void addTrivia(java.lang.StringBuilder,com.google.common.collect.ImmutableList) -> addTrivia
    org.openjdk.javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token) -> asModifier
    com.google.googlejavaformat.java.JavaInput applyReplacements(com.google.googlejavaformat.java.JavaInput,com.google.common.collect.TreeRangeMap) -> applyReplacements
com.google.googlejavaformat.java.ModifierOrderer$1 -> com.google.googlejavaformat.java.ModifierOrderer$1:
    int[] $SwitchMap$org$openjdk$tools$javac$parser$Tokens$TokenKind -> $SwitchMap$org$openjdk$tools$javac$parser$Tokens$TokenKind
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.RemoveUnusedImports -> com.google.googlejavaformat.java.RemoveUnusedImports:
    void <init>() -> <init>
    java.lang.String removeUnusedImports(java.lang.String,com.google.googlejavaformat.java.RemoveUnusedImports$JavadocOnlyImports) -> removeUnusedImports
    java.lang.String removeUnusedImports(java.lang.String) -> removeUnusedImports
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit parse(org.openjdk.tools.javac.util.Context,java.lang.String) -> parse
    com.google.common.collect.RangeMap buildReplacements(java.lang.String,org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,java.util.Set,com.google.common.collect.Multimap) -> buildReplacements
    java.lang.String getSimpleName(org.openjdk.tools.javac.tree.JCTree$JCImport) -> getSimpleName
    boolean isUnused(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,java.util.Set,com.google.common.collect.Multimap,org.openjdk.tools.javac.tree.JCTree$JCImport,java.lang.String) -> isUnused
    java.lang.String applyReplacements(java.lang.String,com.google.common.collect.RangeMap) -> applyReplacements
com.google.googlejavaformat.java.RemoveUnusedImports$1 -> com.google.googlejavaformat.java.RemoveUnusedImports$1:
    java.lang.String val$javaInput -> val$javaInput
    void <init>(java.net.URI,org.openjdk.javax.tools.JavaFileObject$Kind,java.lang.String) -> <init>
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
com.google.googlejavaformat.java.RemoveUnusedImports$JavadocOnlyImports -> com.google.googlejavaformat.java.RemoveUnusedImports$JavadocOnlyImports:
    com.google.googlejavaformat.java.RemoveUnusedImports$JavadocOnlyImports REMOVE -> REMOVE
    com.google.googlejavaformat.java.RemoveUnusedImports$JavadocOnlyImports KEEP -> KEEP
    com.google.googlejavaformat.java.RemoveUnusedImports$JavadocOnlyImports[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.RemoveUnusedImports$JavadocOnlyImports[] values() -> values
    com.google.googlejavaformat.java.RemoveUnusedImports$JavadocOnlyImports valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner -> com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner:
    java.util.Set usedNames -> usedNames
    com.google.common.collect.Multimap usedInJavadoc -> usedInJavadoc
    org.openjdk.tools.javac.api.JavacTrees trees -> trees
    com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner docTreeSymbolScanner -> docTreeSymbolScanner
    void <init>(org.openjdk.tools.javac.api.JavacTrees) -> <init>
    java.lang.Void visitImport(org.openjdk.source.tree.ImportTree,java.lang.Void) -> visitImport
    java.lang.Void visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Void) -> visitIdentifier
    java.lang.Void scan(org.openjdk.source.tree.Tree,java.lang.Void) -> scan
    void scanJavadoc() -> scanJavadoc
    java.lang.Object scan(org.openjdk.source.tree.Tree,java.lang.Object) -> scan
    java.lang.Object visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitImport(org.openjdk.source.tree.ImportTree,java.lang.Object) -> visitImport
    com.google.common.collect.Multimap access$000(com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner) -> access$000
    void <init>(org.openjdk.tools.javac.api.JavacTrees,com.google.googlejavaformat.java.RemoveUnusedImports$1) -> <init>
    java.util.Set access$200(com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner) -> access$200
com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner -> com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner:
    com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner this$0 -> this$0
    void <init>(com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner) -> <init>
    java.lang.Void visitIdentifier(org.openjdk.source.doctree.IdentifierTree,java.lang.Void) -> visitIdentifier
    java.lang.Void visitReference(org.openjdk.source.doctree.ReferenceTree,java.lang.Void) -> visitReference
    java.lang.Object visitReference(org.openjdk.source.doctree.ReferenceTree,java.lang.Object) -> visitReference
    java.lang.Object visitIdentifier(org.openjdk.source.doctree.IdentifierTree,java.lang.Object) -> visitIdentifier
com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner$ReferenceScanner -> com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner$ReferenceScanner:
    long basePos -> basePos
    com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner this$1 -> this$1
    void <init>(com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner,long) -> <init>
    java.lang.Void visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Void) -> visitIdentifier
    java.lang.Object visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Object) -> visitIdentifier
com.google.googlejavaformat.java.Replacement -> com.google.googlejavaformat.java.Replacement:
    com.google.common.collect.Range replaceRange -> replaceRange
    java.lang.String replacementString -> replacementString
    com.google.googlejavaformat.java.Replacement create(int,int,java.lang.String) -> create
    com.google.googlejavaformat.java.Replacement create(com.google.common.collect.Range,java.lang.String) -> create
    void <init>(com.google.common.collect.Range,java.lang.String) -> <init>
    com.google.common.collect.Range getReplaceRange() -> getReplaceRange
    java.lang.String getReplacementString() -> getReplacementString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.googlejavaformat.java.SnippetFormatter -> com.google.googlejavaformat.java.SnippetFormatter:
    int INDENTATION_SIZE -> INDENTATION_SIZE
    com.google.googlejavaformat.java.Formatter formatter -> formatter
    com.google.common.base.CharMatcher NOT_WHITESPACE -> NOT_WHITESPACE
    void <init>() -> <init>
    java.lang.String createIndentationString(int) -> createIndentationString
    com.google.common.collect.Range offsetRange(com.google.common.collect.Range,int) -> offsetRange
    java.util.List offsetRanges(java.util.List,int) -> offsetRanges
    java.util.List format(com.google.googlejavaformat.java.SnippetFormatter$SnippetKind,java.lang.String,java.util.List,int,boolean) -> format
    java.util.List toReplacements(java.lang.String,java.lang.String) -> toReplacements
    com.google.googlejavaformat.java.SnippetFormatter$SnippetWrapper snippetWrapper(com.google.googlejavaformat.java.SnippetFormatter$SnippetKind,java.lang.String,int) -> snippetWrapper
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.SnippetFormatter$1 -> com.google.googlejavaformat.java.SnippetFormatter$1:
    int[] $SwitchMap$com$google$googlejavaformat$java$SnippetFormatter$SnippetKind -> $SwitchMap$com$google$googlejavaformat$java$SnippetFormatter$SnippetKind
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.SnippetFormatter$SnippetKind -> com.google.googlejavaformat.java.SnippetFormatter$SnippetKind:
    com.google.googlejavaformat.java.SnippetFormatter$SnippetKind COMPILATION_UNIT -> COMPILATION_UNIT
    com.google.googlejavaformat.java.SnippetFormatter$SnippetKind CLASS_BODY_DECLARATIONS -> CLASS_BODY_DECLARATIONS
    com.google.googlejavaformat.java.SnippetFormatter$SnippetKind STATEMENTS -> STATEMENTS
    com.google.googlejavaformat.java.SnippetFormatter$SnippetKind EXPRESSION -> EXPRESSION
    com.google.googlejavaformat.java.SnippetFormatter$SnippetKind[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.SnippetFormatter$SnippetKind[] values() -> values
    com.google.googlejavaformat.java.SnippetFormatter$SnippetKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.SnippetFormatter$SnippetWrapper -> com.google.googlejavaformat.java.SnippetFormatter$SnippetWrapper:
    int offset -> offset
    java.lang.StringBuilder contents -> contents
    com.google.googlejavaformat.java.SnippetFormatter this$0 -> this$0
    void <init>(com.google.googlejavaformat.java.SnippetFormatter) -> <init>
    com.google.googlejavaformat.java.SnippetFormatter$SnippetWrapper append(java.lang.String) -> append
    com.google.googlejavaformat.java.SnippetFormatter$SnippetWrapper appendSource(java.lang.String) -> appendSource
    void closeBraces(int) -> closeBraces
    void <init>(com.google.googlejavaformat.java.SnippetFormatter,com.google.googlejavaformat.java.SnippetFormatter$1) -> <init>
com.google.googlejavaformat.java.Trees -> com.google.googlejavaformat.java.Trees:
    void <init>() -> <init>
    int getLength(org.openjdk.source.tree.Tree,org.openjdk.source.util.TreePath) -> getLength
    int getStartPosition(org.openjdk.source.tree.Tree) -> getStartPosition
    int getEndPosition(org.openjdk.source.tree.Tree,org.openjdk.source.util.TreePath) -> getEndPosition
    java.lang.String getSourceForNode(org.openjdk.source.tree.Tree,org.openjdk.source.util.TreePath) -> getSourceForNode
    org.openjdk.javax.lang.model.element.Name getMethodName(org.openjdk.source.tree.MethodInvocationTree) -> getMethodName
    org.openjdk.source.tree.ExpressionTree getMethodReceiver(org.openjdk.source.tree.MethodInvocationTree) -> getMethodReceiver
    java.lang.String operatorName(org.openjdk.source.tree.ExpressionTree) -> operatorName
    int precedence(org.openjdk.source.tree.ExpressionTree) -> precedence
    org.openjdk.source.tree.ClassTree getEnclosingTypeDeclaration(org.openjdk.source.util.TreePath) -> getEnclosingTypeDeclaration
    org.openjdk.source.tree.ExpressionTree skipParen(org.openjdk.source.tree.ExpressionTree) -> skipParen
com.google.googlejavaformat.java.Trees$1 -> com.google.googlejavaformat.java.Trees$1:
    int[] $SwitchMap$org$openjdk$source$tree$Tree$Kind -> $SwitchMap$org$openjdk$source$tree$Tree$Kind
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.TypeNameClassifier -> com.google.googlejavaformat.java.TypeNameClassifier:
    void <init>() -> <init>
    java.util.Optional typePrefixLength(java.util.List) -> typePrefixLength
com.google.googlejavaformat.java.TypeNameClassifier$1 -> com.google.googlejavaformat.java.TypeNameClassifier$1:
    int[] $SwitchMap$com$google$googlejavaformat$java$TypeNameClassifier$JavaCaseFormat -> $SwitchMap$com$google$googlejavaformat$java$TypeNameClassifier$JavaCaseFormat
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat -> com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat:
    com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat UPPERCASE -> UPPERCASE
    com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat LOWERCASE -> LOWERCASE
    com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat UPPER_CAMEL -> UPPER_CAMEL
    com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat LOWER_CAMEL -> LOWER_CAMEL
    com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat[] values() -> values
    com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat from(java.lang.String) -> from
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.TypeNameClassifier$TyParseState -> com.google.googlejavaformat.java.TypeNameClassifier$TyParseState:
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState START -> START
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState TYPE -> TYPE
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState FIRST_STATIC_MEMBER -> FIRST_STATIC_MEMBER
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState REJECT -> REJECT
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState AMBIGUOUS -> AMBIGUOUS
    boolean isSingleUnit -> isSingleUnit
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState[] values() -> values
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean) -> <init>
    boolean isSingleUnit() -> isSingleUnit
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState next(com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat) -> next
    void <init>(java.lang.String,int,boolean,com.google.googlejavaformat.java.TypeNameClassifier$1) -> <init>
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$1 -> com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$1:
    void <init>(java.lang.String,int,boolean) -> <init>
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState next(com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat) -> next
com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$2 -> com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$2:
    void <init>(java.lang.String,int,boolean) -> <init>
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState next(com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat) -> next
com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$3 -> com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$3:
    void <init>(java.lang.String,int,boolean) -> <init>
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState next(com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat) -> next
com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$4 -> com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$4:
    void <init>(java.lang.String,int,boolean) -> <init>
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState next(com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat) -> next
com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$5 -> com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$5:
    void <init>(java.lang.String,int,boolean) -> <init>
    com.google.googlejavaformat.java.TypeNameClassifier$TyParseState next(com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat) -> next
com.google.googlejavaformat.java.UsageException -> com.google.googlejavaformat.java.UsageException:
    com.google.common.base.Joiner NEWLINE_JOINER -> NEWLINE_JOINER
    java.lang.String[] DOCS_LINK -> DOCS_LINK
    java.lang.String[] USAGE -> USAGE
    java.lang.String[] ADDITIONAL_USAGE -> ADDITIONAL_USAGE
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String buildMessage(java.lang.String) -> buildMessage
    void appendLine(java.lang.StringBuilder,java.lang.String) -> appendLine
    void appendLines(java.lang.StringBuilder,java.lang.String[]) -> appendLines
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.filer.FormattingFiler -> com.google.googlejavaformat.java.filer.FormattingFiler:
    javax.annotation.processing.Filer delegate -> delegate
    com.google.googlejavaformat.java.Formatter formatter -> formatter
    javax.annotation.processing.Messager messager -> messager
    void <init>(javax.annotation.processing.Filer) -> <init>
    void <init>(javax.annotation.processing.Filer,javax.annotation.processing.Messager) -> <init>
    javax.tools.JavaFileObject createSourceFile(java.lang.CharSequence,javax.lang.model.element.Element[]) -> createSourceFile
    javax.tools.JavaFileObject createClassFile(java.lang.CharSequence,javax.lang.model.element.Element[]) -> createClassFile
    javax.tools.FileObject createResource(javax.tools.JavaFileManager$Location,java.lang.CharSequence,java.lang.CharSequence,javax.lang.model.element.Element[]) -> createResource
    javax.tools.FileObject getResource(javax.tools.JavaFileManager$Location,java.lang.CharSequence,java.lang.CharSequence) -> getResource
com.google.googlejavaformat.java.filer.FormattingJavaFileObject -> com.google.googlejavaformat.java.filer.FormattingJavaFileObject:
    int DEFAULT_FILE_SIZE -> DEFAULT_FILE_SIZE
    com.google.googlejavaformat.java.Formatter formatter -> formatter
    javax.annotation.processing.Messager messager -> messager
    void <init>(javax.tools.JavaFileObject,com.google.googlejavaformat.java.Formatter,javax.annotation.processing.Messager) -> <init>
    java.io.Writer openWriter() -> openWriter
    javax.tools.FileObject access$000(com.google.googlejavaformat.java.filer.FormattingJavaFileObject) -> access$000
    com.google.googlejavaformat.java.Formatter access$100(com.google.googlejavaformat.java.filer.FormattingJavaFileObject) -> access$100
    javax.tools.FileObject access$200(com.google.googlejavaformat.java.filer.FormattingJavaFileObject) -> access$200
    javax.annotation.processing.Messager access$300(com.google.googlejavaformat.java.filer.FormattingJavaFileObject) -> access$300
com.google.googlejavaformat.java.filer.FormattingJavaFileObject$1 -> com.google.googlejavaformat.java.filer.FormattingJavaFileObject$1:
    java.lang.StringBuilder val$stringBuilder -> val$stringBuilder
    com.google.googlejavaformat.java.filer.FormattingJavaFileObject this$0 -> this$0
    void <init>(com.google.googlejavaformat.java.filer.FormattingJavaFileObject,java.lang.StringBuilder) -> <init>
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.google.googlejavaformat.java.filer.FormattingJavaFileObject$1$1 -> com.google.googlejavaformat.java.filer.FormattingJavaFileObject$1$1:
    com.google.googlejavaformat.java.filer.FormattingJavaFileObject$1 this$1 -> this$1
    void <init>(com.google.googlejavaformat.java.filer.FormattingJavaFileObject$1) -> <init>
    java.io.Writer openStream() -> openStream
com.google.googlejavaformat.java.javadoc.CharStream -> com.google.googlejavaformat.java.javadoc.CharStream:
    java.lang.String remaining -> remaining
    int toConsume -> toConsume
    void <init>(java.lang.String) -> <init>
    boolean tryConsume(java.lang.String) -> tryConsume
    boolean tryConsumeRegex(java.util.regex.Pattern) -> tryConsumeRegex
    java.lang.String readAndResetRecorded() -> readAndResetRecorded
    boolean isExhausted() -> isExhausted
com.google.googlejavaformat.java.javadoc.JavadocFormatter -> com.google.googlejavaformat.java.javadoc.JavadocFormatter:
    com.google.googlejavaformat.java.javadoc.Token STANDARD_BR_TOKEN -> STANDARD_BR_TOKEN
    com.google.googlejavaformat.java.javadoc.Token STANDARD_P_TOKEN -> STANDARD_P_TOKEN
    java.util.regex.Pattern SIMPLE_TAG_PATTERN -> SIMPLE_TAG_PATTERN
    java.util.regex.Pattern ONE_CONTENT_LINE_PATTERN -> ONE_CONTENT_LINE_PATTERN
    java.lang.String formatJavadoc(java.lang.String,int,com.google.googlejavaformat.java.javadoc.JavadocOptions) -> formatJavadoc
    java.lang.String render(java.util.List,int,com.google.googlejavaformat.java.javadoc.JavadocOptions) -> render
    com.google.googlejavaformat.java.javadoc.Token standardizeBrToken(com.google.googlejavaformat.java.javadoc.Token) -> standardizeBrToken
    com.google.googlejavaformat.java.javadoc.Token standardizePToken(com.google.googlejavaformat.java.javadoc.Token) -> standardizePToken
    com.google.googlejavaformat.java.javadoc.Token standardize(com.google.googlejavaformat.java.javadoc.Token,com.google.googlejavaformat.java.javadoc.Token) -> standardize
    java.lang.String makeSingleLineIfPossible(int,java.lang.String,com.google.googlejavaformat.java.javadoc.JavadocOptions) -> makeSingleLineIfPossible
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.javadoc.JavadocFormatter$1 -> com.google.googlejavaformat.java.javadoc.JavadocFormatter$1:
    int[] $SwitchMap$com$google$googlejavaformat$java$javadoc$Token$Type -> $SwitchMap$com$google$googlejavaformat$java$javadoc$Token$Type
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.javadoc.JavadocLexer -> com.google.googlejavaformat.java.javadoc.JavadocLexer:
    java.util.regex.Pattern NON_UNIX_LINE_ENDING -> NON_UNIX_LINE_ENDING
    com.google.googlejavaformat.java.javadoc.CharStream input -> input
    com.google.googlejavaformat.java.javadoc.NestingCounter braceDepth -> braceDepth
    com.google.googlejavaformat.java.javadoc.NestingCounter preDepth -> preDepth
    com.google.googlejavaformat.java.javadoc.NestingCounter codeDepth -> codeDepth
    com.google.googlejavaformat.java.javadoc.NestingCounter tableDepth -> tableDepth
    boolean somethingSinceNewline -> somethingSinceNewline
    com.google.common.base.CharMatcher NEWLINE -> NEWLINE
    java.util.regex.Pattern NEWLINE_PATTERN -> NEWLINE_PATTERN
    java.util.regex.Pattern FOOTER_TAG_PATTERN -> FOOTER_TAG_PATTERN
    java.util.regex.Pattern MOE_BEGIN_STRIP_COMMENT_PATTERN -> MOE_BEGIN_STRIP_COMMENT_PATTERN
    java.util.regex.Pattern MOE_END_STRIP_COMMENT_PATTERN -> MOE_END_STRIP_COMMENT_PATTERN
    java.util.regex.Pattern HTML_COMMENT_PATTERN -> HTML_COMMENT_PATTERN
    java.util.regex.Pattern PRE_OPEN_PATTERN -> PRE_OPEN_PATTERN
    java.util.regex.Pattern PRE_CLOSE_PATTERN -> PRE_CLOSE_PATTERN
    java.util.regex.Pattern CODE_OPEN_PATTERN -> CODE_OPEN_PATTERN
    java.util.regex.Pattern CODE_CLOSE_PATTERN -> CODE_CLOSE_PATTERN
    java.util.regex.Pattern TABLE_OPEN_PATTERN -> TABLE_OPEN_PATTERN
    java.util.regex.Pattern TABLE_CLOSE_PATTERN -> TABLE_CLOSE_PATTERN
    java.util.regex.Pattern LIST_OPEN_PATTERN -> LIST_OPEN_PATTERN
    java.util.regex.Pattern LIST_CLOSE_PATTERN -> LIST_CLOSE_PATTERN
    java.util.regex.Pattern LIST_ITEM_OPEN_PATTERN -> LIST_ITEM_OPEN_PATTERN
    java.util.regex.Pattern LIST_ITEM_CLOSE_PATTERN -> LIST_ITEM_CLOSE_PATTERN
    java.util.regex.Pattern HEADER_OPEN_PATTERN -> HEADER_OPEN_PATTERN
    java.util.regex.Pattern HEADER_CLOSE_PATTERN -> HEADER_CLOSE_PATTERN
    java.util.regex.Pattern PARAGRAPH_OPEN_PATTERN -> PARAGRAPH_OPEN_PATTERN
    java.util.regex.Pattern PARAGRAPH_CLOSE_PATTERN -> PARAGRAPH_CLOSE_PATTERN
    java.util.regex.Pattern BLOCKQUOTE_OPEN_PATTERN -> BLOCKQUOTE_OPEN_PATTERN
    java.util.regex.Pattern BLOCKQUOTE_CLOSE_PATTERN -> BLOCKQUOTE_CLOSE_PATTERN
    java.util.regex.Pattern BR_PATTERN -> BR_PATTERN
    java.util.regex.Pattern INLINE_TAG_OPEN_PATTERN -> INLINE_TAG_OPEN_PATTERN
    java.util.regex.Pattern LITERAL_PATTERN -> LITERAL_PATTERN
    com.google.common.collect.ImmutableList lex(java.lang.String) -> lex
    java.lang.String normalizeLineEndings(java.lang.String) -> normalizeLineEndings
    java.lang.String stripJavadocBeginAndEnd(java.lang.String) -> stripJavadocBeginAndEnd
    void <init>(com.google.googlejavaformat.java.javadoc.CharStream) -> <init>
    com.google.common.collect.ImmutableList generateTokens() -> generateTokens
    com.google.googlejavaformat.java.javadoc.Token readToken() -> readToken
    com.google.googlejavaformat.java.javadoc.Token$Type consumeToken() -> consumeToken
    boolean preserveExistingFormatting() -> preserveExistingFormatting
    void checkMatchingTags() -> checkMatchingTags
    com.google.common.collect.ImmutableList joinAdjacentLiteralsAndAdjacentWhitespace(java.util.List) -> joinAdjacentLiteralsAndAdjacentWhitespace
    com.google.common.collect.ImmutableList inferParagraphTags(java.util.List) -> inferParagraphTags
    com.google.common.collect.ImmutableList optionalizeSpacesAfterLinks(java.util.List) -> optionalizeSpacesAfterLinks
    com.google.common.collect.ImmutableList deindentPreCodeBlocks(java.util.List) -> deindentPreCodeBlocks
    void deindentPreCodeBlock(com.google.common.collect.ImmutableList$Builder,com.google.common.collect.PeekingIterator) -> deindentPreCodeBlock
    boolean hasMultipleNewlines(java.lang.String) -> hasMultipleNewlines
    java.util.regex.Pattern fullCommentPattern() -> fullCommentPattern
    java.util.regex.Pattern openTagPattern(java.lang.String) -> openTagPattern
    java.util.regex.Pattern closeTagPattern(java.lang.String) -> closeTagPattern
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.javadoc.JavadocLexer$LexException -> com.google.googlejavaformat.java.javadoc.JavadocLexer$LexException:
    void <init>() -> <init>
com.google.googlejavaformat.java.javadoc.JavadocOptions -> com.google.googlejavaformat.java.javadoc.JavadocOptions:
    int maxLineLength() -> maxLineLength
com.google.googlejavaformat.java.javadoc.JavadocWriter -> com.google.googlejavaformat.java.javadoc.JavadocWriter:
    int blockIndent -> blockIndent
    com.google.googlejavaformat.java.javadoc.JavadocOptions options -> options
    java.lang.StringBuilder output -> output
    boolean continuingListItemOfInnermostList -> continuingListItemOfInnermostList
    boolean continuingFooterTag -> continuingFooterTag
    com.google.googlejavaformat.java.javadoc.NestingCounter continuingListItemCount -> continuingListItemCount
    com.google.googlejavaformat.java.javadoc.NestingCounter continuingListCount -> continuingListCount
    com.google.googlejavaformat.java.javadoc.NestingCounter postWriteModifiedContinuingListCount -> postWriteModifiedContinuingListCount
    int remainingOnLine -> remainingOnLine
    boolean atStartOfLine -> atStartOfLine
    com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace requestedWhitespace -> requestedWhitespace
    com.google.googlejavaformat.java.javadoc.Token requestedMoeBeginStripComment -> requestedMoeBeginStripComment
    int indentForMoeEndStripComment -> indentForMoeEndStripComment
    boolean wroteAnythingSignificant -> wroteAnythingSignificant
    com.google.common.collect.ImmutableSet START_OF_LINE_TOKENS -> START_OF_LINE_TOKENS
    void <init>(int,com.google.googlejavaformat.java.javadoc.JavadocOptions) -> <init>
    void requestWhitespace() -> requestWhitespace
    void requestMoeBeginStripComment(com.google.googlejavaformat.java.javadoc.Token) -> requestMoeBeginStripComment
    void writeBeginJavadoc() -> writeBeginJavadoc
    void writeEndJavadoc() -> writeEndJavadoc
    void writeFooterJavadocTagStart(com.google.googlejavaformat.java.javadoc.Token) -> writeFooterJavadocTagStart
    void writeListOpen(com.google.googlejavaformat.java.javadoc.Token) -> writeListOpen
    void writeListClose(com.google.googlejavaformat.java.javadoc.Token) -> writeListClose
    void writeListItemOpen(com.google.googlejavaformat.java.javadoc.Token) -> writeListItemOpen
    void writeHeaderOpen(com.google.googlejavaformat.java.javadoc.Token) -> writeHeaderOpen
    void writeHeaderClose(com.google.googlejavaformat.java.javadoc.Token) -> writeHeaderClose
    void writeParagraphOpen(com.google.googlejavaformat.java.javadoc.Token) -> writeParagraphOpen
    void writeBlockquoteOpenOrClose(com.google.googlejavaformat.java.javadoc.Token) -> writeBlockquoteOpenOrClose
    void writePreOpen(com.google.googlejavaformat.java.javadoc.Token) -> writePreOpen
    void writePreClose(com.google.googlejavaformat.java.javadoc.Token) -> writePreClose
    void writeCodeOpen(com.google.googlejavaformat.java.javadoc.Token) -> writeCodeOpen
    void writeCodeClose(com.google.googlejavaformat.java.javadoc.Token) -> writeCodeClose
    void writeTableOpen(com.google.googlejavaformat.java.javadoc.Token) -> writeTableOpen
    void writeTableClose(com.google.googlejavaformat.java.javadoc.Token) -> writeTableClose
    void writeMoeEndStripComment(com.google.googlejavaformat.java.javadoc.Token) -> writeMoeEndStripComment
    void writeHtmlComment(com.google.googlejavaformat.java.javadoc.Token) -> writeHtmlComment
    void writeBr(com.google.googlejavaformat.java.javadoc.Token) -> writeBr
    void writeLineBreakNoAutoIndent() -> writeLineBreakNoAutoIndent
    void writeLiteral(com.google.googlejavaformat.java.javadoc.Token) -> writeLiteral
    java.lang.String toString() -> toString
    void requestBlankLine() -> requestBlankLine
    void requestNewline() -> requestNewline
    void requestWhitespace(com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace) -> requestWhitespace
    void writeToken(com.google.googlejavaformat.java.javadoc.Token) -> writeToken
    void writeBlankLine() -> writeBlankLine
    void writeNewline() -> writeNewline
    void writeNewline(com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent) -> writeNewline
    int innerIndent() -> innerIndent
    void appendSpaces(int) -> appendSpaces
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent -> com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent:
    com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent AUTO_INDENT -> AUTO_INDENT
    com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent NO_AUTO_INDENT -> NO_AUTO_INDENT
    com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent[] values() -> values
    com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace -> com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace:
    com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace NONE -> NONE
    com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace WHITESPACE -> WHITESPACE
    com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace NEWLINE -> NEWLINE
    com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace BLANK_LINE -> BLANK_LINE
    com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace[] values() -> values
    com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.googlejavaformat.java.javadoc.NestingCounter -> com.google.googlejavaformat.java.javadoc.NestingCounter:
    int value -> value
    void <init>() -> <init>
    int value() -> value
    void increment() -> increment
    void incrementIfPositive() -> incrementIfPositive
    void decrementIfPositive() -> decrementIfPositive
    boolean isPositive() -> isPositive
    void reset() -> reset
com.google.googlejavaformat.java.javadoc.Token -> com.google.googlejavaformat.java.javadoc.Token:
    com.google.googlejavaformat.java.javadoc.Token$Type type -> type
    java.lang.String value -> value
    void <init>(com.google.googlejavaformat.java.javadoc.Token$Type,java.lang.String) -> <init>
    com.google.googlejavaformat.java.javadoc.Token$Type getType() -> getType
    java.lang.String getValue() -> getValue
    int length() -> length
    java.lang.String toString() -> toString
com.google.googlejavaformat.java.javadoc.Token$Type -> com.google.googlejavaformat.java.javadoc.Token$Type:
    com.google.googlejavaformat.java.javadoc.Token$Type BEGIN_JAVADOC -> BEGIN_JAVADOC
    com.google.googlejavaformat.java.javadoc.Token$Type END_JAVADOC -> END_JAVADOC
    com.google.googlejavaformat.java.javadoc.Token$Type FOOTER_JAVADOC_TAG_START -> FOOTER_JAVADOC_TAG_START
    com.google.googlejavaformat.java.javadoc.Token$Type LIST_OPEN_TAG -> LIST_OPEN_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type LIST_CLOSE_TAG -> LIST_CLOSE_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type LIST_ITEM_OPEN_TAG -> LIST_ITEM_OPEN_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type LIST_ITEM_CLOSE_TAG -> LIST_ITEM_CLOSE_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type HEADER_OPEN_TAG -> HEADER_OPEN_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type HEADER_CLOSE_TAG -> HEADER_CLOSE_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type PARAGRAPH_OPEN_TAG -> PARAGRAPH_OPEN_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type PARAGRAPH_CLOSE_TAG -> PARAGRAPH_CLOSE_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type BLOCKQUOTE_OPEN_TAG -> BLOCKQUOTE_OPEN_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type BLOCKQUOTE_CLOSE_TAG -> BLOCKQUOTE_CLOSE_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type PRE_OPEN_TAG -> PRE_OPEN_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type PRE_CLOSE_TAG -> PRE_CLOSE_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type CODE_OPEN_TAG -> CODE_OPEN_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type CODE_CLOSE_TAG -> CODE_CLOSE_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type TABLE_OPEN_TAG -> TABLE_OPEN_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type TABLE_CLOSE_TAG -> TABLE_CLOSE_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type MOE_BEGIN_STRIP_COMMENT -> MOE_BEGIN_STRIP_COMMENT
    com.google.googlejavaformat.java.javadoc.Token$Type MOE_END_STRIP_COMMENT -> MOE_END_STRIP_COMMENT
    com.google.googlejavaformat.java.javadoc.Token$Type HTML_COMMENT -> HTML_COMMENT
    com.google.googlejavaformat.java.javadoc.Token$Type BR_TAG -> BR_TAG
    com.google.googlejavaformat.java.javadoc.Token$Type WHITESPACE -> WHITESPACE
    com.google.googlejavaformat.java.javadoc.Token$Type FORCED_NEWLINE -> FORCED_NEWLINE
    com.google.googlejavaformat.java.javadoc.Token$Type OPTIONAL_LINE_BREAK -> OPTIONAL_LINE_BREAK
    com.google.googlejavaformat.java.javadoc.Token$Type LITERAL -> LITERAL
    com.google.googlejavaformat.java.javadoc.Token$Type[] $VALUES -> $VALUES
    com.google.googlejavaformat.java.javadoc.Token$Type[] values() -> values
    com.google.googlejavaformat.java.javadoc.Token$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.j2objc.annotations.AutoreleasePool -> com.google.j2objc.annotations.AutoreleasePool:
com.google.j2objc.annotations.J2ObjCIncompatible -> com.google.j2objc.annotations.J2ObjCIncompatible:
com.google.j2objc.annotations.LoopTranslation -> com.google.j2objc.annotations.LoopTranslation:
    com.google.j2objc.annotations.LoopTranslation$LoopStyle value() -> value
com.google.j2objc.annotations.LoopTranslation$LoopStyle -> com.google.j2objc.annotations.LoopTranslation$LoopStyle:
    com.google.j2objc.annotations.LoopTranslation$LoopStyle JAVA_ITERATOR -> JAVA_ITERATOR
    com.google.j2objc.annotations.LoopTranslation$LoopStyle FAST_ENUMERATION -> FAST_ENUMERATION
    com.google.j2objc.annotations.LoopTranslation$LoopStyle[] $VALUES -> $VALUES
    com.google.j2objc.annotations.LoopTranslation$LoopStyle[] values() -> values
    com.google.j2objc.annotations.LoopTranslation$LoopStyle valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.j2objc.annotations.ObjectiveCName -> com.google.j2objc.annotations.ObjectiveCName:
    java.lang.String value() -> value
com.google.j2objc.annotations.Property -> com.google.j2objc.annotations.Property:
    java.lang.String value() -> value
com.google.j2objc.annotations.ReflectionSupport -> com.google.j2objc.annotations.ReflectionSupport:
    com.google.j2objc.annotations.ReflectionSupport$Level value() -> value
com.google.j2objc.annotations.ReflectionSupport$Level -> com.google.j2objc.annotations.ReflectionSupport$Level:
    com.google.j2objc.annotations.ReflectionSupport$Level NATIVE_ONLY -> NATIVE_ONLY
    com.google.j2objc.annotations.ReflectionSupport$Level FULL -> FULL
    com.google.j2objc.annotations.ReflectionSupport$Level[] $VALUES -> $VALUES
    com.google.j2objc.annotations.ReflectionSupport$Level[] values() -> values
    com.google.j2objc.annotations.ReflectionSupport$Level valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.j2objc.annotations.RetainedLocalRef -> com.google.j2objc.annotations.RetainedLocalRef:
com.google.j2objc.annotations.RetainedWith -> com.google.j2objc.annotations.RetainedWith:
com.google.j2objc.annotations.Weak -> com.google.j2objc.annotations.Weak:
com.google.j2objc.annotations.WeakOuter -> com.google.j2objc.annotations.WeakOuter:
com.google.thirdparty.publicsuffix.PublicSuffixPatterns -> com.google.thirdparty.publicsuffix.PublicSuffixPatterns:
    com.google.common.collect.ImmutableMap EXACT -> EXACT
    com.google.common.collect.ImmutableMap UNDER -> UNDER
    com.google.common.collect.ImmutableMap EXCLUDED -> EXCLUDED
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.google.thirdparty.publicsuffix.PublicSuffixType -> com.google.thirdparty.publicsuffix.PublicSuffixType:
    com.google.thirdparty.publicsuffix.PublicSuffixType PRIVATE -> PRIVATE
    com.google.thirdparty.publicsuffix.PublicSuffixType REGISTRY -> REGISTRY
    char innerNodeCode -> innerNodeCode
    char leafNodeCode -> leafNodeCode
    com.google.thirdparty.publicsuffix.PublicSuffixType[] $VALUES -> $VALUES
    com.google.thirdparty.publicsuffix.PublicSuffixType[] values() -> values
    com.google.thirdparty.publicsuffix.PublicSuffixType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,char,char) -> <init>
    char getLeafNodeCode() -> getLeafNodeCode
    char getInnerNodeCode() -> getInnerNodeCode
    com.google.thirdparty.publicsuffix.PublicSuffixType fromCode(char) -> fromCode
    com.google.thirdparty.publicsuffix.PublicSuffixType fromIsPrivate(boolean) -> fromIsPrivate
    void <clinit>() -> <clinit>
com.google.thirdparty.publicsuffix.TrieParser -> com.google.thirdparty.publicsuffix.TrieParser:
    com.google.common.base.Joiner PREFIX_JOINER -> PREFIX_JOINER
    void <init>() -> <init>
    com.google.common.collect.ImmutableMap parseTrie(java.lang.CharSequence) -> parseTrie
    int doParseTrieToBuilder(java.util.List,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder) -> doParseTrieToBuilder
    java.lang.CharSequence reverse(java.lang.CharSequence) -> reverse
    void <clinit>() -> <clinit>
javassist.ByteArrayClassPath -> javassist.ByteArrayClassPath:
    java.lang.String classname -> classname
    byte[] classfile -> classfile
    void <init>(java.lang.String,byte[]) -> <init>
    java.lang.String toString() -> toString
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
javassist.ByteArrayClassPath$1 -> javassist.ByteArrayClassPath$1:
javassist.ByteArrayClassPath$BytecodeURLConnection -> javassist.ByteArrayClassPath$BytecodeURLConnection:
    javassist.ByteArrayClassPath this$0 -> this$0
    void <init>(javassist.ByteArrayClassPath,java.net.URL) -> <init>
    void connect() -> connect
    java.io.InputStream getInputStream() -> getInputStream
    int getContentLength() -> getContentLength
javassist.ByteArrayClassPath$BytecodeURLStreamHandler -> javassist.ByteArrayClassPath$BytecodeURLStreamHandler:
    javassist.ByteArrayClassPath this$0 -> this$0
    void <init>(javassist.ByteArrayClassPath) -> <init>
    java.net.URLConnection openConnection(java.net.URL) -> openConnection
    void <init>(javassist.ByteArrayClassPath,javassist.ByteArrayClassPath$1) -> <init>
javassist.CannotCompileException -> javassist.CannotCompileException:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable myCause -> myCause
    java.lang.String message -> message
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
    java.lang.String getReason() -> getReason
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(javassist.NotFoundException) -> <init>
    void <init>(javassist.compiler.CompileError) -> <init>
    void <init>(java.lang.ClassNotFoundException,java.lang.String) -> <init>
    void <init>(java.lang.ClassFormatError,java.lang.String) -> <init>
javassist.ClassClassPath -> javassist.ClassClassPath:
    java.lang.Class thisClass -> thisClass
    void <init>(java.lang.Class) -> <init>
    void <init>() -> <init>
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
    java.lang.String toString() -> toString
javassist.ClassMap -> javassist.ClassMap:
    long serialVersionUID -> serialVersionUID
    javassist.ClassMap parent -> parent
    void <init>() -> <init>
    void <init>(javassist.ClassMap) -> <init>
    void put(javassist.CtClass,javassist.CtClass) -> put
    java.lang.String put(java.lang.String,java.lang.String) -> put
    void putIfNone(java.lang.String,java.lang.String) -> putIfNone
    java.lang.String put0(java.lang.String,java.lang.String) -> put0
    java.lang.String get(java.lang.Object) -> get
    void fix(javassist.CtClass) -> fix
    void fix(java.lang.String) -> fix
    java.lang.String toJvmName(java.lang.String) -> toJvmName
    java.lang.String toJavaName(java.lang.String) -> toJavaName
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
javassist.ClassPath -> javassist.ClassPath:
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
javassist.ClassPathList -> javassist.ClassPathList:
    javassist.ClassPathList next -> next
    javassist.ClassPath path -> path
    void <init>(javassist.ClassPath,javassist.ClassPathList) -> <init>
javassist.ClassPool -> javassist.ClassPool:
    boolean childFirstLookup -> childFirstLookup
    boolean doPruning -> doPruning
    int compressCount -> compressCount
    int COMPRESS_THRESHOLD -> COMPRESS_THRESHOLD
    boolean releaseUnmodifiedClassFile -> releaseUnmodifiedClassFile
    boolean cacheOpenedJarFile -> cacheOpenedJarFile
    javassist.ClassPoolTail source -> source
    javassist.ClassPool parent -> parent
    java.util.Hashtable classes -> classes
    java.util.Hashtable cflow -> cflow
    int INIT_HASH_SIZE -> INIT_HASH_SIZE
    java.util.ArrayList importedPackages -> importedPackages
    javassist.ClassPool defaultPool -> defaultPool
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(javassist.ClassPool) -> <init>
    javassist.ClassPool getDefault() -> getDefault
    javassist.CtClass getCached(java.lang.String) -> getCached
    void cacheCtClass(java.lang.String,javassist.CtClass,boolean) -> cacheCtClass
    javassist.CtClass removeCached(java.lang.String) -> removeCached
    java.lang.String toString() -> toString
    void compress() -> compress
    void importPackage(java.lang.String) -> importPackage
    void clearImportedPackages() -> clearImportedPackages
    java.util.Iterator getImportedPackages() -> getImportedPackages
    void recordInvalidClassName(java.lang.String) -> recordInvalidClassName
    void recordCflow(java.lang.String,java.lang.String,java.lang.String) -> recordCflow
    java.lang.Object[] lookupCflow(java.lang.String) -> lookupCflow
    javassist.CtClass getAndRename(java.lang.String,java.lang.String) -> getAndRename
    void classNameChanged(java.lang.String,javassist.CtClass) -> classNameChanged
    javassist.CtClass get(java.lang.String) -> get
    javassist.CtClass getOrNull(java.lang.String) -> getOrNull
    javassist.CtClass getCtClass(java.lang.String) -> getCtClass
    javassist.CtClass get0(java.lang.String,boolean) -> get0
    javassist.CtClass createCtClass(java.lang.String,boolean) -> createCtClass
    java.net.URL find(java.lang.String) -> find
    void checkNotFrozen(java.lang.String) -> checkNotFrozen
    javassist.CtClass checkNotExists(java.lang.String) -> checkNotExists
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    void writeClassfile(java.lang.String,java.io.OutputStream) -> writeClassfile
    javassist.CtClass[] get(java.lang.String[]) -> get
    javassist.CtMethod getMethod(java.lang.String,java.lang.String) -> getMethod
    javassist.CtClass makeClass(java.io.InputStream) -> makeClass
    javassist.CtClass makeClass(java.io.InputStream,boolean) -> makeClass
    javassist.CtClass makeClass(javassist.bytecode.ClassFile) -> makeClass
    javassist.CtClass makeClass(javassist.bytecode.ClassFile,boolean) -> makeClass
    javassist.CtClass makeClassIfNew(java.io.InputStream) -> makeClassIfNew
    javassist.CtClass makeClass(java.lang.String) -> makeClass
    javassist.CtClass makeClass(java.lang.String,javassist.CtClass) -> makeClass
    javassist.CtClass makeNestedClass(java.lang.String) -> makeNestedClass
    javassist.CtClass makeInterface(java.lang.String) -> makeInterface
    javassist.CtClass makeInterface(java.lang.String,javassist.CtClass) -> makeInterface
    javassist.CtClass makeAnnotation(java.lang.String) -> makeAnnotation
    javassist.ClassPath appendSystemPath() -> appendSystemPath
    javassist.ClassPath insertClassPath(javassist.ClassPath) -> insertClassPath
    javassist.ClassPath appendClassPath(javassist.ClassPath) -> appendClassPath
    javassist.ClassPath insertClassPath(java.lang.String) -> insertClassPath
    javassist.ClassPath appendClassPath(java.lang.String) -> appendClassPath
    void removeClassPath(javassist.ClassPath) -> removeClassPath
    void appendPathList(java.lang.String) -> appendPathList
    java.lang.Class toClass(javassist.CtClass) -> toClass
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    java.lang.ClassLoader getContextClassLoader() -> getContextClassLoader
    java.lang.Class toClass(javassist.CtClass,java.lang.ClassLoader) -> toClass
    java.lang.Class toClass(javassist.CtClass,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    java.lang.Class toClass(javassist.CtClass,java.lang.Class) -> toClass
    java.lang.Class toClass(javassist.CtClass,java.lang.invoke.MethodHandles$Lookup) -> toClass
    java.lang.Class toClass(javassist.CtClass,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    void makePackage(java.lang.ClassLoader,java.lang.String) -> makePackage
    void <clinit>() -> <clinit>
javassist.ClassPoolTail -> javassist.ClassPoolTail:
    javassist.ClassPathList pathList -> pathList
    void <init>() -> <init>
    java.lang.String toString() -> toString
    javassist.ClassPath insertClassPath(javassist.ClassPath) -> insertClassPath
    javassist.ClassPath appendClassPath(javassist.ClassPath) -> appendClassPath
    void removeClassPath(javassist.ClassPath) -> removeClassPath
    javassist.ClassPath appendSystemPath() -> appendSystemPath
    javassist.ClassPath insertClassPath(java.lang.String) -> insertClassPath
    javassist.ClassPath appendClassPath(java.lang.String) -> appendClassPath
    javassist.ClassPath makePathObject(java.lang.String) -> makePathObject
    void writeClassfile(java.lang.String,java.io.OutputStream) -> writeClassfile
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
    byte[] readStream(java.io.InputStream) -> readStream
    void copyStream(java.io.InputStream,java.io.OutputStream) -> copyStream
javassist.CodeConverter -> javassist.CodeConverter:
    javassist.convert.Transformer transformers -> transformers
    void <init>() -> <init>
    void replaceNew(javassist.CtClass,javassist.CtClass,java.lang.String) -> replaceNew
    void replaceNew(javassist.CtClass,javassist.CtClass) -> replaceNew
    void redirectFieldAccess(javassist.CtField,javassist.CtClass,java.lang.String) -> redirectFieldAccess
    void replaceFieldRead(javassist.CtField,javassist.CtClass,java.lang.String) -> replaceFieldRead
    void replaceFieldWrite(javassist.CtField,javassist.CtClass,java.lang.String) -> replaceFieldWrite
    void replaceArrayAccess(javassist.CtClass,javassist.CodeConverter$ArrayAccessReplacementMethodNames) -> replaceArrayAccess
    void redirectMethodCall(javassist.CtMethod,javassist.CtMethod) -> redirectMethodCall
    void redirectMethodCall(java.lang.String,javassist.CtMethod) -> redirectMethodCall
    void redirectMethodCallToStatic(javassist.CtMethod,javassist.CtMethod) -> redirectMethodCallToStatic
    void insertBeforeMethod(javassist.CtMethod,javassist.CtMethod) -> insertBeforeMethod
    void insertAfterMethod(javassist.CtMethod,javassist.CtMethod) -> insertAfterMethod
    void doit(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.bytecode.ConstPool) -> doit
javassist.CodeConverter$ArrayAccessReplacementMethodNames -> javassist.CodeConverter$ArrayAccessReplacementMethodNames:
    java.lang.String byteOrBooleanRead() -> byteOrBooleanRead
    java.lang.String byteOrBooleanWrite() -> byteOrBooleanWrite
    java.lang.String charRead() -> charRead
    java.lang.String charWrite() -> charWrite
    java.lang.String doubleRead() -> doubleRead
    java.lang.String doubleWrite() -> doubleWrite
    java.lang.String floatRead() -> floatRead
    java.lang.String floatWrite() -> floatWrite
    java.lang.String intRead() -> intRead
    java.lang.String intWrite() -> intWrite
    java.lang.String longRead() -> longRead
    java.lang.String longWrite() -> longWrite
    java.lang.String objectRead() -> objectRead
    java.lang.String objectWrite() -> objectWrite
    java.lang.String shortRead() -> shortRead
    java.lang.String shortWrite() -> shortWrite
javassist.CodeConverter$DefaultArrayAccessReplacementMethodNames -> javassist.CodeConverter$DefaultArrayAccessReplacementMethodNames:
    void <init>() -> <init>
    java.lang.String byteOrBooleanRead() -> byteOrBooleanRead
    java.lang.String byteOrBooleanWrite() -> byteOrBooleanWrite
    java.lang.String charRead() -> charRead
    java.lang.String charWrite() -> charWrite
    java.lang.String doubleRead() -> doubleRead
    java.lang.String doubleWrite() -> doubleWrite
    java.lang.String floatRead() -> floatRead
    java.lang.String floatWrite() -> floatWrite
    java.lang.String intRead() -> intRead
    java.lang.String intWrite() -> intWrite
    java.lang.String longRead() -> longRead
    java.lang.String longWrite() -> longWrite
    java.lang.String objectRead() -> objectRead
    java.lang.String objectWrite() -> objectWrite
    java.lang.String shortRead() -> shortRead
    java.lang.String shortWrite() -> shortWrite
javassist.CtArray -> javassist.CtArray:
    javassist.ClassPool pool -> pool
    javassist.CtClass[] interfaces -> interfaces
    void <init>(java.lang.String,javassist.ClassPool) -> <init>
    javassist.ClassPool getClassPool() -> getClassPool
    boolean isArray() -> isArray
    int getModifiers() -> getModifiers
    javassist.CtClass[] getInterfaces() -> getInterfaces
    boolean subtypeOf(javassist.CtClass) -> subtypeOf
    javassist.CtClass getComponentType() -> getComponentType
    javassist.CtClass getSuperclass() -> getSuperclass
    javassist.CtMethod[] getMethods() -> getMethods
    javassist.CtMethod getMethod(java.lang.String,java.lang.String) -> getMethod
    javassist.CtConstructor[] getConstructors() -> getConstructors
javassist.CtBehavior -> javassist.CtBehavior:
    javassist.bytecode.MethodInfo methodInfo -> methodInfo
    void <init>(javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    void copy(javassist.CtBehavior,boolean,javassist.ClassMap) -> copy
    void extendToString(java.lang.StringBuffer) -> extendToString
    java.lang.String getLongName() -> getLongName
    javassist.bytecode.MethodInfo getMethodInfo() -> getMethodInfo
    javassist.bytecode.MethodInfo getMethodInfo2() -> getMethodInfo2
    int getModifiers() -> getModifiers
    void setModifiers(int) -> setModifiers
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    java.lang.Object[] getAnnotations(boolean) -> getAnnotations
    java.lang.Object[][] getParameterAnnotations() -> getParameterAnnotations
    java.lang.Object[][] getAvailableParameterAnnotations() -> getAvailableParameterAnnotations
    java.lang.Object[][] getParameterAnnotations(boolean) -> getParameterAnnotations
    javassist.CtClass[] getParameterTypes() -> getParameterTypes
    javassist.CtClass getReturnType0() -> getReturnType0
    java.lang.String getSignature() -> getSignature
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    javassist.CtClass[] getExceptionTypes() -> getExceptionTypes
    void setExceptionTypes(javassist.CtClass[]) -> setExceptionTypes
    boolean isEmpty() -> isEmpty
    void setBody(java.lang.String) -> setBody
    void setBody(java.lang.String,java.lang.String,java.lang.String) -> setBody
    void setBody0(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.CtClass,javassist.bytecode.MethodInfo,javassist.ClassMap) -> setBody0
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
    void useCflow(java.lang.String) -> useCflow
    void addLocalVariable(java.lang.String,javassist.CtClass) -> addLocalVariable
    void insertParameter(javassist.CtClass) -> insertParameter
    void addParameter(javassist.CtClass) -> addParameter
    void addParameter2(int,javassist.CtClass,java.lang.String) -> addParameter2
    void instrument(javassist.CodeConverter) -> instrument
    void instrument(javassist.expr.ExprEditor) -> instrument
    void insertBefore(java.lang.String) -> insertBefore
    void insertBefore(java.lang.String,boolean) -> insertBefore
    void insertAfter(java.lang.String) -> insertAfter
    void insertAfter(java.lang.String,boolean) -> insertAfter
    void insertAfter(java.lang.String,boolean,boolean) -> insertAfter
    int insertAfterAdvice(javassist.bytecode.Bytecode,javassist.compiler.Javac,java.lang.String,javassist.bytecode.ConstPool,javassist.CtClass,int) -> insertAfterAdvice
    void insertGoto(javassist.bytecode.CodeIterator,int,int) -> insertGoto
    int insertAfterHandler(boolean,javassist.bytecode.Bytecode,javassist.CtClass,int,javassist.compiler.Javac,java.lang.String) -> insertAfterHandler
    void addCatch(java.lang.String,javassist.CtClass) -> addCatch
    void addCatch(java.lang.String,javassist.CtClass,java.lang.String) -> addCatch
    int getStartPosOfBody(javassist.bytecode.CodeAttribute) -> getStartPosOfBody
    int insertAt(int,java.lang.String) -> insertAt
    int insertAt(int,boolean,java.lang.String) -> insertAt
javassist.CtClass -> javassist.CtClass:
    java.lang.String qualifiedName -> qualifiedName
    java.lang.String debugDump -> debugDump
    java.lang.String version -> version
    java.lang.String javaLangObject -> javaLangObject
    javassist.CtClass booleanType -> booleanType
    javassist.CtClass charType -> charType
    javassist.CtClass byteType -> byteType
    javassist.CtClass shortType -> shortType
    javassist.CtClass intType -> intType
    javassist.CtClass longType -> longType
    javassist.CtClass floatType -> floatType
    javassist.CtClass doubleType -> doubleType
    javassist.CtClass voidType -> voidType
    javassist.CtClass[] primitiveTypes -> primitiveTypes
    void main(java.lang.String[]) -> main
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
    void extendToString(java.lang.StringBuffer) -> extendToString
    javassist.ClassPool getClassPool() -> getClassPool
    javassist.bytecode.ClassFile getClassFile() -> getClassFile
    javassist.bytecode.ClassFile getClassFile2() -> getClassFile2
    javassist.compiler.AccessorMaker getAccessorMaker() -> getAccessorMaker
    java.net.URL getURL() -> getURL
    boolean isModified() -> isModified
    boolean isFrozen() -> isFrozen
    void freeze() -> freeze
    void checkModify() -> checkModify
    void defrost() -> defrost
    boolean isPrimitive() -> isPrimitive
    boolean isArray() -> isArray
    boolean isKotlin() -> isKotlin
    javassist.CtClass getComponentType() -> getComponentType
    boolean subtypeOf(javassist.CtClass) -> subtypeOf
    java.lang.String getName() -> getName
    java.lang.String getSimpleName() -> getSimpleName
    java.lang.String getPackageName() -> getPackageName
    void setName(java.lang.String) -> setName
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    void replaceClassName(java.lang.String,java.lang.String) -> replaceClassName
    void replaceClassName(javassist.ClassMap) -> replaceClassName
    java.util.Collection getRefClasses() -> getRefClasses
    boolean isInterface() -> isInterface
    boolean isAnnotation() -> isAnnotation
    boolean isEnum() -> isEnum
    int getModifiers() -> getModifiers
    boolean hasAnnotation(java.lang.Class) -> hasAnnotation
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    javassist.CtClass[] getDeclaredClasses() -> getDeclaredClasses
    javassist.CtClass[] getNestedClasses() -> getNestedClasses
    void setModifiers(int) -> setModifiers
    boolean subclassOf(javassist.CtClass) -> subclassOf
    javassist.CtClass getSuperclass() -> getSuperclass
    void setSuperclass(javassist.CtClass) -> setSuperclass
    javassist.CtClass[] getInterfaces() -> getInterfaces
    void setInterfaces(javassist.CtClass[]) -> setInterfaces
    void addInterface(javassist.CtClass) -> addInterface
    javassist.CtClass getDeclaringClass() -> getDeclaringClass
    javassist.CtMethod getEnclosingMethod() -> getEnclosingMethod
    javassist.CtBehavior getEnclosingBehavior() -> getEnclosingBehavior
    javassist.CtClass makeNestedClass(java.lang.String,boolean) -> makeNestedClass
    javassist.CtField[] getFields() -> getFields
    javassist.CtField getField(java.lang.String) -> getField
    javassist.CtField getField(java.lang.String,java.lang.String) -> getField
    javassist.CtField getField2(java.lang.String,java.lang.String) -> getField2
    javassist.CtField[] getDeclaredFields() -> getDeclaredFields
    javassist.CtField getDeclaredField(java.lang.String) -> getDeclaredField
    javassist.CtField getDeclaredField(java.lang.String,java.lang.String) -> getDeclaredField
    javassist.CtBehavior[] getDeclaredBehaviors() -> getDeclaredBehaviors
    javassist.CtConstructor[] getConstructors() -> getConstructors
    javassist.CtConstructor getConstructor(java.lang.String) -> getConstructor
    javassist.CtConstructor[] getDeclaredConstructors() -> getDeclaredConstructors
    javassist.CtConstructor getDeclaredConstructor(javassist.CtClass[]) -> getDeclaredConstructor
    javassist.CtConstructor getClassInitializer() -> getClassInitializer
    javassist.CtMethod[] getMethods() -> getMethods
    javassist.CtMethod getMethod(java.lang.String,java.lang.String) -> getMethod
    javassist.CtMethod[] getDeclaredMethods() -> getDeclaredMethods
    javassist.CtMethod getDeclaredMethod(java.lang.String,javassist.CtClass[]) -> getDeclaredMethod
    javassist.CtMethod[] getDeclaredMethods(java.lang.String) -> getDeclaredMethods
    javassist.CtMethod getDeclaredMethod(java.lang.String) -> getDeclaredMethod
    javassist.CtConstructor makeClassInitializer() -> makeClassInitializer
    void addConstructor(javassist.CtConstructor) -> addConstructor
    void removeConstructor(javassist.CtConstructor) -> removeConstructor
    void addMethod(javassist.CtMethod) -> addMethod
    void removeMethod(javassist.CtMethod) -> removeMethod
    void addField(javassist.CtField) -> addField
    void addField(javassist.CtField,java.lang.String) -> addField
    void addField(javassist.CtField,javassist.CtField$Initializer) -> addField
    void removeField(javassist.CtField) -> removeField
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
    void instrument(javassist.CodeConverter) -> instrument
    void instrument(javassist.expr.ExprEditor) -> instrument
    java.lang.Class toClass() -> toClass
    java.lang.Class toClass(java.lang.Class) -> toClass
    java.lang.Class toClass(java.lang.invoke.MethodHandles$Lookup) -> toClass
    java.lang.Class toClass(java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    java.lang.Class toClass(java.lang.ClassLoader) -> toClass
    void detach() -> detach
    boolean stopPruning(boolean) -> stopPruning
    void prune() -> prune
    void incGetCounter() -> incGetCounter
    void rebuildClassFile() -> rebuildClassFile
    byte[] toBytecode() -> toBytecode
    void writeFile() -> writeFile
    void writeFile(java.lang.String) -> writeFile
    java.io.DataOutputStream makeFileOutput(java.lang.String) -> makeFileOutput
    void debugWriteFile() -> debugWriteFile
    void debugWriteFile(java.lang.String) -> debugWriteFile
    void toBytecode(java.io.DataOutputStream) -> toBytecode
    java.lang.String makeUniqueName(java.lang.String) -> makeUniqueName
    void compress() -> compress
    void <clinit>() -> <clinit>
javassist.CtClass$1 -> javassist.CtClass$1:
    long serialVersionUID -> serialVersionUID
    javassist.CtClass this$0 -> this$0
    void <init>(javassist.CtClass) -> <init>
    java.lang.String put(java.lang.String,java.lang.String) -> put
    java.lang.String get(java.lang.Object) -> get
    void fix(java.lang.String) -> fix
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
javassist.CtClass$DelayedFileOutputStream -> javassist.CtClass$DelayedFileOutputStream:
    java.io.FileOutputStream file -> file
    java.lang.String filename -> filename
    void <init>(java.lang.String) -> <init>
    void init() -> init
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
javassist.CtClassType -> javassist.CtClassType:
    javassist.ClassPool classPool -> classPool
    boolean wasChanged -> wasChanged
    boolean wasFrozen -> wasFrozen
    boolean wasPruned -> wasPruned
    boolean gcConstPool -> gcConstPool
    javassist.bytecode.ClassFile classfile -> classfile
    byte[] rawClassfile -> rawClassfile
    java.lang.ref.Reference memberCache -> memberCache
    javassist.compiler.AccessorMaker accessors -> accessors
    javassist.FieldInitLink fieldInitializers -> fieldInitializers
    java.util.Map hiddenMethods -> hiddenMethods
    int uniqueNumberSeed -> uniqueNumberSeed
    boolean doPruning -> doPruning
    int getCount -> getCount
    int GET_THRESHOLD -> GET_THRESHOLD
    void <init>(java.lang.String,javassist.ClassPool) -> <init>
    void <init>(java.io.InputStream,javassist.ClassPool) -> <init>
    void <init>(javassist.bytecode.ClassFile,javassist.ClassPool) -> <init>
    void extendToString(java.lang.StringBuffer) -> extendToString
    void exToString(java.lang.StringBuffer,java.lang.String,javassist.CtMember,javassist.CtMember) -> exToString
    javassist.compiler.AccessorMaker getAccessorMaker() -> getAccessorMaker
    javassist.bytecode.ClassFile getClassFile2() -> getClassFile2
    javassist.bytecode.ClassFile getClassFile3(boolean) -> getClassFile3
    void incGetCounter() -> incGetCounter
    void compress() -> compress
    void saveClassFile() -> saveClassFile
    void removeClassFile() -> removeClassFile
    javassist.bytecode.ClassFile setClassFile(javassist.bytecode.ClassFile) -> setClassFile
    javassist.ClassPool getClassPool() -> getClassPool
    void setClassPool(javassist.ClassPool) -> setClassPool
    java.net.URL getURL() -> getURL
    boolean isModified() -> isModified
    boolean isFrozen() -> isFrozen
    void freeze() -> freeze
    void checkModify() -> checkModify
    void defrost() -> defrost
    boolean subtypeOf(javassist.CtClass) -> subtypeOf
    void setName(java.lang.String) -> setName
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    void replaceClassName(javassist.ClassMap) -> replaceClassName
    void replaceClassName(java.lang.String,java.lang.String) -> replaceClassName
    boolean isInterface() -> isInterface
    boolean isAnnotation() -> isAnnotation
    boolean isEnum() -> isEnum
    int getModifiers() -> getModifiers
    javassist.CtClass[] getNestedClasses() -> getNestedClasses
    void setModifiers(int) -> setModifiers
    void updateInnerEntry(int,java.lang.String,javassist.CtClass,boolean) -> updateInnerEntry
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    boolean hasAnnotationType(java.lang.Class,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute) -> hasAnnotationType
    boolean hasAnnotationType(java.lang.String,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute) -> hasAnnotationType
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object getAnnotationType(java.lang.Class,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute) -> getAnnotationType
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    java.lang.Object[] getAnnotations(boolean) -> getAnnotations
    java.lang.Object[] toAnnotationType(boolean,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute) -> toAnnotationType
    java.lang.Object[][] toAnnotationType(boolean,javassist.ClassPool,javassist.bytecode.ParameterAnnotationsAttribute,javassist.bytecode.ParameterAnnotationsAttribute,javassist.bytecode.MethodInfo) -> toAnnotationType
    java.lang.Object toAnnoType(javassist.bytecode.annotation.Annotation,javassist.ClassPool) -> toAnnoType
    boolean subclassOf(javassist.CtClass) -> subclassOf
    javassist.CtClass getSuperclass() -> getSuperclass
    void setSuperclass(javassist.CtClass) -> setSuperclass
    javassist.CtClass[] getInterfaces() -> getInterfaces
    void setInterfaces(javassist.CtClass[]) -> setInterfaces
    void addInterface(javassist.CtClass) -> addInterface
    javassist.CtClass getDeclaringClass() -> getDeclaringClass
    javassist.CtBehavior getEnclosingBehavior() -> getEnclosingBehavior
    javassist.CtClass makeNestedClass(java.lang.String,boolean) -> makeNestedClass
    void nameReplaced() -> nameReplaced
    javassist.CtMember$Cache hasMemberCache() -> hasMemberCache
    javassist.CtMember$Cache getMembers() -> getMembers
    void makeFieldCache(javassist.CtMember$Cache) -> makeFieldCache
    void makeBehaviorCache(javassist.CtMember$Cache) -> makeBehaviorCache
    javassist.CtField[] getFields() -> getFields
    void getFields(java.util.List,javassist.CtClass) -> getFields
    javassist.CtField getField(java.lang.String,java.lang.String) -> getField
    javassist.CtField checkGetField(javassist.CtField,java.lang.String,java.lang.String) -> checkGetField
    javassist.CtField getField2(java.lang.String,java.lang.String) -> getField2
    javassist.CtField[] getDeclaredFields() -> getDeclaredFields
    javassist.CtField getDeclaredField(java.lang.String) -> getDeclaredField
    javassist.CtField getDeclaredField(java.lang.String,java.lang.String) -> getDeclaredField
    javassist.CtField getDeclaredField2(java.lang.String,java.lang.String) -> getDeclaredField2
    javassist.CtBehavior[] getDeclaredBehaviors() -> getDeclaredBehaviors
    javassist.CtConstructor[] getConstructors() -> getConstructors
    boolean isPubCons(javassist.CtConstructor) -> isPubCons
    javassist.CtConstructor getConstructor(java.lang.String) -> getConstructor
    javassist.CtConstructor[] getDeclaredConstructors() -> getDeclaredConstructors
    javassist.CtConstructor getClassInitializer() -> getClassInitializer
    javassist.CtMethod[] getMethods() -> getMethods
    void getMethods0(java.util.Map,javassist.CtClass) -> getMethods0
    javassist.CtMethod getMethod(java.lang.String,java.lang.String) -> getMethod
    javassist.CtMethod getMethod0(javassist.CtClass,java.lang.String,java.lang.String) -> getMethod0
    javassist.CtMethod[] getDeclaredMethods() -> getDeclaredMethods
    javassist.CtMethod[] getDeclaredMethods(java.lang.String) -> getDeclaredMethods
    javassist.CtMethod getDeclaredMethod(java.lang.String) -> getDeclaredMethod
    javassist.CtMethod getDeclaredMethod(java.lang.String,javassist.CtClass[]) -> getDeclaredMethod
    void addField(javassist.CtField,java.lang.String) -> addField
    void addField(javassist.CtField,javassist.CtField$Initializer) -> addField
    void removeField(javassist.CtField) -> removeField
    javassist.CtConstructor makeClassInitializer() -> makeClassInitializer
    void addConstructor(javassist.CtConstructor) -> addConstructor
    void removeConstructor(javassist.CtConstructor) -> removeConstructor
    void addMethod(javassist.CtMethod) -> addMethod
    void removeMethod(javassist.CtMethod) -> removeMethod
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
    void instrument(javassist.CodeConverter) -> instrument
    void instrument(javassist.expr.ExprEditor) -> instrument
    void prune() -> prune
    void rebuildClassFile() -> rebuildClassFile
    void toBytecode(java.io.DataOutputStream) -> toBytecode
    void dumpClassFile(javassist.bytecode.ClassFile) -> dumpClassFile
    void checkPruned(java.lang.String) -> checkPruned
    boolean stopPruning(boolean) -> stopPruning
    void modifyClassConstructor(javassist.bytecode.ClassFile) -> modifyClassConstructor
    void modifyClassConstructor(javassist.bytecode.ClassFile,javassist.bytecode.Bytecode,int,int) -> modifyClassConstructor
    void modifyConstructors(javassist.bytecode.ClassFile) -> modifyConstructors
    void insertAuxInitializer(javassist.bytecode.CodeAttribute,javassist.bytecode.Bytecode,int) -> insertAuxInitializer
    int makeFieldInitializer(javassist.bytecode.Bytecode,javassist.CtClass[]) -> makeFieldInitializer
    java.util.Map getHiddenMethods() -> getHiddenMethods
    int getUniqueNumber() -> getUniqueNumber
    java.lang.String makeUniqueName(java.lang.String) -> makeUniqueName
    boolean notFindInArray(java.lang.String,java.lang.String[]) -> notFindInArray
    void makeMemberList(java.util.Map) -> makeMemberList
javassist.CtConstructor -> javassist.CtConstructor:
    void <init>(javassist.bytecode.MethodInfo,javassist.CtClass) -> <init>
    void <init>(javassist.CtClass[],javassist.CtClass) -> <init>
    void <init>(javassist.CtConstructor,javassist.CtClass,javassist.ClassMap) -> <init>
    boolean isConstructor() -> isConstructor
    boolean isClassInitializer() -> isClassInitializer
    java.lang.String getLongName() -> getLongName
    java.lang.String getName() -> getName
    boolean isEmpty() -> isEmpty
    java.lang.String getSuperclassName() -> getSuperclassName
    boolean callsSuper() -> callsSuper
    void setBody(java.lang.String) -> setBody
    void setBody(javassist.CtConstructor,javassist.ClassMap) -> setBody
    void insertBeforeBody(java.lang.String) -> insertBeforeBody
    int getStartPosOfBody(javassist.bytecode.CodeAttribute) -> getStartPosOfBody
    javassist.CtMethod toMethod(java.lang.String,javassist.CtClass) -> toMethod
    javassist.CtMethod toMethod(java.lang.String,javassist.CtClass,javassist.ClassMap) -> toMethod
    void removeConsCall(javassist.bytecode.CodeAttribute) -> removeConsCall
javassist.CtField -> javassist.CtField:
    java.lang.String javaLangString -> javaLangString
    javassist.bytecode.FieldInfo fieldInfo -> fieldInfo
    void <init>(javassist.CtClass,java.lang.String,javassist.CtClass) -> <init>
    void <init>(javassist.CtField,javassist.CtClass) -> <init>
    void <init>(java.lang.String,java.lang.String,javassist.CtClass) -> <init>
    void <init>(javassist.bytecode.FieldInfo,javassist.CtClass) -> <init>
    java.lang.String toString() -> toString
    void extendToString(java.lang.StringBuffer) -> extendToString
    javassist.compiler.ast.ASTree getInitAST() -> getInitAST
    javassist.CtField$Initializer getInit() -> getInit
    javassist.CtField make(java.lang.String,javassist.CtClass) -> make
    javassist.bytecode.FieldInfo getFieldInfo() -> getFieldInfo
    javassist.bytecode.FieldInfo getFieldInfo2() -> getFieldInfo2
    javassist.CtClass getDeclaringClass() -> getDeclaringClass
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getModifiers() -> getModifiers
    void setModifiers(int) -> setModifiers
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    java.lang.Object[] getAnnotations(boolean) -> getAnnotations
    java.lang.String getSignature() -> getSignature
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    javassist.CtClass getType() -> getType
    void setType(javassist.CtClass) -> setType
    java.lang.Object getConstantValue() -> getConstantValue
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
javassist.CtField$ArrayInitializer -> javassist.CtField$ArrayInitializer:
    javassist.CtClass type -> type
    int size -> size
    void <init>(javassist.CtClass,int) -> <init>
    void addNewarray(javassist.bytecode.Bytecode) -> addNewarray
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
javassist.CtField$CodeInitializer -> javassist.CtField$CodeInitializer:
    java.lang.String expression -> expression
    void <init>(java.lang.String) -> <init>
    void compileExpr(javassist.compiler.Javac) -> compileExpr
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$CodeInitializer0 -> javassist.CtField$CodeInitializer0:
    void <init>() -> <init>
    void compileExpr(javassist.compiler.Javac) -> compileExpr
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue2(javassist.bytecode.ConstPool,javassist.CtClass,javassist.compiler.ast.ASTree) -> getConstantValue2
javassist.CtField$DoubleInitializer -> javassist.CtField$DoubleInitializer:
    double value -> value
    void <init>(double) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$FloatInitializer -> javassist.CtField$FloatInitializer:
    float value -> value
    void <init>(float) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$Initializer -> javassist.CtField$Initializer:
    void <init>() -> <init>
    javassist.CtField$Initializer constant(int) -> constant
    javassist.CtField$Initializer constant(boolean) -> constant
    javassist.CtField$Initializer constant(long) -> constant
    javassist.CtField$Initializer constant(float) -> constant
    javassist.CtField$Initializer constant(double) -> constant
    javassist.CtField$Initializer constant(java.lang.String) -> constant
    javassist.CtField$Initializer byParameter(int) -> byParameter
    javassist.CtField$Initializer byNew(javassist.CtClass) -> byNew
    javassist.CtField$Initializer byNew(javassist.CtClass,java.lang.String[]) -> byNew
    javassist.CtField$Initializer byNewWithParams(javassist.CtClass) -> byNewWithParams
    javassist.CtField$Initializer byNewWithParams(javassist.CtClass,java.lang.String[]) -> byNewWithParams
    javassist.CtField$Initializer byCall(javassist.CtClass,java.lang.String) -> byCall
    javassist.CtField$Initializer byCall(javassist.CtClass,java.lang.String,java.lang.String[]) -> byCall
    javassist.CtField$Initializer byCallWithParams(javassist.CtClass,java.lang.String) -> byCallWithParams
    javassist.CtField$Initializer byCallWithParams(javassist.CtClass,java.lang.String,java.lang.String[]) -> byCallWithParams
    javassist.CtField$Initializer byNewArray(javassist.CtClass,int) -> byNewArray
    javassist.CtField$Initializer byNewArray(javassist.CtClass,int[]) -> byNewArray
    javassist.CtField$Initializer byExpr(java.lang.String) -> byExpr
    javassist.CtField$Initializer byExpr(javassist.compiler.ast.ASTree) -> byExpr
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$IntInitializer -> javassist.CtField$IntInitializer:
    int value -> value
    void <init>(int) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$LongInitializer -> javassist.CtField$LongInitializer:
    long value -> value
    void <init>(long) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$MethodInitializer -> javassist.CtField$MethodInitializer:
    java.lang.String methodName -> methodName
    void <init>() -> <init>
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    java.lang.String getDescriptor() -> getDescriptor
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
javassist.CtField$MultiArrayInitializer -> javassist.CtField$MultiArrayInitializer:
    javassist.CtClass type -> type
    int[] dim -> dim
    void <init>(javassist.CtClass,int[]) -> <init>
    void check(java.lang.String) -> check
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
javassist.CtField$NewInitializer -> javassist.CtField$NewInitializer:
    javassist.CtClass objectType -> objectType
    java.lang.String[] stringParams -> stringParams
    boolean withConstructorParams -> withConstructorParams
    void <init>() -> <init>
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    java.lang.String getDescriptor() -> getDescriptor
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int compileStringParameter(javassist.bytecode.Bytecode) -> compileStringParameter
javassist.CtField$ParamInitializer -> javassist.CtField$ParamInitializer:
    int nthParam -> nthParam
    void <init>() -> <init>
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int nthParamToLocal(int,javassist.CtClass[],boolean) -> nthParamToLocal
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
javassist.CtField$PtreeInitializer -> javassist.CtField$PtreeInitializer:
    javassist.compiler.ast.ASTree expression -> expression
    void <init>(javassist.compiler.ast.ASTree) -> <init>
    void compileExpr(javassist.compiler.Javac) -> compileExpr
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtField$StringInitializer -> javassist.CtField$StringInitializer:
    java.lang.String value -> value
    void <init>(java.lang.String) -> <init>
    int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac) -> compile
    int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac) -> compileIfStatic
    int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass) -> getConstantValue
javassist.CtMember -> javassist.CtMember:
    javassist.CtMember next -> next
    javassist.CtClass declaringClass -> declaringClass
    void <init>(javassist.CtClass) -> <init>
    javassist.CtMember next() -> next
    void nameReplaced() -> nameReplaced
    java.lang.String toString() -> toString
    void extendToString(java.lang.StringBuffer) -> extendToString
    javassist.CtClass getDeclaringClass() -> getDeclaringClass
    boolean visibleFrom(javassist.CtClass) -> visibleFrom
    int getModifiers() -> getModifiers
    void setModifiers(int) -> setModifiers
    boolean hasAnnotation(java.lang.Class) -> hasAnnotation
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    byte[] getAttribute(java.lang.String) -> getAttribute
    void setAttribute(java.lang.String,byte[]) -> setAttribute
javassist.CtMember$Cache -> javassist.CtMember$Cache:
    javassist.CtMember methodTail -> methodTail
    javassist.CtMember consTail -> consTail
    javassist.CtMember fieldTail -> fieldTail
    void extendToString(java.lang.StringBuffer) -> extendToString
    boolean hasAnnotation(java.lang.String) -> hasAnnotation
    java.lang.Object getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object[] getAnnotations() -> getAnnotations
    byte[] getAttribute(java.lang.String) -> getAttribute
    java.lang.Object[] getAvailableAnnotations() -> getAvailableAnnotations
    int getModifiers() -> getModifiers
    java.lang.String getName() -> getName
    java.lang.String getSignature() -> getSignature
    void setAttribute(java.lang.String,byte[]) -> setAttribute
    void setModifiers(int) -> setModifiers
    java.lang.String getGenericSignature() -> getGenericSignature
    void setGenericSignature(java.lang.String) -> setGenericSignature
    void <init>(javassist.CtClassType) -> <init>
    javassist.CtMember methodHead() -> methodHead
    javassist.CtMember lastMethod() -> lastMethod
    javassist.CtMember consHead() -> consHead
    javassist.CtMember lastCons() -> lastCons
    javassist.CtMember fieldHead() -> fieldHead
    javassist.CtMember lastField() -> lastField
    void addMethod(javassist.CtMember) -> addMethod
    void addConstructor(javassist.CtMember) -> addConstructor
    void addField(javassist.CtMember) -> addField
    int count(javassist.CtMember,javassist.CtMember) -> count
    void remove(javassist.CtMember) -> remove
javassist.CtMethod -> javassist.CtMethod:
    java.lang.String cachedStringRep -> cachedStringRep
    void <init>(javassist.bytecode.MethodInfo,javassist.CtClass) -> <init>
    void <init>(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass) -> <init>
    void <init>(javassist.CtMethod,javassist.CtClass,javassist.ClassMap) -> <init>
    javassist.CtMethod make(java.lang.String,javassist.CtClass) -> make
    javassist.CtMethod make(javassist.bytecode.MethodInfo,javassist.CtClass) -> make
    int hashCode() -> hashCode
    void nameReplaced() -> nameReplaced
    java.lang.String getStringRep() -> getStringRep
    boolean equals(java.lang.Object) -> equals
    java.lang.String getLongName() -> getLongName
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    javassist.CtClass getReturnType() -> getReturnType
    boolean isEmpty() -> isEmpty
    void setBody(javassist.CtMethod,javassist.ClassMap) -> setBody
    void setWrappedBody(javassist.CtMethod,javassist.CtMethod$ConstParameter) -> setWrappedBody
javassist.CtMethod$ConstParameter -> javassist.CtMethod$ConstParameter:
    javassist.CtMethod$ConstParameter integer(int) -> integer
    javassist.CtMethod$ConstParameter integer(long) -> integer
    javassist.CtMethod$ConstParameter string(java.lang.String) -> string
    void <init>() -> <init>
    int compile(javassist.bytecode.Bytecode) -> compile
    java.lang.String descriptor() -> descriptor
    java.lang.String defaultDescriptor() -> defaultDescriptor
    java.lang.String constDescriptor() -> constDescriptor
    java.lang.String defaultConstDescriptor() -> defaultConstDescriptor
javassist.CtMethod$IntConstParameter -> javassist.CtMethod$IntConstParameter:
    int param -> param
    void <init>(int) -> <init>
    int compile(javassist.bytecode.Bytecode) -> compile
    java.lang.String descriptor() -> descriptor
    java.lang.String constDescriptor() -> constDescriptor
javassist.CtMethod$LongConstParameter -> javassist.CtMethod$LongConstParameter:
    long param -> param
    void <init>(long) -> <init>
    int compile(javassist.bytecode.Bytecode) -> compile
    java.lang.String descriptor() -> descriptor
    java.lang.String constDescriptor() -> constDescriptor
javassist.CtMethod$StringConstParameter -> javassist.CtMethod$StringConstParameter:
    java.lang.String param -> param
    void <init>(java.lang.String) -> <init>
    int compile(javassist.bytecode.Bytecode) -> compile
    java.lang.String descriptor() -> descriptor
    java.lang.String constDescriptor() -> constDescriptor
javassist.CtNewClass -> javassist.CtNewClass:
    boolean hasConstructor -> hasConstructor
    void <init>(java.lang.String,javassist.ClassPool,boolean,javassist.CtClass) -> <init>
    void extendToString(java.lang.StringBuffer) -> extendToString
    void addConstructor(javassist.CtConstructor) -> addConstructor
    void toBytecode(java.io.DataOutputStream) -> toBytecode
    void inheritAllConstructors() -> inheritAllConstructors
    boolean isInheritable(int,javassist.CtClass) -> isInheritable
javassist.CtNewConstructor -> javassist.CtNewConstructor:
    int PASS_NONE -> PASS_NONE
    int PASS_ARRAY -> PASS_ARRAY
    int PASS_PARAMS -> PASS_PARAMS
    void <init>() -> <init>
    javassist.CtConstructor make(java.lang.String,javassist.CtClass) -> make
    javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass) -> make
    javassist.CtConstructor copy(javassist.CtConstructor,javassist.CtClass,javassist.ClassMap) -> copy
    javassist.CtConstructor defaultConstructor(javassist.CtClass) -> defaultConstructor
    javassist.CtConstructor skeleton(javassist.CtClass[],javassist.CtClass[],javassist.CtClass) -> skeleton
    javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],javassist.CtClass) -> make
    javassist.CtConstructor make(javassist.CtClass[],javassist.CtClass[],int,javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass) -> make
javassist.CtNewMethod -> javassist.CtNewMethod:
    void <init>() -> <init>
    javassist.CtMethod make(java.lang.String,javassist.CtClass) -> make
    javassist.CtMethod make(java.lang.String,javassist.CtClass,java.lang.String,java.lang.String) -> make
    javassist.CtMethod make(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass) -> make
    javassist.CtMethod make(int,javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass) -> make
    javassist.CtMethod copy(javassist.CtMethod,javassist.CtClass,javassist.ClassMap) -> copy
    javassist.CtMethod copy(javassist.CtMethod,java.lang.String,javassist.CtClass,javassist.ClassMap) -> copy
    javassist.CtMethod abstractMethod(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],javassist.CtClass) -> abstractMethod
    javassist.CtMethod getter(java.lang.String,javassist.CtField) -> getter
    javassist.CtMethod setter(java.lang.String,javassist.CtField) -> setter
    javassist.CtMethod delegator(javassist.CtMethod,javassist.CtClass) -> delegator
    javassist.CtMethod delegator0(javassist.CtMethod,javassist.CtClass) -> delegator0
    javassist.CtMethod wrapped(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass) -> wrapped
javassist.CtNewWrappedConstructor -> javassist.CtNewWrappedConstructor:
    int PASS_NONE -> PASS_NONE
    int PASS_PARAMS -> PASS_PARAMS
    void <init>() -> <init>
    javassist.CtConstructor wrapped(javassist.CtClass[],javassist.CtClass[],int,javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass) -> wrapped
    javassist.bytecode.Bytecode makeBody(javassist.CtClass,javassist.bytecode.ClassFile,int,javassist.CtMethod,javassist.CtClass[],javassist.CtMethod$ConstParameter) -> makeBody
javassist.CtNewWrappedMethod -> javassist.CtNewWrappedMethod:
    java.lang.String addedWrappedMethod -> addedWrappedMethod
    void <init>() -> <init>
    javassist.CtMethod wrapped(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass) -> wrapped
    javassist.bytecode.Bytecode makeBody(javassist.CtClass,javassist.bytecode.ClassFile,javassist.CtMethod,javassist.CtClass[],javassist.CtClass,javassist.CtMethod$ConstParameter) -> makeBody
    int makeBody0(javassist.CtClass,javassist.bytecode.ClassFile,javassist.CtMethod,boolean,javassist.CtClass[],javassist.CtClass,javassist.CtMethod$ConstParameter,javassist.bytecode.Bytecode) -> makeBody0
    void checkSignature(javassist.CtMethod,java.lang.String) -> checkSignature
    java.lang.String addBodyMethod(javassist.CtClassType,javassist.bytecode.ClassFile,javassist.CtMethod) -> addBodyMethod
    int compileParameterList(javassist.bytecode.Bytecode,javassist.CtClass[],int) -> compileParameterList
    void compileReturn(javassist.bytecode.Bytecode,javassist.CtClass) -> compileReturn
javassist.CtPrimitiveType -> javassist.CtPrimitiveType:
    char descriptor -> descriptor
    java.lang.String wrapperName -> wrapperName
    java.lang.String getMethodName -> getMethodName
    java.lang.String mDescriptor -> mDescriptor
    int returnOp -> returnOp
    int arrayType -> arrayType
    int dataSize -> dataSize
    void <init>(java.lang.String,char,java.lang.String,java.lang.String,java.lang.String,int,int,int) -> <init>
    boolean isPrimitive() -> isPrimitive
    int getModifiers() -> getModifiers
    char getDescriptor() -> getDescriptor
    java.lang.String getWrapperName() -> getWrapperName
    java.lang.String getGetMethodName() -> getGetMethodName
    java.lang.String getGetMethodDescriptor() -> getGetMethodDescriptor
    int getReturnOp() -> getReturnOp
    int getArrayType() -> getArrayType
    int getDataSize() -> getDataSize
javassist.DirClassPath -> javassist.DirClassPath:
    java.lang.String directory -> directory
    void <init>(java.lang.String) -> <init>
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
    java.lang.String toString() -> toString
javassist.FieldInitLink -> javassist.FieldInitLink:
    javassist.FieldInitLink next -> next
    javassist.CtField field -> field
    javassist.CtField$Initializer init -> init
    void <init>(javassist.CtField,javassist.CtField$Initializer) -> <init>
javassist.JarClassPath -> javassist.JarClassPath:
    java.util.List jarfileEntries -> jarfileEntries
    java.lang.String jarfileURL -> jarfileURL
    void <init>(java.lang.String) -> <init>
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
    java.lang.String toString() -> toString
javassist.JarDirClassPath -> javassist.JarDirClassPath:
    javassist.JarClassPath[] jars -> jars
    void <init>(java.lang.String) -> <init>
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
javassist.JarDirClassPath$1 -> javassist.JarDirClassPath$1:
    javassist.JarDirClassPath this$0 -> this$0
    void <init>(javassist.JarDirClassPath) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
javassist.Loader -> javassist.Loader:
    java.util.HashMap notDefinedHere -> notDefinedHere
    java.util.Vector notDefinedPackages -> notDefinedPackages
    javassist.ClassPool source -> source
    javassist.Translator translator -> translator
    java.security.ProtectionDomain domain -> domain
    boolean doDelegation -> doDelegation
    void <init>() -> <init>
    void <init>(javassist.ClassPool) -> <init>
    void <init>(java.lang.ClassLoader,javassist.ClassPool) -> <init>
    void init(javassist.ClassPool) -> init
    void delegateLoadingOf(java.lang.String) -> delegateLoadingOf
    void setDomain(java.security.ProtectionDomain) -> setDomain
    void setClassPool(javassist.ClassPool) -> setClassPool
    void addTranslator(javassist.ClassPool,javassist.Translator) -> addTranslator
    void main(java.lang.String[]) -> main
    void run(java.lang.String[]) -> run
    void run(java.lang.String,java.lang.String[]) -> run
    java.lang.Class loadClass(java.lang.String,boolean) -> loadClass
    java.lang.Class findClass(java.lang.String) -> findClass
    boolean isDefinedPackage(java.lang.String) -> isDefinedPackage
    java.lang.Class loadClassByDelegation(java.lang.String) -> loadClassByDelegation
    boolean notDelegated(java.lang.String) -> notDelegated
    java.lang.Class delegateToParent(java.lang.String) -> delegateToParent
javassist.Loader$Simple -> javassist.Loader$Simple:
    void <init>() -> <init>
    void <init>(java.lang.ClassLoader) -> <init>
    java.lang.Class invokeDefineClass(javassist.CtClass) -> invokeDefineClass
javassist.LoaderClassPath -> javassist.LoaderClassPath:
    java.lang.ref.Reference clref -> clref
    void <init>(java.lang.ClassLoader) -> <init>
    java.lang.String toString() -> toString
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URL find(java.lang.String) -> find
javassist.Modifier -> javassist.Modifier:
    int PUBLIC -> PUBLIC
    int PRIVATE -> PRIVATE
    int PROTECTED -> PROTECTED
    int STATIC -> STATIC
    int FINAL -> FINAL
    int SYNCHRONIZED -> SYNCHRONIZED
    int VOLATILE -> VOLATILE
    int VARARGS -> VARARGS
    int TRANSIENT -> TRANSIENT
    int NATIVE -> NATIVE
    int INTERFACE -> INTERFACE
    int ABSTRACT -> ABSTRACT
    int STRICT -> STRICT
    int ANNOTATION -> ANNOTATION
    int ENUM -> ENUM
    void <init>() -> <init>
    boolean isPublic(int) -> isPublic
    boolean isPrivate(int) -> isPrivate
    boolean isProtected(int) -> isProtected
    boolean isPackage(int) -> isPackage
    boolean isStatic(int) -> isStatic
    boolean isFinal(int) -> isFinal
    boolean isSynchronized(int) -> isSynchronized
    boolean isVolatile(int) -> isVolatile
    boolean isTransient(int) -> isTransient
    boolean isNative(int) -> isNative
    boolean isInterface(int) -> isInterface
    boolean isAnnotation(int) -> isAnnotation
    boolean isEnum(int) -> isEnum
    boolean isAbstract(int) -> isAbstract
    boolean isStrict(int) -> isStrict
    boolean isVarArgs(int) -> isVarArgs
    int setPublic(int) -> setPublic
    int setProtected(int) -> setProtected
    int setPrivate(int) -> setPrivate
    int setPackage(int) -> setPackage
    int clear(int,int) -> clear
    java.lang.String toString(int) -> toString
javassist.NotFoundException -> javassist.NotFoundException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Exception) -> <init>
javassist.SerialVersionUID -> javassist.SerialVersionUID:
    void <init>() -> <init>
    void setSerialVersionUID(javassist.CtClass) -> setSerialVersionUID
    boolean isSerializable(javassist.CtClass) -> isSerializable
    long calculateDefault(javassist.CtClass) -> calculateDefault
    java.lang.String javaName(javassist.CtClass) -> javaName
    java.lang.String javaName(java.lang.String) -> javaName
javassist.SerialVersionUID$1 -> javassist.SerialVersionUID$1:
    void <init>() -> <init>
    int compare(javassist.CtField,javassist.CtField) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
javassist.SerialVersionUID$2 -> javassist.SerialVersionUID$2:
    void <init>() -> <init>
    int compare(javassist.CtConstructor,javassist.CtConstructor) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
javassist.SerialVersionUID$3 -> javassist.SerialVersionUID$3:
    void <init>() -> <init>
    int compare(javassist.CtMethod,javassist.CtMethod) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
javassist.Translator -> javassist.Translator:
    void start(javassist.ClassPool) -> start
    void onLoad(javassist.ClassPool,java.lang.String) -> onLoad
javassist.URLClassPath -> javassist.URLClassPath:
    java.lang.String hostname -> hostname
    int port -> port
    java.lang.String directory -> directory
    java.lang.String packageName -> packageName
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    java.io.InputStream openClassfile(java.lang.String) -> openClassfile
    java.net.URLConnection openClassfile0(java.lang.String) -> openClassfile0
    java.net.URL find(java.lang.String) -> find
    byte[] fetchClass(java.lang.String,int,java.lang.String,java.lang.String) -> fetchClass
    java.net.URLConnection fetchClass0(java.lang.String,int,java.lang.String) -> fetchClass0
javassist.bytecode.AccessFlag -> javassist.bytecode.AccessFlag:
    int PUBLIC -> PUBLIC
    int PRIVATE -> PRIVATE
    int PROTECTED -> PROTECTED
    int STATIC -> STATIC
    int FINAL -> FINAL
    int SYNCHRONIZED -> SYNCHRONIZED
    int VOLATILE -> VOLATILE
    int BRIDGE -> BRIDGE
    int TRANSIENT -> TRANSIENT
    int VARARGS -> VARARGS
    int NATIVE -> NATIVE
    int INTERFACE -> INTERFACE
    int ABSTRACT -> ABSTRACT
    int STRICT -> STRICT
    int SYNTHETIC -> SYNTHETIC
    int ANNOTATION -> ANNOTATION
    int ENUM -> ENUM
    int MANDATED -> MANDATED
    int SUPER -> SUPER
    int MODULE -> MODULE
    void <init>() -> <init>
    int setPublic(int) -> setPublic
    int setProtected(int) -> setProtected
    int setPrivate(int) -> setPrivate
    int setPackage(int) -> setPackage
    boolean isPublic(int) -> isPublic
    boolean isProtected(int) -> isProtected
    boolean isPrivate(int) -> isPrivate
    boolean isPackage(int) -> isPackage
    int clear(int,int) -> clear
    int of(int) -> of
    int toModifier(int) -> toModifier
javassist.bytecode.AnnotationDefaultAttribute -> javassist.bytecode.AnnotationDefaultAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    javassist.bytecode.annotation.MemberValue getDefaultValue() -> getDefaultValue
    void setDefaultValue(javassist.bytecode.annotation.MemberValue) -> setDefaultValue
    java.lang.String toString() -> toString
javassist.bytecode.AnnotationsAttribute -> javassist.bytecode.AnnotationsAttribute:
    java.lang.String visibleTag -> visibleTag
    java.lang.String invisibleTag -> invisibleTag
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    int numAnnotations() -> numAnnotations
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    javassist.bytecode.annotation.Annotation getAnnotation(java.lang.String) -> getAnnotation
    void addAnnotation(javassist.bytecode.annotation.Annotation) -> addAnnotation
    boolean removeAnnotation(java.lang.String) -> removeAnnotation
    javassist.bytecode.annotation.Annotation[] getAnnotations() -> getAnnotations
    void setAnnotations(javassist.bytecode.annotation.Annotation[]) -> setAnnotations
    void setAnnotation(javassist.bytecode.annotation.Annotation) -> setAnnotation
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    java.lang.String toString() -> toString
javassist.bytecode.AnnotationsAttribute$Copier -> javassist.bytecode.AnnotationsAttribute$Copier:
    java.io.ByteArrayOutputStream output -> output
    javassist.bytecode.annotation.AnnotationsWriter writer -> writer
    javassist.bytecode.ConstPool srcPool -> srcPool
    javassist.bytecode.ConstPool destPool -> destPool
    java.util.Map classnames -> classnames
    void <init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> <init>
    void <init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map,boolean) -> <init>
    byte[] close() -> close
    void parameters(int,int) -> parameters
    int annotationArray(int,int) -> annotationArray
    int annotation(int,int,int) -> annotation
    int memberValuePair(int,int) -> memberValuePair
    void constValueMember(int,int) -> constValueMember
    void enumMemberValue(int,int,int) -> enumMemberValue
    void classMemberValue(int,int) -> classMemberValue
    int annotationMemberValue(int) -> annotationMemberValue
    int arrayMemberValue(int,int) -> arrayMemberValue
    int copy(int) -> copy
    int copyType(int) -> copyType
javassist.bytecode.AnnotationsAttribute$Parser -> javassist.bytecode.AnnotationsAttribute$Parser:
    javassist.bytecode.ConstPool pool -> pool
    javassist.bytecode.annotation.Annotation[][] allParams -> allParams
    javassist.bytecode.annotation.Annotation[] allAnno -> allAnno
    javassist.bytecode.annotation.Annotation currentAnno -> currentAnno
    javassist.bytecode.annotation.MemberValue currentMember -> currentMember
    void <init>(byte[],javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.annotation.Annotation[][] parseParameters() -> parseParameters
    javassist.bytecode.annotation.Annotation[] parseAnnotations() -> parseAnnotations
    javassist.bytecode.annotation.MemberValue parseMemberValue() -> parseMemberValue
    void parameters(int,int) -> parameters
    int annotationArray(int,int) -> annotationArray
    int annotation(int,int,int) -> annotation
    int memberValuePair(int,int) -> memberValuePair
    void constValueMember(int,int) -> constValueMember
    void enumMemberValue(int,int,int) -> enumMemberValue
    void classMemberValue(int,int) -> classMemberValue
    int annotationMemberValue(int) -> annotationMemberValue
    int arrayMemberValue(int,int) -> arrayMemberValue
javassist.bytecode.AnnotationsAttribute$Renamer -> javassist.bytecode.AnnotationsAttribute$Renamer:
    javassist.bytecode.ConstPool cpool -> cpool
    java.util.Map classnames -> classnames
    void <init>(byte[],javassist.bytecode.ConstPool,java.util.Map) -> <init>
    int annotation(int,int,int) -> annotation
    void enumMemberValue(int,int,int) -> enumMemberValue
    void classMemberValue(int,int) -> classMemberValue
    void renameType(int,int) -> renameType
javassist.bytecode.AnnotationsAttribute$Walker -> javassist.bytecode.AnnotationsAttribute$Walker:
    byte[] info -> info
    void <init>(byte[]) -> <init>
    void parameters() -> parameters
    void parameters(int,int) -> parameters
    void annotationArray() -> annotationArray
    int annotationArray(int) -> annotationArray
    int annotationArray(int,int) -> annotationArray
    int annotation(int) -> annotation
    int annotation(int,int,int) -> annotation
    int memberValuePair(int) -> memberValuePair
    int memberValuePair(int,int) -> memberValuePair
    int memberValue(int) -> memberValue
    void constValueMember(int,int) -> constValueMember
    void enumMemberValue(int,int,int) -> enumMemberValue
    void classMemberValue(int,int) -> classMemberValue
    int annotationMemberValue(int) -> annotationMemberValue
    int arrayMemberValue(int,int) -> arrayMemberValue
javassist.bytecode.AttributeInfo -> javassist.bytecode.AttributeInfo:
    javassist.bytecode.ConstPool constPool -> constPool
    int name -> name
    byte[] info -> info
    void <init>(javassist.bytecode.ConstPool,int,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    javassist.bytecode.AttributeInfo read(javassist.bytecode.ConstPool,java.io.DataInputStream) -> read
    java.lang.String getName() -> getName
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    int length() -> length
    byte[] get() -> get
    void set(byte[]) -> set
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    int getLength(java.util.List) -> getLength
    javassist.bytecode.AttributeInfo lookup(java.util.List,java.lang.String) -> lookup
    javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String) -> remove
    void writeAll(java.util.List,java.io.DataOutputStream) -> writeAll
    java.util.List copyAll(java.util.List,javassist.bytecode.ConstPool) -> copyAll
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void renameClass(java.util.List,java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.List,java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    void getRefClasses(java.util.List,java.util.Map) -> getRefClasses
javassist.bytecode.BadBytecode -> javassist.bytecode.BadBytecode:
    long serialVersionUID -> serialVersionUID
    void <init>(int) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(javassist.bytecode.MethodInfo,java.lang.Throwable) -> <init>
javassist.bytecode.BootstrapMethodsAttribute -> javassist.bytecode.BootstrapMethodsAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,javassist.bytecode.BootstrapMethodsAttribute$BootstrapMethod[]) -> <init>
    javassist.bytecode.BootstrapMethodsAttribute$BootstrapMethod[] getMethods() -> getMethods
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.BootstrapMethodsAttribute$BootstrapMethod -> javassist.bytecode.BootstrapMethodsAttribute$BootstrapMethod:
    int methodRef -> methodRef
    int[] arguments -> arguments
    void <init>(int,int[]) -> <init>
javassist.bytecode.ByteArray -> javassist.bytecode.ByteArray:
    void <init>() -> <init>
    int readU16bit(byte[],int) -> readU16bit
    int readS16bit(byte[],int) -> readS16bit
    void write16bit(int,byte[],int) -> write16bit
    int read32bit(byte[],int) -> read32bit
    void write32bit(int,byte[],int) -> write32bit
    void copy32bit(byte[],int,byte[],int) -> copy32bit
javassist.bytecode.ByteStream -> javassist.bytecode.ByteStream:
    byte[] buf -> buf
    int count -> count
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getPos() -> getPos
    int size() -> size
    void writeBlank(int) -> writeBlank
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void write(int) -> write
    void writeShort(int) -> writeShort
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeUTF(java.lang.String) -> writeUTF
    void writeUTF2(java.lang.String,int,int) -> writeUTF2
    void write(int,int) -> write
    void writeShort(int,int) -> writeShort
    void writeInt(int,int) -> writeInt
    byte[] toByteArray() -> toByteArray
    void writeTo(java.io.OutputStream) -> writeTo
    void enlarge(int) -> enlarge
javassist.bytecode.ByteVector -> javassist.bytecode.ByteVector:
    byte[] buffer -> buffer
    int size -> size
    void <init>() -> <init>
    java.lang.Object clone() -> clone
    int getSize() -> getSize
    byte[] copy() -> copy
    int read(int) -> read
    void write(int,int) -> write
    void add(int) -> add
    void add(int,int) -> add
    void add(int,int,int,int) -> add
    void addGap(int) -> addGap
javassist.bytecode.Bytecode -> javassist.bytecode.Bytecode:
    javassist.CtClass THIS -> THIS
    javassist.bytecode.ConstPool constPool -> constPool
    int maxStack -> maxStack
    int maxLocals -> maxLocals
    javassist.bytecode.ExceptionTable tryblocks -> tryblocks
    int stackDepth -> stackDepth
    void <init>(javassist.bytecode.ConstPool,int,int) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object clone() -> clone
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    javassist.bytecode.ExceptionTable getExceptionTable() -> getExceptionTable
    javassist.bytecode.CodeAttribute toCodeAttribute() -> toCodeAttribute
    int length() -> length
    byte[] get() -> get
    int getMaxStack() -> getMaxStack
    void setMaxStack(int) -> setMaxStack
    int getMaxLocals() -> getMaxLocals
    void setMaxLocals(int) -> setMaxLocals
    void setMaxLocals(boolean,javassist.CtClass[],int) -> setMaxLocals
    void incMaxLocals(int) -> incMaxLocals
    void addExceptionHandler(int,int,int,javassist.CtClass) -> addExceptionHandler
    void addExceptionHandler(int,int,int,java.lang.String) -> addExceptionHandler
    void addExceptionHandler(int,int,int,int) -> addExceptionHandler
    int currentPc() -> currentPc
    int read(int) -> read
    int read16bit(int) -> read16bit
    int read32bit(int) -> read32bit
    void write(int,int) -> write
    void write16bit(int,int) -> write16bit
    void write32bit(int,int) -> write32bit
    void add(int) -> add
    void add32bit(int) -> add32bit
    void addGap(int) -> addGap
    void addOpcode(int) -> addOpcode
    void growStack(int) -> growStack
    int getStackDepth() -> getStackDepth
    void setStackDepth(int) -> setStackDepth
    void addIndex(int) -> addIndex
    void addAload(int) -> addAload
    void addAstore(int) -> addAstore
    void addIconst(int) -> addIconst
    void addConstZero(javassist.CtClass) -> addConstZero
    void addIload(int) -> addIload
    void addIstore(int) -> addIstore
    void addLconst(long) -> addLconst
    void addLload(int) -> addLload
    void addLstore(int) -> addLstore
    void addDconst(double) -> addDconst
    void addDload(int) -> addDload
    void addDstore(int) -> addDstore
    void addFconst(float) -> addFconst
    void addFload(int) -> addFload
    void addFstore(int) -> addFstore
    int addLoad(int,javassist.CtClass) -> addLoad
    int addStore(int,javassist.CtClass) -> addStore
    int addLoadParameters(javassist.CtClass[],int) -> addLoadParameters
    void addCheckcast(javassist.CtClass) -> addCheckcast
    void addCheckcast(java.lang.String) -> addCheckcast
    void addInstanceof(java.lang.String) -> addInstanceof
    void addGetfield(javassist.CtClass,java.lang.String,java.lang.String) -> addGetfield
    void addGetfield(java.lang.String,java.lang.String,java.lang.String) -> addGetfield
    void addGetstatic(javassist.CtClass,java.lang.String,java.lang.String) -> addGetstatic
    void addGetstatic(java.lang.String,java.lang.String,java.lang.String) -> addGetstatic
    void addInvokespecial(javassist.CtClass,java.lang.String,javassist.CtClass,javassist.CtClass[]) -> addInvokespecial
    void addInvokespecial(javassist.CtClass,java.lang.String,java.lang.String) -> addInvokespecial
    void addInvokespecial(java.lang.String,java.lang.String,java.lang.String) -> addInvokespecial
    void addInvokespecial(int,java.lang.String,java.lang.String) -> addInvokespecial
    void addInvokespecial(boolean,int,java.lang.String,java.lang.String) -> addInvokespecial
    void addInvokespecial(int,java.lang.String) -> addInvokespecial
    void addInvokestatic(javassist.CtClass,java.lang.String,javassist.CtClass,javassist.CtClass[]) -> addInvokestatic
    void addInvokestatic(javassist.CtClass,java.lang.String,java.lang.String) -> addInvokestatic
    void addInvokestatic(java.lang.String,java.lang.String,java.lang.String) -> addInvokestatic
    void addInvokestatic(int,java.lang.String,java.lang.String) -> addInvokestatic
    void addInvokestatic(int,java.lang.String,java.lang.String,boolean) -> addInvokestatic
    void addInvokevirtual(javassist.CtClass,java.lang.String,javassist.CtClass,javassist.CtClass[]) -> addInvokevirtual
    void addInvokevirtual(javassist.CtClass,java.lang.String,java.lang.String) -> addInvokevirtual
    void addInvokevirtual(java.lang.String,java.lang.String,java.lang.String) -> addInvokevirtual
    void addInvokevirtual(int,java.lang.String,java.lang.String) -> addInvokevirtual
    void addInvokeinterface(javassist.CtClass,java.lang.String,javassist.CtClass,javassist.CtClass[],int) -> addInvokeinterface
    void addInvokeinterface(javassist.CtClass,java.lang.String,java.lang.String,int) -> addInvokeinterface
    void addInvokeinterface(java.lang.String,java.lang.String,java.lang.String,int) -> addInvokeinterface
    void addInvokeinterface(int,java.lang.String,java.lang.String,int) -> addInvokeinterface
    void addInvokedynamic(int,java.lang.String,java.lang.String) -> addInvokedynamic
    void addLdc(java.lang.String) -> addLdc
    void addLdc(int) -> addLdc
    void addLdc2w(long) -> addLdc2w
    void addLdc2w(double) -> addLdc2w
    void addNew(javassist.CtClass) -> addNew
    void addNew(java.lang.String) -> addNew
    void addAnewarray(java.lang.String) -> addAnewarray
    void addAnewarray(javassist.CtClass,int) -> addAnewarray
    void addNewarray(int,int) -> addNewarray
    int addMultiNewarray(javassist.CtClass,int[]) -> addMultiNewarray
    int addMultiNewarray(javassist.CtClass,int) -> addMultiNewarray
    int addMultiNewarray(java.lang.String,int) -> addMultiNewarray
    void addPutfield(javassist.CtClass,java.lang.String,java.lang.String) -> addPutfield
    void addPutfield(java.lang.String,java.lang.String,java.lang.String) -> addPutfield
    void addPutfield0(javassist.CtClass,java.lang.String,java.lang.String,java.lang.String) -> addPutfield0
    void addPutstatic(javassist.CtClass,java.lang.String,java.lang.String) -> addPutstatic
    void addPutstatic(java.lang.String,java.lang.String,java.lang.String) -> addPutstatic
    void addPutstatic0(javassist.CtClass,java.lang.String,java.lang.String,java.lang.String) -> addPutstatic0
    void addReturn(javassist.CtClass) -> addReturn
    void addRet(int) -> addRet
    void addPrintln(java.lang.String) -> addPrintln
    void add(int,int,int,int) -> add
    void add(int,int) -> add
    void <clinit>() -> <clinit>
javassist.bytecode.ClassFile -> javassist.bytecode.ClassFile:
    int major -> major
    int minor -> minor
    javassist.bytecode.ConstPool constPool -> constPool
    int thisClass -> thisClass
    int accessFlags -> accessFlags
    int superClass -> superClass
    int[] interfaces -> interfaces
    java.util.List fields -> fields
    java.util.List methods -> methods
    java.util.List attributes -> attributes
    java.lang.String thisclassname -> thisclassname
    java.lang.String[] cachedInterfaces -> cachedInterfaces
    java.lang.String cachedSuperclass -> cachedSuperclass
    int JAVA_1 -> JAVA_1
    int JAVA_2 -> JAVA_2
    int JAVA_3 -> JAVA_3
    int JAVA_4 -> JAVA_4
    int JAVA_5 -> JAVA_5
    int JAVA_6 -> JAVA_6
    int JAVA_7 -> JAVA_7
    int JAVA_8 -> JAVA_8
    int JAVA_9 -> JAVA_9
    int JAVA_10 -> JAVA_10
    int JAVA_11 -> JAVA_11
    int MAJOR_VERSION -> MAJOR_VERSION
    void <init>(java.io.DataInputStream) -> <init>
    void <init>(boolean,java.lang.String,java.lang.String) -> <init>
    void initSuperclass(java.lang.String) -> initSuperclass
    java.lang.String getSourcefileName(java.lang.String) -> getSourcefileName
    void compact() -> compact
    javassist.bytecode.ConstPool compact0() -> compact0
    void prune() -> prune
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    boolean isInterface() -> isInterface
    boolean isFinal() -> isFinal
    boolean isAbstract() -> isAbstract
    int getAccessFlags() -> getAccessFlags
    void setAccessFlags(int) -> setAccessFlags
    int getInnerAccessFlags() -> getInnerAccessFlags
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getSuperclass() -> getSuperclass
    int getSuperclassId() -> getSuperclassId
    void setSuperclass(java.lang.String) -> setSuperclass
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    java.lang.String[] getInterfaces() -> getInterfaces
    void setInterfaces(java.lang.String[]) -> setInterfaces
    void addInterface(java.lang.String) -> addInterface
    java.util.List getFields() -> getFields
    void addField(javassist.bytecode.FieldInfo) -> addField
    void addField2(javassist.bytecode.FieldInfo) -> addField2
    void testExistingField(java.lang.String,java.lang.String) -> testExistingField
    java.util.List getMethods() -> getMethods
    javassist.bytecode.MethodInfo getMethod(java.lang.String) -> getMethod
    javassist.bytecode.MethodInfo getStaticInitializer() -> getStaticInitializer
    void addMethod(javassist.bytecode.MethodInfo) -> addMethod
    void addMethod2(javassist.bytecode.MethodInfo) -> addMethod2
    void testExistingMethod(javassist.bytecode.MethodInfo) -> testExistingMethod
    boolean isDuplicated(javassist.bytecode.MethodInfo,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo,java.util.ListIterator) -> isDuplicated
    boolean notBridgeMethod(javassist.bytecode.MethodInfo) -> notBridgeMethod
    java.util.List getAttributes() -> getAttributes
    javassist.bytecode.AttributeInfo getAttribute(java.lang.String) -> getAttribute
    javassist.bytecode.AttributeInfo removeAttribute(java.lang.String) -> removeAttribute
    void addAttribute(javassist.bytecode.AttributeInfo) -> addAttribute
    java.lang.String getSourceFile() -> getSourceFile
    void read(java.io.DataInputStream) -> read
    void write(java.io.DataOutputStream) -> write
    int getMajorVersion() -> getMajorVersion
    void setMajorVersion(int) -> setMajorVersion
    int getMinorVersion() -> getMinorVersion
    void setMinorVersion(int) -> setMinorVersion
    void setVersionToJava5() -> setVersionToJava5
    void <clinit>() -> <clinit>
javassist.bytecode.ClassFilePrinter -> javassist.bytecode.ClassFilePrinter:
    void <init>() -> <init>
    void print(javassist.bytecode.ClassFile) -> print
    void print(javassist.bytecode.ClassFile,java.io.PrintWriter) -> print
    void printAttributes(java.util.List,java.io.PrintWriter,char) -> printAttributes
javassist.bytecode.ClassFileWriter -> javassist.bytecode.ClassFileWriter:
    javassist.bytecode.ByteStream output -> output
    javassist.bytecode.ClassFileWriter$ConstPoolWriter constPool -> constPool
    javassist.bytecode.ClassFileWriter$FieldWriter fields -> fields
    javassist.bytecode.ClassFileWriter$MethodWriter methods -> methods
    int thisClass -> thisClass
    int superClass -> superClass
    void <init>(int,int) -> <init>
    javassist.bytecode.ClassFileWriter$ConstPoolWriter getConstPool() -> getConstPool
    javassist.bytecode.ClassFileWriter$FieldWriter getFieldWriter() -> getFieldWriter
    javassist.bytecode.ClassFileWriter$MethodWriter getMethodWriter() -> getMethodWriter
    byte[] end(int,int,int,int[],javassist.bytecode.ClassFileWriter$AttributeWriter) -> end
    void end(java.io.DataOutputStream,int,int,int,int[],javassist.bytecode.ClassFileWriter$AttributeWriter) -> end
    void writeAttribute(javassist.bytecode.ByteStream,javassist.bytecode.ClassFileWriter$AttributeWriter,int) -> writeAttribute
javassist.bytecode.ClassFileWriter$AttributeWriter -> javassist.bytecode.ClassFileWriter$AttributeWriter:
    int size() -> size
    void write(java.io.DataOutputStream) -> write
javassist.bytecode.ClassFileWriter$ConstPoolWriter -> javassist.bytecode.ClassFileWriter$ConstPoolWriter:
    javassist.bytecode.ByteStream output -> output
    int startPos -> startPos
    int num -> num
    void <init>(javassist.bytecode.ByteStream) -> <init>
    int[] addClassInfo(java.lang.String[]) -> addClassInfo
    int addClassInfo(java.lang.String) -> addClassInfo
    int addClassInfo(int) -> addClassInfo
    int addNameAndTypeInfo(java.lang.String,java.lang.String) -> addNameAndTypeInfo
    int addNameAndTypeInfo(int,int) -> addNameAndTypeInfo
    int addFieldrefInfo(int,int) -> addFieldrefInfo
    int addMethodrefInfo(int,int) -> addMethodrefInfo
    int addInterfaceMethodrefInfo(int,int) -> addInterfaceMethodrefInfo
    int addMethodHandleInfo(int,int) -> addMethodHandleInfo
    int addMethodTypeInfo(int) -> addMethodTypeInfo
    int addInvokeDynamicInfo(int,int) -> addInvokeDynamicInfo
    int addDynamicInfo(int,int) -> addDynamicInfo
    int addStringInfo(java.lang.String) -> addStringInfo
    int addIntegerInfo(int) -> addIntegerInfo
    int addFloatInfo(float) -> addFloatInfo
    int addLongInfo(long) -> addLongInfo
    int addDoubleInfo(double) -> addDoubleInfo
    int addUtf8Info(java.lang.String) -> addUtf8Info
    void end() -> end
javassist.bytecode.ClassFileWriter$FieldWriter -> javassist.bytecode.ClassFileWriter$FieldWriter:
    javassist.bytecode.ByteStream output -> output
    javassist.bytecode.ClassFileWriter$ConstPoolWriter constPool -> constPool
    int fieldCount -> fieldCount
    void <init>(javassist.bytecode.ClassFileWriter$ConstPoolWriter) -> <init>
    void add(int,java.lang.String,java.lang.String,javassist.bytecode.ClassFileWriter$AttributeWriter) -> add
    void add(int,int,int,javassist.bytecode.ClassFileWriter$AttributeWriter) -> add
    int size() -> size
    int dataSize() -> dataSize
    void write(java.io.OutputStream) -> write
javassist.bytecode.ClassFileWriter$MethodWriter -> javassist.bytecode.ClassFileWriter$MethodWriter:
    javassist.bytecode.ByteStream output -> output
    javassist.bytecode.ClassFileWriter$ConstPoolWriter constPool -> constPool
    int methodCount -> methodCount
    int codeIndex -> codeIndex
    int throwsIndex -> throwsIndex
    int stackIndex -> stackIndex
    int startPos -> startPos
    boolean isAbstract -> isAbstract
    int catchPos -> catchPos
    int catchCount -> catchCount
    void <init>(javassist.bytecode.ClassFileWriter$ConstPoolWriter) -> <init>
    void begin(int,java.lang.String,java.lang.String,java.lang.String[],javassist.bytecode.ClassFileWriter$AttributeWriter) -> begin
    void begin(int,int,int,int[],javassist.bytecode.ClassFileWriter$AttributeWriter) -> begin
    void writeThrows(int[]) -> writeThrows
    void add(int) -> add
    void add16(int) -> add16
    void add32(int) -> add32
    void addInvoke(int,java.lang.String,java.lang.String,java.lang.String) -> addInvoke
    void codeEnd(int,int) -> codeEnd
    void addCatch(int,int,int,int) -> addCatch
    void end(javassist.bytecode.StackMapTable$Writer,javassist.bytecode.ClassFileWriter$AttributeWriter) -> end
    int size() -> size
    int numOfMethods() -> numOfMethods
    int dataSize() -> dataSize
    void write(java.io.OutputStream) -> write
javassist.bytecode.ClassInfo -> javassist.bytecode.ClassInfo:
    int tag -> tag
    int name -> name
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    java.lang.String getClassName(javassist.bytecode.ConstPool) -> getClassName
    void renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.Map) -> renameClass
    void renameClass(javassist.bytecode.ConstPool,java.util.Map,java.util.Map) -> renameClass
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.CodeAnalyzer -> javassist.bytecode.CodeAnalyzer:
    javassist.bytecode.ConstPool constPool -> constPool
    javassist.bytecode.CodeAttribute codeAttr -> codeAttr
    void <init>(javassist.bytecode.CodeAttribute) -> <init>
    int computeMaxStack() -> computeMaxStack
    void initStack(int[],javassist.bytecode.CodeAttribute) -> initStack
    void visitBytecode(javassist.bytecode.CodeIterator,int[],int) -> visitBytecode
    boolean processBranch(int,javassist.bytecode.CodeIterator,int,int,int[],int,int[]) -> processBranch
    void checkTarget(int,int,int,int[],int) -> checkTarget
    boolean isEnd(int) -> isEnd
    int visitInst(int,javassist.bytecode.CodeIterator,int,int) -> visitInst
    int getFieldSize(javassist.bytecode.CodeIterator,int) -> getFieldSize
javassist.bytecode.CodeAttribute -> javassist.bytecode.CodeAttribute:
    java.lang.String tag -> tag
    int maxStack -> maxStack
    int maxLocals -> maxLocals
    javassist.bytecode.ExceptionTable exceptions -> exceptions
    java.util.List attributes -> attributes
    void <init>(javassist.bytecode.ConstPool,int,int,byte[],javassist.bytecode.ExceptionTable) -> <init>
    void <init>(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute,java.util.Map) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    int length() -> length
    void write(java.io.DataOutputStream) -> write
    byte[] get() -> get
    void set(byte[]) -> set
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    java.lang.String getDeclaringClass() -> getDeclaringClass
    int getMaxStack() -> getMaxStack
    void setMaxStack(int) -> setMaxStack
    int computeMaxStack() -> computeMaxStack
    int getMaxLocals() -> getMaxLocals
    void setMaxLocals(int) -> setMaxLocals
    int getCodeLength() -> getCodeLength
    byte[] getCode() -> getCode
    void setCode(byte[]) -> setCode
    javassist.bytecode.CodeIterator iterator() -> iterator
    javassist.bytecode.ExceptionTable getExceptionTable() -> getExceptionTable
    java.util.List getAttributes() -> getAttributes
    javassist.bytecode.AttributeInfo getAttribute(java.lang.String) -> getAttribute
    void setAttribute(javassist.bytecode.StackMapTable) -> setAttribute
    void setAttribute(javassist.bytecode.StackMap) -> setAttribute
    byte[] copyCode(javassist.bytecode.ConstPool,java.util.Map,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> copyCode
    javassist.bytecode.CodeAttribute$LdcEntry copyCode(byte[],int,int,javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map) -> copyCode
    void copyConstPoolInfo(int,byte[],javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map) -> copyConstPoolInfo
    void insertLocalVar(int,int) -> insertLocalVar
    void shiftIndex(javassist.bytecode.CodeIterator,int,int) -> shiftIndex
    void shiftIndex8(javassist.bytecode.CodeIterator,int,int,int,int) -> shiftIndex8
    void shiftIndex0(javassist.bytecode.CodeIterator,int,int,int,int,int,int) -> shiftIndex0
javassist.bytecode.CodeAttribute$LdcEntry -> javassist.bytecode.CodeAttribute$LdcEntry:
    javassist.bytecode.CodeAttribute$LdcEntry next -> next
    int where -> where
    int index -> index
    void <init>() -> <init>
    byte[] doit(byte[],javassist.bytecode.CodeAttribute$LdcEntry,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> doit
javassist.bytecode.CodeAttribute$RuntimeCopyException -> javassist.bytecode.CodeAttribute$RuntimeCopyException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
javassist.bytecode.CodeIterator -> javassist.bytecode.CodeIterator:
    javassist.bytecode.CodeAttribute codeAttr -> codeAttr
    byte[] bytecode -> bytecode
    int endPos -> endPos
    int currentPos -> currentPos
    int mark -> mark
    int mark2 -> mark2
    int[] opcodeLength -> opcodeLength
    void <init>(javassist.bytecode.CodeAttribute) -> <init>
    void begin() -> begin
    void move(int) -> move
    void setMark(int) -> setMark
    void setMark2(int) -> setMark2
    int getMark() -> getMark
    int getMark2() -> getMark2
    javassist.bytecode.CodeAttribute get() -> get
    int getCodeLength() -> getCodeLength
    int byteAt(int) -> byteAt
    int signedByteAt(int) -> signedByteAt
    void writeByte(int,int) -> writeByte
    int u16bitAt(int) -> u16bitAt
    int s16bitAt(int) -> s16bitAt
    void write16bit(int,int) -> write16bit
    int s32bitAt(int) -> s32bitAt
    void write32bit(int,int) -> write32bit
    void write(byte[],int) -> write
    boolean hasNext() -> hasNext
    int next() -> next
    int lookAhead() -> lookAhead
    int skipConstructor() -> skipConstructor
    int skipSuperConstructor() -> skipSuperConstructor
    int skipThisConstructor() -> skipThisConstructor
    int skipSuperConstructor0(int) -> skipSuperConstructor0
    int insert(byte[]) -> insert
    void insert(int,byte[]) -> insert
    int insertAt(int,byte[]) -> insertAt
    int insertEx(byte[]) -> insertEx
    void insertEx(int,byte[]) -> insertEx
    int insertExAt(int,byte[]) -> insertExAt
    int insert0(int,byte[],boolean) -> insert0
    int insertGap(int) -> insertGap
    int insertGap(int,int) -> insertGap
    int insertExGap(int) -> insertExGap
    int insertExGap(int,int) -> insertExGap
    javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean) -> insertGapAt
    void updateCursors(int,int) -> updateCursors
    void insert(javassist.bytecode.ExceptionTable,int) -> insert
    int append(byte[]) -> append
    void appendGap(int) -> appendGap
    void append(javassist.bytecode.ExceptionTable,int) -> append
    int nextOpcode(byte[],int) -> nextOpcode
    byte[] insertGapCore0(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> insertGapCore0
    byte[] insertGapCore1(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> insertGapCore1
    void insertGap2(byte[],int,int,int,byte[],boolean) -> insertGap2
    int copyGapBytes(byte[],int,byte[],int,int) -> copyGapBytes
    int newOffset(int,int,int,int,boolean) -> newOffset
    byte[] changeLdcToLdcW(byte[],javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute,javassist.bytecode.CodeAttribute$LdcEntry) -> changeLdcToLdcW
    void addLdcW(javassist.bytecode.CodeAttribute$LdcEntry,java.util.List) -> addLdcW
    byte[] insertGapCore0w(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute,javassist.bytecode.CodeIterator$Gap) -> insertGapCore0w
    byte[] insertGap2w(byte[],int,int,boolean,java.util.List,javassist.bytecode.CodeIterator$Pointers) -> insertGap2w
    java.util.List makeJumpList(byte[],int,javassist.bytecode.CodeIterator$Pointers) -> makeJumpList
    byte[] makeExapndedCode(byte[],java.util.List,int,int) -> makeExapndedCode
    void <clinit>() -> <clinit>
javassist.bytecode.CodeIterator$AlignmentException -> javassist.bytecode.CodeIterator$AlignmentException:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
javassist.bytecode.CodeIterator$Branch -> javassist.bytecode.CodeIterator$Branch:
    int pos -> pos
    int orgPos -> orgPos
    void <init>(int) -> <init>
    void shift(int,int,boolean) -> shift
    int shiftOffset(int,int,int,int,boolean) -> shiftOffset
    boolean expanded() -> expanded
    int gapChanged() -> gapChanged
    int deltaSize() -> deltaSize
    int write(int,byte[],int,byte[]) -> write
javassist.bytecode.CodeIterator$Branch16 -> javassist.bytecode.CodeIterator$Branch16:
    int offset -> offset
    int state -> state
    int BIT16 -> BIT16
    int EXPAND -> EXPAND
    int BIT32 -> BIT32
    void <init>(int,int) -> <init>
    void shift(int,int,boolean) -> shift
    boolean expanded() -> expanded
    int deltaSize() -> deltaSize
    void write32(int,byte[],int,byte[]) -> write32
    int write(int,byte[],int,byte[]) -> write
javassist.bytecode.CodeIterator$Gap -> javassist.bytecode.CodeIterator$Gap:
    int position -> position
    int length -> length
    void <init>() -> <init>
javassist.bytecode.CodeIterator$If16 -> javassist.bytecode.CodeIterator$If16:
    void <init>(int,int) -> <init>
    int deltaSize() -> deltaSize
    void write32(int,byte[],int,byte[]) -> write32
    int opcode(int) -> opcode
javassist.bytecode.CodeIterator$Jump16 -> javassist.bytecode.CodeIterator$Jump16:
    void <init>(int,int) -> <init>
    int deltaSize() -> deltaSize
    void write32(int,byte[],int,byte[]) -> write32
javassist.bytecode.CodeIterator$Jump32 -> javassist.bytecode.CodeIterator$Jump32:
    int offset -> offset
    void <init>(int,int) -> <init>
    void shift(int,int,boolean) -> shift
    int write(int,byte[],int,byte[]) -> write
javassist.bytecode.CodeIterator$LdcW -> javassist.bytecode.CodeIterator$LdcW:
    int index -> index
    boolean state -> state
    void <init>(int,int) -> <init>
    boolean expanded() -> expanded
    int deltaSize() -> deltaSize
    int write(int,byte[],int,byte[]) -> write
javassist.bytecode.CodeIterator$Lookup -> javassist.bytecode.CodeIterator$Lookup:
    int[] matches -> matches
    void <init>(int,int,int[],int[],javassist.bytecode.CodeIterator$Pointers) -> <init>
    int write2(int,byte[]) -> write2
    int tableSize() -> tableSize
javassist.bytecode.CodeIterator$Pointers -> javassist.bytecode.CodeIterator$Pointers:
    int cursor -> cursor
    int mark0 -> mark0
    int mark -> mark
    int mark2 -> mark2
    javassist.bytecode.ExceptionTable etable -> etable
    javassist.bytecode.LineNumberAttribute line -> line
    javassist.bytecode.LocalVariableAttribute vars -> vars
    javassist.bytecode.LocalVariableAttribute types -> types
    javassist.bytecode.StackMapTable stack -> stack
    javassist.bytecode.StackMap stack2 -> stack2
    void <init>(int,int,int,int,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute) -> <init>
    void shiftPc(int,int,boolean) -> shiftPc
    void shiftForSwitch(int,int) -> shiftForSwitch
javassist.bytecode.CodeIterator$Switcher -> javassist.bytecode.CodeIterator$Switcher:
    int gap -> gap
    int defaultByte -> defaultByte
    int[] offsets -> offsets
    javassist.bytecode.CodeIterator$Pointers pointers -> pointers
    void <init>(int,int,int[],javassist.bytecode.CodeIterator$Pointers) -> <init>
    void shift(int,int,boolean) -> shift
    int gapChanged() -> gapChanged
    int deltaSize() -> deltaSize
    int write(int,byte[],int,byte[]) -> write
    int write2(int,byte[]) -> write2
    int tableSize() -> tableSize
    void adjustOffsets(int,int) -> adjustOffsets
javassist.bytecode.CodeIterator$Table -> javassist.bytecode.CodeIterator$Table:
    int low -> low
    int high -> high
    void <init>(int,int,int,int,int[],javassist.bytecode.CodeIterator$Pointers) -> <init>
    int write2(int,byte[]) -> write2
    int tableSize() -> tableSize
javassist.bytecode.ConstInfo -> javassist.bytecode.ConstInfo:
    int index -> index
    void <init>(int) -> <init>
    int getTag() -> getTag
    java.lang.String getClassName(javassist.bytecode.ConstPool) -> getClassName
    void renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.Map) -> renameClass
    void renameClass(javassist.bytecode.ConstPool,java.util.Map,java.util.Map) -> renameClass
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
    java.lang.String toString() -> toString
javassist.bytecode.ConstInfoPadding -> javassist.bytecode.ConstInfoPadding:
    void <init>(int) -> <init>
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.ConstPool -> javassist.bytecode.ConstPool:
    javassist.bytecode.LongVector items -> items
    int numOfItems -> numOfItems
    int thisClassInfo -> thisClassInfo
    java.util.Map itemsCache -> itemsCache
    int CONST_Class -> CONST_Class
    int CONST_Fieldref -> CONST_Fieldref
    int CONST_Methodref -> CONST_Methodref
    int CONST_InterfaceMethodref -> CONST_InterfaceMethodref
    int CONST_String -> CONST_String
    int CONST_Integer -> CONST_Integer
    int CONST_Float -> CONST_Float
    int CONST_Long -> CONST_Long
    int CONST_Double -> CONST_Double
    int CONST_NameAndType -> CONST_NameAndType
    int CONST_Utf8 -> CONST_Utf8
    int CONST_MethodHandle -> CONST_MethodHandle
    int CONST_MethodType -> CONST_MethodType
    int CONST_Dynamic -> CONST_Dynamic
    int CONST_InvokeDynamic -> CONST_InvokeDynamic
    int CONST_Module -> CONST_Module
    int CONST_Package -> CONST_Package
    javassist.CtClass THIS -> THIS
    int REF_getField -> REF_getField
    int REF_getStatic -> REF_getStatic
    int REF_putField -> REF_putField
    int REF_putStatic -> REF_putStatic
    int REF_invokeVirtual -> REF_invokeVirtual
    int REF_invokeStatic -> REF_invokeStatic
    int REF_invokeSpecial -> REF_invokeSpecial
    int REF_newInvokeSpecial -> REF_newInvokeSpecial
    int REF_invokeInterface -> REF_invokeInterface
    void <init>(java.lang.String) -> <init>
    void <init>(java.io.DataInputStream) -> <init>
    void prune() -> prune
    int getSize() -> getSize
    java.lang.String getClassName() -> getClassName
    int getThisClassInfo() -> getThisClassInfo
    void setThisClassInfo(int) -> setThisClassInfo
    javassist.bytecode.ConstInfo getItem(int) -> getItem
    int getTag(int) -> getTag
    java.lang.String getClassInfo(int) -> getClassInfo
    java.lang.String getClassInfoByDescriptor(int) -> getClassInfoByDescriptor
    int getNameAndTypeName(int) -> getNameAndTypeName
    int getNameAndTypeDescriptor(int) -> getNameAndTypeDescriptor
    int getMemberClass(int) -> getMemberClass
    int getMemberNameAndType(int) -> getMemberNameAndType
    int getFieldrefClass(int) -> getFieldrefClass
    java.lang.String getFieldrefClassName(int) -> getFieldrefClassName
    int getFieldrefNameAndType(int) -> getFieldrefNameAndType
    java.lang.String getFieldrefName(int) -> getFieldrefName
    java.lang.String getFieldrefType(int) -> getFieldrefType
    int getMethodrefClass(int) -> getMethodrefClass
    java.lang.String getMethodrefClassName(int) -> getMethodrefClassName
    int getMethodrefNameAndType(int) -> getMethodrefNameAndType
    java.lang.String getMethodrefName(int) -> getMethodrefName
    java.lang.String getMethodrefType(int) -> getMethodrefType
    int getInterfaceMethodrefClass(int) -> getInterfaceMethodrefClass
    java.lang.String getInterfaceMethodrefClassName(int) -> getInterfaceMethodrefClassName
    int getInterfaceMethodrefNameAndType(int) -> getInterfaceMethodrefNameAndType
    java.lang.String getInterfaceMethodrefName(int) -> getInterfaceMethodrefName
    java.lang.String getInterfaceMethodrefType(int) -> getInterfaceMethodrefType
    java.lang.Object getLdcValue(int) -> getLdcValue
    int getIntegerInfo(int) -> getIntegerInfo
    float getFloatInfo(int) -> getFloatInfo
    long getLongInfo(int) -> getLongInfo
    double getDoubleInfo(int) -> getDoubleInfo
    java.lang.String getStringInfo(int) -> getStringInfo
    java.lang.String getUtf8Info(int) -> getUtf8Info
    int getMethodHandleKind(int) -> getMethodHandleKind
    int getMethodHandleIndex(int) -> getMethodHandleIndex
    int getMethodTypeInfo(int) -> getMethodTypeInfo
    int getInvokeDynamicBootstrap(int) -> getInvokeDynamicBootstrap
    int getInvokeDynamicNameAndType(int) -> getInvokeDynamicNameAndType
    java.lang.String getInvokeDynamicType(int) -> getInvokeDynamicType
    int getDynamicBootstrap(int) -> getDynamicBootstrap
    int getDynamicNameAndType(int) -> getDynamicNameAndType
    java.lang.String getDynamicType(int) -> getDynamicType
    java.lang.String getModuleInfo(int) -> getModuleInfo
    java.lang.String getPackageInfo(int) -> getPackageInfo
    int isConstructor(java.lang.String,int) -> isConstructor
    int isMember(java.lang.String,java.lang.String,int) -> isMember
    java.lang.String eqMember(java.lang.String,java.lang.String,int) -> eqMember
    int addItem0(javassist.bytecode.ConstInfo) -> addItem0
    int addItem(javassist.bytecode.ConstInfo) -> addItem
    int copy(int,javassist.bytecode.ConstPool,java.util.Map) -> copy
    int addConstInfoPadding() -> addConstInfoPadding
    int addClassInfo(javassist.CtClass) -> addClassInfo
    int addClassInfo(java.lang.String) -> addClassInfo
    int addNameAndTypeInfo(java.lang.String,java.lang.String) -> addNameAndTypeInfo
    int addNameAndTypeInfo(int,int) -> addNameAndTypeInfo
    int addFieldrefInfo(int,java.lang.String,java.lang.String) -> addFieldrefInfo
    int addFieldrefInfo(int,int) -> addFieldrefInfo
    int addMethodrefInfo(int,java.lang.String,java.lang.String) -> addMethodrefInfo
    int addMethodrefInfo(int,int) -> addMethodrefInfo
    int addInterfaceMethodrefInfo(int,java.lang.String,java.lang.String) -> addInterfaceMethodrefInfo
    int addInterfaceMethodrefInfo(int,int) -> addInterfaceMethodrefInfo
    int addStringInfo(java.lang.String) -> addStringInfo
    int addIntegerInfo(int) -> addIntegerInfo
    int addFloatInfo(float) -> addFloatInfo
    int addLongInfo(long) -> addLongInfo
    int addDoubleInfo(double) -> addDoubleInfo
    int addUtf8Info(java.lang.String) -> addUtf8Info
    int addMethodHandleInfo(int,int) -> addMethodHandleInfo
    int addMethodTypeInfo(int) -> addMethodTypeInfo
    int addInvokeDynamicInfo(int,int) -> addInvokeDynamicInfo
    int addDynamicInfo(int,int) -> addDynamicInfo
    int addModuleInfo(int) -> addModuleInfo
    int addPackageInfo(int) -> addPackageInfo
    java.util.Set getClassNames() -> getClassNames
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void read(java.io.DataInputStream) -> read
    java.util.Map makeItemsCache(javassist.bytecode.LongVector) -> makeItemsCache
    int readOne(java.io.DataInputStream) -> readOne
    void write(java.io.DataOutputStream) -> write
    void print() -> print
    void print(java.io.PrintWriter) -> print
    void <clinit>() -> <clinit>
javassist.bytecode.ConstantAttribute -> javassist.bytecode.ConstantAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,int) -> <init>
    int getConstantValue() -> getConstantValue
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.DeprecatedAttribute -> javassist.bytecode.DeprecatedAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.Descriptor -> javassist.bytecode.Descriptor:
    void <init>() -> <init>
    java.lang.String toJvmName(java.lang.String) -> toJvmName
    java.lang.String toJavaName(java.lang.String) -> toJavaName
    java.lang.String toJvmName(javassist.CtClass) -> toJvmName
    java.lang.String toClassName(java.lang.String) -> toClassName
    java.lang.String of(java.lang.String) -> of
    java.lang.String rename(java.lang.String,java.lang.String,java.lang.String) -> rename
    java.lang.String rename(java.lang.String,java.util.Map) -> rename
    java.lang.String of(javassist.CtClass) -> of
    void toDescriptor(java.lang.StringBuffer,javassist.CtClass) -> toDescriptor
    java.lang.String ofConstructor(javassist.CtClass[]) -> ofConstructor
    java.lang.String ofMethod(javassist.CtClass,javassist.CtClass[]) -> ofMethod
    java.lang.String ofParameters(javassist.CtClass[]) -> ofParameters
    java.lang.String appendParameter(java.lang.String,java.lang.String) -> appendParameter
    java.lang.String insertParameter(java.lang.String,java.lang.String) -> insertParameter
    java.lang.String appendParameter(javassist.CtClass,java.lang.String) -> appendParameter
    java.lang.String insertParameter(javassist.CtClass,java.lang.String) -> insertParameter
    java.lang.String changeReturnType(java.lang.String,java.lang.String) -> changeReturnType
    javassist.CtClass[] getParameterTypes(java.lang.String,javassist.ClassPool) -> getParameterTypes
    boolean eqParamTypes(java.lang.String,java.lang.String) -> eqParamTypes
    java.lang.String getParamDescriptor(java.lang.String) -> getParamDescriptor
    javassist.CtClass getReturnType(java.lang.String,javassist.ClassPool) -> getReturnType
    int numOfParameters(java.lang.String) -> numOfParameters
    javassist.CtClass toCtClass(java.lang.String,javassist.ClassPool) -> toCtClass
    int toCtClass(javassist.ClassPool,java.lang.String,int,javassist.CtClass[],int) -> toCtClass
    javassist.CtClass toPrimitiveClass(char) -> toPrimitiveClass
    int arrayDimension(java.lang.String) -> arrayDimension
    java.lang.String toArrayComponent(java.lang.String,int) -> toArrayComponent
    int dataSize(java.lang.String) -> dataSize
    int paramSize(java.lang.String) -> paramSize
    int dataSize(java.lang.String,boolean) -> dataSize
    java.lang.String toString(java.lang.String) -> toString
javassist.bytecode.Descriptor$Iterator -> javassist.bytecode.Descriptor$Iterator:
    java.lang.String desc -> desc
    int index -> index
    int curPos -> curPos
    boolean param -> param
    void <init>(java.lang.String) -> <init>
    boolean hasNext() -> hasNext
    boolean isParameter() -> isParameter
    char currentChar() -> currentChar
    boolean is2byte() -> is2byte
    int next() -> next
javassist.bytecode.Descriptor$PrettyPrinter -> javassist.bytecode.Descriptor$PrettyPrinter:
    void <init>() -> <init>
    java.lang.String toString(java.lang.String) -> toString
    int readType(java.lang.StringBuffer,int,java.lang.String) -> readType
javassist.bytecode.DoubleInfo -> javassist.bytecode.DoubleInfo:
    int tag -> tag
    double value -> value
    void <init>(double,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.DuplicateMemberException -> javassist.bytecode.DuplicateMemberException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
javassist.bytecode.DynamicInfo -> javassist.bytecode.DynamicInfo:
    int tag -> tag
    int bootstrap -> bootstrap
    int nameAndType -> nameAndType
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.EnclosingMethodAttribute -> javassist.bytecode.EnclosingMethodAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    int classIndex() -> classIndex
    int methodIndex() -> methodIndex
    java.lang.String className() -> className
    java.lang.String methodName() -> methodName
    java.lang.String methodDescriptor() -> methodDescriptor
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.ExceptionTable -> javassist.bytecode.ExceptionTable:
    javassist.bytecode.ConstPool constPool -> constPool
    java.util.List entries -> entries
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.io.DataInputStream) -> <init>
    java.lang.Object clone() -> clone
    int size() -> size
    int startPc(int) -> startPc
    void setStartPc(int,int) -> setStartPc
    int endPc(int) -> endPc
    void setEndPc(int,int) -> setEndPc
    int handlerPc(int) -> handlerPc
    void setHandlerPc(int,int) -> setHandlerPc
    int catchType(int) -> catchType
    void setCatchType(int,int) -> setCatchType
    void add(int,javassist.bytecode.ExceptionTable,int) -> add
    void add(int,int,int,int,int) -> add
    void add(int,int,int,int) -> add
    void remove(int) -> remove
    javassist.bytecode.ExceptionTable copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void shiftPc(int,int,boolean) -> shiftPc
    int shiftPc(int,int,int,boolean) -> shiftPc
    void write(java.io.DataOutputStream) -> write
javassist.bytecode.ExceptionTableEntry -> javassist.bytecode.ExceptionTableEntry:
    int startPc -> startPc
    int endPc -> endPc
    int handlerPc -> handlerPc
    int catchType -> catchType
    void <init>(int,int,int,int) -> <init>
javassist.bytecode.ExceptionsAttribute -> javassist.bytecode.ExceptionsAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,javassist.bytecode.ExceptionsAttribute,java.util.Map) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void copyFrom(javassist.bytecode.ExceptionsAttribute,java.util.Map) -> copyFrom
    int[] getExceptionIndexes() -> getExceptionIndexes
    java.lang.String[] getExceptions() -> getExceptions
    void setExceptionIndexes(int[]) -> setExceptionIndexes
    void setExceptions(java.lang.String[]) -> setExceptions
    int tableLength() -> tableLength
    int getException(int) -> getException
javassist.bytecode.FieldInfo -> javassist.bytecode.FieldInfo:
    javassist.bytecode.ConstPool constPool -> constPool
    int accessFlags -> accessFlags
    int name -> name
    java.lang.String cachedName -> cachedName
    java.lang.String cachedType -> cachedType
    int descriptor -> descriptor
    java.util.List attribute -> attribute
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.io.DataInputStream) -> <init>
    java.lang.String toString() -> toString
    void compact(javassist.bytecode.ConstPool) -> compact
    void prune(javassist.bytecode.ConstPool) -> prune
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getAccessFlags() -> getAccessFlags
    void setAccessFlags(int) -> setAccessFlags
    java.lang.String getDescriptor() -> getDescriptor
    void setDescriptor(java.lang.String) -> setDescriptor
    int getConstantValue() -> getConstantValue
    java.util.List getAttributes() -> getAttributes
    javassist.bytecode.AttributeInfo getAttribute(java.lang.String) -> getAttribute
    javassist.bytecode.AttributeInfo removeAttribute(java.lang.String) -> removeAttribute
    void addAttribute(javassist.bytecode.AttributeInfo) -> addAttribute
    void read(java.io.DataInputStream) -> read
    void write(java.io.DataOutputStream) -> write
javassist.bytecode.FieldrefInfo -> javassist.bytecode.FieldrefInfo:
    int tag -> tag
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int getTag() -> getTag
    java.lang.String getTagName() -> getTagName
    int copy2(javassist.bytecode.ConstPool,int,int) -> copy2
javassist.bytecode.FloatInfo -> javassist.bytecode.FloatInfo:
    int tag -> tag
    float value -> value
    void <init>(float,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.InnerClassesAttribute -> javassist.bytecode.InnerClassesAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    int tableLength() -> tableLength
    int innerClassIndex(int) -> innerClassIndex
    java.lang.String innerClass(int) -> innerClass
    void setInnerClassIndex(int,int) -> setInnerClassIndex
    int outerClassIndex(int) -> outerClassIndex
    java.lang.String outerClass(int) -> outerClass
    void setOuterClassIndex(int,int) -> setOuterClassIndex
    int innerNameIndex(int) -> innerNameIndex
    java.lang.String innerName(int) -> innerName
    void setInnerNameIndex(int,int) -> setInnerNameIndex
    int accessFlags(int) -> accessFlags
    void setAccessFlags(int,int) -> setAccessFlags
    int find(java.lang.String) -> find
    void append(java.lang.String,java.lang.String,java.lang.String,int) -> append
    void append(int,int,int,int) -> append
    int remove(int) -> remove
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.InstructionPrinter -> javassist.bytecode.InstructionPrinter:
    java.lang.String[] opcodes -> opcodes
    java.io.PrintStream stream -> stream
    void <init>(java.io.PrintStream) -> <init>
    void print(javassist.CtMethod,java.io.PrintStream) -> print
    void print(javassist.CtMethod) -> print
    java.lang.String instructionString(javassist.bytecode.CodeIterator,int,javassist.bytecode.ConstPool) -> instructionString
    java.lang.String wide(javassist.bytecode.CodeIterator,int) -> wide
    java.lang.String arrayInfo(int) -> arrayInfo
    java.lang.String classInfo(javassist.bytecode.ConstPool,int) -> classInfo
    java.lang.String interfaceMethodInfo(javassist.bytecode.ConstPool,int) -> interfaceMethodInfo
    java.lang.String methodInfo(javassist.bytecode.ConstPool,int) -> methodInfo
    java.lang.String fieldInfo(javassist.bytecode.ConstPool,int) -> fieldInfo
    java.lang.String lookupSwitch(javassist.bytecode.CodeIterator,int) -> lookupSwitch
    java.lang.String tableSwitch(javassist.bytecode.CodeIterator,int) -> tableSwitch
    java.lang.String ldc(javassist.bytecode.ConstPool,int) -> ldc
    void <clinit>() -> <clinit>
javassist.bytecode.IntegerInfo -> javassist.bytecode.IntegerInfo:
    int tag -> tag
    int value -> value
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.InterfaceMethodrefInfo -> javassist.bytecode.InterfaceMethodrefInfo:
    int tag -> tag
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int getTag() -> getTag
    java.lang.String getTagName() -> getTagName
    int copy2(javassist.bytecode.ConstPool,int,int) -> copy2
javassist.bytecode.InvokeDynamicInfo -> javassist.bytecode.InvokeDynamicInfo:
    int tag -> tag
    int bootstrap -> bootstrap
    int nameAndType -> nameAndType
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.LineNumberAttribute -> javassist.bytecode.LineNumberAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    int tableLength() -> tableLength
    int startPc(int) -> startPc
    int lineNumber(int) -> lineNumber
    int toLineNumber(int) -> toLineNumber
    int toStartPc(int) -> toStartPc
    javassist.bytecode.LineNumberAttribute$Pc toNearPc(int) -> toNearPc
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void shiftPc(int,int,boolean) -> shiftPc
javassist.bytecode.LineNumberAttribute$Pc -> javassist.bytecode.LineNumberAttribute$Pc:
    int index -> index
    int line -> line
    void <init>() -> <init>
javassist.bytecode.LocalVariableAttribute -> javassist.bytecode.LocalVariableAttribute:
    java.lang.String tag -> tag
    java.lang.String typeTag -> typeTag
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void addEntry(int,int,int,int,int) -> addEntry
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    java.lang.String renameEntry(java.lang.String,java.lang.String,java.lang.String) -> renameEntry
    void renameClass(java.util.Map) -> renameClass
    java.lang.String renameEntry(java.lang.String,java.util.Map) -> renameEntry
    void shiftIndex(int,int) -> shiftIndex
    int tableLength() -> tableLength
    int startPc(int) -> startPc
    int codeLength(int) -> codeLength
    void shiftPc(int,int,boolean) -> shiftPc
    int nameIndex(int) -> nameIndex
    java.lang.String variableName(int) -> variableName
    int descriptorIndex(int) -> descriptorIndex
    int signatureIndex(int) -> signatureIndex
    java.lang.String descriptor(int) -> descriptor
    java.lang.String signature(int) -> signature
    int index(int) -> index
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    javassist.bytecode.LocalVariableAttribute makeThisAttr(javassist.bytecode.ConstPool,byte[]) -> makeThisAttr
javassist.bytecode.LocalVariableTypeAttribute -> javassist.bytecode.LocalVariableTypeAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    java.lang.String renameEntry(java.lang.String,java.lang.String,java.lang.String) -> renameEntry
    java.lang.String renameEntry(java.lang.String,java.util.Map) -> renameEntry
    javassist.bytecode.LocalVariableAttribute makeThisAttr(javassist.bytecode.ConstPool,byte[]) -> makeThisAttr
javassist.bytecode.LongInfo -> javassist.bytecode.LongInfo:
    int tag -> tag
    long value -> value
    void <init>(long,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.LongVector -> javassist.bytecode.LongVector:
    int ASIZE -> ASIZE
    int ABITS -> ABITS
    int VSIZE -> VSIZE
    javassist.bytecode.ConstInfo[][] objects -> objects
    int elements -> elements
    void <init>() -> <init>
    void <init>(int) -> <init>
    int size() -> size
    int capacity() -> capacity
    javassist.bytecode.ConstInfo elementAt(int) -> elementAt
    void addElement(javassist.bytecode.ConstInfo) -> addElement
javassist.bytecode.MemberrefInfo -> javassist.bytecode.MemberrefInfo:
    int classIndex -> classIndex
    int nameAndTypeIndex -> nameAndTypeIndex
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    int copy2(javassist.bytecode.ConstPool,int,int) -> copy2
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
    java.lang.String getTagName() -> getTagName
javassist.bytecode.MethodHandleInfo -> javassist.bytecode.MethodHandleInfo:
    int tag -> tag
    int refKind -> refKind
    int refIndex -> refIndex
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.MethodInfo -> javassist.bytecode.MethodInfo:
    javassist.bytecode.ConstPool constPool -> constPool
    int accessFlags -> accessFlags
    int name -> name
    java.lang.String cachedName -> cachedName
    int descriptor -> descriptor
    java.util.List attribute -> attribute
    boolean doPreverify -> doPreverify
    java.lang.String nameInit -> nameInit
    java.lang.String nameClinit -> nameClinit
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String,javassist.bytecode.MethodInfo,java.util.Map) -> <init>
    java.lang.String toString() -> toString
    void compact(javassist.bytecode.ConstPool) -> compact
    void prune(javassist.bytecode.ConstPool) -> prune
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    boolean isMethod() -> isMethod
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    boolean isConstructor() -> isConstructor
    boolean isStaticInitializer() -> isStaticInitializer
    int getAccessFlags() -> getAccessFlags
    void setAccessFlags(int) -> setAccessFlags
    java.lang.String getDescriptor() -> getDescriptor
    void setDescriptor(java.lang.String) -> setDescriptor
    java.util.List getAttributes() -> getAttributes
    javassist.bytecode.AttributeInfo getAttribute(java.lang.String) -> getAttribute
    javassist.bytecode.AttributeInfo removeAttribute(java.lang.String) -> removeAttribute
    void addAttribute(javassist.bytecode.AttributeInfo) -> addAttribute
    javassist.bytecode.ExceptionsAttribute getExceptionsAttribute() -> getExceptionsAttribute
    javassist.bytecode.CodeAttribute getCodeAttribute() -> getCodeAttribute
    void removeExceptionsAttribute() -> removeExceptionsAttribute
    void setExceptionsAttribute(javassist.bytecode.ExceptionsAttribute) -> setExceptionsAttribute
    void removeCodeAttribute() -> removeCodeAttribute
    void setCodeAttribute(javassist.bytecode.CodeAttribute) -> setCodeAttribute
    void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile) -> rebuildStackMapIf6
    void rebuildStackMap(javassist.ClassPool) -> rebuildStackMap
    void rebuildStackMapForME(javassist.ClassPool) -> rebuildStackMapForME
    int getLineNumber(int) -> getLineNumber
    void setSuperclass(java.lang.String) -> setSuperclass
    void read(javassist.bytecode.MethodInfo,java.lang.String,java.util.Map) -> read
    void read(java.io.DataInputStream) -> read
    void write(java.io.DataOutputStream) -> write
    void <clinit>() -> <clinit>
javassist.bytecode.MethodParametersAttribute -> javassist.bytecode.MethodParametersAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String[],int[]) -> <init>
    int size() -> size
    int name(int) -> name
    int accessFlags(int) -> accessFlags
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.MethodTypeInfo -> javassist.bytecode.MethodTypeInfo:
    int tag -> tag
    int descriptor -> descriptor
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    void renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.Map) -> renameClass
    void renameClass(javassist.bytecode.ConstPool,java.util.Map,java.util.Map) -> renameClass
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.MethodrefInfo -> javassist.bytecode.MethodrefInfo:
    int tag -> tag
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int getTag() -> getTag
    java.lang.String getTagName() -> getTagName
    int copy2(javassist.bytecode.ConstPool,int,int) -> copy2
javassist.bytecode.Mnemonic -> javassist.bytecode.Mnemonic:
    java.lang.String[] OPCODE -> OPCODE
    void <clinit>() -> <clinit>
javassist.bytecode.ModuleInfo -> javassist.bytecode.ModuleInfo:
    int tag -> tag
    int name -> name
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    java.lang.String getModuleName(javassist.bytecode.ConstPool) -> getModuleName
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.NameAndTypeInfo -> javassist.bytecode.NameAndTypeInfo:
    int tag -> tag
    int memberName -> memberName
    int typeDescriptor -> typeDescriptor
    void <init>(int,int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    void renameClass(javassist.bytecode.ConstPool,java.lang.String,java.lang.String,java.util.Map) -> renameClass
    void renameClass(javassist.bytecode.ConstPool,java.util.Map,java.util.Map) -> renameClass
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.NestHostAttribute -> javassist.bytecode.NestHostAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,int) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    int hostClassIndex() -> hostClassIndex
javassist.bytecode.NestMembersAttribute -> javassist.bytecode.NestMembersAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    int numberOfClasses() -> numberOfClasses
    int memberClass(int) -> memberClass
javassist.bytecode.Opcode -> javassist.bytecode.Opcode:
    int AALOAD -> AALOAD
    int AASTORE -> AASTORE
    int ACONST_NULL -> ACONST_NULL
    int ALOAD -> ALOAD
    int ALOAD_0 -> ALOAD_0
    int ALOAD_1 -> ALOAD_1
    int ALOAD_2 -> ALOAD_2
    int ALOAD_3 -> ALOAD_3
    int ANEWARRAY -> ANEWARRAY
    int ARETURN -> ARETURN
    int ARRAYLENGTH -> ARRAYLENGTH
    int ASTORE -> ASTORE
    int ASTORE_0 -> ASTORE_0
    int ASTORE_1 -> ASTORE_1
    int ASTORE_2 -> ASTORE_2
    int ASTORE_3 -> ASTORE_3
    int ATHROW -> ATHROW
    int BALOAD -> BALOAD
    int BASTORE -> BASTORE
    int BIPUSH -> BIPUSH
    int CALOAD -> CALOAD
    int CASTORE -> CASTORE
    int CHECKCAST -> CHECKCAST
    int D2F -> D2F
    int D2I -> D2I
    int D2L -> D2L
    int DADD -> DADD
    int DALOAD -> DALOAD
    int DASTORE -> DASTORE
    int DCMPG -> DCMPG
    int DCMPL -> DCMPL
    int DCONST_0 -> DCONST_0
    int DCONST_1 -> DCONST_1
    int DDIV -> DDIV
    int DLOAD -> DLOAD
    int DLOAD_0 -> DLOAD_0
    int DLOAD_1 -> DLOAD_1
    int DLOAD_2 -> DLOAD_2
    int DLOAD_3 -> DLOAD_3
    int DMUL -> DMUL
    int DNEG -> DNEG
    int DREM -> DREM
    int DRETURN -> DRETURN
    int DSTORE -> DSTORE
    int DSTORE_0 -> DSTORE_0
    int DSTORE_1 -> DSTORE_1
    int DSTORE_2 -> DSTORE_2
    int DSTORE_3 -> DSTORE_3
    int DSUB -> DSUB
    int DUP -> DUP
    int DUP2 -> DUP2
    int DUP2_X1 -> DUP2_X1
    int DUP2_X2 -> DUP2_X2
    int DUP_X1 -> DUP_X1
    int DUP_X2 -> DUP_X2
    int F2D -> F2D
    int F2I -> F2I
    int F2L -> F2L
    int FADD -> FADD
    int FALOAD -> FALOAD
    int FASTORE -> FASTORE
    int FCMPG -> FCMPG
    int FCMPL -> FCMPL
    int FCONST_0 -> FCONST_0
    int FCONST_1 -> FCONST_1
    int FCONST_2 -> FCONST_2
    int FDIV -> FDIV
    int FLOAD -> FLOAD
    int FLOAD_0 -> FLOAD_0
    int FLOAD_1 -> FLOAD_1
    int FLOAD_2 -> FLOAD_2
    int FLOAD_3 -> FLOAD_3
    int FMUL -> FMUL
    int FNEG -> FNEG
    int FREM -> FREM
    int FRETURN -> FRETURN
    int FSTORE -> FSTORE
    int FSTORE_0 -> FSTORE_0
    int FSTORE_1 -> FSTORE_1
    int FSTORE_2 -> FSTORE_2
    int FSTORE_3 -> FSTORE_3
    int FSUB -> FSUB
    int GETFIELD -> GETFIELD
    int GETSTATIC -> GETSTATIC
    int GOTO -> GOTO
    int GOTO_W -> GOTO_W
    int I2B -> I2B
    int I2C -> I2C
    int I2D -> I2D
    int I2F -> I2F
    int I2L -> I2L
    int I2S -> I2S
    int IADD -> IADD
    int IALOAD -> IALOAD
    int IAND -> IAND
    int IASTORE -> IASTORE
    int ICONST_0 -> ICONST_0
    int ICONST_1 -> ICONST_1
    int ICONST_2 -> ICONST_2
    int ICONST_3 -> ICONST_3
    int ICONST_4 -> ICONST_4
    int ICONST_5 -> ICONST_5
    int ICONST_M1 -> ICONST_M1
    int IDIV -> IDIV
    int IFEQ -> IFEQ
    int IFGE -> IFGE
    int IFGT -> IFGT
    int IFLE -> IFLE
    int IFLT -> IFLT
    int IFNE -> IFNE
    int IFNONNULL -> IFNONNULL
    int IFNULL -> IFNULL
    int IF_ACMPEQ -> IF_ACMPEQ
    int IF_ACMPNE -> IF_ACMPNE
    int IF_ICMPEQ -> IF_ICMPEQ
    int IF_ICMPGE -> IF_ICMPGE
    int IF_ICMPGT -> IF_ICMPGT
    int IF_ICMPLE -> IF_ICMPLE
    int IF_ICMPLT -> IF_ICMPLT
    int IF_ICMPNE -> IF_ICMPNE
    int IINC -> IINC
    int ILOAD -> ILOAD
    int ILOAD_0 -> ILOAD_0
    int ILOAD_1 -> ILOAD_1
    int ILOAD_2 -> ILOAD_2
    int ILOAD_3 -> ILOAD_3
    int IMUL -> IMUL
    int INEG -> INEG
    int INSTANCEOF -> INSTANCEOF
    int INVOKEDYNAMIC -> INVOKEDYNAMIC
    int INVOKEINTERFACE -> INVOKEINTERFACE
    int INVOKESPECIAL -> INVOKESPECIAL
    int INVOKESTATIC -> INVOKESTATIC
    int INVOKEVIRTUAL -> INVOKEVIRTUAL
    int IOR -> IOR
    int IREM -> IREM
    int IRETURN -> IRETURN
    int ISHL -> ISHL
    int ISHR -> ISHR
    int ISTORE -> ISTORE
    int ISTORE_0 -> ISTORE_0
    int ISTORE_1 -> ISTORE_1
    int ISTORE_2 -> ISTORE_2
    int ISTORE_3 -> ISTORE_3
    int ISUB -> ISUB
    int IUSHR -> IUSHR
    int IXOR -> IXOR
    int JSR -> JSR
    int JSR_W -> JSR_W
    int L2D -> L2D
    int L2F -> L2F
    int L2I -> L2I
    int LADD -> LADD
    int LALOAD -> LALOAD
    int LAND -> LAND
    int LASTORE -> LASTORE
    int LCMP -> LCMP
    int LCONST_0 -> LCONST_0
    int LCONST_1 -> LCONST_1
    int LDC -> LDC
    int LDC2_W -> LDC2_W
    int LDC_W -> LDC_W
    int LDIV -> LDIV
    int LLOAD -> LLOAD
    int LLOAD_0 -> LLOAD_0
    int LLOAD_1 -> LLOAD_1
    int LLOAD_2 -> LLOAD_2
    int LLOAD_3 -> LLOAD_3
    int LMUL -> LMUL
    int LNEG -> LNEG
    int LOOKUPSWITCH -> LOOKUPSWITCH
    int LOR -> LOR
    int LREM -> LREM
    int LRETURN -> LRETURN
    int LSHL -> LSHL
    int LSHR -> LSHR
    int LSTORE -> LSTORE
    int LSTORE_0 -> LSTORE_0
    int LSTORE_1 -> LSTORE_1
    int LSTORE_2 -> LSTORE_2
    int LSTORE_3 -> LSTORE_3
    int LSUB -> LSUB
    int LUSHR -> LUSHR
    int LXOR -> LXOR
    int MONITORENTER -> MONITORENTER
    int MONITOREXIT -> MONITOREXIT
    int MULTIANEWARRAY -> MULTIANEWARRAY
    int NEW -> NEW
    int NEWARRAY -> NEWARRAY
    int NOP -> NOP
    int POP -> POP
    int POP2 -> POP2
    int PUTFIELD -> PUTFIELD
    int PUTSTATIC -> PUTSTATIC
    int RET -> RET
    int RETURN -> RETURN
    int SALOAD -> SALOAD
    int SASTORE -> SASTORE
    int SIPUSH -> SIPUSH
    int SWAP -> SWAP
    int TABLESWITCH -> TABLESWITCH
    int WIDE -> WIDE
    int T_BOOLEAN -> T_BOOLEAN
    int T_CHAR -> T_CHAR
    int T_FLOAT -> T_FLOAT
    int T_DOUBLE -> T_DOUBLE
    int T_BYTE -> T_BYTE
    int T_SHORT -> T_SHORT
    int T_INT -> T_INT
    int T_LONG -> T_LONG
    int[] STACK_GROW -> STACK_GROW
    void <clinit>() -> <clinit>
javassist.bytecode.PackageInfo -> javassist.bytecode.PackageInfo:
    int tag -> tag
    int name -> name
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    java.lang.String getPackageName(javassist.bytecode.ConstPool) -> getPackageName
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.ParameterAnnotationsAttribute -> javassist.bytecode.ParameterAnnotationsAttribute:
    java.lang.String visibleTag -> visibleTag
    java.lang.String invisibleTag -> invisibleTag
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    int numParameters() -> numParameters
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    javassist.bytecode.annotation.Annotation[][] getAnnotations() -> getAnnotations
    void setAnnotations(javassist.bytecode.annotation.Annotation[][]) -> setAnnotations
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
    java.lang.String toString() -> toString
javassist.bytecode.SignatureAttribute -> javassist.bytecode.SignatureAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    java.lang.String getSignature() -> getSignature
    void setSignature(java.lang.String) -> setSignature
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    java.lang.String renameClass(java.lang.String,java.lang.String,java.lang.String) -> renameClass
    java.lang.String renameClass(java.lang.String,java.util.Map) -> renameClass
    boolean isNamePart(int) -> isNamePart
    javassist.bytecode.SignatureAttribute$ClassSignature toClassSignature(java.lang.String) -> toClassSignature
    javassist.bytecode.SignatureAttribute$MethodSignature toMethodSignature(java.lang.String) -> toMethodSignature
    javassist.bytecode.SignatureAttribute$ObjectType toFieldSignature(java.lang.String) -> toFieldSignature
    javassist.bytecode.SignatureAttribute$Type toTypeSignature(java.lang.String) -> toTypeSignature
    javassist.bytecode.SignatureAttribute$ClassSignature parseSig(java.lang.String) -> parseSig
    javassist.bytecode.SignatureAttribute$MethodSignature parseMethodSig(java.lang.String) -> parseMethodSig
    javassist.bytecode.SignatureAttribute$TypeParameter[] parseTypeParams(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseTypeParams
    javassist.bytecode.SignatureAttribute$ObjectType parseObjectType(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor,boolean) -> parseObjectType
    javassist.bytecode.SignatureAttribute$ClassType parseClassType(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseClassType
    javassist.bytecode.SignatureAttribute$ClassType parseClassType2(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor,javassist.bytecode.SignatureAttribute$ClassType) -> parseClassType2
    javassist.bytecode.SignatureAttribute$TypeArgument[] parseTypeArgs(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseTypeArgs
    javassist.bytecode.SignatureAttribute$ObjectType parseArray(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseArray
    javassist.bytecode.SignatureAttribute$Type parseType(java.lang.String,javassist.bytecode.SignatureAttribute$Cursor) -> parseType
    javassist.bytecode.BadBytecode error(java.lang.String) -> error
    javassist.bytecode.BadBytecode access$000(java.lang.String) -> access$000
javassist.bytecode.SignatureAttribute$1 -> javassist.bytecode.SignatureAttribute$1:
javassist.bytecode.SignatureAttribute$ArrayType -> javassist.bytecode.SignatureAttribute$ArrayType:
    int dim -> dim
    javassist.bytecode.SignatureAttribute$Type componentType -> componentType
    void <init>(int,javassist.bytecode.SignatureAttribute$Type) -> <init>
    int getDimension() -> getDimension
    javassist.bytecode.SignatureAttribute$Type getComponentType() -> getComponentType
    java.lang.String toString() -> toString
    void encode(java.lang.StringBuffer) -> encode
javassist.bytecode.SignatureAttribute$BaseType -> javassist.bytecode.SignatureAttribute$BaseType:
    char descriptor -> descriptor
    void <init>(char) -> <init>
    void <init>(java.lang.String) -> <init>
    char getDescriptor() -> getDescriptor
    javassist.CtClass getCtlass() -> getCtlass
    java.lang.String toString() -> toString
    void encode(java.lang.StringBuffer) -> encode
javassist.bytecode.SignatureAttribute$ClassSignature -> javassist.bytecode.SignatureAttribute$ClassSignature:
    javassist.bytecode.SignatureAttribute$TypeParameter[] params -> params
    javassist.bytecode.SignatureAttribute$ClassType superClass -> superClass
    javassist.bytecode.SignatureAttribute$ClassType[] interfaces -> interfaces
    void <init>(javassist.bytecode.SignatureAttribute$TypeParameter[],javassist.bytecode.SignatureAttribute$ClassType,javassist.bytecode.SignatureAttribute$ClassType[]) -> <init>
    void <init>(javassist.bytecode.SignatureAttribute$TypeParameter[]) -> <init>
    javassist.bytecode.SignatureAttribute$TypeParameter[] getParameters() -> getParameters
    javassist.bytecode.SignatureAttribute$ClassType getSuperClass() -> getSuperClass
    javassist.bytecode.SignatureAttribute$ClassType[] getInterfaces() -> getInterfaces
    java.lang.String toString() -> toString
    java.lang.String encode() -> encode
javassist.bytecode.SignatureAttribute$ClassType -> javassist.bytecode.SignatureAttribute$ClassType:
    java.lang.String name -> name
    javassist.bytecode.SignatureAttribute$TypeArgument[] arguments -> arguments
    javassist.bytecode.SignatureAttribute$ClassType OBJECT -> OBJECT
    javassist.bytecode.SignatureAttribute$ClassType make(java.lang.String,int,int,javassist.bytecode.SignatureAttribute$TypeArgument[],javassist.bytecode.SignatureAttribute$ClassType) -> make
    void <init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute$TypeArgument[]) -> <init>
    void <init>(java.lang.String,javassist.bytecode.SignatureAttribute$TypeArgument[]) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    javassist.bytecode.SignatureAttribute$TypeArgument[] getTypeArguments() -> getTypeArguments
    javassist.bytecode.SignatureAttribute$ClassType getDeclaringClass() -> getDeclaringClass
    java.lang.String toString() -> toString
    java.lang.String toString2(java.lang.StringBuffer) -> toString2
    java.lang.String jvmTypeName() -> jvmTypeName
    void encode(java.lang.StringBuffer) -> encode
    void encode2(java.lang.StringBuffer) -> encode2
    void <clinit>() -> <clinit>
javassist.bytecode.SignatureAttribute$Cursor -> javassist.bytecode.SignatureAttribute$Cursor:
    int position -> position
    void <init>() -> <init>
    int indexOf(java.lang.String,int) -> indexOf
    void <init>(javassist.bytecode.SignatureAttribute$1) -> <init>
javassist.bytecode.SignatureAttribute$MethodSignature -> javassist.bytecode.SignatureAttribute$MethodSignature:
    javassist.bytecode.SignatureAttribute$TypeParameter[] typeParams -> typeParams
    javassist.bytecode.SignatureAttribute$Type[] params -> params
    javassist.bytecode.SignatureAttribute$Type retType -> retType
    javassist.bytecode.SignatureAttribute$ObjectType[] exceptions -> exceptions
    void <init>(javassist.bytecode.SignatureAttribute$TypeParameter[],javassist.bytecode.SignatureAttribute$Type[],javassist.bytecode.SignatureAttribute$Type,javassist.bytecode.SignatureAttribute$ObjectType[]) -> <init>
    javassist.bytecode.SignatureAttribute$TypeParameter[] getTypeParameters() -> getTypeParameters
    javassist.bytecode.SignatureAttribute$Type[] getParameterTypes() -> getParameterTypes
    javassist.bytecode.SignatureAttribute$Type getReturnType() -> getReturnType
    javassist.bytecode.SignatureAttribute$ObjectType[] getExceptionTypes() -> getExceptionTypes
    java.lang.String toString() -> toString
    java.lang.String encode() -> encode
javassist.bytecode.SignatureAttribute$NestedClassType -> javassist.bytecode.SignatureAttribute$NestedClassType:
    javassist.bytecode.SignatureAttribute$ClassType parent -> parent
    void <init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute$TypeArgument[],javassist.bytecode.SignatureAttribute$ClassType) -> <init>
    void <init>(javassist.bytecode.SignatureAttribute$ClassType,java.lang.String,javassist.bytecode.SignatureAttribute$TypeArgument[]) -> <init>
    javassist.bytecode.SignatureAttribute$ClassType getDeclaringClass() -> getDeclaringClass
javassist.bytecode.SignatureAttribute$ObjectType -> javassist.bytecode.SignatureAttribute$ObjectType:
    void <init>() -> <init>
    java.lang.String encode() -> encode
javassist.bytecode.SignatureAttribute$Type -> javassist.bytecode.SignatureAttribute$Type:
    void <init>() -> <init>
    void encode(java.lang.StringBuffer) -> encode
    void toString(java.lang.StringBuffer,javassist.bytecode.SignatureAttribute$Type[]) -> toString
    java.lang.String jvmTypeName() -> jvmTypeName
javassist.bytecode.SignatureAttribute$TypeArgument -> javassist.bytecode.SignatureAttribute$TypeArgument:
    javassist.bytecode.SignatureAttribute$ObjectType arg -> arg
    char wildcard -> wildcard
    void <init>(javassist.bytecode.SignatureAttribute$ObjectType,char) -> <init>
    void <init>(javassist.bytecode.SignatureAttribute$ObjectType) -> <init>
    void <init>() -> <init>
    javassist.bytecode.SignatureAttribute$TypeArgument subclassOf(javassist.bytecode.SignatureAttribute$ObjectType) -> subclassOf
    javassist.bytecode.SignatureAttribute$TypeArgument superOf(javassist.bytecode.SignatureAttribute$ObjectType) -> superOf
    char getKind() -> getKind
    boolean isWildcard() -> isWildcard
    javassist.bytecode.SignatureAttribute$ObjectType getType() -> getType
    java.lang.String toString() -> toString
    void encode(java.lang.StringBuffer,javassist.bytecode.SignatureAttribute$TypeArgument[]) -> encode
javassist.bytecode.SignatureAttribute$TypeParameter -> javassist.bytecode.SignatureAttribute$TypeParameter:
    java.lang.String name -> name
    javassist.bytecode.SignatureAttribute$ObjectType superClass -> superClass
    javassist.bytecode.SignatureAttribute$ObjectType[] superInterfaces -> superInterfaces
    void <init>(java.lang.String,int,int,javassist.bytecode.SignatureAttribute$ObjectType,javassist.bytecode.SignatureAttribute$ObjectType[]) -> <init>
    void <init>(java.lang.String,javassist.bytecode.SignatureAttribute$ObjectType,javassist.bytecode.SignatureAttribute$ObjectType[]) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    javassist.bytecode.SignatureAttribute$ObjectType getClassBound() -> getClassBound
    javassist.bytecode.SignatureAttribute$ObjectType[] getInterfaceBound() -> getInterfaceBound
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuffer,javassist.bytecode.SignatureAttribute$TypeParameter[]) -> toString
    void encode(java.lang.StringBuffer) -> encode
javassist.bytecode.SignatureAttribute$TypeVariable -> javassist.bytecode.SignatureAttribute$TypeVariable:
    java.lang.String name -> name
    void <init>(java.lang.String,int,int) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
    void encode(java.lang.StringBuffer) -> encode
javassist.bytecode.SourceFileAttribute -> javassist.bytecode.SourceFileAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool,java.lang.String) -> <init>
    java.lang.String getFileName() -> getFileName
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.StackMap -> javassist.bytecode.StackMap:
    java.lang.String tag -> tag
    int TOP -> TOP
    int INTEGER -> INTEGER
    int FLOAT -> FLOAT
    int DOUBLE -> DOUBLE
    int LONG -> LONG
    int NULL -> NULL
    int THIS -> THIS
    int OBJECT -> OBJECT
    int UNINIT -> UNINIT
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    int numOfEntries() -> numOfEntries
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void insertLocal(int,int,int) -> insertLocal
    void shiftPc(int,int,boolean) -> shiftPc
    void shiftForSwitch(int,int) -> shiftForSwitch
    void removeNew(int) -> removeNew
    void print(java.io.PrintWriter) -> print
javassist.bytecode.StackMap$Copier -> javassist.bytecode.StackMap$Copier:
    byte[] dest -> dest
    javassist.bytecode.ConstPool srcCp -> srcCp
    javassist.bytecode.ConstPool destCp -> destCp
    java.util.Map classnames -> classnames
    void <init>(javassist.bytecode.StackMap,javassist.bytecode.ConstPool,java.util.Map) -> <init>
    void visit() -> visit
    int locals(int,int,int) -> locals
    int typeInfoArray(int,int,int,boolean) -> typeInfoArray
    void typeInfo(int,byte) -> typeInfo
    void objectVariable(int,int) -> objectVariable
    void uninitialized(int,int) -> uninitialized
    javassist.bytecode.StackMap getStackMap() -> getStackMap
javassist.bytecode.StackMap$InsertLocal -> javassist.bytecode.StackMap$InsertLocal:
    int varIndex -> varIndex
    int varTag -> varTag
    int varData -> varData
    void <init>(javassist.bytecode.StackMap,int,int,int) -> <init>
    int typeInfoArray(int,int,int,boolean) -> typeInfoArray
    void writeVarTypeInfo() -> writeVarTypeInfo
javassist.bytecode.StackMap$NewRemover -> javassist.bytecode.StackMap$NewRemover:
    int posOfNew -> posOfNew
    void <init>(javassist.bytecode.StackMap,int) -> <init>
    int stack(int,int,int) -> stack
    int stackTypeInfoArray(int,int,int) -> stackTypeInfoArray
javassist.bytecode.StackMap$Printer -> javassist.bytecode.StackMap$Printer:
    java.io.PrintWriter writer -> writer
    void <init>(javassist.bytecode.StackMap,java.io.PrintWriter) -> <init>
    void print() -> print
    int locals(int,int,int) -> locals
javassist.bytecode.StackMap$Shifter -> javassist.bytecode.StackMap$Shifter:
    int where -> where
    int gap -> gap
    boolean exclusive -> exclusive
    void <init>(javassist.bytecode.StackMap,int,int,boolean) -> <init>
    int locals(int,int,int) -> locals
    void uninitialized(int,int) -> uninitialized
javassist.bytecode.StackMap$SimpleCopy -> javassist.bytecode.StackMap$SimpleCopy:
    javassist.bytecode.StackMap$Writer writer -> writer
    void <init>(javassist.bytecode.StackMap) -> <init>
    byte[] doit() -> doit
    void visit() -> visit
    int locals(int,int,int) -> locals
    int typeInfoArray(int,int,int,boolean) -> typeInfoArray
    void typeInfo(int,byte) -> typeInfo
    void objectVariable(int,int) -> objectVariable
    void uninitialized(int,int) -> uninitialized
javassist.bytecode.StackMap$SwitchShifter -> javassist.bytecode.StackMap$SwitchShifter:
    int where -> where
    int gap -> gap
    void <init>(javassist.bytecode.StackMap,int,int) -> <init>
    int locals(int,int,int) -> locals
javassist.bytecode.StackMap$Walker -> javassist.bytecode.StackMap$Walker:
    byte[] info -> info
    void <init>(javassist.bytecode.StackMap) -> <init>
    void visit() -> visit
    int locals(int,int,int) -> locals
    int stack(int,int,int) -> stack
    int typeInfoArray(int,int,int,boolean) -> typeInfoArray
    int typeInfoArray2(int,int) -> typeInfoArray2
    void typeInfo(int,byte) -> typeInfo
    void objectVariable(int,int) -> objectVariable
    void uninitialized(int,int) -> uninitialized
javassist.bytecode.StackMap$Writer -> javassist.bytecode.StackMap$Writer:
    java.io.ByteArrayOutputStream output -> output
    void <init>() -> <init>
    byte[] toByteArray() -> toByteArray
    javassist.bytecode.StackMap toStackMap(javassist.bytecode.ConstPool) -> toStackMap
    void writeVerifyTypeInfo(int,int) -> writeVerifyTypeInfo
    void write16bit(int) -> write16bit
javassist.bytecode.StackMapTable -> javassist.bytecode.StackMapTable:
    java.lang.String tag -> tag
    int TOP -> TOP
    int INTEGER -> INTEGER
    int FLOAT -> FLOAT
    int DOUBLE -> DOUBLE
    int LONG -> LONG
    int NULL -> NULL
    int THIS -> THIS
    int OBJECT -> OBJECT
    int UNINIT -> UNINIT
    void <init>(javassist.bytecode.ConstPool,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void insertLocal(int,int,int) -> insertLocal
    int typeTagOf(char) -> typeTagOf
    void println(java.io.PrintWriter) -> println
    void println(java.io.PrintStream) -> println
    void shiftPc(int,int,boolean) -> shiftPc
    void shiftForSwitch(int,int) -> shiftForSwitch
    void removeNew(int) -> removeNew
javassist.bytecode.StackMapTable$Copier -> javassist.bytecode.StackMapTable$Copier:
    javassist.bytecode.ConstPool srcPool -> srcPool
    javassist.bytecode.ConstPool destPool -> destPool
    java.util.Map classnames -> classnames
    void <init>(javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map) -> <init>
    int copyData(int,int) -> copyData
    int[] copyData(int[],int[]) -> copyData
javassist.bytecode.StackMapTable$InsertLocal -> javassist.bytecode.StackMapTable$InsertLocal:
    int varIndex -> varIndex
    int varTag -> varTag
    int varData -> varData
    void <init>(byte[],int,int,int) -> <init>
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
javassist.bytecode.StackMapTable$NewRemover -> javassist.bytecode.StackMapTable$NewRemover:
    int posOfNew -> posOfNew
    void <init>(byte[],int) -> <init>
    void sameLocals(int,int,int,int) -> sameLocals
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
javassist.bytecode.StackMapTable$OffsetShifter -> javassist.bytecode.StackMapTable$OffsetShifter:
    int where -> where
    int gap -> gap
    void <init>(javassist.bytecode.StackMapTable,int,int) -> <init>
    void objectOrUninitialized(int,int,int) -> objectOrUninitialized
javassist.bytecode.StackMapTable$Printer -> javassist.bytecode.StackMapTable$Printer:
    java.io.PrintWriter writer -> writer
    int offset -> offset
    void print(javassist.bytecode.StackMapTable,java.io.PrintWriter) -> print
    void <init>(byte[],java.io.PrintWriter) -> <init>
    void sameFrame(int,int) -> sameFrame
    void sameLocals(int,int,int,int) -> sameLocals
    void chopFrame(int,int,int) -> chopFrame
    void appendFrame(int,int,int[],int[]) -> appendFrame
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
    void printTypeInfo(int,int) -> printTypeInfo
javassist.bytecode.StackMapTable$RuntimeCopyException -> javassist.bytecode.StackMapTable$RuntimeCopyException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
javassist.bytecode.StackMapTable$Shifter -> javassist.bytecode.StackMapTable$Shifter:
    javassist.bytecode.StackMapTable stackMap -> stackMap
    int where -> where
    int gap -> gap
    int position -> position
    byte[] updatedInfo -> updatedInfo
    boolean exclusive -> exclusive
    void <init>(javassist.bytecode.StackMapTable,int,int,boolean) -> <init>
    void doit() -> doit
    void sameFrame(int,int) -> sameFrame
    void sameLocals(int,int,int,int) -> sameLocals
    void update(int,int,int,int) -> update
    byte[] insertGap(byte[],int,int) -> insertGap
    void chopFrame(int,int,int) -> chopFrame
    void appendFrame(int,int,int[],int[]) -> appendFrame
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
    void update(int,int) -> update
javassist.bytecode.StackMapTable$SimpleCopy -> javassist.bytecode.StackMapTable$SimpleCopy:
    javassist.bytecode.StackMapTable$Writer writer -> writer
    void <init>(byte[]) -> <init>
    byte[] doit() -> doit
    void sameFrame(int,int) -> sameFrame
    void sameLocals(int,int,int,int) -> sameLocals
    void chopFrame(int,int,int) -> chopFrame
    void appendFrame(int,int,int[],int[]) -> appendFrame
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
    int copyData(int,int) -> copyData
    int[] copyData(int[],int[]) -> copyData
javassist.bytecode.StackMapTable$SwitchShifter -> javassist.bytecode.StackMapTable$SwitchShifter:
    void <init>(javassist.bytecode.StackMapTable,int,int) -> <init>
    void update(int,int,int,int) -> update
    byte[] deleteGap(byte[],int,int) -> deleteGap
    void update(int,int) -> update
javassist.bytecode.StackMapTable$Walker -> javassist.bytecode.StackMapTable$Walker:
    byte[] info -> info
    int numOfEntries -> numOfEntries
    void <init>(javassist.bytecode.StackMapTable) -> <init>
    void <init>(byte[]) -> <init>
    int size() -> size
    void parse() -> parse
    int stackMapFrames(int,int) -> stackMapFrames
    void sameFrame(int,int) -> sameFrame
    int sameLocals(int,int) -> sameLocals
    void sameLocals(int,int,int,int) -> sameLocals
    void chopFrame(int,int,int) -> chopFrame
    int appendFrame(int,int) -> appendFrame
    void appendFrame(int,int,int[],int[]) -> appendFrame
    int fullFrame(int) -> fullFrame
    void fullFrame(int,int,int[],int[],int[],int[]) -> fullFrame
    int verifyTypeInfo(int,int,int[],int[]) -> verifyTypeInfo
    void objectOrUninitialized(int,int,int) -> objectOrUninitialized
javassist.bytecode.StackMapTable$Writer -> javassist.bytecode.StackMapTable$Writer:
    java.io.ByteArrayOutputStream output -> output
    int numOfEntries -> numOfEntries
    void <init>(int) -> <init>
    byte[] toByteArray() -> toByteArray
    javassist.bytecode.StackMapTable toStackMapTable(javassist.bytecode.ConstPool) -> toStackMapTable
    void sameFrame(int) -> sameFrame
    void sameLocals(int,int,int) -> sameLocals
    void chopFrame(int,int) -> chopFrame
    void appendFrame(int,int[],int[]) -> appendFrame
    void fullFrame(int,int[],int[],int[],int[]) -> fullFrame
    void writeTypeInfo(int,int) -> writeTypeInfo
    void write16(int) -> write16
javassist.bytecode.StringInfo -> javassist.bytecode.StringInfo:
    int tag -> tag
    int string -> string
    void <init>(int,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.SyntheticAttribute -> javassist.bytecode.SyntheticAttribute:
    java.lang.String tag -> tag
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
javassist.bytecode.TypeAnnotationsAttribute -> javassist.bytecode.TypeAnnotationsAttribute:
    java.lang.String visibleTag -> visibleTag
    java.lang.String invisibleTag -> invisibleTag
    void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[]) -> <init>
    void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream) -> <init>
    int numAnnotations() -> numAnnotations
    javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map) -> copy
    void renameClass(java.lang.String,java.lang.String) -> renameClass
    void renameClass(java.util.Map) -> renameClass
    void getRefClasses(java.util.Map) -> getRefClasses
javassist.bytecode.TypeAnnotationsAttribute$Copier -> javassist.bytecode.TypeAnnotationsAttribute$Copier:
    javassist.bytecode.TypeAnnotationsAttribute$SubCopier sub -> sub
    void <init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> <init>
    int annotationArray(int,int) -> annotationArray
javassist.bytecode.TypeAnnotationsAttribute$Renamer -> javassist.bytecode.TypeAnnotationsAttribute$Renamer:
    javassist.bytecode.TypeAnnotationsAttribute$SubWalker sub -> sub
    void <init>(byte[],javassist.bytecode.ConstPool,java.util.Map) -> <init>
    int annotationArray(int,int) -> annotationArray
javassist.bytecode.TypeAnnotationsAttribute$SubCopier -> javassist.bytecode.TypeAnnotationsAttribute$SubCopier:
    javassist.bytecode.ConstPool srcPool -> srcPool
    javassist.bytecode.ConstPool destPool -> destPool
    java.util.Map classnames -> classnames
    javassist.bytecode.annotation.TypeAnnotationsWriter writer -> writer
    void <init>(byte[],javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map,javassist.bytecode.annotation.TypeAnnotationsWriter) -> <init>
    void typeParameterTarget(int,int,int) -> typeParameterTarget
    void supertypeTarget(int,int) -> supertypeTarget
    void typeParameterBoundTarget(int,int,int,int) -> typeParameterBoundTarget
    void emptyTarget(int,int) -> emptyTarget
    void formalParameterTarget(int,int) -> formalParameterTarget
    void throwsTarget(int,int) -> throwsTarget
    int localvarTarget(int,int,int) -> localvarTarget
    void localvarTarget(int,int,int,int,int) -> localvarTarget
    void catchTarget(int,int) -> catchTarget
    void offsetTarget(int,int,int) -> offsetTarget
    void typeArgumentTarget(int,int,int,int) -> typeArgumentTarget
    int typePath(int,int) -> typePath
    void typePath(int,int,int) -> typePath
javassist.bytecode.TypeAnnotationsAttribute$SubWalker -> javassist.bytecode.TypeAnnotationsAttribute$SubWalker:
    byte[] info -> info
    void <init>(byte[]) -> <init>
    int targetInfo(int,int) -> targetInfo
    void typeParameterTarget(int,int,int) -> typeParameterTarget
    void supertypeTarget(int,int) -> supertypeTarget
    void typeParameterBoundTarget(int,int,int,int) -> typeParameterBoundTarget
    void emptyTarget(int,int) -> emptyTarget
    void formalParameterTarget(int,int) -> formalParameterTarget
    void throwsTarget(int,int) -> throwsTarget
    int localvarTarget(int,int,int) -> localvarTarget
    void localvarTarget(int,int,int,int,int) -> localvarTarget
    void catchTarget(int,int) -> catchTarget
    void offsetTarget(int,int,int) -> offsetTarget
    void typeArgumentTarget(int,int,int,int) -> typeArgumentTarget
    int typePath(int) -> typePath
    int typePath(int,int) -> typePath
    void typePath(int,int,int) -> typePath
javassist.bytecode.TypeAnnotationsAttribute$TAWalker -> javassist.bytecode.TypeAnnotationsAttribute$TAWalker:
    javassist.bytecode.TypeAnnotationsAttribute$SubWalker subWalker -> subWalker
    void <init>(byte[]) -> <init>
    int annotationArray(int,int) -> annotationArray
javassist.bytecode.Utf8Info -> javassist.bytecode.Utf8Info:
    int tag -> tag
    java.lang.String string -> string
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.io.DataInputStream,int) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getTag() -> getTag
    int copy(javassist.bytecode.ConstPool,javassist.bytecode.ConstPool,java.util.Map) -> copy
    void write(java.io.DataOutputStream) -> write
    void print(java.io.PrintWriter) -> print
javassist.bytecode.analysis.Analyzer -> javassist.bytecode.analysis.Analyzer:
    javassist.bytecode.analysis.SubroutineScanner scanner -> scanner
    javassist.CtClass clazz -> clazz
    javassist.bytecode.analysis.Analyzer$ExceptionInfo[] exceptions -> exceptions
    javassist.bytecode.analysis.Frame[] frames -> frames
    javassist.bytecode.analysis.Subroutine[] subroutines -> subroutines
    void <init>() -> <init>
    javassist.bytecode.analysis.Frame[] analyze(javassist.CtClass,javassist.bytecode.MethodInfo) -> analyze
    javassist.bytecode.analysis.Frame[] analyze(javassist.CtMethod) -> analyze
    void analyzeNextEntry(javassist.bytecode.MethodInfo,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.IntQueue,javassist.bytecode.analysis.Executor) -> analyzeNextEntry
    javassist.bytecode.analysis.Analyzer$ExceptionInfo[] buildExceptionInfo(javassist.bytecode.MethodInfo) -> buildExceptionInfo
    javassist.bytecode.analysis.Frame firstFrame(javassist.bytecode.MethodInfo,int,int) -> firstFrame
    int getNext(javassist.bytecode.CodeIterator,int,int) -> getNext
    int lookAhead(javassist.bytecode.CodeIterator,int) -> lookAhead
    void merge(javassist.bytecode.analysis.IntQueue,javassist.bytecode.analysis.Frame,int) -> merge
    void mergeExceptionHandlers(javassist.bytecode.analysis.IntQueue,javassist.bytecode.MethodInfo,int,javassist.bytecode.analysis.Frame) -> mergeExceptionHandlers
    void mergeJsr(javassist.bytecode.analysis.IntQueue,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine,int,int) -> mergeJsr
    void mergeLookupSwitch(javassist.bytecode.analysis.IntQueue,int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame) -> mergeLookupSwitch
    void mergeRet(javassist.bytecode.analysis.IntQueue,javassist.bytecode.CodeIterator,int,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> mergeRet
    void mergeTableSwitch(javassist.bytecode.analysis.IntQueue,int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame) -> mergeTableSwitch
    javassist.bytecode.analysis.Type zeroExtend(javassist.bytecode.analysis.Type) -> zeroExtend
javassist.bytecode.analysis.Analyzer$1 -> javassist.bytecode.analysis.Analyzer$1:
javassist.bytecode.analysis.Analyzer$ExceptionInfo -> javassist.bytecode.analysis.Analyzer$ExceptionInfo:
    int end -> end
    int handler -> handler
    int start -> start
    javassist.bytecode.analysis.Type type -> type
    void <init>(int,int,int,javassist.bytecode.analysis.Type) -> <init>
    void <init>(int,int,int,javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Analyzer$1) -> <init>
    int access$100(javassist.bytecode.analysis.Analyzer$ExceptionInfo) -> access$100
    int access$200(javassist.bytecode.analysis.Analyzer$ExceptionInfo) -> access$200
    javassist.bytecode.analysis.Type access$300(javassist.bytecode.analysis.Analyzer$ExceptionInfo) -> access$300
    int access$400(javassist.bytecode.analysis.Analyzer$ExceptionInfo) -> access$400
javassist.bytecode.analysis.ControlFlow -> javassist.bytecode.analysis.ControlFlow:
    javassist.CtClass clazz -> clazz
    javassist.bytecode.MethodInfo methodInfo -> methodInfo
    javassist.bytecode.analysis.ControlFlow$Block[] basicBlocks -> basicBlocks
    javassist.bytecode.analysis.Frame[] frames -> frames
    void <init>(javassist.CtMethod) -> <init>
    void <init>(javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.bytecode.analysis.ControlFlow$Block[] basicBlocks() -> basicBlocks
    javassist.bytecode.analysis.Frame frameAt(int) -> frameAt
    javassist.bytecode.analysis.ControlFlow$Node[] dominatorTree() -> dominatorTree
    javassist.bytecode.analysis.ControlFlow$Node[] postDominatorTree() -> postDominatorTree
    javassist.bytecode.MethodInfo access$000(javassist.bytecode.analysis.ControlFlow) -> access$000
javassist.bytecode.analysis.ControlFlow$1 -> javassist.bytecode.analysis.ControlFlow$1:
    javassist.bytecode.analysis.ControlFlow this$0 -> this$0
    void <init>(javassist.bytecode.analysis.ControlFlow) -> <init>
    javassist.bytecode.stackmap.BasicBlock makeBlock(int) -> makeBlock
    javassist.bytecode.stackmap.BasicBlock[] makeArray(int) -> makeArray
javassist.bytecode.analysis.ControlFlow$2 -> javassist.bytecode.analysis.ControlFlow$2:
    javassist.bytecode.analysis.ControlFlow this$0 -> this$0
    void <init>(javassist.bytecode.analysis.ControlFlow,javassist.bytecode.analysis.ControlFlow$Node[]) -> <init>
    javassist.bytecode.stackmap.BasicBlock[] exits(javassist.bytecode.analysis.ControlFlow$Node) -> exits
    javassist.bytecode.stackmap.BasicBlock[] entrances(javassist.bytecode.analysis.ControlFlow$Node) -> entrances
javassist.bytecode.analysis.ControlFlow$3 -> javassist.bytecode.analysis.ControlFlow$3:
    javassist.bytecode.analysis.ControlFlow this$0 -> this$0
    void <init>(javassist.bytecode.analysis.ControlFlow,javassist.bytecode.analysis.ControlFlow$Node[]) -> <init>
    javassist.bytecode.stackmap.BasicBlock[] exits(javassist.bytecode.analysis.ControlFlow$Node) -> exits
    javassist.bytecode.stackmap.BasicBlock[] entrances(javassist.bytecode.analysis.ControlFlow$Node) -> entrances
javassist.bytecode.analysis.ControlFlow$Access -> javassist.bytecode.analysis.ControlFlow$Access:
    javassist.bytecode.analysis.ControlFlow$Node[] all -> all
    void <init>(javassist.bytecode.analysis.ControlFlow$Node[]) -> <init>
    javassist.bytecode.analysis.ControlFlow$Node node(javassist.bytecode.stackmap.BasicBlock) -> node
    javassist.bytecode.stackmap.BasicBlock[] exits(javassist.bytecode.analysis.ControlFlow$Node) -> exits
    javassist.bytecode.stackmap.BasicBlock[] entrances(javassist.bytecode.analysis.ControlFlow$Node) -> entrances
javassist.bytecode.analysis.ControlFlow$Block -> javassist.bytecode.analysis.ControlFlow$Block:
    java.lang.Object clientData -> clientData
    int index -> index
    javassist.bytecode.MethodInfo method -> method
    javassist.bytecode.analysis.ControlFlow$Block[] entrances -> entrances
    void <init>(int,javassist.bytecode.MethodInfo) -> <init>
    void toString2(java.lang.StringBuffer) -> toString2
    javassist.bytecode.stackmap.BasicBlock[] getExit() -> getExit
    int index() -> index
    int position() -> position
    int length() -> length
    int incomings() -> incomings
    javassist.bytecode.analysis.ControlFlow$Block incoming(int) -> incoming
    int exits() -> exits
    javassist.bytecode.analysis.ControlFlow$Block exit(int) -> exit
    javassist.bytecode.analysis.ControlFlow$Catcher[] catchers() -> catchers
javassist.bytecode.analysis.ControlFlow$Catcher -> javassist.bytecode.analysis.ControlFlow$Catcher:
    javassist.bytecode.analysis.ControlFlow$Block node -> node
    int typeIndex -> typeIndex
    void <init>(javassist.bytecode.stackmap.BasicBlock$Catch) -> <init>
    javassist.bytecode.analysis.ControlFlow$Block block() -> block
    java.lang.String type() -> type
    javassist.bytecode.analysis.ControlFlow$Block access$100(javassist.bytecode.analysis.ControlFlow$Catcher) -> access$100
javassist.bytecode.analysis.ControlFlow$Node -> javassist.bytecode.analysis.ControlFlow$Node:
    javassist.bytecode.analysis.ControlFlow$Block block -> block
    javassist.bytecode.analysis.ControlFlow$Node parent -> parent
    javassist.bytecode.analysis.ControlFlow$Node[] children -> children
    void <init>(javassist.bytecode.analysis.ControlFlow$Block) -> <init>
    java.lang.String toString() -> toString
    javassist.bytecode.analysis.ControlFlow$Block block() -> block
    javassist.bytecode.analysis.ControlFlow$Node parent() -> parent
    int children() -> children
    javassist.bytecode.analysis.ControlFlow$Node child(int) -> child
    int makeDepth1stTree(javassist.bytecode.analysis.ControlFlow$Node,boolean[],int,int[],javassist.bytecode.analysis.ControlFlow$Access) -> makeDepth1stTree
    boolean makeDominatorTree(boolean[],int[],javassist.bytecode.analysis.ControlFlow$Access) -> makeDominatorTree
    javassist.bytecode.analysis.ControlFlow$Node getAncestor(javassist.bytecode.analysis.ControlFlow$Node,javassist.bytecode.analysis.ControlFlow$Node,int[]) -> getAncestor
    void setChildren(javassist.bytecode.analysis.ControlFlow$Node[]) -> setChildren
    javassist.bytecode.analysis.ControlFlow$Block access$200(javassist.bytecode.analysis.ControlFlow$Node) -> access$200
    void access$300(javassist.bytecode.analysis.ControlFlow$Node[]) -> access$300
javassist.bytecode.analysis.Executor -> javassist.bytecode.analysis.Executor:
    javassist.bytecode.ConstPool constPool -> constPool
    javassist.ClassPool classPool -> classPool
    javassist.bytecode.analysis.Type STRING_TYPE -> STRING_TYPE
    javassist.bytecode.analysis.Type CLASS_TYPE -> CLASS_TYPE
    javassist.bytecode.analysis.Type THROWABLE_TYPE -> THROWABLE_TYPE
    int lastPos -> lastPos
    void <init>(javassist.ClassPool,javassist.bytecode.ConstPool) -> <init>
    void execute(javassist.bytecode.MethodInfo,int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> execute
    javassist.bytecode.analysis.Type zeroExtend(javassist.bytecode.analysis.Type) -> zeroExtend
    void evalArrayLoad(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> evalArrayLoad
    void evalArrayStore(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> evalArrayStore
    void evalBinaryMath(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> evalBinaryMath
    void evalGetField(int,int,javassist.bytecode.analysis.Frame) -> evalGetField
    void evalInvokeIntfMethod(int,int,javassist.bytecode.analysis.Frame) -> evalInvokeIntfMethod
    void evalInvokeMethod(int,int,javassist.bytecode.analysis.Frame) -> evalInvokeMethod
    void evalInvokeDynamic(int,int,javassist.bytecode.analysis.Frame) -> evalInvokeDynamic
    void evalLDC(int,javassist.bytecode.analysis.Frame) -> evalLDC
    void evalLoad(javassist.bytecode.analysis.Type,int,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> evalLoad
    void evalNewArray(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame) -> evalNewArray
    void evalNewObjectArray(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame) -> evalNewObjectArray
    void evalPutField(int,int,javassist.bytecode.analysis.Frame) -> evalPutField
    void evalShift(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> evalShift
    void evalStore(javassist.bytecode.analysis.Type,int,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> evalStore
    void evalWide(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Frame,javassist.bytecode.analysis.Subroutine) -> evalWide
    javassist.bytecode.analysis.Type getType(java.lang.String) -> getType
    javassist.bytecode.analysis.Type[] paramTypesFromDesc(java.lang.String) -> paramTypesFromDesc
    javassist.bytecode.analysis.Type returnTypeFromDesc(java.lang.String) -> returnTypeFromDesc
    javassist.bytecode.analysis.Type simplePeek(javassist.bytecode.analysis.Frame) -> simplePeek
    javassist.bytecode.analysis.Type simplePop(javassist.bytecode.analysis.Frame) -> simplePop
    void simplePush(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> simplePush
    void access(int,javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Subroutine) -> access
    void simpleSetLocal(int,javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Frame) -> simpleSetLocal
    javassist.bytecode.analysis.Type resolveClassInfo(java.lang.String) -> resolveClassInfo
    javassist.bytecode.analysis.Type typeFromDesc(java.lang.String) -> typeFromDesc
    void verifyAssignable(javassist.bytecode.analysis.Type,javassist.bytecode.analysis.Type) -> verifyAssignable
javassist.bytecode.analysis.Frame -> javassist.bytecode.analysis.Frame:
    javassist.bytecode.analysis.Type[] locals -> locals
    javassist.bytecode.analysis.Type[] stack -> stack
    int top -> top
    boolean jsrMerged -> jsrMerged
    boolean retMerged -> retMerged
    void <init>(int,int) -> <init>
    javassist.bytecode.analysis.Type getLocal(int) -> getLocal
    void setLocal(int,javassist.bytecode.analysis.Type) -> setLocal
    javassist.bytecode.analysis.Type getStack(int) -> getStack
    void setStack(int,javassist.bytecode.analysis.Type) -> setStack
    void clearStack() -> clearStack
    int getTopIndex() -> getTopIndex
    int localsLength() -> localsLength
    javassist.bytecode.analysis.Type peek() -> peek
    javassist.bytecode.analysis.Type pop() -> pop
    void push(javassist.bytecode.analysis.Type) -> push
    javassist.bytecode.analysis.Frame copy() -> copy
    javassist.bytecode.analysis.Frame copyStack() -> copyStack
    boolean mergeStack(javassist.bytecode.analysis.Frame) -> mergeStack
    boolean merge(javassist.bytecode.analysis.Frame) -> merge
    java.lang.String toString() -> toString
    boolean isJsrMerged() -> isJsrMerged
    void setJsrMerged(boolean) -> setJsrMerged
    boolean isRetMerged() -> isRetMerged
    void setRetMerged(boolean) -> setRetMerged
javassist.bytecode.analysis.FramePrinter -> javassist.bytecode.analysis.FramePrinter:
    java.io.PrintStream stream -> stream
    void <init>(java.io.PrintStream) -> <init>
    void print(javassist.CtClass,java.io.PrintStream) -> print
    void print(javassist.CtClass) -> print
    java.lang.String getMethodString(javassist.CtMethod) -> getMethodString
    void print(javassist.CtMethod) -> print
    void printStack(javassist.bytecode.analysis.Frame) -> printStack
    void printLocals(javassist.bytecode.analysis.Frame) -> printLocals
    void addSpacing(int) -> addSpacing
javassist.bytecode.analysis.IntQueue -> javassist.bytecode.analysis.IntQueue:
    javassist.bytecode.analysis.IntQueue$Entry head -> head
    javassist.bytecode.analysis.IntQueue$Entry tail -> tail
    void <init>() -> <init>
    void add(int) -> add
    boolean isEmpty() -> isEmpty
    int take() -> take
javassist.bytecode.analysis.IntQueue$1 -> javassist.bytecode.analysis.IntQueue$1:
javassist.bytecode.analysis.IntQueue$Entry -> javassist.bytecode.analysis.IntQueue$Entry:
    javassist.bytecode.analysis.IntQueue$Entry next -> next
    int value -> value
    void <init>(int) -> <init>
    void <init>(int,javassist.bytecode.analysis.IntQueue$1) -> <init>
    javassist.bytecode.analysis.IntQueue$Entry access$102(javassist.bytecode.analysis.IntQueue$Entry,javassist.bytecode.analysis.IntQueue$Entry) -> access$102
    int access$200(javassist.bytecode.analysis.IntQueue$Entry) -> access$200
    javassist.bytecode.analysis.IntQueue$Entry access$100(javassist.bytecode.analysis.IntQueue$Entry) -> access$100
javassist.bytecode.analysis.MultiArrayType -> javassist.bytecode.analysis.MultiArrayType:
    javassist.bytecode.analysis.MultiType component -> component
    int dims -> dims
    void <init>(javassist.bytecode.analysis.MultiType,int) -> <init>
    javassist.CtClass getCtClass() -> getCtClass
    boolean popChanged() -> popChanged
    int getDimensions() -> getDimensions
    javassist.bytecode.analysis.Type getComponent() -> getComponent
    int getSize() -> getSize
    boolean isArray() -> isArray
    boolean isAssignableFrom(javassist.bytecode.analysis.Type) -> isAssignableFrom
    boolean isReference() -> isReference
    boolean isAssignableTo(javassist.bytecode.analysis.Type) -> isAssignableTo
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
javassist.bytecode.analysis.MultiType -> javassist.bytecode.analysis.MultiType:
    java.util.Map interfaces -> interfaces
    javassist.bytecode.analysis.Type resolved -> resolved
    javassist.bytecode.analysis.Type potentialClass -> potentialClass
    javassist.bytecode.analysis.MultiType mergeSource -> mergeSource
    boolean changed -> changed
    void <init>(java.util.Map) -> <init>
    void <init>(java.util.Map,javassist.bytecode.analysis.Type) -> <init>
    javassist.CtClass getCtClass() -> getCtClass
    javassist.bytecode.analysis.Type getComponent() -> getComponent
    int getSize() -> getSize
    boolean isArray() -> isArray
    boolean popChanged() -> popChanged
    boolean isAssignableFrom(javassist.bytecode.analysis.Type) -> isAssignableFrom
    boolean isAssignableTo(javassist.bytecode.analysis.Type) -> isAssignableTo
    void propogateState() -> propogateState
    void propogateResolved() -> propogateResolved
    boolean isReference() -> isReference
    java.util.Map getAllMultiInterfaces(javassist.bytecode.analysis.MultiType) -> getAllMultiInterfaces
    java.util.Map mergeMultiInterfaces(javassist.bytecode.analysis.MultiType,javassist.bytecode.analysis.MultiType) -> mergeMultiInterfaces
    java.util.Map mergeMultiAndSingle(javassist.bytecode.analysis.MultiType,javassist.bytecode.analysis.Type) -> mergeMultiAndSingle
    boolean inMergeSource(javassist.bytecode.analysis.MultiType) -> inMergeSource
    javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type) -> merge
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
javassist.bytecode.analysis.Subroutine -> javassist.bytecode.analysis.Subroutine:
    java.util.List callers -> callers
    java.util.Set access -> access
    int start -> start
    void <init>(int,int) -> <init>
    void addCaller(int) -> addCaller
    int start() -> start
    void access(int) -> access
    boolean isAccessed(int) -> isAccessed
    java.util.Collection accessed() -> accessed
    java.util.Collection callers() -> callers
    java.lang.String toString() -> toString
javassist.bytecode.analysis.SubroutineScanner -> javassist.bytecode.analysis.SubroutineScanner:
    javassist.bytecode.analysis.Subroutine[] subroutines -> subroutines
    java.util.Map subTable -> subTable
    java.util.Set done -> done
    void <init>() -> <init>
    javassist.bytecode.analysis.Subroutine[] scan(javassist.bytecode.MethodInfo) -> scan
    void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine) -> scan
    boolean scanOp(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine) -> scanOp
    void scanLookupSwitch(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine) -> scanLookupSwitch
    void scanTableSwitch(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine) -> scanTableSwitch
javassist.bytecode.analysis.Type -> javassist.bytecode.analysis.Type:
    javassist.CtClass clazz -> clazz
    boolean special -> special
    java.util.Map prims -> prims
    javassist.bytecode.analysis.Type DOUBLE -> DOUBLE
    javassist.bytecode.analysis.Type BOOLEAN -> BOOLEAN
    javassist.bytecode.analysis.Type LONG -> LONG
    javassist.bytecode.analysis.Type CHAR -> CHAR
    javassist.bytecode.analysis.Type BYTE -> BYTE
    javassist.bytecode.analysis.Type SHORT -> SHORT
    javassist.bytecode.analysis.Type INTEGER -> INTEGER
    javassist.bytecode.analysis.Type FLOAT -> FLOAT
    javassist.bytecode.analysis.Type VOID -> VOID
    javassist.bytecode.analysis.Type UNINIT -> UNINIT
    javassist.bytecode.analysis.Type RETURN_ADDRESS -> RETURN_ADDRESS
    javassist.bytecode.analysis.Type TOP -> TOP
    javassist.bytecode.analysis.Type BOGUS -> BOGUS
    javassist.bytecode.analysis.Type OBJECT -> OBJECT
    javassist.bytecode.analysis.Type SERIALIZABLE -> SERIALIZABLE
    javassist.bytecode.analysis.Type CLONEABLE -> CLONEABLE
    javassist.bytecode.analysis.Type THROWABLE -> THROWABLE
    javassist.bytecode.analysis.Type get(javassist.CtClass) -> get
    javassist.bytecode.analysis.Type lookupType(java.lang.String) -> lookupType
    void <init>(javassist.CtClass) -> <init>
    void <init>(javassist.CtClass,boolean) -> <init>
    boolean popChanged() -> popChanged
    int getSize() -> getSize
    javassist.CtClass getCtClass() -> getCtClass
    boolean isReference() -> isReference
    boolean isSpecial() -> isSpecial
    boolean isArray() -> isArray
    int getDimensions() -> getDimensions
    javassist.bytecode.analysis.Type getComponent() -> getComponent
    boolean isAssignableFrom(javassist.bytecode.analysis.Type) -> isAssignableFrom
    javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type) -> merge
    javassist.bytecode.analysis.Type getRootComponent(javassist.bytecode.analysis.Type) -> getRootComponent
    javassist.bytecode.analysis.Type createArray(javassist.bytecode.analysis.Type,int) -> createArray
    java.lang.String arrayName(java.lang.String,int) -> arrayName
    javassist.ClassPool getClassPool(javassist.bytecode.analysis.Type) -> getClassPool
    javassist.bytecode.analysis.Type mergeArray(javassist.bytecode.analysis.Type) -> mergeArray
    javassist.CtClass findCommonSuperClass(javassist.CtClass,javassist.CtClass) -> findCommonSuperClass
    javassist.bytecode.analysis.Type mergeClasses(javassist.bytecode.analysis.Type) -> mergeClasses
    java.util.Map findCommonInterfaces(javassist.bytecode.analysis.Type) -> findCommonInterfaces
    java.util.Map findExclusiveDeclaredInterfaces(javassist.bytecode.analysis.Type,javassist.CtClass) -> findExclusiveDeclaredInterfaces
    java.util.Map findCommonInterfaces(java.util.Map,java.util.Map) -> findCommonInterfaces
    java.util.Map getAllInterfaces(javassist.CtClass,java.util.Map) -> getAllInterfaces
    java.util.Map getDeclaredInterfaces(javassist.CtClass,java.util.Map) -> getDeclaredInterfaces
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean eq(javassist.CtClass,javassist.CtClass) -> eq
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
javassist.bytecode.analysis.Util -> javassist.bytecode.analysis.Util:
    void <init>() -> <init>
    int getJumpTarget(int,javassist.bytecode.CodeIterator) -> getJumpTarget
    boolean isJumpInstruction(int) -> isJumpInstruction
    boolean isGoto(int) -> isGoto
    boolean isJsr(int) -> isJsr
    boolean isReturn(int) -> isReturn
javassist.bytecode.annotation.Annotation -> javassist.bytecode.annotation.Annotation:
    javassist.bytecode.ConstPool pool -> pool
    int typeIndex -> typeIndex
    java.util.Map members -> members
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(java.lang.String,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,javassist.CtClass) -> <init>
    javassist.bytecode.annotation.MemberValue createMemberValue(javassist.bytecode.ConstPool,javassist.CtClass) -> createMemberValue
    void addMemberValue(int,javassist.bytecode.annotation.MemberValue) -> addMemberValue
    void addMemberValue(java.lang.String,javassist.bytecode.annotation.MemberValue) -> addMemberValue
    void addMemberValue(javassist.bytecode.annotation.Annotation$Pair) -> addMemberValue
    java.lang.String toString() -> toString
    java.lang.String getTypeName() -> getTypeName
    java.util.Set getMemberNames() -> getMemberNames
    javassist.bytecode.annotation.MemberValue getMemberValue(java.lang.String) -> getMemberValue
    java.lang.Object toAnnotationType(java.lang.ClassLoader,javassist.ClassPool) -> toAnnotationType
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
javassist.bytecode.annotation.Annotation$Pair -> javassist.bytecode.annotation.Annotation$Pair:
    int name -> name
    javassist.bytecode.annotation.MemberValue value -> value
    void <init>() -> <init>
javassist.bytecode.annotation.AnnotationImpl -> javassist.bytecode.annotation.AnnotationImpl:
    java.lang.String JDK_ANNOTATION_CLASS_NAME -> JDK_ANNOTATION_CLASS_NAME
    java.lang.reflect.Method JDK_ANNOTATION_TYPE_METHOD -> JDK_ANNOTATION_TYPE_METHOD
    javassist.bytecode.annotation.Annotation annotation -> annotation
    javassist.ClassPool pool -> pool
    java.lang.ClassLoader classLoader -> classLoader
    java.lang.Class annotationType -> annotationType
    int cachedHashCode -> cachedHashCode
    java.lang.Object make(java.lang.ClassLoader,java.lang.Class,javassist.ClassPool,javassist.bytecode.annotation.Annotation) -> make
    void <init>(javassist.bytecode.annotation.Annotation,javassist.ClassPool,java.lang.ClassLoader) -> <init>
    java.lang.String getTypeName() -> getTypeName
    java.lang.Class getAnnotationType() -> getAnnotationType
    javassist.bytecode.annotation.Annotation getAnnotation() -> getAnnotation
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    java.lang.Object getDefault(java.lang.String,java.lang.reflect.Method) -> getDefault
    int hashCode() -> hashCode
    boolean checkEquals(java.lang.Object) -> checkEquals
    int arrayHashCode(java.lang.Object) -> arrayHashCode
    void <clinit>() -> <clinit>
javassist.bytecode.annotation.AnnotationMemberValue -> javassist.bytecode.annotation.AnnotationMemberValue:
    javassist.bytecode.annotation.Annotation value -> value
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.annotation.Annotation,javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    javassist.bytecode.annotation.Annotation getValue() -> getValue
    void setValue(javassist.bytecode.annotation.Annotation) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.AnnotationsWriter -> javassist.bytecode.annotation.AnnotationsWriter:
    java.io.OutputStream output -> output
    javassist.bytecode.ConstPool pool -> pool
    void <init>(java.io.OutputStream,javassist.bytecode.ConstPool) -> <init>
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    void close() -> close
    void numParameters(int) -> numParameters
    void numAnnotations(int) -> numAnnotations
    void annotation(java.lang.String,int) -> annotation
    void annotation(int,int) -> annotation
    void memberValuePair(java.lang.String) -> memberValuePair
    void memberValuePair(int) -> memberValuePair
    void constValueIndex(boolean) -> constValueIndex
    void constValueIndex(byte) -> constValueIndex
    void constValueIndex(char) -> constValueIndex
    void constValueIndex(short) -> constValueIndex
    void constValueIndex(int) -> constValueIndex
    void constValueIndex(long) -> constValueIndex
    void constValueIndex(float) -> constValueIndex
    void constValueIndex(double) -> constValueIndex
    void constValueIndex(java.lang.String) -> constValueIndex
    void constValueIndex(int,int) -> constValueIndex
    void enumConstValue(java.lang.String,java.lang.String) -> enumConstValue
    void enumConstValue(int,int) -> enumConstValue
    void classInfoIndex(java.lang.String) -> classInfoIndex
    void classInfoIndex(int) -> classInfoIndex
    void annotationValue() -> annotationValue
    void arrayValue(int) -> arrayValue
    void write16bit(int) -> write16bit
javassist.bytecode.annotation.ArrayMemberValue -> javassist.bytecode.annotation.ArrayMemberValue:
    javassist.bytecode.annotation.MemberValue type -> type
    javassist.bytecode.annotation.MemberValue[] values -> values
    void <init>(javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.annotation.MemberValue,javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    javassist.bytecode.annotation.MemberValue getType() -> getType
    javassist.bytecode.annotation.MemberValue[] getValue() -> getValue
    void setValue(javassist.bytecode.annotation.MemberValue[]) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.BooleanMemberValue -> javassist.bytecode.annotation.BooleanMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(boolean,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    boolean getValue() -> getValue
    void setValue(boolean) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.ByteMemberValue -> javassist.bytecode.annotation.ByteMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(byte,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    byte getValue() -> getValue
    void setValue(byte) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.CharMemberValue -> javassist.bytecode.annotation.CharMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(char,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    char getValue() -> getValue
    void setValue(char) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.ClassMemberValue -> javassist.bytecode.annotation.ClassMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(java.lang.String,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.DoubleMemberValue -> javassist.bytecode.annotation.DoubleMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(double,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    double getValue() -> getValue
    void setValue(double) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.EnumMemberValue -> javassist.bytecode.annotation.EnumMemberValue:
    int typeIndex -> typeIndex
    int valueIndex -> valueIndex
    void <init>(int,int,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.FloatMemberValue -> javassist.bytecode.annotation.FloatMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(float,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    float getValue() -> getValue
    void setValue(float) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.IntegerMemberValue -> javassist.bytecode.annotation.IntegerMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool,int) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    int getValue() -> getValue
    void setValue(int) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.LongMemberValue -> javassist.bytecode.annotation.LongMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(long,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    long getValue() -> getValue
    void setValue(long) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.MemberValue -> javassist.bytecode.annotation.MemberValue:
    javassist.bytecode.ConstPool cp -> cp
    char tag -> tag
    void <init>(char,javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String) -> loadClass
    java.lang.String convertFromArray(java.lang.String) -> convertFromArray
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
javassist.bytecode.annotation.MemberValueVisitor -> javassist.bytecode.annotation.MemberValueVisitor:
    void visitAnnotationMemberValue(javassist.bytecode.annotation.AnnotationMemberValue) -> visitAnnotationMemberValue
    void visitArrayMemberValue(javassist.bytecode.annotation.ArrayMemberValue) -> visitArrayMemberValue
    void visitBooleanMemberValue(javassist.bytecode.annotation.BooleanMemberValue) -> visitBooleanMemberValue
    void visitByteMemberValue(javassist.bytecode.annotation.ByteMemberValue) -> visitByteMemberValue
    void visitCharMemberValue(javassist.bytecode.annotation.CharMemberValue) -> visitCharMemberValue
    void visitDoubleMemberValue(javassist.bytecode.annotation.DoubleMemberValue) -> visitDoubleMemberValue
    void visitEnumMemberValue(javassist.bytecode.annotation.EnumMemberValue) -> visitEnumMemberValue
    void visitFloatMemberValue(javassist.bytecode.annotation.FloatMemberValue) -> visitFloatMemberValue
    void visitIntegerMemberValue(javassist.bytecode.annotation.IntegerMemberValue) -> visitIntegerMemberValue
    void visitLongMemberValue(javassist.bytecode.annotation.LongMemberValue) -> visitLongMemberValue
    void visitShortMemberValue(javassist.bytecode.annotation.ShortMemberValue) -> visitShortMemberValue
    void visitStringMemberValue(javassist.bytecode.annotation.StringMemberValue) -> visitStringMemberValue
    void visitClassMemberValue(javassist.bytecode.annotation.ClassMemberValue) -> visitClassMemberValue
javassist.bytecode.annotation.NoSuchClassError -> javassist.bytecode.annotation.NoSuchClassError:
    long serialVersionUID -> serialVersionUID
    java.lang.String className -> className
    void <init>(java.lang.String,java.lang.Error) -> <init>
    java.lang.String getClassName() -> getClassName
javassist.bytecode.annotation.ShortMemberValue -> javassist.bytecode.annotation.ShortMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(short,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    short getValue() -> getValue
    void setValue(short) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.StringMemberValue -> javassist.bytecode.annotation.StringMemberValue:
    int valueIndex -> valueIndex
    void <init>(int,javassist.bytecode.ConstPool) -> <init>
    void <init>(java.lang.String,javassist.bytecode.ConstPool) -> <init>
    void <init>(javassist.bytecode.ConstPool) -> <init>
    java.lang.Object getValue(java.lang.ClassLoader,javassist.ClassPool,java.lang.reflect.Method) -> getValue
    java.lang.Class getType(java.lang.ClassLoader) -> getType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String toString() -> toString
    void write(javassist.bytecode.annotation.AnnotationsWriter) -> write
    void accept(javassist.bytecode.annotation.MemberValueVisitor) -> accept
javassist.bytecode.annotation.TypeAnnotationsWriter -> javassist.bytecode.annotation.TypeAnnotationsWriter:
    void <init>(java.io.OutputStream,javassist.bytecode.ConstPool) -> <init>
    void numAnnotations(int) -> numAnnotations
    void typeParameterTarget(int,int) -> typeParameterTarget
    void supertypeTarget(int) -> supertypeTarget
    void typeParameterBoundTarget(int,int,int) -> typeParameterBoundTarget
    void emptyTarget(int) -> emptyTarget
    void formalParameterTarget(int) -> formalParameterTarget
    void throwsTarget(int) -> throwsTarget
    void localVarTarget(int,int) -> localVarTarget
    void localVarTargetTable(int,int,int) -> localVarTargetTable
    void catchTarget(int) -> catchTarget
    void offsetTarget(int,int) -> offsetTarget
    void typeArgumentTarget(int,int,int) -> typeArgumentTarget
    void typePath(int) -> typePath
    void typePathPath(int,int) -> typePathPath
javassist.bytecode.stackmap.BasicBlock -> javassist.bytecode.stackmap.BasicBlock:
    int position -> position
    int length -> length
    int incoming -> incoming
    javassist.bytecode.stackmap.BasicBlock[] exit -> exit
    boolean stop -> stop
    javassist.bytecode.stackmap.BasicBlock$Catch toCatch -> toCatch
    void <init>(int) -> <init>
    javassist.bytecode.stackmap.BasicBlock find(javassist.bytecode.stackmap.BasicBlock[],int) -> find
    java.lang.String toString() -> toString
    void toString2(java.lang.StringBuffer) -> toString2
javassist.bytecode.stackmap.BasicBlock$Catch -> javassist.bytecode.stackmap.BasicBlock$Catch:
    javassist.bytecode.stackmap.BasicBlock$Catch next -> next
    javassist.bytecode.stackmap.BasicBlock body -> body
    int typeIndex -> typeIndex
    void <init>(javassist.bytecode.stackmap.BasicBlock,int,javassist.bytecode.stackmap.BasicBlock$Catch) -> <init>
javassist.bytecode.stackmap.BasicBlock$JsrBytecode -> javassist.bytecode.stackmap.BasicBlock$JsrBytecode:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
javassist.bytecode.stackmap.BasicBlock$Maker -> javassist.bytecode.stackmap.BasicBlock$Maker:
    void <init>() -> <init>
    javassist.bytecode.stackmap.BasicBlock makeBlock(int) -> makeBlock
    javassist.bytecode.stackmap.BasicBlock[] makeArray(int) -> makeArray
    javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock) -> makeArray
    javassist.bytecode.stackmap.BasicBlock[] makeArray(javassist.bytecode.stackmap.BasicBlock,javassist.bytecode.stackmap.BasicBlock) -> makeArray
    javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.MethodInfo) -> make
    javassist.bytecode.stackmap.BasicBlock[] make(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable) -> make
    javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int) -> makeMark
    javassist.bytecode.stackmap.BasicBlock$Mark makeMark(java.util.Map,int,javassist.bytecode.stackmap.BasicBlock[],int,boolean) -> makeMark
    javassist.bytecode.stackmap.BasicBlock$Mark makeMark0(java.util.Map,int,boolean,boolean) -> makeMark0
    java.util.Map makeMarks(javassist.bytecode.CodeIterator,int,int,javassist.bytecode.ExceptionTable) -> makeMarks
    void makeGoto(java.util.Map,int,int,int) -> makeGoto
    void makeJsr(java.util.Map,int,int,int) -> makeJsr
    javassist.bytecode.stackmap.BasicBlock[] makeBlocks(java.util.Map) -> makeBlocks
    javassist.bytecode.stackmap.BasicBlock getBBlock(javassist.bytecode.stackmap.BasicBlock$Mark) -> getBBlock
    void addCatchers(javassist.bytecode.stackmap.BasicBlock[],javassist.bytecode.ExceptionTable) -> addCatchers
javassist.bytecode.stackmap.BasicBlock$Mark -> javassist.bytecode.stackmap.BasicBlock$Mark:
    int position -> position
    javassist.bytecode.stackmap.BasicBlock block -> block
    javassist.bytecode.stackmap.BasicBlock[] jump -> jump
    boolean alwaysJmp -> alwaysJmp
    int size -> size
    javassist.bytecode.stackmap.BasicBlock$Catch catcher -> catcher
    void <init>(int) -> <init>
    int compareTo(javassist.bytecode.stackmap.BasicBlock$Mark) -> compareTo
    void setJump(javassist.bytecode.stackmap.BasicBlock[],int,boolean) -> setJump
    int compareTo(java.lang.Object) -> compareTo
javassist.bytecode.stackmap.MapMaker -> javassist.bytecode.stackmap.MapMaker:
    javassist.bytecode.StackMapTable make(javassist.ClassPool,javassist.bytecode.MethodInfo) -> make
    javassist.bytecode.StackMap make2(javassist.ClassPool,javassist.bytecode.MethodInfo) -> make2
    void <init>(javassist.ClassPool,javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute) -> <init>
    void <init>(javassist.bytecode.stackmap.MapMaker) -> <init>
    void make(javassist.bytecode.stackmap.TypedBlock[],byte[]) -> make
    void make(byte[],javassist.bytecode.stackmap.TypedBlock) -> make
    void traceException(byte[],javassist.bytecode.stackmap.BasicBlock$Catch) -> traceException
    void mergeMap(javassist.bytecode.stackmap.TypedBlock,boolean) -> mergeMap
    javassist.bytecode.stackmap.TypeData merge(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData) -> merge
    void recordStackMap(javassist.bytecode.stackmap.TypedBlock) -> recordStackMap
    void recordStackMap(javassist.bytecode.stackmap.TypedBlock,int) -> recordStackMap
    javassist.bytecode.stackmap.TypeData$ClassName toExceptionType(int) -> toExceptionType
    void recordStackMap0(javassist.bytecode.stackmap.TypedBlock,int,javassist.bytecode.stackmap.TypeData[]) -> recordStackMap0
    int recordTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[]) -> recordTypeData
    void copyTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[]) -> copyTypeData
    javassist.bytecode.stackmap.TypeData validateTypeData(javassist.bytecode.stackmap.TypeData[],int,int) -> validateTypeData
    void findDeadCatchers(byte[],javassist.bytecode.stackmap.TypedBlock[]) -> findDeadCatchers
    void fixDeadcode(byte[],javassist.bytecode.stackmap.TypedBlock) -> fixDeadcode
    void fixTypes(byte[],javassist.bytecode.stackmap.TypedBlock[]) -> fixTypes
    javassist.bytecode.StackMapTable toStackMap(javassist.bytecode.stackmap.TypedBlock[]) -> toStackMap
    boolean isTarget(javassist.bytecode.stackmap.TypedBlock,javassist.bytecode.stackmap.TypedBlock) -> isTarget
    void toStackMapBody(javassist.bytecode.StackMapTable$Writer,javassist.bytecode.stackmap.TypedBlock,int,int,javassist.bytecode.stackmap.TypedBlock) -> toStackMapBody
    int[] fillStackMap(int,int,int[],javassist.bytecode.stackmap.TypeData[]) -> fillStackMap
    int stackMapDiff(int,javassist.bytecode.stackmap.TypeData[],int,javassist.bytecode.stackmap.TypeData[]) -> stackMapDiff
    boolean stackMapEq(javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[],int) -> stackMapEq
    int diffSize(javassist.bytecode.stackmap.TypeData[],int,int) -> diffSize
    javassist.bytecode.StackMap toStackMap2(javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypedBlock[]) -> toStackMap2
    void writeStackFrame(javassist.bytecode.StackMap$Writer,javassist.bytecode.ConstPool,int,javassist.bytecode.stackmap.TypedBlock) -> writeStackFrame
    void writeVerifyTypeInfo(javassist.bytecode.StackMap$Writer,javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypeData[],int) -> writeVerifyTypeInfo
javassist.bytecode.stackmap.Tracer -> javassist.bytecode.stackmap.Tracer:
    javassist.ClassPool classPool -> classPool
    javassist.bytecode.ConstPool cpool -> cpool
    java.lang.String returnType -> returnType
    int stackTop -> stackTop
    javassist.bytecode.stackmap.TypeData[] stackTypes -> stackTypes
    javassist.bytecode.stackmap.TypeData[] localsTypes -> localsTypes
    void <init>(javassist.ClassPool,javassist.bytecode.ConstPool,int,int,java.lang.String) -> <init>
    void <init>(javassist.bytecode.stackmap.Tracer) -> <init>
    int doOpcode(int,byte[]) -> doOpcode
    void visitBranch(int,byte[],int) -> visitBranch
    void visitGoto(int,byte[],int) -> visitGoto
    void visitReturn(int,byte[]) -> visitReturn
    void visitThrow(int,byte[]) -> visitThrow
    void visitTableSwitch(int,byte[],int,int,int) -> visitTableSwitch
    void visitLookupSwitch(int,byte[],int,int,int) -> visitLookupSwitch
    void visitJSR(int,byte[]) -> visitJSR
    void visitRET(int,byte[]) -> visitRET
    int doOpcode0_53(int,byte[],int) -> doOpcode0_53
    void doLDC(int) -> doLDC
    int doXLOAD(javassist.bytecode.stackmap.TypeData,byte[],int) -> doXLOAD
    int doXLOAD(int,javassist.bytecode.stackmap.TypeData) -> doXLOAD
    int doALOAD(int) -> doALOAD
    int doOpcode54_95(int,byte[],int) -> doOpcode54_95
    int doXSTORE(int,byte[],javassist.bytecode.stackmap.TypeData) -> doXSTORE
    int doXSTORE(int,javassist.bytecode.stackmap.TypeData) -> doXSTORE
    int doASTORE(int) -> doASTORE
    void doDUP_XX(int,int) -> doDUP_XX
    int doOpcode96_147(int,byte[],int) -> doOpcode96_147
    int doOpcode148_201(int,byte[],int) -> doOpcode148_201
    int doWIDE(int,byte[]) -> doWIDE
    void doWIDE_XLOAD(int,byte[],javassist.bytecode.stackmap.TypeData) -> doWIDE_XLOAD
    void doWIDE_STORE(int,byte[],javassist.bytecode.stackmap.TypeData) -> doWIDE_STORE
    int doPutField(int,byte[],boolean) -> doPutField
    int doGetField(int,byte[],boolean) -> doGetField
    void setFieldTarget(boolean,int) -> setFieldTarget
    int doNEWARRAY(int,byte[]) -> doNEWARRAY
    int doMultiANewArray(int,byte[]) -> doMultiANewArray
    int doInvokeMethod(int,byte[],boolean) -> doInvokeMethod
    void constructorCalled(javassist.bytecode.stackmap.TypeData,int) -> constructorCalled
    int doInvokeIntfMethod(int,byte[]) -> doInvokeIntfMethod
    int doInvokeDynamic(int,byte[]) -> doInvokeDynamic
    void pushMemberType(java.lang.String) -> pushMemberType
    java.lang.String getFieldClassName(java.lang.String,int) -> getFieldClassName
    void checkParamTypes(java.lang.String,int) -> checkParamTypes
javassist.bytecode.stackmap.TypeData -> javassist.bytecode.stackmap.TypeData:
    javassist.bytecode.stackmap.TypeData[] make(int) -> make
    void <init>() -> <init>
    void setType(javassist.bytecode.stackmap.TypeData,java.lang.String,javassist.ClassPool) -> setType
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData join() -> join
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    boolean isNullType() -> isNullType
    boolean isUninit() -> isUninit
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    java.lang.String getName() -> getName
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    int dfs(java.util.List,int,javassist.ClassPool) -> dfs
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    void constructorCalled(int) -> constructorCalled
    java.lang.String toString() -> toString
    java.lang.String toString2(java.util.Set) -> toString2
    javassist.CtClass commonSuperClassEx(javassist.CtClass,javassist.CtClass) -> commonSuperClassEx
    javassist.CtClass commonSuperClass(javassist.CtClass,javassist.CtClass) -> commonSuperClass
    boolean eq(javassist.CtClass,javassist.CtClass) -> eq
    void aastore(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData,javassist.ClassPool) -> aastore
javassist.bytecode.stackmap.TypeData$AbsTypeVar -> javassist.bytecode.stackmap.TypeData$AbsTypeVar:
    void <init>() -> <init>
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
javassist.bytecode.stackmap.TypeData$ArrayElement -> javassist.bytecode.stackmap.TypeData$ArrayElement:
    javassist.bytecode.stackmap.TypeData$AbsTypeVar array -> array
    void <init>(javassist.bytecode.stackmap.TypeData$AbsTypeVar) -> <init>
    javassist.bytecode.stackmap.TypeData make(javassist.bytecode.stackmap.TypeData) -> make
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$AbsTypeVar arrayType() -> arrayType
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    java.lang.String typeName(java.lang.String) -> typeName
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    int dfs(java.util.List,int,javassist.ClassPool) -> dfs
    java.lang.String toString2(java.util.Set) -> toString2
    java.lang.String access$000(java.lang.String) -> access$000
javassist.bytecode.stackmap.TypeData$ArrayType -> javassist.bytecode.stackmap.TypeData$ArrayType:
    javassist.bytecode.stackmap.TypeData$AbsTypeVar element -> element
    void <init>(javassist.bytecode.stackmap.TypeData$AbsTypeVar) -> <init>
    javassist.bytecode.stackmap.TypeData make(javassist.bytecode.stackmap.TypeData) -> make
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$AbsTypeVar elementType() -> elementType
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    java.lang.String typeName(java.lang.String) -> typeName
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    int dfs(java.util.List,int,javassist.ClassPool) -> dfs
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$BasicType -> javassist.bytecode.stackmap.TypeData$BasicType:
    java.lang.String name -> name
    int typeTag -> typeTag
    char decodedName -> decodedName
    void <init>(java.lang.String,int,char) -> <init>
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData join() -> join
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    java.lang.String getName() -> getName
    char getDecodedName() -> getDecodedName
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    java.lang.String toString2(java.util.Set) -> toString2
    char access$100(javassist.bytecode.stackmap.TypeData$BasicType) -> access$100
javassist.bytecode.stackmap.TypeData$ClassName -> javassist.bytecode.stackmap.TypeData$ClassName:
    java.lang.String name -> name
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$NullType -> javassist.bytecode.stackmap.TypeData$NullType:
    void <init>() -> <init>
    int getTypeTag() -> getTypeTag
    boolean isNullType() -> isNullType
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
javassist.bytecode.stackmap.TypeData$TypeVar -> javassist.bytecode.stackmap.TypeData$TypeVar:
    java.util.List lowers -> lowers
    java.util.List usedBy -> usedBy
    java.util.List uppers -> uppers
    java.lang.String fixedType -> fixedType
    boolean is2WordType -> is2WordType
    int visited -> visited
    int smallest -> smallest
    boolean inList -> inList
    int dimension -> dimension
    void <init>(javassist.bytecode.stackmap.TypeData) -> <init>
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    boolean isNullType() -> isNullType
    boolean isUninit() -> isUninit
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    void setType(java.lang.String,javassist.ClassPool) -> setType
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    int dfs(java.util.List,int,javassist.ClassPool) -> dfs
    void fixTypes(java.util.List,javassist.ClassPool) -> fixTypes
    void fixTypes1(java.util.List,javassist.bytecode.stackmap.TypeData) -> fixTypes1
    java.lang.String fixTypes2(java.util.List,java.util.Set,javassist.ClassPool) -> fixTypes2
    boolean isObjectArray(javassist.CtClass) -> isObjectArray
    javassist.CtClass fixByUppers(java.util.List,javassist.ClassPool,java.util.Set,javassist.CtClass) -> fixByUppers
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$UninitData -> javassist.bytecode.stackmap.TypeData$UninitData:
    int offset -> offset
    boolean initialized -> initialized
    void <init>(int,java.lang.String) -> <init>
    javassist.bytecode.stackmap.TypeData$UninitData copy() -> copy
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData join() -> join
    boolean isUninit() -> isUninit
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    int offset() -> offset
    void constructorCalled(int) -> constructorCalled
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$UninitThis -> javassist.bytecode.stackmap.TypeData$UninitThis:
    void <init>(java.lang.String) -> <init>
    javassist.bytecode.stackmap.TypeData$UninitData copy() -> copy
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeData$UninitTypeVar -> javassist.bytecode.stackmap.TypeData$UninitTypeVar:
    javassist.bytecode.stackmap.TypeData type -> type
    void <init>(javassist.bytecode.stackmap.TypeData$UninitData) -> <init>
    int getTypeTag() -> getTypeTag
    int getTypeData(javassist.bytecode.ConstPool) -> getTypeData
    javassist.bytecode.stackmap.TypeData$BasicType isBasicType() -> isBasicType
    boolean is2WordType() -> is2WordType
    boolean isUninit() -> isUninit
    boolean eq(javassist.bytecode.stackmap.TypeData) -> eq
    java.lang.String getName() -> getName
    javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int) -> toTypeVar
    javassist.bytecode.stackmap.TypeData join() -> join
    void setType(java.lang.String,javassist.ClassPool) -> setType
    void merge(javassist.bytecode.stackmap.TypeData) -> merge
    void constructorCalled(int) -> constructorCalled
    int offset() -> offset
    javassist.bytecode.stackmap.TypeData getArrayType(int) -> getArrayType
    java.lang.String toString2(java.util.Set) -> toString2
javassist.bytecode.stackmap.TypeTag -> javassist.bytecode.stackmap.TypeTag:
    java.lang.String TOP_TYPE -> TOP_TYPE
    javassist.bytecode.stackmap.TypeData$BasicType TOP -> TOP
    javassist.bytecode.stackmap.TypeData$BasicType INTEGER -> INTEGER
    javassist.bytecode.stackmap.TypeData$BasicType FLOAT -> FLOAT
    javassist.bytecode.stackmap.TypeData$BasicType DOUBLE -> DOUBLE
    javassist.bytecode.stackmap.TypeData$BasicType LONG -> LONG
    void <clinit>() -> <clinit>
javassist.bytecode.stackmap.TypedBlock -> javassist.bytecode.stackmap.TypedBlock:
    int stackTop -> stackTop
    int numLocals -> numLocals
    javassist.bytecode.stackmap.TypeData[] localsTypes -> localsTypes
    javassist.bytecode.stackmap.TypeData[] stackTypes -> stackTypes
    javassist.bytecode.stackmap.TypedBlock[] makeBlocks(javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute,boolean) -> makeBlocks
    void <init>(int) -> <init>
    void toString2(java.lang.StringBuffer) -> toString2
    void printTypes(java.lang.StringBuffer,int,javassist.bytecode.stackmap.TypeData[]) -> printTypes
    boolean alreadySet() -> alreadySet
    void setStackMap(int,javassist.bytecode.stackmap.TypeData[],int,javassist.bytecode.stackmap.TypeData[]) -> setStackMap
    void resetNumLocals() -> resetNumLocals
    void initFirstBlock(int,int,java.lang.String,java.lang.String,boolean,boolean) -> initFirstBlock
    int descToTag(java.lang.String,int,int,javassist.bytecode.stackmap.TypeData[]) -> descToTag
    javassist.bytecode.stackmap.TypeData toPrimitiveTag(char) -> toPrimitiveTag
    java.lang.String getRetType(java.lang.String) -> getRetType
javassist.bytecode.stackmap.TypedBlock$Maker -> javassist.bytecode.stackmap.TypedBlock$Maker:
    void <init>() -> <init>
    javassist.bytecode.stackmap.BasicBlock makeBlock(int) -> makeBlock
    javassist.bytecode.stackmap.BasicBlock[] makeArray(int) -> makeArray
javassist.compiler.AccessorMaker -> javassist.compiler.AccessorMaker:
    javassist.CtClass clazz -> clazz
    int uniqueNumber -> uniqueNumber
    java.util.Map accessors -> accessors
    java.lang.String lastParamType -> lastParamType
    void <init>(javassist.CtClass) -> <init>
    java.lang.String getConstructor(javassist.CtClass,java.lang.String,javassist.bytecode.MethodInfo) -> getConstructor
    java.lang.String getMethodAccessor(java.lang.String,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo) -> getMethodAccessor
    javassist.bytecode.MethodInfo getFieldGetter(javassist.bytecode.FieldInfo,boolean) -> getFieldGetter
    javassist.bytecode.MethodInfo getFieldSetter(javassist.bytecode.FieldInfo,boolean) -> getFieldSetter
    java.lang.String findAccessorName(javassist.bytecode.ClassFile) -> findAccessorName
javassist.compiler.CodeGen -> javassist.compiler.CodeGen:
    java.lang.String javaLangObject -> javaLangObject
    java.lang.String jvmJavaLangObject -> jvmJavaLangObject
    java.lang.String javaLangString -> javaLangString
    java.lang.String jvmJavaLangString -> jvmJavaLangString
    javassist.bytecode.Bytecode bytecode -> bytecode
    int tempVar -> tempVar
    javassist.compiler.TypeChecker typeChecker -> typeChecker
    boolean hasReturned -> hasReturned
    boolean inStaticMethod -> inStaticMethod
    java.util.List breakList -> breakList
    java.util.List continueList -> continueList
    javassist.compiler.CodeGen$ReturnHook returnHooks -> returnHooks
    int exprType -> exprType
    int arrayDim -> arrayDim
    java.lang.String className -> className
    int[] binOp -> binOp
    int[] ifOp -> ifOp
    int[] ifOp2 -> ifOp2
    int P_DOUBLE -> P_DOUBLE
    int P_FLOAT -> P_FLOAT
    int P_LONG -> P_LONG
    int P_INT -> P_INT
    int P_OTHER -> P_OTHER
    int[] castOp -> castOp
    void <init>(javassist.bytecode.Bytecode) -> <init>
    void setTypeChecker(javassist.compiler.TypeChecker) -> setTypeChecker
    void fatal() -> fatal
    boolean is2word(int,int) -> is2word
    int getMaxLocals() -> getMaxLocals
    void setMaxLocals(int) -> setMaxLocals
    void incMaxLocals(int) -> incMaxLocals
    int getTempVar() -> getTempVar
    int getLocalVar(javassist.compiler.ast.Declarator) -> getLocalVar
    java.lang.String getThisName() -> getThisName
    java.lang.String getSuperName() -> getSuperName
    java.lang.String resolveClassName(javassist.compiler.ast.ASTList) -> resolveClassName
    java.lang.String resolveClassName(java.lang.String) -> resolveClassName
    java.lang.String toJvmArrayName(java.lang.String,int) -> toJvmArrayName
    java.lang.String toJvmTypeName(int,int) -> toJvmTypeName
    void compileExpr(javassist.compiler.ast.ASTree) -> compileExpr
    boolean compileBooleanExpr(boolean,javassist.compiler.ast.ASTree) -> compileBooleanExpr
    void doTypeCheck(javassist.compiler.ast.ASTree) -> doTypeCheck
    void atASTList(javassist.compiler.ast.ASTList) -> atASTList
    void atPair(javassist.compiler.ast.Pair) -> atPair
    void atSymbol(javassist.compiler.ast.Symbol) -> atSymbol
    void atFieldDecl(javassist.compiler.ast.FieldDecl) -> atFieldDecl
    void atMethodDecl(javassist.compiler.ast.MethodDecl) -> atMethodDecl
    void atMethodBody(javassist.compiler.ast.Stmnt,boolean,boolean) -> atMethodBody
    boolean needsSuperCall(javassist.compiler.ast.Stmnt) -> needsSuperCall
    void insertDefaultSuperCall() -> insertDefaultSuperCall
    void atStmnt(javassist.compiler.ast.Stmnt) -> atStmnt
    void atIfStmnt(javassist.compiler.ast.Stmnt) -> atIfStmnt
    void atWhileStmnt(javassist.compiler.ast.Stmnt,boolean) -> atWhileStmnt
    void patchGoto(java.util.List,int) -> patchGoto
    void atForStmnt(javassist.compiler.ast.Stmnt) -> atForStmnt
    void atSwitchStmnt(javassist.compiler.ast.Stmnt) -> atSwitchStmnt
    int computeLabel(javassist.compiler.ast.ASTree) -> computeLabel
    int computeStringLabel(javassist.compiler.ast.ASTree,int,java.util.List) -> computeStringLabel
    void atBreakStmnt(javassist.compiler.ast.Stmnt,boolean) -> atBreakStmnt
    void atReturnStmnt(javassist.compiler.ast.Stmnt) -> atReturnStmnt
    void atReturnStmnt2(javassist.compiler.ast.ASTree) -> atReturnStmnt2
    void atThrowStmnt(javassist.compiler.ast.Stmnt) -> atThrowStmnt
    void atTryStmnt(javassist.compiler.ast.Stmnt) -> atTryStmnt
    void atSyncStmnt(javassist.compiler.ast.Stmnt) -> atSyncStmnt
    int getListSize(java.util.List) -> getListSize
    boolean isPlusPlusExpr(javassist.compiler.ast.ASTree) -> isPlusPlusExpr
    void atDeclarator(javassist.compiler.ast.Declarator) -> atDeclarator
    void atNewExpr(javassist.compiler.ast.NewExpr) -> atNewExpr
    void atArrayInit(javassist.compiler.ast.ArrayInit) -> atArrayInit
    void atAssignExpr(javassist.compiler.ast.AssignExpr) -> atAssignExpr
    void atAssignExpr(javassist.compiler.ast.AssignExpr,boolean) -> atAssignExpr
    void badAssign(javassist.compiler.ast.Expr) -> badAssign
    void atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree,boolean) -> atVariableAssign
    void atArrayVariableAssign(javassist.compiler.ast.ArrayInit,int,int,java.lang.String) -> atArrayVariableAssign
    void atArrayAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Expr,javassist.compiler.ast.ASTree,boolean) -> atArrayAssign
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean) -> atFieldAssign
    void atAssignCore(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,int,int,java.lang.String) -> atAssignCore
    void atStringPlusEq(javassist.compiler.ast.Expr,int,int,java.lang.String,javassist.compiler.ast.ASTree) -> atStringPlusEq
    boolean invalidDim(int,int,java.lang.String,int,int,java.lang.String,boolean) -> invalidDim
    void atCondExpr(javassist.compiler.ast.CondExpr) -> atCondExpr
    int lookupBinOp(int) -> lookupBinOp
    void atBinExpr(javassist.compiler.ast.BinExpr) -> atBinExpr
    void atArithBinExpr(javassist.compiler.ast.Expr,int,int,int) -> atArithBinExpr
    void atStringConcatExpr(javassist.compiler.ast.Expr,int,int,java.lang.String) -> atStringConcatExpr
    void convToString(int,int) -> convToString
    boolean booleanExpr(boolean,javassist.compiler.ast.ASTree) -> booleanExpr
    boolean isAlwaysBranch(javassist.compiler.ast.ASTree,boolean) -> isAlwaysBranch
    int getCompOperator(javassist.compiler.ast.ASTree) -> getCompOperator
    int compileOprands(javassist.compiler.ast.BinExpr) -> compileOprands
    void compareExpr(boolean,int,int,javassist.compiler.ast.BinExpr) -> compareExpr
    void badTypes(javassist.compiler.ast.Expr) -> badTypes
    boolean isRefType(int) -> isRefType
    int typePrecedence(int) -> typePrecedence
    boolean isP_INT(int) -> isP_INT
    boolean rightIsStrong(int,int) -> rightIsStrong
    void convertOprandTypes(int,int,javassist.compiler.ast.Expr) -> convertOprandTypes
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr) -> atInstanceOfExpr
    java.lang.String checkCastExpr(javassist.compiler.ast.CastExpr,java.lang.String) -> checkCastExpr
    void atNumCastExpr(int,int) -> atNumCastExpr
    void atExpr(javassist.compiler.ast.Expr) -> atExpr
    void badType(javassist.compiler.ast.Expr) -> badType
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void atFieldRead(javassist.compiler.ast.ASTree) -> atFieldRead
    void atClassObject(javassist.compiler.ast.Expr) -> atClassObject
    void atClassObject2(java.lang.String) -> atClassObject2
    void atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> atArrayRead
    void arrayAccess(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> arrayAccess
    int getArrayReadOp(int,int) -> getArrayReadOp
    int getArrayWriteOp(int,int) -> getArrayWriteOp
    void atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean) -> atPlusPlus
    void atArrayPlusPlus(int,boolean,javassist.compiler.ast.Expr,boolean) -> atArrayPlusPlus
    void atPlusPlusCore(int,boolean,int,boolean,javassist.compiler.ast.Expr) -> atPlusPlusCore
    void atFieldPlusPlus(int,boolean,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean) -> atFieldPlusPlus
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atVariable(javassist.compiler.ast.Variable) -> atVariable
    void atKeyword(javassist.compiler.ast.Keyword) -> atKeyword
    void atStringL(javassist.compiler.ast.StringL) -> atStringL
    void atIntConst(javassist.compiler.ast.IntConst) -> atIntConst
    void atDoubleConst(javassist.compiler.ast.DoubleConst) -> atDoubleConst
    void <clinit>() -> <clinit>
javassist.compiler.CodeGen$1 -> javassist.compiler.CodeGen$1:
    int val$var -> val$var
    javassist.compiler.CodeGen this$0 -> this$0
    void <init>(javassist.compiler.CodeGen,javassist.compiler.CodeGen,int) -> <init>
    boolean doit(javassist.bytecode.Bytecode,int) -> doit
javassist.compiler.CodeGen$ReturnHook -> javassist.compiler.CodeGen$ReturnHook:
    javassist.compiler.CodeGen$ReturnHook next -> next
    boolean doit(javassist.bytecode.Bytecode,int) -> doit
    void <init>(javassist.compiler.CodeGen) -> <init>
    void remove(javassist.compiler.CodeGen) -> remove
javassist.compiler.CompileError -> javassist.compiler.CompileError:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.Lex lex -> lex
    java.lang.String reason -> reason
    void <init>(java.lang.String,javassist.compiler.Lex) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(javassist.CannotCompileException) -> <init>
    void <init>(javassist.NotFoundException) -> <init>
    javassist.compiler.Lex getLex() -> getLex
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
javassist.compiler.Javac -> javassist.compiler.Javac:
    javassist.compiler.JvstCodeGen gen -> gen
    javassist.compiler.SymbolTable stable -> stable
    javassist.bytecode.Bytecode bytecode -> bytecode
    java.lang.String param0Name -> param0Name
    java.lang.String resultVarName -> resultVarName
    java.lang.String proceedName -> proceedName
    void <init>(javassist.CtClass) -> <init>
    void <init>(javassist.bytecode.Bytecode,javassist.CtClass) -> <init>
    javassist.bytecode.Bytecode getBytecode() -> getBytecode
    javassist.CtMember compile(java.lang.String) -> compile
    javassist.CtField compileField(javassist.compiler.ast.FieldDecl) -> compileField
    javassist.CtBehavior compileMethod(javassist.compiler.Parser,javassist.compiler.ast.MethodDecl) -> compileMethod
    javassist.bytecode.Bytecode compileBody(javassist.CtBehavior,java.lang.String) -> compileBody
    void makeDefaultBody(javassist.bytecode.Bytecode,javassist.CtClass) -> makeDefaultBody
    boolean recordLocalVariables(javassist.bytecode.CodeAttribute,int) -> recordLocalVariables
    boolean recordParamNames(javassist.bytecode.CodeAttribute,int) -> recordParamNames
    int recordParams(javassist.CtClass[],boolean) -> recordParams
    int recordParams(java.lang.String,javassist.CtClass[],boolean,int,boolean) -> recordParams
    void setMaxLocals(int) -> setMaxLocals
    int recordReturnType(javassist.CtClass,boolean) -> recordReturnType
    void recordType(javassist.CtClass) -> recordType
    int recordVariable(javassist.CtClass,java.lang.String) -> recordVariable
    void recordProceed(java.lang.String,java.lang.String) -> recordProceed
    void recordStaticProceed(java.lang.String,java.lang.String) -> recordStaticProceed
    void recordSpecialProceed(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int) -> recordSpecialProceed
    void recordProceed(javassist.compiler.ProceedHandler) -> recordProceed
    void compileStmnt(java.lang.String) -> compileStmnt
    void compileExpr(java.lang.String) -> compileExpr
    javassist.compiler.ast.ASTree parseExpr(java.lang.String,javassist.compiler.SymbolTable) -> parseExpr
    void compileExpr(javassist.compiler.ast.ASTree) -> compileExpr
javassist.compiler.Javac$1 -> javassist.compiler.Javac$1:
    java.lang.String val$m -> val$m
    javassist.compiler.ast.ASTree val$texpr -> val$texpr
    javassist.compiler.Javac this$0 -> this$0
    void <init>(javassist.compiler.Javac,java.lang.String,javassist.compiler.ast.ASTree) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.compiler.Javac$2 -> javassist.compiler.Javac$2:
    java.lang.String val$c -> val$c
    java.lang.String val$m -> val$m
    javassist.compiler.Javac this$0 -> this$0
    void <init>(javassist.compiler.Javac,java.lang.String,java.lang.String) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.compiler.Javac$3 -> javassist.compiler.Javac$3:
    javassist.compiler.ast.ASTree val$texpr -> val$texpr
    int val$methodIndex -> val$methodIndex
    java.lang.String val$descriptor -> val$descriptor
    java.lang.String val$classname -> val$classname
    java.lang.String val$methodname -> val$methodname
    javassist.compiler.Javac this$0 -> this$0
    void <init>(javassist.compiler.Javac,javassist.compiler.ast.ASTree,int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.compiler.Javac$CtFieldWithInit -> javassist.compiler.Javac$CtFieldWithInit:
    javassist.compiler.ast.ASTree init -> init
    void <init>(javassist.CtClass,java.lang.String,javassist.CtClass) -> <init>
    void setInit(javassist.compiler.ast.ASTree) -> setInit
    javassist.compiler.ast.ASTree getInitAST() -> getInitAST
javassist.compiler.JvstCodeGen -> javassist.compiler.JvstCodeGen:
    java.lang.String paramArrayName -> paramArrayName
    java.lang.String paramListName -> paramListName
    javassist.CtClass[] paramTypeList -> paramTypeList
    int paramVarBase -> paramVarBase
    boolean useParam0 -> useParam0
    java.lang.String param0Type -> param0Type
    java.lang.String sigName -> sigName
    java.lang.String dollarTypeName -> dollarTypeName
    java.lang.String clazzName -> clazzName
    javassist.CtClass dollarType -> dollarType
    javassist.CtClass returnType -> returnType
    java.lang.String returnCastName -> returnCastName
    java.lang.String returnVarName -> returnVarName
    java.lang.String wrapperCastName -> wrapperCastName
    java.lang.String proceedName -> proceedName
    java.lang.String cflowName -> cflowName
    javassist.compiler.ProceedHandler procHandler -> procHandler
    void <init>(javassist.bytecode.Bytecode,javassist.CtClass,javassist.ClassPool) -> <init>
    int indexOfParam1() -> indexOfParam1
    void setProceedHandler(javassist.compiler.ProceedHandler,java.lang.String) -> setProceedHandler
    void addNullIfVoid() -> addNullIfVoid
    void atMember(javassist.compiler.ast.Member) -> atMember
    void callGetType(java.lang.String) -> callGetType
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean) -> atFieldAssign
    void atAssignParamList(javassist.CtClass[],javassist.bytecode.Bytecode) -> atAssignParamList
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atCastToRtype(javassist.compiler.ast.CastExpr) -> atCastToRtype
    void atCastToWrapper(javassist.compiler.ast.CastExpr) -> atCastToWrapper
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void atCflow(javassist.compiler.ast.ASTList) -> atCflow
    void makeCflowName(java.lang.StringBuffer,javassist.compiler.ast.ASTree) -> makeCflowName
    boolean isParamListName(javassist.compiler.ast.ASTList) -> isParamListName
    int getMethodArgsLength(javassist.compiler.ast.ASTList) -> getMethodArgsLength
    void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[]) -> atMethodArgs
    void compileInvokeSpecial(javassist.compiler.ast.ASTree,int,java.lang.String,javassist.compiler.ast.ASTList) -> compileInvokeSpecial
    void atReturnStmnt(javassist.compiler.ast.Stmnt) -> atReturnStmnt
    int recordReturnType(javassist.CtClass,java.lang.String,java.lang.String,javassist.compiler.SymbolTable) -> recordReturnType
    void recordType(javassist.CtClass) -> recordType
    int recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,javassist.compiler.SymbolTable) -> recordParams
    int recordParams(javassist.CtClass[],boolean,java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.String,javassist.compiler.SymbolTable) -> recordParams
    int recordVariable(javassist.CtClass,java.lang.String,javassist.compiler.SymbolTable) -> recordVariable
    int recordVar(javassist.CtClass,java.lang.String,int,javassist.compiler.SymbolTable) -> recordVar
    void recordVariable(java.lang.String,java.lang.String,int,javassist.compiler.SymbolTable) -> recordVariable
    int compileParameterList(javassist.bytecode.Bytecode,javassist.CtClass[],int) -> compileParameterList
    void compileUnwrapValue(javassist.CtClass,javassist.bytecode.Bytecode) -> compileUnwrapValue
    void setType(javassist.CtClass) -> setType
    void setType(javassist.CtClass,int) -> setType
    void doNumCast(javassist.CtClass) -> doNumCast
javassist.compiler.JvstTypeChecker -> javassist.compiler.JvstTypeChecker:
    javassist.compiler.JvstCodeGen codeGen -> codeGen
    void <init>(javassist.CtClass,javassist.ClassPool,javassist.compiler.JvstCodeGen) -> <init>
    void addNullIfVoid() -> addNullIfVoid
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> atFieldAssign
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atCastToRtype(javassist.compiler.ast.CastExpr) -> atCastToRtype
    void atCastToWrapper(javassist.compiler.ast.CastExpr) -> atCastToWrapper
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void atCflow(javassist.compiler.ast.ASTList) -> atCflow
    boolean isParamListName(javassist.compiler.ast.ASTList) -> isParamListName
    int getMethodArgsLength(javassist.compiler.ast.ASTList) -> getMethodArgsLength
    void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[]) -> atMethodArgs
    void compileInvokeSpecial(javassist.compiler.ast.ASTree,java.lang.String,java.lang.String,java.lang.String,javassist.compiler.ast.ASTList) -> compileInvokeSpecial
    void compileUnwrapValue(javassist.CtClass) -> compileUnwrapValue
    void setType(javassist.CtClass) -> setType
    void setType(javassist.CtClass,int) -> setType
javassist.compiler.KeywordTable -> javassist.compiler.KeywordTable:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    int lookup(java.lang.String) -> lookup
    void append(java.lang.String,int) -> append
javassist.compiler.Lex -> javassist.compiler.Lex:
    int lastChar -> lastChar
    java.lang.StringBuffer textBuffer -> textBuffer
    javassist.compiler.Token currentToken -> currentToken
    javassist.compiler.Token lookAheadTokens -> lookAheadTokens
    java.lang.String input -> input
    int position -> position
    int maxlen -> maxlen
    int lineNumber -> lineNumber
    int[] equalOps -> equalOps
    javassist.compiler.KeywordTable ktable -> ktable
    void <init>(java.lang.String) -> <init>
    int get() -> get
    int lookAhead() -> lookAhead
    int lookAhead(int) -> lookAhead
    java.lang.String getString() -> getString
    long getLong() -> getLong
    double getDouble() -> getDouble
    int get(javassist.compiler.Token) -> get
    int readLine(javassist.compiler.Token) -> readLine
    int getNextNonWhiteChar() -> getNextNonWhiteChar
    int readCharConst(javassist.compiler.Token) -> readCharConst
    int readEscapeChar() -> readEscapeChar
    int readStringL(javassist.compiler.Token) -> readStringL
    int readNumber(int,javassist.compiler.Token) -> readNumber
    int readDouble(java.lang.StringBuffer,int,javassist.compiler.Token) -> readDouble
    int readSeparator(int) -> readSeparator
    int readIdentifier(int,javassist.compiler.Token) -> readIdentifier
    boolean isBlank(int) -> isBlank
    boolean isDigit(int) -> isDigit
    void ungetc(int) -> ungetc
    java.lang.String getTextAround() -> getTextAround
    int getc() -> getc
    void <clinit>() -> <clinit>
javassist.compiler.MemberCodeGen -> javassist.compiler.MemberCodeGen:
    javassist.compiler.MemberResolver resolver -> resolver
    javassist.CtClass thisClass -> thisClass
    javassist.bytecode.MethodInfo thisMethod -> thisMethod
    boolean resultStatic -> resultStatic
    void <init>(javassist.bytecode.Bytecode,javassist.CtClass,javassist.ClassPool) -> <init>
    int getMajorVersion() -> getMajorVersion
    void setThisMethod(javassist.CtMethod) -> setThisMethod
    javassist.CtClass getThisClass() -> getThisClass
    java.lang.String getThisName() -> getThisName
    java.lang.String getSuperName() -> getSuperName
    void insertDefaultSuperCall() -> insertDefaultSuperCall
    void atTryStmnt(javassist.compiler.ast.Stmnt) -> atTryStmnt
    void addFinally(java.util.List,javassist.compiler.ast.Stmnt) -> addFinally
    void atNewExpr(javassist.compiler.ast.NewExpr) -> atNewExpr
    void atNewArrayExpr(javassist.compiler.ast.NewExpr) -> atNewArrayExpr
    void atNewArrayExpr2(int,javassist.compiler.ast.ASTree,java.lang.String,javassist.compiler.ast.ArrayInit) -> atNewArrayExpr2
    void badNewExpr() -> badNewExpr
    void atArrayVariableAssign(javassist.compiler.ast.ArrayInit,int,int,java.lang.String) -> atArrayVariableAssign
    void atArrayInit(javassist.compiler.ast.ArrayInit) -> atArrayInit
    void atMultiNewArray(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList) -> atMultiNewArray
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void badMethod() -> badMethod
    void atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList,boolean,boolean,int,javassist.compiler.MemberResolver$Method) -> atMethodCallCore
    boolean isFromSameDeclaringClass(javassist.CtClass,javassist.CtClass) -> isFromSameDeclaringClass
    void atMethodCallCore2(javassist.CtClass,java.lang.String,boolean,boolean,int,javassist.compiler.MemberResolver$Method) -> atMethodCallCore2
    java.lang.String getAccessiblePrivate(java.lang.String,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo,javassist.CtClass) -> getAccessiblePrivate
    java.lang.String getAccessibleConstructor(java.lang.String,javassist.CtClass,javassist.bytecode.MethodInfo) -> getAccessibleConstructor
    boolean isEnclosing(javassist.CtClass,javassist.CtClass) -> isEnclosing
    int getMethodArgsLength(javassist.compiler.ast.ASTList) -> getMethodArgsLength
    void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[]) -> atMethodArgs
    void setReturnType(java.lang.String,boolean,boolean) -> setReturnType
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,boolean) -> atFieldAssign
    void atFieldAssignCore(javassist.CtField,boolean,int,boolean) -> atFieldAssignCore
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atFieldRead(javassist.compiler.ast.ASTree) -> atFieldRead
    void atArrayLength(javassist.compiler.ast.ASTree) -> atArrayLength
    int atFieldRead(javassist.CtField,boolean) -> atFieldRead
    javassist.compiler.AccessorMaker isAccessibleField(javassist.CtField,javassist.bytecode.FieldInfo) -> isAccessibleField
    boolean setFieldType(javassist.bytecode.FieldInfo) -> setFieldType
    int addFieldrefInfo(javassist.CtField,javassist.bytecode.FieldInfo) -> addFieldrefInfo
    void atClassObject2(java.lang.String) -> atClassObject2
    void atFieldPlusPlus(int,boolean,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr,boolean) -> atFieldPlusPlus
    javassist.CtField fieldAccess(javassist.compiler.ast.ASTree,boolean) -> fieldAccess
    void badLvalue() -> badLvalue
    javassist.CtClass[] makeParamList(javassist.compiler.ast.MethodDecl) -> makeParamList
    javassist.CtClass[] makeThrowsList(javassist.compiler.ast.MethodDecl) -> makeThrowsList
    java.lang.String resolveClassName(javassist.compiler.ast.ASTList) -> resolveClassName
    java.lang.String resolveClassName(java.lang.String) -> resolveClassName
javassist.compiler.MemberCodeGen$JsrHook -> javassist.compiler.MemberCodeGen$JsrHook:
    java.util.List jsrList -> jsrList
    javassist.compiler.CodeGen cgen -> cgen
    int var -> var
    void <init>(javassist.compiler.CodeGen) -> <init>
    int getVar(int) -> getVar
    void jsrJmp(javassist.bytecode.Bytecode) -> jsrJmp
    boolean doit(javassist.bytecode.Bytecode,int) -> doit
javassist.compiler.MemberCodeGen$JsrHook2 -> javassist.compiler.MemberCodeGen$JsrHook2:
    int var -> var
    int target -> target
    void <init>(javassist.compiler.CodeGen,int[]) -> <init>
    boolean doit(javassist.bytecode.Bytecode,int) -> doit
javassist.compiler.MemberResolver -> javassist.compiler.MemberResolver:
    javassist.ClassPool classPool -> classPool
    int YES -> YES
    int NO -> NO
    java.lang.String INVALID -> INVALID
    java.util.Map invalidNamesMap -> invalidNamesMap
    java.util.Map invalidNames -> invalidNames
    void <init>(javassist.ClassPool) -> <init>
    javassist.ClassPool getClassPool() -> getClassPool
    void fatal() -> fatal
    javassist.compiler.MemberResolver$Method lookupMethod(javassist.CtClass,javassist.CtClass,javassist.bytecode.MethodInfo,java.lang.String,int[],int[],java.lang.String[]) -> lookupMethod
    javassist.compiler.MemberResolver$Method lookupMethod(javassist.CtClass,java.lang.String,int[],int[],java.lang.String[],boolean) -> lookupMethod
    int compareSignature(java.lang.String,int[],int[],java.lang.String[]) -> compareSignature
    javassist.CtField lookupFieldByJvmName2(java.lang.String,javassist.compiler.ast.Symbol,javassist.compiler.ast.ASTree) -> lookupFieldByJvmName2
    javassist.CtField lookupFieldByJvmName(java.lang.String,javassist.compiler.ast.Symbol) -> lookupFieldByJvmName
    javassist.CtField lookupField(java.lang.String,javassist.compiler.ast.Symbol) -> lookupField
    javassist.CtClass lookupClassByName(javassist.compiler.ast.ASTList) -> lookupClassByName
    javassist.CtClass lookupClassByJvmName(java.lang.String) -> lookupClassByJvmName
    javassist.CtClass lookupClass(javassist.compiler.ast.Declarator) -> lookupClass
    javassist.CtClass lookupClass(int,int,java.lang.String) -> lookupClass
    java.lang.String getTypeName(int) -> getTypeName
    javassist.CtClass lookupClass(java.lang.String,boolean) -> lookupClass
    int getInvalidMapSize() -> getInvalidMapSize
    java.util.Map getInvalidNames() -> getInvalidNames
    javassist.CtClass searchImports(java.lang.String) -> searchImports
    javassist.CtClass lookupClass0(java.lang.String,boolean) -> lookupClass0
    java.lang.String resolveClassName(javassist.compiler.ast.ASTList) -> resolveClassName
    java.lang.String resolveJvmClassName(java.lang.String) -> resolveJvmClassName
    javassist.CtClass getSuperclass(javassist.CtClass) -> getSuperclass
    javassist.CtClass getSuperInterface(javassist.CtClass,java.lang.String) -> getSuperInterface
    java.lang.String javaToJvmName(java.lang.String) -> javaToJvmName
    java.lang.String jvmToJavaName(java.lang.String) -> jvmToJavaName
    int descToType(char) -> descToType
    int getModifiers(javassist.compiler.ast.ASTList) -> getModifiers
    void <clinit>() -> <clinit>
javassist.compiler.MemberResolver$Method -> javassist.compiler.MemberResolver$Method:
    javassist.CtClass declaring -> declaring
    javassist.bytecode.MethodInfo info -> info
    int notmatch -> notmatch
    void <init>(javassist.CtClass,javassist.bytecode.MethodInfo,int) -> <init>
    boolean isStatic() -> isStatic
javassist.compiler.NoFieldException -> javassist.compiler.NoFieldException:
    long serialVersionUID -> serialVersionUID
    java.lang.String fieldName -> fieldName
    javassist.compiler.ast.ASTree expr -> expr
    void <init>(java.lang.String,javassist.compiler.ast.ASTree) -> <init>
    java.lang.String getField() -> getField
    javassist.compiler.ast.ASTree getExpr() -> getExpr
javassist.compiler.Parser -> javassist.compiler.Parser:
    javassist.compiler.Lex lex -> lex
    int[] binaryOpPrecedence -> binaryOpPrecedence
    void <init>(javassist.compiler.Lex) -> <init>
    boolean hasMore() -> hasMore
    javassist.compiler.ast.ASTList parseMember(javassist.compiler.SymbolTable) -> parseMember
    javassist.compiler.ast.ASTList parseMember1(javassist.compiler.SymbolTable) -> parseMember1
    javassist.compiler.ast.FieldDecl parseField(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTList,javassist.compiler.ast.Declarator) -> parseField
    javassist.compiler.ast.MethodDecl parseMethod1(javassist.compiler.SymbolTable,boolean,javassist.compiler.ast.ASTList,javassist.compiler.ast.Declarator) -> parseMethod1
    javassist.compiler.ast.MethodDecl parseMethod2(javassist.compiler.SymbolTable,javassist.compiler.ast.MethodDecl) -> parseMethod2
    javassist.compiler.ast.ASTList parseMemberMods() -> parseMemberMods
    javassist.compiler.ast.Declarator parseFormalType(javassist.compiler.SymbolTable) -> parseFormalType
    boolean isBuiltinType(int) -> isBuiltinType
    javassist.compiler.ast.Declarator parseFormalParam(javassist.compiler.SymbolTable) -> parseFormalParam
    javassist.compiler.ast.Stmnt parseStatement(javassist.compiler.SymbolTable) -> parseStatement
    javassist.compiler.ast.Stmnt parseBlock(javassist.compiler.SymbolTable) -> parseBlock
    javassist.compiler.ast.Stmnt parseIf(javassist.compiler.SymbolTable) -> parseIf
    javassist.compiler.ast.Stmnt parseWhile(javassist.compiler.SymbolTable) -> parseWhile
    javassist.compiler.ast.Stmnt parseDo(javassist.compiler.SymbolTable) -> parseDo
    javassist.compiler.ast.Stmnt parseFor(javassist.compiler.SymbolTable) -> parseFor
    javassist.compiler.ast.Stmnt parseSwitch(javassist.compiler.SymbolTable) -> parseSwitch
    javassist.compiler.ast.Stmnt parseSwitchBlock(javassist.compiler.SymbolTable) -> parseSwitchBlock
    javassist.compiler.ast.Stmnt parseStmntOrCase(javassist.compiler.SymbolTable) -> parseStmntOrCase
    javassist.compiler.ast.Stmnt parseSynchronized(javassist.compiler.SymbolTable) -> parseSynchronized
    javassist.compiler.ast.Stmnt parseTry(javassist.compiler.SymbolTable) -> parseTry
    javassist.compiler.ast.Stmnt parseReturn(javassist.compiler.SymbolTable) -> parseReturn
    javassist.compiler.ast.Stmnt parseThrow(javassist.compiler.SymbolTable) -> parseThrow
    javassist.compiler.ast.Stmnt parseBreak(javassist.compiler.SymbolTable) -> parseBreak
    javassist.compiler.ast.Stmnt parseContinue(javassist.compiler.SymbolTable) -> parseContinue
    javassist.compiler.ast.Stmnt parseDeclarationOrExpression(javassist.compiler.SymbolTable,boolean) -> parseDeclarationOrExpression
    javassist.compiler.ast.Stmnt parseExprList(javassist.compiler.SymbolTable) -> parseExprList
    javassist.compiler.ast.Stmnt parseDeclarators(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator) -> parseDeclarators
    javassist.compiler.ast.Declarator parseDeclarator(javassist.compiler.SymbolTable,javassist.compiler.ast.Declarator) -> parseDeclarator
    javassist.compiler.ast.ASTree parseInitializer(javassist.compiler.SymbolTable) -> parseInitializer
    javassist.compiler.ast.ArrayInit parseArrayInitializer(javassist.compiler.SymbolTable) -> parseArrayInitializer
    javassist.compiler.ast.ASTree parseParExpression(javassist.compiler.SymbolTable) -> parseParExpression
    javassist.compiler.ast.ASTree parseExpression(javassist.compiler.SymbolTable) -> parseExpression
    boolean isAssignOp(int) -> isAssignOp
    javassist.compiler.ast.ASTree parseConditionalExpr(javassist.compiler.SymbolTable) -> parseConditionalExpr
    javassist.compiler.ast.ASTree parseBinaryExpr(javassist.compiler.SymbolTable) -> parseBinaryExpr
    javassist.compiler.ast.ASTree parseInstanceOf(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree) -> parseInstanceOf
    javassist.compiler.ast.ASTree binaryExpr2(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree,int) -> binaryExpr2
    int getOpPrecedence(int) -> getOpPrecedence
    javassist.compiler.ast.ASTree parseUnaryExpr(javassist.compiler.SymbolTable) -> parseUnaryExpr
    javassist.compiler.ast.ASTree parseCast(javassist.compiler.SymbolTable) -> parseCast
    boolean nextIsBuiltinCast() -> nextIsBuiltinCast
    boolean nextIsClassCast() -> nextIsClassCast
    int nextIsClassType(int) -> nextIsClassType
    int parseArrayDimension() -> parseArrayDimension
    javassist.compiler.ast.ASTList parseClassType(javassist.compiler.SymbolTable) -> parseClassType
    javassist.compiler.ast.ASTree parsePostfix(javassist.compiler.SymbolTable) -> parsePostfix
    javassist.compiler.ast.ASTree parseDotClass(javassist.compiler.ast.ASTree,int) -> parseDotClass
    javassist.compiler.ast.ASTree parseDotClass(int,int) -> parseDotClass
    javassist.compiler.ast.ASTree parseMethodCall(javassist.compiler.SymbolTable,javassist.compiler.ast.ASTree) -> parseMethodCall
    java.lang.String toClassName(javassist.compiler.ast.ASTree) -> toClassName
    void toClassName(javassist.compiler.ast.ASTree,java.lang.StringBuffer) -> toClassName
    javassist.compiler.ast.ASTree parsePrimaryExpr(javassist.compiler.SymbolTable) -> parsePrimaryExpr
    javassist.compiler.ast.NewExpr parseNew(javassist.compiler.SymbolTable) -> parseNew
    javassist.compiler.ast.ASTList parseArraySize(javassist.compiler.SymbolTable) -> parseArraySize
    javassist.compiler.ast.ASTree parseArrayIndex(javassist.compiler.SymbolTable) -> parseArrayIndex
    javassist.compiler.ast.ASTList parseArgumentList(javassist.compiler.SymbolTable) -> parseArgumentList
    void <clinit>() -> <clinit>
javassist.compiler.ProceedHandler -> javassist.compiler.ProceedHandler:
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.compiler.SymbolTable -> javassist.compiler.SymbolTable:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.SymbolTable parent -> parent
    void <init>() -> <init>
    void <init>(javassist.compiler.SymbolTable) -> <init>
    javassist.compiler.SymbolTable getParent() -> getParent
    javassist.compiler.ast.Declarator lookup(java.lang.String) -> lookup
    void append(java.lang.String,javassist.compiler.ast.Declarator) -> append
javassist.compiler.SyntaxError -> javassist.compiler.SyntaxError:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.Lex) -> <init>
javassist.compiler.Token -> javassist.compiler.Token:
    javassist.compiler.Token next -> next
    int tokenId -> tokenId
    long longValue -> longValue
    double doubleValue -> doubleValue
    java.lang.String textValue -> textValue
    void <init>() -> <init>
javassist.compiler.TokenId -> javassist.compiler.TokenId:
    int ABSTRACT -> ABSTRACT
    int BOOLEAN -> BOOLEAN
    int BREAK -> BREAK
    int BYTE -> BYTE
    int CASE -> CASE
    int CATCH -> CATCH
    int CHAR -> CHAR
    int CLASS -> CLASS
    int CONST -> CONST
    int CONTINUE -> CONTINUE
    int DEFAULT -> DEFAULT
    int DO -> DO
    int DOUBLE -> DOUBLE
    int ELSE -> ELSE
    int EXTENDS -> EXTENDS
    int FINAL -> FINAL
    int FINALLY -> FINALLY
    int FLOAT -> FLOAT
    int FOR -> FOR
    int GOTO -> GOTO
    int IF -> IF
    int IMPLEMENTS -> IMPLEMENTS
    int IMPORT -> IMPORT
    int INSTANCEOF -> INSTANCEOF
    int INT -> INT
    int INTERFACE -> INTERFACE
    int LONG -> LONG
    int NATIVE -> NATIVE
    int NEW -> NEW
    int PACKAGE -> PACKAGE
    int PRIVATE -> PRIVATE
    int PROTECTED -> PROTECTED
    int PUBLIC -> PUBLIC
    int RETURN -> RETURN
    int SHORT -> SHORT
    int STATIC -> STATIC
    int SUPER -> SUPER
    int SWITCH -> SWITCH
    int SYNCHRONIZED -> SYNCHRONIZED
    int THIS -> THIS
    int THROW -> THROW
    int THROWS -> THROWS
    int TRANSIENT -> TRANSIENT
    int TRY -> TRY
    int VOID -> VOID
    int VOLATILE -> VOLATILE
    int WHILE -> WHILE
    int STRICT -> STRICT
    int NEQ -> NEQ
    int MOD_E -> MOD_E
    int AND_E -> AND_E
    int MUL_E -> MUL_E
    int PLUS_E -> PLUS_E
    int MINUS_E -> MINUS_E
    int DIV_E -> DIV_E
    int LE -> LE
    int EQ -> EQ
    int GE -> GE
    int EXOR_E -> EXOR_E
    int OR_E -> OR_E
    int PLUSPLUS -> PLUSPLUS
    int MINUSMINUS -> MINUSMINUS
    int LSHIFT -> LSHIFT
    int LSHIFT_E -> LSHIFT_E
    int RSHIFT -> RSHIFT
    int RSHIFT_E -> RSHIFT_E
    int OROR -> OROR
    int ANDAND -> ANDAND
    int ARSHIFT -> ARSHIFT
    int ARSHIFT_E -> ARSHIFT_E
    java.lang.String[] opNames -> opNames
    int[] assignOps -> assignOps
    int Identifier -> Identifier
    int CharConstant -> CharConstant
    int IntConstant -> IntConstant
    int LongConstant -> LongConstant
    int FloatConstant -> FloatConstant
    int DoubleConstant -> DoubleConstant
    int StringL -> StringL
    int TRUE -> TRUE
    int FALSE -> FALSE
    int NULL -> NULL
    int CALL -> CALL
    int ARRAY -> ARRAY
    int MEMBER -> MEMBER
    int EXPR -> EXPR
    int LABEL -> LABEL
    int BLOCK -> BLOCK
    int DECL -> DECL
    int BadToken -> BadToken
    void <clinit>() -> <clinit>
javassist.compiler.TypeChecker -> javassist.compiler.TypeChecker:
    java.lang.String javaLangObject -> javaLangObject
    java.lang.String jvmJavaLangObject -> jvmJavaLangObject
    java.lang.String jvmJavaLangString -> jvmJavaLangString
    java.lang.String jvmJavaLangClass -> jvmJavaLangClass
    int exprType -> exprType
    int arrayDim -> arrayDim
    java.lang.String className -> className
    javassist.compiler.MemberResolver resolver -> resolver
    javassist.CtClass thisClass -> thisClass
    javassist.bytecode.MethodInfo thisMethod -> thisMethod
    void <init>(javassist.CtClass,javassist.ClassPool) -> <init>
    java.lang.String argTypesToString(int[],int[],java.lang.String[]) -> argTypesToString
    java.lang.StringBuffer typeToString(java.lang.StringBuffer,int,int,java.lang.String) -> typeToString
    void setThisMethod(javassist.bytecode.MethodInfo) -> setThisMethod
    void fatal() -> fatal
    java.lang.String getThisName() -> getThisName
    java.lang.String getSuperName() -> getSuperName
    java.lang.String resolveClassName(javassist.compiler.ast.ASTList) -> resolveClassName
    java.lang.String resolveClassName(java.lang.String) -> resolveClassName
    void atNewExpr(javassist.compiler.ast.NewExpr) -> atNewExpr
    void atNewArrayExpr(javassist.compiler.ast.NewExpr) -> atNewArrayExpr
    void atArrayInit(javassist.compiler.ast.ArrayInit) -> atArrayInit
    void atMultiNewArray(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList) -> atMultiNewArray
    void atAssignExpr(javassist.compiler.ast.AssignExpr) -> atAssignExpr
    void atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree) -> atVariableAssign
    void atArrayAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Expr,javassist.compiler.ast.ASTree) -> atArrayAssign
    void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> atFieldAssign
    void atCondExpr(javassist.compiler.ast.CondExpr) -> atCondExpr
    void atBinExpr(javassist.compiler.ast.BinExpr) -> atBinExpr
    javassist.compiler.ast.Expr atPlusExpr(javassist.compiler.ast.BinExpr) -> atPlusExpr
    boolean isConstant(javassist.compiler.ast.BinExpr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> isConstant
    javassist.compiler.ast.ASTree stripPlusExpr(javassist.compiler.ast.ASTree) -> stripPlusExpr
    javassist.compiler.ast.ASTree getConstantFieldValue(javassist.compiler.ast.Member) -> getConstantFieldValue
    javassist.compiler.ast.ASTree getConstantFieldValue(javassist.CtField) -> getConstantFieldValue
    boolean isPlusExpr(javassist.compiler.ast.ASTree) -> isPlusExpr
    javassist.compiler.ast.Expr makeAppendCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> makeAppendCall
    void computeBinExprType(javassist.compiler.ast.BinExpr,int,int) -> computeBinExprType
    void booleanExpr(javassist.compiler.ast.ASTree) -> booleanExpr
    void insertCast(javassist.compiler.ast.BinExpr,int,int) -> insertCast
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr) -> atInstanceOfExpr
    void atExpr(javassist.compiler.ast.Expr) -> atExpr
    boolean isConstant(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree) -> isConstant
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void badMethod() -> badMethod
    java.lang.String isDotSuper(javassist.compiler.ast.ASTree) -> isDotSuper
    javassist.compiler.MemberResolver$Method atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList) -> atMethodCallCore
    int getMethodArgsLength(javassist.compiler.ast.ASTList) -> getMethodArgsLength
    void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[]) -> atMethodArgs
    void setReturnType(java.lang.String) -> setReturnType
    void atFieldRead(javassist.compiler.ast.ASTree) -> atFieldRead
    void atFieldRead(javassist.CtField) -> atFieldRead
    javassist.CtField fieldAccess(javassist.compiler.ast.ASTree) -> fieldAccess
    javassist.CtField fieldAccess2(javassist.compiler.ast.Expr,java.lang.String) -> fieldAccess2
    void atClassObject(javassist.compiler.ast.Expr) -> atClassObject
    void atArrayLength(javassist.compiler.ast.Expr) -> atArrayLength
    void atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> atArrayRead
    void atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr) -> atPlusPlus
    void atFieldPlusPlus(javassist.compiler.ast.ASTree) -> atFieldPlusPlus
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atVariable(javassist.compiler.ast.Variable) -> atVariable
    void atKeyword(javassist.compiler.ast.Keyword) -> atKeyword
    void atStringL(javassist.compiler.ast.StringL) -> atStringL
    void atIntConst(javassist.compiler.ast.IntConst) -> atIntConst
    void atDoubleConst(javassist.compiler.ast.DoubleConst) -> atDoubleConst
javassist.compiler.ast.ASTList -> javassist.compiler.ast.ASTList:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.ast.ASTree left -> left
    javassist.compiler.ast.ASTList right -> right
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    void <init>(javassist.compiler.ast.ASTree) -> <init>
    javassist.compiler.ast.ASTList make(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> make
    javassist.compiler.ast.ASTree getLeft() -> getLeft
    javassist.compiler.ast.ASTree getRight() -> getRight
    void setLeft(javassist.compiler.ast.ASTree) -> setLeft
    void setRight(javassist.compiler.ast.ASTree) -> setRight
    javassist.compiler.ast.ASTree head() -> head
    void setHead(javassist.compiler.ast.ASTree) -> setHead
    javassist.compiler.ast.ASTList tail() -> tail
    void setTail(javassist.compiler.ast.ASTList) -> setTail
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String toString() -> toString
    int length() -> length
    int length(javassist.compiler.ast.ASTList) -> length
    javassist.compiler.ast.ASTList sublist(int) -> sublist
    boolean subst(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> subst
    javassist.compiler.ast.ASTList append(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTree) -> append
    javassist.compiler.ast.ASTList concat(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList) -> concat
javassist.compiler.ast.ASTree -> javassist.compiler.ast.ASTree:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    javassist.compiler.ast.ASTree getLeft() -> getLeft
    javassist.compiler.ast.ASTree getRight() -> getRight
    void setLeft(javassist.compiler.ast.ASTree) -> setLeft
    void setRight(javassist.compiler.ast.ASTree) -> setRight
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String toString() -> toString
    java.lang.String getTag() -> getTag
javassist.compiler.ast.ArrayInit -> javassist.compiler.ast.ArrayInit:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.ast.ASTree) -> <init>
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String getTag() -> getTag
javassist.compiler.ast.AssignExpr -> javassist.compiler.ast.AssignExpr:
    long serialVersionUID -> serialVersionUID
    void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    javassist.compiler.ast.AssignExpr makeAssign(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> makeAssign
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.BinExpr -> javassist.compiler.ast.BinExpr:
    long serialVersionUID -> serialVersionUID
    void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    javassist.compiler.ast.BinExpr makeBin(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> makeBin
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.CallExpr -> javassist.compiler.ast.CallExpr:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.MemberResolver$Method method -> method
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    void setMethod(javassist.compiler.MemberResolver$Method) -> setMethod
    javassist.compiler.MemberResolver$Method getMethod() -> getMethod
    javassist.compiler.ast.CallExpr makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> makeCall
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.CastExpr -> javassist.compiler.ast.CastExpr:
    long serialVersionUID -> serialVersionUID
    int castType -> castType
    int arrayDim -> arrayDim
    void <init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree) -> <init>
    void <init>(int,int,javassist.compiler.ast.ASTree) -> <init>
    int getType() -> getType
    int getArrayDim() -> getArrayDim
    javassist.compiler.ast.ASTList getClassName() -> getClassName
    javassist.compiler.ast.ASTree getOprand() -> getOprand
    void setOprand(javassist.compiler.ast.ASTree) -> setOprand
    java.lang.String getTag() -> getTag
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.CondExpr -> javassist.compiler.ast.CondExpr:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> <init>
    javassist.compiler.ast.ASTree condExpr() -> condExpr
    void setCond(javassist.compiler.ast.ASTree) -> setCond
    javassist.compiler.ast.ASTree thenExpr() -> thenExpr
    void setThen(javassist.compiler.ast.ASTree) -> setThen
    javassist.compiler.ast.ASTree elseExpr() -> elseExpr
    void setElse(javassist.compiler.ast.ASTree) -> setElse
    java.lang.String getTag() -> getTag
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Declarator -> javassist.compiler.ast.Declarator:
    long serialVersionUID -> serialVersionUID
    int varType -> varType
    int arrayDim -> arrayDim
    int localVar -> localVar
    java.lang.String qualifiedClass -> qualifiedClass
    void <init>(int,int) -> <init>
    void <init>(javassist.compiler.ast.ASTList,int) -> <init>
    void <init>(int,java.lang.String,int,int,javassist.compiler.ast.Symbol) -> <init>
    javassist.compiler.ast.Declarator make(javassist.compiler.ast.Symbol,int,javassist.compiler.ast.ASTree) -> make
    int getType() -> getType
    int getArrayDim() -> getArrayDim
    void addArrayDim(int) -> addArrayDim
    java.lang.String getClassName() -> getClassName
    void setClassName(java.lang.String) -> setClassName
    javassist.compiler.ast.Symbol getVariable() -> getVariable
    void setVariable(javassist.compiler.ast.Symbol) -> setVariable
    javassist.compiler.ast.ASTree getInitializer() -> getInitializer
    void setLocalVar(int) -> setLocalVar
    int getLocalVar() -> getLocalVar
    java.lang.String getTag() -> getTag
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String astToClassName(javassist.compiler.ast.ASTList,char) -> astToClassName
    void astToClassName(java.lang.StringBuffer,javassist.compiler.ast.ASTList,char) -> astToClassName
javassist.compiler.ast.DoubleConst -> javassist.compiler.ast.DoubleConst:
    long serialVersionUID -> serialVersionUID
    double value -> value
    int type -> type
    void <init>(double,int) -> <init>
    double get() -> get
    void set(double) -> set
    int getType() -> getType
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
    javassist.compiler.ast.ASTree compute(int,javassist.compiler.ast.ASTree) -> compute
    javassist.compiler.ast.DoubleConst compute0(int,javassist.compiler.ast.DoubleConst) -> compute0
    javassist.compiler.ast.DoubleConst compute0(int,javassist.compiler.ast.IntConst) -> compute0
    javassist.compiler.ast.DoubleConst compute(int,double,double,int) -> compute
javassist.compiler.ast.Expr -> javassist.compiler.ast.Expr:
    long serialVersionUID -> serialVersionUID
    int operatorId -> operatorId
    void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    void <init>(int,javassist.compiler.ast.ASTree) -> <init>
    javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> make
    javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree) -> make
    int getOperator() -> getOperator
    void setOperator(int) -> setOperator
    javassist.compiler.ast.ASTree oprand1() -> oprand1
    void setOprand1(javassist.compiler.ast.ASTree) -> setOprand1
    javassist.compiler.ast.ASTree oprand2() -> oprand2
    void setOprand2(javassist.compiler.ast.ASTree) -> setOprand2
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String getName() -> getName
    java.lang.String getTag() -> getTag
javassist.compiler.ast.FieldDecl -> javassist.compiler.ast.FieldDecl:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    javassist.compiler.ast.ASTList getModifiers() -> getModifiers
    javassist.compiler.ast.Declarator getDeclarator() -> getDeclarator
    javassist.compiler.ast.ASTree getInit() -> getInit
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.InstanceOfExpr -> javassist.compiler.ast.InstanceOfExpr:
    long serialVersionUID -> serialVersionUID
    void <init>(javassist.compiler.ast.ASTList,int,javassist.compiler.ast.ASTree) -> <init>
    void <init>(int,int,javassist.compiler.ast.ASTree) -> <init>
    java.lang.String getTag() -> getTag
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.IntConst -> javassist.compiler.ast.IntConst:
    long serialVersionUID -> serialVersionUID
    long value -> value
    int type -> type
    void <init>(long,int) -> <init>
    long get() -> get
    void set(long) -> set
    int getType() -> getType
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
    javassist.compiler.ast.ASTree compute(int,javassist.compiler.ast.ASTree) -> compute
    javassist.compiler.ast.IntConst compute0(int,javassist.compiler.ast.IntConst) -> compute0
    javassist.compiler.ast.DoubleConst compute0(int,javassist.compiler.ast.DoubleConst) -> compute0
javassist.compiler.ast.Keyword -> javassist.compiler.ast.Keyword:
    long serialVersionUID -> serialVersionUID
    int tokenId -> tokenId
    void <init>(int) -> <init>
    int get() -> get
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Member -> javassist.compiler.ast.Member:
    long serialVersionUID -> serialVersionUID
    javassist.CtField field -> field
    void <init>(java.lang.String) -> <init>
    void setField(javassist.CtField) -> setField
    javassist.CtField getField() -> getField
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.MethodDecl -> javassist.compiler.ast.MethodDecl:
    long serialVersionUID -> serialVersionUID
    java.lang.String initName -> initName
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    boolean isConstructor() -> isConstructor
    javassist.compiler.ast.ASTList getModifiers() -> getModifiers
    javassist.compiler.ast.Declarator getReturn() -> getReturn
    javassist.compiler.ast.ASTList getParams() -> getParams
    javassist.compiler.ast.ASTList getThrows() -> getThrows
    javassist.compiler.ast.Stmnt getBody() -> getBody
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.NewExpr -> javassist.compiler.ast.NewExpr:
    long serialVersionUID -> serialVersionUID
    boolean newArray -> newArray
    int arrayType -> arrayType
    void <init>(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList) -> <init>
    void <init>(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit) -> <init>
    javassist.compiler.ast.NewExpr makeObjectArray(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList,javassist.compiler.ast.ArrayInit) -> makeObjectArray
    boolean isArray() -> isArray
    int getArrayType() -> getArrayType
    javassist.compiler.ast.ASTList getClassName() -> getClassName
    javassist.compiler.ast.ASTList getArguments() -> getArguments
    javassist.compiler.ast.ASTList getArraySize() -> getArraySize
    javassist.compiler.ast.ArrayInit getInitializer() -> getInitializer
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String getTag() -> getTag
javassist.compiler.ast.Pair -> javassist.compiler.ast.Pair:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.ast.ASTree left -> left
    javassist.compiler.ast.ASTree right -> right
    void <init>(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> <init>
    void accept(javassist.compiler.ast.Visitor) -> accept
    java.lang.String toString() -> toString
    javassist.compiler.ast.ASTree getLeft() -> getLeft
    javassist.compiler.ast.ASTree getRight() -> getRight
    void setLeft(javassist.compiler.ast.ASTree) -> setLeft
    void setRight(javassist.compiler.ast.ASTree) -> setRight
javassist.compiler.ast.Stmnt -> javassist.compiler.ast.Stmnt:
    long serialVersionUID -> serialVersionUID
    int operatorId -> operatorId
    void <init>(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTList) -> <init>
    void <init>(int,javassist.compiler.ast.ASTree) -> <init>
    void <init>(int) -> <init>
    javassist.compiler.ast.Stmnt make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> make
    javassist.compiler.ast.Stmnt make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree) -> make
    void accept(javassist.compiler.ast.Visitor) -> accept
    int getOperator() -> getOperator
    java.lang.String getTag() -> getTag
javassist.compiler.ast.StringL -> javassist.compiler.ast.StringL:
    long serialVersionUID -> serialVersionUID
    java.lang.String text -> text
    void <init>(java.lang.String) -> <init>
    java.lang.String get() -> get
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Symbol -> javassist.compiler.ast.Symbol:
    long serialVersionUID -> serialVersionUID
    java.lang.String identifier -> identifier
    void <init>(java.lang.String) -> <init>
    java.lang.String get() -> get
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Variable -> javassist.compiler.ast.Variable:
    long serialVersionUID -> serialVersionUID
    javassist.compiler.ast.Declarator declarator -> declarator
    void <init>(java.lang.String,javassist.compiler.ast.Declarator) -> <init>
    javassist.compiler.ast.Declarator getDeclarator() -> getDeclarator
    java.lang.String toString() -> toString
    void accept(javassist.compiler.ast.Visitor) -> accept
javassist.compiler.ast.Visitor -> javassist.compiler.ast.Visitor:
    void <init>() -> <init>
    void atASTList(javassist.compiler.ast.ASTList) -> atASTList
    void atPair(javassist.compiler.ast.Pair) -> atPair
    void atFieldDecl(javassist.compiler.ast.FieldDecl) -> atFieldDecl
    void atMethodDecl(javassist.compiler.ast.MethodDecl) -> atMethodDecl
    void atStmnt(javassist.compiler.ast.Stmnt) -> atStmnt
    void atDeclarator(javassist.compiler.ast.Declarator) -> atDeclarator
    void atAssignExpr(javassist.compiler.ast.AssignExpr) -> atAssignExpr
    void atCondExpr(javassist.compiler.ast.CondExpr) -> atCondExpr
    void atBinExpr(javassist.compiler.ast.BinExpr) -> atBinExpr
    void atExpr(javassist.compiler.ast.Expr) -> atExpr
    void atCallExpr(javassist.compiler.ast.CallExpr) -> atCallExpr
    void atCastExpr(javassist.compiler.ast.CastExpr) -> atCastExpr
    void atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr) -> atInstanceOfExpr
    void atNewExpr(javassist.compiler.ast.NewExpr) -> atNewExpr
    void atSymbol(javassist.compiler.ast.Symbol) -> atSymbol
    void atMember(javassist.compiler.ast.Member) -> atMember
    void atVariable(javassist.compiler.ast.Variable) -> atVariable
    void atKeyword(javassist.compiler.ast.Keyword) -> atKeyword
    void atStringL(javassist.compiler.ast.StringL) -> atStringL
    void atIntConst(javassist.compiler.ast.IntConst) -> atIntConst
    void atDoubleConst(javassist.compiler.ast.DoubleConst) -> atDoubleConst
    void atArrayInit(javassist.compiler.ast.ArrayInit) -> atArrayInit
javassist.convert.TransformAccessArrayField -> javassist.convert.TransformAccessArrayField:
    java.lang.String methodClassname -> methodClassname
    javassist.CodeConverter$ArrayAccessReplacementMethodNames names -> names
    javassist.bytecode.analysis.Frame[] frames -> frames
    int offset -> offset
    void <init>(javassist.convert.Transformer,java.lang.String,javassist.CodeConverter$ArrayAccessReplacementMethodNames) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.CtClass,javassist.bytecode.MethodInfo) -> initialize
    void clean() -> clean
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
    javassist.bytecode.analysis.Frame getFrame(int) -> getFrame
    void initFrames(javassist.CtClass,javassist.bytecode.MethodInfo) -> initFrames
    int updatePos(int,int) -> updatePos
    java.lang.String getTopType(int) -> getTopType
    int replace(javassist.bytecode.ConstPool,javassist.bytecode.CodeIterator,int,int,java.lang.String) -> replace
    java.lang.String getMethodName(int) -> getMethodName
    java.lang.String getLoadReplacementSignature(int) -> getLoadReplacementSignature
    java.lang.String getStoreReplacementSignature(int) -> getStoreReplacementSignature
javassist.convert.TransformAfter -> javassist.convert.TransformAfter:
    void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod) -> <init>
    int match2(int,javassist.bytecode.CodeIterator) -> match2
javassist.convert.TransformBefore -> javassist.convert.TransformBefore:
    javassist.CtClass[] parameterTypes -> parameterTypes
    int locals -> locals
    int maxLocals -> maxLocals
    byte[] saveCode -> saveCode
    byte[] loadCode -> loadCode
    void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int match(int,int,javassist.bytecode.CodeIterator,int,javassist.bytecode.ConstPool) -> match
    int match2(int,javassist.bytecode.CodeIterator) -> match2
    int extraLocals() -> extraLocals
    void makeCode(javassist.CtClass[],javassist.bytecode.ConstPool) -> makeCode
    void makeCode2(javassist.bytecode.Bytecode,javassist.bytecode.Bytecode,int,int,javassist.CtClass[],int) -> makeCode2
javassist.convert.TransformCall -> javassist.convert.TransformCall:
    java.lang.String classname -> classname
    java.lang.String methodname -> methodname
    java.lang.String methodDescriptor -> methodDescriptor
    java.lang.String newClassname -> newClassname
    java.lang.String newMethodname -> newMethodname
    boolean newMethodIsPrivate -> newMethodIsPrivate
    int newIndex -> newIndex
    javassist.bytecode.ConstPool constPool -> constPool
    void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod) -> <init>
    void <init>(javassist.convert.Transformer,java.lang.String,javassist.CtMethod) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
    boolean matchClass(java.lang.String,javassist.ClassPool) -> matchClass
    int match(int,int,javassist.bytecode.CodeIterator,int,javassist.bytecode.ConstPool) -> match
javassist.convert.TransformCallToStatic -> javassist.convert.TransformCallToStatic:
    void <init>(javassist.convert.Transformer,javassist.CtMethod,javassist.CtMethod) -> <init>
    int match(int,int,javassist.bytecode.CodeIterator,int,javassist.bytecode.ConstPool) -> match
javassist.convert.TransformFieldAccess -> javassist.convert.TransformFieldAccess:
    java.lang.String newClassname -> newClassname
    java.lang.String newFieldname -> newFieldname
    java.lang.String fieldname -> fieldname
    javassist.CtClass fieldClass -> fieldClass
    boolean isPrivate -> isPrivate
    int newIndex -> newIndex
    javassist.bytecode.ConstPool constPool -> constPool
    void <init>(javassist.convert.Transformer,javassist.CtField,java.lang.String,java.lang.String) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
javassist.convert.TransformNew -> javassist.convert.TransformNew:
    int nested -> nested
    java.lang.String classname -> classname
    java.lang.String trapClass -> trapClass
    java.lang.String trapMethod -> trapMethod
    void <init>(javassist.convert.Transformer,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
    int computeMethodref(int,javassist.bytecode.ConstPool) -> computeMethodref
javassist.convert.TransformNewClass -> javassist.convert.TransformNewClass:
    int nested -> nested
    java.lang.String classname -> classname
    java.lang.String newClassName -> newClassName
    int newClassIndex -> newClassIndex
    int newMethodNTIndex -> newMethodNTIndex
    int newMethodIndex -> newMethodIndex
    void <init>(javassist.convert.Transformer,java.lang.String,java.lang.String) -> <init>
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
javassist.convert.TransformReadField -> javassist.convert.TransformReadField:
    java.lang.String fieldname -> fieldname
    javassist.CtClass fieldClass -> fieldClass
    boolean isPrivate -> isPrivate
    java.lang.String methodClassname -> methodClassname
    java.lang.String methodName -> methodName
    void <init>(javassist.convert.Transformer,javassist.CtField,java.lang.String,java.lang.String) -> <init>
    java.lang.String isField(javassist.ClassPool,javassist.bytecode.ConstPool,javassist.CtClass,java.lang.String,boolean,int) -> isField
    boolean isFieldInSuper(javassist.CtClass,javassist.CtClass,java.lang.String) -> isFieldInSuper
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
javassist.convert.TransformWriteField -> javassist.convert.TransformWriteField:
    void <init>(javassist.convert.Transformer,javassist.CtField,java.lang.String,java.lang.String) -> <init>
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
javassist.convert.Transformer -> javassist.convert.Transformer:
    javassist.convert.Transformer next -> next
    void <init>(javassist.convert.Transformer) -> <init>
    javassist.convert.Transformer getNext() -> getNext
    void initialize(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute) -> initialize
    void initialize(javassist.bytecode.ConstPool,javassist.CtClass,javassist.bytecode.MethodInfo) -> initialize
    void clean() -> clean
    int transform(javassist.CtClass,int,javassist.bytecode.CodeIterator,javassist.bytecode.ConstPool) -> transform
    int extraLocals() -> extraLocals
    int extraStack() -> extraStack
javassist.expr.Cast -> javassist.expr.Cast:
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass getType() -> getType
    javassist.CtClass[] mayThrow() -> mayThrow
    void replace(java.lang.String) -> replace
javassist.expr.Cast$ProceedForCast -> javassist.expr.Cast$ProceedForCast:
    int index -> index
    javassist.CtClass retType -> retType
    void <init>(int,javassist.CtClass) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.ConstructorCall -> javassist.expr.ConstructorCall:
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    java.lang.String getMethodName() -> getMethodName
    javassist.CtMethod getMethod() -> getMethod
    javassist.CtConstructor getConstructor() -> getConstructor
    boolean isSuper() -> isSuper
javassist.expr.Expr -> javassist.expr.Expr:
    int currentPos -> currentPos
    javassist.bytecode.CodeIterator iterator -> iterator
    javassist.CtClass thisClass -> thisClass
    javassist.bytecode.MethodInfo thisMethod -> thisMethod
    boolean edited -> edited
    int maxLocals -> maxLocals
    int maxStack -> maxStack
    java.lang.String javaLangObject -> javaLangObject
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.CtClass getEnclosingClass() -> getEnclosingClass
    javassist.bytecode.ConstPool getConstPool() -> getConstPool
    boolean edited() -> edited
    int locals() -> locals
    int stack() -> stack
    boolean withinStatic() -> withinStatic
    javassist.CtBehavior where() -> where
    javassist.CtClass[] mayThrow() -> mayThrow
    void addClass(java.util.List,javassist.CtClass) -> addClass
    int indexOfBytecode() -> indexOfBytecode
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    boolean checkResultValue(javassist.CtClass,java.lang.String) -> checkResultValue
    void storeStack(javassist.CtClass[],boolean,int,javassist.bytecode.Bytecode) -> storeStack
    void storeStack0(int,int,javassist.CtClass[],int,javassist.bytecode.Bytecode) -> storeStack0
    void replace(java.lang.String) -> replace
    void replace(java.lang.String,javassist.expr.ExprEditor) -> replace
    void replace0(int,javassist.bytecode.Bytecode,int) -> replace0
    void runEditor(javassist.expr.ExprEditor,javassist.bytecode.CodeIterator) -> runEditor
javassist.expr.ExprEditor -> javassist.expr.ExprEditor:
    void <init>() -> <init>
    boolean doit(javassist.CtClass,javassist.bytecode.MethodInfo) -> doit
    boolean doit(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.expr.ExprEditor$LoopContext,javassist.bytecode.CodeIterator,int) -> doit
    boolean loopBody(javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo,javassist.expr.ExprEditor$LoopContext) -> loopBody
    void edit(javassist.expr.NewExpr) -> edit
    void edit(javassist.expr.NewArray) -> edit
    void edit(javassist.expr.MethodCall) -> edit
    void edit(javassist.expr.ConstructorCall) -> edit
    void edit(javassist.expr.FieldAccess) -> edit
    void edit(javassist.expr.Instanceof) -> edit
    void edit(javassist.expr.Cast) -> edit
    void edit(javassist.expr.Handler) -> edit
javassist.expr.ExprEditor$LoopContext -> javassist.expr.ExprEditor$LoopContext:
    javassist.expr.ExprEditor$NewOp newList -> newList
    int maxLocals -> maxLocals
    int maxStack -> maxStack
    void <init>(int) -> <init>
    void updateMax(int,int) -> updateMax
javassist.expr.ExprEditor$NewOp -> javassist.expr.ExprEditor$NewOp:
    javassist.expr.ExprEditor$NewOp next -> next
    int pos -> pos
    java.lang.String type -> type
    void <init>(javassist.expr.ExprEditor$NewOp,int,java.lang.String) -> <init>
javassist.expr.FieldAccess -> javassist.expr.FieldAccess:
    int opcode -> opcode
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo,int) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    boolean isStatic() -> isStatic
    boolean isStatic(int) -> isStatic
    boolean isReader() -> isReader
    boolean isWriter() -> isWriter
    javassist.CtClass getCtClass() -> getCtClass
    java.lang.String getClassName() -> getClassName
    java.lang.String getFieldName() -> getFieldName
    javassist.CtField getField() -> getField
    javassist.CtClass[] mayThrow() -> mayThrow
    java.lang.String getSignature() -> getSignature
    void replace(java.lang.String) -> replace
javassist.expr.FieldAccess$ProceedForRead -> javassist.expr.FieldAccess$ProceedForRead:
    javassist.CtClass fieldType -> fieldType
    int opcode -> opcode
    int targetVar -> targetVar
    int index -> index
    void <init>(javassist.CtClass,int,int,int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.FieldAccess$ProceedForWrite -> javassist.expr.FieldAccess$ProceedForWrite:
    javassist.CtClass fieldType -> fieldType
    int opcode -> opcode
    int targetVar -> targetVar
    int index -> index
    void <init>(javassist.CtClass,int,int,int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.Handler -> javassist.expr.Handler:
    java.lang.String EXCEPTION_NAME -> EXCEPTION_NAME
    javassist.bytecode.ExceptionTable etable -> etable
    int index -> index
    void <init>(javassist.bytecode.ExceptionTable,int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass[] mayThrow() -> mayThrow
    javassist.CtClass getType() -> getType
    boolean isFinally() -> isFinally
    void replace(java.lang.String) -> replace
    void insertBefore(java.lang.String) -> insertBefore
    void <clinit>() -> <clinit>
javassist.expr.Instanceof -> javassist.expr.Instanceof:
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass getType() -> getType
    javassist.CtClass[] mayThrow() -> mayThrow
    void replace(java.lang.String) -> replace
javassist.expr.Instanceof$ProceedForInstanceof -> javassist.expr.Instanceof$ProceedForInstanceof:
    int index -> index
    void <init>(int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.MethodCall -> javassist.expr.MethodCall:
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo) -> <init>
    int getNameAndType(javassist.bytecode.ConstPool) -> getNameAndType
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass getCtClass() -> getCtClass
    java.lang.String getClassName() -> getClassName
    java.lang.String getMethodName() -> getMethodName
    javassist.CtMethod getMethod() -> getMethod
    java.lang.String getSignature() -> getSignature
    javassist.CtClass[] mayThrow() -> mayThrow
    boolean isSuper() -> isSuper
    void replace(java.lang.String) -> replace
javassist.expr.NewArray -> javassist.expr.NewArray:
    int opcode -> opcode
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo,int) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass[] mayThrow() -> mayThrow
    javassist.CtClass getComponentType() -> getComponentType
    javassist.CtClass getPrimitiveType(int) -> getPrimitiveType
    int getDimension() -> getDimension
    int getCreatedDimensions() -> getCreatedDimensions
    void replace(java.lang.String) -> replace
    void replace2(java.lang.String) -> replace2
javassist.expr.NewArray$ProceedForArray -> javassist.expr.NewArray$ProceedForArray:
    javassist.CtClass arrayType -> arrayType
    int opcode -> opcode
    int index -> index
    int dimension -> dimension
    void <init>(javassist.CtClass,int,int,int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.expr.NewExpr -> javassist.expr.NewExpr:
    java.lang.String newTypeName -> newTypeName
    int newPos -> newPos
    void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo,java.lang.String,int) -> <init>
    javassist.CtBehavior where() -> where
    int getLineNumber() -> getLineNumber
    java.lang.String getFileName() -> getFileName
    javassist.CtClass getCtClass() -> getCtClass
    java.lang.String getClassName() -> getClassName
    java.lang.String getSignature() -> getSignature
    javassist.CtConstructor getConstructor() -> getConstructor
    javassist.CtClass[] mayThrow() -> mayThrow
    int canReplace() -> canReplace
    void replace(java.lang.String) -> replace
javassist.expr.NewExpr$ProceedForNew -> javassist.expr.NewExpr$ProceedForNew:
    javassist.CtClass newType -> newType
    int newIndex -> newIndex
    int methodIndex -> methodIndex
    void <init>(javassist.CtClass,int,int) -> <init>
    void doit(javassist.compiler.JvstCodeGen,javassist.bytecode.Bytecode,javassist.compiler.ast.ASTList) -> doit
    void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList) -> setReturnType
javassist.runtime.Cflow -> javassist.runtime.Cflow:
    void <init>() -> <init>
    javassist.runtime.Cflow$Depth initialValue() -> initialValue
    void enter() -> enter
    void exit() -> exit
    int value() -> value
    java.lang.Object initialValue() -> initialValue
javassist.runtime.Cflow$Depth -> javassist.runtime.Cflow$Depth:
    int depth -> depth
    void <init>() -> <init>
    int value() -> value
    void inc() -> inc
    void dec() -> dec
javassist.runtime.Desc -> javassist.runtime.Desc:
    boolean useContextClassLoader -> useContextClassLoader
    java.lang.ThreadLocal USE_CONTEXT_CLASS_LOADER_LOCALLY -> USE_CONTEXT_CLASS_LOADER_LOCALLY
    void <init>() -> <init>
    void setUseContextClassLoaderLocally() -> setUseContextClassLoaderLocally
    void resetUseContextClassLoaderLocally() -> resetUseContextClassLoaderLocally
    java.lang.Class getClassObject(java.lang.String) -> getClassObject
    java.lang.Class getClazz(java.lang.String) -> getClazz
    java.lang.Class[] getParams(java.lang.String) -> getParams
    java.lang.Class getType(java.lang.String) -> getType
    java.lang.Class[] getType(java.lang.String,int,int,int) -> getType
    java.lang.Class[] getClassType(java.lang.String,int,int,int) -> getClassType
    void <clinit>() -> <clinit>
javassist.runtime.Desc$1 -> javassist.runtime.Desc$1:
    void <init>() -> <init>
    java.lang.Boolean initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
javassist.runtime.DotClass -> javassist.runtime.DotClass:
    void <init>() -> <init>
    java.lang.NoClassDefFoundError fail(java.lang.ClassNotFoundException) -> fail
javassist.runtime.Inner -> javassist.runtime.Inner:
    void <init>() -> <init>
javassist.scopedpool.ScopedClassPool -> javassist.scopedpool.ScopedClassPool:
    javassist.scopedpool.ScopedClassPoolRepository repository -> repository
    java.lang.ref.Reference classLoader -> classLoader
    javassist.LoaderClassPath classPath -> classPath
    java.util.Map softcache -> softcache
    boolean isBootstrapCl -> isBootstrapCl
    void <init>(java.lang.ClassLoader,javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> <init>
    void <init>(java.lang.ClassLoader,javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository,boolean) -> <init>
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    java.lang.ClassLoader getClassLoader0() -> getClassLoader0
    void close() -> close
    void flushClass(java.lang.String) -> flushClass
    void soften(javassist.CtClass) -> soften
    boolean isUnloadedClassLoader() -> isUnloadedClassLoader
    javassist.CtClass getCached(java.lang.String) -> getCached
    void cacheCtClass(java.lang.String,javassist.CtClass,boolean) -> cacheCtClass
    void lockInCache(javassist.CtClass) -> lockInCache
    javassist.CtClass getCachedLocally(java.lang.String) -> getCachedLocally
    javassist.CtClass getLocally(java.lang.String) -> getLocally
    java.lang.Class toClass(javassist.CtClass,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    void <clinit>() -> <clinit>
javassist.scopedpool.ScopedClassPoolFactory -> javassist.scopedpool.ScopedClassPoolFactory:
    javassist.scopedpool.ScopedClassPool create(java.lang.ClassLoader,javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> create
    javassist.scopedpool.ScopedClassPool create(javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> create
javassist.scopedpool.ScopedClassPoolFactoryImpl -> javassist.scopedpool.ScopedClassPoolFactoryImpl:
    void <init>() -> <init>
    javassist.scopedpool.ScopedClassPool create(java.lang.ClassLoader,javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> create
    javassist.scopedpool.ScopedClassPool create(javassist.ClassPool,javassist.scopedpool.ScopedClassPoolRepository) -> create
javassist.scopedpool.ScopedClassPoolRepository -> javassist.scopedpool.ScopedClassPoolRepository:
    void setClassPoolFactory(javassist.scopedpool.ScopedClassPoolFactory) -> setClassPoolFactory
    javassist.scopedpool.ScopedClassPoolFactory getClassPoolFactory() -> getClassPoolFactory
    boolean isPrune() -> isPrune
    void setPrune(boolean) -> setPrune
    javassist.scopedpool.ScopedClassPool createScopedClassPool(java.lang.ClassLoader,javassist.ClassPool) -> createScopedClassPool
    javassist.ClassPool findClassPool(java.lang.ClassLoader) -> findClassPool
    javassist.ClassPool registerClassLoader(java.lang.ClassLoader) -> registerClassLoader
    java.util.Map getRegisteredCLs() -> getRegisteredCLs
    void clearUnregisteredClassLoaders() -> clearUnregisteredClassLoaders
    void unregisterClassLoader(java.lang.ClassLoader) -> unregisterClassLoader
javassist.scopedpool.ScopedClassPoolRepositoryImpl -> javassist.scopedpool.ScopedClassPoolRepositoryImpl:
    javassist.scopedpool.ScopedClassPoolRepositoryImpl instance -> instance
    boolean prune -> prune
    boolean pruneWhenCached -> pruneWhenCached
    java.util.Map registeredCLs -> registeredCLs
    javassist.ClassPool classpool -> classpool
    javassist.scopedpool.ScopedClassPoolFactory factory -> factory
    javassist.scopedpool.ScopedClassPoolRepository getInstance() -> getInstance
    void <init>() -> <init>
    boolean isPrune() -> isPrune
    void setPrune(boolean) -> setPrune
    javassist.scopedpool.ScopedClassPool createScopedClassPool(java.lang.ClassLoader,javassist.ClassPool) -> createScopedClassPool
    javassist.ClassPool findClassPool(java.lang.ClassLoader) -> findClassPool
    javassist.ClassPool registerClassLoader(java.lang.ClassLoader) -> registerClassLoader
    java.util.Map getRegisteredCLs() -> getRegisteredCLs
    void clearUnregisteredClassLoaders() -> clearUnregisteredClassLoaders
    void unregisterClassLoader(java.lang.ClassLoader) -> unregisterClassLoader
    void insertDelegate(javassist.scopedpool.ScopedClassPoolRepository) -> insertDelegate
    void setClassPoolFactory(javassist.scopedpool.ScopedClassPoolFactory) -> setClassPoolFactory
    javassist.scopedpool.ScopedClassPoolFactory getClassPoolFactory() -> getClassPoolFactory
    void <clinit>() -> <clinit>
javassist.scopedpool.SoftValueHashMap -> javassist.scopedpool.SoftValueHashMap:
    java.util.Map hash -> hash
    java.lang.ref.ReferenceQueue queue -> queue
    java.util.Set entrySet() -> entrySet
    void processQueue() -> processQueue
    void <init>(int,float) -> <init>
    void <init>(int) -> <init>
    void <init>() -> <init>
    void <init>(java.util.Map) -> <init>
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set keySet() -> keySet
    void putAll(java.util.Map) -> putAll
    java.util.Collection values() -> values
    java.lang.Object valueOrNull(javassist.scopedpool.SoftValueHashMap$SoftValueRef) -> valueOrNull
javassist.scopedpool.SoftValueHashMap$SoftValueRef -> javassist.scopedpool.SoftValueHashMap$SoftValueRef:
    java.lang.Object key -> key
    void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue) -> <init>
    javassist.scopedpool.SoftValueHashMap$SoftValueRef create(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue) -> create
    javassist.scopedpool.SoftValueHashMap$SoftValueRef access$000(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue) -> access$000
javassist.tools.Callback -> javassist.tools.Callback:
    java.util.Map callbacks -> callbacks
    java.lang.String sourceCode -> sourceCode
    void <init>(java.lang.String) -> <init>
    void result(java.lang.Object[]) -> result
    java.lang.String toString() -> toString
    java.lang.String sourceCode() -> sourceCode
    void insertBefore(javassist.CtBehavior,javassist.tools.Callback) -> insertBefore
    void insertAfter(javassist.CtBehavior,javassist.tools.Callback) -> insertAfter
    void insertAfter(javassist.CtBehavior,javassist.tools.Callback,boolean) -> insertAfter
    int insertAt(javassist.CtBehavior,javassist.tools.Callback,int) -> insertAt
    void <clinit>() -> <clinit>
javassist.tools.Dump -> javassist.tools.Dump:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
javassist.tools.framedump -> javassist.tools.framedump:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
javassist.tools.reflect.CannotCreateException -> javassist.tools.reflect.CannotCreateException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Exception) -> <init>
javassist.tools.reflect.CannotInvokeException -> javassist.tools.reflect.CannotInvokeException:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable err -> err
    java.lang.Throwable getReason() -> getReason
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.reflect.InvocationTargetException) -> <init>
    void <init>(java.lang.IllegalAccessException) -> <init>
    void <init>(java.lang.ClassNotFoundException) -> <init>
javassist.tools.reflect.CannotReflectException -> javassist.tools.reflect.CannotReflectException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
javassist.tools.reflect.ClassMetaobject -> javassist.tools.reflect.ClassMetaobject:
    long serialVersionUID -> serialVersionUID
    java.lang.String methodPrefix -> methodPrefix
    int methodPrefixLen -> methodPrefixLen
    java.lang.Class javaClass -> javaClass
    java.lang.reflect.Constructor[] constructors -> constructors
    java.lang.reflect.Method[] methods -> methods
    boolean useContextClassLoader -> useContextClassLoader
    void <init>(java.lang.String[]) -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.Class getClassObject(java.lang.String) -> getClassObject
    java.lang.Class getJavaClass() -> getJavaClass
    java.lang.String getName() -> getName
    boolean isInstance(java.lang.Object) -> isInstance
    java.lang.Object newInstance(java.lang.Object[]) -> newInstance
    java.lang.Object trapFieldRead(java.lang.String) -> trapFieldRead
    void trapFieldWrite(java.lang.String,java.lang.Object) -> trapFieldWrite
    java.lang.Object invoke(java.lang.Object,int,java.lang.Object[]) -> invoke
    java.lang.Object trapMethodcall(int,java.lang.Object[]) -> trapMethodcall
    java.lang.reflect.Method[] getReflectiveMethods() -> getReflectiveMethods
    java.lang.reflect.Method getMethod(int) -> getMethod
    java.lang.String getMethodName(int) -> getMethodName
    java.lang.Class[] getParameterTypes(int) -> getParameterTypes
    java.lang.Class getReturnType(int) -> getReturnType
    int getMethodIndex(java.lang.String,java.lang.Class[]) -> getMethodIndex
    void <clinit>() -> <clinit>
javassist.tools.reflect.CompiledClass -> javassist.tools.reflect.CompiledClass:
    java.lang.String classname -> classname
    java.lang.String metaobject -> metaobject
    java.lang.String classobject -> classobject
    void <init>() -> <init>
javassist.tools.reflect.Compiler -> javassist.tools.reflect.Compiler:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void processClasses(javassist.tools.reflect.CompiledClass[],int) -> processClasses
    int parse(java.lang.String[],javassist.tools.reflect.CompiledClass[]) -> parse
    void help(java.io.PrintStream) -> help
javassist.tools.reflect.Loader -> javassist.tools.reflect.Loader:
    javassist.tools.reflect.Reflection reflection -> reflection
    void main(java.lang.String[]) -> main
    void <init>() -> <init>
    boolean makeReflective(java.lang.String,java.lang.String,java.lang.String) -> makeReflective
javassist.tools.reflect.Metalevel -> javassist.tools.reflect.Metalevel:
    javassist.tools.reflect.ClassMetaobject _getClass() -> _getClass
    javassist.tools.reflect.Metaobject _getMetaobject() -> _getMetaobject
    void _setMetaobject(javassist.tools.reflect.Metaobject) -> _setMetaobject
javassist.tools.reflect.Metaobject -> javassist.tools.reflect.Metaobject:
    long serialVersionUID -> serialVersionUID
    javassist.tools.reflect.ClassMetaobject classmetaobject -> classmetaobject
    javassist.tools.reflect.Metalevel baseobject -> baseobject
    java.lang.reflect.Method[] methods -> methods
    void <init>(java.lang.Object,java.lang.Object[]) -> <init>
    void <init>() -> <init>
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    javassist.tools.reflect.ClassMetaobject getClassMetaobject() -> getClassMetaobject
    java.lang.Object getObject() -> getObject
    void setObject(java.lang.Object) -> setObject
    java.lang.String getMethodName(int) -> getMethodName
    java.lang.Class[] getParameterTypes(int) -> getParameterTypes
    java.lang.Class getReturnType(int) -> getReturnType
    java.lang.Object trapFieldRead(java.lang.String) -> trapFieldRead
    void trapFieldWrite(java.lang.String,java.lang.Object) -> trapFieldWrite
    java.lang.Object trapMethodcall(int,java.lang.Object[]) -> trapMethodcall
javassist.tools.reflect.Reflection -> javassist.tools.reflect.Reflection:
    java.lang.String classobjectField -> classobjectField
    java.lang.String classobjectAccessor -> classobjectAccessor
    java.lang.String metaobjectField -> metaobjectField
    java.lang.String metaobjectGetter -> metaobjectGetter
    java.lang.String metaobjectSetter -> metaobjectSetter
    java.lang.String readPrefix -> readPrefix
    java.lang.String writePrefix -> writePrefix
    java.lang.String metaobjectClassName -> metaobjectClassName
    java.lang.String classMetaobjectClassName -> classMetaobjectClassName
    javassist.CtMethod trapMethod -> trapMethod
    javassist.CtMethod trapStaticMethod -> trapStaticMethod
    javassist.CtMethod trapRead -> trapRead
    javassist.CtMethod trapWrite -> trapWrite
    javassist.CtClass[] readParam -> readParam
    javassist.ClassPool classPool -> classPool
    javassist.CodeConverter converter -> converter
    boolean isExcluded(java.lang.String) -> isExcluded
    void <init>() -> <init>
    void start(javassist.ClassPool) -> start
    void onLoad(javassist.ClassPool,java.lang.String) -> onLoad
    boolean makeReflective(java.lang.String,java.lang.String,java.lang.String) -> makeReflective
    boolean makeReflective(java.lang.Class,java.lang.Class,java.lang.Class) -> makeReflective
    boolean makeReflective(javassist.CtClass,javassist.CtClass,javassist.CtClass) -> makeReflective
    void registerReflectiveClass(javassist.CtClass) -> registerReflectiveClass
    boolean modifyClassfile(javassist.CtClass,javassist.CtClass,javassist.CtClass) -> modifyClassfile
    void processMethods(javassist.CtClass,boolean) -> processMethods
    void processMethods0(int,javassist.CtClass,javassist.CtMethod,int,boolean) -> processMethods0
    javassist.CtMethod findOriginal(javassist.CtMethod,boolean) -> findOriginal
    void processFields(javassist.CtClass) -> processFields
    void rebuildClassFile(javassist.bytecode.ClassFile) -> rebuildClassFile
javassist.tools.reflect.Sample -> javassist.tools.reflect.Sample:
    javassist.tools.reflect.Metaobject _metaobject -> _metaobject
    javassist.tools.reflect.ClassMetaobject _classobject -> _classobject
    void <init>() -> <init>
    java.lang.Object trap(java.lang.Object[],int) -> trap
    java.lang.Object trapStatic(java.lang.Object[],int) -> trapStatic
    java.lang.Object trapRead(java.lang.Object[],java.lang.String) -> trapRead
    java.lang.Object trapWrite(java.lang.Object[],java.lang.String) -> trapWrite
javassist.tools.rmi.AppletServer -> javassist.tools.rmi.AppletServer:
    javassist.tools.rmi.StubGenerator stubGen -> stubGen
    java.util.Map exportedNames -> exportedNames
    java.util.List exportedObjects -> exportedObjects
    byte[] okHeader -> okHeader
    void <init>(java.lang.String) -> <init>
    void <init>(int) -> <init>
    void <init>(int,javassist.ClassPool) -> <init>
    void <init>(javassist.ClassPool,javassist.tools.rmi.StubGenerator,int) -> <init>
    void run() -> run
    int exportObject(java.lang.String,java.lang.Object) -> exportObject
    void doReply(java.io.InputStream,java.io.OutputStream,java.lang.String) -> doReply
    void processRMI(java.io.InputStream,java.io.OutputStream) -> processRMI
    java.lang.Object[] readParameters(java.io.ObjectInputStream) -> readParameters
    java.lang.Object convertRvalue(java.lang.Object) -> convertRvalue
    void lookupName(java.lang.String,java.io.InputStream,java.io.OutputStream) -> lookupName
    void <clinit>() -> <clinit>
javassist.tools.rmi.ExportedObject -> javassist.tools.rmi.ExportedObject:
    int identifier -> identifier
    java.lang.Object object -> object
    java.lang.reflect.Method[] methods -> methods
    void <init>() -> <init>
javassist.tools.rmi.ObjectImporter -> javassist.tools.rmi.ObjectImporter:
    long serialVersionUID -> serialVersionUID
    byte[] endofline -> endofline
    java.lang.String servername -> servername
    java.lang.String orgServername -> orgServername
    int port -> port
    int orgPort -> orgPort
    byte[] lookupCommand -> lookupCommand
    byte[] rmiCommand -> rmiCommand
    java.lang.Class[] proxyConstructorParamTypes -> proxyConstructorParamTypes
    void <init>(java.applet.Applet) -> <init>
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object getObject(java.lang.String) -> getObject
    void setHttpProxy(java.lang.String,int) -> setHttpProxy
    java.lang.Object lookupObject(java.lang.String) -> lookupObject
    java.lang.Object createProxy(int,java.lang.String) -> createProxy
    java.lang.Object call(int,int,java.lang.Object[]) -> call
    void skipHeader(java.io.InputStream) -> skipHeader
    void writeParameters(java.io.ObjectOutputStream,java.lang.Object[]) -> writeParameters
    void <clinit>() -> <clinit>
javassist.tools.rmi.ObjectNotFoundException -> javassist.tools.rmi.ObjectNotFoundException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Exception) -> <init>
javassist.tools.rmi.Proxy -> javassist.tools.rmi.Proxy:
    int _getObjectId() -> _getObjectId
javassist.tools.rmi.RemoteException -> javassist.tools.rmi.RemoteException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Exception) -> <init>
javassist.tools.rmi.RemoteRef -> javassist.tools.rmi.RemoteRef:
    long serialVersionUID -> serialVersionUID
    int oid -> oid
    java.lang.String classname -> classname
    void <init>(int) -> <init>
    void <init>(int,java.lang.String) -> <init>
javassist.tools.rmi.Sample -> javassist.tools.rmi.Sample:
    javassist.tools.rmi.ObjectImporter importer -> importer
    int objectId -> objectId
    void <init>() -> <init>
    java.lang.Object forward(java.lang.Object[],int) -> forward
    java.lang.Object forwardStatic(java.lang.Object[],int) -> forwardStatic
javassist.tools.rmi.StubGenerator -> javassist.tools.rmi.StubGenerator:
    java.lang.String fieldImporter -> fieldImporter
    java.lang.String fieldObjectId -> fieldObjectId
    java.lang.String accessorObjectId -> accessorObjectId
    java.lang.String sampleClass -> sampleClass
    javassist.ClassPool classPool -> classPool
    java.util.Map proxyClasses -> proxyClasses
    javassist.CtMethod forwardMethod -> forwardMethod
    javassist.CtMethod forwardStaticMethod -> forwardStaticMethod
    javassist.CtClass[] proxyConstructorParamTypes -> proxyConstructorParamTypes
    javassist.CtClass[] interfacesForProxy -> interfacesForProxy
    javassist.CtClass[] exceptionForProxy -> exceptionForProxy
    void <init>() -> <init>
    void start(javassist.ClassPool) -> start
    void onLoad(javassist.ClassPool,java.lang.String) -> onLoad
    boolean isProxyClass(java.lang.String) -> isProxyClass
    boolean makeProxyClass(java.lang.Class) -> makeProxyClass
    javassist.CtClass produceProxyClass(javassist.CtClass,java.lang.Class) -> produceProxyClass
    javassist.CtClass toCtClass(java.lang.Class) -> toCtClass
    javassist.CtClass[] toCtClass(java.lang.Class[]) -> toCtClass
    void addMethods(javassist.CtClass,java.lang.reflect.Method[]) -> addMethods
    void modifySuperclass(javassist.CtClass) -> modifySuperclass
javassist.tools.web.BadHttpRequest -> javassist.tools.web.BadHttpRequest:
    long serialVersionUID -> serialVersionUID
    java.lang.Exception e -> e
    void <init>() -> <init>
    void <init>(java.lang.Exception) -> <init>
    java.lang.String toString() -> toString
javassist.tools.web.ServiceThread -> javassist.tools.web.ServiceThread:
    javassist.tools.web.Webserver web -> web
    java.net.Socket sock -> sock
    void <init>(javassist.tools.web.Webserver,java.net.Socket) -> <init>
    void run() -> run
javassist.tools.web.Viewer -> javassist.tools.web.Viewer:
    java.lang.String server -> server
    int port -> port
    void main(java.lang.String[]) -> main
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getServer() -> getServer
    int getPort() -> getPort
    void run(java.lang.String,java.lang.String[]) -> run
    java.lang.Class loadClass(java.lang.String,boolean) -> loadClass
    java.lang.Class findClass(java.lang.String) -> findClass
    byte[] fetchClass(java.lang.String) -> fetchClass
    byte[] readStream(java.io.InputStream) -> readStream
javassist.tools.web.Webserver -> javassist.tools.web.Webserver:
    java.net.ServerSocket socket -> socket
    javassist.ClassPool classPool -> classPool
    javassist.Translator translator -> translator
    byte[] endofline -> endofline
    int typeHtml -> typeHtml
    int typeClass -> typeClass
    int typeGif -> typeGif
    int typeJpeg -> typeJpeg
    int typeText -> typeText
    java.lang.String debugDir -> debugDir
    java.lang.String htmlfileBase -> htmlfileBase
    void main(java.lang.String[]) -> main
    void <init>(java.lang.String) -> <init>
    void <init>(int) -> <init>
    void setClassPool(javassist.ClassPool) -> setClassPool
    void addTranslator(javassist.ClassPool,javassist.Translator) -> addTranslator
    void end() -> end
    void logging(java.lang.String) -> logging
    void logging(java.lang.String,java.lang.String) -> logging
    void logging(java.lang.String,java.lang.String,java.lang.String) -> logging
    void logging2(java.lang.String) -> logging2
    void run() -> run
    void process(java.net.Socket) -> process
    java.lang.String readLine(java.io.InputStream) -> readLine
    int skipLine(java.io.InputStream) -> skipLine
    void doReply(java.io.InputStream,java.io.OutputStream,java.lang.String) -> doReply
    void checkFilename(java.lang.String,int) -> checkFilename
    boolean letUsersSendClassfile(java.io.OutputStream,java.lang.String,int) -> letUsersSendClassfile
    void sendHeader(java.io.OutputStream,long,int) -> sendHeader
    void replyError(java.io.OutputStream,javassist.tools.web.BadHttpRequest) -> replyError
    void <clinit>() -> <clinit>
javassist.util.HotSwapAgent -> javassist.util.HotSwapAgent:
    java.lang.instrument.Instrumentation instrumentation -> instrumentation
    void <init>() -> <init>
    java.lang.instrument.Instrumentation instrumentation() -> instrumentation
    void premain(java.lang.String,java.lang.instrument.Instrumentation) -> premain
    void agentmain(java.lang.String,java.lang.instrument.Instrumentation) -> agentmain
    void redefine(java.lang.Class,javassist.CtClass) -> redefine
    void redefine(java.lang.Class[],javassist.CtClass[]) -> redefine
    void startAgent() -> startAgent
    java.io.File createAgentJarFile(java.lang.String) -> createAgentJarFile
    java.io.File createJarFile() -> createJarFile
    java.io.File createJarFile(java.io.File) -> createJarFile
    void <clinit>() -> <clinit>
javassist.util.HotSwapper -> javassist.util.HotSwapper:
    com.sun.jdi.VirtualMachine jvm -> jvm
    com.sun.jdi.request.MethodEntryRequest request -> request
    java.util.Map newClassFiles -> newClassFiles
    javassist.util.Trigger trigger -> trigger
    java.lang.String HOST_NAME -> HOST_NAME
    java.lang.String TRIGGER_NAME -> TRIGGER_NAME
    void <init>(int) -> <init>
    void <init>(java.lang.String) -> <init>
    com.sun.jdi.connect.Connector findConnector(java.lang.String) -> findConnector
    com.sun.jdi.request.MethodEntryRequest methodEntryRequests(com.sun.jdi.request.EventRequestManager,java.lang.String) -> methodEntryRequests
    void deleteEventRequest(com.sun.jdi.request.EventRequestManager,com.sun.jdi.request.MethodEntryRequest) -> deleteEventRequest
    void reload(java.lang.String,byte[]) -> reload
    void reload(java.util.Map) -> reload
    com.sun.jdi.ReferenceType toRefType(java.lang.String) -> toRefType
    void reload2(java.util.Map,java.lang.String) -> reload2
    void startDaemon() -> startDaemon
    com.sun.jdi.event.EventSet waitEvent() -> waitEvent
    void hotswap() -> hotswap
    void <clinit>() -> <clinit>
javassist.util.HotSwapper$1 -> javassist.util.HotSwapper$1:
    javassist.util.HotSwapper this$0 -> this$0
    void <init>(javassist.util.HotSwapper) -> <init>
    void errorMsg(java.lang.Throwable) -> errorMsg
    void run() -> run
javassist.util.Trigger -> javassist.util.Trigger:
    void <init>() -> <init>
    void doSwap() -> doSwap
javassist.util.proxy.DefineClassHelper -> javassist.util.proxy.DefineClassHelper:
    javassist.util.proxy.DefineClassHelper$Helper privileged -> privileged
    java.lang.Class toClass(java.lang.String,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain,byte[]) -> toClass
    java.lang.Class toClass(java.lang.Class,byte[]) -> toClass
    java.lang.Class toClass(java.lang.invoke.MethodHandles$Lookup,byte[]) -> toClass
    java.lang.Class toPublicClass(java.lang.String,byte[]) -> toPublicClass
    void <init>() -> <init>
    javassist.util.proxy.DefineClassHelper$Helper access$400() -> access$400
    void <clinit>() -> <clinit>
javassist.util.proxy.DefineClassHelper$1 -> javassist.util.proxy.DefineClassHelper$1:
javassist.util.proxy.DefineClassHelper$Helper -> javassist.util.proxy.DefineClassHelper$Helper:
    void <init>() -> <init>
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    void <init>(javassist.util.proxy.DefineClassHelper$1) -> <init>
javassist.util.proxy.DefineClassHelper$Java11 -> javassist.util.proxy.DefineClassHelper$Java11:
    void <init>() -> <init>
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    void <init>(javassist.util.proxy.DefineClassHelper$1) -> <init>
javassist.util.proxy.DefineClassHelper$Java7 -> javassist.util.proxy.DefineClassHelper$Java7:
    javassist.util.proxy.SecurityActions stack -> stack
    java.lang.invoke.MethodHandle defineClass -> defineClass
    void <init>() -> <init>
    java.lang.invoke.MethodHandle getDefineClassMethodHandle() -> getDefineClassMethodHandle
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    void <init>(javassist.util.proxy.DefineClassHelper$1) -> <init>
javassist.util.proxy.DefineClassHelper$Java9 -> javassist.util.proxy.DefineClassHelper$Java9:
    java.lang.Object stack -> stack
    java.lang.reflect.Method getCallerClass -> getCallerClass
    javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe sunMiscUnsafe -> sunMiscUnsafe
    void <init>() -> <init>
    javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe getReferencedUnsafe() -> getReferencedUnsafe
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    java.lang.Object access$100(javassist.util.proxy.DefineClassHelper$Java9) -> access$100
    java.lang.reflect.Method access$200(javassist.util.proxy.DefineClassHelper$Java9) -> access$200
javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe -> javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe:
    javassist.util.proxy.SecurityActions$TheUnsafe sunMiscUnsafeTheUnsafe -> sunMiscUnsafeTheUnsafe
    java.lang.invoke.MethodHandle defineClass -> defineClass
    javassist.util.proxy.DefineClassHelper$Java9 this$0 -> this$0
    void <init>(javassist.util.proxy.DefineClassHelper$Java9,javassist.util.proxy.SecurityActions$TheUnsafe,java.lang.invoke.MethodHandle) -> <init>
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
javassist.util.proxy.DefineClassHelper$JavaOther -> javassist.util.proxy.DefineClassHelper$JavaOther:
    java.lang.reflect.Method defineClass -> defineClass
    javassist.util.proxy.SecurityActions stack -> stack
    void <init>() -> <init>
    java.lang.reflect.Method getDefineClassMethod() -> getDefineClassMethod
    java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> defineClass
    void <init>(javassist.util.proxy.DefineClassHelper$1) -> <init>
javassist.util.proxy.DefinePackageHelper -> javassist.util.proxy.DefinePackageHelper:
    javassist.util.proxy.DefinePackageHelper$Helper privileged -> privileged
    void definePackage(java.lang.String,java.lang.ClassLoader) -> definePackage
    void <init>() -> <init>
    void <clinit>() -> <clinit>
javassist.util.proxy.DefinePackageHelper$1 -> javassist.util.proxy.DefinePackageHelper$1:
javassist.util.proxy.DefinePackageHelper$Helper -> javassist.util.proxy.DefinePackageHelper$Helper:
    void <init>() -> <init>
    java.lang.Package definePackage(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL) -> definePackage
    void <init>(javassist.util.proxy.DefinePackageHelper$1) -> <init>
javassist.util.proxy.DefinePackageHelper$Java7 -> javassist.util.proxy.DefinePackageHelper$Java7:
    javassist.util.proxy.SecurityActions stack -> stack
    java.lang.invoke.MethodHandle definePackage -> definePackage
    void <init>() -> <init>
    java.lang.invoke.MethodHandle getDefinePackageMethodHandle() -> getDefinePackageMethodHandle
    java.lang.Package definePackage(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL) -> definePackage
    void <init>(javassist.util.proxy.DefinePackageHelper$1) -> <init>
javassist.util.proxy.DefinePackageHelper$Java9 -> javassist.util.proxy.DefinePackageHelper$Java9:
    void <init>() -> <init>
    java.lang.Package definePackage(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL) -> definePackage
    void <init>(javassist.util.proxy.DefinePackageHelper$1) -> <init>
javassist.util.proxy.DefinePackageHelper$JavaOther -> javassist.util.proxy.DefinePackageHelper$JavaOther:
    javassist.util.proxy.SecurityActions stack -> stack
    java.lang.reflect.Method definePackage -> definePackage
    void <init>() -> <init>
    java.lang.reflect.Method getDefinePackageMethod() -> getDefinePackageMethod
    java.lang.Package definePackage(java.lang.ClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL) -> definePackage
    void <init>(javassist.util.proxy.DefinePackageHelper$1) -> <init>
javassist.util.proxy.FactoryHelper -> javassist.util.proxy.FactoryHelper:
    java.lang.Class[] primitiveTypes -> primitiveTypes
    java.lang.String[] wrapperTypes -> wrapperTypes
    java.lang.String[] wrapperDesc -> wrapperDesc
    java.lang.String[] unwarpMethods -> unwarpMethods
    java.lang.String[] unwrapDesc -> unwrapDesc
    int[] dataSize -> dataSize
    void <init>() -> <init>
    int typeIndex(java.lang.Class) -> typeIndex
    java.lang.Class toClass(javassist.bytecode.ClassFile,java.lang.ClassLoader) -> toClass
    java.lang.Class toClass(javassist.bytecode.ClassFile,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    java.lang.Class toClass(javassist.bytecode.ClassFile,java.lang.Class,java.lang.ClassLoader,java.security.ProtectionDomain) -> toClass
    java.lang.Class toClass(javassist.bytecode.ClassFile,java.lang.invoke.MethodHandles$Lookup) -> toClass
    byte[] toBytecode(javassist.bytecode.ClassFile) -> toBytecode
    void writeFile(javassist.bytecode.ClassFile,java.lang.String) -> writeFile
    void writeFile0(javassist.bytecode.ClassFile,java.lang.String) -> writeFile0
    void <clinit>() -> <clinit>
javassist.util.proxy.MethodFilter -> javassist.util.proxy.MethodFilter:
    boolean isHandled(java.lang.reflect.Method) -> isHandled
javassist.util.proxy.MethodHandler -> javassist.util.proxy.MethodHandler:
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Object[]) -> invoke
javassist.util.proxy.Proxy -> javassist.util.proxy.Proxy:
    void setHandler(javassist.util.proxy.MethodHandler) -> setHandler
javassist.util.proxy.ProxyFactory -> javassist.util.proxy.ProxyFactory:
    java.lang.Class superClass -> superClass
    java.lang.Class[] interfaces -> interfaces
    javassist.util.proxy.MethodFilter methodFilter -> methodFilter
    javassist.util.proxy.MethodHandler handler -> handler
    java.util.List signatureMethods -> signatureMethods
    boolean hasGetHandler -> hasGetHandler
    byte[] signature -> signature
    java.lang.String classname -> classname
    java.lang.String basename -> basename
    java.lang.String superName -> superName
    java.lang.Class thisClass -> thisClass
    java.lang.String genericSignature -> genericSignature
    boolean factoryUseCache -> factoryUseCache
    boolean factoryWriteReplace -> factoryWriteReplace
    boolean onlyPublicMethods -> onlyPublicMethods
    java.lang.String writeDirectory -> writeDirectory
    java.lang.Class OBJECT_TYPE -> OBJECT_TYPE
    java.lang.String HOLDER -> HOLDER
    java.lang.String HOLDER_TYPE -> HOLDER_TYPE
    java.lang.String FILTER_SIGNATURE_FIELD -> FILTER_SIGNATURE_FIELD
    java.lang.String FILTER_SIGNATURE_TYPE -> FILTER_SIGNATURE_TYPE
    java.lang.String HANDLER -> HANDLER
    java.lang.String NULL_INTERCEPTOR_HOLDER -> NULL_INTERCEPTOR_HOLDER
    java.lang.String DEFAULT_INTERCEPTOR -> DEFAULT_INTERCEPTOR
    java.lang.String HANDLER_TYPE -> HANDLER_TYPE
    java.lang.String HANDLER_SETTER -> HANDLER_SETTER
    java.lang.String HANDLER_SETTER_TYPE -> HANDLER_SETTER_TYPE
    java.lang.String HANDLER_GETTER -> HANDLER_GETTER
    java.lang.String HANDLER_GETTER_TYPE -> HANDLER_GETTER_TYPE
    java.lang.String SERIAL_VERSION_UID_FIELD -> SERIAL_VERSION_UID_FIELD
    java.lang.String SERIAL_VERSION_UID_TYPE -> SERIAL_VERSION_UID_TYPE
    long SERIAL_VERSION_UID_VALUE -> SERIAL_VERSION_UID_VALUE
    boolean useCache -> useCache
    boolean useWriteReplace -> useWriteReplace
    java.util.Map proxyCache -> proxyCache
    char[] hexDigits -> hexDigits
    javassist.util.proxy.ProxyFactory$ClassLoaderProvider classLoaderProvider -> classLoaderProvider
    javassist.util.proxy.ProxyFactory$UniqueName nameGenerator -> nameGenerator
    java.lang.String packageForJavaBase -> packageForJavaBase
    java.util.Comparator sorter -> sorter
    java.lang.String HANDLER_GETTER_KEY -> HANDLER_GETTER_KEY
    boolean isUseCache() -> isUseCache
    void setUseCache(boolean) -> setUseCache
    boolean isUseWriteReplace() -> isUseWriteReplace
    void setUseWriteReplace(boolean) -> setUseWriteReplace
    boolean isProxyClass(java.lang.Class) -> isProxyClass
    void <init>() -> <init>
    void setSuperclass(java.lang.Class) -> setSuperclass
    java.lang.Class getSuperclass() -> getSuperclass
    void setInterfaces(java.lang.Class[]) -> setInterfaces
    java.lang.Class[] getInterfaces() -> getInterfaces
    void setFilter(javassist.util.proxy.MethodFilter) -> setFilter
    void setGenericSignature(java.lang.String) -> setGenericSignature
    java.lang.Class createClass() -> createClass
    java.lang.Class createClass(javassist.util.proxy.MethodFilter) -> createClass
    java.lang.Class createClass(byte[]) -> createClass
    java.lang.Class createClass(java.lang.invoke.MethodHandles$Lookup) -> createClass
    java.lang.Class createClass(java.lang.invoke.MethodHandles$Lookup,javassist.util.proxy.MethodFilter) -> createClass
    java.lang.Class createClass(java.lang.invoke.MethodHandles$Lookup,byte[]) -> createClass
    java.lang.Class createClass1(java.lang.invoke.MethodHandles$Lookup) -> createClass1
    java.lang.String getKey(java.lang.Class,java.lang.Class[],byte[],boolean) -> getKey
    void createClass2(java.lang.ClassLoader,java.lang.invoke.MethodHandles$Lookup) -> createClass2
    void createClass3(java.lang.ClassLoader,java.lang.invoke.MethodHandles$Lookup) -> createClass3
    java.lang.Class getClassInTheSamePackage() -> getClassInTheSamePackage
    void setField(java.lang.String,java.lang.Object) -> setField
    byte[] getFilterSignature(java.lang.Class) -> getFilterSignature
    java.lang.Object getField(java.lang.Class,java.lang.String) -> getField
    javassist.util.proxy.MethodHandler getHandler(javassist.util.proxy.Proxy) -> getHandler
    java.lang.ClassLoader getClassLoader() -> getClassLoader
    java.lang.ClassLoader getClassLoader0() -> getClassLoader0
    java.security.ProtectionDomain getDomain() -> getDomain
    java.lang.Object create(java.lang.Class[],java.lang.Object[],javassist.util.proxy.MethodHandler) -> create
    java.lang.Object create(java.lang.Class[],java.lang.Object[]) -> create
    void setHandler(javassist.util.proxy.MethodHandler) -> setHandler
    java.lang.String makeProxyName(java.lang.String) -> makeProxyName
    javassist.bytecode.ClassFile make() -> make
    void checkClassAndSuperName() -> checkClassAndSuperName
    void allocateClassName() -> allocateClassName
    void makeSortedMethodList() -> makeSortedMethodList
    void computeSignature(javassist.util.proxy.MethodFilter) -> computeSignature
    void installSignature(byte[]) -> installSignature
    boolean testBit(byte[],int) -> testBit
    void setBit(byte[],int) -> setBit
    void setInterfaces(javassist.bytecode.ClassFile,java.lang.Class[],java.lang.Class) -> setInterfaces
    void addClassInitializer(javassist.bytecode.ClassFile,javassist.bytecode.ConstPool,java.lang.String,int,java.util.List) -> addClassInitializer
    void callFind2Methods(javassist.bytecode.Bytecode,java.lang.String,java.lang.String,int,java.lang.String,int,int) -> callFind2Methods
    void addSetter(java.lang.String,javassist.bytecode.ClassFile,javassist.bytecode.ConstPool) -> addSetter
    void addGetter(java.lang.String,javassist.bytecode.ClassFile,javassist.bytecode.ConstPool) -> addGetter
    int overrideMethods(javassist.bytecode.ClassFile,javassist.bytecode.ConstPool,java.lang.String,java.util.List) -> overrideMethods
    boolean isBridge(java.lang.reflect.Method) -> isBridge
    void override(java.lang.String,java.lang.reflect.Method,java.lang.String,int,java.lang.String,javassist.bytecode.ClassFile,javassist.bytecode.ConstPool,java.util.List) -> override
    void makeConstructors(java.lang.String,javassist.bytecode.ClassFile,javassist.bytecode.ConstPool,java.lang.String) -> makeConstructors
    java.lang.String makeUniqueName(java.lang.String,java.util.List) -> makeUniqueName
    boolean makeUniqueName0(java.lang.String,java.util.Iterator) -> makeUniqueName0
    boolean isVisible(int,java.lang.String,java.lang.reflect.Member) -> isVisible
    java.lang.String getPackageName(java.lang.String) -> getPackageName
    java.util.Map getMethods(java.lang.Class,java.lang.Class[]) -> getMethods
    void getMethods(java.util.Map,java.lang.Class,java.util.Set) -> getMethods
    boolean isDuplicated(int,java.lang.reflect.Method[]) -> isDuplicated
    boolean areParametersSame(java.lang.reflect.Method,java.lang.reflect.Method) -> areParametersSame
    java.lang.String keyToDesc(java.lang.String,java.lang.reflect.Method) -> keyToDesc
    javassist.bytecode.MethodInfo makeConstructor(java.lang.String,java.lang.reflect.Constructor,javassist.bytecode.ConstPool,java.lang.Class,boolean) -> makeConstructor
    javassist.bytecode.MethodInfo makeDelegator(java.lang.reflect.Method,java.lang.String,javassist.bytecode.ConstPool,java.lang.Class,java.lang.String) -> makeDelegator
    java.lang.Class invokespecialTarget(java.lang.Class) -> invokespecialTarget
    javassist.bytecode.MethodInfo makeForwarder(java.lang.String,java.lang.reflect.Method,java.lang.String,javassist.bytecode.ConstPool,java.lang.Class,java.lang.String,int,java.util.List) -> makeForwarder
    void setThrows(javassist.bytecode.MethodInfo,javassist.bytecode.ConstPool,java.lang.reflect.Method) -> setThrows
    void setThrows(javassist.bytecode.MethodInfo,javassist.bytecode.ConstPool,java.lang.Class[]) -> setThrows
    int addLoadParameters(javassist.bytecode.Bytecode,java.lang.Class[],int) -> addLoadParameters
    int addLoad(javassist.bytecode.Bytecode,int,java.lang.Class) -> addLoad
    int addReturn(javassist.bytecode.Bytecode,java.lang.Class) -> addReturn
    void makeParameterList(javassist.bytecode.Bytecode,java.lang.Class[]) -> makeParameterList
    int makeWrapper(javassist.bytecode.Bytecode,java.lang.Class,int) -> makeWrapper
    void addUnwrapper(javassist.bytecode.Bytecode,java.lang.Class) -> addUnwrapper
    javassist.bytecode.MethodInfo makeWriteReplace(javassist.bytecode.ConstPool) -> makeWriteReplace
    void <clinit>() -> <clinit>
javassist.util.proxy.ProxyFactory$1 -> javassist.util.proxy.ProxyFactory$1:
    void <init>() -> <init>
    java.lang.ClassLoader get(javassist.util.proxy.ProxyFactory) -> get
javassist.util.proxy.ProxyFactory$2 -> javassist.util.proxy.ProxyFactory$2:
    java.lang.String sep -> sep
    int counter -> counter
    void <init>() -> <init>
    java.lang.String get(java.lang.String) -> get
javassist.util.proxy.ProxyFactory$3 -> javassist.util.proxy.ProxyFactory$3:
    void <init>() -> <init>
    int compare(java.util.Map$Entry,java.util.Map$Entry) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
javassist.util.proxy.ProxyFactory$ClassLoaderProvider -> javassist.util.proxy.ProxyFactory$ClassLoaderProvider:
    java.lang.ClassLoader get(javassist.util.proxy.ProxyFactory) -> get
javassist.util.proxy.ProxyFactory$Find2MethodsArgs -> javassist.util.proxy.ProxyFactory$Find2MethodsArgs:
    java.lang.String methodName -> methodName
    java.lang.String delegatorName -> delegatorName
    java.lang.String descriptor -> descriptor
    int origIndex -> origIndex
    void <init>(java.lang.String,java.lang.String,java.lang.String,int) -> <init>
javassist.util.proxy.ProxyFactory$ProxyDetails -> javassist.util.proxy.ProxyFactory$ProxyDetails:
    byte[] signature -> signature
    java.lang.ref.Reference proxyClass -> proxyClass
    boolean isUseWriteReplace -> isUseWriteReplace
    void <init>(byte[],java.lang.Class,boolean) -> <init>
javassist.util.proxy.ProxyFactory$UniqueName -> javassist.util.proxy.ProxyFactory$UniqueName:
    java.lang.String get(java.lang.String) -> get
javassist.util.proxy.ProxyObject -> javassist.util.proxy.ProxyObject:
    void setHandler(javassist.util.proxy.MethodHandler) -> setHandler
    javassist.util.proxy.MethodHandler getHandler() -> getHandler
javassist.util.proxy.ProxyObjectInputStream -> javassist.util.proxy.ProxyObjectInputStream:
    java.lang.ClassLoader loader -> loader
    void <init>(java.io.InputStream) -> <init>
    void setClassLoader(java.lang.ClassLoader) -> setClassLoader
    java.io.ObjectStreamClass readClassDescriptor() -> readClassDescriptor
javassist.util.proxy.ProxyObjectOutputStream -> javassist.util.proxy.ProxyObjectOutputStream:
    void <init>(java.io.OutputStream) -> <init>
    void writeClassDescriptor(java.io.ObjectStreamClass) -> writeClassDescriptor
javassist.util.proxy.RuntimeSupport -> javassist.util.proxy.RuntimeSupport:
    javassist.util.proxy.MethodHandler default_interceptor -> default_interceptor
    void <init>() -> <init>
    void find2Methods(java.lang.Class,java.lang.String,java.lang.String,int,java.lang.String,java.lang.reflect.Method[]) -> find2Methods
    void find2Methods(java.lang.Object,java.lang.String,java.lang.String,int,java.lang.String,java.lang.reflect.Method[]) -> find2Methods
    java.lang.reflect.Method findMethod(java.lang.Object,java.lang.String,java.lang.String) -> findMethod
    java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.String) -> findMethod
    java.lang.reflect.Method findSuperMethod(java.lang.Object,java.lang.String,java.lang.String) -> findSuperMethod
    java.lang.reflect.Method findSuperClassMethod(java.lang.Class,java.lang.String,java.lang.String) -> findSuperClassMethod
    void error(java.lang.Class,java.lang.String,java.lang.String) -> error
    java.lang.reflect.Method findSuperMethod2(java.lang.Class,java.lang.String,java.lang.String) -> findSuperMethod2
    java.lang.reflect.Method searchInterfaces(java.lang.Class,java.lang.String,java.lang.String) -> searchInterfaces
    java.lang.reflect.Method findMethod2(java.lang.Class,java.lang.String,java.lang.String) -> findMethod2
    java.lang.String makeDescriptor(java.lang.reflect.Method) -> makeDescriptor
    java.lang.String makeDescriptor(java.lang.Class[],java.lang.Class) -> makeDescriptor
    java.lang.String makeDescriptor(java.lang.String,java.lang.Class) -> makeDescriptor
    void makeDesc(java.lang.StringBuffer,java.lang.Class) -> makeDesc
    javassist.util.proxy.SerializedProxy makeSerializedProxy(java.lang.Object) -> makeSerializedProxy
    void <clinit>() -> <clinit>
javassist.util.proxy.RuntimeSupport$DefaultMethodHandler -> javassist.util.proxy.RuntimeSupport$DefaultMethodHandler:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Object[]) -> invoke
javassist.util.proxy.SecurityActions -> javassist.util.proxy.SecurityActions:
    javassist.util.proxy.SecurityActions stack -> stack
    void <init>() -> <init>
    java.lang.Class getCallerClass() -> getCallerClass
    java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class) -> getDeclaredMethods
    java.lang.reflect.Constructor[] getDeclaredConstructors(java.lang.Class) -> getDeclaredConstructors
    java.lang.invoke.MethodHandle getMethodHandle(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethodHandle
    java.lang.reflect.Method getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getDeclaredMethod
    java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]) -> getDeclaredConstructor
    void setAccessible(java.lang.reflect.AccessibleObject,boolean) -> setAccessible
    void set(java.lang.reflect.Field,java.lang.Object,java.lang.Object) -> set
    javassist.util.proxy.SecurityActions$TheUnsafe getSunMiscUnsafeAnonymously() -> getSunMiscUnsafeAnonymously
    void disableWarning(javassist.util.proxy.SecurityActions$TheUnsafe) -> disableWarning
    void <clinit>() -> <clinit>
javassist.util.proxy.SecurityActions$1 -> javassist.util.proxy.SecurityActions$1:
    java.lang.Class val$clazz -> val$clazz
    void <init>(java.lang.Class) -> <init>
    java.lang.reflect.Method[] run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$2 -> javassist.util.proxy.SecurityActions$2:
    java.lang.Class val$clazz -> val$clazz
    void <init>(java.lang.Class) -> <init>
    java.lang.reflect.Constructor[] run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$3 -> javassist.util.proxy.SecurityActions$3:
    java.lang.Class val$clazz -> val$clazz
    java.lang.String val$name -> val$name
    java.lang.Class[] val$params -> val$params
    void <init>(java.lang.Class,java.lang.String,java.lang.Class[]) -> <init>
    java.lang.invoke.MethodHandle run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$4 -> javassist.util.proxy.SecurityActions$4:
    java.lang.Class val$clazz -> val$clazz
    java.lang.String val$name -> val$name
    java.lang.Class[] val$types -> val$types
    void <init>(java.lang.Class,java.lang.String,java.lang.Class[]) -> <init>
    java.lang.reflect.Method run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$5 -> javassist.util.proxy.SecurityActions$5:
    java.lang.Class val$clazz -> val$clazz
    java.lang.Class[] val$types -> val$types
    void <init>(java.lang.Class,java.lang.Class[]) -> <init>
    java.lang.reflect.Constructor run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$6 -> javassist.util.proxy.SecurityActions$6:
    java.lang.reflect.AccessibleObject val$ao -> val$ao
    boolean val$accessible -> val$accessible
    void <init>(java.lang.reflect.AccessibleObject,boolean) -> <init>
    java.lang.Void run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$7 -> javassist.util.proxy.SecurityActions$7:
    java.lang.reflect.Field val$fld -> val$fld
    java.lang.Object val$target -> val$target
    java.lang.Object val$value -> val$value
    void <init>(java.lang.reflect.Field,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Void run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$8 -> javassist.util.proxy.SecurityActions$8:
    void <init>() -> <init>
    javassist.util.proxy.SecurityActions$TheUnsafe run() -> run
    java.lang.Object run() -> run
javassist.util.proxy.SecurityActions$TheUnsafe -> javassist.util.proxy.SecurityActions$TheUnsafe:
    java.lang.Class unsafe -> unsafe
    java.lang.Object theUnsafe -> theUnsafe
    java.util.Map methods -> methods
    javassist.util.proxy.SecurityActions this$0 -> this$0
    void <init>(javassist.util.proxy.SecurityActions,java.lang.Class,java.lang.Object) -> <init>
    java.lang.reflect.Method getM(java.lang.String,java.lang.Object[]) -> getM
    java.lang.Object call(java.lang.String,java.lang.Object[]) -> call
javassist.util.proxy.SerializedProxy -> javassist.util.proxy.SerializedProxy:
    long serialVersionUID -> serialVersionUID
    java.lang.String superClass -> superClass
    java.lang.String[] interfaces -> interfaces
    byte[] filterSignature -> filterSignature
    javassist.util.proxy.MethodHandler handler -> handler
    void <init>(java.lang.Class,byte[],javassist.util.proxy.MethodHandler) -> <init>
    java.lang.Class loadClass(java.lang.String) -> loadClass
    java.lang.Object readResolve() -> readResolve
javassist.util.proxy.SerializedProxy$1 -> javassist.util.proxy.SerializedProxy$1:
    java.lang.String val$className -> val$className
    javassist.util.proxy.SerializedProxy this$0 -> this$0
    void <init>(javassist.util.proxy.SerializedProxy,java.lang.String) -> <init>
    java.lang.Class run() -> run
    java.lang.Object run() -> run
javax.annotation.CheckForNull -> javax.annotation.CheckForNull:
javax.annotation.CheckForSigned -> javax.annotation.CheckForSigned:
javax.annotation.CheckReturnValue -> javax.annotation.CheckReturnValue:
    javax.annotation.meta.When when() -> when
javax.annotation.Detainted -> javax.annotation.Detainted:
javax.annotation.MatchesPattern -> javax.annotation.MatchesPattern:
    java.lang.String value() -> value
    int flags() -> flags
javax.annotation.MatchesPattern$Checker -> javax.annotation.MatchesPattern$Checker:
    void <init>() -> <init>
    javax.annotation.meta.When forConstantValue(javax.annotation.MatchesPattern,java.lang.Object) -> forConstantValue
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Nonnegative -> javax.annotation.Nonnegative:
    javax.annotation.meta.When when() -> when
javax.annotation.Nonnegative$Checker -> javax.annotation.Nonnegative$Checker:
    void <init>() -> <init>
    javax.annotation.meta.When forConstantValue(javax.annotation.Nonnegative,java.lang.Object) -> forConstantValue
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Nonnull -> javax.annotation.Nonnull:
    javax.annotation.meta.When when() -> when
javax.annotation.Nonnull$Checker -> javax.annotation.Nonnull$Checker:
    void <init>() -> <init>
    javax.annotation.meta.When forConstantValue(javax.annotation.Nonnull,java.lang.Object) -> forConstantValue
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Nullable -> javax.annotation.Nullable:
javax.annotation.OverridingMethodsMustInvokeSuper -> javax.annotation.OverridingMethodsMustInvokeSuper:
javax.annotation.ParametersAreNonnullByDefault -> javax.annotation.ParametersAreNonnullByDefault:
javax.annotation.ParametersAreNullableByDefault -> javax.annotation.ParametersAreNullableByDefault:
javax.annotation.PropertyKey -> javax.annotation.PropertyKey:
    javax.annotation.meta.When when() -> when
javax.annotation.RegEx -> javax.annotation.RegEx:
    javax.annotation.meta.When when() -> when
javax.annotation.RegEx$Checker -> javax.annotation.RegEx$Checker:
    void <init>() -> <init>
    javax.annotation.meta.When forConstantValue(javax.annotation.RegEx,java.lang.Object) -> forConstantValue
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.Signed -> javax.annotation.Signed:
javax.annotation.Syntax -> javax.annotation.Syntax:
    java.lang.String value() -> value
    javax.annotation.meta.When when() -> when
javax.annotation.Tainted -> javax.annotation.Tainted:
javax.annotation.Untainted -> javax.annotation.Untainted:
    javax.annotation.meta.When when() -> when
javax.annotation.WillClose -> javax.annotation.WillClose:
javax.annotation.WillCloseWhenClosed -> javax.annotation.WillCloseWhenClosed:
javax.annotation.WillNotClose -> javax.annotation.WillNotClose:
javax.annotation.concurrent.GuardedBy -> javax.annotation.concurrent.GuardedBy:
    java.lang.String value() -> value
javax.annotation.concurrent.Immutable -> javax.annotation.concurrent.Immutable:
javax.annotation.concurrent.NotThreadSafe -> javax.annotation.concurrent.NotThreadSafe:
javax.annotation.concurrent.ThreadSafe -> javax.annotation.concurrent.ThreadSafe:
javax.annotation.meta.Exclusive -> javax.annotation.meta.Exclusive:
javax.annotation.meta.Exhaustive -> javax.annotation.meta.Exhaustive:
javax.annotation.meta.TypeQualifier -> javax.annotation.meta.TypeQualifier:
    java.lang.Class applicableTo() -> applicableTo
javax.annotation.meta.TypeQualifierDefault -> javax.annotation.meta.TypeQualifierDefault:
    java.lang.annotation.ElementType[] value() -> value
javax.annotation.meta.TypeQualifierNickname -> javax.annotation.meta.TypeQualifierNickname:
javax.annotation.meta.TypeQualifierValidator -> javax.annotation.meta.TypeQualifierValidator:
    javax.annotation.meta.When forConstantValue(java.lang.annotation.Annotation,java.lang.Object) -> forConstantValue
javax.annotation.meta.When -> javax.annotation.meta.When:
    javax.annotation.meta.When ALWAYS -> ALWAYS
    javax.annotation.meta.When UNKNOWN -> UNKNOWN
    javax.annotation.meta.When MAYBE -> MAYBE
    javax.annotation.meta.When NEVER -> NEVER
    javax.annotation.meta.When[] $VALUES -> $VALUES
    javax.annotation.meta.When[] values() -> values
    javax.annotation.meta.When valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.checkerframework.checker.compilermsgs.qual.CompilerMessageKey -> org.checkerframework.checker.compilermsgs.qual.CompilerMessageKey:
org.checkerframework.checker.compilermsgs.qual.CompilerMessageKeyBottom -> org.checkerframework.checker.compilermsgs.qual.CompilerMessageKeyBottom:
org.checkerframework.checker.compilermsgs.qual.UnknownCompilerMessageKey -> org.checkerframework.checker.compilermsgs.qual.UnknownCompilerMessageKey:
org.checkerframework.checker.fenum.qual.AwtAlphaCompositingRule -> org.checkerframework.checker.fenum.qual.AwtAlphaCompositingRule:
org.checkerframework.checker.fenum.qual.AwtColorSpace -> org.checkerframework.checker.fenum.qual.AwtColorSpace:
org.checkerframework.checker.fenum.qual.AwtCursorType -> org.checkerframework.checker.fenum.qual.AwtCursorType:
org.checkerframework.checker.fenum.qual.AwtFlowLayout -> org.checkerframework.checker.fenum.qual.AwtFlowLayout:
org.checkerframework.checker.fenum.qual.Fenum -> org.checkerframework.checker.fenum.qual.Fenum:
    java.lang.String value() -> value
org.checkerframework.checker.fenum.qual.FenumBottom -> org.checkerframework.checker.fenum.qual.FenumBottom:
org.checkerframework.checker.fenum.qual.FenumTop -> org.checkerframework.checker.fenum.qual.FenumTop:
org.checkerframework.checker.fenum.qual.FenumUnqualified -> org.checkerframework.checker.fenum.qual.FenumUnqualified:
org.checkerframework.checker.fenum.qual.PolyFenum -> org.checkerframework.checker.fenum.qual.PolyFenum:
org.checkerframework.checker.fenum.qual.SwingBoxOrientation -> org.checkerframework.checker.fenum.qual.SwingBoxOrientation:
org.checkerframework.checker.fenum.qual.SwingCompassDirection -> org.checkerframework.checker.fenum.qual.SwingCompassDirection:
org.checkerframework.checker.fenum.qual.SwingElementOrientation -> org.checkerframework.checker.fenum.qual.SwingElementOrientation:
org.checkerframework.checker.fenum.qual.SwingHorizontalOrientation -> org.checkerframework.checker.fenum.qual.SwingHorizontalOrientation:
org.checkerframework.checker.fenum.qual.SwingSplitPaneOrientation -> org.checkerframework.checker.fenum.qual.SwingSplitPaneOrientation:
org.checkerframework.checker.fenum.qual.SwingTextOrientation -> org.checkerframework.checker.fenum.qual.SwingTextOrientation:
org.checkerframework.checker.fenum.qual.SwingTitleJustification -> org.checkerframework.checker.fenum.qual.SwingTitleJustification:
org.checkerframework.checker.fenum.qual.SwingTitlePosition -> org.checkerframework.checker.fenum.qual.SwingTitlePosition:
org.checkerframework.checker.fenum.qual.SwingVerticalOrientation -> org.checkerframework.checker.fenum.qual.SwingVerticalOrientation:
org.checkerframework.checker.formatter.FormatUtil -> org.checkerframework.checker.formatter.FormatUtil:
    java.lang.String formatSpecifier -> formatSpecifier
    java.util.regex.Pattern fsPattern -> fsPattern
    void <init>() -> <init>
    java.lang.String asFormat(java.lang.String,org.checkerframework.checker.formatter.qual.ConversionCategory[]) -> asFormat
    void tryFormatSatisfiability(java.lang.String) -> tryFormatSatisfiability
    org.checkerframework.checker.formatter.qual.ConversionCategory[] formatParameterCategories(java.lang.String) -> formatParameterCategories
    int indexFromFormat(java.util.regex.Matcher) -> indexFromFormat
    char conversionCharFromFormat(java.util.regex.Matcher) -> conversionCharFromFormat
    org.checkerframework.checker.formatter.FormatUtil$Conversion[] parse(java.lang.String) -> parse
    void <clinit>() -> <clinit>
org.checkerframework.checker.formatter.FormatUtil$Conversion -> org.checkerframework.checker.formatter.FormatUtil$Conversion:
    int index -> index
    org.checkerframework.checker.formatter.qual.ConversionCategory cath -> cath
    void <init>(char,int) -> <init>
    int index() -> index
    org.checkerframework.checker.formatter.qual.ConversionCategory category() -> category
org.checkerframework.checker.formatter.FormatUtil$ExcessiveOrMissingFormatArgumentException -> org.checkerframework.checker.formatter.FormatUtil$ExcessiveOrMissingFormatArgumentException:
    long serialVersionUID -> serialVersionUID
    int expected -> expected
    int found -> found
    void <init>(int,int) -> <init>
    int getExpected() -> getExpected
    int getFound() -> getFound
    java.lang.String getMessage() -> getMessage
org.checkerframework.checker.formatter.FormatUtil$IllegalFormatConversionCategoryException -> org.checkerframework.checker.formatter.FormatUtil$IllegalFormatConversionCategoryException:
    long serialVersionUID -> serialVersionUID
    org.checkerframework.checker.formatter.qual.ConversionCategory expected -> expected
    org.checkerframework.checker.formatter.qual.ConversionCategory found -> found
    void <init>(org.checkerframework.checker.formatter.qual.ConversionCategory,org.checkerframework.checker.formatter.qual.ConversionCategory) -> <init>
    org.checkerframework.checker.formatter.qual.ConversionCategory getExpected() -> getExpected
    org.checkerframework.checker.formatter.qual.ConversionCategory getFound() -> getFound
    java.lang.String getMessage() -> getMessage
org.checkerframework.checker.formatter.qual.ConversionCategory -> org.checkerframework.checker.formatter.qual.ConversionCategory:
    org.checkerframework.checker.formatter.qual.ConversionCategory GENERAL -> GENERAL
    org.checkerframework.checker.formatter.qual.ConversionCategory CHAR -> CHAR
    org.checkerframework.checker.formatter.qual.ConversionCategory INT -> INT
    org.checkerframework.checker.formatter.qual.ConversionCategory FLOAT -> FLOAT
    org.checkerframework.checker.formatter.qual.ConversionCategory TIME -> TIME
    org.checkerframework.checker.formatter.qual.ConversionCategory CHAR_AND_INT -> CHAR_AND_INT
    org.checkerframework.checker.formatter.qual.ConversionCategory INT_AND_TIME -> INT_AND_TIME
    org.checkerframework.checker.formatter.qual.ConversionCategory NULL -> NULL
    org.checkerframework.checker.formatter.qual.ConversionCategory UNUSED -> UNUSED
    java.lang.Class[] types -> types
    java.lang.String chars -> chars
    org.checkerframework.checker.formatter.qual.ConversionCategory[] $VALUES -> $VALUES
    org.checkerframework.checker.formatter.qual.ConversionCategory[] values() -> values
    org.checkerframework.checker.formatter.qual.ConversionCategory valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.Class[],java.lang.String) -> <init>
    org.checkerframework.checker.formatter.qual.ConversionCategory fromConversionChar(char) -> fromConversionChar
    java.util.Set arrayToSet(java.lang.Object[]) -> arrayToSet
    boolean isSubsetOf(org.checkerframework.checker.formatter.qual.ConversionCategory,org.checkerframework.checker.formatter.qual.ConversionCategory) -> isSubsetOf
    org.checkerframework.checker.formatter.qual.ConversionCategory intersect(org.checkerframework.checker.formatter.qual.ConversionCategory,org.checkerframework.checker.formatter.qual.ConversionCategory) -> intersect
    org.checkerframework.checker.formatter.qual.ConversionCategory union(org.checkerframework.checker.formatter.qual.ConversionCategory,org.checkerframework.checker.formatter.qual.ConversionCategory) -> union
    java.lang.String className(java.lang.Class) -> className
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.checkerframework.checker.formatter.qual.Format -> org.checkerframework.checker.formatter.qual.Format:
    org.checkerframework.checker.formatter.qual.ConversionCategory[] value() -> value
org.checkerframework.checker.formatter.qual.FormatBottom -> org.checkerframework.checker.formatter.qual.FormatBottom:
org.checkerframework.checker.formatter.qual.FormatMethod -> org.checkerframework.checker.formatter.qual.FormatMethod:
org.checkerframework.checker.formatter.qual.InvalidFormat -> org.checkerframework.checker.formatter.qual.InvalidFormat:
    java.lang.String value() -> value
org.checkerframework.checker.formatter.qual.ReturnsFormat -> org.checkerframework.checker.formatter.qual.ReturnsFormat:
org.checkerframework.checker.formatter.qual.UnknownFormat -> org.checkerframework.checker.formatter.qual.UnknownFormat:
org.checkerframework.checker.guieffect.qual.AlwaysSafe -> org.checkerframework.checker.guieffect.qual.AlwaysSafe:
org.checkerframework.checker.guieffect.qual.PolyUI -> org.checkerframework.checker.guieffect.qual.PolyUI:
org.checkerframework.checker.guieffect.qual.PolyUIEffect -> org.checkerframework.checker.guieffect.qual.PolyUIEffect:
org.checkerframework.checker.guieffect.qual.PolyUIType -> org.checkerframework.checker.guieffect.qual.PolyUIType:
org.checkerframework.checker.guieffect.qual.SafeEffect -> org.checkerframework.checker.guieffect.qual.SafeEffect:
org.checkerframework.checker.guieffect.qual.SafeType -> org.checkerframework.checker.guieffect.qual.SafeType:
org.checkerframework.checker.guieffect.qual.UI -> org.checkerframework.checker.guieffect.qual.UI:
org.checkerframework.checker.guieffect.qual.UIEffect -> org.checkerframework.checker.guieffect.qual.UIEffect:
org.checkerframework.checker.guieffect.qual.UIPackage -> org.checkerframework.checker.guieffect.qual.UIPackage:
org.checkerframework.checker.guieffect.qual.UIType -> org.checkerframework.checker.guieffect.qual.UIType:
org.checkerframework.checker.i18n.qual.LocalizableKey -> org.checkerframework.checker.i18n.qual.LocalizableKey:
org.checkerframework.checker.i18n.qual.LocalizableKeyBottom -> org.checkerframework.checker.i18n.qual.LocalizableKeyBottom:
org.checkerframework.checker.i18n.qual.Localized -> org.checkerframework.checker.i18n.qual.Localized:
org.checkerframework.checker.i18n.qual.UnknownLocalizableKey -> org.checkerframework.checker.i18n.qual.UnknownLocalizableKey:
org.checkerframework.checker.i18n.qual.UnknownLocalized -> org.checkerframework.checker.i18n.qual.UnknownLocalized:
org.checkerframework.checker.i18nformatter.I18nFormatUtil -> org.checkerframework.checker.i18nformatter.I18nFormatUtil:
    void <init>() -> <init>
    void tryFormatSatisfiability(java.lang.String) -> tryFormatSatisfiability
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] formatParameterCategories(java.lang.String) -> formatParameterCategories
    boolean hasFormat(java.lang.String,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[]) -> hasFormat
    boolean isFormat(java.lang.String) -> isFormat
org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion -> org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion:
    int index -> index
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory category -> category
    void <init>(int,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory) -> <init>
    java.lang.String toString() -> toString
org.checkerframework.checker.i18nformatter.I18nFormatUtil$MessageFormatParser -> org.checkerframework.checker.i18nformatter.I18nFormatUtil$MessageFormatParser:
    int maxOffset -> maxOffset
    java.util.Locale locale -> locale
    java.util.List categories -> categories
    java.util.List argumentIndices -> argumentIndices
    int numFormat -> numFormat
    int SEG_RAW -> SEG_RAW
    int SEG_INDEX -> SEG_INDEX
    int SEG_TYPE -> SEG_TYPE
    int SEG_MODIFIER -> SEG_MODIFIER
    int TYPE_NULL -> TYPE_NULL
    int TYPE_NUMBER -> TYPE_NUMBER
    int TYPE_DATE -> TYPE_DATE
    int TYPE_TIME -> TYPE_TIME
    int TYPE_CHOICE -> TYPE_CHOICE
    java.lang.String[] TYPE_KEYWORDS -> TYPE_KEYWORDS
    int MODIFIER_DEFAULT -> MODIFIER_DEFAULT
    int MODIFIER_CURRENCY -> MODIFIER_CURRENCY
    int MODIFIER_PERCENT -> MODIFIER_PERCENT
    int MODIFIER_INTEGER -> MODIFIER_INTEGER
    java.lang.String[] NUMBER_MODIFIER_KEYWORDS -> NUMBER_MODIFIER_KEYWORDS
    java.lang.String[] DATE_TIME_MODIFIER_KEYWORDS -> DATE_TIME_MODIFIER_KEYWORDS
    void <init>() -> <init>
    org.checkerframework.checker.i18nformatter.I18nFormatUtil$I18nConversion[] parse(java.lang.String) -> parse
    void applyPattern(java.lang.String) -> applyPattern
    void makeFormat(int,int,java.lang.StringBuilder[]) -> makeFormat
    int findKeyword(java.lang.String,java.lang.String[]) -> findKeyword
    void <clinit>() -> <clinit>
org.checkerframework.checker.i18nformatter.qual.I18nChecksFormat -> org.checkerframework.checker.i18nformatter.qual.I18nChecksFormat:
org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory -> org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory:
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory UNUSED -> UNUSED
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory GENERAL -> GENERAL
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory DATE -> DATE
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory NUMBER -> NUMBER
    java.lang.Class[] types -> types
    java.lang.String[] strings -> strings
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] $VALUES -> $VALUES
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] values() -> values
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.Class[],java.lang.String[]) -> <init>
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory stringToI18nConversionCategory(java.lang.String) -> stringToI18nConversionCategory
    java.util.Set arrayToSet(java.lang.Object[]) -> arrayToSet
    boolean isSubsetOf(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory) -> isSubsetOf
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory intersect(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory) -> intersect
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory union(org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory,org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory) -> union
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.checkerframework.checker.i18nformatter.qual.I18nFormat -> org.checkerframework.checker.i18nformatter.qual.I18nFormat:
    org.checkerframework.checker.i18nformatter.qual.I18nConversionCategory[] value() -> value
org.checkerframework.checker.i18nformatter.qual.I18nFormatBottom -> org.checkerframework.checker.i18nformatter.qual.I18nFormatBottom:
org.checkerframework.checker.i18nformatter.qual.I18nFormatFor -> org.checkerframework.checker.i18nformatter.qual.I18nFormatFor:
    java.lang.String value() -> value
org.checkerframework.checker.i18nformatter.qual.I18nInvalidFormat -> org.checkerframework.checker.i18nformatter.qual.I18nInvalidFormat:
    java.lang.String value() -> value
org.checkerframework.checker.i18nformatter.qual.I18nMakeFormat -> org.checkerframework.checker.i18nformatter.qual.I18nMakeFormat:
org.checkerframework.checker.i18nformatter.qual.I18nUnknownFormat -> org.checkerframework.checker.i18nformatter.qual.I18nUnknownFormat:
org.checkerframework.checker.i18nformatter.qual.I18nValidFormat -> org.checkerframework.checker.i18nformatter.qual.I18nValidFormat:
org.checkerframework.checker.index.qual.EnsuresLTLengthOf -> org.checkerframework.checker.index.qual.EnsuresLTLengthOf:
    java.lang.String[] value() -> value
    java.lang.String[] targetValue() -> targetValue
    java.lang.String[] offset() -> offset
org.checkerframework.checker.index.qual.EnsuresLTLengthOfIf -> org.checkerframework.checker.index.qual.EnsuresLTLengthOfIf:
    java.lang.String[] expression() -> expression
    boolean result() -> result
    java.lang.String[] targetValue() -> targetValue
    java.lang.String[] offset() -> offset
org.checkerframework.checker.index.qual.GTENegativeOne -> org.checkerframework.checker.index.qual.GTENegativeOne:
org.checkerframework.checker.index.qual.IndexFor -> org.checkerframework.checker.index.qual.IndexFor:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.IndexOrHigh -> org.checkerframework.checker.index.qual.IndexOrHigh:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.IndexOrLow -> org.checkerframework.checker.index.qual.IndexOrLow:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LTEqLengthOf -> org.checkerframework.checker.index.qual.LTEqLengthOf:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LTLengthOf -> org.checkerframework.checker.index.qual.LTLengthOf:
    java.lang.String[] value() -> value
    java.lang.String[] offset() -> offset
org.checkerframework.checker.index.qual.LTOMLengthOf -> org.checkerframework.checker.index.qual.LTOMLengthOf:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LengthOf -> org.checkerframework.checker.index.qual.LengthOf:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LessThan -> org.checkerframework.checker.index.qual.LessThan:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.LessThanBottom -> org.checkerframework.checker.index.qual.LessThanBottom:
org.checkerframework.checker.index.qual.LessThanUnknown -> org.checkerframework.checker.index.qual.LessThanUnknown:
org.checkerframework.checker.index.qual.LowerBoundBottom -> org.checkerframework.checker.index.qual.LowerBoundBottom:
org.checkerframework.checker.index.qual.LowerBoundUnknown -> org.checkerframework.checker.index.qual.LowerBoundUnknown:
org.checkerframework.checker.index.qual.NegativeIndexFor -> org.checkerframework.checker.index.qual.NegativeIndexFor:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.NonNegative -> org.checkerframework.checker.index.qual.NonNegative:
org.checkerframework.checker.index.qual.PolyIndex -> org.checkerframework.checker.index.qual.PolyIndex:
org.checkerframework.checker.index.qual.PolyLength -> org.checkerframework.checker.index.qual.PolyLength:
org.checkerframework.checker.index.qual.PolyLowerBound -> org.checkerframework.checker.index.qual.PolyLowerBound:
org.checkerframework.checker.index.qual.PolySameLen -> org.checkerframework.checker.index.qual.PolySameLen:
org.checkerframework.checker.index.qual.PolyUpperBound -> org.checkerframework.checker.index.qual.PolyUpperBound:
org.checkerframework.checker.index.qual.Positive -> org.checkerframework.checker.index.qual.Positive:
org.checkerframework.checker.index.qual.SameLen -> org.checkerframework.checker.index.qual.SameLen:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.SameLenBottom -> org.checkerframework.checker.index.qual.SameLenBottom:
org.checkerframework.checker.index.qual.SameLenUnknown -> org.checkerframework.checker.index.qual.SameLenUnknown:
org.checkerframework.checker.index.qual.SearchIndexBottom -> org.checkerframework.checker.index.qual.SearchIndexBottom:
org.checkerframework.checker.index.qual.SearchIndexFor -> org.checkerframework.checker.index.qual.SearchIndexFor:
    java.lang.String[] value() -> value
org.checkerframework.checker.index.qual.SearchIndexUnknown -> org.checkerframework.checker.index.qual.SearchIndexUnknown:
org.checkerframework.checker.index.qual.SubstringIndexBottom -> org.checkerframework.checker.index.qual.SubstringIndexBottom:
org.checkerframework.checker.index.qual.SubstringIndexFor -> org.checkerframework.checker.index.qual.SubstringIndexFor:
    java.lang.String[] value() -> value
    java.lang.String[] offset() -> offset
org.checkerframework.checker.index.qual.SubstringIndexUnknown -> org.checkerframework.checker.index.qual.SubstringIndexUnknown:
org.checkerframework.checker.index.qual.UpperBoundBottom -> org.checkerframework.checker.index.qual.UpperBoundBottom:
org.checkerframework.checker.index.qual.UpperBoundUnknown -> org.checkerframework.checker.index.qual.UpperBoundUnknown:
org.checkerframework.checker.initialization.qual.FBCBottom -> org.checkerframework.checker.initialization.qual.FBCBottom:
org.checkerframework.checker.initialization.qual.Initialized -> org.checkerframework.checker.initialization.qual.Initialized:
org.checkerframework.checker.initialization.qual.NotOnlyInitialized -> org.checkerframework.checker.initialization.qual.NotOnlyInitialized:
org.checkerframework.checker.initialization.qual.UnderInitialization -> org.checkerframework.checker.initialization.qual.UnderInitialization:
    java.lang.Class value() -> value
org.checkerframework.checker.initialization.qual.UnknownInitialization -> org.checkerframework.checker.initialization.qual.UnknownInitialization:
    java.lang.Class value() -> value
org.checkerframework.checker.interning.qual.Interned -> org.checkerframework.checker.interning.qual.Interned:
org.checkerframework.checker.interning.qual.InternedDistinct -> org.checkerframework.checker.interning.qual.InternedDistinct:
org.checkerframework.checker.interning.qual.PolyInterned -> org.checkerframework.checker.interning.qual.PolyInterned:
org.checkerframework.checker.interning.qual.UnknownInterned -> org.checkerframework.checker.interning.qual.UnknownInterned:
org.checkerframework.checker.interning.qual.UsesObjectEquals -> org.checkerframework.checker.interning.qual.UsesObjectEquals:
org.checkerframework.checker.lock.qual.EnsuresLockHeld -> org.checkerframework.checker.lock.qual.EnsuresLockHeld:
    java.lang.String[] value() -> value
org.checkerframework.checker.lock.qual.EnsuresLockHeldIf -> org.checkerframework.checker.lock.qual.EnsuresLockHeldIf:
    java.lang.String[] expression() -> expression
    boolean result() -> result
org.checkerframework.checker.lock.qual.GuardSatisfied -> org.checkerframework.checker.lock.qual.GuardSatisfied:
    int value() -> value
org.checkerframework.checker.lock.qual.GuardedBy -> org.checkerframework.checker.lock.qual.GuardedBy:
    java.lang.String[] value() -> value
org.checkerframework.checker.lock.qual.GuardedByBottom -> org.checkerframework.checker.lock.qual.GuardedByBottom:
org.checkerframework.checker.lock.qual.GuardedByUnknown -> org.checkerframework.checker.lock.qual.GuardedByUnknown:
org.checkerframework.checker.lock.qual.Holding -> org.checkerframework.checker.lock.qual.Holding:
    java.lang.String[] value() -> value
org.checkerframework.checker.lock.qual.LockHeld -> org.checkerframework.checker.lock.qual.LockHeld:
org.checkerframework.checker.lock.qual.LockPossiblyHeld -> org.checkerframework.checker.lock.qual.LockPossiblyHeld:
org.checkerframework.checker.lock.qual.LockingFree -> org.checkerframework.checker.lock.qual.LockingFree:
org.checkerframework.checker.lock.qual.MayReleaseLocks -> org.checkerframework.checker.lock.qual.MayReleaseLocks:
org.checkerframework.checker.lock.qual.ReleasesNoLocks -> org.checkerframework.checker.lock.qual.ReleasesNoLocks:
org.checkerframework.checker.nullness.NullnessUtil -> org.checkerframework.checker.nullness.NullnessUtil:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    java.lang.Object castNonNull(java.lang.Object) -> castNonNull
    java.lang.Object[] castNonNullDeep(java.lang.Object[]) -> castNonNullDeep
    java.lang.Object[][] castNonNullDeep(java.lang.Object[][]) -> castNonNullDeep
    java.lang.Object[][][] castNonNullDeep(java.lang.Object[][][]) -> castNonNullDeep
    java.lang.Object[][][][] castNonNullDeep(java.lang.Object[][][][]) -> castNonNullDeep
    java.lang.Object[][][][][] castNonNullDeep(java.lang.Object[][][][][]) -> castNonNullDeep
    java.lang.Object[] castNonNullArray(java.lang.Object[]) -> castNonNullArray
    void checkIfArray(java.lang.Object) -> checkIfArray
    void <clinit>() -> <clinit>
org.checkerframework.checker.nullness.Opt -> org.checkerframework.checker.nullness.Opt:
    void <init>() -> <init>
    java.lang.Object get(java.lang.Object) -> get
    boolean isPresent(java.lang.Object) -> isPresent
    void ifPresent(java.lang.Object,java.util.function.Consumer) -> ifPresent
    java.lang.Object filter(java.lang.Object,java.util.function.Predicate) -> filter
    java.lang.Object map(java.lang.Object,java.util.function.Function) -> map
    java.lang.Object orElse(java.lang.Object,java.lang.Object) -> orElse
    java.lang.Object orElseGet(java.lang.Object,java.util.function.Supplier) -> orElseGet
    java.lang.Object orElseThrow(java.lang.Object,java.util.function.Supplier) -> orElseThrow
org.checkerframework.checker.nullness.qual.AssertNonNullIfNonNull -> org.checkerframework.checker.nullness.qual.AssertNonNullIfNonNull:
    java.lang.String[] value() -> value
org.checkerframework.checker.nullness.qual.EnsuresNonNull -> org.checkerframework.checker.nullness.qual.EnsuresNonNull:
    java.lang.String[] value() -> value
org.checkerframework.checker.nullness.qual.EnsuresNonNullIf -> org.checkerframework.checker.nullness.qual.EnsuresNonNullIf:
    java.lang.String[] expression() -> expression
    boolean result() -> result
org.checkerframework.checker.nullness.qual.KeyFor -> org.checkerframework.checker.nullness.qual.KeyFor:
    java.lang.String[] value() -> value
org.checkerframework.checker.nullness.qual.KeyForBottom -> org.checkerframework.checker.nullness.qual.KeyForBottom:
org.checkerframework.checker.nullness.qual.MonotonicNonNull -> org.checkerframework.checker.nullness.qual.MonotonicNonNull:
org.checkerframework.checker.nullness.qual.NonNull -> org.checkerframework.checker.nullness.qual.NonNull:
org.checkerframework.checker.nullness.qual.NonRaw -> org.checkerframework.checker.nullness.qual.NonRaw:
org.checkerframework.checker.nullness.qual.Nullable -> org.checkerframework.checker.nullness.qual.Nullable:
org.checkerframework.checker.nullness.qual.PolyKeyFor -> org.checkerframework.checker.nullness.qual.PolyKeyFor:
org.checkerframework.checker.nullness.qual.PolyNull -> org.checkerframework.checker.nullness.qual.PolyNull:
org.checkerframework.checker.nullness.qual.PolyRaw -> org.checkerframework.checker.nullness.qual.PolyRaw:
org.checkerframework.checker.nullness.qual.Raw -> org.checkerframework.checker.nullness.qual.Raw:
    java.lang.Class value() -> value
org.checkerframework.checker.nullness.qual.RequiresNonNull -> org.checkerframework.checker.nullness.qual.RequiresNonNull:
    java.lang.String[] value() -> value
org.checkerframework.checker.nullness.qual.UnknownKeyFor -> org.checkerframework.checker.nullness.qual.UnknownKeyFor:
org.checkerframework.checker.optional.qual.MaybePresent -> org.checkerframework.checker.optional.qual.MaybePresent:
org.checkerframework.checker.optional.qual.PolyPresent -> org.checkerframework.checker.optional.qual.PolyPresent:
org.checkerframework.checker.optional.qual.Present -> org.checkerframework.checker.optional.qual.Present:
org.checkerframework.checker.propkey.qual.PropertyKey -> org.checkerframework.checker.propkey.qual.PropertyKey:
org.checkerframework.checker.propkey.qual.PropertyKeyBottom -> org.checkerframework.checker.propkey.qual.PropertyKeyBottom:
org.checkerframework.checker.propkey.qual.UnknownPropertyKey -> org.checkerframework.checker.propkey.qual.UnknownPropertyKey:
org.checkerframework.checker.regex.RegexUtil -> org.checkerframework.checker.regex.RegexUtil:
    void <init>() -> <init>
    boolean isRegex(java.lang.String) -> isRegex
    boolean isRegex(java.lang.String,int) -> isRegex
    boolean isRegex(char) -> isRegex
    java.lang.String regexError(java.lang.String) -> regexError
    java.lang.String regexError(java.lang.String,int) -> regexError
    java.util.regex.PatternSyntaxException regexException(java.lang.String) -> regexException
    java.util.regex.PatternSyntaxException regexException(java.lang.String,int) -> regexException
    java.lang.String asRegex(java.lang.String) -> asRegex
    java.lang.String asRegex(java.lang.String,int) -> asRegex
    java.lang.String regexErrorMessage(java.lang.String,int,int) -> regexErrorMessage
    int getGroupCount(java.util.regex.Pattern) -> getGroupCount
org.checkerframework.checker.regex.RegexUtil$CheckedPatternSyntaxException -> org.checkerframework.checker.regex.RegexUtil$CheckedPatternSyntaxException:
    long serialVersionUID -> serialVersionUID
    java.util.regex.PatternSyntaxException pse -> pse
    void <init>(java.util.regex.PatternSyntaxException) -> <init>
    void <init>(java.lang.String,java.lang.String,int) -> <init>
    java.lang.String getDescription() -> getDescription
    int getIndex() -> getIndex
    java.lang.String getMessage() -> getMessage
    java.lang.String getPattern() -> getPattern
org.checkerframework.checker.regex.qual.PartialRegex -> org.checkerframework.checker.regex.qual.PartialRegex:
    java.lang.String value() -> value
org.checkerframework.checker.regex.qual.PolyRegex -> org.checkerframework.checker.regex.qual.PolyRegex:
org.checkerframework.checker.regex.qual.Regex -> org.checkerframework.checker.regex.qual.Regex:
    int value() -> value
org.checkerframework.checker.regex.qual.RegexBottom -> org.checkerframework.checker.regex.qual.RegexBottom:
org.checkerframework.checker.regex.qual.UnknownRegex -> org.checkerframework.checker.regex.qual.UnknownRegex:
org.checkerframework.checker.signature.qual.BinaryName -> org.checkerframework.checker.signature.qual.BinaryName:
org.checkerframework.checker.signature.qual.BinaryNameForNonArray -> org.checkerframework.checker.signature.qual.BinaryNameForNonArray:
org.checkerframework.checker.signature.qual.BinaryNameForNonArrayInUnnamedPackage -> org.checkerframework.checker.signature.qual.BinaryNameForNonArrayInUnnamedPackage:
org.checkerframework.checker.signature.qual.BinaryNameInUnnamedPackage -> org.checkerframework.checker.signature.qual.BinaryNameInUnnamedPackage:
org.checkerframework.checker.signature.qual.ClassGetName -> org.checkerframework.checker.signature.qual.ClassGetName:
org.checkerframework.checker.signature.qual.ClassGetSimpleName -> org.checkerframework.checker.signature.qual.ClassGetSimpleName:
org.checkerframework.checker.signature.qual.FieldDescriptor -> org.checkerframework.checker.signature.qual.FieldDescriptor:
org.checkerframework.checker.signature.qual.FieldDescriptorForArray -> org.checkerframework.checker.signature.qual.FieldDescriptorForArray:
org.checkerframework.checker.signature.qual.FullyQualifiedName -> org.checkerframework.checker.signature.qual.FullyQualifiedName:
org.checkerframework.checker.signature.qual.Identifier -> org.checkerframework.checker.signature.qual.Identifier:
org.checkerframework.checker.signature.qual.IdentifierOrArray -> org.checkerframework.checker.signature.qual.IdentifierOrArray:
org.checkerframework.checker.signature.qual.InternalForm -> org.checkerframework.checker.signature.qual.InternalForm:
org.checkerframework.checker.signature.qual.InternalFormForNonArray -> org.checkerframework.checker.signature.qual.InternalFormForNonArray:
org.checkerframework.checker.signature.qual.MethodDescriptor -> org.checkerframework.checker.signature.qual.MethodDescriptor:
org.checkerframework.checker.signature.qual.PolySignature -> org.checkerframework.checker.signature.qual.PolySignature:
org.checkerframework.checker.signature.qual.SignatureBottom -> org.checkerframework.checker.signature.qual.SignatureBottom:
org.checkerframework.checker.signature.qual.SignatureUnknown -> org.checkerframework.checker.signature.qual.SignatureUnknown:
org.checkerframework.checker.signature.qual.SourceNameForNonArrayNonInner -> org.checkerframework.checker.signature.qual.SourceNameForNonArrayNonInner:
org.checkerframework.checker.signature.qual.SourceNameForNonInner -> org.checkerframework.checker.signature.qual.SourceNameForNonInner:
org.checkerframework.checker.signedness.SignednessUtil -> org.checkerframework.checker.signedness.SignednessUtil:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    java.nio.ByteBuffer wrapUnsigned(byte[]) -> wrapUnsigned
    java.nio.ByteBuffer wrapUnsigned(byte[],int,int) -> wrapUnsigned
    int getUnsignedInt(java.nio.ByteBuffer) -> getUnsignedInt
    short getUnsignedShort(java.nio.ByteBuffer) -> getUnsignedShort
    byte getUnsigned(java.nio.ByteBuffer) -> getUnsigned
    byte getUnsigned(java.nio.ByteBuffer,int) -> getUnsigned
    java.nio.ByteBuffer getUnsigned(java.nio.ByteBuffer,byte[],int,int) -> getUnsigned
    java.nio.ByteBuffer putUnsigned(java.nio.ByteBuffer,byte) -> putUnsigned
    java.nio.ByteBuffer putUnsigned(java.nio.ByteBuffer,int,byte) -> putUnsigned
    java.nio.IntBuffer putUnsigned(java.nio.IntBuffer,int) -> putUnsigned
    java.nio.IntBuffer putUnsigned(java.nio.IntBuffer,int,int) -> putUnsigned
    java.nio.IntBuffer putUnsigned(java.nio.IntBuffer,int[]) -> putUnsigned
    java.nio.IntBuffer putUnsigned(java.nio.IntBuffer,int[],int,int) -> putUnsigned
    int getUnsigned(java.nio.IntBuffer,int) -> getUnsigned
    java.nio.ByteBuffer putUnsignedShort(java.nio.ByteBuffer,short) -> putUnsignedShort
    java.nio.ByteBuffer putUnsignedShort(java.nio.ByteBuffer,int,short) -> putUnsignedShort
    java.nio.ByteBuffer putUnsignedInt(java.nio.ByteBuffer,int) -> putUnsignedInt
    java.nio.ByteBuffer putUnsignedInt(java.nio.ByteBuffer,int,int) -> putUnsignedInt
    java.nio.ByteBuffer putUnsignedLong(java.nio.ByteBuffer,int,long) -> putUnsignedLong
    byte readUnsignedByte(java.io.RandomAccessFile) -> readUnsignedByte
    char readUnsignedChar(java.io.RandomAccessFile) -> readUnsignedChar
    short readUnsignedShort(java.io.RandomAccessFile) -> readUnsignedShort
    int readUnsignedInt(java.io.RandomAccessFile) -> readUnsignedInt
    long readUnsignedLong(java.io.RandomAccessFile) -> readUnsignedLong
    int readUnsigned(java.io.RandomAccessFile,byte[],int,int) -> readUnsigned
    void readFullyUnsigned(java.io.RandomAccessFile,byte[]) -> readFullyUnsigned
    void writeUnsigned(java.io.RandomAccessFile,byte[],int,int) -> writeUnsigned
    void writeUnsignedByte(java.io.RandomAccessFile,byte) -> writeUnsignedByte
    void writeUnsignedChar(java.io.RandomAccessFile,char) -> writeUnsignedChar
    void writeUnsignedShort(java.io.RandomAccessFile,short) -> writeUnsignedShort
    void writeUnsignedInt(java.io.RandomAccessFile,int) -> writeUnsignedInt
    void writeUnsignedLong(java.io.RandomAccessFile,long) -> writeUnsignedLong
    void getUnsigned(java.nio.ByteBuffer,byte[]) -> getUnsigned
    int compareUnsigned(long,long) -> compareUnsigned
    int compareUnsigned(int,int) -> compareUnsigned
    int compareUnsigned(short,short) -> compareUnsigned
    int compareUnsigned(byte,byte) -> compareUnsigned
    java.lang.String toUnsignedString(long) -> toUnsignedString
    java.lang.String toUnsignedString(long,int) -> toUnsignedString
    java.lang.String toUnsignedString(int) -> toUnsignedString
    java.lang.String toUnsignedString(int,int) -> toUnsignedString
    java.lang.String toUnsignedString(short) -> toUnsignedString
    java.lang.String toUnsignedString(short,int) -> toUnsignedString
    java.lang.String toUnsignedString(byte) -> toUnsignedString
    java.lang.String toUnsignedString(byte,int) -> toUnsignedString
    java.math.BigInteger toUnsignedBigInteger(long) -> toUnsignedBigInteger
    long toUnsignedLong(int) -> toUnsignedLong
    long toUnsignedLong(short) -> toUnsignedLong
    int toUnsignedInt(short) -> toUnsignedInt
    long toUnsignedLong(byte) -> toUnsignedLong
    int toUnsignedInt(byte) -> toUnsignedInt
    short toUnsignedShort(byte) -> toUnsignedShort
    long toUnsignedLong(char) -> toUnsignedLong
    int toUnsignedInt(char) -> toUnsignedInt
    short toUnsignedShort(char) -> toUnsignedShort
    float toFloat(byte) -> toFloat
    float toFloat(short) -> toFloat
    float toFloat(int) -> toFloat
    float toFloat(long) -> toFloat
    double toDouble(byte) -> toDouble
    double toDouble(short) -> toDouble
    double toDouble(int) -> toDouble
    double toDouble(long) -> toDouble
    byte byteFromFloat(float) -> byteFromFloat
    short shortFromFloat(float) -> shortFromFloat
    int intFromFloat(float) -> intFromFloat
    long longFromFloat(float) -> longFromFloat
    byte byteFromDouble(double) -> byteFromDouble
    short shortFromDouble(double) -> shortFromDouble
    int intFromDouble(double) -> intFromDouble
    long longFromDouble(double) -> longFromDouble
    void <clinit>() -> <clinit>
org.checkerframework.checker.signedness.qual.Constant -> org.checkerframework.checker.signedness.qual.Constant:
org.checkerframework.checker.signedness.qual.PolySignedness -> org.checkerframework.checker.signedness.qual.PolySignedness:
org.checkerframework.checker.signedness.qual.Signed -> org.checkerframework.checker.signedness.qual.Signed:
org.checkerframework.checker.signedness.qual.SignednessBottom -> org.checkerframework.checker.signedness.qual.SignednessBottom:
org.checkerframework.checker.signedness.qual.UnknownSignedness -> org.checkerframework.checker.signedness.qual.UnknownSignedness:
org.checkerframework.checker.signedness.qual.Unsigned -> org.checkerframework.checker.signedness.qual.Unsigned:
org.checkerframework.checker.tainting.qual.PolyTainted -> org.checkerframework.checker.tainting.qual.PolyTainted:
org.checkerframework.checker.tainting.qual.Tainted -> org.checkerframework.checker.tainting.qual.Tainted:
org.checkerframework.checker.tainting.qual.Untainted -> org.checkerframework.checker.tainting.qual.Untainted:
org.checkerframework.checker.units.UnitsTools -> org.checkerframework.checker.units.UnitsTools:
    int mPERs2 -> mPERs2
    double rad -> rad
    double deg -> deg
    int mm2 -> mm2
    int m2 -> m2
    int km2 -> km2
    int A -> A
    int cd -> cd
    int mm -> mm
    int m -> m
    int km -> km
    int g -> g
    int kg -> kg
    int mPERs -> mPERs
    int kmPERh -> kmPERh
    int mol -> mol
    int K -> K
    int C -> C
    int s -> s
    int min -> min
    int h -> h
    void <init>() -> <init>
    double toRadians(double) -> toRadians
    double toDegrees(double) -> toDegrees
    int fromMilliMeterToMeter(int) -> fromMilliMeterToMeter
    int fromMeterToMilliMeter(int) -> fromMeterToMilliMeter
    int fromMeterToKiloMeter(int) -> fromMeterToKiloMeter
    int fromKiloMeterToMeter(int) -> fromKiloMeterToMeter
    int fromGramToKiloGram(int) -> fromGramToKiloGram
    int fromKiloGramToGram(int) -> fromKiloGramToGram
    double fromMeterPerSecondToKiloMeterPerHour(double) -> fromMeterPerSecondToKiloMeterPerHour
    double fromKiloMeterPerHourToMeterPerSecond(double) -> fromKiloMeterPerHourToMeterPerSecond
    int fromKelvinToCelsius(int) -> fromKelvinToCelsius
    int fromCelsiusToKelvin(int) -> fromCelsiusToKelvin
    int fromSecondToMinute(int) -> fromSecondToMinute
    int fromMinuteToSecond(int) -> fromMinuteToSecond
    int fromMinuteToHour(int) -> fromMinuteToHour
    int fromHourToMinute(int) -> fromHourToMinute
org.checkerframework.checker.units.qual.A -> org.checkerframework.checker.units.qual.A:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.Acceleration -> org.checkerframework.checker.units.qual.Acceleration:
org.checkerframework.checker.units.qual.Angle -> org.checkerframework.checker.units.qual.Angle:
org.checkerframework.checker.units.qual.Area -> org.checkerframework.checker.units.qual.Area:
org.checkerframework.checker.units.qual.C -> org.checkerframework.checker.units.qual.C:
org.checkerframework.checker.units.qual.Current -> org.checkerframework.checker.units.qual.Current:
org.checkerframework.checker.units.qual.K -> org.checkerframework.checker.units.qual.K:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.Length -> org.checkerframework.checker.units.qual.Length:
org.checkerframework.checker.units.qual.Luminance -> org.checkerframework.checker.units.qual.Luminance:
org.checkerframework.checker.units.qual.Mass -> org.checkerframework.checker.units.qual.Mass:
org.checkerframework.checker.units.qual.MixedUnits -> org.checkerframework.checker.units.qual.MixedUnits:
org.checkerframework.checker.units.qual.PolyUnit -> org.checkerframework.checker.units.qual.PolyUnit:
org.checkerframework.checker.units.qual.Prefix -> org.checkerframework.checker.units.qual.Prefix:
    org.checkerframework.checker.units.qual.Prefix yotta -> yotta
    org.checkerframework.checker.units.qual.Prefix zetta -> zetta
    org.checkerframework.checker.units.qual.Prefix exa -> exa
    org.checkerframework.checker.units.qual.Prefix peta -> peta
    org.checkerframework.checker.units.qual.Prefix tera -> tera
    org.checkerframework.checker.units.qual.Prefix giga -> giga
    org.checkerframework.checker.units.qual.Prefix mega -> mega
    org.checkerframework.checker.units.qual.Prefix kilo -> kilo
    org.checkerframework.checker.units.qual.Prefix hecto -> hecto
    org.checkerframework.checker.units.qual.Prefix deca -> deca
    org.checkerframework.checker.units.qual.Prefix one -> one
    org.checkerframework.checker.units.qual.Prefix deci -> deci
    org.checkerframework.checker.units.qual.Prefix centi -> centi
    org.checkerframework.checker.units.qual.Prefix milli -> milli
    org.checkerframework.checker.units.qual.Prefix micro -> micro
    org.checkerframework.checker.units.qual.Prefix nano -> nano
    org.checkerframework.checker.units.qual.Prefix pico -> pico
    org.checkerframework.checker.units.qual.Prefix femto -> femto
    org.checkerframework.checker.units.qual.Prefix atto -> atto
    org.checkerframework.checker.units.qual.Prefix zepto -> zepto
    org.checkerframework.checker.units.qual.Prefix yocto -> yocto
    org.checkerframework.checker.units.qual.Prefix[] $VALUES -> $VALUES
    org.checkerframework.checker.units.qual.Prefix[] values() -> values
    org.checkerframework.checker.units.qual.Prefix valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.checkerframework.checker.units.qual.Speed -> org.checkerframework.checker.units.qual.Speed:
org.checkerframework.checker.units.qual.Substance -> org.checkerframework.checker.units.qual.Substance:
org.checkerframework.checker.units.qual.Temperature -> org.checkerframework.checker.units.qual.Temperature:
org.checkerframework.checker.units.qual.Time -> org.checkerframework.checker.units.qual.Time:
org.checkerframework.checker.units.qual.UnitsBottom -> org.checkerframework.checker.units.qual.UnitsBottom:
org.checkerframework.checker.units.qual.UnitsMultiple -> org.checkerframework.checker.units.qual.UnitsMultiple:
    java.lang.Class quantity() -> quantity
    org.checkerframework.checker.units.qual.Prefix prefix() -> prefix
org.checkerframework.checker.units.qual.UnitsRelations -> org.checkerframework.checker.units.qual.UnitsRelations:
    java.lang.Class value() -> value
org.checkerframework.checker.units.qual.UnknownUnits -> org.checkerframework.checker.units.qual.UnknownUnits:
org.checkerframework.checker.units.qual.cd -> org.checkerframework.checker.units.qual.cd:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.degrees -> org.checkerframework.checker.units.qual.degrees:
org.checkerframework.checker.units.qual.g -> org.checkerframework.checker.units.qual.g:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.h -> org.checkerframework.checker.units.qual.h:
org.checkerframework.checker.units.qual.kg -> org.checkerframework.checker.units.qual.kg:
org.checkerframework.checker.units.qual.km -> org.checkerframework.checker.units.qual.km:
org.checkerframework.checker.units.qual.km2 -> org.checkerframework.checker.units.qual.km2:
org.checkerframework.checker.units.qual.kmPERh -> org.checkerframework.checker.units.qual.kmPERh:
org.checkerframework.checker.units.qual.m -> org.checkerframework.checker.units.qual.m:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.m2 -> org.checkerframework.checker.units.qual.m2:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.mPERs -> org.checkerframework.checker.units.qual.mPERs:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.mPERs2 -> org.checkerframework.checker.units.qual.mPERs2:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.min -> org.checkerframework.checker.units.qual.min:
org.checkerframework.checker.units.qual.mm -> org.checkerframework.checker.units.qual.mm:
org.checkerframework.checker.units.qual.mm2 -> org.checkerframework.checker.units.qual.mm2:
org.checkerframework.checker.units.qual.mol -> org.checkerframework.checker.units.qual.mol:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.radians -> org.checkerframework.checker.units.qual.radians:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.checker.units.qual.s -> org.checkerframework.checker.units.qual.s:
    org.checkerframework.checker.units.qual.Prefix value() -> value
org.checkerframework.common.aliasing.qual.LeakedToResult -> org.checkerframework.common.aliasing.qual.LeakedToResult:
org.checkerframework.common.aliasing.qual.MaybeAliased -> org.checkerframework.common.aliasing.qual.MaybeAliased:
org.checkerframework.common.aliasing.qual.MaybeLeaked -> org.checkerframework.common.aliasing.qual.MaybeLeaked:
org.checkerframework.common.aliasing.qual.NonLeaked -> org.checkerframework.common.aliasing.qual.NonLeaked:
org.checkerframework.common.aliasing.qual.Unique -> org.checkerframework.common.aliasing.qual.Unique:
org.checkerframework.common.reflection.qual.ClassBound -> org.checkerframework.common.reflection.qual.ClassBound:
    java.lang.String[] value() -> value
org.checkerframework.common.reflection.qual.ClassVal -> org.checkerframework.common.reflection.qual.ClassVal:
    java.lang.String[] value() -> value
org.checkerframework.common.reflection.qual.ClassValBottom -> org.checkerframework.common.reflection.qual.ClassValBottom:
org.checkerframework.common.reflection.qual.ForName -> org.checkerframework.common.reflection.qual.ForName:
org.checkerframework.common.reflection.qual.GetClass -> org.checkerframework.common.reflection.qual.GetClass:
org.checkerframework.common.reflection.qual.GetConstructor -> org.checkerframework.common.reflection.qual.GetConstructor:
org.checkerframework.common.reflection.qual.GetMethod -> org.checkerframework.common.reflection.qual.GetMethod:
org.checkerframework.common.reflection.qual.Invoke -> org.checkerframework.common.reflection.qual.Invoke:
org.checkerframework.common.reflection.qual.MethodVal -> org.checkerframework.common.reflection.qual.MethodVal:
    java.lang.String[] className() -> className
    java.lang.String[] methodName() -> methodName
    int[] params() -> params
org.checkerframework.common.reflection.qual.MethodValBottom -> org.checkerframework.common.reflection.qual.MethodValBottom:
org.checkerframework.common.reflection.qual.NewInstance -> org.checkerframework.common.reflection.qual.NewInstance:
org.checkerframework.common.reflection.qual.UnknownClass -> org.checkerframework.common.reflection.qual.UnknownClass:
org.checkerframework.common.reflection.qual.UnknownMethod -> org.checkerframework.common.reflection.qual.UnknownMethod:
org.checkerframework.common.util.report.qual.ReportCall -> org.checkerframework.common.util.report.qual.ReportCall:
org.checkerframework.common.util.report.qual.ReportCreation -> org.checkerframework.common.util.report.qual.ReportCreation:
org.checkerframework.common.util.report.qual.ReportInherit -> org.checkerframework.common.util.report.qual.ReportInherit:
org.checkerframework.common.util.report.qual.ReportOverride -> org.checkerframework.common.util.report.qual.ReportOverride:
org.checkerframework.common.util.report.qual.ReportReadWrite -> org.checkerframework.common.util.report.qual.ReportReadWrite:
org.checkerframework.common.util.report.qual.ReportUnqualified -> org.checkerframework.common.util.report.qual.ReportUnqualified:
org.checkerframework.common.util.report.qual.ReportUse -> org.checkerframework.common.util.report.qual.ReportUse:
org.checkerframework.common.util.report.qual.ReportWrite -> org.checkerframework.common.util.report.qual.ReportWrite:
org.checkerframework.common.value.qual.ArrayLen -> org.checkerframework.common.value.qual.ArrayLen:
    int[] value() -> value
org.checkerframework.common.value.qual.ArrayLenRange -> org.checkerframework.common.value.qual.ArrayLenRange:
    int from() -> from
    int to() -> to
org.checkerframework.common.value.qual.BoolVal -> org.checkerframework.common.value.qual.BoolVal:
    boolean[] value() -> value
org.checkerframework.common.value.qual.BottomVal -> org.checkerframework.common.value.qual.BottomVal:
org.checkerframework.common.value.qual.DoubleVal -> org.checkerframework.common.value.qual.DoubleVal:
    double[] value() -> value
org.checkerframework.common.value.qual.EnsuresMinLenIf -> org.checkerframework.common.value.qual.EnsuresMinLenIf:
    java.lang.String[] expression() -> expression
    boolean result() -> result
    int targetValue() -> targetValue
org.checkerframework.common.value.qual.IntRange -> org.checkerframework.common.value.qual.IntRange:
    long from() -> from
    long to() -> to
org.checkerframework.common.value.qual.IntRangeFromGTENegativeOne -> org.checkerframework.common.value.qual.IntRangeFromGTENegativeOne:
org.checkerframework.common.value.qual.IntRangeFromNonNegative -> org.checkerframework.common.value.qual.IntRangeFromNonNegative:
org.checkerframework.common.value.qual.IntRangeFromPositive -> org.checkerframework.common.value.qual.IntRangeFromPositive:
org.checkerframework.common.value.qual.IntVal -> org.checkerframework.common.value.qual.IntVal:
    long[] value() -> value
org.checkerframework.common.value.qual.MinLen -> org.checkerframework.common.value.qual.MinLen:
    int value() -> value
org.checkerframework.common.value.qual.MinLenFieldInvariant -> org.checkerframework.common.value.qual.MinLenFieldInvariant:
    int[] minLen() -> minLen
    java.lang.String[] field() -> field
org.checkerframework.common.value.qual.PolyValue -> org.checkerframework.common.value.qual.PolyValue:
org.checkerframework.common.value.qual.StaticallyExecutable -> org.checkerframework.common.value.qual.StaticallyExecutable:
org.checkerframework.common.value.qual.StringVal -> org.checkerframework.common.value.qual.StringVal:
    java.lang.String[] value() -> value
org.checkerframework.common.value.qual.UnknownVal -> org.checkerframework.common.value.qual.UnknownVal:
org.checkerframework.dataflow.qual.Deterministic -> org.checkerframework.dataflow.qual.Deterministic:
org.checkerframework.dataflow.qual.Pure -> org.checkerframework.dataflow.qual.Pure:
org.checkerframework.dataflow.qual.Pure$Kind -> org.checkerframework.dataflow.qual.Pure$Kind:
    org.checkerframework.dataflow.qual.Pure$Kind SIDE_EFFECT_FREE -> SIDE_EFFECT_FREE
    org.checkerframework.dataflow.qual.Pure$Kind DETERMINISTIC -> DETERMINISTIC
    org.checkerframework.dataflow.qual.Pure$Kind[] $VALUES -> $VALUES
    org.checkerframework.dataflow.qual.Pure$Kind[] values() -> values
    org.checkerframework.dataflow.qual.Pure$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.checkerframework.dataflow.qual.SideEffectFree -> org.checkerframework.dataflow.qual.SideEffectFree:
org.checkerframework.dataflow.qual.TerminatesExecution -> org.checkerframework.dataflow.qual.TerminatesExecution:
org.checkerframework.framework.qual.AnnotatedFor -> org.checkerframework.framework.qual.AnnotatedFor:
    java.lang.String[] value() -> value
org.checkerframework.framework.qual.Bottom -> org.checkerframework.framework.qual.Bottom:
org.checkerframework.framework.qual.ConditionalPostconditionAnnotation -> org.checkerframework.framework.qual.ConditionalPostconditionAnnotation:
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.Covariant -> org.checkerframework.framework.qual.Covariant:
    int[] value() -> value
org.checkerframework.framework.qual.DefaultFor -> org.checkerframework.framework.qual.DefaultFor:
    org.checkerframework.framework.qual.TypeUseLocation[] value() -> value
org.checkerframework.framework.qual.DefaultInUncheckedCodeFor -> org.checkerframework.framework.qual.DefaultInUncheckedCodeFor:
    org.checkerframework.framework.qual.TypeUseLocation[] value() -> value
org.checkerframework.framework.qual.DefaultQualifier -> org.checkerframework.framework.qual.DefaultQualifier:
    java.lang.Class value() -> value
    org.checkerframework.framework.qual.TypeUseLocation[] locations() -> locations
org.checkerframework.framework.qual.DefaultQualifierInHierarchy -> org.checkerframework.framework.qual.DefaultQualifierInHierarchy:
org.checkerframework.framework.qual.DefaultQualifierInHierarchyInUncheckedCode -> org.checkerframework.framework.qual.DefaultQualifierInHierarchyInUncheckedCode:
org.checkerframework.framework.qual.DefaultQualifiers -> org.checkerframework.framework.qual.DefaultQualifiers:
    org.checkerframework.framework.qual.DefaultQualifier[] value() -> value
org.checkerframework.framework.qual.EnsuresQualifier -> org.checkerframework.framework.qual.EnsuresQualifier:
    java.lang.String[] expression() -> expression
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.EnsuresQualifierIf -> org.checkerframework.framework.qual.EnsuresQualifierIf:
    java.lang.String[] expression() -> expression
    java.lang.Class qualifier() -> qualifier
    boolean result() -> result
org.checkerframework.framework.qual.EnsuresQualifiers -> org.checkerframework.framework.qual.EnsuresQualifiers:
    org.checkerframework.framework.qual.EnsuresQualifier[] value() -> value
org.checkerframework.framework.qual.EnsuresQualifiersIf -> org.checkerframework.framework.qual.EnsuresQualifiersIf:
    org.checkerframework.framework.qual.EnsuresQualifierIf[] value() -> value
org.checkerframework.framework.qual.FieldInvariant -> org.checkerframework.framework.qual.FieldInvariant:
    java.lang.Class[] qualifier() -> qualifier
    java.lang.String[] field() -> field
org.checkerframework.framework.qual.FromByteCode -> org.checkerframework.framework.qual.FromByteCode:
org.checkerframework.framework.qual.FromStubFile -> org.checkerframework.framework.qual.FromStubFile:
org.checkerframework.framework.qual.IgnoreInWholeProgramInference -> org.checkerframework.framework.qual.IgnoreInWholeProgramInference:
org.checkerframework.framework.qual.ImplicitFor -> org.checkerframework.framework.qual.ImplicitFor:
    org.checkerframework.framework.qual.LiteralKind[] literals() -> literals
    org.checkerframework.framework.qual.TypeKind[] types() -> types
    java.lang.Class[] typeNames() -> typeNames
    java.lang.String[] stringPatterns() -> stringPatterns
org.checkerframework.framework.qual.InheritedAnnotation -> org.checkerframework.framework.qual.InheritedAnnotation:
org.checkerframework.framework.qual.InvisibleQualifier -> org.checkerframework.framework.qual.InvisibleQualifier:
org.checkerframework.framework.qual.JavaExpression -> org.checkerframework.framework.qual.JavaExpression:
org.checkerframework.framework.qual.LiteralKind -> org.checkerframework.framework.qual.LiteralKind:
    org.checkerframework.framework.qual.LiteralKind NULL -> NULL
    org.checkerframework.framework.qual.LiteralKind INT -> INT
    org.checkerframework.framework.qual.LiteralKind LONG -> LONG
    org.checkerframework.framework.qual.LiteralKind FLOAT -> FLOAT
    org.checkerframework.framework.qual.LiteralKind DOUBLE -> DOUBLE
    org.checkerframework.framework.qual.LiteralKind BOOLEAN -> BOOLEAN
    org.checkerframework.framework.qual.LiteralKind CHAR -> CHAR
    org.checkerframework.framework.qual.LiteralKind STRING -> STRING
    org.checkerframework.framework.qual.LiteralKind ALL -> ALL
    org.checkerframework.framework.qual.LiteralKind PRIMITIVE -> PRIMITIVE
    org.checkerframework.framework.qual.LiteralKind[] $VALUES -> $VALUES
    org.checkerframework.framework.qual.LiteralKind[] values() -> values
    org.checkerframework.framework.qual.LiteralKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.util.List allLiteralKinds() -> allLiteralKinds
    java.util.List primitiveLiteralKinds() -> primitiveLiteralKinds
    void <clinit>() -> <clinit>
org.checkerframework.framework.qual.MonotonicQualifier -> org.checkerframework.framework.qual.MonotonicQualifier:
    java.lang.Class value() -> value
org.checkerframework.framework.qual.PolyAll -> org.checkerframework.framework.qual.PolyAll:
org.checkerframework.framework.qual.PolymorphicQualifier -> org.checkerframework.framework.qual.PolymorphicQualifier:
    java.lang.Class value() -> value
org.checkerframework.framework.qual.PostconditionAnnotation -> org.checkerframework.framework.qual.PostconditionAnnotation:
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.PreconditionAnnotation -> org.checkerframework.framework.qual.PreconditionAnnotation:
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.QualifierArgument -> org.checkerframework.framework.qual.QualifierArgument:
    java.lang.String value() -> value
org.checkerframework.framework.qual.RelevantJavaTypes -> org.checkerframework.framework.qual.RelevantJavaTypes:
    java.lang.Class[] value() -> value
org.checkerframework.framework.qual.RequiresQualifier -> org.checkerframework.framework.qual.RequiresQualifier:
    java.lang.String[] expression() -> expression
    java.lang.Class qualifier() -> qualifier
org.checkerframework.framework.qual.RequiresQualifiers -> org.checkerframework.framework.qual.RequiresQualifiers:
    org.checkerframework.framework.qual.RequiresQualifier[] value() -> value
org.checkerframework.framework.qual.StubFiles -> org.checkerframework.framework.qual.StubFiles:
    java.lang.String[] value() -> value
org.checkerframework.framework.qual.SubtypeOf -> org.checkerframework.framework.qual.SubtypeOf:
    java.lang.Class[] value() -> value
org.checkerframework.framework.qual.TargetLocations -> org.checkerframework.framework.qual.TargetLocations:
    org.checkerframework.framework.qual.TypeUseLocation[] value() -> value
org.checkerframework.framework.qual.TypeKind -> org.checkerframework.framework.qual.TypeKind:
    org.checkerframework.framework.qual.TypeKind BOOLEAN -> BOOLEAN
    org.checkerframework.framework.qual.TypeKind BYTE -> BYTE
    org.checkerframework.framework.qual.TypeKind SHORT -> SHORT
    org.checkerframework.framework.qual.TypeKind INT -> INT
    org.checkerframework.framework.qual.TypeKind LONG -> LONG
    org.checkerframework.framework.qual.TypeKind CHAR -> CHAR
    org.checkerframework.framework.qual.TypeKind FLOAT -> FLOAT
    org.checkerframework.framework.qual.TypeKind DOUBLE -> DOUBLE
    org.checkerframework.framework.qual.TypeKind VOID -> VOID
    org.checkerframework.framework.qual.TypeKind NONE -> NONE
    org.checkerframework.framework.qual.TypeKind NULL -> NULL
    org.checkerframework.framework.qual.TypeKind ARRAY -> ARRAY
    org.checkerframework.framework.qual.TypeKind DECLARED -> DECLARED
    org.checkerframework.framework.qual.TypeKind ERROR -> ERROR
    org.checkerframework.framework.qual.TypeKind TYPEVAR -> TYPEVAR
    org.checkerframework.framework.qual.TypeKind WILDCARD -> WILDCARD
    org.checkerframework.framework.qual.TypeKind PACKAGE -> PACKAGE
    org.checkerframework.framework.qual.TypeKind EXECUTABLE -> EXECUTABLE
    org.checkerframework.framework.qual.TypeKind OTHER -> OTHER
    org.checkerframework.framework.qual.TypeKind UNION -> UNION
    org.checkerframework.framework.qual.TypeKind INTERSECTION -> INTERSECTION
    org.checkerframework.framework.qual.TypeKind[] $VALUES -> $VALUES
    org.checkerframework.framework.qual.TypeKind[] values() -> values
    org.checkerframework.framework.qual.TypeKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.checkerframework.framework.qual.TypeUseLocation -> org.checkerframework.framework.qual.TypeUseLocation:
    org.checkerframework.framework.qual.TypeUseLocation FIELD -> FIELD
    org.checkerframework.framework.qual.TypeUseLocation LOCAL_VARIABLE -> LOCAL_VARIABLE
    org.checkerframework.framework.qual.TypeUseLocation RESOURCE_VARIABLE -> RESOURCE_VARIABLE
    org.checkerframework.framework.qual.TypeUseLocation EXCEPTION_PARAMETER -> EXCEPTION_PARAMETER
    org.checkerframework.framework.qual.TypeUseLocation RECEIVER -> RECEIVER
    org.checkerframework.framework.qual.TypeUseLocation PARAMETER -> PARAMETER
    org.checkerframework.framework.qual.TypeUseLocation RETURN -> RETURN
    org.checkerframework.framework.qual.TypeUseLocation LOWER_BOUND -> LOWER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation EXPLICIT_LOWER_BOUND -> EXPLICIT_LOWER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation IMPLICIT_LOWER_BOUND -> IMPLICIT_LOWER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation UPPER_BOUND -> UPPER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation EXPLICIT_UPPER_BOUND -> EXPLICIT_UPPER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation IMPLICIT_UPPER_BOUND -> IMPLICIT_UPPER_BOUND
    org.checkerframework.framework.qual.TypeUseLocation OTHERWISE -> OTHERWISE
    org.checkerframework.framework.qual.TypeUseLocation ALL -> ALL
    org.checkerframework.framework.qual.TypeUseLocation[] $VALUES -> $VALUES
    org.checkerframework.framework.qual.TypeUseLocation[] values() -> values
    org.checkerframework.framework.qual.TypeUseLocation valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.checkerframework.framework.qual.Unqualified -> org.checkerframework.framework.qual.Unqualified:
org.checkerframework.framework.qual.Unused -> org.checkerframework.framework.qual.Unused:
    java.lang.Class when() -> when
org.checkerframework.framework.util.PurityUnqualified -> org.checkerframework.framework.util.PurityUnqualified:
org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement -> org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement:
org.openjdk.javax.annotation.processing.AbstractProcessor -> org.openjdk.javax.annotation.processing.AbstractProcessor:
    org.openjdk.javax.annotation.processing.ProcessingEnvironment processingEnv -> processingEnv
    boolean initialized -> initialized
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    java.util.Set getSupportedOptions() -> getSupportedOptions
    java.util.Set getSupportedAnnotationTypes() -> getSupportedAnnotationTypes
    org.openjdk.javax.lang.model.SourceVersion getSupportedSourceVersion() -> getSupportedSourceVersion
    void init(org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> init
    boolean process(java.util.Set,org.openjdk.javax.annotation.processing.RoundEnvironment) -> process
    java.lang.Iterable getCompletions(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.String) -> getCompletions
    boolean isInitialized() -> isInitialized
    java.util.Set arrayToSet(java.lang.String[],boolean) -> arrayToSet
    void <clinit>() -> <clinit>
org.openjdk.javax.annotation.processing.Completion -> org.openjdk.javax.annotation.processing.Completion:
    java.lang.String getValue() -> getValue
    java.lang.String getMessage() -> getMessage
org.openjdk.javax.annotation.processing.Completions -> org.openjdk.javax.annotation.processing.Completions:
    void <init>() -> <init>
    org.openjdk.javax.annotation.processing.Completion of(java.lang.String,java.lang.String) -> of
    org.openjdk.javax.annotation.processing.Completion of(java.lang.String) -> of
org.openjdk.javax.annotation.processing.Completions$SimpleCompletion -> org.openjdk.javax.annotation.processing.Completions$SimpleCompletion:
    java.lang.String value -> value
    java.lang.String message -> message
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getValue() -> getValue
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
org.openjdk.javax.annotation.processing.Filer -> org.openjdk.javax.annotation.processing.Filer:
    org.openjdk.javax.tools.JavaFileObject createSourceFile(java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element[]) -> createSourceFile
    org.openjdk.javax.tools.JavaFileObject createClassFile(java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element[]) -> createClassFile
    org.openjdk.javax.tools.FileObject createResource(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.CharSequence,java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element[]) -> createResource
    org.openjdk.javax.tools.FileObject getResource(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.CharSequence,java.lang.CharSequence) -> getResource
org.openjdk.javax.annotation.processing.FilerException -> org.openjdk.javax.annotation.processing.FilerException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.openjdk.javax.annotation.processing.Generated -> org.openjdk.javax.annotation.processing.Generated:
    java.lang.String[] value() -> value
    java.lang.String date() -> date
    java.lang.String comments() -> comments
org.openjdk.javax.annotation.processing.Messager -> org.openjdk.javax.annotation.processing.Messager:
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence) -> printMessage
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element) -> printMessage
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror) -> printMessage
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.AnnotationValue) -> printMessage
org.openjdk.javax.annotation.processing.ProcessingEnvironment -> org.openjdk.javax.annotation.processing.ProcessingEnvironment:
    java.util.Map getOptions() -> getOptions
    org.openjdk.javax.annotation.processing.Messager getMessager() -> getMessager
    org.openjdk.javax.annotation.processing.Filer getFiler() -> getFiler
    org.openjdk.javax.lang.model.util.Elements getElementUtils() -> getElementUtils
    org.openjdk.javax.lang.model.util.Types getTypeUtils() -> getTypeUtils
    org.openjdk.javax.lang.model.SourceVersion getSourceVersion() -> getSourceVersion
    java.util.Locale getLocale() -> getLocale
org.openjdk.javax.annotation.processing.Processor -> org.openjdk.javax.annotation.processing.Processor:
    java.util.Set getSupportedOptions() -> getSupportedOptions
    java.util.Set getSupportedAnnotationTypes() -> getSupportedAnnotationTypes
    org.openjdk.javax.lang.model.SourceVersion getSupportedSourceVersion() -> getSupportedSourceVersion
    void init(org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> init
    boolean process(java.util.Set,org.openjdk.javax.annotation.processing.RoundEnvironment) -> process
    java.lang.Iterable getCompletions(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.String) -> getCompletions
org.openjdk.javax.annotation.processing.RoundEnvironment -> org.openjdk.javax.annotation.processing.RoundEnvironment:
    boolean processingOver() -> processingOver
    boolean errorRaised() -> errorRaised
    java.util.Set getRootElements() -> getRootElements
    java.util.Set getElementsAnnotatedWith(org.openjdk.javax.lang.model.element.TypeElement) -> getElementsAnnotatedWith
    java.util.Set getElementsAnnotatedWithAny(org.openjdk.javax.lang.model.element.TypeElement[]) -> getElementsAnnotatedWithAny
    java.util.Set getElementsAnnotatedWith(java.lang.Class) -> getElementsAnnotatedWith
    java.util.Set getElementsAnnotatedWithAny(java.util.Set) -> getElementsAnnotatedWithAny
org.openjdk.javax.annotation.processing.SupportedAnnotationTypes -> org.openjdk.javax.annotation.processing.SupportedAnnotationTypes:
    java.lang.String[] value() -> value
org.openjdk.javax.annotation.processing.SupportedOptions -> org.openjdk.javax.annotation.processing.SupportedOptions:
    java.lang.String[] value() -> value
org.openjdk.javax.annotation.processing.SupportedSourceVersion -> org.openjdk.javax.annotation.processing.SupportedSourceVersion:
    org.openjdk.javax.lang.model.SourceVersion value() -> value
org.openjdk.javax.lang.model.AnnotatedConstruct -> org.openjdk.javax.lang.model.AnnotatedConstruct:
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Class) -> getAnnotationsByType
org.openjdk.javax.lang.model.SourceVersion -> org.openjdk.javax.lang.model.SourceVersion:
    org.openjdk.javax.lang.model.SourceVersion RELEASE_0 -> RELEASE_0
    org.openjdk.javax.lang.model.SourceVersion RELEASE_1 -> RELEASE_1
    org.openjdk.javax.lang.model.SourceVersion RELEASE_2 -> RELEASE_2
    org.openjdk.javax.lang.model.SourceVersion RELEASE_3 -> RELEASE_3
    org.openjdk.javax.lang.model.SourceVersion RELEASE_4 -> RELEASE_4
    org.openjdk.javax.lang.model.SourceVersion RELEASE_5 -> RELEASE_5
    org.openjdk.javax.lang.model.SourceVersion RELEASE_6 -> RELEASE_6
    org.openjdk.javax.lang.model.SourceVersion RELEASE_7 -> RELEASE_7
    org.openjdk.javax.lang.model.SourceVersion RELEASE_8 -> RELEASE_8
    org.openjdk.javax.lang.model.SourceVersion RELEASE_9 -> RELEASE_9
    org.openjdk.javax.lang.model.SourceVersion latestSupported -> latestSupported
    org.openjdk.javax.lang.model.SourceVersion[] $VALUES -> $VALUES
    org.openjdk.javax.lang.model.SourceVersion[] values() -> values
    org.openjdk.javax.lang.model.SourceVersion valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.javax.lang.model.SourceVersion latest() -> latest
    org.openjdk.javax.lang.model.SourceVersion getLatestSupported() -> getLatestSupported
    org.openjdk.javax.lang.model.SourceVersion latestSupported() -> latestSupported
    boolean isIdentifier(java.lang.CharSequence) -> isIdentifier
    boolean isName(java.lang.CharSequence) -> isName
    boolean isName(java.lang.CharSequence,org.openjdk.javax.lang.model.SourceVersion) -> isName
    boolean isKeyword(java.lang.CharSequence) -> isKeyword
    boolean isKeyword(java.lang.CharSequence,org.openjdk.javax.lang.model.SourceVersion) -> isKeyword
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.UnknownEntityException -> org.openjdk.javax.lang.model.UnknownEntityException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.openjdk.javax.lang.model.element.AnnotationMirror -> org.openjdk.javax.lang.model.element.AnnotationMirror:
    org.openjdk.javax.lang.model.type.DeclaredType getAnnotationType() -> getAnnotationType
    java.util.Map getElementValues() -> getElementValues
org.openjdk.javax.lang.model.element.AnnotationValue -> org.openjdk.javax.lang.model.element.AnnotationValue:
    java.lang.Object getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object accept(org.openjdk.javax.lang.model.element.AnnotationValueVisitor,java.lang.Object) -> accept
org.openjdk.javax.lang.model.element.AnnotationValueVisitor -> org.openjdk.javax.lang.model.element.AnnotationValueVisitor:
    java.lang.Object visit(org.openjdk.javax.lang.model.element.AnnotationValue,java.lang.Object) -> visit
    java.lang.Object visit(org.openjdk.javax.lang.model.element.AnnotationValue) -> visit
    java.lang.Object visitBoolean(boolean,java.lang.Object) -> visitBoolean
    java.lang.Object visitByte(byte,java.lang.Object) -> visitByte
    java.lang.Object visitChar(char,java.lang.Object) -> visitChar
    java.lang.Object visitDouble(double,java.lang.Object) -> visitDouble
    java.lang.Object visitFloat(float,java.lang.Object) -> visitFloat
    java.lang.Object visitInt(int,java.lang.Object) -> visitInt
    java.lang.Object visitLong(long,java.lang.Object) -> visitLong
    java.lang.Object visitShort(short,java.lang.Object) -> visitShort
    java.lang.Object visitString(java.lang.String,java.lang.Object) -> visitString
    java.lang.Object visitType(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Object) -> visitType
    java.lang.Object visitEnumConstant(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitEnumConstant
    java.lang.Object visitAnnotation(org.openjdk.javax.lang.model.element.AnnotationMirror,java.lang.Object) -> visitAnnotation
    java.lang.Object visitArray(java.util.List,java.lang.Object) -> visitArray
    java.lang.Object visitUnknown(org.openjdk.javax.lang.model.element.AnnotationValue,java.lang.Object) -> visitUnknown
org.openjdk.javax.lang.model.element.Element -> org.openjdk.javax.lang.model.element.Element:
    org.openjdk.javax.lang.model.type.TypeMirror asType() -> asType
    org.openjdk.javax.lang.model.element.ElementKind getKind() -> getKind
    java.util.Set getModifiers() -> getModifiers
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    java.util.List getEnclosedElements() -> getEnclosedElements
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
org.openjdk.javax.lang.model.element.ElementKind -> org.openjdk.javax.lang.model.element.ElementKind:
    org.openjdk.javax.lang.model.element.ElementKind PACKAGE -> PACKAGE
    org.openjdk.javax.lang.model.element.ElementKind ENUM -> ENUM
    org.openjdk.javax.lang.model.element.ElementKind CLASS -> CLASS
    org.openjdk.javax.lang.model.element.ElementKind ANNOTATION_TYPE -> ANNOTATION_TYPE
    org.openjdk.javax.lang.model.element.ElementKind INTERFACE -> INTERFACE
    org.openjdk.javax.lang.model.element.ElementKind ENUM_CONSTANT -> ENUM_CONSTANT
    org.openjdk.javax.lang.model.element.ElementKind FIELD -> FIELD
    org.openjdk.javax.lang.model.element.ElementKind PARAMETER -> PARAMETER
    org.openjdk.javax.lang.model.element.ElementKind LOCAL_VARIABLE -> LOCAL_VARIABLE
    org.openjdk.javax.lang.model.element.ElementKind EXCEPTION_PARAMETER -> EXCEPTION_PARAMETER
    org.openjdk.javax.lang.model.element.ElementKind METHOD -> METHOD
    org.openjdk.javax.lang.model.element.ElementKind CONSTRUCTOR -> CONSTRUCTOR
    org.openjdk.javax.lang.model.element.ElementKind STATIC_INIT -> STATIC_INIT
    org.openjdk.javax.lang.model.element.ElementKind INSTANCE_INIT -> INSTANCE_INIT
    org.openjdk.javax.lang.model.element.ElementKind TYPE_PARAMETER -> TYPE_PARAMETER
    org.openjdk.javax.lang.model.element.ElementKind OTHER -> OTHER
    org.openjdk.javax.lang.model.element.ElementKind RESOURCE_VARIABLE -> RESOURCE_VARIABLE
    org.openjdk.javax.lang.model.element.ElementKind MODULE -> MODULE
    org.openjdk.javax.lang.model.element.ElementKind[] $VALUES -> $VALUES
    org.openjdk.javax.lang.model.element.ElementKind[] values() -> values
    org.openjdk.javax.lang.model.element.ElementKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isClass() -> isClass
    boolean isInterface() -> isInterface
    boolean isField() -> isField
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.element.ElementVisitor -> org.openjdk.javax.lang.model.element.ElementVisitor:
    java.lang.Object visit(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> visit
    java.lang.Object visit(org.openjdk.javax.lang.model.element.Element) -> visit
    java.lang.Object visitPackage(org.openjdk.javax.lang.model.element.PackageElement,java.lang.Object) -> visitPackage
    java.lang.Object visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitType
    java.lang.Object visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariable
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutable
    java.lang.Object visitTypeParameter(org.openjdk.javax.lang.model.element.TypeParameterElement,java.lang.Object) -> visitTypeParameter
    java.lang.Object visitUnknown(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> visitUnknown
    java.lang.Object visitModule(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.Object) -> visitModule
org.openjdk.javax.lang.model.element.ExecutableElement -> org.openjdk.javax.lang.model.element.ExecutableElement:
    java.util.List getTypeParameters() -> getTypeParameters
    org.openjdk.javax.lang.model.type.TypeMirror getReturnType() -> getReturnType
    java.util.List getParameters() -> getParameters
    org.openjdk.javax.lang.model.type.TypeMirror getReceiverType() -> getReceiverType
    boolean isVarArgs() -> isVarArgs
    boolean isDefault() -> isDefault
    java.util.List getThrownTypes() -> getThrownTypes
    org.openjdk.javax.lang.model.element.AnnotationValue getDefaultValue() -> getDefaultValue
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
org.openjdk.javax.lang.model.element.Modifier -> org.openjdk.javax.lang.model.element.Modifier:
    org.openjdk.javax.lang.model.element.Modifier PUBLIC -> PUBLIC
    org.openjdk.javax.lang.model.element.Modifier PROTECTED -> PROTECTED
    org.openjdk.javax.lang.model.element.Modifier PRIVATE -> PRIVATE
    org.openjdk.javax.lang.model.element.Modifier ABSTRACT -> ABSTRACT
    org.openjdk.javax.lang.model.element.Modifier DEFAULT -> DEFAULT
    org.openjdk.javax.lang.model.element.Modifier STATIC -> STATIC
    org.openjdk.javax.lang.model.element.Modifier FINAL -> FINAL
    org.openjdk.javax.lang.model.element.Modifier TRANSIENT -> TRANSIENT
    org.openjdk.javax.lang.model.element.Modifier VOLATILE -> VOLATILE
    org.openjdk.javax.lang.model.element.Modifier SYNCHRONIZED -> SYNCHRONIZED
    org.openjdk.javax.lang.model.element.Modifier NATIVE -> NATIVE
    org.openjdk.javax.lang.model.element.Modifier STRICTFP -> STRICTFP
    org.openjdk.javax.lang.model.element.Modifier[] $VALUES -> $VALUES
    org.openjdk.javax.lang.model.element.Modifier[] values() -> values
    org.openjdk.javax.lang.model.element.Modifier valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.element.ModuleElement -> org.openjdk.javax.lang.model.element.ModuleElement:
    org.openjdk.javax.lang.model.element.Name getQualifiedName() -> getQualifiedName
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    java.util.List getEnclosedElements() -> getEnclosedElements
    boolean isOpen() -> isOpen
    boolean isUnnamed() -> isUnnamed
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    java.util.List getDirectives() -> getDirectives
org.openjdk.javax.lang.model.element.ModuleElement$Directive -> org.openjdk.javax.lang.model.element.ModuleElement$Directive:
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ModuleElement$DirectiveVisitor,java.lang.Object) -> accept
org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind -> org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind:
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind REQUIRES -> REQUIRES
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind EXPORTS -> EXPORTS
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind OPENS -> OPENS
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind USES -> USES
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind PROVIDES -> PROVIDES
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind[] $VALUES -> $VALUES
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind[] values() -> values
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.element.ModuleElement$DirectiveVisitor -> org.openjdk.javax.lang.model.element.ModuleElement$DirectiveVisitor:
    java.lang.Object visit(org.openjdk.javax.lang.model.element.ModuleElement$Directive) -> visit
    java.lang.Object visit(org.openjdk.javax.lang.model.element.ModuleElement$Directive,java.lang.Object) -> visit
    java.lang.Object visitRequires(org.openjdk.javax.lang.model.element.ModuleElement$RequiresDirective,java.lang.Object) -> visitRequires
    java.lang.Object visitExports(org.openjdk.javax.lang.model.element.ModuleElement$ExportsDirective,java.lang.Object) -> visitExports
    java.lang.Object visitOpens(org.openjdk.javax.lang.model.element.ModuleElement$OpensDirective,java.lang.Object) -> visitOpens
    java.lang.Object visitUses(org.openjdk.javax.lang.model.element.ModuleElement$UsesDirective,java.lang.Object) -> visitUses
    java.lang.Object visitProvides(org.openjdk.javax.lang.model.element.ModuleElement$ProvidesDirective,java.lang.Object) -> visitProvides
    java.lang.Object visitUnknown(org.openjdk.javax.lang.model.element.ModuleElement$Directive,java.lang.Object) -> visitUnknown
org.openjdk.javax.lang.model.element.ModuleElement$ExportsDirective -> org.openjdk.javax.lang.model.element.ModuleElement$ExportsDirective:
    org.openjdk.javax.lang.model.element.PackageElement getPackage() -> getPackage
    java.util.List getTargetModules() -> getTargetModules
org.openjdk.javax.lang.model.element.ModuleElement$OpensDirective -> org.openjdk.javax.lang.model.element.ModuleElement$OpensDirective:
    org.openjdk.javax.lang.model.element.PackageElement getPackage() -> getPackage
    java.util.List getTargetModules() -> getTargetModules
org.openjdk.javax.lang.model.element.ModuleElement$ProvidesDirective -> org.openjdk.javax.lang.model.element.ModuleElement$ProvidesDirective:
    org.openjdk.javax.lang.model.element.TypeElement getService() -> getService
    java.util.List getImplementations() -> getImplementations
org.openjdk.javax.lang.model.element.ModuleElement$RequiresDirective -> org.openjdk.javax.lang.model.element.ModuleElement$RequiresDirective:
    boolean isStatic() -> isStatic
    boolean isTransitive() -> isTransitive
    org.openjdk.javax.lang.model.element.ModuleElement getDependency() -> getDependency
org.openjdk.javax.lang.model.element.ModuleElement$UsesDirective -> org.openjdk.javax.lang.model.element.ModuleElement$UsesDirective:
    org.openjdk.javax.lang.model.element.TypeElement getService() -> getService
org.openjdk.javax.lang.model.element.Name -> org.openjdk.javax.lang.model.element.Name:
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean contentEquals(java.lang.CharSequence) -> contentEquals
org.openjdk.javax.lang.model.element.NestingKind -> org.openjdk.javax.lang.model.element.NestingKind:
    org.openjdk.javax.lang.model.element.NestingKind TOP_LEVEL -> TOP_LEVEL
    org.openjdk.javax.lang.model.element.NestingKind MEMBER -> MEMBER
    org.openjdk.javax.lang.model.element.NestingKind LOCAL -> LOCAL
    org.openjdk.javax.lang.model.element.NestingKind ANONYMOUS -> ANONYMOUS
    org.openjdk.javax.lang.model.element.NestingKind[] $VALUES -> $VALUES
    org.openjdk.javax.lang.model.element.NestingKind[] values() -> values
    org.openjdk.javax.lang.model.element.NestingKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isNested() -> isNested
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.element.PackageElement -> org.openjdk.javax.lang.model.element.PackageElement:
    org.openjdk.javax.lang.model.element.Name getQualifiedName() -> getQualifiedName
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    java.util.List getEnclosedElements() -> getEnclosedElements
    boolean isUnnamed() -> isUnnamed
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
org.openjdk.javax.lang.model.element.Parameterizable -> org.openjdk.javax.lang.model.element.Parameterizable:
    java.util.List getTypeParameters() -> getTypeParameters
org.openjdk.javax.lang.model.element.QualifiedNameable -> org.openjdk.javax.lang.model.element.QualifiedNameable:
    org.openjdk.javax.lang.model.element.Name getQualifiedName() -> getQualifiedName
org.openjdk.javax.lang.model.element.TypeElement -> org.openjdk.javax.lang.model.element.TypeElement:
    java.util.List getEnclosedElements() -> getEnclosedElements
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Name getQualifiedName() -> getQualifiedName
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.type.TypeMirror getSuperclass() -> getSuperclass
    java.util.List getInterfaces() -> getInterfaces
    java.util.List getTypeParameters() -> getTypeParameters
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
org.openjdk.javax.lang.model.element.TypeParameterElement -> org.openjdk.javax.lang.model.element.TypeParameterElement:
    org.openjdk.javax.lang.model.element.Element getGenericElement() -> getGenericElement
    java.util.List getBounds() -> getBounds
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
org.openjdk.javax.lang.model.element.UnknownAnnotationValueException -> org.openjdk.javax.lang.model.element.UnknownAnnotationValueException:
    long serialVersionUID -> serialVersionUID
    org.openjdk.javax.lang.model.element.AnnotationValue av -> av
    java.lang.Object parameter -> parameter
    void <init>(org.openjdk.javax.lang.model.element.AnnotationValue,java.lang.Object) -> <init>
    org.openjdk.javax.lang.model.element.AnnotationValue getUnknownAnnotationValue() -> getUnknownAnnotationValue
    java.lang.Object getArgument() -> getArgument
org.openjdk.javax.lang.model.element.UnknownDirectiveException -> org.openjdk.javax.lang.model.element.UnknownDirectiveException:
    long serialVersionUID -> serialVersionUID
    org.openjdk.javax.lang.model.element.ModuleElement$Directive directive -> directive
    java.lang.Object parameter -> parameter
    void <init>(org.openjdk.javax.lang.model.element.ModuleElement$Directive,java.lang.Object) -> <init>
    org.openjdk.javax.lang.model.element.ModuleElement$Directive getUnknownDirective() -> getUnknownDirective
    java.lang.Object getArgument() -> getArgument
org.openjdk.javax.lang.model.element.UnknownElementException -> org.openjdk.javax.lang.model.element.UnknownElementException:
    long serialVersionUID -> serialVersionUID
    org.openjdk.javax.lang.model.element.Element element -> element
    java.lang.Object parameter -> parameter
    void <init>(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> <init>
    org.openjdk.javax.lang.model.element.Element getUnknownElement() -> getUnknownElement
    java.lang.Object getArgument() -> getArgument
org.openjdk.javax.lang.model.element.VariableElement -> org.openjdk.javax.lang.model.element.VariableElement:
    java.lang.Object getConstantValue() -> getConstantValue
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
org.openjdk.javax.lang.model.type.ArrayType -> org.openjdk.javax.lang.model.type.ArrayType:
    org.openjdk.javax.lang.model.type.TypeMirror getComponentType() -> getComponentType
org.openjdk.javax.lang.model.type.DeclaredType -> org.openjdk.javax.lang.model.type.DeclaredType:
    org.openjdk.javax.lang.model.element.Element asElement() -> asElement
    org.openjdk.javax.lang.model.type.TypeMirror getEnclosingType() -> getEnclosingType
    java.util.List getTypeArguments() -> getTypeArguments
org.openjdk.javax.lang.model.type.ErrorType -> org.openjdk.javax.lang.model.type.ErrorType:
org.openjdk.javax.lang.model.type.ExecutableType -> org.openjdk.javax.lang.model.type.ExecutableType:
    java.util.List getTypeVariables() -> getTypeVariables
    org.openjdk.javax.lang.model.type.TypeMirror getReturnType() -> getReturnType
    java.util.List getParameterTypes() -> getParameterTypes
    org.openjdk.javax.lang.model.type.TypeMirror getReceiverType() -> getReceiverType
    java.util.List getThrownTypes() -> getThrownTypes
org.openjdk.javax.lang.model.type.IntersectionType -> org.openjdk.javax.lang.model.type.IntersectionType:
    java.util.List getBounds() -> getBounds
org.openjdk.javax.lang.model.type.MirroredTypeException -> org.openjdk.javax.lang.model.type.MirroredTypeException:
    long serialVersionUID -> serialVersionUID
    org.openjdk.javax.lang.model.type.TypeMirror type -> type
    void <init>(org.openjdk.javax.lang.model.type.TypeMirror) -> <init>
    org.openjdk.javax.lang.model.type.TypeMirror getTypeMirror() -> getTypeMirror
    void readObject(java.io.ObjectInputStream) -> readObject
org.openjdk.javax.lang.model.type.MirroredTypesException -> org.openjdk.javax.lang.model.type.MirroredTypesException:
    long serialVersionUID -> serialVersionUID
    java.util.List types -> types
    void <init>(java.lang.String,org.openjdk.javax.lang.model.type.TypeMirror) -> <init>
    void <init>(java.util.List) -> <init>
    java.util.List getTypeMirrors() -> getTypeMirrors
    void readObject(java.io.ObjectInputStream) -> readObject
org.openjdk.javax.lang.model.type.NoType -> org.openjdk.javax.lang.model.type.NoType:
org.openjdk.javax.lang.model.type.NullType -> org.openjdk.javax.lang.model.type.NullType:
org.openjdk.javax.lang.model.type.PrimitiveType -> org.openjdk.javax.lang.model.type.PrimitiveType:
org.openjdk.javax.lang.model.type.ReferenceType -> org.openjdk.javax.lang.model.type.ReferenceType:
org.openjdk.javax.lang.model.type.TypeKind -> org.openjdk.javax.lang.model.type.TypeKind:
    org.openjdk.javax.lang.model.type.TypeKind BOOLEAN -> BOOLEAN
    org.openjdk.javax.lang.model.type.TypeKind BYTE -> BYTE
    org.openjdk.javax.lang.model.type.TypeKind SHORT -> SHORT
    org.openjdk.javax.lang.model.type.TypeKind INT -> INT
    org.openjdk.javax.lang.model.type.TypeKind LONG -> LONG
    org.openjdk.javax.lang.model.type.TypeKind CHAR -> CHAR
    org.openjdk.javax.lang.model.type.TypeKind FLOAT -> FLOAT
    org.openjdk.javax.lang.model.type.TypeKind DOUBLE -> DOUBLE
    org.openjdk.javax.lang.model.type.TypeKind VOID -> VOID
    org.openjdk.javax.lang.model.type.TypeKind NONE -> NONE
    org.openjdk.javax.lang.model.type.TypeKind NULL -> NULL
    org.openjdk.javax.lang.model.type.TypeKind ARRAY -> ARRAY
    org.openjdk.javax.lang.model.type.TypeKind DECLARED -> DECLARED
    org.openjdk.javax.lang.model.type.TypeKind ERROR -> ERROR
    org.openjdk.javax.lang.model.type.TypeKind TYPEVAR -> TYPEVAR
    org.openjdk.javax.lang.model.type.TypeKind WILDCARD -> WILDCARD
    org.openjdk.javax.lang.model.type.TypeKind PACKAGE -> PACKAGE
    org.openjdk.javax.lang.model.type.TypeKind EXECUTABLE -> EXECUTABLE
    org.openjdk.javax.lang.model.type.TypeKind OTHER -> OTHER
    org.openjdk.javax.lang.model.type.TypeKind UNION -> UNION
    org.openjdk.javax.lang.model.type.TypeKind INTERSECTION -> INTERSECTION
    org.openjdk.javax.lang.model.type.TypeKind MODULE -> MODULE
    org.openjdk.javax.lang.model.type.TypeKind[] $VALUES -> $VALUES
    org.openjdk.javax.lang.model.type.TypeKind[] values() -> values
    org.openjdk.javax.lang.model.type.TypeKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isPrimitive() -> isPrimitive
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.type.TypeKind$1 -> org.openjdk.javax.lang.model.type.TypeKind$1:
    int[] $SwitchMap$javax$lang$model$type$TypeKind -> $SwitchMap$javax$lang$model$type$TypeKind
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.type.TypeMirror -> org.openjdk.javax.lang.model.type.TypeMirror:
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
org.openjdk.javax.lang.model.type.TypeVariable -> org.openjdk.javax.lang.model.type.TypeVariable:
    org.openjdk.javax.lang.model.element.Element asElement() -> asElement
    org.openjdk.javax.lang.model.type.TypeMirror getUpperBound() -> getUpperBound
    org.openjdk.javax.lang.model.type.TypeMirror getLowerBound() -> getLowerBound
org.openjdk.javax.lang.model.type.TypeVisitor -> org.openjdk.javax.lang.model.type.TypeVisitor:
    java.lang.Object visit(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Object) -> visit
    java.lang.Object visit(org.openjdk.javax.lang.model.type.TypeMirror) -> visit
    java.lang.Object visitPrimitive(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitive
    java.lang.Object visitNull(org.openjdk.javax.lang.model.type.NullType,java.lang.Object) -> visitNull
    java.lang.Object visitArray(org.openjdk.javax.lang.model.type.ArrayType,java.lang.Object) -> visitArray
    java.lang.Object visitDeclared(org.openjdk.javax.lang.model.type.DeclaredType,java.lang.Object) -> visitDeclared
    java.lang.Object visitError(org.openjdk.javax.lang.model.type.ErrorType,java.lang.Object) -> visitError
    java.lang.Object visitTypeVariable(org.openjdk.javax.lang.model.type.TypeVariable,java.lang.Object) -> visitTypeVariable
    java.lang.Object visitWildcard(org.openjdk.javax.lang.model.type.WildcardType,java.lang.Object) -> visitWildcard
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.type.ExecutableType,java.lang.Object) -> visitExecutable
    java.lang.Object visitNoType(org.openjdk.javax.lang.model.type.NoType,java.lang.Object) -> visitNoType
    java.lang.Object visitUnknown(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Object) -> visitUnknown
    java.lang.Object visitUnion(org.openjdk.javax.lang.model.type.UnionType,java.lang.Object) -> visitUnion
    java.lang.Object visitIntersection(org.openjdk.javax.lang.model.type.IntersectionType,java.lang.Object) -> visitIntersection
org.openjdk.javax.lang.model.type.UnionType -> org.openjdk.javax.lang.model.type.UnionType:
    java.util.List getAlternatives() -> getAlternatives
org.openjdk.javax.lang.model.type.UnknownTypeException -> org.openjdk.javax.lang.model.type.UnknownTypeException:
    long serialVersionUID -> serialVersionUID
    org.openjdk.javax.lang.model.type.TypeMirror type -> type
    java.lang.Object parameter -> parameter
    void <init>(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Object) -> <init>
    org.openjdk.javax.lang.model.type.TypeMirror getUnknownType() -> getUnknownType
    java.lang.Object getArgument() -> getArgument
org.openjdk.javax.lang.model.type.WildcardType -> org.openjdk.javax.lang.model.type.WildcardType:
    org.openjdk.javax.lang.model.type.TypeMirror getExtendsBound() -> getExtendsBound
    org.openjdk.javax.lang.model.type.TypeMirror getSuperBound() -> getSuperBound
org.openjdk.javax.lang.model.util.AbstractAnnotationValueVisitor6 -> org.openjdk.javax.lang.model.util.AbstractAnnotationValueVisitor6:
    void <init>() -> <init>
    java.lang.Object visit(org.openjdk.javax.lang.model.element.AnnotationValue,java.lang.Object) -> visit
    java.lang.Object visit(org.openjdk.javax.lang.model.element.AnnotationValue) -> visit
    java.lang.Object visitUnknown(org.openjdk.javax.lang.model.element.AnnotationValue,java.lang.Object) -> visitUnknown
org.openjdk.javax.lang.model.util.AbstractAnnotationValueVisitor7 -> org.openjdk.javax.lang.model.util.AbstractAnnotationValueVisitor7:
    void <init>() -> <init>
org.openjdk.javax.lang.model.util.AbstractAnnotationValueVisitor8 -> org.openjdk.javax.lang.model.util.AbstractAnnotationValueVisitor8:
    void <init>() -> <init>
org.openjdk.javax.lang.model.util.AbstractAnnotationValueVisitor9 -> org.openjdk.javax.lang.model.util.AbstractAnnotationValueVisitor9:
    void <init>() -> <init>
org.openjdk.javax.lang.model.util.AbstractElementVisitor6 -> org.openjdk.javax.lang.model.util.AbstractElementVisitor6:
    void <init>() -> <init>
    java.lang.Object visit(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> visit
    java.lang.Object visit(org.openjdk.javax.lang.model.element.Element) -> visit
    java.lang.Object visitUnknown(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> visitUnknown
    java.lang.Object visitModule(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.Object) -> visitModule
org.openjdk.javax.lang.model.util.AbstractElementVisitor7 -> org.openjdk.javax.lang.model.util.AbstractElementVisitor7:
    void <init>() -> <init>
org.openjdk.javax.lang.model.util.AbstractElementVisitor8 -> org.openjdk.javax.lang.model.util.AbstractElementVisitor8:
    void <init>() -> <init>
org.openjdk.javax.lang.model.util.AbstractElementVisitor9 -> org.openjdk.javax.lang.model.util.AbstractElementVisitor9:
    void <init>() -> <init>
    java.lang.Object visitModule(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.Object) -> visitModule
org.openjdk.javax.lang.model.util.AbstractTypeVisitor6 -> org.openjdk.javax.lang.model.util.AbstractTypeVisitor6:
    void <init>() -> <init>
    java.lang.Object visit(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Object) -> visit
    java.lang.Object visit(org.openjdk.javax.lang.model.type.TypeMirror) -> visit
    java.lang.Object visitUnion(org.openjdk.javax.lang.model.type.UnionType,java.lang.Object) -> visitUnion
    java.lang.Object visitIntersection(org.openjdk.javax.lang.model.type.IntersectionType,java.lang.Object) -> visitIntersection
    java.lang.Object visitUnknown(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Object) -> visitUnknown
org.openjdk.javax.lang.model.util.AbstractTypeVisitor7 -> org.openjdk.javax.lang.model.util.AbstractTypeVisitor7:
    void <init>() -> <init>
    java.lang.Object visitUnion(org.openjdk.javax.lang.model.type.UnionType,java.lang.Object) -> visitUnion
org.openjdk.javax.lang.model.util.AbstractTypeVisitor8 -> org.openjdk.javax.lang.model.util.AbstractTypeVisitor8:
    void <init>() -> <init>
    java.lang.Object visitIntersection(org.openjdk.javax.lang.model.type.IntersectionType,java.lang.Object) -> visitIntersection
org.openjdk.javax.lang.model.util.AbstractTypeVisitor9 -> org.openjdk.javax.lang.model.util.AbstractTypeVisitor9:
    void <init>() -> <init>
org.openjdk.javax.lang.model.util.ElementFilter -> org.openjdk.javax.lang.model.util.ElementFilter:
    java.util.Set CONSTRUCTOR_KIND -> CONSTRUCTOR_KIND
    java.util.Set FIELD_KINDS -> FIELD_KINDS
    java.util.Set METHOD_KIND -> METHOD_KIND
    java.util.Set PACKAGE_KIND -> PACKAGE_KIND
    java.util.Set MODULE_KIND -> MODULE_KIND
    java.util.Set TYPE_KINDS -> TYPE_KINDS
    void <init>() -> <init>
    java.util.List fieldsIn(java.lang.Iterable) -> fieldsIn
    java.util.Set fieldsIn(java.util.Set) -> fieldsIn
    java.util.List constructorsIn(java.lang.Iterable) -> constructorsIn
    java.util.Set constructorsIn(java.util.Set) -> constructorsIn
    java.util.List methodsIn(java.lang.Iterable) -> methodsIn
    java.util.Set methodsIn(java.util.Set) -> methodsIn
    java.util.List typesIn(java.lang.Iterable) -> typesIn
    java.util.Set typesIn(java.util.Set) -> typesIn
    java.util.List packagesIn(java.lang.Iterable) -> packagesIn
    java.util.Set packagesIn(java.util.Set) -> packagesIn
    java.util.List modulesIn(java.lang.Iterable) -> modulesIn
    java.util.Set modulesIn(java.util.Set) -> modulesIn
    java.util.List listFilter(java.lang.Iterable,java.util.Set,java.lang.Class) -> listFilter
    java.util.Set setFilter(java.util.Set,java.util.Set,java.lang.Class) -> setFilter
    java.util.List exportsIn(java.lang.Iterable) -> exportsIn
    java.util.List opensIn(java.lang.Iterable) -> opensIn
    java.util.List providesIn(java.lang.Iterable) -> providesIn
    java.util.List requiresIn(java.lang.Iterable) -> requiresIn
    java.util.List usesIn(java.lang.Iterable) -> usesIn
    java.util.List listFilter(java.lang.Iterable,org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind,java.lang.Class) -> listFilter
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.util.ElementKindVisitor6 -> org.openjdk.javax.lang.model.util.ElementKindVisitor6:
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitPackage(org.openjdk.javax.lang.model.element.PackageElement,java.lang.Object) -> visitPackage
    java.lang.Object visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitType
    java.lang.Object visitTypeAsAnnotationType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitTypeAsAnnotationType
    java.lang.Object visitTypeAsClass(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitTypeAsClass
    java.lang.Object visitTypeAsEnum(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitTypeAsEnum
    java.lang.Object visitTypeAsInterface(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitTypeAsInterface
    java.lang.Object visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariable
    java.lang.Object visitVariableAsEnumConstant(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariableAsEnumConstant
    java.lang.Object visitVariableAsExceptionParameter(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariableAsExceptionParameter
    java.lang.Object visitVariableAsField(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariableAsField
    java.lang.Object visitVariableAsLocalVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariableAsLocalVariable
    java.lang.Object visitVariableAsParameter(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariableAsParameter
    java.lang.Object visitVariableAsResourceVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariableAsResourceVariable
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutable
    java.lang.Object visitExecutableAsConstructor(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutableAsConstructor
    java.lang.Object visitExecutableAsInstanceInit(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutableAsInstanceInit
    java.lang.Object visitExecutableAsMethod(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutableAsMethod
    java.lang.Object visitExecutableAsStaticInit(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutableAsStaticInit
    java.lang.Object visitTypeParameter(org.openjdk.javax.lang.model.element.TypeParameterElement,java.lang.Object) -> visitTypeParameter
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.util.ElementKindVisitor6$1 -> org.openjdk.javax.lang.model.util.ElementKindVisitor6$1:
    int[] $SwitchMap$javax$lang$model$element$ElementKind -> $SwitchMap$javax$lang$model$element$ElementKind
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.util.ElementKindVisitor7 -> org.openjdk.javax.lang.model.util.ElementKindVisitor7:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitVariableAsResourceVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariableAsResourceVariable
org.openjdk.javax.lang.model.util.ElementKindVisitor8 -> org.openjdk.javax.lang.model.util.ElementKindVisitor8:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
org.openjdk.javax.lang.model.util.ElementKindVisitor9 -> org.openjdk.javax.lang.model.util.ElementKindVisitor9:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitModule(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.Object) -> visitModule
org.openjdk.javax.lang.model.util.ElementScanner6 -> org.openjdk.javax.lang.model.util.ElementScanner6:
    java.lang.Object DEFAULT_VALUE -> DEFAULT_VALUE
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object scan(java.lang.Iterable,java.lang.Object) -> scan
    java.lang.Object scan(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> scan
    java.lang.Object scan(org.openjdk.javax.lang.model.element.Element) -> scan
    java.lang.Object visitPackage(org.openjdk.javax.lang.model.element.PackageElement,java.lang.Object) -> visitPackage
    java.lang.Object visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitType
    java.lang.Object visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariable
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutable
    java.lang.Object visitTypeParameter(org.openjdk.javax.lang.model.element.TypeParameterElement,java.lang.Object) -> visitTypeParameter
org.openjdk.javax.lang.model.util.ElementScanner7 -> org.openjdk.javax.lang.model.util.ElementScanner7:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariable
org.openjdk.javax.lang.model.util.ElementScanner8 -> org.openjdk.javax.lang.model.util.ElementScanner8:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
org.openjdk.javax.lang.model.util.ElementScanner9 -> org.openjdk.javax.lang.model.util.ElementScanner9:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitModule(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.Object) -> visitModule
org.openjdk.javax.lang.model.util.Elements -> org.openjdk.javax.lang.model.util.Elements:
    org.openjdk.javax.lang.model.element.PackageElement getPackageElement(java.lang.CharSequence) -> getPackageElement
    org.openjdk.javax.lang.model.element.PackageElement getPackageElement(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.CharSequence) -> getPackageElement
    java.util.Set getAllPackageElements(java.lang.CharSequence) -> getAllPackageElements
    org.openjdk.javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence) -> getTypeElement
    org.openjdk.javax.lang.model.element.TypeElement getTypeElement(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.CharSequence) -> getTypeElement
    java.util.Set getAllTypeElements(java.lang.CharSequence) -> getAllTypeElements
    org.openjdk.javax.lang.model.element.ModuleElement getModuleElement(java.lang.CharSequence) -> getModuleElement
    java.util.Set getAllModuleElements() -> getAllModuleElements
    java.util.Map getElementValuesWithDefaults(org.openjdk.javax.lang.model.element.AnnotationMirror) -> getElementValuesWithDefaults
    java.lang.String getDocComment(org.openjdk.javax.lang.model.element.Element) -> getDocComment
    boolean isDeprecated(org.openjdk.javax.lang.model.element.Element) -> isDeprecated
    org.openjdk.javax.lang.model.util.Elements$Origin getOrigin(org.openjdk.javax.lang.model.element.Element) -> getOrigin
    org.openjdk.javax.lang.model.util.Elements$Origin getOrigin(org.openjdk.javax.lang.model.AnnotatedConstruct,org.openjdk.javax.lang.model.element.AnnotationMirror) -> getOrigin
    org.openjdk.javax.lang.model.util.Elements$Origin getOrigin(org.openjdk.javax.lang.model.element.ModuleElement,org.openjdk.javax.lang.model.element.ModuleElement$Directive) -> getOrigin
    boolean isBridge(org.openjdk.javax.lang.model.element.ExecutableElement) -> isBridge
    org.openjdk.javax.lang.model.element.Name getBinaryName(org.openjdk.javax.lang.model.element.TypeElement) -> getBinaryName
    org.openjdk.javax.lang.model.element.PackageElement getPackageOf(org.openjdk.javax.lang.model.element.Element) -> getPackageOf
    org.openjdk.javax.lang.model.element.ModuleElement getModuleOf(org.openjdk.javax.lang.model.element.Element) -> getModuleOf
    java.util.List getAllMembers(org.openjdk.javax.lang.model.element.TypeElement) -> getAllMembers
    java.util.List getAllAnnotationMirrors(org.openjdk.javax.lang.model.element.Element) -> getAllAnnotationMirrors
    boolean hides(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.Element) -> hides
    boolean overrides(org.openjdk.javax.lang.model.element.ExecutableElement,org.openjdk.javax.lang.model.element.ExecutableElement,org.openjdk.javax.lang.model.element.TypeElement) -> overrides
    java.lang.String getConstantExpression(java.lang.Object) -> getConstantExpression
    void printElements(java.io.Writer,org.openjdk.javax.lang.model.element.Element[]) -> printElements
    org.openjdk.javax.lang.model.element.Name getName(java.lang.CharSequence) -> getName
    boolean isFunctionalInterface(org.openjdk.javax.lang.model.element.TypeElement) -> isFunctionalInterface
org.openjdk.javax.lang.model.util.Elements$Origin -> org.openjdk.javax.lang.model.util.Elements$Origin:
    org.openjdk.javax.lang.model.util.Elements$Origin EXPLICIT -> EXPLICIT
    org.openjdk.javax.lang.model.util.Elements$Origin MANDATED -> MANDATED
    org.openjdk.javax.lang.model.util.Elements$Origin SYNTHETIC -> SYNTHETIC
    org.openjdk.javax.lang.model.util.Elements$Origin[] $VALUES -> $VALUES
    org.openjdk.javax.lang.model.util.Elements$Origin[] values() -> values
    org.openjdk.javax.lang.model.util.Elements$Origin valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isDeclared() -> isDeclared
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.util.SimpleAnnotationValueVisitor6 -> org.openjdk.javax.lang.model.util.SimpleAnnotationValueVisitor6:
    java.lang.Object DEFAULT_VALUE -> DEFAULT_VALUE
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object defaultAction(java.lang.Object,java.lang.Object) -> defaultAction
    java.lang.Object visitBoolean(boolean,java.lang.Object) -> visitBoolean
    java.lang.Object visitByte(byte,java.lang.Object) -> visitByte
    java.lang.Object visitChar(char,java.lang.Object) -> visitChar
    java.lang.Object visitDouble(double,java.lang.Object) -> visitDouble
    java.lang.Object visitFloat(float,java.lang.Object) -> visitFloat
    java.lang.Object visitInt(int,java.lang.Object) -> visitInt
    java.lang.Object visitLong(long,java.lang.Object) -> visitLong
    java.lang.Object visitShort(short,java.lang.Object) -> visitShort
    java.lang.Object visitString(java.lang.String,java.lang.Object) -> visitString
    java.lang.Object visitType(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Object) -> visitType
    java.lang.Object visitEnumConstant(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitEnumConstant
    java.lang.Object visitAnnotation(org.openjdk.javax.lang.model.element.AnnotationMirror,java.lang.Object) -> visitAnnotation
    java.lang.Object visitArray(java.util.List,java.lang.Object) -> visitArray
org.openjdk.javax.lang.model.util.SimpleAnnotationValueVisitor7 -> org.openjdk.javax.lang.model.util.SimpleAnnotationValueVisitor7:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
org.openjdk.javax.lang.model.util.SimpleAnnotationValueVisitor8 -> org.openjdk.javax.lang.model.util.SimpleAnnotationValueVisitor8:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
org.openjdk.javax.lang.model.util.SimpleAnnotationValueVisitor9 -> org.openjdk.javax.lang.model.util.SimpleAnnotationValueVisitor9:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
org.openjdk.javax.lang.model.util.SimpleElementVisitor6 -> org.openjdk.javax.lang.model.util.SimpleElementVisitor6:
    java.lang.Object DEFAULT_VALUE -> DEFAULT_VALUE
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object defaultAction(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> defaultAction
    java.lang.Object visitPackage(org.openjdk.javax.lang.model.element.PackageElement,java.lang.Object) -> visitPackage
    java.lang.Object visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitType
    java.lang.Object visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariable
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutable
    java.lang.Object visitTypeParameter(org.openjdk.javax.lang.model.element.TypeParameterElement,java.lang.Object) -> visitTypeParameter
org.openjdk.javax.lang.model.util.SimpleElementVisitor7 -> org.openjdk.javax.lang.model.util.SimpleElementVisitor7:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariable
org.openjdk.javax.lang.model.util.SimpleElementVisitor8 -> org.openjdk.javax.lang.model.util.SimpleElementVisitor8:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
org.openjdk.javax.lang.model.util.SimpleElementVisitor9 -> org.openjdk.javax.lang.model.util.SimpleElementVisitor9:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitModule(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.Object) -> visitModule
org.openjdk.javax.lang.model.util.SimpleTypeVisitor6 -> org.openjdk.javax.lang.model.util.SimpleTypeVisitor6:
    java.lang.Object DEFAULT_VALUE -> DEFAULT_VALUE
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object defaultAction(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Object) -> defaultAction
    java.lang.Object visitPrimitive(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitive
    java.lang.Object visitNull(org.openjdk.javax.lang.model.type.NullType,java.lang.Object) -> visitNull
    java.lang.Object visitArray(org.openjdk.javax.lang.model.type.ArrayType,java.lang.Object) -> visitArray
    java.lang.Object visitDeclared(org.openjdk.javax.lang.model.type.DeclaredType,java.lang.Object) -> visitDeclared
    java.lang.Object visitError(org.openjdk.javax.lang.model.type.ErrorType,java.lang.Object) -> visitError
    java.lang.Object visitTypeVariable(org.openjdk.javax.lang.model.type.TypeVariable,java.lang.Object) -> visitTypeVariable
    java.lang.Object visitWildcard(org.openjdk.javax.lang.model.type.WildcardType,java.lang.Object) -> visitWildcard
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.type.ExecutableType,java.lang.Object) -> visitExecutable
    java.lang.Object visitNoType(org.openjdk.javax.lang.model.type.NoType,java.lang.Object) -> visitNoType
org.openjdk.javax.lang.model.util.SimpleTypeVisitor7 -> org.openjdk.javax.lang.model.util.SimpleTypeVisitor7:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitUnion(org.openjdk.javax.lang.model.type.UnionType,java.lang.Object) -> visitUnion
org.openjdk.javax.lang.model.util.SimpleTypeVisitor8 -> org.openjdk.javax.lang.model.util.SimpleTypeVisitor8:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitIntersection(org.openjdk.javax.lang.model.type.IntersectionType,java.lang.Object) -> visitIntersection
org.openjdk.javax.lang.model.util.SimpleTypeVisitor9 -> org.openjdk.javax.lang.model.util.SimpleTypeVisitor9:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
org.openjdk.javax.lang.model.util.TypeKindVisitor6 -> org.openjdk.javax.lang.model.util.TypeKindVisitor6:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitPrimitive(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitive
    java.lang.Object visitPrimitiveAsBoolean(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitiveAsBoolean
    java.lang.Object visitPrimitiveAsByte(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitiveAsByte
    java.lang.Object visitPrimitiveAsShort(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitiveAsShort
    java.lang.Object visitPrimitiveAsInt(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitiveAsInt
    java.lang.Object visitPrimitiveAsLong(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitiveAsLong
    java.lang.Object visitPrimitiveAsChar(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitiveAsChar
    java.lang.Object visitPrimitiveAsFloat(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitiveAsFloat
    java.lang.Object visitPrimitiveAsDouble(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitiveAsDouble
    java.lang.Object visitNoType(org.openjdk.javax.lang.model.type.NoType,java.lang.Object) -> visitNoType
    java.lang.Object visitNoTypeAsVoid(org.openjdk.javax.lang.model.type.NoType,java.lang.Object) -> visitNoTypeAsVoid
    java.lang.Object visitNoTypeAsPackage(org.openjdk.javax.lang.model.type.NoType,java.lang.Object) -> visitNoTypeAsPackage
    java.lang.Object visitNoTypeAsNone(org.openjdk.javax.lang.model.type.NoType,java.lang.Object) -> visitNoTypeAsNone
org.openjdk.javax.lang.model.util.TypeKindVisitor6$1 -> org.openjdk.javax.lang.model.util.TypeKindVisitor6$1:
    int[] $SwitchMap$javax$lang$model$type$TypeKind -> $SwitchMap$javax$lang$model$type$TypeKind
    void <clinit>() -> <clinit>
org.openjdk.javax.lang.model.util.TypeKindVisitor7 -> org.openjdk.javax.lang.model.util.TypeKindVisitor7:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitUnion(org.openjdk.javax.lang.model.type.UnionType,java.lang.Object) -> visitUnion
org.openjdk.javax.lang.model.util.TypeKindVisitor8 -> org.openjdk.javax.lang.model.util.TypeKindVisitor8:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitIntersection(org.openjdk.javax.lang.model.type.IntersectionType,java.lang.Object) -> visitIntersection
org.openjdk.javax.lang.model.util.TypeKindVisitor9 -> org.openjdk.javax.lang.model.util.TypeKindVisitor9:
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
org.openjdk.javax.lang.model.util.Types -> org.openjdk.javax.lang.model.util.Types:
    org.openjdk.javax.lang.model.element.Element asElement(org.openjdk.javax.lang.model.type.TypeMirror) -> asElement
    boolean isSameType(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> isSameType
    boolean isSubtype(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> isSubtype
    boolean isAssignable(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> isAssignable
    boolean contains(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> contains
    boolean isSubsignature(org.openjdk.javax.lang.model.type.ExecutableType,org.openjdk.javax.lang.model.type.ExecutableType) -> isSubsignature
    java.util.List directSupertypes(org.openjdk.javax.lang.model.type.TypeMirror) -> directSupertypes
    org.openjdk.javax.lang.model.type.TypeMirror erasure(org.openjdk.javax.lang.model.type.TypeMirror) -> erasure
    org.openjdk.javax.lang.model.element.TypeElement boxedClass(org.openjdk.javax.lang.model.type.PrimitiveType) -> boxedClass
    org.openjdk.javax.lang.model.type.PrimitiveType unboxedType(org.openjdk.javax.lang.model.type.TypeMirror) -> unboxedType
    org.openjdk.javax.lang.model.type.TypeMirror capture(org.openjdk.javax.lang.model.type.TypeMirror) -> capture
    org.openjdk.javax.lang.model.type.PrimitiveType getPrimitiveType(org.openjdk.javax.lang.model.type.TypeKind) -> getPrimitiveType
    org.openjdk.javax.lang.model.type.NullType getNullType() -> getNullType
    org.openjdk.javax.lang.model.type.NoType getNoType(org.openjdk.javax.lang.model.type.TypeKind) -> getNoType
    org.openjdk.javax.lang.model.type.ArrayType getArrayType(org.openjdk.javax.lang.model.type.TypeMirror) -> getArrayType
    org.openjdk.javax.lang.model.type.WildcardType getWildcardType(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> getWildcardType
    org.openjdk.javax.lang.model.type.DeclaredType getDeclaredType(org.openjdk.javax.lang.model.element.TypeElement,org.openjdk.javax.lang.model.type.TypeMirror[]) -> getDeclaredType
    org.openjdk.javax.lang.model.type.DeclaredType getDeclaredType(org.openjdk.javax.lang.model.type.DeclaredType,org.openjdk.javax.lang.model.element.TypeElement,org.openjdk.javax.lang.model.type.TypeMirror[]) -> getDeclaredType
    org.openjdk.javax.lang.model.type.TypeMirror asMemberOf(org.openjdk.javax.lang.model.type.DeclaredType,org.openjdk.javax.lang.model.element.Element) -> asMemberOf
org.openjdk.javax.tools.Diagnostic -> org.openjdk.javax.tools.Diagnostic:
    long NOPOS -> NOPOS
    org.openjdk.javax.tools.Diagnostic$Kind getKind() -> getKind
    java.lang.Object getSource() -> getSource
    long getPosition() -> getPosition
    long getStartPosition() -> getStartPosition
    long getEndPosition() -> getEndPosition
    long getLineNumber() -> getLineNumber
    long getColumnNumber() -> getColumnNumber
    java.lang.String getCode() -> getCode
    java.lang.String getMessage(java.util.Locale) -> getMessage
org.openjdk.javax.tools.Diagnostic$Kind -> org.openjdk.javax.tools.Diagnostic$Kind:
    org.openjdk.javax.tools.Diagnostic$Kind ERROR -> ERROR
    org.openjdk.javax.tools.Diagnostic$Kind WARNING -> WARNING
    org.openjdk.javax.tools.Diagnostic$Kind MANDATORY_WARNING -> MANDATORY_WARNING
    org.openjdk.javax.tools.Diagnostic$Kind NOTE -> NOTE
    org.openjdk.javax.tools.Diagnostic$Kind OTHER -> OTHER
    org.openjdk.javax.tools.Diagnostic$Kind[] $VALUES -> $VALUES
    org.openjdk.javax.tools.Diagnostic$Kind[] values() -> values
    org.openjdk.javax.tools.Diagnostic$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.javax.tools.DiagnosticCollector -> org.openjdk.javax.tools.DiagnosticCollector:
    java.util.List diagnostics -> diagnostics
    void <init>() -> <init>
    void report(org.openjdk.javax.tools.Diagnostic) -> report
    java.util.List getDiagnostics() -> getDiagnostics
org.openjdk.javax.tools.DiagnosticListener -> org.openjdk.javax.tools.DiagnosticListener:
    void report(org.openjdk.javax.tools.Diagnostic) -> report
org.openjdk.javax.tools.DocumentationTool -> org.openjdk.javax.tools.DocumentationTool:
    org.openjdk.javax.tools.DocumentationTool$DocumentationTask getTask(java.io.Writer,org.openjdk.javax.tools.JavaFileManager,org.openjdk.javax.tools.DiagnosticListener,java.lang.Class,java.lang.Iterable,java.lang.Iterable) -> getTask
    org.openjdk.javax.tools.StandardJavaFileManager getStandardFileManager(org.openjdk.javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset) -> getStandardFileManager
org.openjdk.javax.tools.DocumentationTool$1 -> org.openjdk.javax.tools.DocumentationTool$1:
    int[] $SwitchMap$javax$tools$DocumentationTool$Location -> $SwitchMap$javax$tools$DocumentationTool$Location
    void <clinit>() -> <clinit>
org.openjdk.javax.tools.DocumentationTool$DocumentationTask -> org.openjdk.javax.tools.DocumentationTool$DocumentationTask:
    void addModules(java.lang.Iterable) -> addModules
    void setLocale(java.util.Locale) -> setLocale
    java.lang.Boolean call() -> call
    java.lang.Object call() -> call
org.openjdk.javax.tools.DocumentationTool$Location -> org.openjdk.javax.tools.DocumentationTool$Location:
    org.openjdk.javax.tools.DocumentationTool$Location DOCUMENTATION_OUTPUT -> DOCUMENTATION_OUTPUT
    org.openjdk.javax.tools.DocumentationTool$Location DOCLET_PATH -> DOCLET_PATH
    org.openjdk.javax.tools.DocumentationTool$Location TAGLET_PATH -> TAGLET_PATH
    org.openjdk.javax.tools.DocumentationTool$Location[] $VALUES -> $VALUES
    org.openjdk.javax.tools.DocumentationTool$Location[] values() -> values
    org.openjdk.javax.tools.DocumentationTool$Location valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getName() -> getName
    boolean isOutputLocation() -> isOutputLocation
    void <clinit>() -> <clinit>
org.openjdk.javax.tools.FileManagerUtils -> org.openjdk.javax.tools.FileManagerUtils:
    void <init>() -> <init>
    java.lang.Iterable asPaths(java.lang.Iterable) -> asPaths
    java.lang.Iterable asFiles(java.lang.Iterable) -> asFiles
    java.util.Iterator lambda$asFiles$1(java.lang.Iterable) -> lambda$asFiles$1
    java.util.Iterator lambda$asPaths$0(java.lang.Iterable) -> lambda$asPaths$0
org.openjdk.javax.tools.FileManagerUtils$1 -> org.openjdk.javax.tools.FileManagerUtils$1:
    java.util.Iterator iter -> iter
    java.lang.Iterable val$files -> val$files
    void <init>(java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.nio.file.Path next() -> next
    java.lang.Object next() -> next
org.openjdk.javax.tools.FileManagerUtils$2 -> org.openjdk.javax.tools.FileManagerUtils$2:
    java.util.Iterator iter -> iter
    java.lang.Iterable val$paths -> val$paths
    void <init>(java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.io.File next() -> next
    java.lang.Object next() -> next
org.openjdk.javax.tools.FileObject -> org.openjdk.javax.tools.FileObject:
    java.net.URI toUri() -> toUri
    java.lang.String getName() -> getName
    java.io.InputStream openInputStream() -> openInputStream
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.io.Reader openReader(boolean) -> openReader
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
    java.io.Writer openWriter() -> openWriter
    long getLastModified() -> getLastModified
    boolean delete() -> delete
org.openjdk.javax.tools.ForwardingFileObject -> org.openjdk.javax.tools.ForwardingFileObject:
    org.openjdk.javax.tools.FileObject fileObject -> fileObject
    void <init>(org.openjdk.javax.tools.FileObject) -> <init>
    java.net.URI toUri() -> toUri
    java.lang.String getName() -> getName
    java.io.InputStream openInputStream() -> openInputStream
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.io.Reader openReader(boolean) -> openReader
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
    java.io.Writer openWriter() -> openWriter
    long getLastModified() -> getLastModified
    boolean delete() -> delete
org.openjdk.javax.tools.ForwardingJavaFileManager -> org.openjdk.javax.tools.ForwardingJavaFileManager:
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    void <init>(org.openjdk.javax.tools.JavaFileManager) -> <init>
    java.lang.ClassLoader getClassLoader(org.openjdk.javax.tools.JavaFileManager$Location) -> getClassLoader
    java.lang.Iterable list(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.util.Set,boolean) -> list
    java.lang.String inferBinaryName(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> inferBinaryName
    boolean isSameFile(org.openjdk.javax.tools.FileObject,org.openjdk.javax.tools.FileObject) -> isSameFile
    boolean handleOption(java.lang.String,java.util.Iterator) -> handleOption
    boolean hasLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> hasLocation
    int isSupportedOption(java.lang.String) -> isSupportedOption
    org.openjdk.javax.tools.JavaFileObject getJavaFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> getJavaFileForInput
    org.openjdk.javax.tools.JavaFileObject getJavaFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind,org.openjdk.javax.tools.FileObject) -> getJavaFileForOutput
    org.openjdk.javax.tools.FileObject getFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String) -> getFileForInput
    org.openjdk.javax.tools.FileObject getFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String,org.openjdk.javax.tools.FileObject) -> getFileForOutput
    void flush() -> flush
    void close() -> close
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String) -> getLocationForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> getLocationForModule
    java.util.ServiceLoader getServiceLoader(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.Class) -> getServiceLoader
    java.lang.String inferModuleName(org.openjdk.javax.tools.JavaFileManager$Location) -> inferModuleName
    java.lang.Iterable listLocationsForModules(org.openjdk.javax.tools.JavaFileManager$Location) -> listLocationsForModules
    boolean contains(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.FileObject) -> contains
org.openjdk.javax.tools.ForwardingJavaFileObject -> org.openjdk.javax.tools.ForwardingJavaFileObject:
    void <init>(org.openjdk.javax.tools.JavaFileObject) -> <init>
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
org.openjdk.javax.tools.JavaCompiler -> org.openjdk.javax.tools.JavaCompiler:
    org.openjdk.javax.tools.JavaCompiler$CompilationTask getTask(java.io.Writer,org.openjdk.javax.tools.JavaFileManager,org.openjdk.javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> getTask
    org.openjdk.javax.tools.StandardJavaFileManager getStandardFileManager(org.openjdk.javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset) -> getStandardFileManager
org.openjdk.javax.tools.JavaCompiler$CompilationTask -> org.openjdk.javax.tools.JavaCompiler$CompilationTask:
    void addModules(java.lang.Iterable) -> addModules
    void setProcessors(java.lang.Iterable) -> setProcessors
    void setLocale(java.util.Locale) -> setLocale
    java.lang.Boolean call() -> call
    java.lang.Object call() -> call
org.openjdk.javax.tools.JavaFileManager -> org.openjdk.javax.tools.JavaFileManager:
    java.lang.ClassLoader getClassLoader(org.openjdk.javax.tools.JavaFileManager$Location) -> getClassLoader
    java.lang.Iterable list(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.util.Set,boolean) -> list
    java.lang.String inferBinaryName(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> inferBinaryName
    boolean isSameFile(org.openjdk.javax.tools.FileObject,org.openjdk.javax.tools.FileObject) -> isSameFile
    boolean handleOption(java.lang.String,java.util.Iterator) -> handleOption
    boolean hasLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> hasLocation
    org.openjdk.javax.tools.JavaFileObject getJavaFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> getJavaFileForInput
    org.openjdk.javax.tools.JavaFileObject getJavaFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind,org.openjdk.javax.tools.FileObject) -> getJavaFileForOutput
    org.openjdk.javax.tools.FileObject getFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String) -> getFileForInput
    org.openjdk.javax.tools.FileObject getFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String,org.openjdk.javax.tools.FileObject) -> getFileForOutput
    void flush() -> flush
    void close() -> close
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String) -> getLocationForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> getLocationForModule
    java.util.ServiceLoader getServiceLoader(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.Class) -> getServiceLoader
    java.lang.String inferModuleName(org.openjdk.javax.tools.JavaFileManager$Location) -> inferModuleName
    java.lang.Iterable listLocationsForModules(org.openjdk.javax.tools.JavaFileManager$Location) -> listLocationsForModules
    boolean contains(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.FileObject) -> contains
org.openjdk.javax.tools.JavaFileManager$Location -> org.openjdk.javax.tools.JavaFileManager$Location:
    java.lang.String getName() -> getName
    boolean isOutputLocation() -> isOutputLocation
    boolean isModuleOrientedLocation() -> isModuleOrientedLocation
org.openjdk.javax.tools.JavaFileObject -> org.openjdk.javax.tools.JavaFileObject:
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
org.openjdk.javax.tools.JavaFileObject$Kind -> org.openjdk.javax.tools.JavaFileObject$Kind:
    org.openjdk.javax.tools.JavaFileObject$Kind SOURCE -> SOURCE
    org.openjdk.javax.tools.JavaFileObject$Kind CLASS -> CLASS
    org.openjdk.javax.tools.JavaFileObject$Kind HTML -> HTML
    org.openjdk.javax.tools.JavaFileObject$Kind OTHER -> OTHER
    java.lang.String extension -> extension
    org.openjdk.javax.tools.JavaFileObject$Kind[] $VALUES -> $VALUES
    org.openjdk.javax.tools.JavaFileObject$Kind[] values() -> values
    org.openjdk.javax.tools.JavaFileObject$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.javax.tools.OptionChecker -> org.openjdk.javax.tools.OptionChecker:
    int isSupportedOption(java.lang.String) -> isSupportedOption
org.openjdk.javax.tools.SimpleJavaFileObject -> org.openjdk.javax.tools.SimpleJavaFileObject:
    java.net.URI uri -> uri
    org.openjdk.javax.tools.JavaFileObject$Kind kind -> kind
    void <init>(java.net.URI,org.openjdk.javax.tools.JavaFileObject$Kind) -> <init>
    java.net.URI toUri() -> toUri
    java.lang.String getName() -> getName
    java.io.InputStream openInputStream() -> openInputStream
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.io.Reader openReader(boolean) -> openReader
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
    java.io.Writer openWriter() -> openWriter
    long getLastModified() -> getLastModified
    boolean delete() -> delete
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
    java.lang.String toString() -> toString
org.openjdk.javax.tools.StandardJavaFileManager -> org.openjdk.javax.tools.StandardJavaFileManager:
    boolean isSameFile(org.openjdk.javax.tools.FileObject,org.openjdk.javax.tools.FileObject) -> isSameFile
    java.lang.Iterable getJavaFileObjectsFromFiles(java.lang.Iterable) -> getJavaFileObjectsFromFiles
    java.lang.Iterable getJavaFileObjectsFromPaths(java.lang.Iterable) -> getJavaFileObjectsFromPaths
    java.lang.Iterable getJavaFileObjects(java.io.File[]) -> getJavaFileObjects
    java.lang.Iterable getJavaFileObjects(java.nio.file.Path[]) -> getJavaFileObjects
    java.lang.Iterable getJavaFileObjectsFromStrings(java.lang.Iterable) -> getJavaFileObjectsFromStrings
    java.lang.Iterable getJavaFileObjects(java.lang.String[]) -> getJavaFileObjects
    void setLocation(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.Iterable) -> setLocation
    void setLocationFromPaths(org.openjdk.javax.tools.JavaFileManager$Location,java.util.Collection) -> setLocationFromPaths
    void setLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.util.Collection) -> setLocationForModule
    java.lang.Iterable getLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> getLocation
    java.lang.Iterable getLocationAsPaths(org.openjdk.javax.tools.JavaFileManager$Location) -> getLocationAsPaths
    java.nio.file.Path asPath(org.openjdk.javax.tools.FileObject) -> asPath
    void setPathFactory(org.openjdk.javax.tools.StandardJavaFileManager$PathFactory) -> setPathFactory
org.openjdk.javax.tools.StandardJavaFileManager$PathFactory -> org.openjdk.javax.tools.StandardJavaFileManager$PathFactory:
    java.nio.file.Path getPath(java.lang.String,java.lang.String[]) -> getPath
org.openjdk.javax.tools.StandardLocation -> org.openjdk.javax.tools.StandardLocation:
    org.openjdk.javax.tools.StandardLocation CLASS_OUTPUT -> CLASS_OUTPUT
    org.openjdk.javax.tools.StandardLocation SOURCE_OUTPUT -> SOURCE_OUTPUT
    org.openjdk.javax.tools.StandardLocation CLASS_PATH -> CLASS_PATH
    org.openjdk.javax.tools.StandardLocation SOURCE_PATH -> SOURCE_PATH
    org.openjdk.javax.tools.StandardLocation ANNOTATION_PROCESSOR_PATH -> ANNOTATION_PROCESSOR_PATH
    org.openjdk.javax.tools.StandardLocation ANNOTATION_PROCESSOR_MODULE_PATH -> ANNOTATION_PROCESSOR_MODULE_PATH
    org.openjdk.javax.tools.StandardLocation PLATFORM_CLASS_PATH -> PLATFORM_CLASS_PATH
    org.openjdk.javax.tools.StandardLocation NATIVE_HEADER_OUTPUT -> NATIVE_HEADER_OUTPUT
    org.openjdk.javax.tools.StandardLocation MODULE_SOURCE_PATH -> MODULE_SOURCE_PATH
    org.openjdk.javax.tools.StandardLocation UPGRADE_MODULE_PATH -> UPGRADE_MODULE_PATH
    org.openjdk.javax.tools.StandardLocation SYSTEM_MODULES -> SYSTEM_MODULES
    org.openjdk.javax.tools.StandardLocation MODULE_PATH -> MODULE_PATH
    org.openjdk.javax.tools.StandardLocation PATCH_MODULE_PATH -> PATCH_MODULE_PATH
    java.util.concurrent.ConcurrentMap locations -> locations
    org.openjdk.javax.tools.StandardLocation[] $VALUES -> $VALUES
    org.openjdk.javax.tools.StandardLocation[] values() -> values
    org.openjdk.javax.tools.StandardLocation valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.javax.tools.JavaFileManager$Location locationFor(java.lang.String) -> locationFor
    java.lang.String getName() -> getName
    boolean isOutputLocation() -> isOutputLocation
    boolean isModuleOrientedLocation() -> isModuleOrientedLocation
    void <clinit>() -> <clinit>
org.openjdk.javax.tools.StandardLocation$1 -> org.openjdk.javax.tools.StandardLocation$1:
    java.lang.String val$name -> val$name
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    boolean isOutputLocation() -> isOutputLocation
org.openjdk.javax.tools.StandardLocation$2 -> org.openjdk.javax.tools.StandardLocation$2:
    int[] $SwitchMap$javax$tools$StandardLocation -> $SwitchMap$javax$tools$StandardLocation
    void <clinit>() -> <clinit>
org.openjdk.javax.tools.Tool -> org.openjdk.javax.tools.Tool:
    java.lang.String name() -> name
    int run(java.io.InputStream,java.io.OutputStream,java.io.OutputStream,java.lang.String[]) -> run
    java.util.Set getSourceVersions() -> getSourceVersions
org.openjdk.javax.tools.ToolProvider -> org.openjdk.javax.tools.ToolProvider:
    java.lang.String systemJavaCompilerModule -> systemJavaCompilerModule
    java.lang.String systemJavaCompilerName -> systemJavaCompilerName
    java.lang.String systemDocumentationToolModule -> systemDocumentationToolModule
    java.lang.String systemDocumentationToolName -> systemDocumentationToolName
    boolean useLegacy -> useLegacy
    void <init>() -> <init>
    org.openjdk.javax.tools.JavaCompiler getSystemJavaCompiler() -> getSystemJavaCompiler
    org.openjdk.javax.tools.DocumentationTool getSystemDocumentationTool() -> getSystemDocumentationTool
    java.lang.ClassLoader getSystemToolClassLoader() -> getSystemToolClassLoader
    java.lang.Object getSystemTool(java.lang.Class,java.lang.String,java.lang.String) -> getSystemTool
    boolean matches(java.lang.Object,java.lang.String) -> matches
    java.lang.Boolean lambda$matches$0(java.lang.Object,java.lang.String) -> lambda$matches$0
    void <clinit>() -> <clinit>
org.openjdk.source.doctree.AttributeTree -> org.openjdk.source.doctree.AttributeTree:
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    org.openjdk.source.doctree.AttributeTree$ValueKind getValueKind() -> getValueKind
    java.util.List getValue() -> getValue
org.openjdk.source.doctree.AttributeTree$ValueKind -> org.openjdk.source.doctree.AttributeTree$ValueKind:
    org.openjdk.source.doctree.AttributeTree$ValueKind EMPTY -> EMPTY
    org.openjdk.source.doctree.AttributeTree$ValueKind UNQUOTED -> UNQUOTED
    org.openjdk.source.doctree.AttributeTree$ValueKind SINGLE -> SINGLE
    org.openjdk.source.doctree.AttributeTree$ValueKind DOUBLE -> DOUBLE
    org.openjdk.source.doctree.AttributeTree$ValueKind[] $VALUES -> $VALUES
    org.openjdk.source.doctree.AttributeTree$ValueKind[] values() -> values
    org.openjdk.source.doctree.AttributeTree$ValueKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.source.doctree.AuthorTree -> org.openjdk.source.doctree.AuthorTree:
    java.util.List getName() -> getName
org.openjdk.source.doctree.BlockTagTree -> org.openjdk.source.doctree.BlockTagTree:
    java.lang.String getTagName() -> getTagName
org.openjdk.source.doctree.CommentTree -> org.openjdk.source.doctree.CommentTree:
    java.lang.String getBody() -> getBody
org.openjdk.source.doctree.DeprecatedTree -> org.openjdk.source.doctree.DeprecatedTree:
    java.util.List getBody() -> getBody
org.openjdk.source.doctree.DocCommentTree -> org.openjdk.source.doctree.DocCommentTree:
    java.util.List getFirstSentence() -> getFirstSentence
    java.util.List getFullBody() -> getFullBody
    java.util.List getBody() -> getBody
    java.util.List getBlockTags() -> getBlockTags
org.openjdk.source.doctree.DocRootTree -> org.openjdk.source.doctree.DocRootTree:
org.openjdk.source.doctree.DocTree -> org.openjdk.source.doctree.DocTree:
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
org.openjdk.source.doctree.DocTree$Kind -> org.openjdk.source.doctree.DocTree$Kind:
    org.openjdk.source.doctree.DocTree$Kind ATTRIBUTE -> ATTRIBUTE
    org.openjdk.source.doctree.DocTree$Kind AUTHOR -> AUTHOR
    org.openjdk.source.doctree.DocTree$Kind CODE -> CODE
    org.openjdk.source.doctree.DocTree$Kind COMMENT -> COMMENT
    org.openjdk.source.doctree.DocTree$Kind DEPRECATED -> DEPRECATED
    org.openjdk.source.doctree.DocTree$Kind DOC_COMMENT -> DOC_COMMENT
    org.openjdk.source.doctree.DocTree$Kind DOC_ROOT -> DOC_ROOT
    org.openjdk.source.doctree.DocTree$Kind END_ELEMENT -> END_ELEMENT
    org.openjdk.source.doctree.DocTree$Kind ENTITY -> ENTITY
    org.openjdk.source.doctree.DocTree$Kind ERRONEOUS -> ERRONEOUS
    org.openjdk.source.doctree.DocTree$Kind EXCEPTION -> EXCEPTION
    org.openjdk.source.doctree.DocTree$Kind HIDDEN -> HIDDEN
    org.openjdk.source.doctree.DocTree$Kind IDENTIFIER -> IDENTIFIER
    org.openjdk.source.doctree.DocTree$Kind INDEX -> INDEX
    org.openjdk.source.doctree.DocTree$Kind INHERIT_DOC -> INHERIT_DOC
    org.openjdk.source.doctree.DocTree$Kind LINK -> LINK
    org.openjdk.source.doctree.DocTree$Kind LINK_PLAIN -> LINK_PLAIN
    org.openjdk.source.doctree.DocTree$Kind LITERAL -> LITERAL
    org.openjdk.source.doctree.DocTree$Kind PARAM -> PARAM
    org.openjdk.source.doctree.DocTree$Kind PROVIDES -> PROVIDES
    org.openjdk.source.doctree.DocTree$Kind REFERENCE -> REFERENCE
    org.openjdk.source.doctree.DocTree$Kind RETURN -> RETURN
    org.openjdk.source.doctree.DocTree$Kind SEE -> SEE
    org.openjdk.source.doctree.DocTree$Kind SERIAL -> SERIAL
    org.openjdk.source.doctree.DocTree$Kind SERIAL_DATA -> SERIAL_DATA
    org.openjdk.source.doctree.DocTree$Kind SERIAL_FIELD -> SERIAL_FIELD
    org.openjdk.source.doctree.DocTree$Kind SINCE -> SINCE
    org.openjdk.source.doctree.DocTree$Kind START_ELEMENT -> START_ELEMENT
    org.openjdk.source.doctree.DocTree$Kind TEXT -> TEXT
    org.openjdk.source.doctree.DocTree$Kind THROWS -> THROWS
    org.openjdk.source.doctree.DocTree$Kind UNKNOWN_BLOCK_TAG -> UNKNOWN_BLOCK_TAG
    org.openjdk.source.doctree.DocTree$Kind UNKNOWN_INLINE_TAG -> UNKNOWN_INLINE_TAG
    org.openjdk.source.doctree.DocTree$Kind USES -> USES
    org.openjdk.source.doctree.DocTree$Kind VALUE -> VALUE
    org.openjdk.source.doctree.DocTree$Kind VERSION -> VERSION
    org.openjdk.source.doctree.DocTree$Kind OTHER -> OTHER
    java.lang.String tagName -> tagName
    org.openjdk.source.doctree.DocTree$Kind[] $VALUES -> $VALUES
    org.openjdk.source.doctree.DocTree$Kind[] values() -> values
    org.openjdk.source.doctree.DocTree$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.source.doctree.DocTreeVisitor -> org.openjdk.source.doctree.DocTreeVisitor:
    java.lang.Object visitAttribute(org.openjdk.source.doctree.AttributeTree,java.lang.Object) -> visitAttribute
    java.lang.Object visitAuthor(org.openjdk.source.doctree.AuthorTree,java.lang.Object) -> visitAuthor
    java.lang.Object visitComment(org.openjdk.source.doctree.CommentTree,java.lang.Object) -> visitComment
    java.lang.Object visitDeprecated(org.openjdk.source.doctree.DeprecatedTree,java.lang.Object) -> visitDeprecated
    java.lang.Object visitDocComment(org.openjdk.source.doctree.DocCommentTree,java.lang.Object) -> visitDocComment
    java.lang.Object visitDocRoot(org.openjdk.source.doctree.DocRootTree,java.lang.Object) -> visitDocRoot
    java.lang.Object visitEndElement(org.openjdk.source.doctree.EndElementTree,java.lang.Object) -> visitEndElement
    java.lang.Object visitEntity(org.openjdk.source.doctree.EntityTree,java.lang.Object) -> visitEntity
    java.lang.Object visitErroneous(org.openjdk.source.doctree.ErroneousTree,java.lang.Object) -> visitErroneous
    java.lang.Object visitHidden(org.openjdk.source.doctree.HiddenTree,java.lang.Object) -> visitHidden
    java.lang.Object visitIdentifier(org.openjdk.source.doctree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitIndex(org.openjdk.source.doctree.IndexTree,java.lang.Object) -> visitIndex
    java.lang.Object visitInheritDoc(org.openjdk.source.doctree.InheritDocTree,java.lang.Object) -> visitInheritDoc
    java.lang.Object visitLink(org.openjdk.source.doctree.LinkTree,java.lang.Object) -> visitLink
    java.lang.Object visitLiteral(org.openjdk.source.doctree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitParam(org.openjdk.source.doctree.ParamTree,java.lang.Object) -> visitParam
    java.lang.Object visitProvides(org.openjdk.source.doctree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitReference(org.openjdk.source.doctree.ReferenceTree,java.lang.Object) -> visitReference
    java.lang.Object visitReturn(org.openjdk.source.doctree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitSee(org.openjdk.source.doctree.SeeTree,java.lang.Object) -> visitSee
    java.lang.Object visitSerial(org.openjdk.source.doctree.SerialTree,java.lang.Object) -> visitSerial
    java.lang.Object visitSerialData(org.openjdk.source.doctree.SerialDataTree,java.lang.Object) -> visitSerialData
    java.lang.Object visitSerialField(org.openjdk.source.doctree.SerialFieldTree,java.lang.Object) -> visitSerialField
    java.lang.Object visitSince(org.openjdk.source.doctree.SinceTree,java.lang.Object) -> visitSince
    java.lang.Object visitStartElement(org.openjdk.source.doctree.StartElementTree,java.lang.Object) -> visitStartElement
    java.lang.Object visitText(org.openjdk.source.doctree.TextTree,java.lang.Object) -> visitText
    java.lang.Object visitThrows(org.openjdk.source.doctree.ThrowsTree,java.lang.Object) -> visitThrows
    java.lang.Object visitUnknownBlockTag(org.openjdk.source.doctree.UnknownBlockTagTree,java.lang.Object) -> visitUnknownBlockTag
    java.lang.Object visitUnknownInlineTag(org.openjdk.source.doctree.UnknownInlineTagTree,java.lang.Object) -> visitUnknownInlineTag
    java.lang.Object visitUses(org.openjdk.source.doctree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitValue(org.openjdk.source.doctree.ValueTree,java.lang.Object) -> visitValue
    java.lang.Object visitVersion(org.openjdk.source.doctree.VersionTree,java.lang.Object) -> visitVersion
    java.lang.Object visitOther(org.openjdk.source.doctree.DocTree,java.lang.Object) -> visitOther
org.openjdk.source.doctree.EndElementTree -> org.openjdk.source.doctree.EndElementTree:
    org.openjdk.javax.lang.model.element.Name getName() -> getName
org.openjdk.source.doctree.EntityTree -> org.openjdk.source.doctree.EntityTree:
    org.openjdk.javax.lang.model.element.Name getName() -> getName
org.openjdk.source.doctree.ErroneousTree -> org.openjdk.source.doctree.ErroneousTree:
    org.openjdk.javax.tools.Diagnostic getDiagnostic() -> getDiagnostic
org.openjdk.source.doctree.HiddenTree -> org.openjdk.source.doctree.HiddenTree:
    java.util.List getBody() -> getBody
org.openjdk.source.doctree.IdentifierTree -> org.openjdk.source.doctree.IdentifierTree:
    org.openjdk.javax.lang.model.element.Name getName() -> getName
org.openjdk.source.doctree.IndexTree -> org.openjdk.source.doctree.IndexTree:
    org.openjdk.source.doctree.DocTree getSearchTerm() -> getSearchTerm
    java.util.List getDescription() -> getDescription
org.openjdk.source.doctree.InheritDocTree -> org.openjdk.source.doctree.InheritDocTree:
org.openjdk.source.doctree.InlineTagTree -> org.openjdk.source.doctree.InlineTagTree:
    java.lang.String getTagName() -> getTagName
org.openjdk.source.doctree.LinkTree -> org.openjdk.source.doctree.LinkTree:
    org.openjdk.source.doctree.ReferenceTree getReference() -> getReference
    java.util.List getLabel() -> getLabel
org.openjdk.source.doctree.LiteralTree -> org.openjdk.source.doctree.LiteralTree:
    org.openjdk.source.doctree.TextTree getBody() -> getBody
org.openjdk.source.doctree.ParamTree -> org.openjdk.source.doctree.ParamTree:
    boolean isTypeParameter() -> isTypeParameter
    org.openjdk.source.doctree.IdentifierTree getName() -> getName
    java.util.List getDescription() -> getDescription
org.openjdk.source.doctree.ProvidesTree -> org.openjdk.source.doctree.ProvidesTree:
    org.openjdk.source.doctree.ReferenceTree getServiceType() -> getServiceType
    java.util.List getDescription() -> getDescription
org.openjdk.source.doctree.ReferenceTree -> org.openjdk.source.doctree.ReferenceTree:
    java.lang.String getSignature() -> getSignature
org.openjdk.source.doctree.ReturnTree -> org.openjdk.source.doctree.ReturnTree:
    java.util.List getDescription() -> getDescription
org.openjdk.source.doctree.SeeTree -> org.openjdk.source.doctree.SeeTree:
    java.util.List getReference() -> getReference
org.openjdk.source.doctree.SerialDataTree -> org.openjdk.source.doctree.SerialDataTree:
    java.util.List getDescription() -> getDescription
org.openjdk.source.doctree.SerialFieldTree -> org.openjdk.source.doctree.SerialFieldTree:
    org.openjdk.source.doctree.IdentifierTree getName() -> getName
    org.openjdk.source.doctree.ReferenceTree getType() -> getType
    java.util.List getDescription() -> getDescription
org.openjdk.source.doctree.SerialTree -> org.openjdk.source.doctree.SerialTree:
    java.util.List getDescription() -> getDescription
org.openjdk.source.doctree.SinceTree -> org.openjdk.source.doctree.SinceTree:
    java.util.List getBody() -> getBody
org.openjdk.source.doctree.StartElementTree -> org.openjdk.source.doctree.StartElementTree:
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    java.util.List getAttributes() -> getAttributes
    boolean isSelfClosing() -> isSelfClosing
org.openjdk.source.doctree.TextTree -> org.openjdk.source.doctree.TextTree:
    java.lang.String getBody() -> getBody
org.openjdk.source.doctree.ThrowsTree -> org.openjdk.source.doctree.ThrowsTree:
    org.openjdk.source.doctree.ReferenceTree getExceptionName() -> getExceptionName
    java.util.List getDescription() -> getDescription
org.openjdk.source.doctree.UnknownBlockTagTree -> org.openjdk.source.doctree.UnknownBlockTagTree:
    java.util.List getContent() -> getContent
org.openjdk.source.doctree.UnknownInlineTagTree -> org.openjdk.source.doctree.UnknownInlineTagTree:
    java.util.List getContent() -> getContent
org.openjdk.source.doctree.UsesTree -> org.openjdk.source.doctree.UsesTree:
    org.openjdk.source.doctree.ReferenceTree getServiceType() -> getServiceType
    java.util.List getDescription() -> getDescription
org.openjdk.source.doctree.ValueTree -> org.openjdk.source.doctree.ValueTree:
    org.openjdk.source.doctree.ReferenceTree getReference() -> getReference
org.openjdk.source.doctree.VersionTree -> org.openjdk.source.doctree.VersionTree:
    java.util.List getBody() -> getBody
org.openjdk.source.tree.AnnotatedTypeTree -> org.openjdk.source.tree.AnnotatedTypeTree:
    java.util.List getAnnotations() -> getAnnotations
    org.openjdk.source.tree.ExpressionTree getUnderlyingType() -> getUnderlyingType
org.openjdk.source.tree.AnnotationTree -> org.openjdk.source.tree.AnnotationTree:
    org.openjdk.source.tree.Tree getAnnotationType() -> getAnnotationType
    java.util.List getArguments() -> getArguments
org.openjdk.source.tree.ArrayAccessTree -> org.openjdk.source.tree.ArrayAccessTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    org.openjdk.source.tree.ExpressionTree getIndex() -> getIndex
org.openjdk.source.tree.ArrayTypeTree -> org.openjdk.source.tree.ArrayTypeTree:
    org.openjdk.source.tree.Tree getType() -> getType
org.openjdk.source.tree.AssertTree -> org.openjdk.source.tree.AssertTree:
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
    org.openjdk.source.tree.ExpressionTree getDetail() -> getDetail
org.openjdk.source.tree.AssignmentTree -> org.openjdk.source.tree.AssignmentTree:
    org.openjdk.source.tree.ExpressionTree getVariable() -> getVariable
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.source.tree.BinaryTree -> org.openjdk.source.tree.BinaryTree:
    org.openjdk.source.tree.ExpressionTree getLeftOperand() -> getLeftOperand
    org.openjdk.source.tree.ExpressionTree getRightOperand() -> getRightOperand
org.openjdk.source.tree.BlockTree -> org.openjdk.source.tree.BlockTree:
    boolean isStatic() -> isStatic
    java.util.List getStatements() -> getStatements
org.openjdk.source.tree.BreakTree -> org.openjdk.source.tree.BreakTree:
    org.openjdk.javax.lang.model.element.Name getLabel() -> getLabel
org.openjdk.source.tree.CaseTree -> org.openjdk.source.tree.CaseTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    java.util.List getStatements() -> getStatements
org.openjdk.source.tree.CatchTree -> org.openjdk.source.tree.CatchTree:
    org.openjdk.source.tree.VariableTree getParameter() -> getParameter
    org.openjdk.source.tree.BlockTree getBlock() -> getBlock
org.openjdk.source.tree.ClassTree -> org.openjdk.source.tree.ClassTree:
    org.openjdk.source.tree.ModifiersTree getModifiers() -> getModifiers
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    java.util.List getTypeParameters() -> getTypeParameters
    org.openjdk.source.tree.Tree getExtendsClause() -> getExtendsClause
    java.util.List getImplementsClause() -> getImplementsClause
    java.util.List getMembers() -> getMembers
org.openjdk.source.tree.CompilationUnitTree -> org.openjdk.source.tree.CompilationUnitTree:
    java.util.List getPackageAnnotations() -> getPackageAnnotations
    org.openjdk.source.tree.ExpressionTree getPackageName() -> getPackageName
    org.openjdk.source.tree.PackageTree getPackage() -> getPackage
    java.util.List getImports() -> getImports
    java.util.List getTypeDecls() -> getTypeDecls
    org.openjdk.javax.tools.JavaFileObject getSourceFile() -> getSourceFile
    org.openjdk.source.tree.LineMap getLineMap() -> getLineMap
org.openjdk.source.tree.CompoundAssignmentTree -> org.openjdk.source.tree.CompoundAssignmentTree:
    org.openjdk.source.tree.ExpressionTree getVariable() -> getVariable
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.source.tree.ConditionalExpressionTree -> org.openjdk.source.tree.ConditionalExpressionTree:
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
    org.openjdk.source.tree.ExpressionTree getTrueExpression() -> getTrueExpression
    org.openjdk.source.tree.ExpressionTree getFalseExpression() -> getFalseExpression
org.openjdk.source.tree.ContinueTree -> org.openjdk.source.tree.ContinueTree:
    org.openjdk.javax.lang.model.element.Name getLabel() -> getLabel
org.openjdk.source.tree.DirectiveTree -> org.openjdk.source.tree.DirectiveTree:
org.openjdk.source.tree.DoWhileLoopTree -> org.openjdk.source.tree.DoWhileLoopTree:
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
org.openjdk.source.tree.EmptyStatementTree -> org.openjdk.source.tree.EmptyStatementTree:
org.openjdk.source.tree.EnhancedForLoopTree -> org.openjdk.source.tree.EnhancedForLoopTree:
    org.openjdk.source.tree.VariableTree getVariable() -> getVariable
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
org.openjdk.source.tree.ErroneousTree -> org.openjdk.source.tree.ErroneousTree:
    java.util.List getErrorTrees() -> getErrorTrees
org.openjdk.source.tree.ExportsTree -> org.openjdk.source.tree.ExportsTree:
    org.openjdk.source.tree.ExpressionTree getPackageName() -> getPackageName
    java.util.List getModuleNames() -> getModuleNames
org.openjdk.source.tree.ExpressionStatementTree -> org.openjdk.source.tree.ExpressionStatementTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.source.tree.ExpressionTree -> org.openjdk.source.tree.ExpressionTree:
org.openjdk.source.tree.ForLoopTree -> org.openjdk.source.tree.ForLoopTree:
    java.util.List getInitializer() -> getInitializer
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
    java.util.List getUpdate() -> getUpdate
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
org.openjdk.source.tree.IdentifierTree -> org.openjdk.source.tree.IdentifierTree:
    org.openjdk.javax.lang.model.element.Name getName() -> getName
org.openjdk.source.tree.IfTree -> org.openjdk.source.tree.IfTree:
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
    org.openjdk.source.tree.StatementTree getThenStatement() -> getThenStatement
    org.openjdk.source.tree.StatementTree getElseStatement() -> getElseStatement
org.openjdk.source.tree.ImportTree -> org.openjdk.source.tree.ImportTree:
    boolean isStatic() -> isStatic
    org.openjdk.source.tree.Tree getQualifiedIdentifier() -> getQualifiedIdentifier
org.openjdk.source.tree.InstanceOfTree -> org.openjdk.source.tree.InstanceOfTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    org.openjdk.source.tree.Tree getType() -> getType
org.openjdk.source.tree.IntersectionTypeTree -> org.openjdk.source.tree.IntersectionTypeTree:
    java.util.List getBounds() -> getBounds
org.openjdk.source.tree.LabeledStatementTree -> org.openjdk.source.tree.LabeledStatementTree:
    org.openjdk.javax.lang.model.element.Name getLabel() -> getLabel
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
org.openjdk.source.tree.LambdaExpressionTree -> org.openjdk.source.tree.LambdaExpressionTree:
    java.util.List getParameters() -> getParameters
    org.openjdk.source.tree.Tree getBody() -> getBody
    org.openjdk.source.tree.LambdaExpressionTree$BodyKind getBodyKind() -> getBodyKind
org.openjdk.source.tree.LambdaExpressionTree$BodyKind -> org.openjdk.source.tree.LambdaExpressionTree$BodyKind:
    org.openjdk.source.tree.LambdaExpressionTree$BodyKind EXPRESSION -> EXPRESSION
    org.openjdk.source.tree.LambdaExpressionTree$BodyKind STATEMENT -> STATEMENT
    org.openjdk.source.tree.LambdaExpressionTree$BodyKind[] $VALUES -> $VALUES
    org.openjdk.source.tree.LambdaExpressionTree$BodyKind[] values() -> values
    org.openjdk.source.tree.LambdaExpressionTree$BodyKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.source.tree.LineMap -> org.openjdk.source.tree.LineMap:
    long getStartPosition(long) -> getStartPosition
    long getPosition(long,long) -> getPosition
    long getLineNumber(long) -> getLineNumber
    long getColumnNumber(long) -> getColumnNumber
org.openjdk.source.tree.LiteralTree -> org.openjdk.source.tree.LiteralTree:
    java.lang.Object getValue() -> getValue
org.openjdk.source.tree.MemberReferenceTree -> org.openjdk.source.tree.MemberReferenceTree:
    org.openjdk.source.tree.MemberReferenceTree$ReferenceMode getMode() -> getMode
    org.openjdk.source.tree.ExpressionTree getQualifierExpression() -> getQualifierExpression
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    java.util.List getTypeArguments() -> getTypeArguments
org.openjdk.source.tree.MemberReferenceTree$ReferenceMode -> org.openjdk.source.tree.MemberReferenceTree$ReferenceMode:
    org.openjdk.source.tree.MemberReferenceTree$ReferenceMode INVOKE -> INVOKE
    org.openjdk.source.tree.MemberReferenceTree$ReferenceMode NEW -> NEW
    org.openjdk.source.tree.MemberReferenceTree$ReferenceMode[] $VALUES -> $VALUES
    org.openjdk.source.tree.MemberReferenceTree$ReferenceMode[] values() -> values
    org.openjdk.source.tree.MemberReferenceTree$ReferenceMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.source.tree.MemberSelectTree -> org.openjdk.source.tree.MemberSelectTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    org.openjdk.javax.lang.model.element.Name getIdentifier() -> getIdentifier
org.openjdk.source.tree.MethodInvocationTree -> org.openjdk.source.tree.MethodInvocationTree:
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.source.tree.ExpressionTree getMethodSelect() -> getMethodSelect
    java.util.List getArguments() -> getArguments
org.openjdk.source.tree.MethodTree -> org.openjdk.source.tree.MethodTree:
    org.openjdk.source.tree.ModifiersTree getModifiers() -> getModifiers
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    org.openjdk.source.tree.Tree getReturnType() -> getReturnType
    java.util.List getTypeParameters() -> getTypeParameters
    java.util.List getParameters() -> getParameters
    org.openjdk.source.tree.VariableTree getReceiverParameter() -> getReceiverParameter
    java.util.List getThrows() -> getThrows
    org.openjdk.source.tree.BlockTree getBody() -> getBody
    org.openjdk.source.tree.Tree getDefaultValue() -> getDefaultValue
org.openjdk.source.tree.ModifiersTree -> org.openjdk.source.tree.ModifiersTree:
    java.util.Set getFlags() -> getFlags
    java.util.List getAnnotations() -> getAnnotations
org.openjdk.source.tree.ModuleTree -> org.openjdk.source.tree.ModuleTree:
    java.util.List getAnnotations() -> getAnnotations
    org.openjdk.source.tree.ModuleTree$ModuleKind getModuleType() -> getModuleType
    org.openjdk.source.tree.ExpressionTree getName() -> getName
    java.util.List getDirectives() -> getDirectives
org.openjdk.source.tree.ModuleTree$ModuleKind -> org.openjdk.source.tree.ModuleTree$ModuleKind:
    org.openjdk.source.tree.ModuleTree$ModuleKind OPEN -> OPEN
    org.openjdk.source.tree.ModuleTree$ModuleKind STRONG -> STRONG
    org.openjdk.source.tree.ModuleTree$ModuleKind[] $VALUES -> $VALUES
    org.openjdk.source.tree.ModuleTree$ModuleKind[] values() -> values
    org.openjdk.source.tree.ModuleTree$ModuleKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.source.tree.NewArrayTree -> org.openjdk.source.tree.NewArrayTree:
    org.openjdk.source.tree.Tree getType() -> getType
    java.util.List getDimensions() -> getDimensions
    java.util.List getInitializers() -> getInitializers
    java.util.List getAnnotations() -> getAnnotations
    java.util.List getDimAnnotations() -> getDimAnnotations
org.openjdk.source.tree.NewClassTree -> org.openjdk.source.tree.NewClassTree:
    org.openjdk.source.tree.ExpressionTree getEnclosingExpression() -> getEnclosingExpression
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.source.tree.ExpressionTree getIdentifier() -> getIdentifier
    java.util.List getArguments() -> getArguments
    org.openjdk.source.tree.ClassTree getClassBody() -> getClassBody
org.openjdk.source.tree.OpensTree -> org.openjdk.source.tree.OpensTree:
    org.openjdk.source.tree.ExpressionTree getPackageName() -> getPackageName
    java.util.List getModuleNames() -> getModuleNames
org.openjdk.source.tree.PackageTree -> org.openjdk.source.tree.PackageTree:
    java.util.List getAnnotations() -> getAnnotations
    org.openjdk.source.tree.ExpressionTree getPackageName() -> getPackageName
org.openjdk.source.tree.ParameterizedTypeTree -> org.openjdk.source.tree.ParameterizedTypeTree:
    org.openjdk.source.tree.Tree getType() -> getType
    java.util.List getTypeArguments() -> getTypeArguments
org.openjdk.source.tree.ParenthesizedTree -> org.openjdk.source.tree.ParenthesizedTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.source.tree.PrimitiveTypeTree -> org.openjdk.source.tree.PrimitiveTypeTree:
    org.openjdk.javax.lang.model.type.TypeKind getPrimitiveTypeKind() -> getPrimitiveTypeKind
org.openjdk.source.tree.ProvidesTree -> org.openjdk.source.tree.ProvidesTree:
    org.openjdk.source.tree.ExpressionTree getServiceName() -> getServiceName
    java.util.List getImplementationNames() -> getImplementationNames
org.openjdk.source.tree.RequiresTree -> org.openjdk.source.tree.RequiresTree:
    boolean isStatic() -> isStatic
    boolean isTransitive() -> isTransitive
    org.openjdk.source.tree.ExpressionTree getModuleName() -> getModuleName
org.openjdk.source.tree.ReturnTree -> org.openjdk.source.tree.ReturnTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.source.tree.Scope -> org.openjdk.source.tree.Scope:
    org.openjdk.source.tree.Scope getEnclosingScope() -> getEnclosingScope
    org.openjdk.javax.lang.model.element.TypeElement getEnclosingClass() -> getEnclosingClass
    org.openjdk.javax.lang.model.element.ExecutableElement getEnclosingMethod() -> getEnclosingMethod
    java.lang.Iterable getLocalElements() -> getLocalElements
org.openjdk.source.tree.StatementTree -> org.openjdk.source.tree.StatementTree:
org.openjdk.source.tree.SwitchTree -> org.openjdk.source.tree.SwitchTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    java.util.List getCases() -> getCases
org.openjdk.source.tree.SynchronizedTree -> org.openjdk.source.tree.SynchronizedTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    org.openjdk.source.tree.BlockTree getBlock() -> getBlock
org.openjdk.source.tree.ThrowTree -> org.openjdk.source.tree.ThrowTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.source.tree.Tree -> org.openjdk.source.tree.Tree:
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
org.openjdk.source.tree.Tree$Kind -> org.openjdk.source.tree.Tree$Kind:
    org.openjdk.source.tree.Tree$Kind ANNOTATED_TYPE -> ANNOTATED_TYPE
    org.openjdk.source.tree.Tree$Kind ANNOTATION -> ANNOTATION
    org.openjdk.source.tree.Tree$Kind TYPE_ANNOTATION -> TYPE_ANNOTATION
    org.openjdk.source.tree.Tree$Kind ARRAY_ACCESS -> ARRAY_ACCESS
    org.openjdk.source.tree.Tree$Kind ARRAY_TYPE -> ARRAY_TYPE
    org.openjdk.source.tree.Tree$Kind ASSERT -> ASSERT
    org.openjdk.source.tree.Tree$Kind ASSIGNMENT -> ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind BLOCK -> BLOCK
    org.openjdk.source.tree.Tree$Kind BREAK -> BREAK
    org.openjdk.source.tree.Tree$Kind CASE -> CASE
    org.openjdk.source.tree.Tree$Kind CATCH -> CATCH
    org.openjdk.source.tree.Tree$Kind CLASS -> CLASS
    org.openjdk.source.tree.Tree$Kind COMPILATION_UNIT -> COMPILATION_UNIT
    org.openjdk.source.tree.Tree$Kind CONDITIONAL_EXPRESSION -> CONDITIONAL_EXPRESSION
    org.openjdk.source.tree.Tree$Kind CONTINUE -> CONTINUE
    org.openjdk.source.tree.Tree$Kind DO_WHILE_LOOP -> DO_WHILE_LOOP
    org.openjdk.source.tree.Tree$Kind ENHANCED_FOR_LOOP -> ENHANCED_FOR_LOOP
    org.openjdk.source.tree.Tree$Kind EXPRESSION_STATEMENT -> EXPRESSION_STATEMENT
    org.openjdk.source.tree.Tree$Kind MEMBER_SELECT -> MEMBER_SELECT
    org.openjdk.source.tree.Tree$Kind MEMBER_REFERENCE -> MEMBER_REFERENCE
    org.openjdk.source.tree.Tree$Kind FOR_LOOP -> FOR_LOOP
    org.openjdk.source.tree.Tree$Kind IDENTIFIER -> IDENTIFIER
    org.openjdk.source.tree.Tree$Kind IF -> IF
    org.openjdk.source.tree.Tree$Kind IMPORT -> IMPORT
    org.openjdk.source.tree.Tree$Kind INSTANCE_OF -> INSTANCE_OF
    org.openjdk.source.tree.Tree$Kind LABELED_STATEMENT -> LABELED_STATEMENT
    org.openjdk.source.tree.Tree$Kind METHOD -> METHOD
    org.openjdk.source.tree.Tree$Kind METHOD_INVOCATION -> METHOD_INVOCATION
    org.openjdk.source.tree.Tree$Kind MODIFIERS -> MODIFIERS
    org.openjdk.source.tree.Tree$Kind NEW_ARRAY -> NEW_ARRAY
    org.openjdk.source.tree.Tree$Kind NEW_CLASS -> NEW_CLASS
    org.openjdk.source.tree.Tree$Kind LAMBDA_EXPRESSION -> LAMBDA_EXPRESSION
    org.openjdk.source.tree.Tree$Kind PACKAGE -> PACKAGE
    org.openjdk.source.tree.Tree$Kind PARENTHESIZED -> PARENTHESIZED
    org.openjdk.source.tree.Tree$Kind PRIMITIVE_TYPE -> PRIMITIVE_TYPE
    org.openjdk.source.tree.Tree$Kind RETURN -> RETURN
    org.openjdk.source.tree.Tree$Kind EMPTY_STATEMENT -> EMPTY_STATEMENT
    org.openjdk.source.tree.Tree$Kind SWITCH -> SWITCH
    org.openjdk.source.tree.Tree$Kind SYNCHRONIZED -> SYNCHRONIZED
    org.openjdk.source.tree.Tree$Kind THROW -> THROW
    org.openjdk.source.tree.Tree$Kind TRY -> TRY
    org.openjdk.source.tree.Tree$Kind PARAMETERIZED_TYPE -> PARAMETERIZED_TYPE
    org.openjdk.source.tree.Tree$Kind UNION_TYPE -> UNION_TYPE
    org.openjdk.source.tree.Tree$Kind INTERSECTION_TYPE -> INTERSECTION_TYPE
    org.openjdk.source.tree.Tree$Kind TYPE_CAST -> TYPE_CAST
    org.openjdk.source.tree.Tree$Kind TYPE_PARAMETER -> TYPE_PARAMETER
    org.openjdk.source.tree.Tree$Kind VARIABLE -> VARIABLE
    org.openjdk.source.tree.Tree$Kind WHILE_LOOP -> WHILE_LOOP
    org.openjdk.source.tree.Tree$Kind POSTFIX_INCREMENT -> POSTFIX_INCREMENT
    org.openjdk.source.tree.Tree$Kind POSTFIX_DECREMENT -> POSTFIX_DECREMENT
    org.openjdk.source.tree.Tree$Kind PREFIX_INCREMENT -> PREFIX_INCREMENT
    org.openjdk.source.tree.Tree$Kind PREFIX_DECREMENT -> PREFIX_DECREMENT
    org.openjdk.source.tree.Tree$Kind UNARY_PLUS -> UNARY_PLUS
    org.openjdk.source.tree.Tree$Kind UNARY_MINUS -> UNARY_MINUS
    org.openjdk.source.tree.Tree$Kind BITWISE_COMPLEMENT -> BITWISE_COMPLEMENT
    org.openjdk.source.tree.Tree$Kind LOGICAL_COMPLEMENT -> LOGICAL_COMPLEMENT
    org.openjdk.source.tree.Tree$Kind MULTIPLY -> MULTIPLY
    org.openjdk.source.tree.Tree$Kind DIVIDE -> DIVIDE
    org.openjdk.source.tree.Tree$Kind REMAINDER -> REMAINDER
    org.openjdk.source.tree.Tree$Kind PLUS -> PLUS
    org.openjdk.source.tree.Tree$Kind MINUS -> MINUS
    org.openjdk.source.tree.Tree$Kind LEFT_SHIFT -> LEFT_SHIFT
    org.openjdk.source.tree.Tree$Kind RIGHT_SHIFT -> RIGHT_SHIFT
    org.openjdk.source.tree.Tree$Kind UNSIGNED_RIGHT_SHIFT -> UNSIGNED_RIGHT_SHIFT
    org.openjdk.source.tree.Tree$Kind LESS_THAN -> LESS_THAN
    org.openjdk.source.tree.Tree$Kind GREATER_THAN -> GREATER_THAN
    org.openjdk.source.tree.Tree$Kind LESS_THAN_EQUAL -> LESS_THAN_EQUAL
    org.openjdk.source.tree.Tree$Kind GREATER_THAN_EQUAL -> GREATER_THAN_EQUAL
    org.openjdk.source.tree.Tree$Kind EQUAL_TO -> EQUAL_TO
    org.openjdk.source.tree.Tree$Kind NOT_EQUAL_TO -> NOT_EQUAL_TO
    org.openjdk.source.tree.Tree$Kind AND -> AND
    org.openjdk.source.tree.Tree$Kind XOR -> XOR
    org.openjdk.source.tree.Tree$Kind OR -> OR
    org.openjdk.source.tree.Tree$Kind CONDITIONAL_AND -> CONDITIONAL_AND
    org.openjdk.source.tree.Tree$Kind CONDITIONAL_OR -> CONDITIONAL_OR
    org.openjdk.source.tree.Tree$Kind MULTIPLY_ASSIGNMENT -> MULTIPLY_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind DIVIDE_ASSIGNMENT -> DIVIDE_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind REMAINDER_ASSIGNMENT -> REMAINDER_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind PLUS_ASSIGNMENT -> PLUS_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind MINUS_ASSIGNMENT -> MINUS_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind LEFT_SHIFT_ASSIGNMENT -> LEFT_SHIFT_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind RIGHT_SHIFT_ASSIGNMENT -> RIGHT_SHIFT_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind UNSIGNED_RIGHT_SHIFT_ASSIGNMENT -> UNSIGNED_RIGHT_SHIFT_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind AND_ASSIGNMENT -> AND_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind XOR_ASSIGNMENT -> XOR_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind OR_ASSIGNMENT -> OR_ASSIGNMENT
    org.openjdk.source.tree.Tree$Kind INT_LITERAL -> INT_LITERAL
    org.openjdk.source.tree.Tree$Kind LONG_LITERAL -> LONG_LITERAL
    org.openjdk.source.tree.Tree$Kind FLOAT_LITERAL -> FLOAT_LITERAL
    org.openjdk.source.tree.Tree$Kind DOUBLE_LITERAL -> DOUBLE_LITERAL
    org.openjdk.source.tree.Tree$Kind BOOLEAN_LITERAL -> BOOLEAN_LITERAL
    org.openjdk.source.tree.Tree$Kind CHAR_LITERAL -> CHAR_LITERAL
    org.openjdk.source.tree.Tree$Kind STRING_LITERAL -> STRING_LITERAL
    org.openjdk.source.tree.Tree$Kind NULL_LITERAL -> NULL_LITERAL
    org.openjdk.source.tree.Tree$Kind UNBOUNDED_WILDCARD -> UNBOUNDED_WILDCARD
    org.openjdk.source.tree.Tree$Kind EXTENDS_WILDCARD -> EXTENDS_WILDCARD
    org.openjdk.source.tree.Tree$Kind SUPER_WILDCARD -> SUPER_WILDCARD
    org.openjdk.source.tree.Tree$Kind ERRONEOUS -> ERRONEOUS
    org.openjdk.source.tree.Tree$Kind INTERFACE -> INTERFACE
    org.openjdk.source.tree.Tree$Kind ENUM -> ENUM
    org.openjdk.source.tree.Tree$Kind ANNOTATION_TYPE -> ANNOTATION_TYPE
    org.openjdk.source.tree.Tree$Kind MODULE -> MODULE
    org.openjdk.source.tree.Tree$Kind EXPORTS -> EXPORTS
    org.openjdk.source.tree.Tree$Kind OPENS -> OPENS
    org.openjdk.source.tree.Tree$Kind PROVIDES -> PROVIDES
    org.openjdk.source.tree.Tree$Kind REQUIRES -> REQUIRES
    org.openjdk.source.tree.Tree$Kind USES -> USES
    org.openjdk.source.tree.Tree$Kind OTHER -> OTHER
    java.lang.Class associatedInterface -> associatedInterface
    org.openjdk.source.tree.Tree$Kind[] $VALUES -> $VALUES
    org.openjdk.source.tree.Tree$Kind[] values() -> values
    org.openjdk.source.tree.Tree$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.Class) -> <init>
    java.lang.Class asInterface() -> asInterface
    void <clinit>() -> <clinit>
org.openjdk.source.tree.TreeVisitor -> org.openjdk.source.tree.TreeVisitor:
    java.lang.Object visitAnnotatedType(org.openjdk.source.tree.AnnotatedTypeTree,java.lang.Object) -> visitAnnotatedType
    java.lang.Object visitAnnotation(org.openjdk.source.tree.AnnotationTree,java.lang.Object) -> visitAnnotation
    java.lang.Object visitMethodInvocation(org.openjdk.source.tree.MethodInvocationTree,java.lang.Object) -> visitMethodInvocation
    java.lang.Object visitAssert(org.openjdk.source.tree.AssertTree,java.lang.Object) -> visitAssert
    java.lang.Object visitAssignment(org.openjdk.source.tree.AssignmentTree,java.lang.Object) -> visitAssignment
    java.lang.Object visitCompoundAssignment(org.openjdk.source.tree.CompoundAssignmentTree,java.lang.Object) -> visitCompoundAssignment
    java.lang.Object visitBinary(org.openjdk.source.tree.BinaryTree,java.lang.Object) -> visitBinary
    java.lang.Object visitBlock(org.openjdk.source.tree.BlockTree,java.lang.Object) -> visitBlock
    java.lang.Object visitBreak(org.openjdk.source.tree.BreakTree,java.lang.Object) -> visitBreak
    java.lang.Object visitCase(org.openjdk.source.tree.CaseTree,java.lang.Object) -> visitCase
    java.lang.Object visitCatch(org.openjdk.source.tree.CatchTree,java.lang.Object) -> visitCatch
    java.lang.Object visitClass(org.openjdk.source.tree.ClassTree,java.lang.Object) -> visitClass
    java.lang.Object visitConditionalExpression(org.openjdk.source.tree.ConditionalExpressionTree,java.lang.Object) -> visitConditionalExpression
    java.lang.Object visitContinue(org.openjdk.source.tree.ContinueTree,java.lang.Object) -> visitContinue
    java.lang.Object visitDoWhileLoop(org.openjdk.source.tree.DoWhileLoopTree,java.lang.Object) -> visitDoWhileLoop
    java.lang.Object visitErroneous(org.openjdk.source.tree.ErroneousTree,java.lang.Object) -> visitErroneous
    java.lang.Object visitExpressionStatement(org.openjdk.source.tree.ExpressionStatementTree,java.lang.Object) -> visitExpressionStatement
    java.lang.Object visitEnhancedForLoop(org.openjdk.source.tree.EnhancedForLoopTree,java.lang.Object) -> visitEnhancedForLoop
    java.lang.Object visitForLoop(org.openjdk.source.tree.ForLoopTree,java.lang.Object) -> visitForLoop
    java.lang.Object visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitIf(org.openjdk.source.tree.IfTree,java.lang.Object) -> visitIf
    java.lang.Object visitImport(org.openjdk.source.tree.ImportTree,java.lang.Object) -> visitImport
    java.lang.Object visitArrayAccess(org.openjdk.source.tree.ArrayAccessTree,java.lang.Object) -> visitArrayAccess
    java.lang.Object visitLabeledStatement(org.openjdk.source.tree.LabeledStatementTree,java.lang.Object) -> visitLabeledStatement
    java.lang.Object visitLiteral(org.openjdk.source.tree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitMethod(org.openjdk.source.tree.MethodTree,java.lang.Object) -> visitMethod
    java.lang.Object visitModifiers(org.openjdk.source.tree.ModifiersTree,java.lang.Object) -> visitModifiers
    java.lang.Object visitNewArray(org.openjdk.source.tree.NewArrayTree,java.lang.Object) -> visitNewArray
    java.lang.Object visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Object) -> visitNewClass
    java.lang.Object visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Object) -> visitLambdaExpression
    java.lang.Object visitPackage(org.openjdk.source.tree.PackageTree,java.lang.Object) -> visitPackage
    java.lang.Object visitParenthesized(org.openjdk.source.tree.ParenthesizedTree,java.lang.Object) -> visitParenthesized
    java.lang.Object visitReturn(org.openjdk.source.tree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitMemberSelect(org.openjdk.source.tree.MemberSelectTree,java.lang.Object) -> visitMemberSelect
    java.lang.Object visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Object) -> visitMemberReference
    java.lang.Object visitEmptyStatement(org.openjdk.source.tree.EmptyStatementTree,java.lang.Object) -> visitEmptyStatement
    java.lang.Object visitSwitch(org.openjdk.source.tree.SwitchTree,java.lang.Object) -> visitSwitch
    java.lang.Object visitSynchronized(org.openjdk.source.tree.SynchronizedTree,java.lang.Object) -> visitSynchronized
    java.lang.Object visitThrow(org.openjdk.source.tree.ThrowTree,java.lang.Object) -> visitThrow
    java.lang.Object visitCompilationUnit(org.openjdk.source.tree.CompilationUnitTree,java.lang.Object) -> visitCompilationUnit
    java.lang.Object visitTry(org.openjdk.source.tree.TryTree,java.lang.Object) -> visitTry
    java.lang.Object visitParameterizedType(org.openjdk.source.tree.ParameterizedTypeTree,java.lang.Object) -> visitParameterizedType
    java.lang.Object visitUnionType(org.openjdk.source.tree.UnionTypeTree,java.lang.Object) -> visitUnionType
    java.lang.Object visitIntersectionType(org.openjdk.source.tree.IntersectionTypeTree,java.lang.Object) -> visitIntersectionType
    java.lang.Object visitArrayType(org.openjdk.source.tree.ArrayTypeTree,java.lang.Object) -> visitArrayType
    java.lang.Object visitTypeCast(org.openjdk.source.tree.TypeCastTree,java.lang.Object) -> visitTypeCast
    java.lang.Object visitPrimitiveType(org.openjdk.source.tree.PrimitiveTypeTree,java.lang.Object) -> visitPrimitiveType
    java.lang.Object visitTypeParameter(org.openjdk.source.tree.TypeParameterTree,java.lang.Object) -> visitTypeParameter
    java.lang.Object visitInstanceOf(org.openjdk.source.tree.InstanceOfTree,java.lang.Object) -> visitInstanceOf
    java.lang.Object visitUnary(org.openjdk.source.tree.UnaryTree,java.lang.Object) -> visitUnary
    java.lang.Object visitVariable(org.openjdk.source.tree.VariableTree,java.lang.Object) -> visitVariable
    java.lang.Object visitWhileLoop(org.openjdk.source.tree.WhileLoopTree,java.lang.Object) -> visitWhileLoop
    java.lang.Object visitWildcard(org.openjdk.source.tree.WildcardTree,java.lang.Object) -> visitWildcard
    java.lang.Object visitModule(org.openjdk.source.tree.ModuleTree,java.lang.Object) -> visitModule
    java.lang.Object visitExports(org.openjdk.source.tree.ExportsTree,java.lang.Object) -> visitExports
    java.lang.Object visitOpens(org.openjdk.source.tree.OpensTree,java.lang.Object) -> visitOpens
    java.lang.Object visitProvides(org.openjdk.source.tree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitRequires(org.openjdk.source.tree.RequiresTree,java.lang.Object) -> visitRequires
    java.lang.Object visitUses(org.openjdk.source.tree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitOther(org.openjdk.source.tree.Tree,java.lang.Object) -> visitOther
org.openjdk.source.tree.TryTree -> org.openjdk.source.tree.TryTree:
    org.openjdk.source.tree.BlockTree getBlock() -> getBlock
    java.util.List getCatches() -> getCatches
    org.openjdk.source.tree.BlockTree getFinallyBlock() -> getFinallyBlock
    java.util.List getResources() -> getResources
org.openjdk.source.tree.TypeCastTree -> org.openjdk.source.tree.TypeCastTree:
    org.openjdk.source.tree.Tree getType() -> getType
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.source.tree.TypeParameterTree -> org.openjdk.source.tree.TypeParameterTree:
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    java.util.List getBounds() -> getBounds
    java.util.List getAnnotations() -> getAnnotations
org.openjdk.source.tree.UnaryTree -> org.openjdk.source.tree.UnaryTree:
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.source.tree.UnionTypeTree -> org.openjdk.source.tree.UnionTypeTree:
    java.util.List getTypeAlternatives() -> getTypeAlternatives
org.openjdk.source.tree.UsesTree -> org.openjdk.source.tree.UsesTree:
    org.openjdk.source.tree.ExpressionTree getServiceName() -> getServiceName
org.openjdk.source.tree.VariableTree -> org.openjdk.source.tree.VariableTree:
    org.openjdk.source.tree.ModifiersTree getModifiers() -> getModifiers
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    org.openjdk.source.tree.ExpressionTree getNameExpression() -> getNameExpression
    org.openjdk.source.tree.Tree getType() -> getType
    org.openjdk.source.tree.ExpressionTree getInitializer() -> getInitializer
org.openjdk.source.tree.WhileLoopTree -> org.openjdk.source.tree.WhileLoopTree:
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
org.openjdk.source.tree.WildcardTree -> org.openjdk.source.tree.WildcardTree:
    org.openjdk.source.tree.Tree getBound() -> getBound
org.openjdk.source.util.DocSourcePositions -> org.openjdk.source.util.DocSourcePositions:
    long getStartPosition(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.doctree.DocCommentTree,org.openjdk.source.doctree.DocTree) -> getStartPosition
    long getEndPosition(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.doctree.DocCommentTree,org.openjdk.source.doctree.DocTree) -> getEndPosition
org.openjdk.source.util.DocTreeFactory -> org.openjdk.source.util.DocTreeFactory:
    org.openjdk.source.doctree.AttributeTree newAttributeTree(org.openjdk.javax.lang.model.element.Name,org.openjdk.source.doctree.AttributeTree$ValueKind,java.util.List) -> newAttributeTree
    org.openjdk.source.doctree.AuthorTree newAuthorTree(java.util.List) -> newAuthorTree
    org.openjdk.source.doctree.LiteralTree newCodeTree(org.openjdk.source.doctree.TextTree) -> newCodeTree
    org.openjdk.source.doctree.CommentTree newCommentTree(java.lang.String) -> newCommentTree
    org.openjdk.source.doctree.DeprecatedTree newDeprecatedTree(java.util.List) -> newDeprecatedTree
    org.openjdk.source.doctree.DocCommentTree newDocCommentTree(java.util.List,java.util.List) -> newDocCommentTree
    org.openjdk.source.doctree.DocRootTree newDocRootTree() -> newDocRootTree
    org.openjdk.source.doctree.EndElementTree newEndElementTree(org.openjdk.javax.lang.model.element.Name) -> newEndElementTree
    org.openjdk.source.doctree.EntityTree newEntityTree(org.openjdk.javax.lang.model.element.Name) -> newEntityTree
    org.openjdk.source.doctree.ErroneousTree newErroneousTree(java.lang.String,org.openjdk.javax.tools.Diagnostic) -> newErroneousTree
    org.openjdk.source.doctree.ThrowsTree newExceptionTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newExceptionTree
    org.openjdk.source.doctree.HiddenTree newHiddenTree(java.util.List) -> newHiddenTree
    org.openjdk.source.doctree.IdentifierTree newIdentifierTree(org.openjdk.javax.lang.model.element.Name) -> newIdentifierTree
    org.openjdk.source.doctree.IndexTree newIndexTree(org.openjdk.source.doctree.DocTree,java.util.List) -> newIndexTree
    org.openjdk.source.doctree.InheritDocTree newInheritDocTree() -> newInheritDocTree
    org.openjdk.source.doctree.LinkTree newLinkTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newLinkTree
    org.openjdk.source.doctree.LinkTree newLinkPlainTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newLinkPlainTree
    org.openjdk.source.doctree.LiteralTree newLiteralTree(org.openjdk.source.doctree.TextTree) -> newLiteralTree
    org.openjdk.source.doctree.ParamTree newParamTree(boolean,org.openjdk.source.doctree.IdentifierTree,java.util.List) -> newParamTree
    org.openjdk.source.doctree.ProvidesTree newProvidesTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newProvidesTree
    org.openjdk.source.doctree.ReferenceTree newReferenceTree(java.lang.String) -> newReferenceTree
    org.openjdk.source.doctree.ReturnTree newReturnTree(java.util.List) -> newReturnTree
    org.openjdk.source.doctree.SeeTree newSeeTree(java.util.List) -> newSeeTree
    org.openjdk.source.doctree.SerialTree newSerialTree(java.util.List) -> newSerialTree
    org.openjdk.source.doctree.SerialDataTree newSerialDataTree(java.util.List) -> newSerialDataTree
    org.openjdk.source.doctree.SerialFieldTree newSerialFieldTree(org.openjdk.source.doctree.IdentifierTree,org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newSerialFieldTree
    org.openjdk.source.doctree.SinceTree newSinceTree(java.util.List) -> newSinceTree
    org.openjdk.source.doctree.StartElementTree newStartElementTree(org.openjdk.javax.lang.model.element.Name,java.util.List,boolean) -> newStartElementTree
    org.openjdk.source.doctree.TextTree newTextTree(java.lang.String) -> newTextTree
    org.openjdk.source.doctree.ThrowsTree newThrowsTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newThrowsTree
    org.openjdk.source.doctree.UnknownBlockTagTree newUnknownBlockTagTree(org.openjdk.javax.lang.model.element.Name,java.util.List) -> newUnknownBlockTagTree
    org.openjdk.source.doctree.UnknownInlineTagTree newUnknownInlineTagTree(org.openjdk.javax.lang.model.element.Name,java.util.List) -> newUnknownInlineTagTree
    org.openjdk.source.doctree.UsesTree newUsesTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newUsesTree
    org.openjdk.source.doctree.ValueTree newValueTree(org.openjdk.source.doctree.ReferenceTree) -> newValueTree
    org.openjdk.source.doctree.VersionTree newVersionTree(java.util.List) -> newVersionTree
    org.openjdk.source.util.DocTreeFactory at(int) -> at
    java.util.List getFirstSentence(java.util.List) -> getFirstSentence
org.openjdk.source.util.DocTreePath -> org.openjdk.source.util.DocTreePath:
    org.openjdk.source.util.TreePath treePath -> treePath
    org.openjdk.source.doctree.DocCommentTree docComment -> docComment
    org.openjdk.source.doctree.DocTree leaf -> leaf
    org.openjdk.source.util.DocTreePath parent -> parent
    org.openjdk.source.util.DocTreePath getPath(org.openjdk.source.util.TreePath,org.openjdk.source.doctree.DocCommentTree,org.openjdk.source.doctree.DocTree) -> getPath
    org.openjdk.source.util.DocTreePath getPath(org.openjdk.source.util.DocTreePath,org.openjdk.source.doctree.DocTree) -> getPath
    void <init>(org.openjdk.source.util.TreePath,org.openjdk.source.doctree.DocCommentTree) -> <init>
    void <init>(org.openjdk.source.util.DocTreePath,org.openjdk.source.doctree.DocTree) -> <init>
    org.openjdk.source.util.TreePath getTreePath() -> getTreePath
    org.openjdk.source.doctree.DocCommentTree getDocComment() -> getDocComment
    org.openjdk.source.doctree.DocTree getLeaf() -> getLeaf
    org.openjdk.source.util.DocTreePath getParentPath() -> getParentPath
    java.util.Iterator iterator() -> iterator
    org.openjdk.source.doctree.DocTree access$000(org.openjdk.source.util.DocTreePath) -> access$000
    org.openjdk.source.util.DocTreePath access$100(org.openjdk.source.util.DocTreePath) -> access$100
org.openjdk.source.util.DocTreePath$1 -> org.openjdk.source.util.DocTreePath$1:
    org.openjdk.source.util.DocTreePath next -> next
    org.openjdk.source.util.DocTreePath this$0 -> this$0
    void <init>(org.openjdk.source.util.DocTreePath) -> <init>
    boolean hasNext() -> hasNext
    org.openjdk.source.doctree.DocTree next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.openjdk.source.util.DocTreePath$1PathFinder -> org.openjdk.source.util.DocTreePath$1PathFinder:
    void <init>() -> <init>
    org.openjdk.source.util.DocTreePath scan(org.openjdk.source.doctree.DocTree,org.openjdk.source.doctree.DocTree) -> scan
    java.lang.Object scan(org.openjdk.source.doctree.DocTree,java.lang.Object) -> scan
org.openjdk.source.util.DocTreePath$1Result -> org.openjdk.source.util.DocTreePath$1Result:
    long serialVersionUID -> serialVersionUID
    org.openjdk.source.util.DocTreePath path -> path
    void <init>(org.openjdk.source.util.DocTreePath) -> <init>
org.openjdk.source.util.DocTreePathScanner -> org.openjdk.source.util.DocTreePathScanner:
    org.openjdk.source.util.DocTreePath path -> path
    void <init>() -> <init>
    java.lang.Object scan(org.openjdk.source.util.DocTreePath,java.lang.Object) -> scan
    java.lang.Object scan(org.openjdk.source.doctree.DocTree,java.lang.Object) -> scan
    org.openjdk.source.util.DocTreePath getCurrentPath() -> getCurrentPath
org.openjdk.source.util.DocTreeScanner -> org.openjdk.source.util.DocTreeScanner:
    void <init>() -> <init>
    java.lang.Object scan(org.openjdk.source.doctree.DocTree,java.lang.Object) -> scan
    java.lang.Object scanAndReduce(org.openjdk.source.doctree.DocTree,java.lang.Object,java.lang.Object) -> scanAndReduce
    java.lang.Object scan(java.lang.Iterable,java.lang.Object) -> scan
    java.lang.Object scanAndReduce(java.lang.Iterable,java.lang.Object,java.lang.Object) -> scanAndReduce
    java.lang.Object reduce(java.lang.Object,java.lang.Object) -> reduce
    java.lang.Object visitAttribute(org.openjdk.source.doctree.AttributeTree,java.lang.Object) -> visitAttribute
    java.lang.Object visitAuthor(org.openjdk.source.doctree.AuthorTree,java.lang.Object) -> visitAuthor
    java.lang.Object visitComment(org.openjdk.source.doctree.CommentTree,java.lang.Object) -> visitComment
    java.lang.Object visitDeprecated(org.openjdk.source.doctree.DeprecatedTree,java.lang.Object) -> visitDeprecated
    java.lang.Object visitDocComment(org.openjdk.source.doctree.DocCommentTree,java.lang.Object) -> visitDocComment
    java.lang.Object visitDocRoot(org.openjdk.source.doctree.DocRootTree,java.lang.Object) -> visitDocRoot
    java.lang.Object visitEndElement(org.openjdk.source.doctree.EndElementTree,java.lang.Object) -> visitEndElement
    java.lang.Object visitEntity(org.openjdk.source.doctree.EntityTree,java.lang.Object) -> visitEntity
    java.lang.Object visitErroneous(org.openjdk.source.doctree.ErroneousTree,java.lang.Object) -> visitErroneous
    java.lang.Object visitHidden(org.openjdk.source.doctree.HiddenTree,java.lang.Object) -> visitHidden
    java.lang.Object visitIdentifier(org.openjdk.source.doctree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitIndex(org.openjdk.source.doctree.IndexTree,java.lang.Object) -> visitIndex
    java.lang.Object visitInheritDoc(org.openjdk.source.doctree.InheritDocTree,java.lang.Object) -> visitInheritDoc
    java.lang.Object visitLink(org.openjdk.source.doctree.LinkTree,java.lang.Object) -> visitLink
    java.lang.Object visitLiteral(org.openjdk.source.doctree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitParam(org.openjdk.source.doctree.ParamTree,java.lang.Object) -> visitParam
    java.lang.Object visitProvides(org.openjdk.source.doctree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitReference(org.openjdk.source.doctree.ReferenceTree,java.lang.Object) -> visitReference
    java.lang.Object visitReturn(org.openjdk.source.doctree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitSee(org.openjdk.source.doctree.SeeTree,java.lang.Object) -> visitSee
    java.lang.Object visitSerial(org.openjdk.source.doctree.SerialTree,java.lang.Object) -> visitSerial
    java.lang.Object visitSerialData(org.openjdk.source.doctree.SerialDataTree,java.lang.Object) -> visitSerialData
    java.lang.Object visitSerialField(org.openjdk.source.doctree.SerialFieldTree,java.lang.Object) -> visitSerialField
    java.lang.Object visitSince(org.openjdk.source.doctree.SinceTree,java.lang.Object) -> visitSince
    java.lang.Object visitStartElement(org.openjdk.source.doctree.StartElementTree,java.lang.Object) -> visitStartElement
    java.lang.Object visitText(org.openjdk.source.doctree.TextTree,java.lang.Object) -> visitText
    java.lang.Object visitThrows(org.openjdk.source.doctree.ThrowsTree,java.lang.Object) -> visitThrows
    java.lang.Object visitUnknownBlockTag(org.openjdk.source.doctree.UnknownBlockTagTree,java.lang.Object) -> visitUnknownBlockTag
    java.lang.Object visitUnknownInlineTag(org.openjdk.source.doctree.UnknownInlineTagTree,java.lang.Object) -> visitUnknownInlineTag
    java.lang.Object visitUses(org.openjdk.source.doctree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitValue(org.openjdk.source.doctree.ValueTree,java.lang.Object) -> visitValue
    java.lang.Object visitVersion(org.openjdk.source.doctree.VersionTree,java.lang.Object) -> visitVersion
    java.lang.Object visitOther(org.openjdk.source.doctree.DocTree,java.lang.Object) -> visitOther
org.openjdk.source.util.DocTrees -> org.openjdk.source.util.DocTrees:
    void <init>() -> <init>
    org.openjdk.source.util.DocTrees instance(org.openjdk.javax.tools.JavaCompiler$CompilationTask) -> instance
    org.openjdk.source.util.DocTrees instance(org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> instance
    java.text.BreakIterator getBreakIterator() -> getBreakIterator
    org.openjdk.source.doctree.DocCommentTree getDocCommentTree(org.openjdk.source.util.TreePath) -> getDocCommentTree
    org.openjdk.source.doctree.DocCommentTree getDocCommentTree(org.openjdk.javax.lang.model.element.Element) -> getDocCommentTree
    org.openjdk.source.doctree.DocCommentTree getDocCommentTree(org.openjdk.javax.tools.FileObject) -> getDocCommentTree
    org.openjdk.source.doctree.DocCommentTree getDocCommentTree(org.openjdk.javax.lang.model.element.Element,java.lang.String) -> getDocCommentTree
    org.openjdk.source.util.DocTreePath getDocTreePath(org.openjdk.javax.tools.FileObject,org.openjdk.javax.lang.model.element.PackageElement) -> getDocTreePath
    org.openjdk.javax.lang.model.element.Element getElement(org.openjdk.source.util.DocTreePath) -> getElement
    java.util.List getFirstSentence(java.util.List) -> getFirstSentence
    org.openjdk.source.util.DocSourcePositions getSourcePositions() -> getSourcePositions
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.source.doctree.DocTree,org.openjdk.source.doctree.DocCommentTree,org.openjdk.source.tree.CompilationUnitTree) -> printMessage
    void setBreakIterator(java.text.BreakIterator) -> setBreakIterator
    org.openjdk.source.util.DocTreeFactory getDocTreeFactory() -> getDocTreeFactory
    org.openjdk.source.util.SourcePositions getSourcePositions() -> getSourcePositions
org.openjdk.source.util.JavacTask -> org.openjdk.source.util.JavacTask:
    void <init>() -> <init>
    org.openjdk.source.util.JavacTask instance(org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> instance
    java.lang.Iterable parse() -> parse
    java.lang.Iterable analyze() -> analyze
    java.lang.Iterable generate() -> generate
    void setTaskListener(org.openjdk.source.util.TaskListener) -> setTaskListener
    void addTaskListener(org.openjdk.source.util.TaskListener) -> addTaskListener
    void removeTaskListener(org.openjdk.source.util.TaskListener) -> removeTaskListener
    org.openjdk.javax.lang.model.type.TypeMirror getTypeMirror(java.lang.Iterable) -> getTypeMirror
    org.openjdk.javax.lang.model.util.Elements getElements() -> getElements
    org.openjdk.javax.lang.model.util.Types getTypes() -> getTypes
org.openjdk.source.util.Plugin -> org.openjdk.source.util.Plugin:
    java.lang.String getName() -> getName
    void init(org.openjdk.source.util.JavacTask,java.lang.String[]) -> init
org.openjdk.source.util.SimpleDocTreeVisitor -> org.openjdk.source.util.SimpleDocTreeVisitor:
    java.lang.Object DEFAULT_VALUE -> DEFAULT_VALUE
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object defaultAction(org.openjdk.source.doctree.DocTree,java.lang.Object) -> defaultAction
    java.lang.Object visit(org.openjdk.source.doctree.DocTree,java.lang.Object) -> visit
    java.lang.Object visit(java.lang.Iterable,java.lang.Object) -> visit
    java.lang.Object visitAttribute(org.openjdk.source.doctree.AttributeTree,java.lang.Object) -> visitAttribute
    java.lang.Object visitAuthor(org.openjdk.source.doctree.AuthorTree,java.lang.Object) -> visitAuthor
    java.lang.Object visitComment(org.openjdk.source.doctree.CommentTree,java.lang.Object) -> visitComment
    java.lang.Object visitDeprecated(org.openjdk.source.doctree.DeprecatedTree,java.lang.Object) -> visitDeprecated
    java.lang.Object visitDocComment(org.openjdk.source.doctree.DocCommentTree,java.lang.Object) -> visitDocComment
    java.lang.Object visitDocRoot(org.openjdk.source.doctree.DocRootTree,java.lang.Object) -> visitDocRoot
    java.lang.Object visitEndElement(org.openjdk.source.doctree.EndElementTree,java.lang.Object) -> visitEndElement
    java.lang.Object visitEntity(org.openjdk.source.doctree.EntityTree,java.lang.Object) -> visitEntity
    java.lang.Object visitErroneous(org.openjdk.source.doctree.ErroneousTree,java.lang.Object) -> visitErroneous
    java.lang.Object visitHidden(org.openjdk.source.doctree.HiddenTree,java.lang.Object) -> visitHidden
    java.lang.Object visitIdentifier(org.openjdk.source.doctree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitIndex(org.openjdk.source.doctree.IndexTree,java.lang.Object) -> visitIndex
    java.lang.Object visitInheritDoc(org.openjdk.source.doctree.InheritDocTree,java.lang.Object) -> visitInheritDoc
    java.lang.Object visitLink(org.openjdk.source.doctree.LinkTree,java.lang.Object) -> visitLink
    java.lang.Object visitLiteral(org.openjdk.source.doctree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitParam(org.openjdk.source.doctree.ParamTree,java.lang.Object) -> visitParam
    java.lang.Object visitProvides(org.openjdk.source.doctree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitReference(org.openjdk.source.doctree.ReferenceTree,java.lang.Object) -> visitReference
    java.lang.Object visitReturn(org.openjdk.source.doctree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitSee(org.openjdk.source.doctree.SeeTree,java.lang.Object) -> visitSee
    java.lang.Object visitSerial(org.openjdk.source.doctree.SerialTree,java.lang.Object) -> visitSerial
    java.lang.Object visitSerialData(org.openjdk.source.doctree.SerialDataTree,java.lang.Object) -> visitSerialData
    java.lang.Object visitSerialField(org.openjdk.source.doctree.SerialFieldTree,java.lang.Object) -> visitSerialField
    java.lang.Object visitSince(org.openjdk.source.doctree.SinceTree,java.lang.Object) -> visitSince
    java.lang.Object visitStartElement(org.openjdk.source.doctree.StartElementTree,java.lang.Object) -> visitStartElement
    java.lang.Object visitText(org.openjdk.source.doctree.TextTree,java.lang.Object) -> visitText
    java.lang.Object visitThrows(org.openjdk.source.doctree.ThrowsTree,java.lang.Object) -> visitThrows
    java.lang.Object visitUnknownBlockTag(org.openjdk.source.doctree.UnknownBlockTagTree,java.lang.Object) -> visitUnknownBlockTag
    java.lang.Object visitUnknownInlineTag(org.openjdk.source.doctree.UnknownInlineTagTree,java.lang.Object) -> visitUnknownInlineTag
    java.lang.Object visitUses(org.openjdk.source.doctree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitValue(org.openjdk.source.doctree.ValueTree,java.lang.Object) -> visitValue
    java.lang.Object visitVersion(org.openjdk.source.doctree.VersionTree,java.lang.Object) -> visitVersion
    java.lang.Object visitOther(org.openjdk.source.doctree.DocTree,java.lang.Object) -> visitOther
org.openjdk.source.util.SimpleTreeVisitor -> org.openjdk.source.util.SimpleTreeVisitor:
    java.lang.Object DEFAULT_VALUE -> DEFAULT_VALUE
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object defaultAction(org.openjdk.source.tree.Tree,java.lang.Object) -> defaultAction
    java.lang.Object visit(org.openjdk.source.tree.Tree,java.lang.Object) -> visit
    java.lang.Object visit(java.lang.Iterable,java.lang.Object) -> visit
    java.lang.Object visitCompilationUnit(org.openjdk.source.tree.CompilationUnitTree,java.lang.Object) -> visitCompilationUnit
    java.lang.Object visitPackage(org.openjdk.source.tree.PackageTree,java.lang.Object) -> visitPackage
    java.lang.Object visitImport(org.openjdk.source.tree.ImportTree,java.lang.Object) -> visitImport
    java.lang.Object visitClass(org.openjdk.source.tree.ClassTree,java.lang.Object) -> visitClass
    java.lang.Object visitMethod(org.openjdk.source.tree.MethodTree,java.lang.Object) -> visitMethod
    java.lang.Object visitVariable(org.openjdk.source.tree.VariableTree,java.lang.Object) -> visitVariable
    java.lang.Object visitEmptyStatement(org.openjdk.source.tree.EmptyStatementTree,java.lang.Object) -> visitEmptyStatement
    java.lang.Object visitBlock(org.openjdk.source.tree.BlockTree,java.lang.Object) -> visitBlock
    java.lang.Object visitDoWhileLoop(org.openjdk.source.tree.DoWhileLoopTree,java.lang.Object) -> visitDoWhileLoop
    java.lang.Object visitWhileLoop(org.openjdk.source.tree.WhileLoopTree,java.lang.Object) -> visitWhileLoop
    java.lang.Object visitForLoop(org.openjdk.source.tree.ForLoopTree,java.lang.Object) -> visitForLoop
    java.lang.Object visitEnhancedForLoop(org.openjdk.source.tree.EnhancedForLoopTree,java.lang.Object) -> visitEnhancedForLoop
    java.lang.Object visitLabeledStatement(org.openjdk.source.tree.LabeledStatementTree,java.lang.Object) -> visitLabeledStatement
    java.lang.Object visitSwitch(org.openjdk.source.tree.SwitchTree,java.lang.Object) -> visitSwitch
    java.lang.Object visitCase(org.openjdk.source.tree.CaseTree,java.lang.Object) -> visitCase
    java.lang.Object visitSynchronized(org.openjdk.source.tree.SynchronizedTree,java.lang.Object) -> visitSynchronized
    java.lang.Object visitTry(org.openjdk.source.tree.TryTree,java.lang.Object) -> visitTry
    java.lang.Object visitCatch(org.openjdk.source.tree.CatchTree,java.lang.Object) -> visitCatch
    java.lang.Object visitConditionalExpression(org.openjdk.source.tree.ConditionalExpressionTree,java.lang.Object) -> visitConditionalExpression
    java.lang.Object visitIf(org.openjdk.source.tree.IfTree,java.lang.Object) -> visitIf
    java.lang.Object visitExpressionStatement(org.openjdk.source.tree.ExpressionStatementTree,java.lang.Object) -> visitExpressionStatement
    java.lang.Object visitBreak(org.openjdk.source.tree.BreakTree,java.lang.Object) -> visitBreak
    java.lang.Object visitContinue(org.openjdk.source.tree.ContinueTree,java.lang.Object) -> visitContinue
    java.lang.Object visitReturn(org.openjdk.source.tree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitThrow(org.openjdk.source.tree.ThrowTree,java.lang.Object) -> visitThrow
    java.lang.Object visitAssert(org.openjdk.source.tree.AssertTree,java.lang.Object) -> visitAssert
    java.lang.Object visitMethodInvocation(org.openjdk.source.tree.MethodInvocationTree,java.lang.Object) -> visitMethodInvocation
    java.lang.Object visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Object) -> visitNewClass
    java.lang.Object visitNewArray(org.openjdk.source.tree.NewArrayTree,java.lang.Object) -> visitNewArray
    java.lang.Object visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Object) -> visitLambdaExpression
    java.lang.Object visitParenthesized(org.openjdk.source.tree.ParenthesizedTree,java.lang.Object) -> visitParenthesized
    java.lang.Object visitAssignment(org.openjdk.source.tree.AssignmentTree,java.lang.Object) -> visitAssignment
    java.lang.Object visitCompoundAssignment(org.openjdk.source.tree.CompoundAssignmentTree,java.lang.Object) -> visitCompoundAssignment
    java.lang.Object visitUnary(org.openjdk.source.tree.UnaryTree,java.lang.Object) -> visitUnary
    java.lang.Object visitBinary(org.openjdk.source.tree.BinaryTree,java.lang.Object) -> visitBinary
    java.lang.Object visitTypeCast(org.openjdk.source.tree.TypeCastTree,java.lang.Object) -> visitTypeCast
    java.lang.Object visitInstanceOf(org.openjdk.source.tree.InstanceOfTree,java.lang.Object) -> visitInstanceOf
    java.lang.Object visitArrayAccess(org.openjdk.source.tree.ArrayAccessTree,java.lang.Object) -> visitArrayAccess
    java.lang.Object visitMemberSelect(org.openjdk.source.tree.MemberSelectTree,java.lang.Object) -> visitMemberSelect
    java.lang.Object visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Object) -> visitMemberReference
    java.lang.Object visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitLiteral(org.openjdk.source.tree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitPrimitiveType(org.openjdk.source.tree.PrimitiveTypeTree,java.lang.Object) -> visitPrimitiveType
    java.lang.Object visitArrayType(org.openjdk.source.tree.ArrayTypeTree,java.lang.Object) -> visitArrayType
    java.lang.Object visitParameterizedType(org.openjdk.source.tree.ParameterizedTypeTree,java.lang.Object) -> visitParameterizedType
    java.lang.Object visitUnionType(org.openjdk.source.tree.UnionTypeTree,java.lang.Object) -> visitUnionType
    java.lang.Object visitIntersectionType(org.openjdk.source.tree.IntersectionTypeTree,java.lang.Object) -> visitIntersectionType
    java.lang.Object visitTypeParameter(org.openjdk.source.tree.TypeParameterTree,java.lang.Object) -> visitTypeParameter
    java.lang.Object visitWildcard(org.openjdk.source.tree.WildcardTree,java.lang.Object) -> visitWildcard
    java.lang.Object visitModifiers(org.openjdk.source.tree.ModifiersTree,java.lang.Object) -> visitModifiers
    java.lang.Object visitAnnotation(org.openjdk.source.tree.AnnotationTree,java.lang.Object) -> visitAnnotation
    java.lang.Object visitAnnotatedType(org.openjdk.source.tree.AnnotatedTypeTree,java.lang.Object) -> visitAnnotatedType
    java.lang.Object visitModule(org.openjdk.source.tree.ModuleTree,java.lang.Object) -> visitModule
    java.lang.Object visitExports(org.openjdk.source.tree.ExportsTree,java.lang.Object) -> visitExports
    java.lang.Object visitOpens(org.openjdk.source.tree.OpensTree,java.lang.Object) -> visitOpens
    java.lang.Object visitProvides(org.openjdk.source.tree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitRequires(org.openjdk.source.tree.RequiresTree,java.lang.Object) -> visitRequires
    java.lang.Object visitUses(org.openjdk.source.tree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitErroneous(org.openjdk.source.tree.ErroneousTree,java.lang.Object) -> visitErroneous
    java.lang.Object visitOther(org.openjdk.source.tree.Tree,java.lang.Object) -> visitOther
org.openjdk.source.util.SourcePositions -> org.openjdk.source.util.SourcePositions:
    long getStartPosition(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.tree.Tree) -> getStartPosition
    long getEndPosition(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.tree.Tree) -> getEndPosition
org.openjdk.source.util.TaskEvent -> org.openjdk.source.util.TaskEvent:
    org.openjdk.source.util.TaskEvent$Kind kind -> kind
    org.openjdk.javax.tools.JavaFileObject file -> file
    org.openjdk.source.tree.CompilationUnitTree unit -> unit
    org.openjdk.javax.lang.model.element.TypeElement clazz -> clazz
    void <init>(org.openjdk.source.util.TaskEvent$Kind) -> <init>
    void <init>(org.openjdk.source.util.TaskEvent$Kind,org.openjdk.javax.tools.JavaFileObject) -> <init>
    void <init>(org.openjdk.source.util.TaskEvent$Kind,org.openjdk.source.tree.CompilationUnitTree) -> <init>
    void <init>(org.openjdk.source.util.TaskEvent$Kind,org.openjdk.source.tree.CompilationUnitTree,org.openjdk.javax.lang.model.element.TypeElement) -> <init>
    void <init>(org.openjdk.source.util.TaskEvent$Kind,org.openjdk.javax.tools.JavaFileObject,org.openjdk.source.tree.CompilationUnitTree,org.openjdk.javax.lang.model.element.TypeElement) -> <init>
    org.openjdk.source.util.TaskEvent$Kind getKind() -> getKind
    org.openjdk.javax.tools.JavaFileObject getSourceFile() -> getSourceFile
    org.openjdk.source.tree.CompilationUnitTree getCompilationUnit() -> getCompilationUnit
    org.openjdk.javax.lang.model.element.TypeElement getTypeElement() -> getTypeElement
    java.lang.String toString() -> toString
org.openjdk.source.util.TaskEvent$Kind -> org.openjdk.source.util.TaskEvent$Kind:
    org.openjdk.source.util.TaskEvent$Kind PARSE -> PARSE
    org.openjdk.source.util.TaskEvent$Kind ENTER -> ENTER
    org.openjdk.source.util.TaskEvent$Kind ANALYZE -> ANALYZE
    org.openjdk.source.util.TaskEvent$Kind GENERATE -> GENERATE
    org.openjdk.source.util.TaskEvent$Kind ANNOTATION_PROCESSING -> ANNOTATION_PROCESSING
    org.openjdk.source.util.TaskEvent$Kind ANNOTATION_PROCESSING_ROUND -> ANNOTATION_PROCESSING_ROUND
    org.openjdk.source.util.TaskEvent$Kind COMPILATION -> COMPILATION
    org.openjdk.source.util.TaskEvent$Kind[] $VALUES -> $VALUES
    org.openjdk.source.util.TaskEvent$Kind[] values() -> values
    org.openjdk.source.util.TaskEvent$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.source.util.TaskListener -> org.openjdk.source.util.TaskListener:
    void started(org.openjdk.source.util.TaskEvent) -> started
    void finished(org.openjdk.source.util.TaskEvent) -> finished
org.openjdk.source.util.TreePath -> org.openjdk.source.util.TreePath:
    org.openjdk.source.tree.CompilationUnitTree compilationUnit -> compilationUnit
    org.openjdk.source.tree.Tree leaf -> leaf
    org.openjdk.source.util.TreePath parent -> parent
    org.openjdk.source.util.TreePath getPath(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.tree.Tree) -> getPath
    org.openjdk.source.util.TreePath getPath(org.openjdk.source.util.TreePath,org.openjdk.source.tree.Tree) -> getPath
    void <init>(org.openjdk.source.tree.CompilationUnitTree) -> <init>
    void <init>(org.openjdk.source.util.TreePath,org.openjdk.source.tree.Tree) -> <init>
    org.openjdk.source.tree.CompilationUnitTree getCompilationUnit() -> getCompilationUnit
    org.openjdk.source.tree.Tree getLeaf() -> getLeaf
    org.openjdk.source.util.TreePath getParentPath() -> getParentPath
    java.util.Iterator iterator() -> iterator
    org.openjdk.source.tree.Tree access$000(org.openjdk.source.util.TreePath) -> access$000
    org.openjdk.source.util.TreePath access$100(org.openjdk.source.util.TreePath) -> access$100
org.openjdk.source.util.TreePath$1 -> org.openjdk.source.util.TreePath$1:
    org.openjdk.source.util.TreePath next -> next
    org.openjdk.source.util.TreePath this$0 -> this$0
    void <init>(org.openjdk.source.util.TreePath) -> <init>
    boolean hasNext() -> hasNext
    org.openjdk.source.tree.Tree next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.openjdk.source.util.TreePath$1PathFinder -> org.openjdk.source.util.TreePath$1PathFinder:
    void <init>() -> <init>
    org.openjdk.source.util.TreePath scan(org.openjdk.source.tree.Tree,org.openjdk.source.tree.Tree) -> scan
    java.lang.Object scan(org.openjdk.source.tree.Tree,java.lang.Object) -> scan
org.openjdk.source.util.TreePath$1Result -> org.openjdk.source.util.TreePath$1Result:
    long serialVersionUID -> serialVersionUID
    org.openjdk.source.util.TreePath path -> path
    void <init>(org.openjdk.source.util.TreePath) -> <init>
org.openjdk.source.util.TreePathScanner -> org.openjdk.source.util.TreePathScanner:
    org.openjdk.source.util.TreePath path -> path
    void <init>() -> <init>
    java.lang.Object scan(org.openjdk.source.util.TreePath,java.lang.Object) -> scan
    java.lang.Object scan(org.openjdk.source.tree.Tree,java.lang.Object) -> scan
    org.openjdk.source.util.TreePath getCurrentPath() -> getCurrentPath
org.openjdk.source.util.TreeScanner -> org.openjdk.source.util.TreeScanner:
    void <init>() -> <init>
    java.lang.Object scan(org.openjdk.source.tree.Tree,java.lang.Object) -> scan
    java.lang.Object scanAndReduce(org.openjdk.source.tree.Tree,java.lang.Object,java.lang.Object) -> scanAndReduce
    java.lang.Object scan(java.lang.Iterable,java.lang.Object) -> scan
    java.lang.Object scanAndReduce(java.lang.Iterable,java.lang.Object,java.lang.Object) -> scanAndReduce
    java.lang.Object reduce(java.lang.Object,java.lang.Object) -> reduce
    java.lang.Object visitCompilationUnit(org.openjdk.source.tree.CompilationUnitTree,java.lang.Object) -> visitCompilationUnit
    java.lang.Object visitPackage(org.openjdk.source.tree.PackageTree,java.lang.Object) -> visitPackage
    java.lang.Object visitImport(org.openjdk.source.tree.ImportTree,java.lang.Object) -> visitImport
    java.lang.Object visitClass(org.openjdk.source.tree.ClassTree,java.lang.Object) -> visitClass
    java.lang.Object visitMethod(org.openjdk.source.tree.MethodTree,java.lang.Object) -> visitMethod
    java.lang.Object visitVariable(org.openjdk.source.tree.VariableTree,java.lang.Object) -> visitVariable
    java.lang.Object visitEmptyStatement(org.openjdk.source.tree.EmptyStatementTree,java.lang.Object) -> visitEmptyStatement
    java.lang.Object visitBlock(org.openjdk.source.tree.BlockTree,java.lang.Object) -> visitBlock
    java.lang.Object visitDoWhileLoop(org.openjdk.source.tree.DoWhileLoopTree,java.lang.Object) -> visitDoWhileLoop
    java.lang.Object visitWhileLoop(org.openjdk.source.tree.WhileLoopTree,java.lang.Object) -> visitWhileLoop
    java.lang.Object visitForLoop(org.openjdk.source.tree.ForLoopTree,java.lang.Object) -> visitForLoop
    java.lang.Object visitEnhancedForLoop(org.openjdk.source.tree.EnhancedForLoopTree,java.lang.Object) -> visitEnhancedForLoop
    java.lang.Object visitLabeledStatement(org.openjdk.source.tree.LabeledStatementTree,java.lang.Object) -> visitLabeledStatement
    java.lang.Object visitSwitch(org.openjdk.source.tree.SwitchTree,java.lang.Object) -> visitSwitch
    java.lang.Object visitCase(org.openjdk.source.tree.CaseTree,java.lang.Object) -> visitCase
    java.lang.Object visitSynchronized(org.openjdk.source.tree.SynchronizedTree,java.lang.Object) -> visitSynchronized
    java.lang.Object visitTry(org.openjdk.source.tree.TryTree,java.lang.Object) -> visitTry
    java.lang.Object visitCatch(org.openjdk.source.tree.CatchTree,java.lang.Object) -> visitCatch
    java.lang.Object visitConditionalExpression(org.openjdk.source.tree.ConditionalExpressionTree,java.lang.Object) -> visitConditionalExpression
    java.lang.Object visitIf(org.openjdk.source.tree.IfTree,java.lang.Object) -> visitIf
    java.lang.Object visitExpressionStatement(org.openjdk.source.tree.ExpressionStatementTree,java.lang.Object) -> visitExpressionStatement
    java.lang.Object visitBreak(org.openjdk.source.tree.BreakTree,java.lang.Object) -> visitBreak
    java.lang.Object visitContinue(org.openjdk.source.tree.ContinueTree,java.lang.Object) -> visitContinue
    java.lang.Object visitReturn(org.openjdk.source.tree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitThrow(org.openjdk.source.tree.ThrowTree,java.lang.Object) -> visitThrow
    java.lang.Object visitAssert(org.openjdk.source.tree.AssertTree,java.lang.Object) -> visitAssert
    java.lang.Object visitMethodInvocation(org.openjdk.source.tree.MethodInvocationTree,java.lang.Object) -> visitMethodInvocation
    java.lang.Object visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Object) -> visitNewClass
    java.lang.Object visitNewArray(org.openjdk.source.tree.NewArrayTree,java.lang.Object) -> visitNewArray
    java.lang.Object visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Object) -> visitLambdaExpression
    java.lang.Object visitParenthesized(org.openjdk.source.tree.ParenthesizedTree,java.lang.Object) -> visitParenthesized
    java.lang.Object visitAssignment(org.openjdk.source.tree.AssignmentTree,java.lang.Object) -> visitAssignment
    java.lang.Object visitCompoundAssignment(org.openjdk.source.tree.CompoundAssignmentTree,java.lang.Object) -> visitCompoundAssignment
    java.lang.Object visitUnary(org.openjdk.source.tree.UnaryTree,java.lang.Object) -> visitUnary
    java.lang.Object visitBinary(org.openjdk.source.tree.BinaryTree,java.lang.Object) -> visitBinary
    java.lang.Object visitTypeCast(org.openjdk.source.tree.TypeCastTree,java.lang.Object) -> visitTypeCast
    java.lang.Object visitInstanceOf(org.openjdk.source.tree.InstanceOfTree,java.lang.Object) -> visitInstanceOf
    java.lang.Object visitArrayAccess(org.openjdk.source.tree.ArrayAccessTree,java.lang.Object) -> visitArrayAccess
    java.lang.Object visitMemberSelect(org.openjdk.source.tree.MemberSelectTree,java.lang.Object) -> visitMemberSelect
    java.lang.Object visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Object) -> visitMemberReference
    java.lang.Object visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitLiteral(org.openjdk.source.tree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitPrimitiveType(org.openjdk.source.tree.PrimitiveTypeTree,java.lang.Object) -> visitPrimitiveType
    java.lang.Object visitArrayType(org.openjdk.source.tree.ArrayTypeTree,java.lang.Object) -> visitArrayType
    java.lang.Object visitParameterizedType(org.openjdk.source.tree.ParameterizedTypeTree,java.lang.Object) -> visitParameterizedType
    java.lang.Object visitUnionType(org.openjdk.source.tree.UnionTypeTree,java.lang.Object) -> visitUnionType
    java.lang.Object visitIntersectionType(org.openjdk.source.tree.IntersectionTypeTree,java.lang.Object) -> visitIntersectionType
    java.lang.Object visitTypeParameter(org.openjdk.source.tree.TypeParameterTree,java.lang.Object) -> visitTypeParameter
    java.lang.Object visitWildcard(org.openjdk.source.tree.WildcardTree,java.lang.Object) -> visitWildcard
    java.lang.Object visitModifiers(org.openjdk.source.tree.ModifiersTree,java.lang.Object) -> visitModifiers
    java.lang.Object visitAnnotation(org.openjdk.source.tree.AnnotationTree,java.lang.Object) -> visitAnnotation
    java.lang.Object visitAnnotatedType(org.openjdk.source.tree.AnnotatedTypeTree,java.lang.Object) -> visitAnnotatedType
    java.lang.Object visitModule(org.openjdk.source.tree.ModuleTree,java.lang.Object) -> visitModule
    java.lang.Object visitExports(org.openjdk.source.tree.ExportsTree,java.lang.Object) -> visitExports
    java.lang.Object visitOpens(org.openjdk.source.tree.OpensTree,java.lang.Object) -> visitOpens
    java.lang.Object visitProvides(org.openjdk.source.tree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitRequires(org.openjdk.source.tree.RequiresTree,java.lang.Object) -> visitRequires
    java.lang.Object visitUses(org.openjdk.source.tree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitOther(org.openjdk.source.tree.Tree,java.lang.Object) -> visitOther
    java.lang.Object visitErroneous(org.openjdk.source.tree.ErroneousTree,java.lang.Object) -> visitErroneous
org.openjdk.source.util.Trees -> org.openjdk.source.util.Trees:
    void <init>() -> <init>
    org.openjdk.source.util.Trees instance(org.openjdk.javax.tools.JavaCompiler$CompilationTask) -> instance
    org.openjdk.source.util.Trees instance(org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> instance
    org.openjdk.source.util.Trees getJavacTrees(java.lang.Class,java.lang.Object) -> getJavacTrees
    org.openjdk.source.util.SourcePositions getSourcePositions() -> getSourcePositions
    org.openjdk.source.tree.Tree getTree(org.openjdk.javax.lang.model.element.Element) -> getTree
    org.openjdk.source.tree.ClassTree getTree(org.openjdk.javax.lang.model.element.TypeElement) -> getTree
    org.openjdk.source.tree.MethodTree getTree(org.openjdk.javax.lang.model.element.ExecutableElement) -> getTree
    org.openjdk.source.tree.Tree getTree(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror) -> getTree
    org.openjdk.source.tree.Tree getTree(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.AnnotationValue) -> getTree
    org.openjdk.source.util.TreePath getPath(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.tree.Tree) -> getPath
    org.openjdk.source.util.TreePath getPath(org.openjdk.javax.lang.model.element.Element) -> getPath
    org.openjdk.source.util.TreePath getPath(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror) -> getPath
    org.openjdk.source.util.TreePath getPath(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.AnnotationValue) -> getPath
    org.openjdk.javax.lang.model.element.Element getElement(org.openjdk.source.util.TreePath) -> getElement
    org.openjdk.javax.lang.model.type.TypeMirror getTypeMirror(org.openjdk.source.util.TreePath) -> getTypeMirror
    org.openjdk.source.tree.Scope getScope(org.openjdk.source.util.TreePath) -> getScope
    java.lang.String getDocComment(org.openjdk.source.util.TreePath) -> getDocComment
    boolean isAccessible(org.openjdk.source.tree.Scope,org.openjdk.javax.lang.model.element.TypeElement) -> isAccessible
    boolean isAccessible(org.openjdk.source.tree.Scope,org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.type.DeclaredType) -> isAccessible
    org.openjdk.javax.lang.model.type.TypeMirror getOriginalType(org.openjdk.javax.lang.model.type.ErrorType) -> getOriginalType
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.source.tree.Tree,org.openjdk.source.tree.CompilationUnitTree) -> printMessage
    org.openjdk.javax.lang.model.type.TypeMirror getLub(org.openjdk.source.tree.CatchTree) -> getLub
org.openjdk.tools.doclint.Checker -> org.openjdk.tools.doclint.Checker:
    org.openjdk.tools.doclint.Env env -> env
    java.util.Set foundParams -> foundParams
    java.util.Set foundThrows -> foundThrows
    java.util.Map foundAnchors -> foundAnchors
    boolean foundInheritDoc -> foundInheritDoc
    boolean foundReturn -> foundReturn
    java.util.Deque tagStack -> tagStack
    org.openjdk.tools.doclint.HtmlTag currHeaderTag -> currHeaderTag
    int implicitHeaderLevel -> implicitHeaderLevel
    java.util.regex.Pattern validName -> validName
    java.util.regex.Pattern validNumber -> validNumber
    java.util.regex.Pattern docRoot -> docRoot
    void <init>(org.openjdk.tools.doclint.Env) -> <init>
    java.lang.Void scan(org.openjdk.source.doctree.DocCommentTree,org.openjdk.source.util.TreePath) -> scan
    void reportMissing(java.lang.String,java.lang.Object[]) -> reportMissing
    void reportReference(java.lang.String,java.lang.Object[]) -> reportReference
    java.lang.Void visitDocComment(org.openjdk.source.doctree.DocCommentTree,java.lang.Void) -> visitDocComment
    java.lang.Void visitText(org.openjdk.source.doctree.TextTree,java.lang.Void) -> visitText
    java.lang.Void visitEntity(org.openjdk.source.doctree.EntityTree,java.lang.Void) -> visitEntity
    void checkAllowsText(org.openjdk.source.doctree.DocTree) -> checkAllowsText
    java.lang.Void visitStartElement(org.openjdk.source.doctree.StartElementTree,java.lang.Void) -> visitStartElement
    void checkStructure(org.openjdk.source.doctree.StartElementTree,org.openjdk.tools.doclint.HtmlTag) -> checkStructure
    void checkHeader(org.openjdk.source.doctree.StartElementTree,org.openjdk.tools.doclint.HtmlTag) -> checkHeader
    int getHeaderLevel(org.openjdk.tools.doclint.HtmlTag) -> getHeaderLevel
    java.lang.Void visitEndElement(org.openjdk.source.doctree.EndElementTree,java.lang.Void) -> visitEndElement
    void warnIfEmpty(org.openjdk.tools.doclint.Checker$TagStackItem,org.openjdk.source.doctree.DocTree) -> warnIfEmpty
    java.lang.Void visitAttribute(org.openjdk.source.doctree.AttributeTree,java.lang.Void) -> visitAttribute
    void validateHtml4Attrs(org.openjdk.source.doctree.AttributeTree,org.openjdk.javax.lang.model.element.Name,org.openjdk.tools.doclint.HtmlTag$AttrKind) -> validateHtml4Attrs
    void validateHtml5Attrs(org.openjdk.source.doctree.AttributeTree,org.openjdk.javax.lang.model.element.Name,org.openjdk.tools.doclint.HtmlTag$AttrKind) -> validateHtml5Attrs
    boolean checkAnchor(java.lang.String) -> checkAnchor
    org.openjdk.javax.lang.model.element.Element getEnclosingPackageOrClass(org.openjdk.javax.lang.model.element.Element) -> getEnclosingPackageOrClass
    java.lang.String getAttrValue(org.openjdk.source.doctree.AttributeTree) -> getAttrValue
    void checkURI(org.openjdk.source.doctree.AttributeTree,java.lang.String) -> checkURI
    java.lang.Void visitAuthor(org.openjdk.source.doctree.AuthorTree,java.lang.Void) -> visitAuthor
    java.lang.Void visitDocRoot(org.openjdk.source.doctree.DocRootTree,java.lang.Void) -> visitDocRoot
    java.lang.Void visitInheritDoc(org.openjdk.source.doctree.InheritDocTree,java.lang.Void) -> visitInheritDoc
    java.lang.Void visitLink(org.openjdk.source.doctree.LinkTree,java.lang.Void) -> visitLink
    java.lang.Void visitLiteral(org.openjdk.source.doctree.LiteralTree,java.lang.Void) -> visitLiteral
    java.lang.Void visitParam(org.openjdk.source.doctree.ParamTree,java.lang.Void) -> visitParam
    void checkParamsDocumented(java.util.List) -> checkParamsDocumented
    java.lang.Void visitProvides(org.openjdk.source.doctree.ProvidesTree,java.lang.Void) -> visitProvides
    java.lang.Void visitReference(org.openjdk.source.doctree.ReferenceTree,java.lang.Void) -> visitReference
    java.lang.Void visitReturn(org.openjdk.source.doctree.ReturnTree,java.lang.Void) -> visitReturn
    java.lang.Void visitSerialData(org.openjdk.source.doctree.SerialDataTree,java.lang.Void) -> visitSerialData
    java.lang.Void visitSerialField(org.openjdk.source.doctree.SerialFieldTree,java.lang.Void) -> visitSerialField
    java.lang.Void visitSince(org.openjdk.source.doctree.SinceTree,java.lang.Void) -> visitSince
    java.lang.Void visitThrows(org.openjdk.source.doctree.ThrowsTree,java.lang.Void) -> visitThrows
    boolean isThrowable(org.openjdk.javax.lang.model.type.TypeMirror) -> isThrowable
    void checkThrowsDeclared(org.openjdk.source.doctree.ReferenceTree,org.openjdk.javax.lang.model.type.TypeMirror,java.util.List) -> checkThrowsDeclared
    void checkThrowsDocumented(java.util.List) -> checkThrowsDocumented
    java.lang.Void visitUnknownBlockTag(org.openjdk.source.doctree.UnknownBlockTagTree,java.lang.Void) -> visitUnknownBlockTag
    java.lang.Void visitUnknownInlineTag(org.openjdk.source.doctree.UnknownInlineTagTree,java.lang.Void) -> visitUnknownInlineTag
    void checkUnknownTag(org.openjdk.source.doctree.DocTree,java.lang.String) -> checkUnknownTag
    java.lang.Void visitUses(org.openjdk.source.doctree.UsesTree,java.lang.Void) -> visitUses
    java.lang.Void visitValue(org.openjdk.source.doctree.ValueTree,java.lang.Void) -> visitValue
    boolean isConstant(org.openjdk.javax.lang.model.element.Element) -> isConstant
    java.lang.Void visitVersion(org.openjdk.source.doctree.VersionTree,java.lang.Void) -> visitVersion
    java.lang.Void visitErroneous(org.openjdk.source.doctree.ErroneousTree,java.lang.Void) -> visitErroneous
    boolean isCheckedException(org.openjdk.javax.lang.model.type.TypeMirror) -> isCheckedException
    boolean isSynthetic() -> isSynthetic
    void markEnclosingTag(org.openjdk.tools.doclint.Checker$Flag) -> markEnclosingTag
    java.lang.String toString(org.openjdk.source.util.TreePath) -> toString
    void toString(org.openjdk.source.util.TreePath,java.lang.StringBuilder) -> toString
    void warnIfEmpty(org.openjdk.source.doctree.DocTree,java.util.List) -> warnIfEmpty
    boolean hasNonWhitespace(org.openjdk.source.doctree.TextTree) -> hasNonWhitespace
    java.lang.Object visitVersion(org.openjdk.source.doctree.VersionTree,java.lang.Object) -> visitVersion
    java.lang.Object visitValue(org.openjdk.source.doctree.ValueTree,java.lang.Object) -> visitValue
    java.lang.Object visitUses(org.openjdk.source.doctree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitUnknownInlineTag(org.openjdk.source.doctree.UnknownInlineTagTree,java.lang.Object) -> visitUnknownInlineTag
    java.lang.Object visitUnknownBlockTag(org.openjdk.source.doctree.UnknownBlockTagTree,java.lang.Object) -> visitUnknownBlockTag
    java.lang.Object visitThrows(org.openjdk.source.doctree.ThrowsTree,java.lang.Object) -> visitThrows
    java.lang.Object visitText(org.openjdk.source.doctree.TextTree,java.lang.Object) -> visitText
    java.lang.Object visitStartElement(org.openjdk.source.doctree.StartElementTree,java.lang.Object) -> visitStartElement
    java.lang.Object visitSince(org.openjdk.source.doctree.SinceTree,java.lang.Object) -> visitSince
    java.lang.Object visitSerialField(org.openjdk.source.doctree.SerialFieldTree,java.lang.Object) -> visitSerialField
    java.lang.Object visitSerialData(org.openjdk.source.doctree.SerialDataTree,java.lang.Object) -> visitSerialData
    java.lang.Object visitReturn(org.openjdk.source.doctree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitReference(org.openjdk.source.doctree.ReferenceTree,java.lang.Object) -> visitReference
    java.lang.Object visitProvides(org.openjdk.source.doctree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitParam(org.openjdk.source.doctree.ParamTree,java.lang.Object) -> visitParam
    java.lang.Object visitLiteral(org.openjdk.source.doctree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitLink(org.openjdk.source.doctree.LinkTree,java.lang.Object) -> visitLink
    java.lang.Object visitInheritDoc(org.openjdk.source.doctree.InheritDocTree,java.lang.Object) -> visitInheritDoc
    java.lang.Object visitErroneous(org.openjdk.source.doctree.ErroneousTree,java.lang.Object) -> visitErroneous
    java.lang.Object visitEntity(org.openjdk.source.doctree.EntityTree,java.lang.Object) -> visitEntity
    java.lang.Object visitEndElement(org.openjdk.source.doctree.EndElementTree,java.lang.Object) -> visitEndElement
    java.lang.Object visitDocRoot(org.openjdk.source.doctree.DocRootTree,java.lang.Object) -> visitDocRoot
    java.lang.Object visitDocComment(org.openjdk.source.doctree.DocCommentTree,java.lang.Object) -> visitDocComment
    java.lang.Object visitAuthor(org.openjdk.source.doctree.AuthorTree,java.lang.Object) -> visitAuthor
    java.lang.Object visitAttribute(org.openjdk.source.doctree.AttributeTree,java.lang.Object) -> visitAttribute
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.Checker$1 -> org.openjdk.tools.doclint.Checker$1:
    int[] $SwitchMap$javax$lang$model$type$TypeKind -> $SwitchMap$javax$lang$model$type$TypeKind
    int[] $SwitchMap$javax$lang$model$element$ElementKind -> $SwitchMap$javax$lang$model$element$ElementKind
    int[] $SwitchMap$com$sun$tools$doclint$HtmlTag -> $SwitchMap$com$sun$tools$doclint$HtmlTag
    int[] $SwitchMap$com$sun$source$doctree$DocTree$Kind -> $SwitchMap$com$sun$source$doctree$DocTree$Kind
    int[] $SwitchMap$com$sun$tools$doclint$HtmlTag$BlockType -> $SwitchMap$com$sun$tools$doclint$HtmlTag$BlockType
    int[] $SwitchMap$com$sun$tools$doclint$HtmlVersion -> $SwitchMap$com$sun$tools$doclint$HtmlVersion
    int[] $SwitchMap$com$sun$tools$doclint$HtmlTag$Attr -> $SwitchMap$com$sun$tools$doclint$HtmlTag$Attr
    int[] $SwitchMap$com$sun$tools$doclint$HtmlTag$AttrKind -> $SwitchMap$com$sun$tools$doclint$HtmlTag$AttrKind
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.Checker$Flag -> org.openjdk.tools.doclint.Checker$Flag:
    org.openjdk.tools.doclint.Checker$Flag TABLE_HAS_CAPTION -> TABLE_HAS_CAPTION
    org.openjdk.tools.doclint.Checker$Flag HAS_ELEMENT -> HAS_ELEMENT
    org.openjdk.tools.doclint.Checker$Flag HAS_HEADING -> HAS_HEADING
    org.openjdk.tools.doclint.Checker$Flag HAS_INLINE_TAG -> HAS_INLINE_TAG
    org.openjdk.tools.doclint.Checker$Flag HAS_TEXT -> HAS_TEXT
    org.openjdk.tools.doclint.Checker$Flag REPORTED_BAD_INLINE -> REPORTED_BAD_INLINE
    org.openjdk.tools.doclint.Checker$Flag[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.Checker$Flag[] values() -> values
    org.openjdk.tools.doclint.Checker$Flag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.Checker$TagStackItem -> org.openjdk.tools.doclint.Checker$TagStackItem:
    org.openjdk.source.doctree.DocTree tree -> tree
    org.openjdk.tools.doclint.HtmlTag tag -> tag
    java.util.Set attrs -> attrs
    java.util.Set flags -> flags
    void <init>(org.openjdk.source.doctree.DocTree,org.openjdk.tools.doclint.HtmlTag) -> <init>
    java.lang.String toString() -> toString
org.openjdk.tools.doclint.DocLint -> org.openjdk.tools.doclint.DocLint:
    java.lang.String XMSGS_OPTION -> XMSGS_OPTION
    java.lang.String XMSGS_CUSTOM_PREFIX -> XMSGS_CUSTOM_PREFIX
    java.lang.String STATS -> STATS
    java.lang.String XIMPLICIT_HEADERS -> XIMPLICIT_HEADERS
    java.lang.String XCUSTOM_TAGS_PREFIX -> XCUSTOM_TAGS_PREFIX
    java.lang.String XHTML_VERSION_PREFIX -> XHTML_VERSION_PREFIX
    java.lang.String XCHECK_PACKAGE -> XCHECK_PACKAGE
    java.lang.String SEPARATOR -> SEPARATOR
    java.util.List javacBootClassPath -> javacBootClassPath
    java.util.List javacClassPath -> javacClassPath
    java.util.List javacSourcePath -> javacSourcePath
    java.util.List javacOpts -> javacOpts
    java.util.List javacFiles -> javacFiles
    boolean needHelp -> needHelp
    org.openjdk.tools.doclint.Env env -> env
    org.openjdk.tools.doclint.Checker checker -> checker
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void run(java.lang.String[]) -> run
    void run(java.io.PrintWriter,java.lang.String[]) -> run
    void processArgs(java.lang.String[]) -> processArgs
    void showHelp(java.io.PrintWriter) -> showHelp
    java.util.List splitPath(java.lang.String) -> splitPath
    java.lang.String getName() -> getName
    void init(org.openjdk.source.util.JavacTask,java.lang.String[]) -> init
    void init(org.openjdk.source.util.JavacTask,java.lang.String[],boolean) -> init
    void scan(org.openjdk.source.util.TreePath) -> scan
    boolean shouldCheck(org.openjdk.source.tree.CompilationUnitTree) -> shouldCheck
    void reportStats(java.io.PrintWriter) -> reportStats
    boolean isValidOption(java.lang.String) -> isValidOption
    java.lang.String localize(java.lang.String,java.lang.Object[]) -> localize
    java.lang.String access$000(org.openjdk.tools.doclint.DocLint,java.lang.String,java.lang.Object[]) -> access$000
org.openjdk.tools.doclint.DocLint$1 -> org.openjdk.tools.doclint.DocLint$1:
    org.openjdk.tools.doclint.DocLint this$0 -> this$0
    void <init>(org.openjdk.tools.doclint.DocLint,org.openjdk.tools.doclint.Env) -> <init>
    void visitDecl(org.openjdk.source.tree.Tree,org.openjdk.javax.lang.model.element.Name) -> visitDecl
org.openjdk.tools.doclint.DocLint$2 -> org.openjdk.tools.doclint.DocLint$2:
    org.openjdk.tools.doclint.DocLint this$0 -> this$0
    void <init>(org.openjdk.tools.doclint.DocLint,org.openjdk.tools.doclint.Env) -> <init>
    void visitDecl(org.openjdk.source.tree.Tree,org.openjdk.javax.lang.model.element.Name) -> visitDecl
org.openjdk.tools.doclint.DocLint$3 -> org.openjdk.tools.doclint.DocLint$3:
    java.util.Queue todo -> todo
    org.openjdk.tools.doclint.DocLint$DeclScanner val$ds -> val$ds
    org.openjdk.tools.doclint.DocLint this$0 -> this$0
    void <init>(org.openjdk.tools.doclint.DocLint,org.openjdk.tools.doclint.DocLint$DeclScanner) -> <init>
    void started(org.openjdk.source.util.TaskEvent) -> started
    void finished(org.openjdk.source.util.TaskEvent) -> finished
org.openjdk.tools.doclint.DocLint$4 -> org.openjdk.tools.doclint.DocLint$4:
    int[] $SwitchMap$com$sun$source$util$TaskEvent$Kind -> $SwitchMap$com$sun$source$util$TaskEvent$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.DocLint$BadArgs -> org.openjdk.tools.doclint.DocLint$BadArgs:
    long serialVersionUID -> serialVersionUID
    java.lang.String code -> code
    java.lang.Object[] args -> args
    org.openjdk.tools.doclint.DocLint this$0 -> this$0
    void <init>(org.openjdk.tools.doclint.DocLint,java.lang.String,java.lang.Object[]) -> <init>
org.openjdk.tools.doclint.DocLint$DeclScanner -> org.openjdk.tools.doclint.DocLint$DeclScanner:
    org.openjdk.tools.doclint.Env env -> env
    void <init>(org.openjdk.tools.doclint.Env) -> <init>
    void visitDecl(org.openjdk.source.tree.Tree,org.openjdk.javax.lang.model.element.Name) -> visitDecl
    java.lang.Void visitPackage(org.openjdk.source.tree.PackageTree,java.lang.Void) -> visitPackage
    java.lang.Void visitClass(org.openjdk.source.tree.ClassTree,java.lang.Void) -> visitClass
    java.lang.Void visitMethod(org.openjdk.source.tree.MethodTree,java.lang.Void) -> visitMethod
    java.lang.Void visitModule(org.openjdk.source.tree.ModuleTree,java.lang.Void) -> visitModule
    java.lang.Void visitVariable(org.openjdk.source.tree.VariableTree,java.lang.Void) -> visitVariable
    java.lang.Void visitCompilationUnit(org.openjdk.source.tree.CompilationUnitTree,java.lang.Void) -> visitCompilationUnit
    java.lang.Object visitModule(org.openjdk.source.tree.ModuleTree,java.lang.Object) -> visitModule
    java.lang.Object visitVariable(org.openjdk.source.tree.VariableTree,java.lang.Object) -> visitVariable
    java.lang.Object visitMethod(org.openjdk.source.tree.MethodTree,java.lang.Object) -> visitMethod
    java.lang.Object visitClass(org.openjdk.source.tree.ClassTree,java.lang.Object) -> visitClass
    java.lang.Object visitPackage(org.openjdk.source.tree.PackageTree,java.lang.Object) -> visitPackage
    java.lang.Object visitCompilationUnit(org.openjdk.source.tree.CompilationUnitTree,java.lang.Object) -> visitCompilationUnit
org.openjdk.tools.doclint.Entity -> org.openjdk.tools.doclint.Entity:
    org.openjdk.tools.doclint.Entity nbsp -> nbsp
    org.openjdk.tools.doclint.Entity iexcl -> iexcl
    org.openjdk.tools.doclint.Entity cent -> cent
    org.openjdk.tools.doclint.Entity pound -> pound
    org.openjdk.tools.doclint.Entity curren -> curren
    org.openjdk.tools.doclint.Entity yen -> yen
    org.openjdk.tools.doclint.Entity brvbar -> brvbar
    org.openjdk.tools.doclint.Entity sect -> sect
    org.openjdk.tools.doclint.Entity uml -> uml
    org.openjdk.tools.doclint.Entity copy -> copy
    org.openjdk.tools.doclint.Entity ordf -> ordf
    org.openjdk.tools.doclint.Entity laquo -> laquo
    org.openjdk.tools.doclint.Entity not -> not
    org.openjdk.tools.doclint.Entity shy -> shy
    org.openjdk.tools.doclint.Entity reg -> reg
    org.openjdk.tools.doclint.Entity macr -> macr
    org.openjdk.tools.doclint.Entity deg -> deg
    org.openjdk.tools.doclint.Entity plusmn -> plusmn
    org.openjdk.tools.doclint.Entity sup2 -> sup2
    org.openjdk.tools.doclint.Entity sup3 -> sup3
    org.openjdk.tools.doclint.Entity acute -> acute
    org.openjdk.tools.doclint.Entity micro -> micro
    org.openjdk.tools.doclint.Entity para -> para
    org.openjdk.tools.doclint.Entity middot -> middot
    org.openjdk.tools.doclint.Entity cedil -> cedil
    org.openjdk.tools.doclint.Entity sup1 -> sup1
    org.openjdk.tools.doclint.Entity ordm -> ordm
    org.openjdk.tools.doclint.Entity raquo -> raquo
    org.openjdk.tools.doclint.Entity frac14 -> frac14
    org.openjdk.tools.doclint.Entity frac12 -> frac12
    org.openjdk.tools.doclint.Entity frac34 -> frac34
    org.openjdk.tools.doclint.Entity iquest -> iquest
    org.openjdk.tools.doclint.Entity Agrave -> Agrave
    org.openjdk.tools.doclint.Entity Aacute -> Aacute
    org.openjdk.tools.doclint.Entity Acirc -> Acirc
    org.openjdk.tools.doclint.Entity Atilde -> Atilde
    org.openjdk.tools.doclint.Entity Auml -> Auml
    org.openjdk.tools.doclint.Entity Aring -> Aring
    org.openjdk.tools.doclint.Entity AElig -> AElig
    org.openjdk.tools.doclint.Entity Ccedil -> Ccedil
    org.openjdk.tools.doclint.Entity Egrave -> Egrave
    org.openjdk.tools.doclint.Entity Eacute -> Eacute
    org.openjdk.tools.doclint.Entity Ecirc -> Ecirc
    org.openjdk.tools.doclint.Entity Euml -> Euml
    org.openjdk.tools.doclint.Entity Igrave -> Igrave
    org.openjdk.tools.doclint.Entity Iacute -> Iacute
    org.openjdk.tools.doclint.Entity Icirc -> Icirc
    org.openjdk.tools.doclint.Entity Iuml -> Iuml
    org.openjdk.tools.doclint.Entity ETH -> ETH
    org.openjdk.tools.doclint.Entity Ntilde -> Ntilde
    org.openjdk.tools.doclint.Entity Ograve -> Ograve
    org.openjdk.tools.doclint.Entity Oacute -> Oacute
    org.openjdk.tools.doclint.Entity Ocirc -> Ocirc
    org.openjdk.tools.doclint.Entity Otilde -> Otilde
    org.openjdk.tools.doclint.Entity Ouml -> Ouml
    org.openjdk.tools.doclint.Entity times -> times
    org.openjdk.tools.doclint.Entity Oslash -> Oslash
    org.openjdk.tools.doclint.Entity Ugrave -> Ugrave
    org.openjdk.tools.doclint.Entity Uacute -> Uacute
    org.openjdk.tools.doclint.Entity Ucirc -> Ucirc
    org.openjdk.tools.doclint.Entity Uuml -> Uuml
    org.openjdk.tools.doclint.Entity Yacute -> Yacute
    org.openjdk.tools.doclint.Entity THORN -> THORN
    org.openjdk.tools.doclint.Entity szlig -> szlig
    org.openjdk.tools.doclint.Entity agrave -> agrave
    org.openjdk.tools.doclint.Entity aacute -> aacute
    org.openjdk.tools.doclint.Entity acirc -> acirc
    org.openjdk.tools.doclint.Entity atilde -> atilde
    org.openjdk.tools.doclint.Entity auml -> auml
    org.openjdk.tools.doclint.Entity aring -> aring
    org.openjdk.tools.doclint.Entity aelig -> aelig
    org.openjdk.tools.doclint.Entity ccedil -> ccedil
    org.openjdk.tools.doclint.Entity egrave -> egrave
    org.openjdk.tools.doclint.Entity eacute -> eacute
    org.openjdk.tools.doclint.Entity ecirc -> ecirc
    org.openjdk.tools.doclint.Entity euml -> euml
    org.openjdk.tools.doclint.Entity igrave -> igrave
    org.openjdk.tools.doclint.Entity iacute -> iacute
    org.openjdk.tools.doclint.Entity icirc -> icirc
    org.openjdk.tools.doclint.Entity iuml -> iuml
    org.openjdk.tools.doclint.Entity eth -> eth
    org.openjdk.tools.doclint.Entity ntilde -> ntilde
    org.openjdk.tools.doclint.Entity ograve -> ograve
    org.openjdk.tools.doclint.Entity oacute -> oacute
    org.openjdk.tools.doclint.Entity ocirc -> ocirc
    org.openjdk.tools.doclint.Entity otilde -> otilde
    org.openjdk.tools.doclint.Entity ouml -> ouml
    org.openjdk.tools.doclint.Entity divide -> divide
    org.openjdk.tools.doclint.Entity oslash -> oslash
    org.openjdk.tools.doclint.Entity ugrave -> ugrave
    org.openjdk.tools.doclint.Entity uacute -> uacute
    org.openjdk.tools.doclint.Entity ucirc -> ucirc
    org.openjdk.tools.doclint.Entity uuml -> uuml
    org.openjdk.tools.doclint.Entity yacute -> yacute
    org.openjdk.tools.doclint.Entity thorn -> thorn
    org.openjdk.tools.doclint.Entity yuml -> yuml
    org.openjdk.tools.doclint.Entity fnof -> fnof
    org.openjdk.tools.doclint.Entity Alpha -> Alpha
    org.openjdk.tools.doclint.Entity Beta -> Beta
    org.openjdk.tools.doclint.Entity Gamma -> Gamma
    org.openjdk.tools.doclint.Entity Delta -> Delta
    org.openjdk.tools.doclint.Entity Epsilon -> Epsilon
    org.openjdk.tools.doclint.Entity Zeta -> Zeta
    org.openjdk.tools.doclint.Entity Eta -> Eta
    org.openjdk.tools.doclint.Entity Theta -> Theta
    org.openjdk.tools.doclint.Entity Iota -> Iota
    org.openjdk.tools.doclint.Entity Kappa -> Kappa
    org.openjdk.tools.doclint.Entity Lambda -> Lambda
    org.openjdk.tools.doclint.Entity Mu -> Mu
    org.openjdk.tools.doclint.Entity Nu -> Nu
    org.openjdk.tools.doclint.Entity Xi -> Xi
    org.openjdk.tools.doclint.Entity Omicron -> Omicron
    org.openjdk.tools.doclint.Entity Pi -> Pi
    org.openjdk.tools.doclint.Entity Rho -> Rho
    org.openjdk.tools.doclint.Entity Sigma -> Sigma
    org.openjdk.tools.doclint.Entity Tau -> Tau
    org.openjdk.tools.doclint.Entity Upsilon -> Upsilon
    org.openjdk.tools.doclint.Entity Phi -> Phi
    org.openjdk.tools.doclint.Entity Chi -> Chi
    org.openjdk.tools.doclint.Entity Psi -> Psi
    org.openjdk.tools.doclint.Entity Omega -> Omega
    org.openjdk.tools.doclint.Entity alpha -> alpha
    org.openjdk.tools.doclint.Entity beta -> beta
    org.openjdk.tools.doclint.Entity gamma -> gamma
    org.openjdk.tools.doclint.Entity delta -> delta
    org.openjdk.tools.doclint.Entity epsilon -> epsilon
    org.openjdk.tools.doclint.Entity zeta -> zeta
    org.openjdk.tools.doclint.Entity eta -> eta
    org.openjdk.tools.doclint.Entity theta -> theta
    org.openjdk.tools.doclint.Entity iota -> iota
    org.openjdk.tools.doclint.Entity kappa -> kappa
    org.openjdk.tools.doclint.Entity lambda -> lambda
    org.openjdk.tools.doclint.Entity mu -> mu
    org.openjdk.tools.doclint.Entity nu -> nu
    org.openjdk.tools.doclint.Entity xi -> xi
    org.openjdk.tools.doclint.Entity omicron -> omicron
    org.openjdk.tools.doclint.Entity pi -> pi
    org.openjdk.tools.doclint.Entity rho -> rho
    org.openjdk.tools.doclint.Entity sigmaf -> sigmaf
    org.openjdk.tools.doclint.Entity sigma -> sigma
    org.openjdk.tools.doclint.Entity tau -> tau
    org.openjdk.tools.doclint.Entity upsilon -> upsilon
    org.openjdk.tools.doclint.Entity phi -> phi
    org.openjdk.tools.doclint.Entity chi -> chi
    org.openjdk.tools.doclint.Entity psi -> psi
    org.openjdk.tools.doclint.Entity omega -> omega
    org.openjdk.tools.doclint.Entity thetasym -> thetasym
    org.openjdk.tools.doclint.Entity upsih -> upsih
    org.openjdk.tools.doclint.Entity piv -> piv
    org.openjdk.tools.doclint.Entity bull -> bull
    org.openjdk.tools.doclint.Entity hellip -> hellip
    org.openjdk.tools.doclint.Entity prime -> prime
    org.openjdk.tools.doclint.Entity Prime -> Prime
    org.openjdk.tools.doclint.Entity oline -> oline
    org.openjdk.tools.doclint.Entity frasl -> frasl
    org.openjdk.tools.doclint.Entity weierp -> weierp
    org.openjdk.tools.doclint.Entity image -> image
    org.openjdk.tools.doclint.Entity real -> real
    org.openjdk.tools.doclint.Entity trade -> trade
    org.openjdk.tools.doclint.Entity alefsym -> alefsym
    org.openjdk.tools.doclint.Entity larr -> larr
    org.openjdk.tools.doclint.Entity uarr -> uarr
    org.openjdk.tools.doclint.Entity rarr -> rarr
    org.openjdk.tools.doclint.Entity darr -> darr
    org.openjdk.tools.doclint.Entity harr -> harr
    org.openjdk.tools.doclint.Entity crarr -> crarr
    org.openjdk.tools.doclint.Entity lArr -> lArr
    org.openjdk.tools.doclint.Entity uArr -> uArr
    org.openjdk.tools.doclint.Entity rArr -> rArr
    org.openjdk.tools.doclint.Entity dArr -> dArr
    org.openjdk.tools.doclint.Entity hArr -> hArr
    org.openjdk.tools.doclint.Entity forall -> forall
    org.openjdk.tools.doclint.Entity part -> part
    org.openjdk.tools.doclint.Entity exist -> exist
    org.openjdk.tools.doclint.Entity empty -> empty
    org.openjdk.tools.doclint.Entity nabla -> nabla
    org.openjdk.tools.doclint.Entity isin -> isin
    org.openjdk.tools.doclint.Entity notin -> notin
    org.openjdk.tools.doclint.Entity ni -> ni
    org.openjdk.tools.doclint.Entity prod -> prod
    org.openjdk.tools.doclint.Entity sum -> sum
    org.openjdk.tools.doclint.Entity minus -> minus
    org.openjdk.tools.doclint.Entity lowast -> lowast
    org.openjdk.tools.doclint.Entity radic -> radic
    org.openjdk.tools.doclint.Entity prop -> prop
    org.openjdk.tools.doclint.Entity infin -> infin
    org.openjdk.tools.doclint.Entity ang -> ang
    org.openjdk.tools.doclint.Entity and -> and
    org.openjdk.tools.doclint.Entity or -> or
    org.openjdk.tools.doclint.Entity cap -> cap
    org.openjdk.tools.doclint.Entity cup -> cup
    org.openjdk.tools.doclint.Entity _int -> _int
    org.openjdk.tools.doclint.Entity there4 -> there4
    org.openjdk.tools.doclint.Entity sim -> sim
    org.openjdk.tools.doclint.Entity cong -> cong
    org.openjdk.tools.doclint.Entity asymp -> asymp
    org.openjdk.tools.doclint.Entity ne -> ne
    org.openjdk.tools.doclint.Entity equiv -> equiv
    org.openjdk.tools.doclint.Entity le -> le
    org.openjdk.tools.doclint.Entity ge -> ge
    org.openjdk.tools.doclint.Entity sub -> sub
    org.openjdk.tools.doclint.Entity sup -> sup
    org.openjdk.tools.doclint.Entity nsub -> nsub
    org.openjdk.tools.doclint.Entity sube -> sube
    org.openjdk.tools.doclint.Entity supe -> supe
    org.openjdk.tools.doclint.Entity oplus -> oplus
    org.openjdk.tools.doclint.Entity otimes -> otimes
    org.openjdk.tools.doclint.Entity perp -> perp
    org.openjdk.tools.doclint.Entity sdot -> sdot
    org.openjdk.tools.doclint.Entity lceil -> lceil
    org.openjdk.tools.doclint.Entity rceil -> rceil
    org.openjdk.tools.doclint.Entity lfloor -> lfloor
    org.openjdk.tools.doclint.Entity rfloor -> rfloor
    org.openjdk.tools.doclint.Entity lang -> lang
    org.openjdk.tools.doclint.Entity rang -> rang
    org.openjdk.tools.doclint.Entity loz -> loz
    org.openjdk.tools.doclint.Entity spades -> spades
    org.openjdk.tools.doclint.Entity clubs -> clubs
    org.openjdk.tools.doclint.Entity hearts -> hearts
    org.openjdk.tools.doclint.Entity diams -> diams
    org.openjdk.tools.doclint.Entity quot -> quot
    org.openjdk.tools.doclint.Entity amp -> amp
    org.openjdk.tools.doclint.Entity lt -> lt
    org.openjdk.tools.doclint.Entity gt -> gt
    org.openjdk.tools.doclint.Entity OElig -> OElig
    org.openjdk.tools.doclint.Entity oelig -> oelig
    org.openjdk.tools.doclint.Entity Scaron -> Scaron
    org.openjdk.tools.doclint.Entity scaron -> scaron
    org.openjdk.tools.doclint.Entity Yuml -> Yuml
    org.openjdk.tools.doclint.Entity circ -> circ
    org.openjdk.tools.doclint.Entity tilde -> tilde
    org.openjdk.tools.doclint.Entity ensp -> ensp
    org.openjdk.tools.doclint.Entity emsp -> emsp
    org.openjdk.tools.doclint.Entity thinsp -> thinsp
    org.openjdk.tools.doclint.Entity zwnj -> zwnj
    org.openjdk.tools.doclint.Entity zwj -> zwj
    org.openjdk.tools.doclint.Entity lrm -> lrm
    org.openjdk.tools.doclint.Entity rlm -> rlm
    org.openjdk.tools.doclint.Entity ndash -> ndash
    org.openjdk.tools.doclint.Entity mdash -> mdash
    org.openjdk.tools.doclint.Entity lsquo -> lsquo
    org.openjdk.tools.doclint.Entity rsquo -> rsquo
    org.openjdk.tools.doclint.Entity sbquo -> sbquo
    org.openjdk.tools.doclint.Entity ldquo -> ldquo
    org.openjdk.tools.doclint.Entity rdquo -> rdquo
    org.openjdk.tools.doclint.Entity bdquo -> bdquo
    org.openjdk.tools.doclint.Entity dagger -> dagger
    org.openjdk.tools.doclint.Entity Dagger -> Dagger
    org.openjdk.tools.doclint.Entity permil -> permil
    org.openjdk.tools.doclint.Entity lsaquo -> lsaquo
    org.openjdk.tools.doclint.Entity rsaquo -> rsaquo
    org.openjdk.tools.doclint.Entity euro -> euro
    int code -> code
    java.util.Map names -> names
    java.util.Map codes -> codes
    org.openjdk.tools.doclint.Entity[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.Entity[] values() -> values
    org.openjdk.tools.doclint.Entity valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    boolean isValid(java.lang.String) -> isValid
    org.openjdk.tools.doclint.Entity get(java.lang.String) -> get
    boolean isValid(int) -> isValid
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.Env -> org.openjdk.tools.doclint.Env:
    org.openjdk.tools.doclint.Messages messages -> messages
    int implicitHeaderLevel -> implicitHeaderLevel
    java.util.Set customTags -> customTags
    java.util.Set includePackages -> includePackages
    java.util.Set excludePackages -> excludePackages
    org.openjdk.tools.doclint.HtmlVersion htmlVersion -> htmlVersion
    org.openjdk.source.util.DocTrees trees -> trees
    org.openjdk.javax.lang.model.util.Elements elements -> elements
    org.openjdk.javax.lang.model.util.Types types -> types
    org.openjdk.javax.lang.model.type.TypeMirror java_lang_Error -> java_lang_Error
    org.openjdk.javax.lang.model.type.TypeMirror java_lang_RuntimeException -> java_lang_RuntimeException
    org.openjdk.javax.lang.model.type.TypeMirror java_lang_Throwable -> java_lang_Throwable
    org.openjdk.javax.lang.model.type.TypeMirror java_lang_Void -> java_lang_Void
    org.openjdk.source.util.TreePath currPath -> currPath
    org.openjdk.javax.lang.model.element.Element currElement -> currElement
    org.openjdk.source.doctree.DocCommentTree currDocComment -> currDocComment
    org.openjdk.tools.doclint.Env$AccessKind currAccess -> currAccess
    java.util.Set currOverriddenMethods -> currOverriddenMethods
    void <init>() -> <init>
    void init(org.openjdk.source.util.JavacTask) -> init
    void init(org.openjdk.source.util.DocTrees,org.openjdk.javax.lang.model.util.Elements,org.openjdk.javax.lang.model.util.Types) -> init
    void initTypes() -> initTypes
    void setImplicitHeaders(int) -> setImplicitHeaders
    void setCustomTags(java.lang.String) -> setCustomTags
    void setCheckPackages(java.lang.String) -> setCheckPackages
    boolean validatePackages(java.lang.String) -> validatePackages
    void setHtmlVersion(org.openjdk.tools.doclint.HtmlVersion) -> setHtmlVersion
    void setCurrent(org.openjdk.source.util.TreePath,org.openjdk.source.doctree.DocCommentTree) -> setCurrent
    org.openjdk.tools.doclint.Env$AccessKind getAccessKind() -> getAccessKind
    long getPos(org.openjdk.source.util.TreePath) -> getPos
    long getStartPos(org.openjdk.source.util.TreePath) -> getStartPos
    boolean shouldCheck(org.openjdk.source.tree.CompilationUnitTree) -> shouldCheck
    java.lang.Comparable min(java.lang.Comparable,java.lang.Comparable) -> min
org.openjdk.tools.doclint.Env$AccessKind -> org.openjdk.tools.doclint.Env$AccessKind:
    org.openjdk.tools.doclint.Env$AccessKind PRIVATE -> PRIVATE
    org.openjdk.tools.doclint.Env$AccessKind PACKAGE -> PACKAGE
    org.openjdk.tools.doclint.Env$AccessKind PROTECTED -> PROTECTED
    org.openjdk.tools.doclint.Env$AccessKind PUBLIC -> PUBLIC
    org.openjdk.tools.doclint.Env$AccessKind[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.Env$AccessKind[] values() -> values
    org.openjdk.tools.doclint.Env$AccessKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean accepts(java.lang.String) -> accepts
    org.openjdk.tools.doclint.Env$AccessKind of(java.util.Set) -> of
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.HtmlTag -> org.openjdk.tools.doclint.HtmlTag:
    org.openjdk.tools.doclint.HtmlTag A -> A
    org.openjdk.tools.doclint.HtmlTag ABBR -> ABBR
    org.openjdk.tools.doclint.HtmlTag ACRONYM -> ACRONYM
    org.openjdk.tools.doclint.HtmlTag ADDRESS -> ADDRESS
    org.openjdk.tools.doclint.HtmlTag ARTICLE -> ARTICLE
    org.openjdk.tools.doclint.HtmlTag ASIDE -> ASIDE
    org.openjdk.tools.doclint.HtmlTag B -> B
    org.openjdk.tools.doclint.HtmlTag BDI -> BDI
    org.openjdk.tools.doclint.HtmlTag BIG -> BIG
    org.openjdk.tools.doclint.HtmlTag BLOCKQUOTE -> BLOCKQUOTE
    org.openjdk.tools.doclint.HtmlTag BODY -> BODY
    org.openjdk.tools.doclint.HtmlTag BR -> BR
    org.openjdk.tools.doclint.HtmlTag CAPTION -> CAPTION
    org.openjdk.tools.doclint.HtmlTag CENTER -> CENTER
    org.openjdk.tools.doclint.HtmlTag CITE -> CITE
    org.openjdk.tools.doclint.HtmlTag CODE -> CODE
    org.openjdk.tools.doclint.HtmlTag COL -> COL
    org.openjdk.tools.doclint.HtmlTag COLGROUP -> COLGROUP
    org.openjdk.tools.doclint.HtmlTag DD -> DD
    org.openjdk.tools.doclint.HtmlTag DEL -> DEL
    org.openjdk.tools.doclint.HtmlTag DFN -> DFN
    org.openjdk.tools.doclint.HtmlTag DIV -> DIV
    org.openjdk.tools.doclint.HtmlTag DL -> DL
    org.openjdk.tools.doclint.HtmlTag DT -> DT
    org.openjdk.tools.doclint.HtmlTag EM -> EM
    org.openjdk.tools.doclint.HtmlTag FONT -> FONT
    org.openjdk.tools.doclint.HtmlTag FOOTER -> FOOTER
    org.openjdk.tools.doclint.HtmlTag FIGURE -> FIGURE
    org.openjdk.tools.doclint.HtmlTag FIGCAPTION -> FIGCAPTION
    org.openjdk.tools.doclint.HtmlTag FRAME -> FRAME
    org.openjdk.tools.doclint.HtmlTag FRAMESET -> FRAMESET
    org.openjdk.tools.doclint.HtmlTag H1 -> H1
    org.openjdk.tools.doclint.HtmlTag H2 -> H2
    org.openjdk.tools.doclint.HtmlTag H3 -> H3
    org.openjdk.tools.doclint.HtmlTag H4 -> H4
    org.openjdk.tools.doclint.HtmlTag H5 -> H5
    org.openjdk.tools.doclint.HtmlTag H6 -> H6
    org.openjdk.tools.doclint.HtmlTag HEAD -> HEAD
    org.openjdk.tools.doclint.HtmlTag HEADER -> HEADER
    org.openjdk.tools.doclint.HtmlTag HR -> HR
    org.openjdk.tools.doclint.HtmlTag HTML -> HTML
    org.openjdk.tools.doclint.HtmlTag I -> I
    org.openjdk.tools.doclint.HtmlTag IFRAME -> IFRAME
    org.openjdk.tools.doclint.HtmlTag IMG -> IMG
    org.openjdk.tools.doclint.HtmlTag INS -> INS
    org.openjdk.tools.doclint.HtmlTag KBD -> KBD
    org.openjdk.tools.doclint.HtmlTag LI -> LI
    org.openjdk.tools.doclint.HtmlTag LINK -> LINK
    org.openjdk.tools.doclint.HtmlTag MAIN -> MAIN
    org.openjdk.tools.doclint.HtmlTag MARK -> MARK
    org.openjdk.tools.doclint.HtmlTag MENU -> MENU
    org.openjdk.tools.doclint.HtmlTag META -> META
    org.openjdk.tools.doclint.HtmlTag NAV -> NAV
    org.openjdk.tools.doclint.HtmlTag NOFRAMES -> NOFRAMES
    org.openjdk.tools.doclint.HtmlTag NOSCRIPT -> NOSCRIPT
    org.openjdk.tools.doclint.HtmlTag OL -> OL
    org.openjdk.tools.doclint.HtmlTag P -> P
    org.openjdk.tools.doclint.HtmlTag PRE -> PRE
    org.openjdk.tools.doclint.HtmlTag Q -> Q
    org.openjdk.tools.doclint.HtmlTag S -> S
    org.openjdk.tools.doclint.HtmlTag SAMP -> SAMP
    org.openjdk.tools.doclint.HtmlTag SCRIPT -> SCRIPT
    org.openjdk.tools.doclint.HtmlTag SECTION -> SECTION
    org.openjdk.tools.doclint.HtmlTag SMALL -> SMALL
    org.openjdk.tools.doclint.HtmlTag SPAN -> SPAN
    org.openjdk.tools.doclint.HtmlTag STRIKE -> STRIKE
    org.openjdk.tools.doclint.HtmlTag STRONG -> STRONG
    org.openjdk.tools.doclint.HtmlTag SUB -> SUB
    org.openjdk.tools.doclint.HtmlTag SUP -> SUP
    org.openjdk.tools.doclint.HtmlTag TABLE -> TABLE
    org.openjdk.tools.doclint.HtmlTag TBODY -> TBODY
    org.openjdk.tools.doclint.HtmlTag TD -> TD
    org.openjdk.tools.doclint.HtmlTag TEMPLATE -> TEMPLATE
    org.openjdk.tools.doclint.HtmlTag TFOOT -> TFOOT
    org.openjdk.tools.doclint.HtmlTag TH -> TH
    org.openjdk.tools.doclint.HtmlTag THEAD -> THEAD
    org.openjdk.tools.doclint.HtmlTag TIME -> TIME
    org.openjdk.tools.doclint.HtmlTag TITLE -> TITLE
    org.openjdk.tools.doclint.HtmlTag TR -> TR
    org.openjdk.tools.doclint.HtmlTag TT -> TT
    org.openjdk.tools.doclint.HtmlTag U -> U
    org.openjdk.tools.doclint.HtmlTag UL -> UL
    org.openjdk.tools.doclint.HtmlTag WBR -> WBR
    org.openjdk.tools.doclint.HtmlTag VAR -> VAR
    org.openjdk.tools.doclint.HtmlVersion allowedVersion -> allowedVersion
    org.openjdk.tools.doclint.HtmlTag$BlockType blockType -> blockType
    org.openjdk.tools.doclint.HtmlTag$EndKind endKind -> endKind
    java.util.Set flags -> flags
    java.util.Map attrs -> attrs
    java.util.Map index -> index
    org.openjdk.tools.doclint.HtmlTag[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.HtmlTag[] values() -> values
    org.openjdk.tools.doclint.HtmlTag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlVersion,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlVersion,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
    boolean acceptsText() -> acceptsText
    java.lang.String getText() -> getText
    org.openjdk.tools.doclint.HtmlTag$Attr getAttr(org.openjdk.javax.lang.model.element.Name) -> getAttr
    org.openjdk.tools.doclint.HtmlTag$AttrKind getAttrKind(org.openjdk.javax.lang.model.element.Name) -> getAttrKind
    org.openjdk.tools.doclint.HtmlTag$AttrMap attrs(org.openjdk.tools.doclint.HtmlTag$AttrKind,org.openjdk.tools.doclint.HtmlTag$Attr[]) -> attrs
    org.openjdk.tools.doclint.HtmlTag get(org.openjdk.javax.lang.model.element.Name) -> get
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,org.openjdk.tools.doclint.HtmlTag$AttrMap[],org.openjdk.tools.doclint.HtmlTag$1) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[],org.openjdk.tools.doclint.HtmlTag$1) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlVersion,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[],org.openjdk.tools.doclint.HtmlTag$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.HtmlTag$1 -> org.openjdk.tools.doclint.HtmlTag$1:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$10 -> org.openjdk.tools.doclint.HtmlTag$10:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$11 -> org.openjdk.tools.doclint.HtmlTag$11:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$12 -> org.openjdk.tools.doclint.HtmlTag$12:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$13 -> org.openjdk.tools.doclint.HtmlTag$13:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$14 -> org.openjdk.tools.doclint.HtmlTag$14:
    int[] $SwitchMap$com$sun$tools$doclint$HtmlTag -> $SwitchMap$com$sun$tools$doclint$HtmlTag
    int[] $SwitchMap$com$sun$tools$doclint$HtmlTag$BlockType -> $SwitchMap$com$sun$tools$doclint$HtmlTag$BlockType
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.HtmlTag$2 -> org.openjdk.tools.doclint.HtmlTag$2:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$3 -> org.openjdk.tools.doclint.HtmlTag$3:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlVersion,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$4 -> org.openjdk.tools.doclint.HtmlTag$4:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlVersion,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$5 -> org.openjdk.tools.doclint.HtmlTag$5:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$6 -> org.openjdk.tools.doclint.HtmlTag$6:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$7 -> org.openjdk.tools.doclint.HtmlTag$7:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$8 -> org.openjdk.tools.doclint.HtmlTag$8:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$9 -> org.openjdk.tools.doclint.HtmlTag$9:
    void <init>(java.lang.String,int,org.openjdk.tools.doclint.HtmlTag$BlockType,org.openjdk.tools.doclint.HtmlTag$EndKind,java.util.Set,org.openjdk.tools.doclint.HtmlTag$AttrMap[]) -> <init>
    boolean accepts(org.openjdk.tools.doclint.HtmlTag) -> accepts
org.openjdk.tools.doclint.HtmlTag$Attr -> org.openjdk.tools.doclint.HtmlTag$Attr:
    org.openjdk.tools.doclint.HtmlTag$Attr ABBR -> ABBR
    org.openjdk.tools.doclint.HtmlTag$Attr ALIGN -> ALIGN
    org.openjdk.tools.doclint.HtmlTag$Attr ALINK -> ALINK
    org.openjdk.tools.doclint.HtmlTag$Attr ALT -> ALT
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_ACTIVEDESCENDANT -> ARIA_ACTIVEDESCENDANT
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_CONTROLS -> ARIA_CONTROLS
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_DESCRIBEDBY -> ARIA_DESCRIBEDBY
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_EXPANDED -> ARIA_EXPANDED
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_LABEL -> ARIA_LABEL
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_LABELLEDBY -> ARIA_LABELLEDBY
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_LEVEL -> ARIA_LEVEL
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_MULTISELECTABLE -> ARIA_MULTISELECTABLE
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_OWNS -> ARIA_OWNS
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_POSINSET -> ARIA_POSINSET
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_SETSIZE -> ARIA_SETSIZE
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_READONLY -> ARIA_READONLY
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_REQUIRED -> ARIA_REQUIRED
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_SELECTED -> ARIA_SELECTED
    org.openjdk.tools.doclint.HtmlTag$Attr ARIA_SORT -> ARIA_SORT
    org.openjdk.tools.doclint.HtmlTag$Attr AXIS -> AXIS
    org.openjdk.tools.doclint.HtmlTag$Attr BACKGROUND -> BACKGROUND
    org.openjdk.tools.doclint.HtmlTag$Attr BGCOLOR -> BGCOLOR
    org.openjdk.tools.doclint.HtmlTag$Attr BORDER -> BORDER
    org.openjdk.tools.doclint.HtmlTag$Attr CELLSPACING -> CELLSPACING
    org.openjdk.tools.doclint.HtmlTag$Attr CELLPADDING -> CELLPADDING
    org.openjdk.tools.doclint.HtmlTag$Attr CHAR -> CHAR
    org.openjdk.tools.doclint.HtmlTag$Attr CHAROFF -> CHAROFF
    org.openjdk.tools.doclint.HtmlTag$Attr CHARSET -> CHARSET
    org.openjdk.tools.doclint.HtmlTag$Attr CITE -> CITE
    org.openjdk.tools.doclint.HtmlTag$Attr CLEAR -> CLEAR
    org.openjdk.tools.doclint.HtmlTag$Attr CLASS -> CLASS
    org.openjdk.tools.doclint.HtmlTag$Attr COLOR -> COLOR
    org.openjdk.tools.doclint.HtmlTag$Attr COLSPAN -> COLSPAN
    org.openjdk.tools.doclint.HtmlTag$Attr COMPACT -> COMPACT
    org.openjdk.tools.doclint.HtmlTag$Attr COORDS -> COORDS
    org.openjdk.tools.doclint.HtmlTag$Attr CROSSORIGIN -> CROSSORIGIN
    org.openjdk.tools.doclint.HtmlTag$Attr DATETIME -> DATETIME
    org.openjdk.tools.doclint.HtmlTag$Attr FACE -> FACE
    org.openjdk.tools.doclint.HtmlTag$Attr FRAME -> FRAME
    org.openjdk.tools.doclint.HtmlTag$Attr FRAMEBORDER -> FRAMEBORDER
    org.openjdk.tools.doclint.HtmlTag$Attr HEADERS -> HEADERS
    org.openjdk.tools.doclint.HtmlTag$Attr HEIGHT -> HEIGHT
    org.openjdk.tools.doclint.HtmlTag$Attr HREF -> HREF
    org.openjdk.tools.doclint.HtmlTag$Attr HSPACE -> HSPACE
    org.openjdk.tools.doclint.HtmlTag$Attr ID -> ID
    org.openjdk.tools.doclint.HtmlTag$Attr LINK -> LINK
    org.openjdk.tools.doclint.HtmlTag$Attr LONGDESC -> LONGDESC
    org.openjdk.tools.doclint.HtmlTag$Attr MARGINHEIGHT -> MARGINHEIGHT
    org.openjdk.tools.doclint.HtmlTag$Attr MARGINWIDTH -> MARGINWIDTH
    org.openjdk.tools.doclint.HtmlTag$Attr NAME -> NAME
    org.openjdk.tools.doclint.HtmlTag$Attr NOSHADE -> NOSHADE
    org.openjdk.tools.doclint.HtmlTag$Attr NOWRAP -> NOWRAP
    org.openjdk.tools.doclint.HtmlTag$Attr PROFILE -> PROFILE
    org.openjdk.tools.doclint.HtmlTag$Attr REV -> REV
    org.openjdk.tools.doclint.HtmlTag$Attr REVERSED -> REVERSED
    org.openjdk.tools.doclint.HtmlTag$Attr ROLE -> ROLE
    org.openjdk.tools.doclint.HtmlTag$Attr ROWSPAN -> ROWSPAN
    org.openjdk.tools.doclint.HtmlTag$Attr RULES -> RULES
    org.openjdk.tools.doclint.HtmlTag$Attr SCHEME -> SCHEME
    org.openjdk.tools.doclint.HtmlTag$Attr SCOPE -> SCOPE
    org.openjdk.tools.doclint.HtmlTag$Attr SCROLLING -> SCROLLING
    org.openjdk.tools.doclint.HtmlTag$Attr SHAPE -> SHAPE
    org.openjdk.tools.doclint.HtmlTag$Attr SIZE -> SIZE
    org.openjdk.tools.doclint.HtmlTag$Attr SPACE -> SPACE
    org.openjdk.tools.doclint.HtmlTag$Attr SRC -> SRC
    org.openjdk.tools.doclint.HtmlTag$Attr START -> START
    org.openjdk.tools.doclint.HtmlTag$Attr STYLE -> STYLE
    org.openjdk.tools.doclint.HtmlTag$Attr SUMMARY -> SUMMARY
    org.openjdk.tools.doclint.HtmlTag$Attr TARGET -> TARGET
    org.openjdk.tools.doclint.HtmlTag$Attr TEXT -> TEXT
    org.openjdk.tools.doclint.HtmlTag$Attr TYPE -> TYPE
    org.openjdk.tools.doclint.HtmlTag$Attr VALIGN -> VALIGN
    org.openjdk.tools.doclint.HtmlTag$Attr VALUE -> VALUE
    org.openjdk.tools.doclint.HtmlTag$Attr VERSION -> VERSION
    org.openjdk.tools.doclint.HtmlTag$Attr VLINK -> VLINK
    org.openjdk.tools.doclint.HtmlTag$Attr VSPACE -> VSPACE
    org.openjdk.tools.doclint.HtmlTag$Attr WIDTH -> WIDTH
    java.lang.String name -> name
    java.util.Map index -> index
    org.openjdk.tools.doclint.HtmlTag$Attr[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.HtmlTag$Attr[] values() -> values
    org.openjdk.tools.doclint.HtmlTag$Attr valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getText() -> getText
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.HtmlTag$AttrKind -> org.openjdk.tools.doclint.HtmlTag$AttrKind:
    org.openjdk.tools.doclint.HtmlTag$AttrKind HTML4 -> HTML4
    org.openjdk.tools.doclint.HtmlTag$AttrKind HTML5 -> HTML5
    org.openjdk.tools.doclint.HtmlTag$AttrKind INVALID -> INVALID
    org.openjdk.tools.doclint.HtmlTag$AttrKind OBSOLETE -> OBSOLETE
    org.openjdk.tools.doclint.HtmlTag$AttrKind USE_CSS -> USE_CSS
    org.openjdk.tools.doclint.HtmlTag$AttrKind ALL -> ALL
    org.openjdk.tools.doclint.HtmlTag$AttrKind[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.HtmlTag$AttrKind[] values() -> values
    org.openjdk.tools.doclint.HtmlTag$AttrKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.HtmlTag$AttrMap -> org.openjdk.tools.doclint.HtmlTag$AttrMap:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
org.openjdk.tools.doclint.HtmlTag$BlockType -> org.openjdk.tools.doclint.HtmlTag$BlockType:
    org.openjdk.tools.doclint.HtmlTag$BlockType BLOCK -> BLOCK
    org.openjdk.tools.doclint.HtmlTag$BlockType INLINE -> INLINE
    org.openjdk.tools.doclint.HtmlTag$BlockType LIST_ITEM -> LIST_ITEM
    org.openjdk.tools.doclint.HtmlTag$BlockType TABLE_ITEM -> TABLE_ITEM
    org.openjdk.tools.doclint.HtmlTag$BlockType OTHER -> OTHER
    org.openjdk.tools.doclint.HtmlTag$BlockType[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.HtmlTag$BlockType[] values() -> values
    org.openjdk.tools.doclint.HtmlTag$BlockType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.HtmlTag$EndKind -> org.openjdk.tools.doclint.HtmlTag$EndKind:
    org.openjdk.tools.doclint.HtmlTag$EndKind NONE -> NONE
    org.openjdk.tools.doclint.HtmlTag$EndKind OPTIONAL -> OPTIONAL
    org.openjdk.tools.doclint.HtmlTag$EndKind REQUIRED -> REQUIRED
    org.openjdk.tools.doclint.HtmlTag$EndKind[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.HtmlTag$EndKind[] values() -> values
    org.openjdk.tools.doclint.HtmlTag$EndKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.HtmlTag$Flag -> org.openjdk.tools.doclint.HtmlTag$Flag:
    org.openjdk.tools.doclint.HtmlTag$Flag ACCEPTS_BLOCK -> ACCEPTS_BLOCK
    org.openjdk.tools.doclint.HtmlTag$Flag ACCEPTS_INLINE -> ACCEPTS_INLINE
    org.openjdk.tools.doclint.HtmlTag$Flag EXPECT_CONTENT -> EXPECT_CONTENT
    org.openjdk.tools.doclint.HtmlTag$Flag NO_NEST -> NO_NEST
    org.openjdk.tools.doclint.HtmlTag$Flag[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.HtmlTag$Flag[] values() -> values
    org.openjdk.tools.doclint.HtmlTag$Flag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.HtmlVersion -> org.openjdk.tools.doclint.HtmlVersion:
    org.openjdk.tools.doclint.HtmlVersion HTML4 -> HTML4
    org.openjdk.tools.doclint.HtmlVersion HTML5 -> HTML5
    org.openjdk.tools.doclint.HtmlVersion ALL -> ALL
    org.openjdk.tools.doclint.HtmlVersion[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.HtmlVersion[] values() -> values
    org.openjdk.tools.doclint.HtmlVersion valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.doclint.HtmlVersion getHtmlVersion(java.lang.String) -> getHtmlVersion
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.Messages -> org.openjdk.tools.doclint.Messages:
    org.openjdk.tools.doclint.Messages$Options options -> options
    org.openjdk.tools.doclint.Messages$Stats stats -> stats
    java.util.ResourceBundle bundle -> bundle
    org.openjdk.tools.doclint.Env env -> env
    void <init>(org.openjdk.tools.doclint.Env) -> <init>
    void error(org.openjdk.tools.doclint.Messages$Group,org.openjdk.source.doctree.DocTree,java.lang.String,java.lang.Object[]) -> error
    void warning(org.openjdk.tools.doclint.Messages$Group,org.openjdk.source.doctree.DocTree,java.lang.String,java.lang.Object[]) -> warning
    void setOptions(java.lang.String) -> setOptions
    void setStatsEnabled(boolean) -> setStatsEnabled
    void reportStats(java.io.PrintWriter) -> reportStats
    void report(org.openjdk.tools.doclint.Messages$Group,org.openjdk.javax.tools.Diagnostic$Kind,org.openjdk.source.doctree.DocTree,java.lang.String,java.lang.Object[]) -> report
    void report(org.openjdk.tools.doclint.Messages$Group,org.openjdk.javax.tools.Diagnostic$Kind,org.openjdk.source.tree.Tree,java.lang.String,java.lang.Object[]) -> report
    java.lang.String localize(java.lang.String,java.lang.Object[]) -> localize
org.openjdk.tools.doclint.Messages$1 -> org.openjdk.tools.doclint.Messages$1:
org.openjdk.tools.doclint.Messages$Group -> org.openjdk.tools.doclint.Messages$Group:
    org.openjdk.tools.doclint.Messages$Group ACCESSIBILITY -> ACCESSIBILITY
    org.openjdk.tools.doclint.Messages$Group HTML -> HTML
    org.openjdk.tools.doclint.Messages$Group MISSING -> MISSING
    org.openjdk.tools.doclint.Messages$Group SYNTAX -> SYNTAX
    org.openjdk.tools.doclint.Messages$Group REFERENCE -> REFERENCE
    org.openjdk.tools.doclint.Messages$Group[] $VALUES -> $VALUES
    org.openjdk.tools.doclint.Messages$Group[] values() -> values
    org.openjdk.tools.doclint.Messages$Group valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String optName() -> optName
    java.lang.String notOptName() -> notOptName
    boolean accepts(java.lang.String) -> accepts
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.Messages$Options -> org.openjdk.tools.doclint.Messages$Options:
    java.util.Map map -> map
    org.openjdk.tools.doclint.Messages$Stats stats -> stats
    java.lang.String ALL -> ALL
    boolean isValidOptions(java.lang.String) -> isValidOptions
    boolean isValidOption(java.lang.String) -> isValidOption
    void <init>(org.openjdk.tools.doclint.Messages$Stats) -> <init>
    boolean isEnabled(org.openjdk.tools.doclint.Messages$Group,org.openjdk.tools.doclint.Env$AccessKind) -> isEnabled
    void setOptions(java.lang.String) -> setOptions
    void setOption(java.lang.String) -> setOption
    void setOption(java.lang.String,org.openjdk.tools.doclint.Env$AccessKind) -> setOption
org.openjdk.tools.doclint.Messages$Stats -> org.openjdk.tools.doclint.Messages$Stats:
    java.lang.String OPT -> OPT
    java.lang.String NO_CODE -> NO_CODE
    java.util.ResourceBundle bundle -> bundle
    int[] groupCounts -> groupCounts
    int[] dkindCounts -> dkindCounts
    java.util.Map codeCounts -> codeCounts
    void <init>(java.util.ResourceBundle) -> <init>
    void setEnabled(boolean) -> setEnabled
    void record(org.openjdk.tools.doclint.Messages$Group,org.openjdk.javax.tools.Diagnostic$Kind,java.lang.String) -> record
    void report(java.io.PrintWriter) -> report
org.openjdk.tools.doclint.Messages$Stats$Table -> org.openjdk.tools.doclint.Messages$Stats$Table:
    java.util.Comparator DECREASING -> DECREASING
    java.util.TreeMap map -> map
    void <init>() -> <init>
    void put(java.lang.String,int) -> put
    void print(java.io.PrintWriter) -> print
    int lambda$static$0(java.lang.Integer,java.lang.Integer) -> lambda$static$0
    void <init>(org.openjdk.tools.doclint.Messages$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.doclint.resources.doclint -> org.openjdk.tools.doclint.resources.doclint:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.doclint.resources.doclint_ja -> org.openjdk.tools.doclint.resources.doclint_ja:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.doclint.resources.doclint_zh_CN -> org.openjdk.tools.doclint.resources.doclint_zh_CN:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javac.Main -> org.openjdk.tools.javac.Main:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    int compile(java.lang.String[]) -> compile
    int compile(java.lang.String[],java.io.PrintWriter) -> compile
org.openjdk.tools.javac.api.BasicJavacTask -> org.openjdk.tools.javac.api.BasicJavacTask:
    org.openjdk.tools.javac.util.Context context -> context
    org.openjdk.source.util.TaskListener taskListener -> taskListener
    org.openjdk.source.util.JavacTask instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context,boolean) -> <init>
    java.lang.Iterable parse() -> parse
    java.lang.Iterable analyze() -> analyze
    java.lang.Iterable generate() -> generate
    void setTaskListener(org.openjdk.source.util.TaskListener) -> setTaskListener
    void addTaskListener(org.openjdk.source.util.TaskListener) -> addTaskListener
    void removeTaskListener(org.openjdk.source.util.TaskListener) -> removeTaskListener
    java.util.Collection getTaskListeners() -> getTaskListeners
    org.openjdk.javax.lang.model.type.TypeMirror getTypeMirror(java.lang.Iterable) -> getTypeMirror
    org.openjdk.javax.lang.model.util.Elements getElements() -> getElements
    org.openjdk.javax.lang.model.util.Types getTypes() -> getTypes
    void addModules(java.lang.Iterable) -> addModules
    void setProcessors(java.lang.Iterable) -> setProcessors
    void setLocale(java.util.Locale) -> setLocale
    java.lang.Boolean call() -> call
    org.openjdk.tools.javac.util.Context getContext() -> getContext
    void initPlugins(java.util.Set) -> initPlugins
    void initDocLint(org.openjdk.tools.javac.util.List) -> initDocLint
    java.lang.Object call() -> call
    java.lang.String lambda$initPlugins$0(java.util.Map$Entry) -> lambda$initPlugins$0
org.openjdk.tools.javac.api.ClientCodeWrapper -> org.openjdk.tools.javac.api.ClientCodeWrapper:
    java.util.Map trustedClasses -> trustedClasses
    org.openjdk.tools.javac.api.ClientCodeWrapper instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.javax.tools.JavaFileManager wrap(org.openjdk.javax.tools.JavaFileManager) -> wrap
    org.openjdk.javax.tools.FileObject wrap(org.openjdk.javax.tools.FileObject) -> wrap
    org.openjdk.javax.tools.FileObject unwrap(org.openjdk.javax.tools.FileObject) -> unwrap
    org.openjdk.javax.tools.JavaFileObject wrap(org.openjdk.javax.tools.JavaFileObject) -> wrap
    java.lang.Iterable wrapJavaFileObjects(java.lang.Iterable) -> wrapJavaFileObjects
    org.openjdk.javax.tools.JavaFileObject unwrap(org.openjdk.javax.tools.JavaFileObject) -> unwrap
    org.openjdk.javax.tools.DiagnosticListener wrap(org.openjdk.javax.tools.DiagnosticListener) -> wrap
    org.openjdk.source.util.TaskListener wrap(org.openjdk.source.util.TaskListener) -> wrap
    org.openjdk.source.util.TaskListener unwrap(org.openjdk.source.util.TaskListener) -> unwrap
    java.util.Collection unwrap(java.util.Collection) -> unwrap
    org.openjdk.javax.tools.Diagnostic unwrap(org.openjdk.javax.tools.Diagnostic) -> unwrap
    boolean isTrusted(java.lang.Object) -> isTrusted
    java.lang.String wrappedToString(java.lang.Class,java.lang.Object) -> wrappedToString
    java.lang.String access$000(org.openjdk.tools.javac.api.ClientCodeWrapper,java.lang.Class,java.lang.Object) -> access$000
    org.openjdk.javax.tools.Diagnostic access$100(org.openjdk.tools.javac.api.ClientCodeWrapper,org.openjdk.javax.tools.Diagnostic) -> access$100
org.openjdk.tools.javac.api.ClientCodeWrapper$DiagnosticSourceUnwrapper -> org.openjdk.tools.javac.api.ClientCodeWrapper$DiagnosticSourceUnwrapper:
    org.openjdk.tools.javac.util.JCDiagnostic d -> d
    org.openjdk.tools.javac.api.ClientCodeWrapper this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.ClientCodeWrapper,org.openjdk.tools.javac.util.JCDiagnostic) -> <init>
    org.openjdk.javax.tools.Diagnostic$Kind getKind() -> getKind
    org.openjdk.javax.tools.JavaFileObject getSource() -> getSource
    long getPosition() -> getPosition
    long getStartPosition() -> getStartPosition
    long getEndPosition() -> getEndPosition
    long getLineNumber() -> getLineNumber
    long getColumnNumber() -> getColumnNumber
    java.lang.String getCode() -> getCode
    java.lang.String getMessage(java.util.Locale) -> getMessage
    java.lang.String toString() -> toString
    java.lang.Object getSource() -> getSource
org.openjdk.tools.javac.api.ClientCodeWrapper$Trusted -> org.openjdk.tools.javac.api.ClientCodeWrapper$Trusted:
org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedDiagnosticListener -> org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedDiagnosticListener:
    org.openjdk.javax.tools.DiagnosticListener clientDiagnosticListener -> clientDiagnosticListener
    org.openjdk.tools.javac.api.ClientCodeWrapper this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.ClientCodeWrapper,org.openjdk.javax.tools.DiagnosticListener) -> <init>
    void report(org.openjdk.javax.tools.Diagnostic) -> report
    java.lang.String toString() -> toString
org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedFileObject -> org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedFileObject:
    org.openjdk.javax.tools.FileObject clientFileObject -> clientFileObject
    org.openjdk.tools.javac.api.ClientCodeWrapper this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.ClientCodeWrapper,org.openjdk.javax.tools.FileObject) -> <init>
    java.net.URI toUri() -> toUri
    java.lang.String getName() -> getName
    java.io.InputStream openInputStream() -> openInputStream
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.io.Reader openReader(boolean) -> openReader
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
    java.io.Writer openWriter() -> openWriter
    long getLastModified() -> getLastModified
    boolean delete() -> delete
    java.lang.String toString() -> toString
org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedJavaFileManager -> org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedJavaFileManager:
    org.openjdk.javax.tools.JavaFileManager clientJavaFileManager -> clientJavaFileManager
    org.openjdk.tools.javac.api.ClientCodeWrapper this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.ClientCodeWrapper,org.openjdk.javax.tools.JavaFileManager) -> <init>
    java.lang.ClassLoader getClassLoader(org.openjdk.javax.tools.JavaFileManager$Location) -> getClassLoader
    java.lang.Iterable list(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.util.Set,boolean) -> list
    java.lang.String inferBinaryName(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> inferBinaryName
    boolean isSameFile(org.openjdk.javax.tools.FileObject,org.openjdk.javax.tools.FileObject) -> isSameFile
    boolean handleOption(java.lang.String,java.util.Iterator) -> handleOption
    boolean hasLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> hasLocation
    org.openjdk.javax.tools.JavaFileObject getJavaFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> getJavaFileForInput
    org.openjdk.javax.tools.JavaFileObject getJavaFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind,org.openjdk.javax.tools.FileObject) -> getJavaFileForOutput
    org.openjdk.javax.tools.FileObject getFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String) -> getFileForInput
    org.openjdk.javax.tools.FileObject getFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String,org.openjdk.javax.tools.FileObject) -> getFileForOutput
    boolean contains(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.FileObject) -> contains
    void flush() -> flush
    void close() -> close
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String) -> getLocationForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> getLocationForModule
    java.lang.String inferModuleName(org.openjdk.javax.tools.JavaFileManager$Location) -> inferModuleName
    java.lang.Iterable listLocationsForModules(org.openjdk.javax.tools.JavaFileManager$Location) -> listLocationsForModules
    int isSupportedOption(java.lang.String) -> isSupportedOption
    java.lang.String toString() -> toString
org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedJavaFileObject -> org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedJavaFileObject:
    org.openjdk.tools.javac.api.ClientCodeWrapper this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.ClientCodeWrapper,org.openjdk.javax.tools.JavaFileObject) -> <init>
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
    java.lang.String toString() -> toString
org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedStandardJavaFileManager -> org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedStandardJavaFileManager:
    org.openjdk.tools.javac.api.ClientCodeWrapper this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.ClientCodeWrapper,org.openjdk.javax.tools.StandardJavaFileManager) -> <init>
    java.lang.Iterable getJavaFileObjectsFromFiles(java.lang.Iterable) -> getJavaFileObjectsFromFiles
    java.lang.Iterable getJavaFileObjectsFromPaths(java.lang.Iterable) -> getJavaFileObjectsFromPaths
    java.lang.Iterable getJavaFileObjects(java.io.File[]) -> getJavaFileObjects
    java.lang.Iterable getJavaFileObjects(java.nio.file.Path[]) -> getJavaFileObjects
    java.lang.Iterable getJavaFileObjectsFromStrings(java.lang.Iterable) -> getJavaFileObjectsFromStrings
    java.lang.Iterable getJavaFileObjects(java.lang.String[]) -> getJavaFileObjects
    void setLocation(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.Iterable) -> setLocation
    void setLocationFromPaths(org.openjdk.javax.tools.JavaFileManager$Location,java.util.Collection) -> setLocationFromPaths
    java.lang.Iterable getLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> getLocation
    java.lang.Iterable getLocationAsPaths(org.openjdk.javax.tools.JavaFileManager$Location) -> getLocationAsPaths
    java.nio.file.Path asPath(org.openjdk.javax.tools.FileObject) -> asPath
    void setPathFactory(org.openjdk.javax.tools.StandardJavaFileManager$PathFactory) -> setPathFactory
org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedTaskListener -> org.openjdk.tools.javac.api.ClientCodeWrapper$WrappedTaskListener:
    org.openjdk.source.util.TaskListener clientTaskListener -> clientTaskListener
    org.openjdk.tools.javac.api.ClientCodeWrapper this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.ClientCodeWrapper,org.openjdk.source.util.TaskListener) -> <init>
    void started(org.openjdk.source.util.TaskEvent) -> started
    void finished(org.openjdk.source.util.TaskEvent) -> finished
    java.lang.String toString() -> toString
org.openjdk.tools.javac.api.DiagnosticFormatter -> org.openjdk.tools.javac.api.DiagnosticFormatter:
    boolean displaySource(org.openjdk.javax.tools.Diagnostic) -> displaySource
    java.lang.String format(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> format
    java.lang.String formatMessage(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> formatMessage
    java.lang.String formatKind(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> formatKind
    java.lang.String formatSource(org.openjdk.javax.tools.Diagnostic,boolean,java.util.Locale) -> formatSource
    java.lang.String formatPosition(org.openjdk.javax.tools.Diagnostic,org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind,java.util.Locale) -> formatPosition
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration getConfiguration() -> getConfiguration
org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration -> org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration:
    void setVisible(java.util.Set) -> setVisible
    java.util.Set getVisible() -> getVisible
    void setMultilineLimit(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit,int) -> setMultilineLimit
    int getMultilineLimit(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit) -> getMultilineLimit
org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart -> org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart:
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart SUMMARY -> SUMMARY
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart DETAILS -> DETAILS
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart SOURCE -> SOURCE
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart SUBDIAGNOSTICS -> SUBDIAGNOSTICS
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart JLS -> JLS
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart[] $VALUES -> $VALUES
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart[] values() -> values
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit -> org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit:
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit DEPTH -> DEPTH
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit LENGTH -> LENGTH
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit[] $VALUES -> $VALUES
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit[] values() -> values
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind -> org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind:
    org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind START -> START
    org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind END -> END
    org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind LINE -> LINE
    org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind COLUMN -> COLUMN
    org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind OFFSET -> OFFSET
    org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind[] values() -> values
    org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.api.Formattable -> org.openjdk.tools.javac.api.Formattable:
    java.lang.String toString(java.util.Locale,org.openjdk.tools.javac.api.Messages) -> toString
    java.lang.String getKind() -> getKind
org.openjdk.tools.javac.api.Formattable$LocalizedString -> org.openjdk.tools.javac.api.Formattable$LocalizedString:
    java.lang.String key -> key
    void <init>(java.lang.String) -> <init>
    java.lang.String toString(java.util.Locale,org.openjdk.tools.javac.api.Messages) -> toString
    java.lang.String getKind() -> getKind
    java.lang.String toString() -> toString
org.openjdk.tools.javac.api.JavacScope -> org.openjdk.tools.javac.api.JavacScope:
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.api.JavacScope create(org.openjdk.tools.javac.comp.Env) -> create
    void <init>(org.openjdk.tools.javac.comp.Env) -> <init>
    org.openjdk.tools.javac.api.JavacScope getEnclosingScope() -> getEnclosingScope
    org.openjdk.javax.lang.model.element.TypeElement getEnclosingClass() -> getEnclosingClass
    org.openjdk.javax.lang.model.element.ExecutableElement getEnclosingMethod() -> getEnclosingMethod
    java.lang.Iterable getLocalElements() -> getLocalElements
    org.openjdk.tools.javac.comp.Env getEnv() -> getEnv
    boolean isStarImportScope() -> isStarImportScope
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.openjdk.source.tree.Scope getEnclosingScope() -> getEnclosingScope
    void <init>(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.api.JavacScope$1) -> <init>
org.openjdk.tools.javac.api.JavacScope$1 -> org.openjdk.tools.javac.api.JavacScope$1:
    void <init>(org.openjdk.tools.javac.comp.Env) -> <init>
    java.lang.Iterable getLocalElements() -> getLocalElements
    org.openjdk.source.tree.Scope getEnclosingScope() -> getEnclosingScope
org.openjdk.tools.javac.api.JavacScope$2 -> org.openjdk.tools.javac.api.JavacScope$2:
    org.openjdk.tools.javac.api.JavacScope this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacScope,org.openjdk.tools.javac.comp.Env) -> <init>
    boolean isStarImportScope() -> isStarImportScope
    org.openjdk.tools.javac.api.JavacScope getEnclosingScope() -> getEnclosingScope
    java.lang.Iterable getLocalElements() -> getLocalElements
    org.openjdk.source.tree.Scope getEnclosingScope() -> getEnclosingScope
org.openjdk.tools.javac.api.JavacTaskImpl -> org.openjdk.tools.javac.api.JavacTaskImpl:
    org.openjdk.tools.javac.main.Arguments args -> args
    org.openjdk.tools.javac.main.JavaCompiler compiler -> compiler
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    java.util.Locale locale -> locale
    java.util.Map notYetEntered -> notYetEntered
    org.openjdk.tools.javac.util.ListBuffer genList -> genList
    java.util.concurrent.atomic.AtomicBoolean used -> used
    java.lang.Iterable processors -> processors
    org.openjdk.tools.javac.util.ListBuffer addModules -> addModules
    boolean parsed -> parsed
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.lang.Boolean call() -> call
    org.openjdk.tools.javac.main.Main$Result doCall() -> doCall
    void addModules(java.lang.Iterable) -> addModules
    void setProcessors(java.lang.Iterable) -> setProcessors
    void setLocale(java.util.Locale) -> setLocale
    java.lang.Object handleExceptions(java.util.concurrent.Callable,java.lang.Object,java.lang.Object) -> handleExceptions
    void prepareCompiler(boolean) -> prepareCompiler
    java.lang.String toString(java.lang.Iterable,java.lang.String) -> toString
    void cleanup() -> cleanup
    java.lang.Iterable parse() -> parse
    java.lang.Iterable parseInternal() -> parseInternal
    java.lang.Iterable enter() -> enter
    java.lang.Iterable enter(java.lang.Iterable) -> enter
    java.lang.Iterable analyze() -> analyze
    java.lang.Iterable analyze(java.lang.Iterable) -> analyze
    void handleFlowResults(java.util.Queue,org.openjdk.tools.javac.util.ListBuffer) -> handleFlowResults
    java.lang.Iterable generate() -> generate
    java.lang.Iterable generate(java.lang.Iterable) -> generate
    java.lang.Iterable pathFor(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.tree.Tree) -> pathFor
    void ensureEntered() -> ensureEntered
    org.openjdk.tools.javac.code.Type parseType(java.lang.String,org.openjdk.javax.lang.model.element.TypeElement) -> parseType
    java.lang.Object call() -> call
    java.lang.Iterable lambda$generate$2() -> lambda$generate$2
    java.lang.Iterable lambda$analyze$1() -> lambda$analyze$1
    org.openjdk.tools.javac.main.Main$Result lambda$doCall$0() -> lambda$doCall$0
    org.openjdk.tools.javac.main.JavaCompiler access$000(org.openjdk.tools.javac.api.JavacTaskImpl) -> access$000
    void access$100(org.openjdk.tools.javac.api.JavacTaskImpl,java.util.Queue,org.openjdk.tools.javac.util.ListBuffer) -> access$100
org.openjdk.tools.javac.api.JavacTaskImpl$1 -> org.openjdk.tools.javac.api.JavacTaskImpl$1:
    org.openjdk.tools.javac.util.ListBuffer val$results -> val$results
    org.openjdk.tools.javac.api.JavacTaskImpl this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacTaskImpl,org.openjdk.tools.javac.util.ListBuffer) -> <init>
    void process(org.openjdk.tools.javac.comp.Env) -> process
org.openjdk.tools.javac.api.JavacTaskImpl$2 -> org.openjdk.tools.javac.api.JavacTaskImpl$2:
    org.openjdk.tools.javac.util.ListBuffer val$results -> val$results
    org.openjdk.tools.javac.api.JavacTaskImpl this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacTaskImpl,org.openjdk.tools.javac.util.ListBuffer) -> <init>
    void process(org.openjdk.tools.javac.comp.Env) -> process
org.openjdk.tools.javac.api.JavacTaskImpl$3 -> org.openjdk.tools.javac.api.JavacTaskImpl$3:
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.api.JavacTaskImpl$Filter -> org.openjdk.tools.javac.api.JavacTaskImpl$Filter:
    org.openjdk.tools.javac.api.JavacTaskImpl this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacTaskImpl) -> <init>
    void run(java.util.Queue,java.lang.Iterable) -> run
    void process(org.openjdk.tools.javac.comp.Env) -> process
org.openjdk.tools.javac.api.JavacTool -> org.openjdk.tools.javac.api.JavacTool:
    void <init>() -> <init>
    java.lang.String name() -> name
    org.openjdk.tools.javac.api.JavacTool create() -> create
    org.openjdk.tools.javac.file.JavacFileManager getStandardFileManager(org.openjdk.javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset) -> getStandardFileManager
    org.openjdk.source.util.JavacTask getTask(java.io.Writer,org.openjdk.javax.tools.JavaFileManager,org.openjdk.javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> getTask
    org.openjdk.source.util.JavacTask getTask(java.io.Writer,org.openjdk.javax.tools.JavaFileManager,org.openjdk.javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,org.openjdk.tools.javac.util.Context) -> getTask
    int run(java.io.InputStream,java.io.OutputStream,java.io.OutputStream,java.lang.String[]) -> run
    java.util.Set getSourceVersions() -> getSourceVersions
    int isSupportedOption(java.lang.String) -> isSupportedOption
    org.openjdk.javax.tools.StandardJavaFileManager getStandardFileManager(org.openjdk.javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset) -> getStandardFileManager
    org.openjdk.javax.tools.JavaCompiler$CompilationTask getTask(java.io.Writer,org.openjdk.javax.tools.JavaFileManager,org.openjdk.javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> getTask
org.openjdk.tools.javac.api.JavacTrees -> org.openjdk.tools.javac.api.JavacTrees:
    org.openjdk.tools.javac.comp.Modules modules -> modules
    org.openjdk.tools.javac.comp.Resolve resolve -> resolve
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.comp.MemberEnter memberEnter -> memberEnter
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.tree.TreeMaker treeMaker -> treeMaker
    org.openjdk.tools.javac.model.JavacElements elements -> elements
    org.openjdk.tools.javac.api.JavacTaskImpl javacTaskImpl -> javacTaskImpl
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.tree.DocTreeMaker docTreeMaker -> docTreeMaker
    java.text.BreakIterator breakIterator -> breakIterator
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.parser.ParserFactory parser -> parser
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Types$TypeRelation fuzzyMatcher -> fuzzyMatcher
    org.openjdk.tools.javac.api.JavacTrees instance(org.openjdk.javax.tools.JavaCompiler$CompilationTask) -> instance
    org.openjdk.tools.javac.api.JavacTrees instance(org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> instance
    org.openjdk.tools.javac.api.JavacTrees instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void updateContext(org.openjdk.tools.javac.util.Context) -> updateContext
    void init(org.openjdk.tools.javac.util.Context) -> init
    java.text.BreakIterator getBreakIterator() -> getBreakIterator
    org.openjdk.source.util.DocSourcePositions getSourcePositions() -> getSourcePositions
    org.openjdk.tools.javac.tree.DocTreeMaker getDocTreeFactory() -> getDocTreeFactory
    org.openjdk.source.doctree.DocTree getLastChild(org.openjdk.source.doctree.DocTree) -> getLastChild
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl getTree(org.openjdk.javax.lang.model.element.TypeElement) -> getTree
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl getTree(org.openjdk.javax.lang.model.element.ExecutableElement) -> getTree
    org.openjdk.tools.javac.tree.JCTree getTree(org.openjdk.javax.lang.model.element.Element) -> getTree
    org.openjdk.tools.javac.tree.JCTree getTree(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror) -> getTree
    org.openjdk.tools.javac.tree.JCTree getTree(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.AnnotationValue) -> getTree
    org.openjdk.source.util.TreePath getPath(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.tree.Tree) -> getPath
    org.openjdk.source.util.TreePath getPath(org.openjdk.javax.lang.model.element.Element) -> getPath
    org.openjdk.source.util.TreePath getPath(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror) -> getPath
    org.openjdk.source.util.TreePath getPath(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.AnnotationValue) -> getPath
    org.openjdk.tools.javac.code.Symbol getElement(org.openjdk.source.util.TreePath) -> getElement
    org.openjdk.javax.lang.model.element.Element getElement(org.openjdk.source.util.DocTreePath) -> getElement
    java.util.List getFirstSentence(java.util.List) -> getFirstSentence
    org.openjdk.tools.javac.code.Symbol attributeDocReference(org.openjdk.source.util.TreePath,org.openjdk.tools.javac.tree.DCTree$DCReference) -> attributeDocReference
    org.openjdk.tools.javac.code.Symbol attributeParamIdentifier(org.openjdk.source.util.TreePath,org.openjdk.tools.javac.tree.DCTree$DCParam) -> attributeParamIdentifier
    org.openjdk.tools.javac.code.Symbol$VarSymbol findField(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.Name) -> findField
    org.openjdk.tools.javac.code.Symbol$VarSymbol searchField(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.Name,java.util.Set) -> searchField
    org.openjdk.tools.javac.code.Symbol$MethodSymbol findConstructor(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.List) -> findConstructor
    org.openjdk.tools.javac.code.Symbol$MethodSymbol findMethod(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> findMethod
    org.openjdk.tools.javac.code.Symbol$MethodSymbol searchMethod(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,java.util.Set) -> searchMethod
    boolean hasParameterTypes(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.util.List) -> hasParameterTypes
    boolean fuzzyMatch(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> fuzzyMatch
    boolean fuzzyMatch(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> fuzzyMatch
    org.openjdk.javax.lang.model.type.TypeMirror getTypeMirror(org.openjdk.source.util.TreePath) -> getTypeMirror
    org.openjdk.tools.javac.api.JavacScope getScope(org.openjdk.source.util.TreePath) -> getScope
    java.lang.String getDocComment(org.openjdk.source.util.TreePath) -> getDocComment
    org.openjdk.source.doctree.DocCommentTree getDocCommentTree(org.openjdk.source.util.TreePath) -> getDocCommentTree
    org.openjdk.source.doctree.DocCommentTree getDocCommentTree(org.openjdk.javax.lang.model.element.Element) -> getDocCommentTree
    org.openjdk.source.doctree.DocCommentTree getDocCommentTree(org.openjdk.javax.lang.model.element.Element,java.lang.String) -> getDocCommentTree
    boolean isAccessible(org.openjdk.source.tree.Scope,org.openjdk.javax.lang.model.element.TypeElement) -> isAccessible
    boolean isAccessible(org.openjdk.source.tree.Scope,org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.type.DeclaredType) -> isAccessible
    org.openjdk.tools.javac.comp.Env getAttrContext(org.openjdk.source.util.TreePath) -> getAttrContext
    org.openjdk.tools.javac.comp.Env attribStatToTree(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree) -> attribStatToTree
    org.openjdk.tools.javac.comp.Env attribExprToTree(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree) -> attribExprToTree
    org.openjdk.javax.tools.JavaFileObject asJavaFileObject(org.openjdk.javax.tools.FileObject) -> asJavaFileObject
    void checkHtmlKind(org.openjdk.javax.tools.FileObject) -> checkHtmlKind
    void checkHtmlKind(org.openjdk.javax.tools.FileObject,org.openjdk.javax.tools.JavaFileObject$Kind) -> checkHtmlKind
    org.openjdk.source.doctree.DocCommentTree getDocCommentTree(org.openjdk.javax.tools.FileObject) -> getDocCommentTree
    org.openjdk.source.util.DocTreePath getDocTreePath(org.openjdk.javax.tools.FileObject,org.openjdk.javax.lang.model.element.PackageElement) -> getDocTreePath
    void setBreakIterator(java.text.BreakIterator) -> setBreakIterator
    org.openjdk.tools.javac.api.JavacTrees$Copier createCopier(org.openjdk.tools.javac.tree.TreeMaker) -> createCopier
    org.openjdk.javax.lang.model.type.TypeMirror getOriginalType(org.openjdk.javax.lang.model.type.ErrorType) -> getOriginalType
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.source.tree.Tree,org.openjdk.source.tree.CompilationUnitTree) -> printMessage
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.source.doctree.DocTree,org.openjdk.source.doctree.DocCommentTree,org.openjdk.source.tree.CompilationUnitTree) -> printMessage
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.source.tree.CompilationUnitTree) -> printMessage
    org.openjdk.javax.lang.model.type.TypeMirror getLub(org.openjdk.source.tree.CatchTree) -> getLub
    org.openjdk.source.util.TreePath makeTreePath(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.javax.tools.JavaFileObject,org.openjdk.source.doctree.DocCommentTree) -> makeTreePath
    org.openjdk.source.util.DocTreeFactory getDocTreeFactory() -> getDocTreeFactory
    org.openjdk.source.tree.Scope getScope(org.openjdk.source.util.TreePath) -> getScope
    org.openjdk.javax.lang.model.element.Element getElement(org.openjdk.source.util.TreePath) -> getElement
    org.openjdk.source.tree.Tree getTree(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.AnnotationValue) -> getTree
    org.openjdk.source.tree.Tree getTree(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror) -> getTree
    org.openjdk.source.tree.MethodTree getTree(org.openjdk.javax.lang.model.element.ExecutableElement) -> getTree
    org.openjdk.source.tree.ClassTree getTree(org.openjdk.javax.lang.model.element.TypeElement) -> getTree
    org.openjdk.source.tree.Tree getTree(org.openjdk.javax.lang.model.element.Element) -> getTree
    org.openjdk.source.util.SourcePositions getSourcePositions() -> getSourcePositions
    org.openjdk.tools.javac.util.Names access$000(org.openjdk.tools.javac.api.JavacTrees) -> access$000
    org.openjdk.source.doctree.DocTree access$100(org.openjdk.tools.javac.api.JavacTrees,org.openjdk.source.doctree.DocTree) -> access$100
    org.openjdk.tools.javac.code.Types access$200(org.openjdk.tools.javac.api.JavacTrees) -> access$200
org.openjdk.tools.javac.api.JavacTrees$1 -> org.openjdk.tools.javac.api.JavacTrees$1:
    org.openjdk.tools.javac.api.JavacTrees this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacTrees) -> <init>
    long getStartPosition(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.tree.Tree) -> getStartPosition
    long getEndPosition(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.tree.Tree) -> getEndPosition
    long getStartPosition(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.doctree.DocCommentTree,org.openjdk.source.doctree.DocTree) -> getStartPosition
    long getEndPosition(org.openjdk.source.tree.CompilationUnitTree,org.openjdk.source.doctree.DocCommentTree,org.openjdk.source.doctree.DocTree) -> getEndPosition
org.openjdk.tools.javac.api.JavacTrees$2 -> org.openjdk.tools.javac.api.JavacTrees$2:
    org.openjdk.source.doctree.DocTree[] val$last -> val$last
    org.openjdk.tools.javac.api.JavacTrees this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacTrees,org.openjdk.source.doctree.DocTree[]) -> <init>
    java.lang.Void scan(org.openjdk.source.doctree.DocTree,java.lang.Void) -> scan
    java.lang.Object scan(org.openjdk.source.doctree.DocTree,java.lang.Object) -> scan
org.openjdk.tools.javac.api.JavacTrees$3 -> org.openjdk.tools.javac.api.JavacTrees$3:
    org.openjdk.tools.javac.api.JavacTrees this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacTrees) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> visitType
    java.lang.Boolean visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.code.Type) -> visitArrayType
    java.lang.Boolean visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Type) -> visitClassType
    java.lang.Boolean visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Type) -> visitErrorType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.api.JavacTrees$4 -> org.openjdk.tools.javac.api.JavacTrees$4:
    int offset -> offset
    org.openjdk.javax.tools.FileObject val$fileObject -> val$fileObject
    org.openjdk.tools.javac.api.JavacTrees this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacTrees,org.openjdk.javax.tools.FileObject) -> <init>
    java.lang.String getText() -> getText
    int getSourcePos(int) -> getSourcePos
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle getStyle() -> getStyle
    boolean isDeprecated() -> isDeprecated
org.openjdk.tools.javac.api.JavacTrees$5 -> org.openjdk.tools.javac.api.JavacTrees$5:
    org.openjdk.javax.tools.JavaFileObject val$jfo -> val$jfo
    org.openjdk.tools.javac.api.JavacTrees this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacTrees,org.openjdk.tools.javac.util.List,org.openjdk.javax.tools.JavaFileObject) -> <init>
    int getPos() -> getPos
    org.openjdk.javax.tools.JavaFileObject getSourcefile() -> getSourcefile
    org.openjdk.tools.javac.util.Position$LineMap getLineMap() -> getLineMap
    org.openjdk.source.tree.LineMap getLineMap() -> getLineMap
org.openjdk.tools.javac.api.JavacTrees$6 -> org.openjdk.tools.javac.api.JavacTrees$6:
    org.openjdk.source.doctree.DocCommentTree val$dcTree -> val$dcTree
    org.openjdk.tools.javac.api.JavacTrees this$0 -> this$0
    void <init>(org.openjdk.tools.javac.api.JavacTrees,org.openjdk.source.doctree.DocCommentTree) -> <init>
    boolean hasComment(org.openjdk.tools.javac.tree.JCTree) -> hasComment
    org.openjdk.tools.javac.parser.Tokens$Comment getComment(org.openjdk.tools.javac.tree.JCTree) -> getComment
    java.lang.String getCommentText(org.openjdk.tools.javac.tree.JCTree) -> getCommentText
    org.openjdk.tools.javac.tree.DCTree$DCDocComment getCommentTree(org.openjdk.tools.javac.tree.JCTree) -> getCommentTree
    void putComment(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.parser.Tokens$Comment) -> putComment
org.openjdk.tools.javac.api.JavacTrees$7 -> org.openjdk.tools.javac.api.JavacTrees$7:
    int[] $SwitchMap$com$sun$source$doctree$DocTree$Kind -> $SwitchMap$com$sun$source$doctree$DocTree$Kind
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    int[] $SwitchMap$com$sun$source$tree$Tree$Kind -> $SwitchMap$com$sun$source$tree$Tree$Kind
    int[] $SwitchMap$javax$tools$Diagnostic$Kind -> $SwitchMap$javax$tools$Diagnostic$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.api.JavacTrees$Copier -> org.openjdk.tools.javac.api.JavacTrees$Copier:
    org.openjdk.tools.javac.tree.JCTree leafCopy -> leafCopy
    void <init>(org.openjdk.tools.javac.tree.TreeMaker) -> <init>
    org.openjdk.tools.javac.tree.JCTree copy(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> copy
    org.openjdk.tools.javac.tree.JCTree copy(org.openjdk.tools.javac.tree.JCTree,java.lang.Object) -> copy
org.openjdk.tools.javac.api.JavacTrees$HtmlFileObject -> org.openjdk.tools.javac.api.JavacTrees$HtmlFileObject:
    void <init>(org.openjdk.javax.tools.FileObject) -> <init>
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
org.openjdk.tools.javac.api.Messages -> org.openjdk.tools.javac.api.Messages:
    void add(java.lang.String) -> add
    java.lang.String getLocalizedString(java.util.Locale,java.lang.String,java.lang.Object[]) -> getLocalizedString
org.openjdk.tools.javac.api.MultiTaskListener -> org.openjdk.tools.javac.api.MultiTaskListener:
    org.openjdk.tools.javac.util.Context$Key taskListenerKey -> taskListenerKey
    org.openjdk.source.util.TaskListener[] EMPTY_LISTENERS -> EMPTY_LISTENERS
    org.openjdk.source.util.TaskListener[] listeners -> listeners
    org.openjdk.tools.javac.api.ClientCodeWrapper ccw -> ccw
    org.openjdk.tools.javac.api.MultiTaskListener instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.util.Collection getTaskListeners() -> getTaskListeners
    boolean isEmpty() -> isEmpty
    void add(org.openjdk.source.util.TaskListener) -> add
    void remove(org.openjdk.source.util.TaskListener) -> remove
    void started(org.openjdk.source.util.TaskEvent) -> started
    void finished(org.openjdk.source.util.TaskEvent) -> finished
    java.lang.String toString() -> toString
    void clear() -> clear
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.api.WrappingJavaFileManager -> org.openjdk.tools.javac.api.WrappingJavaFileManager:
    void <init>(org.openjdk.javax.tools.JavaFileManager) -> <init>
    org.openjdk.javax.tools.FileObject wrap(org.openjdk.javax.tools.FileObject) -> wrap
    org.openjdk.javax.tools.JavaFileObject wrap(org.openjdk.javax.tools.JavaFileObject) -> wrap
    org.openjdk.javax.tools.FileObject unwrap(org.openjdk.javax.tools.FileObject) -> unwrap
    org.openjdk.javax.tools.JavaFileObject unwrap(org.openjdk.javax.tools.JavaFileObject) -> unwrap
    java.lang.Iterable wrap(java.lang.Iterable) -> wrap
    java.net.URI unwrap(java.net.URI) -> unwrap
    java.lang.Iterable list(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.util.Set,boolean) -> list
    java.lang.String inferBinaryName(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> inferBinaryName
    org.openjdk.javax.tools.JavaFileObject getJavaFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> getJavaFileForInput
    org.openjdk.javax.tools.JavaFileObject getJavaFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind,org.openjdk.javax.tools.FileObject) -> getJavaFileForOutput
    org.openjdk.javax.tools.FileObject getFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String) -> getFileForInput
    org.openjdk.javax.tools.FileObject getFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String,org.openjdk.javax.tools.FileObject) -> getFileForOutput
    boolean contains(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.FileObject) -> contains
org.openjdk.tools.javac.code.AnnoConstruct -> org.openjdk.tools.javac.code.AnnoConstruct:
    void <init>() -> <init>
    org.openjdk.tools.javac.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Attribute$Compound getAttribute(java.lang.Class) -> getAttribute
    java.lang.annotation.Annotation[] getInheritedAnnotations(java.lang.Class) -> getInheritedAnnotations
    java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Class) -> getAnnotationsByType
    org.openjdk.tools.javac.code.Attribute$Compound[] unpackContained(org.openjdk.tools.javac.code.Attribute$Compound) -> unpackContained
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.Class getContainer(java.lang.Class) -> getContainer
    org.openjdk.tools.javac.code.Attribute[] unpackAttributes(org.openjdk.tools.javac.code.Attribute$Compound) -> unpackAttributes
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
org.openjdk.tools.javac.code.Attribute -> org.openjdk.tools.javac.code.Attribute:
    org.openjdk.tools.javac.code.Type type -> type
    void <init>(org.openjdk.tools.javac.code.Type) -> <init>
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    java.lang.Object getValue() -> getValue
    java.lang.Object accept(org.openjdk.javax.lang.model.element.AnnotationValueVisitor,java.lang.Object) -> accept
    boolean isSynthesized() -> isSynthesized
    org.openjdk.tools.javac.code.TypeAnnotationPosition getPosition() -> getPosition
org.openjdk.tools.javac.code.Attribute$1 -> org.openjdk.tools.javac.code.Attribute$1:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Attribute$Array -> org.openjdk.tools.javac.code.Attribute$Array:
    org.openjdk.tools.javac.code.Attribute[] values -> values
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Attribute[]) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.util.List getValue() -> getValue
    java.lang.Object accept(org.openjdk.javax.lang.model.element.AnnotationValueVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.TypeAnnotationPosition getPosition() -> getPosition
    java.lang.Object getValue() -> getValue
org.openjdk.tools.javac.code.Attribute$Class -> org.openjdk.tools.javac.code.Attribute$Class:
    org.openjdk.tools.javac.code.Type classType -> classType
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    void <init>(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type) -> <init>
    org.openjdk.tools.javac.code.Type makeClassType(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type) -> makeClassType
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Type getValue() -> getValue
    java.lang.Object accept(org.openjdk.javax.lang.model.element.AnnotationValueVisitor,java.lang.Object) -> accept
    java.lang.Object getValue() -> getValue
org.openjdk.tools.javac.code.Attribute$Compound -> org.openjdk.tools.javac.code.Attribute$Compound:
    org.openjdk.tools.javac.util.List values -> values
    org.openjdk.tools.javac.code.TypeAnnotationPosition position -> position
    boolean synthesized -> synthesized
    boolean isSynthesized() -> isSynthesized
    void setSynthesized(boolean) -> setSynthesized
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.TypeAnnotationPosition) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.code.TypeAnnotationPosition getPosition() -> getPosition
    boolean isContainerTypeCompound() -> isContainerTypeCompound
    org.openjdk.tools.javac.code.Attribute$Compound getFirstEmbeddedTC() -> getFirstEmbeddedTC
    boolean tryFixPosition() -> tryFixPosition
    boolean hasUnknownPosition() -> hasUnknownPosition
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Attribute member(org.openjdk.tools.javac.util.Name) -> member
    org.openjdk.tools.javac.util.Pair getElemPair(org.openjdk.tools.javac.util.Name) -> getElemPair
    org.openjdk.tools.javac.code.Attribute$Compound getValue() -> getValue
    java.lang.Object accept(org.openjdk.javax.lang.model.element.AnnotationValueVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.type.DeclaredType getAnnotationType() -> getAnnotationType
    java.util.Map getElementValues() -> getElementValues
    java.lang.Object getValue() -> getValue
org.openjdk.tools.javac.code.Attribute$Constant -> org.openjdk.tools.javac.code.Attribute$Constant:
    java.lang.Object value -> value
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    void <init>(org.openjdk.tools.javac.code.Type,java.lang.Object) -> <init>
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
    java.lang.Object accept(org.openjdk.javax.lang.model.element.AnnotationValueVisitor,java.lang.Object) -> accept
org.openjdk.tools.javac.code.Attribute$Enum -> org.openjdk.tools.javac.code.Attribute$Enum:
    org.openjdk.tools.javac.code.Symbol$VarSymbol value -> value
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$VarSymbol) -> <init>
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Symbol$VarSymbol getValue() -> getValue
    java.lang.Object accept(org.openjdk.javax.lang.model.element.AnnotationValueVisitor,java.lang.Object) -> accept
    java.lang.Object getValue() -> getValue
org.openjdk.tools.javac.code.Attribute$Error -> org.openjdk.tools.javac.code.Attribute$Error:
    void <init>(org.openjdk.tools.javac.code.Type) -> <init>
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    java.lang.String toString() -> toString
    java.lang.String getValue() -> getValue
    java.lang.Object accept(org.openjdk.javax.lang.model.element.AnnotationValueVisitor,java.lang.Object) -> accept
    java.lang.Object getValue() -> getValue
org.openjdk.tools.javac.code.Attribute$RetentionPolicy -> org.openjdk.tools.javac.code.Attribute$RetentionPolicy:
    org.openjdk.tools.javac.code.Attribute$RetentionPolicy SOURCE -> SOURCE
    org.openjdk.tools.javac.code.Attribute$RetentionPolicy CLASS -> CLASS
    org.openjdk.tools.javac.code.Attribute$RetentionPolicy RUNTIME -> RUNTIME
    org.openjdk.tools.javac.code.Attribute$RetentionPolicy[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Attribute$RetentionPolicy[] values() -> values
    org.openjdk.tools.javac.code.Attribute$RetentionPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Attribute$TypeCompound -> org.openjdk.tools.javac.code.Attribute$TypeCompound:
    void <init>(org.openjdk.tools.javac.code.Attribute$Compound,org.openjdk.tools.javac.code.TypeAnnotationPosition) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.TypeAnnotationPosition) -> <init>
org.openjdk.tools.javac.code.Attribute$UnresolvedClass -> org.openjdk.tools.javac.code.Attribute$UnresolvedClass:
    org.openjdk.tools.javac.code.Type classType -> classType
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> <init>
org.openjdk.tools.javac.code.Attribute$Visitor -> org.openjdk.tools.javac.code.Attribute$Visitor:
    void visitConstant(org.openjdk.tools.javac.code.Attribute$Constant) -> visitConstant
    void visitClass(org.openjdk.tools.javac.code.Attribute$Class) -> visitClass
    void visitCompound(org.openjdk.tools.javac.code.Attribute$Compound) -> visitCompound
    void visitArray(org.openjdk.tools.javac.code.Attribute$Array) -> visitArray
    void visitEnum(org.openjdk.tools.javac.code.Attribute$Enum) -> visitEnum
    void visitError(org.openjdk.tools.javac.code.Attribute$Error) -> visitError
org.openjdk.tools.javac.code.BoundKind -> org.openjdk.tools.javac.code.BoundKind:
    org.openjdk.tools.javac.code.BoundKind EXTENDS -> EXTENDS
    org.openjdk.tools.javac.code.BoundKind SUPER -> SUPER
    org.openjdk.tools.javac.code.BoundKind UNBOUND -> UNBOUND
    java.lang.String name -> name
    org.openjdk.tools.javac.code.BoundKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.BoundKind[] values() -> values
    org.openjdk.tools.javac.code.BoundKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.ClassFinder -> org.openjdk.tools.javac.code.ClassFinder:
    org.openjdk.tools.javac.util.Context$Key classFinderKey -> classFinderKey
    org.openjdk.tools.javac.jvm.ClassReader reader -> reader
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    boolean verbose -> verbose
    boolean cacheCompletionFailure -> cacheCompletionFailure
    boolean preferSource -> preferSource
    boolean userPathsFirst -> userPathsFirst
    boolean allowSigFiles -> allowSigFiles
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.Name completionFailureName -> completionFailureName
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.util.Dependencies dependencies -> dependencies
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diagFactory -> diagFactory
    org.openjdk.tools.javac.code.Symbol$Completer sourceCompleter -> sourceCompleter
    org.openjdk.javax.tools.JavaFileObject currentClassFile -> currentClassFile
    org.openjdk.tools.javac.code.Symbol currentOwner -> currentOwner
    org.openjdk.tools.javac.jvm.Profile profile -> profile
    org.openjdk.tools.javac.file.JRTIndex jrtIndex -> jrtIndex
    org.openjdk.tools.javac.code.Symbol$Completer thisCompleter -> thisCompleter
    java.util.Map supplementaryFlags -> supplementaryFlags
    org.openjdk.tools.javac.code.Symbol$CompletionFailure cachedCompletionFailure -> cachedCompletionFailure
    org.openjdk.javax.tools.JavaFileManager$Location currentLoc -> currentLoc
    boolean verbosePath -> verbosePath
    boolean preferCurrent -> preferCurrent
    org.openjdk.tools.javac.code.Symbol$Completer getCompleter() -> getCompleter
    org.openjdk.tools.javac.code.ClassFinder instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    long getSupplementaryFlags(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> getSupplementaryFlags
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    void completeOwners(org.openjdk.tools.javac.code.Symbol) -> completeOwners
    void completeEnclosing(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> completeEnclosing
    void fillIn(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> fillIn
    org.openjdk.tools.javac.code.Symbol$CompletionFailure classFileNotFound(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> classFileNotFound
    org.openjdk.tools.javac.code.Symbol$CompletionFailure newCompletionFailure(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.JCDiagnostic) -> newCompletionFailure
    org.openjdk.tools.javac.code.Symbol$ClassSymbol loadClass(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> loadClass
    void includeClassFile(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.javax.tools.JavaFileObject) -> includeClassFile
    org.openjdk.javax.tools.JavaFileObject preferredFileObject(org.openjdk.javax.tools.JavaFileObject,org.openjdk.javax.tools.JavaFileObject) -> preferredFileObject
    java.util.EnumSet getPackageFileKinds() -> getPackageFileKinds
    void extraFileActions(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.javax.tools.JavaFileObject) -> extraFileActions
    void fillIn(org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> fillIn
    void scanModulePaths(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> scanModulePaths
    void scanUserPaths(org.openjdk.tools.javac.code.Symbol$PackageSymbol,boolean) -> scanUserPaths
    void scanPlatformPath(org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> scanPlatformPath
    void fillIn(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.javax.tools.JavaFileManager$Location,java.lang.Iterable) -> fillIn
    boolean isSigFile(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> isSigFile
    java.lang.Iterable list(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.tools.javac.code.Symbol$PackageSymbol,java.lang.String,java.util.Set) -> list
    java.util.Iterator lambda$list$1(java.lang.Iterable,org.openjdk.tools.javac.code.Symbol$PackageSymbol,java.util.Set) -> lambda$list$1
    java.lang.String lambda$loadClass$0(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> lambda$loadClass$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.ClassFinder$1 -> org.openjdk.tools.javac.code.ClassFinder$1:
    org.openjdk.javax.tools.JavaFileObject next -> next
    java.util.Iterator original -> original
    java.lang.Iterable val$listed -> val$listed
    org.openjdk.tools.javac.code.Symbol$PackageSymbol val$p -> val$p
    java.util.Set val$kinds -> val$kinds
    org.openjdk.tools.javac.code.ClassFinder this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.ClassFinder,java.lang.Iterable,org.openjdk.tools.javac.code.Symbol$PackageSymbol,java.util.Set) -> <init>
    boolean hasNext() -> hasNext
    org.openjdk.javax.tools.JavaFileObject next() -> next
    java.lang.Object next() -> next
org.openjdk.tools.javac.code.ClassFinder$2 -> org.openjdk.tools.javac.code.ClassFinder$2:
    int[] $SwitchMap$javax$tools$JavaFileObject$Kind -> $SwitchMap$javax$tools$JavaFileObject$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.ClassFinder$BadClassFile -> org.openjdk.tools.javac.code.ClassFinder$BadClassFile:
    long serialVersionUID -> serialVersionUID
    void <init>(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Factory) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic createBadClassFileDiagnostic(org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Factory) -> createBadClassFileDiagnostic
org.openjdk.tools.javac.code.ClassFinder$BadEnclosingMethodAttr -> org.openjdk.tools.javac.code.ClassFinder$BadEnclosingMethodAttr:
    long serialVersionUID -> serialVersionUID
    void <init>(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Factory) -> <init>
org.openjdk.tools.javac.code.DeferredLintHandler -> org.openjdk.tools.javac.code.DeferredLintHandler:
    org.openjdk.tools.javac.util.Context$Key deferredLintHandlerKey -> deferredLintHandlerKey
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition currentPos -> currentPos
    java.util.Map loggersQueue -> loggersQueue
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition IMMEDIATE_POSITION -> IMMEDIATE_POSITION
    org.openjdk.tools.javac.code.DeferredLintHandler instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void report(org.openjdk.tools.javac.code.DeferredLintHandler$LintLogger) -> report
    void flush(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> flush
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition setPos(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> setPos
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition immediate() -> immediate
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.DeferredLintHandler$1 -> org.openjdk.tools.javac.code.DeferredLintHandler$1:
    void <init>() -> <init>
    org.openjdk.tools.javac.tree.JCTree getTree() -> getTree
    int getStartPosition() -> getStartPosition
    int getPreferredPosition() -> getPreferredPosition
    int getEndPosition(org.openjdk.tools.javac.tree.EndPosTable) -> getEndPosition
org.openjdk.tools.javac.code.DeferredLintHandler$LintLogger -> org.openjdk.tools.javac.code.DeferredLintHandler$LintLogger:
    void report() -> report
org.openjdk.tools.javac.code.Directive -> org.openjdk.tools.javac.code.Directive:
    void <init>() -> <init>
org.openjdk.tools.javac.code.Directive$ExportsDirective -> org.openjdk.tools.javac.code.Directive$ExportsDirective:
    org.openjdk.tools.javac.code.Symbol$PackageSymbol packge -> packge
    org.openjdk.tools.javac.util.List modules -> modules
    java.util.Set flags -> flags
    void <init>(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.tools.javac.util.List) -> <init>
    void <init>(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.tools.javac.util.List,java.util.Set) -> <init>
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind getKind() -> getKind
    org.openjdk.tools.javac.code.Symbol$PackageSymbol getPackage() -> getPackage
    java.util.List getTargetModules() -> getTargetModules
    java.lang.String toString() -> toString
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ModuleElement$DirectiveVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.element.PackageElement getPackage() -> getPackage
org.openjdk.tools.javac.code.Directive$ExportsFlag -> org.openjdk.tools.javac.code.Directive$ExportsFlag:
    org.openjdk.tools.javac.code.Directive$ExportsFlag SYNTHETIC -> SYNTHETIC
    org.openjdk.tools.javac.code.Directive$ExportsFlag MANDATED -> MANDATED
    int value -> value
    org.openjdk.tools.javac.code.Directive$ExportsFlag[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Directive$ExportsFlag[] values() -> values
    org.openjdk.tools.javac.code.Directive$ExportsFlag valueOf(java.lang.String) -> valueOf
    int value(java.util.Set) -> value
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Directive$OpensDirective -> org.openjdk.tools.javac.code.Directive$OpensDirective:
    org.openjdk.tools.javac.code.Symbol$PackageSymbol packge -> packge
    org.openjdk.tools.javac.util.List modules -> modules
    java.util.Set flags -> flags
    void <init>(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.tools.javac.util.List) -> <init>
    void <init>(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.tools.javac.util.List,java.util.Set) -> <init>
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind getKind() -> getKind
    org.openjdk.tools.javac.code.Symbol$PackageSymbol getPackage() -> getPackage
    java.util.List getTargetModules() -> getTargetModules
    java.lang.String toString() -> toString
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ModuleElement$DirectiveVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.element.PackageElement getPackage() -> getPackage
org.openjdk.tools.javac.code.Directive$OpensFlag -> org.openjdk.tools.javac.code.Directive$OpensFlag:
    org.openjdk.tools.javac.code.Directive$OpensFlag SYNTHETIC -> SYNTHETIC
    org.openjdk.tools.javac.code.Directive$OpensFlag MANDATED -> MANDATED
    int value -> value
    org.openjdk.tools.javac.code.Directive$OpensFlag[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Directive$OpensFlag[] values() -> values
    org.openjdk.tools.javac.code.Directive$OpensFlag valueOf(java.lang.String) -> valueOf
    int value(java.util.Set) -> value
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Directive$ProvidesDirective -> org.openjdk.tools.javac.code.Directive$ProvidesDirective:
    org.openjdk.tools.javac.code.Symbol$ClassSymbol service -> service
    org.openjdk.tools.javac.util.List impls -> impls
    void <init>(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind getKind() -> getKind
    org.openjdk.tools.javac.code.Symbol$ClassSymbol getService() -> getService
    org.openjdk.tools.javac.util.List getImplementations() -> getImplementations
    java.lang.String toString() -> toString
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ModuleElement$DirectiveVisitor,java.lang.Object) -> accept
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.List getImplementations() -> getImplementations
    org.openjdk.javax.lang.model.element.TypeElement getService() -> getService
org.openjdk.tools.javac.code.Directive$RequiresDirective -> org.openjdk.tools.javac.code.Directive$RequiresDirective:
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol module -> module
    java.util.Set flags -> flags
    void <init>(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> <init>
    void <init>(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.util.Set) -> <init>
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind getKind() -> getKind
    boolean isStatic() -> isStatic
    boolean isTransitive() -> isTransitive
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol getDependency() -> getDependency
    java.lang.String toString() -> toString
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ModuleElement$DirectiveVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.element.ModuleElement getDependency() -> getDependency
org.openjdk.tools.javac.code.Directive$RequiresFlag -> org.openjdk.tools.javac.code.Directive$RequiresFlag:
    org.openjdk.tools.javac.code.Directive$RequiresFlag TRANSITIVE -> TRANSITIVE
    org.openjdk.tools.javac.code.Directive$RequiresFlag STATIC_PHASE -> STATIC_PHASE
    org.openjdk.tools.javac.code.Directive$RequiresFlag SYNTHETIC -> SYNTHETIC
    org.openjdk.tools.javac.code.Directive$RequiresFlag MANDATED -> MANDATED
    org.openjdk.tools.javac.code.Directive$RequiresFlag EXTRA -> EXTRA
    int value -> value
    org.openjdk.tools.javac.code.Directive$RequiresFlag[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Directive$RequiresFlag[] values() -> values
    org.openjdk.tools.javac.code.Directive$RequiresFlag valueOf(java.lang.String) -> valueOf
    int value(java.util.Set) -> value
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Directive$UsesDirective -> org.openjdk.tools.javac.code.Directive$UsesDirective:
    org.openjdk.tools.javac.code.Symbol$ClassSymbol service -> service
    void <init>(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> <init>
    org.openjdk.javax.lang.model.element.ModuleElement$DirectiveKind getKind() -> getKind
    org.openjdk.tools.javac.code.Symbol$ClassSymbol getService() -> getService
    java.lang.String toString() -> toString
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ModuleElement$DirectiveVisitor,java.lang.Object) -> accept
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.openjdk.javax.lang.model.element.TypeElement getService() -> getService
org.openjdk.tools.javac.code.Flags -> org.openjdk.tools.javac.code.Flags:
    int PUBLIC -> PUBLIC
    int PRIVATE -> PRIVATE
    int PROTECTED -> PROTECTED
    int STATIC -> STATIC
    int FINAL -> FINAL
    int SYNCHRONIZED -> SYNCHRONIZED
    int VOLATILE -> VOLATILE
    int TRANSIENT -> TRANSIENT
    int NATIVE -> NATIVE
    int INTERFACE -> INTERFACE
    int ABSTRACT -> ABSTRACT
    int STRICTFP -> STRICTFP
    int SYNTHETIC -> SYNTHETIC
    int ANNOTATION -> ANNOTATION
    int ENUM -> ENUM
    int MANDATED -> MANDATED
    int StandardFlags -> StandardFlags
    int ACC_SUPER -> ACC_SUPER
    int ACC_BRIDGE -> ACC_BRIDGE
    int ACC_VARARGS -> ACC_VARARGS
    int ACC_MODULE -> ACC_MODULE
    int DEPRECATED -> DEPRECATED
    int HASINIT -> HASINIT
    int BLOCK -> BLOCK
    int NOOUTERTHIS -> NOOUTERTHIS
    int EXISTS -> EXISTS
    int COMPOUND -> COMPOUND
    int CLASS_SEEN -> CLASS_SEEN
    int SOURCE_SEEN -> SOURCE_SEEN
    int LOCKED -> LOCKED
    int UNATTRIBUTED -> UNATTRIBUTED
    int ANONCONSTR -> ANONCONSTR
    int ACYCLIC -> ACYCLIC
    long BRIDGE -> BRIDGE
    long PARAMETER -> PARAMETER
    long VARARGS -> VARARGS
    long ACYCLIC_ANN -> ACYCLIC_ANN
    long GENERATEDCONSTR -> GENERATEDCONSTR
    long HYPOTHETICAL -> HYPOTHETICAL
    long PROPRIETARY -> PROPRIETARY
    long UNION -> UNION
    long EFFECTIVELY_FINAL -> EFFECTIVELY_FINAL
    long CLASH -> CLASH
    long DEFAULT -> DEFAULT
    long AUXILIARY -> AUXILIARY
    long NOT_IN_PROFILE -> NOT_IN_PROFILE
    long BAD_OVERRIDE -> BAD_OVERRIDE
    long SIGNATURE_POLYMORPHIC -> SIGNATURE_POLYMORPHIC
    long THROWS -> THROWS
    long POTENTIALLY_AMBIGUOUS -> POTENTIALLY_AMBIGUOUS
    long LAMBDA_METHOD -> LAMBDA_METHOD
    long TYPE_TRANSLATED -> TYPE_TRANSLATED
    long MODULE -> MODULE
    long AUTOMATIC_MODULE -> AUTOMATIC_MODULE
    long SYSTEM_MODULE -> SYSTEM_MODULE
    long DEPRECATED_ANNOTATION -> DEPRECATED_ANNOTATION
    long DEPRECATED_REMOVAL -> DEPRECATED_REMOVAL
    long HAS_RESOURCE -> HAS_RESOURCE
    int AccessFlags -> AccessFlags
    int LocalClassFlags -> LocalClassFlags
    int MemberClassFlags -> MemberClassFlags
    int ClassFlags -> ClassFlags
    int InterfaceVarFlags -> InterfaceVarFlags
    int VarFlags -> VarFlags
    int ConstructorFlags -> ConstructorFlags
    int InterfaceMethodFlags -> InterfaceMethodFlags
    int MethodFlags -> MethodFlags
    long ExtendedStandardFlags -> ExtendedStandardFlags
    long ModifierFlags -> ModifierFlags
    long InterfaceMethodMask -> InterfaceMethodMask
    long AnnotationTypeElementMask -> AnnotationTypeElementMask
    long LocalVarFlags -> LocalVarFlags
    long ReceiverParamFlags -> ReceiverParamFlags
    java.util.Map modifierSets -> modifierSets
    void <init>() -> <init>
    java.lang.String toString(long) -> toString
    java.util.EnumSet asFlagSet(long) -> asFlagSet
    java.util.Set asModifierSet(long) -> asModifierSet
    boolean isStatic(org.openjdk.tools.javac.code.Symbol) -> isStatic
    boolean isEnum(org.openjdk.tools.javac.code.Symbol) -> isEnum
    boolean isConstant(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> isConstant
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Flags$Flag -> org.openjdk.tools.javac.code.Flags$Flag:
    org.openjdk.tools.javac.code.Flags$Flag PUBLIC -> PUBLIC
    org.openjdk.tools.javac.code.Flags$Flag PRIVATE -> PRIVATE
    org.openjdk.tools.javac.code.Flags$Flag PROTECTED -> PROTECTED
    org.openjdk.tools.javac.code.Flags$Flag STATIC -> STATIC
    org.openjdk.tools.javac.code.Flags$Flag FINAL -> FINAL
    org.openjdk.tools.javac.code.Flags$Flag SYNCHRONIZED -> SYNCHRONIZED
    org.openjdk.tools.javac.code.Flags$Flag VOLATILE -> VOLATILE
    org.openjdk.tools.javac.code.Flags$Flag TRANSIENT -> TRANSIENT
    org.openjdk.tools.javac.code.Flags$Flag NATIVE -> NATIVE
    org.openjdk.tools.javac.code.Flags$Flag INTERFACE -> INTERFACE
    org.openjdk.tools.javac.code.Flags$Flag ABSTRACT -> ABSTRACT
    org.openjdk.tools.javac.code.Flags$Flag DEFAULT -> DEFAULT
    org.openjdk.tools.javac.code.Flags$Flag STRICTFP -> STRICTFP
    org.openjdk.tools.javac.code.Flags$Flag BRIDGE -> BRIDGE
    org.openjdk.tools.javac.code.Flags$Flag SYNTHETIC -> SYNTHETIC
    org.openjdk.tools.javac.code.Flags$Flag ANNOTATION -> ANNOTATION
    org.openjdk.tools.javac.code.Flags$Flag DEPRECATED -> DEPRECATED
    org.openjdk.tools.javac.code.Flags$Flag HASINIT -> HASINIT
    org.openjdk.tools.javac.code.Flags$Flag BLOCK -> BLOCK
    org.openjdk.tools.javac.code.Flags$Flag ENUM -> ENUM
    org.openjdk.tools.javac.code.Flags$Flag MANDATED -> MANDATED
    org.openjdk.tools.javac.code.Flags$Flag NOOUTERTHIS -> NOOUTERTHIS
    org.openjdk.tools.javac.code.Flags$Flag EXISTS -> EXISTS
    org.openjdk.tools.javac.code.Flags$Flag COMPOUND -> COMPOUND
    org.openjdk.tools.javac.code.Flags$Flag CLASS_SEEN -> CLASS_SEEN
    org.openjdk.tools.javac.code.Flags$Flag SOURCE_SEEN -> SOURCE_SEEN
    org.openjdk.tools.javac.code.Flags$Flag LOCKED -> LOCKED
    org.openjdk.tools.javac.code.Flags$Flag UNATTRIBUTED -> UNATTRIBUTED
    org.openjdk.tools.javac.code.Flags$Flag ANONCONSTR -> ANONCONSTR
    org.openjdk.tools.javac.code.Flags$Flag ACYCLIC -> ACYCLIC
    org.openjdk.tools.javac.code.Flags$Flag PARAMETER -> PARAMETER
    org.openjdk.tools.javac.code.Flags$Flag VARARGS -> VARARGS
    org.openjdk.tools.javac.code.Flags$Flag ACYCLIC_ANN -> ACYCLIC_ANN
    org.openjdk.tools.javac.code.Flags$Flag GENERATEDCONSTR -> GENERATEDCONSTR
    org.openjdk.tools.javac.code.Flags$Flag HYPOTHETICAL -> HYPOTHETICAL
    org.openjdk.tools.javac.code.Flags$Flag PROPRIETARY -> PROPRIETARY
    org.openjdk.tools.javac.code.Flags$Flag UNION -> UNION
    org.openjdk.tools.javac.code.Flags$Flag EFFECTIVELY_FINAL -> EFFECTIVELY_FINAL
    org.openjdk.tools.javac.code.Flags$Flag CLASH -> CLASH
    org.openjdk.tools.javac.code.Flags$Flag AUXILIARY -> AUXILIARY
    org.openjdk.tools.javac.code.Flags$Flag NOT_IN_PROFILE -> NOT_IN_PROFILE
    org.openjdk.tools.javac.code.Flags$Flag BAD_OVERRIDE -> BAD_OVERRIDE
    org.openjdk.tools.javac.code.Flags$Flag SIGNATURE_POLYMORPHIC -> SIGNATURE_POLYMORPHIC
    org.openjdk.tools.javac.code.Flags$Flag THROWS -> THROWS
    org.openjdk.tools.javac.code.Flags$Flag LAMBDA_METHOD -> LAMBDA_METHOD
    org.openjdk.tools.javac.code.Flags$Flag TYPE_TRANSLATED -> TYPE_TRANSLATED
    org.openjdk.tools.javac.code.Flags$Flag MODULE -> MODULE
    org.openjdk.tools.javac.code.Flags$Flag AUTOMATIC_MODULE -> AUTOMATIC_MODULE
    org.openjdk.tools.javac.code.Flags$Flag SYSTEM_MODULE -> SYSTEM_MODULE
    org.openjdk.tools.javac.code.Flags$Flag DEPRECATED_ANNOTATION -> DEPRECATED_ANNOTATION
    org.openjdk.tools.javac.code.Flags$Flag DEPRECATED_REMOVAL -> DEPRECATED_REMOVAL
    org.openjdk.tools.javac.code.Flags$Flag HAS_RESOURCE -> HAS_RESOURCE
    long value -> value
    java.lang.String lowercaseName -> lowercaseName
    org.openjdk.tools.javac.code.Flags$Flag[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Flags$Flag[] values() -> values
    org.openjdk.tools.javac.code.Flags$Flag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,long) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Kinds -> org.openjdk.tools.javac.code.Kinds:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Kinds$KindName kindName(org.openjdk.source.tree.MemberReferenceTree$ReferenceMode) -> kindName
    org.openjdk.tools.javac.code.Kinds$KindName kindName(org.openjdk.tools.javac.code.Symbol) -> kindName
    org.openjdk.tools.javac.code.Kinds$KindName typeKindName(org.openjdk.tools.javac.code.Type) -> typeKindName
org.openjdk.tools.javac.code.Kinds$1 -> org.openjdk.tools.javac.code.Kinds$1:
    int[] $SwitchMap$com$sun$source$tree$MemberReferenceTree$ReferenceMode -> $SwitchMap$com$sun$source$tree$MemberReferenceTree$ReferenceMode
    int[] $SwitchMap$javax$lang$model$element$ElementKind -> $SwitchMap$javax$lang$model$element$ElementKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Kinds$Kind -> org.openjdk.tools.javac.code.Kinds$Kind:
    org.openjdk.tools.javac.code.Kinds$Kind NIL -> NIL
    org.openjdk.tools.javac.code.Kinds$Kind PCK -> PCK
    org.openjdk.tools.javac.code.Kinds$Kind TYP -> TYP
    org.openjdk.tools.javac.code.Kinds$Kind VAR -> VAR
    org.openjdk.tools.javac.code.Kinds$Kind MTH -> MTH
    org.openjdk.tools.javac.code.Kinds$Kind POLY -> POLY
    org.openjdk.tools.javac.code.Kinds$Kind MDL -> MDL
    org.openjdk.tools.javac.code.Kinds$Kind ERR -> ERR
    org.openjdk.tools.javac.code.Kinds$Kind AMBIGUOUS -> AMBIGUOUS
    org.openjdk.tools.javac.code.Kinds$Kind HIDDEN -> HIDDEN
    org.openjdk.tools.javac.code.Kinds$Kind STATICERR -> STATICERR
    org.openjdk.tools.javac.code.Kinds$Kind MISSING_ENCL -> MISSING_ENCL
    org.openjdk.tools.javac.code.Kinds$Kind ABSENT_VAR -> ABSENT_VAR
    org.openjdk.tools.javac.code.Kinds$Kind WRONG_MTHS -> WRONG_MTHS
    org.openjdk.tools.javac.code.Kinds$Kind WRONG_MTH -> WRONG_MTH
    org.openjdk.tools.javac.code.Kinds$Kind ABSENT_MTH -> ABSENT_MTH
    org.openjdk.tools.javac.code.Kinds$Kind ABSENT_TYP -> ABSENT_TYP
    org.openjdk.tools.javac.code.Kinds$KindName kindName -> kindName
    org.openjdk.tools.javac.code.Kinds$KindName absentKind -> absentKind
    org.openjdk.tools.javac.code.Kinds$KindSelector selector -> selector
    org.openjdk.tools.javac.code.Kinds$Kind$Category category -> category
    org.openjdk.tools.javac.code.Kinds$Kind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Kinds$Kind[] values() -> values
    org.openjdk.tools.javac.code.Kinds$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Kinds$Kind$Category) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Kinds$Kind$Category,org.openjdk.tools.javac.code.Kinds$KindSelector) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Kinds$Kind$Category,org.openjdk.tools.javac.code.Kinds$KindName) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Kinds$Kind$Category,org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Kinds$KindSelector) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Kinds$Kind$Category,org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Kinds$KindSelector) -> <init>
    org.openjdk.tools.javac.code.Kinds$KindSelector toSelector() -> toSelector
    boolean matches(org.openjdk.tools.javac.code.Kinds$KindSelector) -> matches
    boolean isResolutionError() -> isResolutionError
    boolean isResolutionTargetError() -> isResolutionTargetError
    boolean isValid() -> isValid
    boolean betterThan(org.openjdk.tools.javac.code.Kinds$Kind) -> betterThan
    org.openjdk.tools.javac.code.Kinds$KindName kindName() -> kindName
    org.openjdk.tools.javac.code.Kinds$KindName absentKind() -> absentKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Kinds$Kind$Category -> org.openjdk.tools.javac.code.Kinds$Kind$Category:
    org.openjdk.tools.javac.code.Kinds$Kind$Category BASIC -> BASIC
    org.openjdk.tools.javac.code.Kinds$Kind$Category ERROR -> ERROR
    org.openjdk.tools.javac.code.Kinds$Kind$Category RESOLUTION -> RESOLUTION
    org.openjdk.tools.javac.code.Kinds$Kind$Category RESOLUTION_TARGET -> RESOLUTION_TARGET
    org.openjdk.tools.javac.code.Kinds$Kind$Category[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Kinds$Kind$Category[] values() -> values
    org.openjdk.tools.javac.code.Kinds$Kind$Category valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Kinds$KindName -> org.openjdk.tools.javac.code.Kinds$KindName:
    org.openjdk.tools.javac.code.Kinds$KindName ANNOTATION -> ANNOTATION
    org.openjdk.tools.javac.code.Kinds$KindName CONSTRUCTOR -> CONSTRUCTOR
    org.openjdk.tools.javac.code.Kinds$KindName INTERFACE -> INTERFACE
    org.openjdk.tools.javac.code.Kinds$KindName ENUM -> ENUM
    org.openjdk.tools.javac.code.Kinds$KindName STATIC -> STATIC
    org.openjdk.tools.javac.code.Kinds$KindName TYPEVAR -> TYPEVAR
    org.openjdk.tools.javac.code.Kinds$KindName BOUND -> BOUND
    org.openjdk.tools.javac.code.Kinds$KindName VAR -> VAR
    org.openjdk.tools.javac.code.Kinds$KindName VAL -> VAL
    org.openjdk.tools.javac.code.Kinds$KindName METHOD -> METHOD
    org.openjdk.tools.javac.code.Kinds$KindName CLASS -> CLASS
    org.openjdk.tools.javac.code.Kinds$KindName STATIC_INIT -> STATIC_INIT
    org.openjdk.tools.javac.code.Kinds$KindName INSTANCE_INIT -> INSTANCE_INIT
    org.openjdk.tools.javac.code.Kinds$KindName PACKAGE -> PACKAGE
    org.openjdk.tools.javac.code.Kinds$KindName MODULE -> MODULE
    java.lang.String name -> name
    org.openjdk.tools.javac.code.Kinds$KindName[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Kinds$KindName[] values() -> values
    org.openjdk.tools.javac.code.Kinds$KindName valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    java.lang.String getKind() -> getKind
    java.lang.String toString(java.util.Locale,org.openjdk.tools.javac.api.Messages) -> toString
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Kinds$KindSelector -> org.openjdk.tools.javac.code.Kinds$KindSelector:
    org.openjdk.tools.javac.code.Kinds$KindSelector NIL -> NIL
    org.openjdk.tools.javac.code.Kinds$KindSelector PCK -> PCK
    org.openjdk.tools.javac.code.Kinds$KindSelector TYP -> TYP
    org.openjdk.tools.javac.code.Kinds$KindSelector VAR -> VAR
    org.openjdk.tools.javac.code.Kinds$KindSelector VAL -> VAL
    org.openjdk.tools.javac.code.Kinds$KindSelector MTH -> MTH
    org.openjdk.tools.javac.code.Kinds$KindSelector POLY -> POLY
    org.openjdk.tools.javac.code.Kinds$KindSelector MDL -> MDL
    org.openjdk.tools.javac.code.Kinds$KindSelector ERR -> ERR
    org.openjdk.tools.javac.code.Kinds$KindSelector ASG -> ASG
    org.openjdk.tools.javac.code.Kinds$KindSelector TYP_PCK -> TYP_PCK
    org.openjdk.tools.javac.code.Kinds$KindSelector VAL_MTH -> VAL_MTH
    org.openjdk.tools.javac.code.Kinds$KindSelector VAL_POLY -> VAL_POLY
    org.openjdk.tools.javac.code.Kinds$KindSelector VAL_TYP -> VAL_TYP
    org.openjdk.tools.javac.code.Kinds$KindSelector VAL_TYP_PCK -> VAL_TYP_PCK
    byte data -> data
    void <init>(int) -> <init>
    org.openjdk.tools.javac.code.Kinds$KindSelector of(org.openjdk.tools.javac.code.Kinds$KindSelector[]) -> of
    boolean subset(org.openjdk.tools.javac.code.Kinds$KindSelector) -> subset
    boolean contains(org.openjdk.tools.javac.code.Kinds$KindSelector) -> contains
    java.util.Set kindNames() -> kindNames
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Lint -> org.openjdk.tools.javac.code.Lint:
    org.openjdk.tools.javac.util.Context$Key lintKey -> lintKey
    org.openjdk.tools.javac.code.Lint$AugmentVisitor augmentor -> augmentor
    java.util.EnumSet values -> values
    java.util.EnumSet suppressedValues -> suppressedValues
    java.util.Map map -> map
    org.openjdk.tools.javac.code.Lint instance(org.openjdk.tools.javac.util.Context) -> instance
    org.openjdk.tools.javac.code.Lint augment(org.openjdk.tools.javac.code.Attribute$Compound) -> augment
    org.openjdk.tools.javac.code.Lint augment(org.openjdk.tools.javac.code.Symbol) -> augment
    org.openjdk.tools.javac.code.Lint suppress(org.openjdk.tools.javac.code.Lint$LintCategory[]) -> suppress
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void <init>(org.openjdk.tools.javac.code.Lint) -> <init>
    java.lang.String toString() -> toString
    boolean isEnabled(org.openjdk.tools.javac.code.Lint$LintCategory) -> isEnabled
    boolean isSuppressed(org.openjdk.tools.javac.code.Lint$LintCategory) -> isSuppressed
    java.util.Map access$000() -> access$000
    java.util.EnumSet access$100(org.openjdk.tools.javac.code.Lint) -> access$100
    java.util.EnumSet access$200(org.openjdk.tools.javac.code.Lint) -> access$200
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Lint$AugmentVisitor -> org.openjdk.tools.javac.code.Lint$AugmentVisitor:
    org.openjdk.tools.javac.util.Context context -> context
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Lint parent -> parent
    org.openjdk.tools.javac.code.Lint lint -> lint
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.code.Lint augment(org.openjdk.tools.javac.code.Lint,org.openjdk.tools.javac.code.Attribute$Compound) -> augment
    org.openjdk.tools.javac.code.Lint augment(org.openjdk.tools.javac.code.Lint,org.openjdk.tools.javac.util.List) -> augment
    void initSyms() -> initSyms
    void suppress(org.openjdk.tools.javac.code.Lint$LintCategory) -> suppress
    void visitConstant(org.openjdk.tools.javac.code.Attribute$Constant) -> visitConstant
    void visitClass(org.openjdk.tools.javac.code.Attribute$Class) -> visitClass
    void visitCompound(org.openjdk.tools.javac.code.Attribute$Compound) -> visitCompound
    void visitArray(org.openjdk.tools.javac.code.Attribute$Array) -> visitArray
    void visitEnum(org.openjdk.tools.javac.code.Attribute$Enum) -> visitEnum
    void visitError(org.openjdk.tools.javac.code.Attribute$Error) -> visitError
org.openjdk.tools.javac.code.Lint$LintCategory -> org.openjdk.tools.javac.code.Lint$LintCategory:
    org.openjdk.tools.javac.code.Lint$LintCategory AUXILIARYCLASS -> AUXILIARYCLASS
    org.openjdk.tools.javac.code.Lint$LintCategory CAST -> CAST
    org.openjdk.tools.javac.code.Lint$LintCategory CLASSFILE -> CLASSFILE
    org.openjdk.tools.javac.code.Lint$LintCategory DEPRECATION -> DEPRECATION
    org.openjdk.tools.javac.code.Lint$LintCategory DEP_ANN -> DEP_ANN
    org.openjdk.tools.javac.code.Lint$LintCategory DIVZERO -> DIVZERO
    org.openjdk.tools.javac.code.Lint$LintCategory EMPTY -> EMPTY
    org.openjdk.tools.javac.code.Lint$LintCategory EXPORTS -> EXPORTS
    org.openjdk.tools.javac.code.Lint$LintCategory FALLTHROUGH -> FALLTHROUGH
    org.openjdk.tools.javac.code.Lint$LintCategory FINALLY -> FINALLY
    org.openjdk.tools.javac.code.Lint$LintCategory MODULE -> MODULE
    org.openjdk.tools.javac.code.Lint$LintCategory OPENS -> OPENS
    org.openjdk.tools.javac.code.Lint$LintCategory OPTIONS -> OPTIONS
    org.openjdk.tools.javac.code.Lint$LintCategory OVERLOADS -> OVERLOADS
    org.openjdk.tools.javac.code.Lint$LintCategory OVERRIDES -> OVERRIDES
    org.openjdk.tools.javac.code.Lint$LintCategory PATH -> PATH
    org.openjdk.tools.javac.code.Lint$LintCategory PROCESSING -> PROCESSING
    org.openjdk.tools.javac.code.Lint$LintCategory RAW -> RAW
    org.openjdk.tools.javac.code.Lint$LintCategory REMOVAL -> REMOVAL
    org.openjdk.tools.javac.code.Lint$LintCategory REQUIRES_AUTOMATIC -> REQUIRES_AUTOMATIC
    org.openjdk.tools.javac.code.Lint$LintCategory REQUIRES_TRANSITIVE_AUTOMATIC -> REQUIRES_TRANSITIVE_AUTOMATIC
    org.openjdk.tools.javac.code.Lint$LintCategory SERIAL -> SERIAL
    org.openjdk.tools.javac.code.Lint$LintCategory STATIC -> STATIC
    org.openjdk.tools.javac.code.Lint$LintCategory TRY -> TRY
    org.openjdk.tools.javac.code.Lint$LintCategory UNCHECKED -> UNCHECKED
    org.openjdk.tools.javac.code.Lint$LintCategory VARARGS -> VARARGS
    java.lang.String option -> option
    boolean hidden -> hidden
    org.openjdk.tools.javac.code.Lint$LintCategory[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Lint$LintCategory[] values() -> values
    org.openjdk.tools.javac.code.Lint$LintCategory valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int,java.lang.String,boolean) -> <init>
    org.openjdk.tools.javac.code.Lint$LintCategory get(java.lang.String) -> get
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.ModuleFinder -> org.openjdk.tools.javac.code.ModuleFinder:
    org.openjdk.tools.javac.util.Context$Key moduleFinderKey -> moduleFinderKey
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.code.ClassFinder classFinder -> classFinder
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.jvm.ModuleNameReader moduleNameReader -> moduleNameReader
    org.openjdk.tools.javac.code.ModuleFinder$ModuleNameFromSourceReader moduleNameFromSourceReader -> moduleNameFromSourceReader
    org.openjdk.tools.javac.code.ModuleFinder$ModuleLocationIterator moduleLocationIterator -> moduleLocationIterator
    org.openjdk.tools.javac.code.ModuleFinder instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol findModule(org.openjdk.tools.javac.util.Name) -> findModule
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol findModule(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> findModule
    org.openjdk.tools.javac.util.List findAllModules() -> findAllModules
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol findSingleModule() -> findSingleModule
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol readModule(org.openjdk.javax.tools.JavaFileObject) -> readModule
    java.lang.String readModuleName(org.openjdk.javax.tools.JavaFileObject) -> readModuleName
    org.openjdk.javax.tools.JavaFileObject getModuleInfoFromLocation(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject$Kind) -> getModuleInfoFromLocation
    org.openjdk.tools.javac.util.List scanModulePath(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> scanModulePath
    void findModuleInfo(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> findModuleInfo
    org.openjdk.javax.tools.JavaFileObject preferredFileObject(org.openjdk.javax.tools.JavaFileObject,org.openjdk.javax.tools.JavaFileObject) -> preferredFileObject
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment getDescription(org.openjdk.javax.tools.StandardLocation) -> getDescription
    org.openjdk.javax.tools.JavaFileManager access$000(org.openjdk.tools.javac.code.ModuleFinder) -> access$000
    org.openjdk.tools.javac.code.ClassFinder access$100(org.openjdk.tools.javac.code.ModuleFinder) -> access$100
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.ModuleFinder$1 -> org.openjdk.tools.javac.code.ModuleFinder$1:
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol val$msym -> val$msym
    org.openjdk.tools.javac.code.ModuleFinder this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.ModuleFinder,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    java.lang.String toString() -> toString
org.openjdk.tools.javac.code.ModuleFinder$2 -> org.openjdk.tools.javac.code.ModuleFinder$2:
    int[] $SwitchMap$javax$tools$JavaFileObject$Kind -> $SwitchMap$javax$tools$JavaFileObject$Kind
    int[] $SwitchMap$javax$tools$StandardLocation -> $SwitchMap$javax$tools$StandardLocation
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.ModuleFinder$ModuleLocationIterator -> org.openjdk.tools.javac.code.ModuleFinder$ModuleLocationIterator:
    org.openjdk.javax.tools.StandardLocation outer -> outer
    java.util.Set next -> next
    java.util.Iterator outerIter -> outerIter
    java.util.Iterator innerIter -> innerIter
    org.openjdk.tools.javac.code.ModuleFinder this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.ModuleFinder) -> <init>
    boolean hasNext() -> hasNext
    java.util.Set next() -> next
    java.lang.Object next() -> next
org.openjdk.tools.javac.code.ModuleFinder$ModuleNameFromSourceReader -> org.openjdk.tools.javac.code.ModuleFinder$ModuleNameFromSourceReader:
    org.openjdk.tools.javac.util.Name readModuleName(org.openjdk.javax.tools.JavaFileObject) -> readModuleName
org.openjdk.tools.javac.code.Printer -> org.openjdk.tools.javac.code.Printer:
    org.openjdk.tools.javac.util.List seenCaptured -> seenCaptured
    int PRIME -> PRIME
    void <init>() -> <init>
    java.lang.String localize(java.util.Locale,java.lang.String,java.lang.Object[]) -> localize
    java.lang.String capturedVarId(org.openjdk.tools.javac.code.Type$CapturedType,java.util.Locale) -> capturedVarId
    org.openjdk.tools.javac.code.Printer createStandardPrinter(org.openjdk.tools.javac.api.Messages) -> createStandardPrinter
    java.lang.String visitTypes(org.openjdk.tools.javac.util.List,java.util.Locale) -> visitTypes
    java.lang.String visitSymbols(org.openjdk.tools.javac.util.List,java.util.Locale) -> visitSymbols
    java.lang.String visit(org.openjdk.tools.javac.code.Type,java.util.Locale) -> visit
    java.lang.String visit(org.openjdk.tools.javac.code.Symbol,java.util.Locale) -> visit
    java.lang.String visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.util.Locale) -> visitCapturedType
    java.lang.String visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.util.Locale) -> visitForAll
    java.lang.String visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.util.Locale) -> visitUndetVar
    java.lang.String visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.util.Locale) -> visitArrayType
    java.lang.String printAnnotations(org.openjdk.tools.javac.code.Type) -> printAnnotations
    java.lang.String printAnnotations(org.openjdk.tools.javac.code.Type,boolean) -> printAnnotations
    void printBaseElementType(org.openjdk.tools.javac.code.Type,java.lang.StringBuilder,java.util.Locale) -> printBaseElementType
    void printBrackets(org.openjdk.tools.javac.code.Type,java.lang.StringBuilder,java.util.Locale) -> printBrackets
    java.lang.String visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.util.Locale) -> visitClassType
    java.lang.String visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.util.Locale) -> visitMethodType
    java.lang.String visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,java.util.Locale) -> visitPackageType
    java.lang.String visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.util.Locale) -> visitWildcardType
    java.lang.String visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.util.Locale) -> visitErrorType
    java.lang.String visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.util.Locale) -> visitTypeVar
    java.lang.String visitModuleType(org.openjdk.tools.javac.code.Type$ModuleType,java.util.Locale) -> visitModuleType
    java.lang.String visitType(org.openjdk.tools.javac.code.Type,java.util.Locale) -> visitType
    java.lang.String className(org.openjdk.tools.javac.code.Type$ClassType,boolean,java.util.Locale) -> className
    java.lang.String printMethodArgs(org.openjdk.tools.javac.util.List,boolean,java.util.Locale) -> printMethodArgs
    java.lang.String visitClassSymbol(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.util.Locale) -> visitClassSymbol
    java.lang.String visitMethodSymbol(org.openjdk.tools.javac.code.Symbol$MethodSymbol,java.util.Locale) -> visitMethodSymbol
    java.lang.String visitOperatorSymbol(org.openjdk.tools.javac.code.Symbol$OperatorSymbol,java.util.Locale) -> visitOperatorSymbol
    java.lang.String visitPackageSymbol(org.openjdk.tools.javac.code.Symbol$PackageSymbol,java.util.Locale) -> visitPackageSymbol
    java.lang.String visitTypeSymbol(org.openjdk.tools.javac.code.Symbol$TypeSymbol,java.util.Locale) -> visitTypeSymbol
    java.lang.String visitVarSymbol(org.openjdk.tools.javac.code.Symbol$VarSymbol,java.util.Locale) -> visitVarSymbol
    java.lang.String visitSymbol(org.openjdk.tools.javac.code.Symbol,java.util.Locale) -> visitSymbol
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitModuleType(org.openjdk.tools.javac.code.Type$ModuleType,java.lang.Object) -> visitModuleType
    java.lang.Object visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,java.lang.Object) -> visitPackageType
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitSymbol(org.openjdk.tools.javac.code.Symbol,java.lang.Object) -> visitSymbol
    java.lang.Object visitTypeSymbol(org.openjdk.tools.javac.code.Symbol$TypeSymbol,java.lang.Object) -> visitTypeSymbol
    java.lang.Object visitVarSymbol(org.openjdk.tools.javac.code.Symbol$VarSymbol,java.lang.Object) -> visitVarSymbol
    java.lang.Object visitOperatorSymbol(org.openjdk.tools.javac.code.Symbol$OperatorSymbol,java.lang.Object) -> visitOperatorSymbol
    java.lang.Object visitPackageSymbol(org.openjdk.tools.javac.code.Symbol$PackageSymbol,java.lang.Object) -> visitPackageSymbol
    java.lang.Object visitMethodSymbol(org.openjdk.tools.javac.code.Symbol$MethodSymbol,java.lang.Object) -> visitMethodSymbol
    java.lang.Object visitClassSymbol(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.lang.Object) -> visitClassSymbol
org.openjdk.tools.javac.code.Printer$1 -> org.openjdk.tools.javac.code.Printer$1:
    org.openjdk.tools.javac.api.Messages val$messages -> val$messages
    void <init>(org.openjdk.tools.javac.api.Messages) -> <init>
    java.lang.String localize(java.util.Locale,java.lang.String,java.lang.Object[]) -> localize
    java.lang.String capturedVarId(org.openjdk.tools.javac.code.Type$CapturedType,java.util.Locale) -> capturedVarId
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitModuleType(org.openjdk.tools.javac.code.Type$ModuleType,java.lang.Object) -> visitModuleType
    java.lang.Object visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,java.lang.Object) -> visitPackageType
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitSymbol(org.openjdk.tools.javac.code.Symbol,java.lang.Object) -> visitSymbol
    java.lang.Object visitTypeSymbol(org.openjdk.tools.javac.code.Symbol$TypeSymbol,java.lang.Object) -> visitTypeSymbol
    java.lang.Object visitVarSymbol(org.openjdk.tools.javac.code.Symbol$VarSymbol,java.lang.Object) -> visitVarSymbol
    java.lang.Object visitOperatorSymbol(org.openjdk.tools.javac.code.Symbol$OperatorSymbol,java.lang.Object) -> visitOperatorSymbol
    java.lang.Object visitPackageSymbol(org.openjdk.tools.javac.code.Symbol$PackageSymbol,java.lang.Object) -> visitPackageSymbol
    java.lang.Object visitMethodSymbol(org.openjdk.tools.javac.code.Symbol$MethodSymbol,java.lang.Object) -> visitMethodSymbol
    java.lang.Object visitClassSymbol(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.lang.Object) -> visitClassSymbol
org.openjdk.tools.javac.code.Scope -> org.openjdk.tools.javac.code.Scope:
    org.openjdk.tools.javac.code.Symbol owner -> owner
    org.openjdk.tools.javac.util.Filter noFilter -> noFilter
    org.openjdk.tools.javac.code.Scope$ScopeListenerList listeners -> listeners
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    java.lang.Iterable getSymbols() -> getSymbols
    java.lang.Iterable getSymbols(org.openjdk.tools.javac.util.Filter) -> getSymbols
    java.lang.Iterable getSymbols(org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbols
    java.lang.Iterable getSymbols(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbols
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name) -> getSymbolsByName
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter) -> getSymbolsByName
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbolsByName
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbolsByName
    org.openjdk.tools.javac.code.Symbol findFirst(org.openjdk.tools.javac.util.Name) -> findFirst
    org.openjdk.tools.javac.code.Symbol findFirst(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter) -> findFirst
    boolean anyMatch(org.openjdk.tools.javac.util.Filter) -> anyMatch
    boolean includes(org.openjdk.tools.javac.code.Symbol) -> includes
    boolean includes(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope$LookupKind) -> includes
    boolean isEmpty() -> isEmpty
    org.openjdk.tools.javac.code.Scope getOrigin(org.openjdk.tools.javac.code.Symbol) -> getOrigin
    boolean isStaticallyImported(org.openjdk.tools.javac.code.Symbol) -> isStaticallyImported
    boolean lambda$includes$0(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> lambda$includes$0
    org.openjdk.tools.javac.util.Filter access$100() -> access$100
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Scope$1 -> org.openjdk.tools.javac.code.Scope$1:
org.openjdk.tools.javac.code.Scope$CompoundScope -> org.openjdk.tools.javac.code.Scope$CompoundScope:
    org.openjdk.tools.javac.util.List subScopes -> subScopes
    int mark -> mark
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    void prependSubScope(org.openjdk.tools.javac.code.Scope) -> prependSubScope
    void symbolAdded(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> symbolAdded
    void symbolRemoved(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> symbolRemoved
    int getMark() -> getMark
    java.lang.String toString() -> toString
    java.lang.Iterable getSymbols(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbols
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbolsByName
    org.openjdk.tools.javac.code.Scope getOrigin(org.openjdk.tools.javac.code.Symbol) -> getOrigin
    boolean isStaticallyImported(org.openjdk.tools.javac.code.Symbol) -> isStaticallyImported
    java.util.Iterator lambda$getSymbolsByName$3(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> lambda$getSymbolsByName$3
    java.util.Iterator lambda$null$2(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind,org.openjdk.tools.javac.code.Scope) -> lambda$null$2
    java.util.Iterator lambda$getSymbols$1(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> lambda$getSymbols$1
    java.util.Iterator lambda$null$0(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind,org.openjdk.tools.javac.code.Scope) -> lambda$null$0
org.openjdk.tools.javac.code.Scope$Entry -> org.openjdk.tools.javac.code.Scope$Entry:
    org.openjdk.tools.javac.code.Symbol sym -> sym
    org.openjdk.tools.javac.code.Scope$Entry shadowed -> shadowed
    org.openjdk.tools.javac.code.Scope$Entry sibling -> sibling
    org.openjdk.tools.javac.code.Scope$ScopeImpl scope -> scope
    void <init>(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope$Entry,org.openjdk.tools.javac.code.Scope$Entry,org.openjdk.tools.javac.code.Scope$ScopeImpl) -> <init>
    org.openjdk.tools.javac.code.Scope$Entry next() -> next
    org.openjdk.tools.javac.code.Scope$Entry next(org.openjdk.tools.javac.util.Filter) -> next
    org.openjdk.tools.javac.code.Scope$Entry access$000(org.openjdk.tools.javac.code.Scope$Entry) -> access$000
    org.openjdk.tools.javac.code.Scope$Entry access$002(org.openjdk.tools.javac.code.Scope$Entry,org.openjdk.tools.javac.code.Scope$Entry) -> access$002
org.openjdk.tools.javac.code.Scope$ErrorScope -> org.openjdk.tools.javac.code.Scope$ErrorScope:
    void <init>(org.openjdk.tools.javac.code.Scope$ScopeImpl,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope$Entry[]) -> <init>
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Scope$WriteableScope dup(org.openjdk.tools.javac.code.Symbol) -> dup
    org.openjdk.tools.javac.code.Scope$WriteableScope dupUnshared(org.openjdk.tools.javac.code.Symbol) -> dupUnshared
    org.openjdk.tools.javac.code.Scope$Entry lookup(org.openjdk.tools.javac.util.Name) -> lookup
    java.lang.String toString() -> toString
    boolean isStaticallyImported(org.openjdk.tools.javac.code.Symbol) -> isStaticallyImported
    org.openjdk.tools.javac.code.Scope getOrigin(org.openjdk.tools.javac.code.Symbol) -> getOrigin
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbolsByName
    java.lang.Iterable getSymbols(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbols
    boolean anyMatch(org.openjdk.tools.javac.util.Filter) -> anyMatch
    org.openjdk.tools.javac.code.Symbol findFirst(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter) -> findFirst
    boolean includes(org.openjdk.tools.javac.code.Symbol) -> includes
    void enterIfAbsent(org.openjdk.tools.javac.code.Symbol) -> enterIfAbsent
    void remove(org.openjdk.tools.javac.code.Symbol) -> remove
    void enter(org.openjdk.tools.javac.code.Symbol) -> enter
    org.openjdk.tools.javac.code.Scope$WriteableScope leave() -> leave
org.openjdk.tools.javac.code.Scope$FilterImportScope -> org.openjdk.tools.javac.code.Scope$FilterImportScope:
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.code.Scope origin -> origin
    org.openjdk.tools.javac.util.Name filterName -> filterName
    org.openjdk.tools.javac.code.Scope$ImportFilter filter -> filter
    org.openjdk.tools.javac.tree.JCTree$JCImport imp -> imp
    java.util.function.BiConsumer cfHandler -> cfHandler
    void <init>(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Scope$ImportFilter,org.openjdk.tools.javac.tree.JCTree$JCImport,java.util.function.BiConsumer) -> <init>
    java.lang.Iterable getSymbols(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbols
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbolsByName
    org.openjdk.tools.javac.code.Scope getOrigin(org.openjdk.tools.javac.code.Symbol) -> getOrigin
    boolean isStaticallyImported(org.openjdk.tools.javac.code.Symbol) -> isStaticallyImported
    java.util.Iterator lambda$getSymbolsByName$3(org.openjdk.tools.javac.util.List) -> lambda$getSymbolsByName$3
    boolean lambda$null$2(org.openjdk.tools.javac.code.Symbol) -> lambda$null$2
    java.util.Iterator lambda$getSymbols$1(org.openjdk.tools.javac.util.List) -> lambda$getSymbols$1
    boolean lambda$null$0(org.openjdk.tools.javac.code.Symbol) -> lambda$null$0
    org.openjdk.tools.javac.code.Scope access$200(org.openjdk.tools.javac.code.Scope$FilterImportScope) -> access$200
    org.openjdk.tools.javac.code.Scope$ImportFilter access$300(org.openjdk.tools.javac.code.Scope$FilterImportScope) -> access$300
    org.openjdk.tools.javac.tree.JCTree$JCImport access$400(org.openjdk.tools.javac.code.Scope$FilterImportScope) -> access$400
    org.openjdk.tools.javac.code.Types access$500(org.openjdk.tools.javac.code.Scope$FilterImportScope) -> access$500
org.openjdk.tools.javac.code.Scope$FilterImportScope$1 -> org.openjdk.tools.javac.code.Scope$FilterImportScope$1:
    org.openjdk.tools.javac.util.Filter val$sf -> val$sf
    org.openjdk.tools.javac.code.Scope$LookupKind val$lookupKind -> val$lookupKind
    org.openjdk.tools.javac.code.Scope$FilterImportScope this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Scope$FilterImportScope,boolean,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> <init>
    java.lang.Iterable doLookup(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> doLookup
org.openjdk.tools.javac.code.Scope$FilterImportScope$2 -> org.openjdk.tools.javac.code.Scope$FilterImportScope$2:
    org.openjdk.tools.javac.util.Name val$name -> val$name
    org.openjdk.tools.javac.util.Filter val$sf -> val$sf
    org.openjdk.tools.javac.code.Scope$LookupKind val$lookupKind -> val$lookupKind
    org.openjdk.tools.javac.code.Scope$FilterImportScope this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Scope$FilterImportScope,boolean,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> <init>
    java.lang.Iterable doLookup(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> doLookup
org.openjdk.tools.javac.code.Scope$FilterImportScope$SymbolImporter -> org.openjdk.tools.javac.code.Scope$FilterImportScope$SymbolImporter:
    java.util.Set processed -> processed
    org.openjdk.tools.javac.util.List delegates -> delegates
    boolean inspectSuperTypes -> inspectSuperTypes
    org.openjdk.tools.javac.code.Scope$FilterImportScope this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Scope$FilterImportScope,boolean) -> <init>
    org.openjdk.tools.javac.util.List importFrom(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.List) -> importFrom
    java.lang.Iterable doLookup(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> doLookup
org.openjdk.tools.javac.code.Scope$ImportFilter -> org.openjdk.tools.javac.code.Scope$ImportFilter:
    boolean accepts(org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Symbol) -> accepts
org.openjdk.tools.javac.code.Scope$ImportScope -> org.openjdk.tools.javac.code.Scope$ImportScope:
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    void finalizeScope() -> finalizeScope
org.openjdk.tools.javac.code.Scope$ImportScope$1 -> org.openjdk.tools.javac.code.Scope$ImportScope$1:
    org.openjdk.tools.javac.code.Scope$ImportScope this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Scope$ImportScope) -> <init>
    void symbolAdded(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> symbolAdded
    void symbolRemoved(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> symbolRemoved
org.openjdk.tools.javac.code.Scope$LookupKind -> org.openjdk.tools.javac.code.Scope$LookupKind:
    org.openjdk.tools.javac.code.Scope$LookupKind RECURSIVE -> RECURSIVE
    org.openjdk.tools.javac.code.Scope$LookupKind NON_RECURSIVE -> NON_RECURSIVE
    org.openjdk.tools.javac.code.Scope$LookupKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Scope$LookupKind[] values() -> values
    org.openjdk.tools.javac.code.Scope$LookupKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Scope$NamedImportScope -> org.openjdk.tools.javac.code.Scope$NamedImportScope:
    void <init>(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> <init>
    org.openjdk.tools.javac.code.Scope importByName(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Scope$ImportFilter,org.openjdk.tools.javac.tree.JCTree$JCImport,java.util.function.BiConsumer) -> importByName
    org.openjdk.tools.javac.code.Scope importType(org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Symbol) -> importType
    org.openjdk.tools.javac.code.Scope appendScope(org.openjdk.tools.javac.code.Scope) -> appendScope
org.openjdk.tools.javac.code.Scope$NamedImportScope$SingleEntryScope -> org.openjdk.tools.javac.code.Scope$NamedImportScope$SingleEntryScope:
    org.openjdk.tools.javac.code.Symbol sym -> sym
    org.openjdk.tools.javac.util.List content -> content
    org.openjdk.tools.javac.code.Scope origin -> origin
    void <init>(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> <init>
    java.lang.Iterable getSymbols(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbols
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbolsByName
    org.openjdk.tools.javac.code.Scope getOrigin(org.openjdk.tools.javac.code.Symbol) -> getOrigin
    boolean isStaticallyImported(org.openjdk.tools.javac.code.Symbol) -> isStaticallyImported
org.openjdk.tools.javac.code.Scope$ScopeImpl -> org.openjdk.tools.javac.code.Scope$ScopeImpl:
    int shared -> shared
    org.openjdk.tools.javac.code.Scope$ScopeImpl next -> next
    org.openjdk.tools.javac.code.Scope$Entry[] table -> table
    int hashMask -> hashMask
    org.openjdk.tools.javac.code.Scope$Entry elems -> elems
    int nelems -> nelems
    int removeCount -> removeCount
    org.openjdk.tools.javac.code.Scope$Entry sentinel -> sentinel
    int INITIAL_SIZE -> INITIAL_SIZE
    void <init>(org.openjdk.tools.javac.code.Scope$ScopeImpl,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope$Entry[]) -> <init>
    void <init>(org.openjdk.tools.javac.code.Scope$ScopeImpl,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope$Entry[],int) -> <init>
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Scope$WriteableScope dup(org.openjdk.tools.javac.code.Symbol) -> dup
    org.openjdk.tools.javac.code.Scope$WriteableScope dupUnshared(org.openjdk.tools.javac.code.Symbol) -> dupUnshared
    org.openjdk.tools.javac.code.Scope$WriteableScope leave() -> leave
    void dble() -> dble
    void enter(org.openjdk.tools.javac.code.Symbol) -> enter
    void remove(org.openjdk.tools.javac.code.Symbol) -> remove
    void enterIfAbsent(org.openjdk.tools.javac.code.Symbol) -> enterIfAbsent
    boolean includes(org.openjdk.tools.javac.code.Symbol) -> includes
    org.openjdk.tools.javac.code.Scope$Entry lookup(org.openjdk.tools.javac.util.Name) -> lookup
    org.openjdk.tools.javac.code.Scope$Entry lookup(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter) -> lookup
    org.openjdk.tools.javac.code.Symbol findFirst(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter) -> findFirst
    int getIndex(org.openjdk.tools.javac.util.Name) -> getIndex
    boolean anyMatch(org.openjdk.tools.javac.util.Filter) -> anyMatch
    java.lang.Iterable getSymbols(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbols
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbolsByName
    org.openjdk.tools.javac.code.Scope getOrigin(org.openjdk.tools.javac.code.Symbol) -> getOrigin
    boolean isStaticallyImported(org.openjdk.tools.javac.code.Symbol) -> isStaticallyImported
    java.lang.String toString() -> toString
    java.util.Iterator lambda$getSymbolsByName$2(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> lambda$getSymbolsByName$2
    java.util.Iterator lambda$getSymbols$1(org.openjdk.tools.javac.code.Scope$LookupKind,org.openjdk.tools.javac.util.Filter) -> lambda$getSymbols$1
    boolean lambda$remove$0(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> lambda$remove$0
    void <init>(org.openjdk.tools.javac.code.Scope$ScopeImpl,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope$Entry[],org.openjdk.tools.javac.code.Scope$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Scope$ScopeImpl$1 -> org.openjdk.tools.javac.code.Scope$ScopeImpl$1:
    org.openjdk.tools.javac.code.Scope$ScopeImpl currScope -> currScope
    org.openjdk.tools.javac.code.Scope$Entry currEntry -> currEntry
    int seenRemoveCount -> seenRemoveCount
    org.openjdk.tools.javac.code.Scope$LookupKind val$lookupKind -> val$lookupKind
    org.openjdk.tools.javac.util.Filter val$sf -> val$sf
    org.openjdk.tools.javac.code.Scope$ScopeImpl this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Scope$ScopeImpl,org.openjdk.tools.javac.code.Scope$LookupKind,org.openjdk.tools.javac.util.Filter) -> <init>
    boolean hasNext() -> hasNext
    org.openjdk.tools.javac.code.Symbol next() -> next
    org.openjdk.tools.javac.code.Symbol doNext() -> doNext
    void update() -> update
    void skipToNextMatchingEntry() -> skipToNextMatchingEntry
    java.lang.Object next() -> next
org.openjdk.tools.javac.code.Scope$ScopeImpl$2 -> org.openjdk.tools.javac.code.Scope$ScopeImpl$2:
    org.openjdk.tools.javac.code.Scope$Entry currentEntry -> currentEntry
    int seenRemoveCount -> seenRemoveCount
    org.openjdk.tools.javac.util.Name val$name -> val$name
    org.openjdk.tools.javac.util.Filter val$sf -> val$sf
    org.openjdk.tools.javac.code.Scope$LookupKind val$lookupKind -> val$lookupKind
    org.openjdk.tools.javac.code.Scope$ScopeImpl this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Scope$ScopeImpl,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> <init>
    boolean hasNext() -> hasNext
    org.openjdk.tools.javac.code.Symbol next() -> next
    org.openjdk.tools.javac.code.Symbol doNext() -> doNext
    void remove() -> remove
    java.lang.Object next() -> next
org.openjdk.tools.javac.code.Scope$ScopeListener -> org.openjdk.tools.javac.code.Scope$ScopeListener:
    void symbolAdded(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> symbolAdded
    void symbolRemoved(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> symbolRemoved
org.openjdk.tools.javac.code.Scope$ScopeListenerList -> org.openjdk.tools.javac.code.Scope$ScopeListenerList:
    org.openjdk.tools.javac.util.List listeners -> listeners
    void <init>() -> <init>
    void add(org.openjdk.tools.javac.code.Scope$ScopeListener) -> add
    void symbolAdded(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> symbolAdded
    void symbolRemoved(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> symbolRemoved
    void walkReferences(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope,boolean) -> walkReferences
org.openjdk.tools.javac.code.Scope$StarImportScope -> org.openjdk.tools.javac.code.Scope$StarImportScope:
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    void importAll(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Scope$ImportFilter,org.openjdk.tools.javac.tree.JCTree$JCImport,java.util.function.BiConsumer) -> importAll
    boolean isFilled() -> isFilled
org.openjdk.tools.javac.code.Scope$WriteableScope -> org.openjdk.tools.javac.code.Scope$WriteableScope:
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    void enter(org.openjdk.tools.javac.code.Symbol) -> enter
    void enterIfAbsent(org.openjdk.tools.javac.code.Symbol) -> enterIfAbsent
    void remove(org.openjdk.tools.javac.code.Symbol) -> remove
    org.openjdk.tools.javac.code.Scope$WriteableScope dup() -> dup
    org.openjdk.tools.javac.code.Scope$WriteableScope dup(org.openjdk.tools.javac.code.Symbol) -> dup
    org.openjdk.tools.javac.code.Scope$WriteableScope leave() -> leave
    org.openjdk.tools.javac.code.Scope$WriteableScope dupUnshared() -> dupUnshared
    org.openjdk.tools.javac.code.Scope$WriteableScope dupUnshared(org.openjdk.tools.javac.code.Symbol) -> dupUnshared
    org.openjdk.tools.javac.code.Scope$WriteableScope create(org.openjdk.tools.javac.code.Symbol) -> create
org.openjdk.tools.javac.code.Source -> org.openjdk.tools.javac.code.Source:
    org.openjdk.tools.javac.code.Source JDK1_2 -> JDK1_2
    org.openjdk.tools.javac.code.Source JDK1_3 -> JDK1_3
    org.openjdk.tools.javac.code.Source JDK1_4 -> JDK1_4
    org.openjdk.tools.javac.code.Source JDK1_5 -> JDK1_5
    org.openjdk.tools.javac.code.Source JDK1_6 -> JDK1_6
    org.openjdk.tools.javac.code.Source JDK1_7 -> JDK1_7
    org.openjdk.tools.javac.code.Source JDK1_8 -> JDK1_8
    org.openjdk.tools.javac.code.Source JDK1_9 -> JDK1_9
    org.openjdk.tools.javac.util.Context$Key sourceKey -> sourceKey
    java.lang.String name -> name
    java.util.Map tab -> tab
    org.openjdk.tools.javac.code.Source MIN -> MIN
    org.openjdk.tools.javac.code.Source MAX -> MAX
    org.openjdk.tools.javac.code.Source DEFAULT -> DEFAULT
    org.openjdk.tools.javac.code.Source[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Source[] values() -> values
    org.openjdk.tools.javac.code.Source valueOf(java.lang.String) -> valueOf
    org.openjdk.tools.javac.code.Source instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    org.openjdk.tools.javac.code.Source lookup(java.lang.String) -> lookup
    org.openjdk.tools.javac.jvm.Target requiredTarget() -> requiredTarget
    boolean allowDiamond() -> allowDiamond
    boolean allowMulticatch() -> allowMulticatch
    boolean allowImprovedRethrowAnalysis() -> allowImprovedRethrowAnalysis
    boolean allowImprovedCatchAnalysis() -> allowImprovedCatchAnalysis
    boolean allowModules() -> allowModules
    boolean allowTryWithResources() -> allowTryWithResources
    boolean allowEffectivelyFinalVariablesInTryWithResources() -> allowEffectivelyFinalVariablesInTryWithResources
    boolean allowBinaryLiterals() -> allowBinaryLiterals
    boolean allowUnderscoresInLiterals() -> allowUnderscoresInLiterals
    boolean allowStringsInSwitch() -> allowStringsInSwitch
    boolean allowDeprecationOnImport() -> allowDeprecationOnImport
    boolean allowSimplifiedVarargs() -> allowSimplifiedVarargs
    boolean allowObjectToPrimitiveCast() -> allowObjectToPrimitiveCast
    boolean enforceThisDotInit() -> enforceThisDotInit
    boolean allowPoly() -> allowPoly
    boolean allowLambda() -> allowLambda
    boolean allowMethodReferences() -> allowMethodReferences
    boolean allowDefaultMethods() -> allowDefaultMethods
    boolean allowStaticInterfaceMethods() -> allowStaticInterfaceMethods
    boolean allowStrictMethodClashCheck() -> allowStrictMethodClashCheck
    boolean allowEffectivelyFinalInInnerClasses() -> allowEffectivelyFinalInInnerClasses
    boolean allowTypeAnnotations() -> allowTypeAnnotations
    boolean allowAnnotationsAfterTypeParams() -> allowAnnotationsAfterTypeParams
    boolean allowRepeatedAnnotations() -> allowRepeatedAnnotations
    boolean allowIntersectionTypesInCast() -> allowIntersectionTypesInCast
    boolean allowGraphInference() -> allowGraphInference
    boolean allowFunctionalInterfaceMostSpecific() -> allowFunctionalInterfaceMostSpecific
    boolean allowPostApplicabilityVarargsAccessCheck() -> allowPostApplicabilityVarargsAccessCheck
    boolean mapCapturesToBounds() -> mapCapturesToBounds
    boolean allowPrivateSafeVarargs() -> allowPrivateSafeVarargs
    boolean allowDiamondWithAnonymousClassCreation() -> allowDiamondWithAnonymousClassCreation
    boolean allowUnderscoreIdentifier() -> allowUnderscoreIdentifier
    boolean allowPrivateInterfaceMethods() -> allowPrivateInterfaceMethods
    org.openjdk.javax.lang.model.SourceVersion toSourceVersion(org.openjdk.tools.javac.code.Source) -> toSourceVersion
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Source$1 -> org.openjdk.tools.javac.code.Source$1:
    int[] $SwitchMap$com$sun$tools$javac$code$Source -> $SwitchMap$com$sun$tools$javac$code$Source
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Symbol -> org.openjdk.tools.javac.code.Symbol:
    org.openjdk.tools.javac.code.Kinds$Kind kind -> kind
    long flags_field -> flags_field
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.code.Type type -> type
    org.openjdk.tools.javac.code.Symbol owner -> owner
    org.openjdk.tools.javac.code.Symbol$Completer completer -> completer
    org.openjdk.tools.javac.code.Type erasure_field -> erasure_field
    org.openjdk.tools.javac.code.SymbolMetadata metadata -> metadata
    long flags() -> flags
    org.openjdk.tools.javac.util.List getRawAttributes() -> getRawAttributes
    org.openjdk.tools.javac.util.List getRawTypeAttributes() -> getRawTypeAttributes
    org.openjdk.tools.javac.code.Attribute$Compound attribute(org.openjdk.tools.javac.code.Symbol) -> attribute
    boolean annotationsPendingCompletion() -> annotationsPendingCompletion
    void appendAttributes(org.openjdk.tools.javac.util.List) -> appendAttributes
    void appendClassInitTypeAttributes(org.openjdk.tools.javac.util.List) -> appendClassInitTypeAttributes
    void appendInitTypeAttributes(org.openjdk.tools.javac.util.List) -> appendInitTypeAttributes
    void appendUniqueTypeAttributes(org.openjdk.tools.javac.util.List) -> appendUniqueTypeAttributes
    org.openjdk.tools.javac.util.List getClassInitTypeAttributes() -> getClassInitTypeAttributes
    org.openjdk.tools.javac.util.List getInitTypeAttributes() -> getInitTypeAttributes
    void setInitTypeAttributes(org.openjdk.tools.javac.util.List) -> setInitTypeAttributes
    void setClassInitTypeAttributes(org.openjdk.tools.javac.util.List) -> setClassInitTypeAttributes
    org.openjdk.tools.javac.util.List getDeclarationAttributes() -> getDeclarationAttributes
    boolean hasAnnotations() -> hasAnnotations
    boolean hasTypeAnnotations() -> hasTypeAnnotations
    boolean isCompleted() -> isCompleted
    void prependAttributes(org.openjdk.tools.javac.util.List) -> prependAttributes
    void resetAnnotations() -> resetAnnotations
    void setAttributes(org.openjdk.tools.javac.code.Symbol) -> setAttributes
    void setDeclarationAttributes(org.openjdk.tools.javac.util.List) -> setDeclarationAttributes
    void setTypeAttributes(org.openjdk.tools.javac.util.List) -> setTypeAttributes
    org.openjdk.tools.javac.code.SymbolMetadata initedMetadata() -> initedMetadata
    org.openjdk.tools.javac.code.SymbolMetadata getMetadata() -> getMetadata
    void <init>(org.openjdk.tools.javac.code.Kinds$Kind,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol clone(org.openjdk.tools.javac.code.Symbol) -> clone
    java.lang.Object accept(org.openjdk.tools.javac.code.Symbol$Visitor,java.lang.Object) -> accept
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Symbol location() -> location
    org.openjdk.tools.javac.code.Symbol location(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> location
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
    org.openjdk.tools.javac.code.Type erasure(org.openjdk.tools.javac.code.Types) -> erasure
    org.openjdk.tools.javac.code.Type externalType(org.openjdk.tools.javac.code.Types) -> externalType
    boolean isDeprecated() -> isDeprecated
    boolean hasDeprecatedAnnotation() -> hasDeprecatedAnnotation
    boolean isDeprecatedForRemoval() -> isDeprecatedForRemoval
    boolean isDeprecatableViaAnnotation() -> isDeprecatableViaAnnotation
    boolean isStatic() -> isStatic
    boolean isInterface() -> isInterface
    boolean isPrivate() -> isPrivate
    boolean isEnum() -> isEnum
    boolean isLocal() -> isLocal
    boolean isAnonymous() -> isAnonymous
    boolean isConstructor() -> isConstructor
    org.openjdk.tools.javac.util.Name getQualifiedName() -> getQualifiedName
    org.openjdk.tools.javac.util.Name flatName() -> flatName
    org.openjdk.tools.javac.code.Scope$WriteableScope members() -> members
    boolean isInner() -> isInner
    boolean hasOuterInstance() -> hasOuterInstance
    org.openjdk.tools.javac.code.Symbol$ClassSymbol enclClass() -> enclClass
    org.openjdk.tools.javac.code.Symbol$ClassSymbol outermostClass() -> outermostClass
    org.openjdk.tools.javac.code.Symbol$PackageSymbol packge() -> packge
    boolean isSubClass(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Types) -> isSubClass
    boolean isMemberOf(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types) -> isMemberOf
    boolean isEnclosedBy(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> isEnclosedBy
    boolean hiddenIn(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Types) -> hiddenIn
    org.openjdk.tools.javac.code.Symbol hiddenInInternal(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Types) -> hiddenInInternal
    boolean isInheritedIn(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Types) -> isInheritedIn
    org.openjdk.tools.javac.code.Symbol asMemberOf(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> asMemberOf
    boolean overrides(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types,boolean) -> overrides
    void complete() -> complete
    boolean exists() -> exists
    org.openjdk.tools.javac.code.Type asType() -> asType
    org.openjdk.tools.javac.code.Symbol getEnclosingElement() -> getEnclosingElement
    org.openjdk.javax.lang.model.element.ElementKind getKind() -> getKind
    java.util.Set getModifiers() -> getModifiers
    org.openjdk.tools.javac.util.Name getSimpleName() -> getSimpleName
    org.openjdk.tools.javac.util.List getAnnotationMirrors() -> getAnnotationMirrors
    java.util.List getEnclosedElements() -> getEnclosedElements
    org.openjdk.tools.javac.util.List getTypeParameters() -> getTypeParameters
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.type.TypeMirror asType() -> asType
org.openjdk.tools.javac.code.Symbol$1 -> org.openjdk.tools.javac.code.Symbol$1:
    int[] $SwitchMap$javax$lang$model$element$ElementKind -> $SwitchMap$javax$lang$model$element$ElementKind
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Symbol$ClassSymbol -> org.openjdk.tools.javac.code.Symbol$ClassSymbol:
    org.openjdk.tools.javac.code.Scope$WriteableScope members_field -> members_field
    org.openjdk.tools.javac.util.Name fullname -> fullname
    org.openjdk.tools.javac.util.Name flatname -> flatname
    org.openjdk.javax.tools.JavaFileObject sourcefile -> sourcefile
    org.openjdk.javax.tools.JavaFileObject classfile -> classfile
    org.openjdk.tools.javac.util.List trans_local -> trans_local
    org.openjdk.tools.javac.jvm.Pool pool -> pool
    org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata annotationTypeMetadata -> annotationTypeMetadata
    void <init>(long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    void <init>(long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> <init>
    java.lang.String toString() -> toString
    long flags() -> flags
    org.openjdk.tools.javac.code.Scope$WriteableScope members() -> members
    org.openjdk.tools.javac.util.List getRawAttributes() -> getRawAttributes
    org.openjdk.tools.javac.util.List getRawTypeAttributes() -> getRawTypeAttributes
    org.openjdk.tools.javac.code.Type erasure(org.openjdk.tools.javac.code.Types) -> erasure
    java.lang.String className() -> className
    org.openjdk.tools.javac.util.Name getQualifiedName() -> getQualifiedName
    org.openjdk.tools.javac.util.Name flatName() -> flatName
    boolean isSubClass(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Types) -> isSubClass
    void complete() -> complete
    org.openjdk.tools.javac.util.List getInterfaces() -> getInterfaces
    org.openjdk.tools.javac.code.Type getSuperclass() -> getSuperclass
    org.openjdk.tools.javac.code.Symbol$ClassSymbol getSuperClassToSearchForAnnotations() -> getSuperClassToSearchForAnnotations
    java.lang.annotation.Annotation[] getInheritedAnnotations(java.lang.Class) -> getInheritedAnnotations
    org.openjdk.javax.lang.model.element.ElementKind getKind() -> getKind
    java.util.Set getModifiers() -> getModifiers
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.tools.javac.code.Attribute$Compound getAttribute(java.lang.Class) -> getAttribute
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
    java.lang.Object accept(org.openjdk.tools.javac.code.Symbol$Visitor,java.lang.Object) -> accept
    void markAbstractIfNeeded(org.openjdk.tools.javac.code.Types) -> markAbstractIfNeeded
    void reset() -> reset
    void clearAnnotationMetadata() -> clearAnnotationMetadata
    org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata getAnnotationTypeMetadata() -> getAnnotationTypeMetadata
    boolean isAnnotationType() -> isAnnotationType
    void setAnnotationTypeMetadata(org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata) -> setAnnotationTypeMetadata
    java.util.List getTypeParameters() -> getTypeParameters
    java.util.List getInterfaces() -> getInterfaces
    org.openjdk.javax.lang.model.type.TypeMirror getSuperclass() -> getSuperclass
    org.openjdk.javax.lang.model.element.Name getQualifiedName() -> getQualifiedName
org.openjdk.tools.javac.code.Symbol$Completer -> org.openjdk.tools.javac.code.Symbol$Completer:
    org.openjdk.tools.javac.code.Symbol$Completer NULL_COMPLETER -> NULL_COMPLETER
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    boolean isTerminal() -> isTerminal
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Symbol$Completer$1 -> org.openjdk.tools.javac.code.Symbol$Completer$1:
    void <init>() -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    boolean isTerminal() -> isTerminal
org.openjdk.tools.javac.code.Symbol$CompletionFailure -> org.openjdk.tools.javac.code.Symbol$CompletionFailure:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.code.Symbol sym -> sym
    org.openjdk.tools.javac.util.JCDiagnostic diag -> diag
    java.lang.String errmsg -> errmsg
    void <init>(org.openjdk.tools.javac.code.Symbol,java.lang.String) -> <init>
    void <init>(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic() -> getDiagnostic
    java.lang.String getMessage() -> getMessage
    java.lang.Object getDetailValue() -> getDetailValue
    org.openjdk.tools.javac.code.Symbol$CompletionFailure initCause(java.lang.Throwable) -> initCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
org.openjdk.tools.javac.code.Symbol$DelegatedSymbol -> org.openjdk.tools.javac.code.Symbol$DelegatedSymbol:
    org.openjdk.tools.javac.code.Symbol other -> other
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Symbol location() -> location
    org.openjdk.tools.javac.code.Symbol location(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> location
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
    org.openjdk.tools.javac.code.Type erasure(org.openjdk.tools.javac.code.Types) -> erasure
    org.openjdk.tools.javac.code.Type externalType(org.openjdk.tools.javac.code.Types) -> externalType
    boolean isLocal() -> isLocal
    boolean isConstructor() -> isConstructor
    org.openjdk.tools.javac.util.Name getQualifiedName() -> getQualifiedName
    org.openjdk.tools.javac.util.Name flatName() -> flatName
    org.openjdk.tools.javac.code.Scope$WriteableScope members() -> members
    boolean isInner() -> isInner
    boolean hasOuterInstance() -> hasOuterInstance
    org.openjdk.tools.javac.code.Symbol$ClassSymbol enclClass() -> enclClass
    org.openjdk.tools.javac.code.Symbol$ClassSymbol outermostClass() -> outermostClass
    org.openjdk.tools.javac.code.Symbol$PackageSymbol packge() -> packge
    boolean isSubClass(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Types) -> isSubClass
    boolean isMemberOf(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types) -> isMemberOf
    boolean isEnclosedBy(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> isEnclosedBy
    boolean isInheritedIn(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Types) -> isInheritedIn
    org.openjdk.tools.javac.code.Symbol asMemberOf(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> asMemberOf
    void complete() -> complete
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
    java.lang.Object accept(org.openjdk.tools.javac.code.Symbol$Visitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Symbol getUnderlyingSymbol() -> getUnderlyingSymbol
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.type.TypeMirror asType() -> asType
org.openjdk.tools.javac.code.Symbol$DynamicMethodSymbol -> org.openjdk.tools.javac.code.Symbol$DynamicMethodSymbol:
    java.lang.Object[] staticArgs -> staticArgs
    org.openjdk.tools.javac.code.Symbol bsm -> bsm
    int bsmKind -> bsmKind
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Type,java.lang.Object[]) -> <init>
    boolean isDynamic() -> isDynamic
org.openjdk.tools.javac.code.Symbol$MethodSymbol -> org.openjdk.tools.javac.code.Symbol$MethodSymbol:
    org.openjdk.tools.javac.jvm.Code code -> code
    org.openjdk.tools.javac.util.List extraParams -> extraParams
    org.openjdk.tools.javac.util.List capturedLocals -> capturedLocals
    org.openjdk.tools.javac.util.List params -> params
    org.openjdk.tools.javac.code.Attribute defaultValue -> defaultValue
    org.openjdk.tools.javac.util.Filter implementation_filter -> implementation_filter
    void <init>(long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol$MethodSymbol clone(org.openjdk.tools.javac.code.Symbol) -> clone
    java.util.Set getModifiers() -> getModifiers
    java.lang.String toString() -> toString
    boolean isDynamic() -> isDynamic
    org.openjdk.tools.javac.code.Symbol implemented(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types) -> implemented
    org.openjdk.tools.javac.code.Symbol implementedIn(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types) -> implementedIn
    boolean binaryOverrides(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types) -> binaryOverrides
    org.openjdk.tools.javac.code.Symbol$MethodSymbol binaryImplementation(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Types) -> binaryImplementation
    boolean overrides(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types,boolean) -> overrides
    boolean overrides(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types,boolean,boolean) -> overrides
    boolean isOverridableIn(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> isOverridableIn
    boolean isInheritedIn(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Types) -> isInheritedIn
    boolean isLambdaMethod() -> isLambdaMethod
    org.openjdk.tools.javac.code.Symbol$MethodSymbol implementation(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types,boolean) -> implementation
    org.openjdk.tools.javac.code.Symbol$MethodSymbol implementation(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types,boolean,org.openjdk.tools.javac.util.Filter) -> implementation
    org.openjdk.tools.javac.util.List params() -> params
    org.openjdk.tools.javac.code.Symbol asMemberOf(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> asMemberOf
    org.openjdk.javax.lang.model.element.ElementKind getKind() -> getKind
    boolean isStaticOrInstanceInit() -> isStaticOrInstanceInit
    org.openjdk.tools.javac.code.Attribute getDefaultValue() -> getDefaultValue
    org.openjdk.tools.javac.util.List getParameters() -> getParameters
    boolean isVarArgs() -> isVarArgs
    boolean isDefault() -> isDefault
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
    java.lang.Object accept(org.openjdk.tools.javac.code.Symbol$Visitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type getReceiverType() -> getReceiverType
    org.openjdk.tools.javac.code.Type getReturnType() -> getReturnType
    org.openjdk.tools.javac.util.List getThrownTypes() -> getThrownTypes
    org.openjdk.tools.javac.code.Symbol clone(org.openjdk.tools.javac.code.Symbol) -> clone
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.type.TypeMirror asType() -> asType
    org.openjdk.javax.lang.model.element.AnnotationValue getDefaultValue() -> getDefaultValue
    java.util.List getThrownTypes() -> getThrownTypes
    org.openjdk.javax.lang.model.type.TypeMirror getReceiverType() -> getReceiverType
    java.util.List getParameters() -> getParameters
    org.openjdk.javax.lang.model.type.TypeMirror getReturnType() -> getReturnType
    java.util.List getTypeParameters() -> getTypeParameters
    boolean lambda$static$0(org.openjdk.tools.javac.code.Symbol) -> lambda$static$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Symbol$MethodSymbol$1 -> org.openjdk.tools.javac.code.Symbol$MethodSymbol$1:
    org.openjdk.tools.javac.code.Symbol$MethodSymbol this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Symbol$MethodSymbol,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.element.AnnotationValue getDefaultValue() -> getDefaultValue
    java.util.List getThrownTypes() -> getThrownTypes
    org.openjdk.javax.lang.model.type.TypeMirror getReceiverType() -> getReceiverType
    java.util.List getParameters() -> getParameters
    org.openjdk.javax.lang.model.type.TypeMirror getReturnType() -> getReturnType
    java.util.List getTypeParameters() -> getTypeParameters
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    org.openjdk.javax.lang.model.type.TypeMirror asType() -> asType
    org.openjdk.tools.javac.code.Symbol clone(org.openjdk.tools.javac.code.Symbol) -> clone
org.openjdk.tools.javac.code.Symbol$ModuleFlags -> org.openjdk.tools.javac.code.Symbol$ModuleFlags:
    org.openjdk.tools.javac.code.Symbol$ModuleFlags OPEN -> OPEN
    org.openjdk.tools.javac.code.Symbol$ModuleFlags SYNTHETIC -> SYNTHETIC
    org.openjdk.tools.javac.code.Symbol$ModuleFlags MANDATED -> MANDATED
    int value -> value
    org.openjdk.tools.javac.code.Symbol$ModuleFlags[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Symbol$ModuleFlags[] values() -> values
    org.openjdk.tools.javac.code.Symbol$ModuleFlags valueOf(java.lang.String) -> valueOf
    int value(java.util.Set) -> value
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Symbol$ModuleResolutionFlags -> org.openjdk.tools.javac.code.Symbol$ModuleResolutionFlags:
    org.openjdk.tools.javac.code.Symbol$ModuleResolutionFlags DO_NOT_RESOLVE_BY_DEFAULT -> DO_NOT_RESOLVE_BY_DEFAULT
    org.openjdk.tools.javac.code.Symbol$ModuleResolutionFlags WARN_DEPRECATED -> WARN_DEPRECATED
    org.openjdk.tools.javac.code.Symbol$ModuleResolutionFlags WARN_DEPRECATED_REMOVAL -> WARN_DEPRECATED_REMOVAL
    org.openjdk.tools.javac.code.Symbol$ModuleResolutionFlags WARN_INCUBATING -> WARN_INCUBATING
    int value -> value
    org.openjdk.tools.javac.code.Symbol$ModuleResolutionFlags[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Symbol$ModuleResolutionFlags[] values() -> values
    org.openjdk.tools.javac.code.Symbol$ModuleResolutionFlags valueOf(java.lang.String) -> valueOf
    int value(java.util.Set) -> value
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Symbol$ModuleSymbol -> org.openjdk.tools.javac.code.Symbol$ModuleSymbol:
    org.openjdk.tools.javac.util.Name version -> version
    org.openjdk.javax.tools.JavaFileManager$Location sourceLocation -> sourceLocation
    org.openjdk.javax.tools.JavaFileManager$Location classLocation -> classLocation
    org.openjdk.javax.tools.JavaFileManager$Location patchLocation -> patchLocation
    org.openjdk.javax.tools.JavaFileManager$Location patchOutputLocation -> patchOutputLocation
    org.openjdk.tools.javac.util.List directives -> directives
    org.openjdk.tools.javac.util.List requires -> requires
    org.openjdk.tools.javac.util.List exports -> exports
    org.openjdk.tools.javac.util.List opens -> opens
    org.openjdk.tools.javac.util.List provides -> provides
    org.openjdk.tools.javac.util.List uses -> uses
    org.openjdk.tools.javac.code.Symbol$ClassSymbol module_info -> module_info
    org.openjdk.tools.javac.code.Symbol$PackageSymbol unnamedPackage -> unnamedPackage
    java.util.Map visiblePackages -> visiblePackages
    java.util.Set readModules -> readModules
    org.openjdk.tools.javac.util.List enclosedPackages -> enclosedPackages
    org.openjdk.tools.javac.code.Symbol$Completer usesProvidesCompleter -> usesProvidesCompleter
    java.util.Set flags -> flags
    java.util.Set resolutionFlags -> resolutionFlags
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol create(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Name) -> create
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.util.Name getSimpleName() -> getSimpleName
    boolean isOpen() -> isOpen
    boolean isUnnamed() -> isUnnamed
    boolean isDeprecated() -> isDeprecated
    boolean isNoModule() -> isNoModule
    org.openjdk.javax.lang.model.element.ElementKind getKind() -> getKind
    java.util.List getDirectives() -> getDirectives
    void completeUsesProvides() -> completeUsesProvides
    org.openjdk.tools.javac.code.Symbol$ClassSymbol outermostClass() -> outermostClass
    java.lang.String toString() -> toString
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.util.List getEnclosedElements() -> getEnclosedElements
    void reset() -> reset
    java.util.List getEnclosedElements() -> getEnclosedElements
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.element.Name getQualifiedName() -> getQualifiedName
    boolean lambda$getEnclosedElements$0(org.openjdk.tools.javac.code.Symbol) -> lambda$getEnclosedElements$0
org.openjdk.tools.javac.code.Symbol$OperatorSymbol -> org.openjdk.tools.javac.code.Symbol$OperatorSymbol:
    int opcode -> opcode
    int accessCode -> accessCode
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,int,org.openjdk.tools.javac.code.Symbol) -> <init>
    java.lang.Object accept(org.openjdk.tools.javac.code.Symbol$Visitor,java.lang.Object) -> accept
    int getAccessCode(org.openjdk.tools.javac.tree.JCTree$Tag) -> getAccessCode
org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode -> org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode:
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode UNKNOWN -> UNKNOWN
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode DEREF -> DEREF
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode ASSIGN -> ASSIGN
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode PREINC -> PREINC
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode PREDEC -> PREDEC
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode POSTINC -> POSTINC
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode POSTDEC -> POSTDEC
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode FIRSTASGOP -> FIRSTASGOP
    int code -> code
    org.openjdk.tools.javac.tree.JCTree$Tag tag -> tag
    int numberOfAccessCodes -> numberOfAccessCodes
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode[] values() -> values
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol$AccessCode getFromCode(int) -> getFromCode
    int from(org.openjdk.tools.javac.tree.JCTree$Tag,int) -> from
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Symbol$PackageSymbol -> org.openjdk.tools.javac.code.Symbol$PackageSymbol:
    org.openjdk.tools.javac.code.Scope$WriteableScope members_field -> members_field
    org.openjdk.tools.javac.util.Name fullname -> fullname
    org.openjdk.tools.javac.code.Symbol$ClassSymbol package_info -> package_info
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol modle -> modle
    org.openjdk.javax.tools.JavaFileObject sourcefile -> sourcefile
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> <init>
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.util.Name getQualifiedName() -> getQualifiedName
    boolean isUnnamed() -> isUnnamed
    org.openjdk.tools.javac.code.Scope$WriteableScope members() -> members
    long flags() -> flags
    org.openjdk.tools.javac.util.List getRawAttributes() -> getRawAttributes
    void mergeAttributes() -> mergeAttributes
    boolean exists() -> exists
    org.openjdk.javax.lang.model.element.ElementKind getKind() -> getKind
    org.openjdk.tools.javac.code.Symbol getEnclosingElement() -> getEnclosingElement
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
    java.lang.Object accept(org.openjdk.tools.javac.code.Symbol$Visitor,java.lang.Object) -> accept
    void reset() -> reset
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    org.openjdk.javax.lang.model.element.Name getQualifiedName() -> getQualifiedName
org.openjdk.tools.javac.code.Symbol$TypeSymbol -> org.openjdk.tools.javac.code.Symbol$TypeSymbol:
    void <init>(org.openjdk.tools.javac.code.Kinds$Kind,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.util.Name formFullName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> formFullName
    org.openjdk.tools.javac.util.Name formFlatName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> formFlatName
    boolean precedes(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Types) -> precedes
    java.util.List getEnclosedElements() -> getEnclosedElements
    org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata getAnnotationTypeMetadata() -> getAnnotationTypeMetadata
    boolean isAnnotationType() -> isAnnotationType
    java.lang.Object accept(org.openjdk.tools.javac.code.Symbol$Visitor,java.lang.Object) -> accept
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.type.TypeMirror asType() -> asType
org.openjdk.tools.javac.code.Symbol$TypeVariableSymbol -> org.openjdk.tools.javac.code.Symbol$TypeVariableSymbol:
    void <init>(long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.javax.lang.model.element.ElementKind getKind() -> getKind
    org.openjdk.tools.javac.code.Symbol getGenericElement() -> getGenericElement
    org.openjdk.tools.javac.util.List getBounds() -> getBounds
    org.openjdk.tools.javac.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Attribute$Compound getAttribute(java.lang.Class) -> getAttribute
    boolean isCurrentSymbolsAnnotation(org.openjdk.tools.javac.code.Attribute$TypeCompound,int) -> isCurrentSymbolsAnnotation
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    java.util.List getBounds() -> getBounds
    org.openjdk.javax.lang.model.element.Element getGenericElement() -> getGenericElement
org.openjdk.tools.javac.code.Symbol$VarSymbol -> org.openjdk.tools.javac.code.Symbol$VarSymbol:
    int pos -> pos
    int adr -> adr
    java.lang.Object data -> data
    void <init>(long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol$VarSymbol clone(org.openjdk.tools.javac.code.Symbol) -> clone
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Symbol asMemberOf(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> asMemberOf
    org.openjdk.javax.lang.model.element.ElementKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
    java.lang.Object getConstantValue() -> getConstantValue
    void setLazyConstValue(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> setLazyConstValue
    boolean isExceptionParameter() -> isExceptionParameter
    boolean isResourceVariable() -> isResourceVariable
    java.lang.Object getConstValue() -> getConstValue
    void setData(java.lang.Object) -> setData
    java.lang.Object accept(org.openjdk.tools.javac.code.Symbol$Visitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Symbol clone(org.openjdk.tools.javac.code.Symbol) -> clone
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.javax.lang.model.type.TypeMirror asType() -> asType
    java.lang.Object lambda$setLazyConstValue$0(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> lambda$setLazyConstValue$0
org.openjdk.tools.javac.code.Symbol$VarSymbol$1 -> org.openjdk.tools.javac.code.Symbol$VarSymbol$1:
    org.openjdk.tools.javac.code.Symbol$VarSymbol this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Symbol$VarSymbol,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
    org.openjdk.javax.lang.model.element.Element getEnclosingElement() -> getEnclosingElement
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.type.TypeMirror asType() -> asType
    org.openjdk.tools.javac.code.Symbol clone(org.openjdk.tools.javac.code.Symbol) -> clone
org.openjdk.tools.javac.code.Symbol$Visitor -> org.openjdk.tools.javac.code.Symbol$Visitor:
    java.lang.Object visitClassSymbol(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.lang.Object) -> visitClassSymbol
    java.lang.Object visitMethodSymbol(org.openjdk.tools.javac.code.Symbol$MethodSymbol,java.lang.Object) -> visitMethodSymbol
    java.lang.Object visitPackageSymbol(org.openjdk.tools.javac.code.Symbol$PackageSymbol,java.lang.Object) -> visitPackageSymbol
    java.lang.Object visitOperatorSymbol(org.openjdk.tools.javac.code.Symbol$OperatorSymbol,java.lang.Object) -> visitOperatorSymbol
    java.lang.Object visitVarSymbol(org.openjdk.tools.javac.code.Symbol$VarSymbol,java.lang.Object) -> visitVarSymbol
    java.lang.Object visitTypeSymbol(org.openjdk.tools.javac.code.Symbol$TypeSymbol,java.lang.Object) -> visitTypeSymbol
    java.lang.Object visitSymbol(org.openjdk.tools.javac.code.Symbol,java.lang.Object) -> visitSymbol
org.openjdk.tools.javac.code.SymbolMetadata -> org.openjdk.tools.javac.code.SymbolMetadata:
    org.openjdk.tools.javac.util.List DECL_NOT_STARTED -> DECL_NOT_STARTED
    org.openjdk.tools.javac.util.List DECL_IN_PROGRESS -> DECL_IN_PROGRESS
    org.openjdk.tools.javac.util.List attributes -> attributes
    org.openjdk.tools.javac.util.List type_attributes -> type_attributes
    org.openjdk.tools.javac.util.List init_type_attributes -> init_type_attributes
    org.openjdk.tools.javac.util.List clinit_type_attributes -> clinit_type_attributes
    org.openjdk.tools.javac.code.Symbol sym -> sym
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.util.List getDeclarationAttributes() -> getDeclarationAttributes
    org.openjdk.tools.javac.util.List getTypeAttributes() -> getTypeAttributes
    org.openjdk.tools.javac.util.List getInitTypeAttributes() -> getInitTypeAttributes
    org.openjdk.tools.javac.util.List getClassInitTypeAttributes() -> getClassInitTypeAttributes
    void setDeclarationAttributes(org.openjdk.tools.javac.util.List) -> setDeclarationAttributes
    void setTypeAttributes(org.openjdk.tools.javac.util.List) -> setTypeAttributes
    void setInitTypeAttributes(org.openjdk.tools.javac.util.List) -> setInitTypeAttributes
    void setClassInitTypeAttributes(org.openjdk.tools.javac.util.List) -> setClassInitTypeAttributes
    void setAttributes(org.openjdk.tools.javac.code.SymbolMetadata) -> setAttributes
    org.openjdk.tools.javac.code.SymbolMetadata reset() -> reset
    boolean isEmpty() -> isEmpty
    boolean isTypesEmpty() -> isTypesEmpty
    boolean pendingCompletion() -> pendingCompletion
    org.openjdk.tools.javac.code.SymbolMetadata append(org.openjdk.tools.javac.util.List) -> append
    org.openjdk.tools.javac.code.SymbolMetadata appendUniqueTypes(org.openjdk.tools.javac.util.List) -> appendUniqueTypes
    org.openjdk.tools.javac.code.SymbolMetadata appendInitTypeAttributes(org.openjdk.tools.javac.util.List) -> appendInitTypeAttributes
    org.openjdk.tools.javac.code.SymbolMetadata appendClassInitTypeAttributes(org.openjdk.tools.javac.util.List) -> appendClassInitTypeAttributes
    org.openjdk.tools.javac.code.SymbolMetadata prepend(org.openjdk.tools.javac.util.List) -> prepend
    org.openjdk.tools.javac.util.List filterDeclSentinels(org.openjdk.tools.javac.util.List) -> filterDeclSentinels
    boolean isStarted() -> isStarted
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Symtab -> org.openjdk.tools.javac.code.Symtab:
    org.openjdk.tools.javac.util.Context$Key symtabKey -> symtabKey
    org.openjdk.tools.javac.code.Type$JCPrimitiveType byteType -> byteType
    org.openjdk.tools.javac.code.Type$JCPrimitiveType charType -> charType
    org.openjdk.tools.javac.code.Type$JCPrimitiveType shortType -> shortType
    org.openjdk.tools.javac.code.Type$JCPrimitiveType intType -> intType
    org.openjdk.tools.javac.code.Type$JCPrimitiveType longType -> longType
    org.openjdk.tools.javac.code.Type$JCPrimitiveType floatType -> floatType
    org.openjdk.tools.javac.code.Type$JCPrimitiveType doubleType -> doubleType
    org.openjdk.tools.javac.code.Type$JCPrimitiveType booleanType -> booleanType
    org.openjdk.tools.javac.code.Type botType -> botType
    org.openjdk.tools.javac.code.Type$JCVoidType voidType -> voidType
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.JavacMessages messages -> messages
    org.openjdk.tools.javac.code.Symbol$Completer initialCompleter -> initialCompleter
    org.openjdk.tools.javac.code.Symbol$Completer moduleCompleter -> moduleCompleter
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol unnamedModule -> unnamedModule
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol errModule -> errModule
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol noModule -> noModule
    org.openjdk.tools.javac.code.Symbol$PackageSymbol rootPackage -> rootPackage
    org.openjdk.tools.javac.code.Symbol$TypeSymbol noSymbol -> noSymbol
    org.openjdk.tools.javac.code.Symbol$ClassSymbol errSymbol -> errSymbol
    org.openjdk.tools.javac.code.Symbol$ClassSymbol unknownSymbol -> unknownSymbol
    org.openjdk.tools.javac.code.Type errType -> errType
    org.openjdk.tools.javac.code.Type unknownType -> unknownType
    org.openjdk.tools.javac.code.Symbol$ClassSymbol arrayClass -> arrayClass
    org.openjdk.tools.javac.code.Symbol$MethodSymbol arrayCloneMethod -> arrayCloneMethod
    org.openjdk.tools.javac.code.Symbol$ClassSymbol boundClass -> boundClass
    org.openjdk.tools.javac.code.Symbol$ClassSymbol methodClass -> methodClass
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol java_base -> java_base
    org.openjdk.tools.javac.code.Type objectType -> objectType
    org.openjdk.tools.javac.code.Type objectsType -> objectsType
    org.openjdk.tools.javac.code.Type classType -> classType
    org.openjdk.tools.javac.code.Type classLoaderType -> classLoaderType
    org.openjdk.tools.javac.code.Type stringType -> stringType
    org.openjdk.tools.javac.code.Type stringBufferType -> stringBufferType
    org.openjdk.tools.javac.code.Type stringBuilderType -> stringBuilderType
    org.openjdk.tools.javac.code.Type cloneableType -> cloneableType
    org.openjdk.tools.javac.code.Type serializableType -> serializableType
    org.openjdk.tools.javac.code.Type serializedLambdaType -> serializedLambdaType
    org.openjdk.tools.javac.code.Type varHandleType -> varHandleType
    org.openjdk.tools.javac.code.Type methodHandleType -> methodHandleType
    org.openjdk.tools.javac.code.Type methodHandleLookupType -> methodHandleLookupType
    org.openjdk.tools.javac.code.Type methodTypeType -> methodTypeType
    org.openjdk.tools.javac.code.Type nativeHeaderType -> nativeHeaderType
    org.openjdk.tools.javac.code.Type throwableType -> throwableType
    org.openjdk.tools.javac.code.Type errorType -> errorType
    org.openjdk.tools.javac.code.Type interruptedExceptionType -> interruptedExceptionType
    org.openjdk.tools.javac.code.Type illegalArgumentExceptionType -> illegalArgumentExceptionType
    org.openjdk.tools.javac.code.Type exceptionType -> exceptionType
    org.openjdk.tools.javac.code.Type runtimeExceptionType -> runtimeExceptionType
    org.openjdk.tools.javac.code.Type classNotFoundExceptionType -> classNotFoundExceptionType
    org.openjdk.tools.javac.code.Type noClassDefFoundErrorType -> noClassDefFoundErrorType
    org.openjdk.tools.javac.code.Type noSuchFieldErrorType -> noSuchFieldErrorType
    org.openjdk.tools.javac.code.Type assertionErrorType -> assertionErrorType
    org.openjdk.tools.javac.code.Type cloneNotSupportedExceptionType -> cloneNotSupportedExceptionType
    org.openjdk.tools.javac.code.Type annotationType -> annotationType
    org.openjdk.tools.javac.code.Symbol$TypeSymbol enumSym -> enumSym
    org.openjdk.tools.javac.code.Type listType -> listType
    org.openjdk.tools.javac.code.Type collectionsType -> collectionsType
    org.openjdk.tools.javac.code.Type comparableType -> comparableType
    org.openjdk.tools.javac.code.Type comparatorType -> comparatorType
    org.openjdk.tools.javac.code.Type arraysType -> arraysType
    org.openjdk.tools.javac.code.Type iterableType -> iterableType
    org.openjdk.tools.javac.code.Type iteratorType -> iteratorType
    org.openjdk.tools.javac.code.Type annotationTargetType -> annotationTargetType
    org.openjdk.tools.javac.code.Type overrideType -> overrideType
    org.openjdk.tools.javac.code.Type retentionType -> retentionType
    org.openjdk.tools.javac.code.Type deprecatedType -> deprecatedType
    org.openjdk.tools.javac.code.Type suppressWarningsType -> suppressWarningsType
    org.openjdk.tools.javac.code.Type supplierType -> supplierType
    org.openjdk.tools.javac.code.Type inheritedType -> inheritedType
    org.openjdk.tools.javac.code.Type profileType -> profileType
    org.openjdk.tools.javac.code.Type proprietaryType -> proprietaryType
    org.openjdk.tools.javac.code.Type systemType -> systemType
    org.openjdk.tools.javac.code.Type autoCloseableType -> autoCloseableType
    org.openjdk.tools.javac.code.Type trustMeType -> trustMeType
    org.openjdk.tools.javac.code.Type lambdaMetafactory -> lambdaMetafactory
    org.openjdk.tools.javac.code.Type stringConcatFactory -> stringConcatFactory
    org.openjdk.tools.javac.code.Type repeatableType -> repeatableType
    org.openjdk.tools.javac.code.Type documentedType -> documentedType
    org.openjdk.tools.javac.code.Type elementTypeType -> elementTypeType
    org.openjdk.tools.javac.code.Type functionalInterfaceType -> functionalInterfaceType
    org.openjdk.tools.javac.code.Symbol$VarSymbol lengthVar -> lengthVar
    org.openjdk.tools.javac.code.Symbol$MethodSymbol enumFinalFinalize -> enumFinalFinalize
    org.openjdk.tools.javac.code.Symbol$MethodSymbol autoCloseableClose -> autoCloseableClose
    org.openjdk.tools.javac.code.Type[] typeOfTag -> typeOfTag
    org.openjdk.tools.javac.util.Name[] boxedName -> boxedName
    java.util.Map classes -> classes
    java.util.Map packages -> packages
    java.util.Map modules -> modules
    org.openjdk.tools.javac.code.Symbol$ClassSymbol predefClass -> predefClass
    java.util.Map EMPTY -> EMPTY
    org.openjdk.tools.javac.code.Symtab instance(org.openjdk.tools.javac.util.Context) -> instance
    void initType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> initType
    void initType(org.openjdk.tools.javac.code.Type,java.lang.String) -> initType
    void initType(org.openjdk.tools.javac.code.Type,java.lang.String,java.lang.String) -> initType
    org.openjdk.tools.javac.code.Type enterClass(java.lang.String) -> enterClass
    void synthesizeEmptyInterfaceIfMissing(org.openjdk.tools.javac.code.Type) -> synthesizeEmptyInterfaceIfMissing
    void synthesizeBoxTypeIfMissing(org.openjdk.tools.javac.code.Type) -> synthesizeBoxTypeIfMissing
    org.openjdk.tools.javac.code.Type enterSyntheticAnnotation(java.lang.String) -> enterSyntheticAnnotation
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.code.Symbol$ClassSymbol defineClass(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> defineClass
    org.openjdk.tools.javac.code.Symbol$ClassSymbol enterClass(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> enterClass
    org.openjdk.tools.javac.code.Symbol$ClassSymbol getClass(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> getClass
    org.openjdk.tools.javac.code.Symbol$PackageSymbol lookupPackage(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> lookupPackage
    void removeClass(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> removeClass
    java.lang.Iterable getAllClasses() -> getAllClasses
    void doEnterClass(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> doEnterClass
    org.openjdk.tools.javac.code.Symbol$ClassSymbol enterClass(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> enterClass
    boolean packageExists(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> packageExists
    org.openjdk.tools.javac.code.Symbol$PackageSymbol enterPackage(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> enterPackage
    void doEnterPackage(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> doEnterPackage
    void addRootPackageFor(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> addRootPackageFor
    org.openjdk.tools.javac.code.Symbol$PackageSymbol getPackage(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> getPackage
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol enterModule(org.openjdk.tools.javac.util.Name) -> enterModule
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol getModule(org.openjdk.tools.javac.util.Name) -> getModule
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol inferModule(org.openjdk.tools.javac.util.Name) -> inferModule
    org.openjdk.tools.javac.util.List listPackageModules(org.openjdk.tools.javac.util.Name) -> listPackageModules
    java.util.Collection getAllModules() -> getAllModules
    java.lang.Iterable getClassesForName(org.openjdk.tools.javac.util.Name) -> getClassesForName
    java.lang.Iterable getPackagesForName(org.openjdk.tools.javac.util.Name) -> getPackagesForName
    void lambda$enterModule$8(org.openjdk.tools.javac.code.Symbol) -> lambda$enterModule$8
    void lambda$addRootPackageFor$7(org.openjdk.tools.javac.code.Symbol) -> lambda$addRootPackageFor$7
    java.util.Map lambda$doEnterPackage$6(org.openjdk.tools.javac.util.Name) -> lambda$doEnterPackage$6
    java.lang.String lambda$enterPackage$5(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$enterPackage$5
    java.util.Map lambda$doEnterClass$4(org.openjdk.tools.javac.util.Name) -> lambda$doEnterClass$4
    java.util.Iterator lambda$getAllClasses$3() -> lambda$getAllClasses$3
    java.util.Iterator lambda$null$2(java.util.Map) -> lambda$null$2
    boolean lambda$lookupPackage$1(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$lookupPackage$1
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol lambda$lookupPackage$0(org.openjdk.tools.javac.code.Directive$RequiresDirective) -> lambda$lookupPackage$0
    org.openjdk.tools.javac.util.Names access$000(org.openjdk.tools.javac.code.Symtab) -> access$000
    org.openjdk.tools.javac.util.JavacMessages access$100(org.openjdk.tools.javac.code.Symtab) -> access$100
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Symtab$1 -> org.openjdk.tools.javac.code.Symtab$1:
    org.openjdk.tools.javac.code.Symbol$Completer val$completer -> val$completer
    org.openjdk.tools.javac.code.Symtab this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.code.Symbol$Completer) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    boolean isTerminal() -> isTerminal
org.openjdk.tools.javac.code.Symtab$2 -> org.openjdk.tools.javac.code.Symtab$2:
    org.openjdk.tools.javac.code.Symbol$Completer val$completer -> val$completer
    org.openjdk.tools.javac.code.Type val$type -> val$type
    org.openjdk.tools.javac.code.Symtab this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.code.Symbol$Completer,org.openjdk.tools.javac.code.Type) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    boolean isTerminal() -> isTerminal
org.openjdk.tools.javac.code.Symtab$3 -> org.openjdk.tools.javac.code.Symtab$3:
    org.openjdk.tools.javac.code.Symtab this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> <init>
    java.lang.String toString() -> toString
org.openjdk.tools.javac.code.Symtab$4 -> org.openjdk.tools.javac.code.Symtab$4:
    org.openjdk.tools.javac.code.Symtab this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> <init>
org.openjdk.tools.javac.code.Symtab$5 -> org.openjdk.tools.javac.code.Symtab$5:
    org.openjdk.tools.javac.code.Symtab this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> <init>
    boolean isNoModule() -> isNoModule
org.openjdk.tools.javac.code.Symtab$6 -> org.openjdk.tools.javac.code.Symtab$6:
    org.openjdk.tools.javac.code.Symtab this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.code.Kinds$Kind,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
org.openjdk.tools.javac.code.Symtab$7 -> org.openjdk.tools.javac.code.Symtab$7:
    org.openjdk.tools.javac.code.Symtab this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> <init>
    java.lang.String toString() -> toString
org.openjdk.tools.javac.code.TargetType -> org.openjdk.tools.javac.code.TargetType:
    org.openjdk.tools.javac.code.TargetType CLASS_TYPE_PARAMETER -> CLASS_TYPE_PARAMETER
    org.openjdk.tools.javac.code.TargetType METHOD_TYPE_PARAMETER -> METHOD_TYPE_PARAMETER
    org.openjdk.tools.javac.code.TargetType CLASS_EXTENDS -> CLASS_EXTENDS
    org.openjdk.tools.javac.code.TargetType CLASS_TYPE_PARAMETER_BOUND -> CLASS_TYPE_PARAMETER_BOUND
    org.openjdk.tools.javac.code.TargetType METHOD_TYPE_PARAMETER_BOUND -> METHOD_TYPE_PARAMETER_BOUND
    org.openjdk.tools.javac.code.TargetType FIELD -> FIELD
    org.openjdk.tools.javac.code.TargetType METHOD_RETURN -> METHOD_RETURN
    org.openjdk.tools.javac.code.TargetType METHOD_RECEIVER -> METHOD_RECEIVER
    org.openjdk.tools.javac.code.TargetType METHOD_FORMAL_PARAMETER -> METHOD_FORMAL_PARAMETER
    org.openjdk.tools.javac.code.TargetType THROWS -> THROWS
    org.openjdk.tools.javac.code.TargetType LOCAL_VARIABLE -> LOCAL_VARIABLE
    org.openjdk.tools.javac.code.TargetType RESOURCE_VARIABLE -> RESOURCE_VARIABLE
    org.openjdk.tools.javac.code.TargetType EXCEPTION_PARAMETER -> EXCEPTION_PARAMETER
    org.openjdk.tools.javac.code.TargetType INSTANCEOF -> INSTANCEOF
    org.openjdk.tools.javac.code.TargetType NEW -> NEW
    org.openjdk.tools.javac.code.TargetType CONSTRUCTOR_REFERENCE -> CONSTRUCTOR_REFERENCE
    org.openjdk.tools.javac.code.TargetType METHOD_REFERENCE -> METHOD_REFERENCE
    org.openjdk.tools.javac.code.TargetType CAST -> CAST
    org.openjdk.tools.javac.code.TargetType CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT -> CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT
    org.openjdk.tools.javac.code.TargetType METHOD_INVOCATION_TYPE_ARGUMENT -> METHOD_INVOCATION_TYPE_ARGUMENT
    org.openjdk.tools.javac.code.TargetType CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT -> CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT
    org.openjdk.tools.javac.code.TargetType METHOD_REFERENCE_TYPE_ARGUMENT -> METHOD_REFERENCE_TYPE_ARGUMENT
    org.openjdk.tools.javac.code.TargetType UNKNOWN -> UNKNOWN
    int MAXIMUM_TARGET_TYPE_VALUE -> MAXIMUM_TARGET_TYPE_VALUE
    int targetTypeValue -> targetTypeValue
    boolean isLocal -> isLocal
    org.openjdk.tools.javac.code.TargetType[] targets -> targets
    org.openjdk.tools.javac.code.TargetType[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.TargetType[] values() -> values
    org.openjdk.tools.javac.code.TargetType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <init>(java.lang.String,int,int,boolean) -> <init>
    boolean isLocal() -> isLocal
    int targetTypeValue() -> targetTypeValue
    boolean isValidTargetTypeValue(int) -> isValidTargetTypeValue
    org.openjdk.tools.javac.code.TargetType fromTargetTypeValue(int) -> fromTargetTypeValue
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Type -> org.openjdk.tools.javac.code.Type:
    org.openjdk.tools.javac.code.TypeMetadata metadata -> metadata
    org.openjdk.tools.javac.code.Type$JCNoType noType -> noType
    org.openjdk.tools.javac.code.Type$JCNoType recoveryType -> recoveryType
    org.openjdk.tools.javac.code.Type$JCNoType stuckType -> stuckType
    boolean moreInfo -> moreInfo
    org.openjdk.tools.javac.code.Symbol$TypeSymbol tsym -> tsym
    org.openjdk.tools.javac.code.Types$TypeMapping stripMetadata -> stripMetadata
    org.openjdk.tools.javac.code.TypeMetadata getMetadata() -> getMetadata
    org.openjdk.tools.javac.code.TypeMetadata$Entry getMetadataOfKind(org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind) -> getMetadataOfKind
    boolean hasTag(org.openjdk.tools.javac.code.TypeTag) -> hasTag
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    boolean isNumeric() -> isNumeric
    boolean isIntegral() -> isIntegral
    boolean isPrimitive() -> isPrimitive
    boolean isPrimitiveOrVoid() -> isPrimitiveOrVoid
    boolean isReference() -> isReference
    boolean isNullOrReference() -> isNullOrReference
    boolean isPartial() -> isPartial
    java.lang.Object constValue() -> constValue
    boolean isFalse() -> isFalse
    boolean isTrue() -> isTrue
    org.openjdk.tools.javac.code.Type getModelType() -> getModelType
    org.openjdk.tools.javac.util.List getModelTypes(org.openjdk.tools.javac.util.List) -> getModelTypes
    org.openjdk.tools.javac.code.Type getOriginalType() -> getOriginalType
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    void <init>(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type map(org.openjdk.tools.javac.code.Types$TypeMapping,java.lang.Object) -> map
    org.openjdk.tools.javac.code.Type map(org.openjdk.tools.javac.code.Types$TypeMapping) -> map
    org.openjdk.tools.javac.code.Type constType(java.lang.Object) -> constType
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    org.openjdk.tools.javac.code.Type typeNoMetadata() -> typeNoMetadata
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    boolean needsStripping() -> needsStripping
    org.openjdk.tools.javac.code.Type stripMetadataIfNeeded() -> stripMetadataIfNeeded
    org.openjdk.tools.javac.code.Type stripMetadata() -> stripMetadata
    org.openjdk.tools.javac.code.Type annotatedType(org.openjdk.tools.javac.util.List) -> annotatedType
    boolean isAnnotated() -> isAnnotated
    org.openjdk.tools.javac.util.List getAnnotationMirrors() -> getAnnotationMirrors
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> getAnnotation
    java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Class) -> getAnnotationsByType
    org.openjdk.tools.javac.util.List baseTypes(org.openjdk.tools.javac.util.List) -> baseTypes
    void appendAnnotationsString(java.lang.StringBuilder,boolean) -> appendAnnotationsString
    void appendAnnotationsString(java.lang.StringBuilder) -> appendAnnotationsString
    java.lang.String toString() -> toString
    java.lang.String toString(org.openjdk.tools.javac.util.List) -> toString
    java.lang.String stringValue() -> stringValue
    boolean equals(java.lang.Object) -> equals
    boolean equalsIgnoreMetadata(org.openjdk.tools.javac.code.Type) -> equalsIgnoreMetadata
    int hashCode() -> hashCode
    java.lang.String argtypes(boolean) -> argtypes
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.tools.javac.code.Type getEnclosingType() -> getEnclosingType
    org.openjdk.tools.javac.util.List getParameterTypes() -> getParameterTypes
    org.openjdk.tools.javac.code.Type getReturnType() -> getReturnType
    org.openjdk.tools.javac.code.Type getReceiverType() -> getReceiverType
    org.openjdk.tools.javac.util.List getThrownTypes() -> getThrownTypes
    org.openjdk.tools.javac.code.Type getUpperBound() -> getUpperBound
    org.openjdk.tools.javac.code.Type getLowerBound() -> getLowerBound
    org.openjdk.tools.javac.util.List allparams() -> allparams
    boolean isErroneous() -> isErroneous
    boolean isErroneous(org.openjdk.tools.javac.util.List) -> isErroneous
    boolean isParameterized() -> isParameterized
    boolean isRaw() -> isRaw
    boolean isCompound() -> isCompound
    boolean isIntersection() -> isIntersection
    boolean isUnion() -> isUnion
    boolean isInterface() -> isInterface
    boolean isFinal() -> isFinal
    boolean contains(org.openjdk.tools.javac.code.Type) -> contains
    boolean contains(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> contains
    boolean containsAny(org.openjdk.tools.javac.util.List) -> containsAny
    boolean containsAny(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> containsAny
    org.openjdk.tools.javac.util.List filter(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Filter) -> filter
    boolean isSuperBound() -> isSuperBound
    boolean isExtendsBound() -> isExtendsBound
    boolean isUnbound() -> isUnbound
    org.openjdk.tools.javac.code.Type withTypeVar(org.openjdk.tools.javac.code.Type) -> withTypeVar
    org.openjdk.tools.javac.code.Type$MethodType asMethodType() -> asMethodType
    void complete() -> complete
    org.openjdk.tools.javac.code.Symbol$TypeSymbol asElement() -> asElement
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Type$1 -> org.openjdk.tools.javac.code.Type$1:
    void <init>() -> <init>
    java.lang.String toString() -> toString
org.openjdk.tools.javac.code.Type$2 -> org.openjdk.tools.javac.code.Type$2:
    void <init>() -> <init>
    java.lang.String toString() -> toString
org.openjdk.tools.javac.code.Type$3 -> org.openjdk.tools.javac.code.Type$3:
    void <init>() -> <init>
    java.lang.String toString() -> toString
org.openjdk.tools.javac.code.Type$4 -> org.openjdk.tools.javac.code.Type$4:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    org.openjdk.tools.javac.code.Type visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Void) -> visitArrayType
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Void) -> visitWildcardType
    org.openjdk.tools.javac.code.Type visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
org.openjdk.tools.javac.code.Type$5 -> org.openjdk.tools.javac.code.Type$5:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    int[] $SwitchMap$com$sun$tools$javac$code$Type$UndetVar$InferenceBound -> $SwitchMap$com$sun$tools$javac$code$Type$UndetVar$InferenceBound
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Type$ArrayType -> org.openjdk.tools.javac.code.Type$ArrayType:
    org.openjdk.tools.javac.code.Type elemtype -> elemtype
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type$ArrayType) -> <init>
    org.openjdk.tools.javac.code.Type$ArrayType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isVarargs() -> isVarargs
    org.openjdk.tools.javac.util.List allparams() -> allparams
    boolean isErroneous() -> isErroneous
    boolean isParameterized() -> isParameterized
    boolean isReference() -> isReference
    boolean isNullOrReference() -> isNullOrReference
    boolean isRaw() -> isRaw
    org.openjdk.tools.javac.code.Type$ArrayType makeVarargs() -> makeVarargs
    boolean contains(org.openjdk.tools.javac.code.Type) -> contains
    void complete() -> complete
    org.openjdk.tools.javac.code.Type getComponentType() -> getComponentType
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.type.TypeMirror getComponentType() -> getComponentType
org.openjdk.tools.javac.code.Type$ArrayType$1 -> org.openjdk.tools.javac.code.Type$ArrayType$1:
    org.openjdk.tools.javac.code.Type$ArrayType this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    org.openjdk.javax.lang.model.type.TypeMirror getComponentType() -> getComponentType
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$ArrayType$2 -> org.openjdk.tools.javac.code.Type$ArrayType$2:
    org.openjdk.tools.javac.code.Type$ArrayType this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    boolean isVarargs() -> isVarargs
    org.openjdk.javax.lang.model.type.TypeMirror getComponentType() -> getComponentType
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$BottomType -> org.openjdk.tools.javac.code.Type$BottomType:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type$BottomType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    boolean isCompound() -> isCompound
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type constType(java.lang.Object) -> constType
    java.lang.String stringValue() -> stringValue
    boolean isNullOrReference() -> isNullOrReference
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
org.openjdk.tools.javac.code.Type$CapturedType -> org.openjdk.tools.javac.code.Type$CapturedType:
    org.openjdk.tools.javac.code.Type$WildcardType wildcard -> wildcard
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$WildcardType) -> <init>
    void <init>(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type$CapturedType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    boolean isCaptured() -> isCaptured
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Type$TypeVar cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$CapturedType$1 -> org.openjdk.tools.javac.code.Type$CapturedType$1:
    org.openjdk.tools.javac.code.Type$CapturedType this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$CapturedType,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    org.openjdk.tools.javac.code.Type$TypeVar cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$ClassType -> org.openjdk.tools.javac.code.Type$ClassType:
    org.openjdk.tools.javac.code.Type outer_field -> outer_field
    org.openjdk.tools.javac.util.List typarams_field -> typarams_field
    org.openjdk.tools.javac.util.List allparams_field -> allparams_field
    org.openjdk.tools.javac.code.Type supertype_field -> supertype_field
    org.openjdk.tools.javac.util.List interfaces_field -> interfaces_field
    org.openjdk.tools.javac.util.List all_interfaces_field -> all_interfaces_field
    int rank_field -> rank_field
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type$ClassType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type constType(java.lang.Object) -> constType
    java.lang.String toString() -> toString
    java.lang.String className(org.openjdk.tools.javac.code.Symbol,boolean) -> className
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    boolean hasErasedSupertypes() -> hasErasedSupertypes
    org.openjdk.tools.javac.code.Type getEnclosingType() -> getEnclosingType
    void setEnclosingType(org.openjdk.tools.javac.code.Type) -> setEnclosingType
    org.openjdk.tools.javac.util.List allparams() -> allparams
    boolean isErroneous() -> isErroneous
    boolean isParameterized() -> isParameterized
    boolean isReference() -> isReference
    boolean isNullOrReference() -> isNullOrReference
    boolean isRaw() -> isRaw
    boolean contains(org.openjdk.tools.javac.code.Type) -> contains
    void complete() -> complete
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.javax.lang.model.type.TypeMirror getEnclosingType() -> getEnclosingType
    org.openjdk.javax.lang.model.element.Element asElement() -> asElement
    org.openjdk.tools.javac.code.Type access$100(org.openjdk.tools.javac.code.Type$ClassType) -> access$100
org.openjdk.tools.javac.code.Type$ClassType$1 -> org.openjdk.tools.javac.code.Type$ClassType$1:
    org.openjdk.tools.javac.code.Type$ClassType this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.javax.lang.model.type.TypeMirror getEnclosingType() -> getEnclosingType
    org.openjdk.javax.lang.model.element.Element asElement() -> asElement
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$ClassType$2 -> org.openjdk.tools.javac.code.Type$ClassType$2:
    java.lang.Object val$value -> val$value
    org.openjdk.tools.javac.code.Type$ClassType this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata,java.lang.Object) -> <init>
    java.lang.Object constValue() -> constValue
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.javax.lang.model.type.TypeMirror getEnclosingType() -> getEnclosingType
    org.openjdk.javax.lang.model.element.Element asElement() -> asElement
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$DelegatedType -> org.openjdk.tools.javac.code.Type$DelegatedType:
    org.openjdk.tools.javac.code.Type qtype -> qtype
    org.openjdk.tools.javac.code.TypeTag tag -> tag
    void <init>(org.openjdk.tools.javac.code.TypeTag,org.openjdk.tools.javac.code.Type) -> <init>
    void <init>(org.openjdk.tools.javac.code.TypeTag,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.tools.javac.code.Type getEnclosingType() -> getEnclosingType
    org.openjdk.tools.javac.util.List getParameterTypes() -> getParameterTypes
    org.openjdk.tools.javac.code.Type getReturnType() -> getReturnType
    org.openjdk.tools.javac.code.Type getReceiverType() -> getReceiverType
    org.openjdk.tools.javac.util.List getThrownTypes() -> getThrownTypes
    org.openjdk.tools.javac.util.List allparams() -> allparams
    org.openjdk.tools.javac.code.Type getUpperBound() -> getUpperBound
    boolean isErroneous() -> isErroneous
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
org.openjdk.tools.javac.code.Type$ErasedClassType -> org.openjdk.tools.javac.code.Type$ErasedClassType:
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    boolean hasErasedSupertypes() -> hasErasedSupertypes
org.openjdk.tools.javac.code.Type$ErrorType -> org.openjdk.tools.javac.code.Type$ErrorType:
    org.openjdk.tools.javac.code.Type originalType -> originalType
    void <init>(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Type) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type$ErrorType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    boolean isPartial() -> isPartial
    boolean isReference() -> isReference
    boolean isNullOrReference() -> isNullOrReference
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type) -> <init>
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type constType(java.lang.Object) -> constType
    org.openjdk.tools.javac.code.Type getEnclosingType() -> getEnclosingType
    org.openjdk.tools.javac.code.Type getReturnType() -> getReturnType
    org.openjdk.tools.javac.code.Type asSub(org.openjdk.tools.javac.code.Symbol) -> asSub
    boolean isGenType(org.openjdk.tools.javac.code.Type) -> isGenType
    boolean isErroneous() -> isErroneous
    boolean isCompound() -> isCompound
    boolean isInterface() -> isInterface
    org.openjdk.tools.javac.util.List allparams() -> allparams
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    org.openjdk.tools.javac.code.Type getOriginalType() -> getOriginalType
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type$ClassType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.javax.lang.model.type.TypeMirror getEnclosingType() -> getEnclosingType
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata,org.openjdk.tools.javac.code.Type$1) -> <init>
org.openjdk.tools.javac.code.Type$ErrorType$1 -> org.openjdk.tools.javac.code.Type$ErrorType$1:
    org.openjdk.tools.javac.code.Type$ErrorType this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.javax.lang.model.type.TypeMirror getEnclosingType() -> getEnclosingType
    org.openjdk.tools.javac.code.Type$ClassType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$ForAll -> org.openjdk.tools.javac.code.Type$ForAll:
    org.openjdk.tools.javac.util.List tvars -> tvars
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> <init>
    org.openjdk.tools.javac.code.Type$ForAll cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    boolean isErroneous() -> isErroneous
    boolean contains(org.openjdk.tools.javac.code.Type) -> contains
    org.openjdk.tools.javac.code.Type$MethodType asMethodType() -> asMethodType
    void complete() -> complete
    org.openjdk.tools.javac.util.List getTypeVariables() -> getTypeVariables
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getThrownTypes() -> getThrownTypes
    org.openjdk.javax.lang.model.type.TypeMirror getReceiverType() -> getReceiverType
    java.util.List getParameterTypes() -> getParameterTypes
    org.openjdk.javax.lang.model.type.TypeMirror getReturnType() -> getReturnType
    java.util.List getTypeVariables() -> getTypeVariables
org.openjdk.tools.javac.code.Type$IntersectionClassType -> org.openjdk.tools.javac.code.Type$IntersectionClassType:
    boolean allInterfaces -> allInterfaces
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$ClassSymbol,boolean) -> <init>
    org.openjdk.tools.javac.code.Type$IntersectionClassType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getBounds() -> getBounds
    boolean isCompound() -> isCompound
    org.openjdk.tools.javac.util.List getComponents() -> getComponents
    boolean isIntersection() -> isIntersection
    org.openjdk.tools.javac.util.List getExplicitComponents() -> getExplicitComponents
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type$ClassType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$JCNoType -> org.openjdk.tools.javac.code.Type$JCNoType:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type$JCNoType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    boolean isCompound() -> isCompound
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
org.openjdk.tools.javac.code.Type$JCPrimitiveType -> org.openjdk.tools.javac.code.Type$JCPrimitiveType:
    org.openjdk.tools.javac.code.TypeTag tag -> tag
    void <init>(org.openjdk.tools.javac.code.TypeTag,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    void <init>(org.openjdk.tools.javac.code.TypeTag,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type$JCPrimitiveType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    boolean isNumeric() -> isNumeric
    boolean isIntegral() -> isIntegral
    boolean isPrimitive() -> isPrimitive
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    boolean isPrimitiveOrVoid() -> isPrimitiveOrVoid
    org.openjdk.tools.javac.code.Type constType(java.lang.Object) -> constType
    java.lang.String stringValue() -> stringValue
    boolean isFalse() -> isFalse
    boolean isTrue() -> isTrue
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    void <init>(org.openjdk.tools.javac.code.TypeTag,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata,org.openjdk.tools.javac.code.Type$1) -> <init>
org.openjdk.tools.javac.code.Type$JCPrimitiveType$1 -> org.openjdk.tools.javac.code.Type$JCPrimitiveType$1:
    org.openjdk.tools.javac.code.Type$JCPrimitiveType this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$JCPrimitiveType,org.openjdk.tools.javac.code.TypeTag,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$JCPrimitiveType$2 -> org.openjdk.tools.javac.code.Type$JCPrimitiveType$2:
    java.lang.Object val$value -> val$value
    org.openjdk.tools.javac.code.Type$JCPrimitiveType this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$JCPrimitiveType,org.openjdk.tools.javac.code.TypeTag,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata,java.lang.Object) -> <init>
    java.lang.Object constValue() -> constValue
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$JCVoidType -> org.openjdk.tools.javac.code.Type$JCVoidType:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type$JCVoidType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    boolean isCompound() -> isCompound
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    boolean isPrimitiveOrVoid() -> isPrimitiveOrVoid
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
org.openjdk.tools.javac.code.Type$MethodType -> org.openjdk.tools.javac.code.Type$MethodType:
    org.openjdk.tools.javac.util.List argtypes -> argtypes
    org.openjdk.tools.javac.code.Type restype -> restype
    org.openjdk.tools.javac.util.List thrown -> thrown
    org.openjdk.tools.javac.code.Type recvtype -> recvtype
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    org.openjdk.tools.javac.code.Type$MethodType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.util.List getParameterTypes() -> getParameterTypes
    org.openjdk.tools.javac.code.Type getReturnType() -> getReturnType
    org.openjdk.tools.javac.code.Type getReceiverType() -> getReceiverType
    org.openjdk.tools.javac.util.List getThrownTypes() -> getThrownTypes
    boolean isErroneous() -> isErroneous
    boolean contains(org.openjdk.tools.javac.code.Type) -> contains
    org.openjdk.tools.javac.code.Type$MethodType asMethodType() -> asMethodType
    void complete() -> complete
    org.openjdk.tools.javac.util.List getTypeVariables() -> getTypeVariables
    org.openjdk.tools.javac.code.Symbol$TypeSymbol asElement() -> asElement
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    java.util.List getThrownTypes() -> getThrownTypes
    org.openjdk.javax.lang.model.type.TypeMirror getReceiverType() -> getReceiverType
    java.util.List getParameterTypes() -> getParameterTypes
    org.openjdk.javax.lang.model.type.TypeMirror getReturnType() -> getReturnType
    java.util.List getTypeVariables() -> getTypeVariables
org.openjdk.tools.javac.code.Type$ModuleType -> org.openjdk.tools.javac.code.Type$ModuleType:
    void <init>(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> <init>
    org.openjdk.tools.javac.code.Type$ModuleType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type$ModuleType annotatedType(org.openjdk.tools.javac.util.List) -> annotatedType
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    java.lang.String toString() -> toString
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type annotatedType(org.openjdk.tools.javac.util.List) -> annotatedType
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
org.openjdk.tools.javac.code.Type$PackageType -> org.openjdk.tools.javac.code.Type$PackageType:
    void <init>(org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> <init>
    org.openjdk.tools.javac.code.Type$PackageType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    java.lang.String toString() -> toString
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
org.openjdk.tools.javac.code.Type$StructuralTypeMapping -> org.openjdk.tools.javac.code.Type$StructuralTypeMapping:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    org.openjdk.tools.javac.code.Type visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    org.openjdk.tools.javac.code.Type visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    org.openjdk.tools.javac.code.Type visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
org.openjdk.tools.javac.code.Type$StructuralTypeMapping$1 -> org.openjdk.tools.javac.code.Type$StructuralTypeMapping$1:
    org.openjdk.tools.javac.code.Type$StructuralTypeMapping this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$StructuralTypeMapping,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    boolean needsStripping() -> needsStripping
org.openjdk.tools.javac.code.Type$StructuralTypeMapping$2 -> org.openjdk.tools.javac.code.Type$StructuralTypeMapping$2:
    org.openjdk.tools.javac.code.Type$StructuralTypeMapping this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$StructuralTypeMapping,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.BoundKind,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    boolean needsStripping() -> needsStripping
org.openjdk.tools.javac.code.Type$StructuralTypeMapping$3 -> org.openjdk.tools.javac.code.Type$StructuralTypeMapping$3:
    org.openjdk.tools.javac.code.Type$StructuralTypeMapping this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$StructuralTypeMapping,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    boolean needsStripping() -> needsStripping
org.openjdk.tools.javac.code.Type$StructuralTypeMapping$4 -> org.openjdk.tools.javac.code.Type$StructuralTypeMapping$4:
    org.openjdk.tools.javac.code.Type$StructuralTypeMapping this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$StructuralTypeMapping,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    boolean needsStripping() -> needsStripping
org.openjdk.tools.javac.code.Type$TypeVar -> org.openjdk.tools.javac.code.Type$TypeVar:
    org.openjdk.tools.javac.code.Type bound -> bound
    org.openjdk.tools.javac.code.Type lower -> lower
    int rank_field -> rank_field
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> <init>
    void <init>(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> <init>
    void <init>(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type$TypeVar cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type getUpperBound() -> getUpperBound
    org.openjdk.tools.javac.code.Type getLowerBound() -> getLowerBound
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    boolean isCaptured() -> isCaptured
    boolean isReference() -> isReference
    boolean isNullOrReference() -> isNullOrReference
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.type.TypeMirror getLowerBound() -> getLowerBound
    org.openjdk.javax.lang.model.type.TypeMirror getUpperBound() -> getUpperBound
    org.openjdk.javax.lang.model.element.Element asElement() -> asElement
org.openjdk.tools.javac.code.Type$TypeVar$1 -> org.openjdk.tools.javac.code.Type$TypeVar$1:
    org.openjdk.tools.javac.code.Type$TypeVar this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    org.openjdk.javax.lang.model.type.TypeMirror getLowerBound() -> getLowerBound
    org.openjdk.javax.lang.model.type.TypeMirror getUpperBound() -> getUpperBound
    org.openjdk.javax.lang.model.element.Element asElement() -> asElement
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$UndetVar -> org.openjdk.tools.javac.code.Type$UndetVar:
    java.util.ArrayDeque incorporationActions -> incorporationActions
    java.util.Map bounds -> bounds
    org.openjdk.tools.javac.code.Type inst -> inst
    int declaredCount -> declaredCount
    org.openjdk.tools.javac.code.Type$UndetVar$UndetVarListener listener -> listener
    org.openjdk.tools.javac.code.Type$UndetVar$Kind kind -> kind
    org.openjdk.tools.javac.code.Types$TypeMapping toTypeVarMap -> toTypeVarMap
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    void <init>(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Type$UndetVar$UndetVarListener,org.openjdk.tools.javac.code.Types) -> <init>
    java.lang.String toString() -> toString
    java.lang.String debugString() -> debugString
    void setThrow() -> setThrow
    org.openjdk.tools.javac.code.Type$UndetVar dup(org.openjdk.tools.javac.code.Types) -> dup
    void dupTo(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Types) -> dupTo
    org.openjdk.tools.javac.code.Type$UndetVar cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    boolean isPartial() -> isPartial
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    org.openjdk.tools.javac.code.Type getInst() -> getInst
    void setInst(org.openjdk.tools.javac.code.Type) -> setInst
    org.openjdk.tools.javac.util.List getBounds(org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound[]) -> getBounds
    org.openjdk.tools.javac.util.List getDeclaredBounds() -> getDeclaredBounds
    void setBounds(org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.util.List) -> setBounds
    void addBound(org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> addBound
    void addBound(org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types,boolean) -> addBound
    void substBounds(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Types) -> substBounds
    void notifyBoundChange(org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type,boolean) -> notifyBoundChange
    boolean isCaptured() -> isCaptured
    boolean isThrows() -> isThrows
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    void lambda$substBounds$0(org.openjdk.tools.javac.util.ListBuffer,org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type,boolean) -> lambda$substBounds$0
    org.openjdk.tools.javac.code.Type access$300(org.openjdk.tools.javac.code.Type$UndetVar) -> access$300
org.openjdk.tools.javac.code.Type$UndetVar$1 -> org.openjdk.tools.javac.code.Type$UndetVar$1:
    org.openjdk.tools.javac.code.Type$UndetVar this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$UndetVar) -> <init>
    org.openjdk.tools.javac.code.Type visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Void) -> visitUndetVar
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound -> org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound:
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound LOWER -> LOWER
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound EQ -> EQ
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound UPPER -> UPPER
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound[] values() -> values
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound complement() -> complement
    boolean lessThan(org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> lessThan
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Type$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound$1 -> org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound$1:
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound complement() -> complement
org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound$2 -> org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound$2:
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound complement() -> complement
org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound$3 -> org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound$3:
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound complement() -> complement
org.openjdk.tools.javac.code.Type$UndetVar$Kind -> org.openjdk.tools.javac.code.Type$UndetVar$Kind:
    org.openjdk.tools.javac.code.Type$UndetVar$Kind NORMAL -> NORMAL
    org.openjdk.tools.javac.code.Type$UndetVar$Kind CAPTURED -> CAPTURED
    org.openjdk.tools.javac.code.Type$UndetVar$Kind THROWS -> THROWS
    org.openjdk.tools.javac.code.Type$UndetVar$Kind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Type$UndetVar$Kind[] values() -> values
    org.openjdk.tools.javac.code.Type$UndetVar$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Type$UndetVar$UndetVarListener -> org.openjdk.tools.javac.code.Type$UndetVar$UndetVarListener:
    void varBoundChanged(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type,boolean) -> varBoundChanged
    void varInstantiated(org.openjdk.tools.javac.code.Type$UndetVar) -> varInstantiated
org.openjdk.tools.javac.code.Type$UnionClassType -> org.openjdk.tools.javac.code.Type$UnionClassType:
    org.openjdk.tools.javac.util.List alternatives_field -> alternatives_field
    void <init>(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.code.Type$UnionClassType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type getLub() -> getLub
    java.util.List getAlternatives() -> getAlternatives
    boolean isUnion() -> isUnion
    boolean isCompound() -> isCompound
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    java.lang.Iterable getAlternativeTypes() -> getAlternativeTypes
    org.openjdk.tools.javac.code.Type$ClassType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.Type$UnknownType -> org.openjdk.tools.javac.code.Type$UnknownType:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type$UnknownType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    boolean isPartial() -> isPartial
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
org.openjdk.tools.javac.code.Type$Visitor -> org.openjdk.tools.javac.code.Type$Visitor:
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,java.lang.Object) -> visitPackageType
    java.lang.Object visitModuleType(org.openjdk.tools.javac.code.Type$ModuleType,java.lang.Object) -> visitModuleType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Type$WildcardType -> org.openjdk.tools.javac.code.Type$WildcardType:
    org.openjdk.tools.javac.code.Type type -> type
    org.openjdk.tools.javac.code.BoundKind kind -> kind
    org.openjdk.tools.javac.code.Type$TypeVar bound -> bound
    boolean isPrintingBound -> isPrintingBound
    java.lang.Object accept(org.openjdk.tools.javac.code.Type$Visitor,java.lang.Object) -> accept
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.BoundKind,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.BoundKind,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.BoundKind,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type$TypeVar) -> <init>
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.BoundKind,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type$WildcardType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    boolean contains(org.openjdk.tools.javac.code.Type) -> contains
    boolean isSuperBound() -> isSuperBound
    boolean isExtendsBound() -> isExtendsBound
    boolean isUnbound() -> isUnbound
    boolean isReference() -> isReference
    boolean isNullOrReference() -> isNullOrReference
    org.openjdk.tools.javac.code.Type withTypeVar(org.openjdk.tools.javac.code.Type) -> withTypeVar
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Type getExtendsBound() -> getExtendsBound
    org.openjdk.tools.javac.code.Type getSuperBound() -> getSuperBound
    org.openjdk.javax.lang.model.type.TypeKind getKind() -> getKind
    java.lang.Object accept(org.openjdk.javax.lang.model.type.TypeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.javax.lang.model.type.TypeMirror getSuperBound() -> getSuperBound
    org.openjdk.javax.lang.model.type.TypeMirror getExtendsBound() -> getExtendsBound
org.openjdk.tools.javac.code.Type$WildcardType$1 -> org.openjdk.tools.javac.code.Type$WildcardType$1:
    org.openjdk.tools.javac.code.Type$WildcardType this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.BoundKind,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.Type baseType() -> baseType
    org.openjdk.javax.lang.model.type.TypeMirror getSuperBound() -> getSuperBound
    org.openjdk.javax.lang.model.type.TypeMirror getExtendsBound() -> getExtendsBound
    java.util.List getAnnotationMirrors() -> getAnnotationMirrors
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.code.TypeAnnotationPosition -> org.openjdk.tools.javac.code.TypeAnnotationPosition:
    org.openjdk.tools.javac.util.List emptyPath -> emptyPath
    org.openjdk.tools.javac.code.TargetType type -> type
    org.openjdk.tools.javac.util.List location -> location
    int pos -> pos
    boolean isValidOffset -> isValidOffset
    int offset -> offset
    int[] lvarOffset -> lvarOffset
    int[] lvarLength -> lvarLength
    int[] lvarIndex -> lvarIndex
    int bound_index -> bound_index
    int parameter_index -> parameter_index
    int type_index -> type_index
    int exception_index -> exception_index
    org.openjdk.tools.javac.tree.JCTree$JCLambda onLambda -> onLambda
    org.openjdk.tools.javac.code.TypeAnnotationPosition unknown -> unknown
    java.lang.String toString() -> toString
    boolean emitToClassfile() -> emitToClassfile
    boolean matchesPos(int) -> matchesPos
    void updatePosOffset(int) -> updatePosOffset
    boolean hasExceptionIndex() -> hasExceptionIndex
    int getExceptionIndex() -> getExceptionIndex
    void setExceptionIndex(int) -> setExceptionIndex
    boolean hasCatchType() -> hasCatchType
    int getCatchType() -> getCatchType
    int getStartPos() -> getStartPos
    void setCatchInfo(int,int) -> setCatchInfo
    org.openjdk.tools.javac.util.List getTypePathFromBinary(java.util.List) -> getTypePathFromBinary
    org.openjdk.tools.javac.util.List getBinaryFromTypePath(java.util.List) -> getBinaryFromTypePath
    void <init>(org.openjdk.tools.javac.code.TargetType,int,int,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodReturn(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> methodReturn
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodReturn(org.openjdk.tools.javac.util.List) -> methodReturn
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodReturn(int) -> methodReturn
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodReceiver(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> methodReceiver
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodReceiver(org.openjdk.tools.javac.util.List) -> methodReceiver
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodReceiver(int) -> methodReceiver
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodParameter(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> methodParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodParameter(org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> methodParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodParameter(int,int) -> methodParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodParameter(org.openjdk.tools.javac.util.List,int) -> methodParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodRef(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> methodRef
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodRef(org.openjdk.tools.javac.util.List) -> methodRef
    org.openjdk.tools.javac.code.TypeAnnotationPosition constructorRef(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> constructorRef
    org.openjdk.tools.javac.code.TypeAnnotationPosition constructorRef(org.openjdk.tools.javac.util.List) -> constructorRef
    org.openjdk.tools.javac.code.TypeAnnotationPosition field(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> field
    org.openjdk.tools.javac.code.TypeAnnotationPosition field(org.openjdk.tools.javac.util.List) -> field
    org.openjdk.tools.javac.code.TypeAnnotationPosition field(int) -> field
    org.openjdk.tools.javac.code.TypeAnnotationPosition localVariable(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> localVariable
    org.openjdk.tools.javac.code.TypeAnnotationPosition localVariable(org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> localVariable
    org.openjdk.tools.javac.code.TypeAnnotationPosition localVariable(org.openjdk.tools.javac.util.List) -> localVariable
    org.openjdk.tools.javac.code.TypeAnnotationPosition exceptionParameter(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> exceptionParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition exceptionParameter(org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> exceptionParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition exceptionParameter(org.openjdk.tools.javac.util.List) -> exceptionParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition resourceVariable(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> resourceVariable
    org.openjdk.tools.javac.code.TypeAnnotationPosition resourceVariable(org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> resourceVariable
    org.openjdk.tools.javac.code.TypeAnnotationPosition resourceVariable(org.openjdk.tools.javac.util.List) -> resourceVariable
    org.openjdk.tools.javac.code.TypeAnnotationPosition newObj(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> newObj
    org.openjdk.tools.javac.code.TypeAnnotationPosition newObj(int) -> newObj
    org.openjdk.tools.javac.code.TypeAnnotationPosition newObj(org.openjdk.tools.javac.util.List) -> newObj
    org.openjdk.tools.javac.code.TypeAnnotationPosition classExtends(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> classExtends
    org.openjdk.tools.javac.code.TypeAnnotationPosition classExtends(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> classExtends
    org.openjdk.tools.javac.code.TypeAnnotationPosition classExtends(org.openjdk.tools.javac.util.List,int) -> classExtends
    org.openjdk.tools.javac.code.TypeAnnotationPosition classExtends(int,int) -> classExtends
    org.openjdk.tools.javac.code.TypeAnnotationPosition classExtends(int) -> classExtends
    org.openjdk.tools.javac.code.TypeAnnotationPosition instanceOf(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int) -> instanceOf
    org.openjdk.tools.javac.code.TypeAnnotationPosition instanceOf(org.openjdk.tools.javac.util.List) -> instanceOf
    org.openjdk.tools.javac.code.TypeAnnotationPosition typeCast(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> typeCast
    org.openjdk.tools.javac.code.TypeAnnotationPosition typeCast(org.openjdk.tools.javac.util.List,int) -> typeCast
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodInvocationTypeArg(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> methodInvocationTypeArg
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodInvocationTypeArg(org.openjdk.tools.javac.util.List,int) -> methodInvocationTypeArg
    org.openjdk.tools.javac.code.TypeAnnotationPosition constructorInvocationTypeArg(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> constructorInvocationTypeArg
    org.openjdk.tools.javac.code.TypeAnnotationPosition constructorInvocationTypeArg(org.openjdk.tools.javac.util.List,int) -> constructorInvocationTypeArg
    org.openjdk.tools.javac.code.TypeAnnotationPosition typeParameter(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> typeParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition typeParameter(org.openjdk.tools.javac.util.List,int) -> typeParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodTypeParameter(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> methodTypeParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodTypeParameter(org.openjdk.tools.javac.util.List,int) -> methodTypeParameter
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodThrows(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> methodThrows
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodThrows(org.openjdk.tools.javac.util.List,int) -> methodThrows
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodRefTypeArg(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> methodRefTypeArg
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodRefTypeArg(org.openjdk.tools.javac.util.List,int) -> methodRefTypeArg
    org.openjdk.tools.javac.code.TypeAnnotationPosition constructorRefTypeArg(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int) -> constructorRefTypeArg
    org.openjdk.tools.javac.code.TypeAnnotationPosition constructorRefTypeArg(org.openjdk.tools.javac.util.List,int) -> constructorRefTypeArg
    org.openjdk.tools.javac.code.TypeAnnotationPosition typeParameterBound(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int,int) -> typeParameterBound
    org.openjdk.tools.javac.code.TypeAnnotationPosition typeParameterBound(org.openjdk.tools.javac.util.List,int,int) -> typeParameterBound
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodTypeParameterBound(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,int,int) -> methodTypeParameterBound
    org.openjdk.tools.javac.code.TypeAnnotationPosition methodTypeParameterBound(org.openjdk.tools.javac.util.List,int,int) -> methodTypeParameterBound
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeAnnotationPosition$1 -> org.openjdk.tools.javac.code.TypeAnnotationPosition$1:
    int[] $SwitchMap$com$sun$tools$javac$code$TargetType -> $SwitchMap$com$sun$tools$javac$code$TargetType
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntry -> org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntry:
    int bytesPerEntry -> bytesPerEntry
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind tag -> tag
    int arg -> arg
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntry ARRAY -> ARRAY
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntry INNER_TYPE -> INNER_TYPE
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntry WILDCARD -> WILDCARD
    void <init>(org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind) -> <init>
    void <init>(org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind,int) -> <init>
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntry fromBinary(int,int) -> fromBinary
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind -> org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind:
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind ARRAY -> ARRAY
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind INNER_TYPE -> INNER_TYPE
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind WILDCARD -> WILDCARD
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind TYPE_ARGUMENT -> TYPE_ARGUMENT
    int tag -> tag
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind[] values() -> values
    org.openjdk.tools.javac.code.TypeAnnotationPosition$TypePathEntryKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeAnnotations -> org.openjdk.tools.javac.code.TypeAnnotations:
    org.openjdk.tools.javac.util.Context$Key typeAnnosKey -> typeAnnosKey
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.code.TypeAnnotations instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void organizeTypeAnnotationsSignatures(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> organizeTypeAnnotationsSignatures
    void validateTypeAnnotationsSignatures(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> validateTypeAnnotationsSignatures
    void organizeTypeAnnotationsBodies(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> organizeTypeAnnotationsBodies
    org.openjdk.tools.javac.util.List annotationTargets(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> annotationTargets
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType annotationTargetType(org.openjdk.tools.javac.code.Attribute$Compound,org.openjdk.tools.javac.code.Symbol) -> annotationTargetType
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType combineAnnotationType(org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType,org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType) -> combineAnnotationType
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType targetToAnnotationType(org.openjdk.tools.javac.code.Attribute,org.openjdk.tools.javac.code.Symbol) -> targetToAnnotationType
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType lambda$annotationTargetType$3(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Attribute) -> lambda$annotationTargetType$3
    boolean lambda$annotationTargets$2(org.openjdk.tools.javac.code.Attribute) -> lambda$annotationTargets$2
    void lambda$validateTypeAnnotationsSignatures$1(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> lambda$validateTypeAnnotationsSignatures$1
    void lambda$organizeTypeAnnotationsSignatures$0(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> lambda$organizeTypeAnnotationsSignatures$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeAnnotations$1 -> org.openjdk.tools.javac.code.TypeAnnotations$1:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeAnnotations$AnnotationType -> $SwitchMap$com$sun$tools$javac$code$TypeAnnotations$AnnotationType
    int[] $SwitchMap$com$sun$source$tree$MemberReferenceTree$ReferenceMode -> $SwitchMap$com$sun$source$tree$MemberReferenceTree$ReferenceMode
    int[] $SwitchMap$javax$lang$model$element$ElementKind -> $SwitchMap$javax$lang$model$element$ElementKind
    int[] $SwitchMap$com$sun$source$tree$Tree$Kind -> $SwitchMap$com$sun$source$tree$Tree$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType -> org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType:
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType DECLARATION -> DECLARATION
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType TYPE -> TYPE
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType NONE -> NONE
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType BOTH -> BOTH
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType[] values() -> values
    org.openjdk.tools.javac.code.TypeAnnotations$AnnotationType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeAnnotations$TypeAnnotationPositions -> org.openjdk.tools.javac.code.TypeAnnotations$TypeAnnotationPositions:
    boolean sigOnly -> sigOnly
    org.openjdk.tools.javac.util.List frames -> frames
    boolean isInClass -> isInClass
    org.openjdk.tools.javac.tree.JCTree$JCLambda currentLambda -> currentLambda
    org.openjdk.tools.javac.code.TypeAnnotations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.TypeAnnotations,boolean) -> <init>
    void push(org.openjdk.tools.javac.tree.JCTree) -> push
    org.openjdk.tools.javac.tree.JCTree pop() -> pop
    org.openjdk.tools.javac.tree.JCTree peek2() -> peek2
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void separateAnnotationsKinds(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.TypeAnnotationPosition) -> separateAnnotationsKinds
    org.openjdk.tools.javac.code.Type typeWithAnnotations(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.TypeAnnotationPosition) -> typeWithAnnotations
    org.openjdk.tools.javac.code.Type rewriteArrayType(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.TypeAnnotationPosition) -> rewriteArrayType
    org.openjdk.tools.javac.code.Type typeWithAnnotations(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> typeWithAnnotations
    org.openjdk.tools.javac.code.Attribute$TypeCompound toTypeCompound(org.openjdk.tools.javac.code.Attribute$Compound,org.openjdk.tools.javac.code.TypeAnnotationPosition) -> toTypeCompound
    org.openjdk.tools.javac.code.TypeAnnotationPosition resolveFrame(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCLambda,int,org.openjdk.tools.javac.util.ListBuffer) -> resolveFrame
    org.openjdk.tools.javac.util.ListBuffer locateNestedTypes(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.ListBuffer) -> locateNestedTypes
    int methodParamIndex(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree) -> methodParamIndex
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void copyNewClassAnnotationsToOwner(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> copyNewClassAnnotationsToOwner
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void findTypeCompoundPosition(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List) -> findTypeCompoundPosition
    void findPosition(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List) -> findPosition
    void setTypeAnnotationPos(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.TypeAnnotationPosition) -> setTypeAnnotationPos
    java.lang.String toString() -> toString
org.openjdk.tools.javac.code.TypeAnnotations$TypeAnnotationPositions$1 -> org.openjdk.tools.javac.code.TypeAnnotations$TypeAnnotationPositions$1:
    org.openjdk.tools.javac.code.Type val$stopAt -> val$stopAt
    org.openjdk.tools.javac.code.TypeAnnotations$TypeAnnotationPositions this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.TypeAnnotations$TypeAnnotationPositions,org.openjdk.tools.javac.code.Type) -> <init>
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.util.List) -> visitClassType
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.util.List) -> visitWildcardType
    org.openjdk.tools.javac.code.Type visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.util.List) -> visitArrayType
    org.openjdk.tools.javac.code.Type visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.util.List) -> visitMethodType
    org.openjdk.tools.javac.code.Type visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,org.openjdk.tools.javac.util.List) -> visitPackageType
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.util.List) -> visitTypeVar
    org.openjdk.tools.javac.code.Type visitModuleType(org.openjdk.tools.javac.code.Type$ModuleType,org.openjdk.tools.javac.util.List) -> visitModuleType
    org.openjdk.tools.javac.code.Type visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,org.openjdk.tools.javac.util.List) -> visitCapturedType
    org.openjdk.tools.javac.code.Type visitForAll(org.openjdk.tools.javac.code.Type$ForAll,org.openjdk.tools.javac.util.List) -> visitForAll
    org.openjdk.tools.javac.code.Type visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.util.List) -> visitUndetVar
    org.openjdk.tools.javac.code.Type visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.util.List) -> visitErrorType
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> visitType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitModuleType(org.openjdk.tools.javac.code.Type$ModuleType,java.lang.Object) -> visitModuleType
    java.lang.Object visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,java.lang.Object) -> visitPackageType
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
org.openjdk.tools.javac.code.TypeMetadata -> org.openjdk.tools.javac.code.TypeMetadata:
    org.openjdk.tools.javac.code.TypeMetadata EMPTY -> EMPTY
    java.util.EnumMap contents -> contents
    void <init>() -> <init>
    void <init>(org.openjdk.tools.javac.code.TypeMetadata$Entry) -> <init>
    void <init>(org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.code.TypeMetadata combine(org.openjdk.tools.javac.code.TypeMetadata$Entry) -> combine
    org.openjdk.tools.javac.code.TypeMetadata combineAll(org.openjdk.tools.javac.code.TypeMetadata) -> combineAll
    org.openjdk.tools.javac.code.TypeMetadata without(org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind) -> without
    org.openjdk.tools.javac.code.TypeMetadata$Entry get(org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind) -> get
    void add(org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind,org.openjdk.tools.javac.code.TypeMetadata$Entry) -> add
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeMetadata$Annotations -> org.openjdk.tools.javac.code.TypeMetadata$Annotations:
    org.openjdk.tools.javac.util.List annos -> annos
    org.openjdk.tools.javac.util.List TO_BE_SET -> TO_BE_SET
    void <init>(org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.util.List getAnnotations() -> getAnnotations
    org.openjdk.tools.javac.code.TypeMetadata$Annotations combine(org.openjdk.tools.javac.code.TypeMetadata$Entry) -> combine
    org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind kind() -> kind
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.TypeMetadata$Entry combine(org.openjdk.tools.javac.code.TypeMetadata$Entry) -> combine
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeMetadata$Entry -> org.openjdk.tools.javac.code.TypeMetadata$Entry:
    org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind kind() -> kind
    org.openjdk.tools.javac.code.TypeMetadata$Entry combine(org.openjdk.tools.javac.code.TypeMetadata$Entry) -> combine
org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind -> org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind:
    org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind ANNOTATIONS -> ANNOTATIONS
    org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind[] values() -> values
    org.openjdk.tools.javac.code.TypeMetadata$Entry$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeTag -> org.openjdk.tools.javac.code.TypeTag:
    org.openjdk.tools.javac.code.TypeTag BYTE -> BYTE
    org.openjdk.tools.javac.code.TypeTag CHAR -> CHAR
    org.openjdk.tools.javac.code.TypeTag SHORT -> SHORT
    org.openjdk.tools.javac.code.TypeTag LONG -> LONG
    org.openjdk.tools.javac.code.TypeTag FLOAT -> FLOAT
    org.openjdk.tools.javac.code.TypeTag INT -> INT
    org.openjdk.tools.javac.code.TypeTag DOUBLE -> DOUBLE
    org.openjdk.tools.javac.code.TypeTag BOOLEAN -> BOOLEAN
    org.openjdk.tools.javac.code.TypeTag VOID -> VOID
    org.openjdk.tools.javac.code.TypeTag CLASS -> CLASS
    org.openjdk.tools.javac.code.TypeTag ARRAY -> ARRAY
    org.openjdk.tools.javac.code.TypeTag METHOD -> METHOD
    org.openjdk.tools.javac.code.TypeTag PACKAGE -> PACKAGE
    org.openjdk.tools.javac.code.TypeTag MODULE -> MODULE
    org.openjdk.tools.javac.code.TypeTag TYPEVAR -> TYPEVAR
    org.openjdk.tools.javac.code.TypeTag WILDCARD -> WILDCARD
    org.openjdk.tools.javac.code.TypeTag FORALL -> FORALL
    org.openjdk.tools.javac.code.TypeTag DEFERRED -> DEFERRED
    org.openjdk.tools.javac.code.TypeTag BOT -> BOT
    org.openjdk.tools.javac.code.TypeTag NONE -> NONE
    org.openjdk.tools.javac.code.TypeTag ERROR -> ERROR
    org.openjdk.tools.javac.code.TypeTag UNKNOWN -> UNKNOWN
    org.openjdk.tools.javac.code.TypeTag UNDETVAR -> UNDETVAR
    org.openjdk.tools.javac.code.TypeTag UNINITIALIZED_THIS -> UNINITIALIZED_THIS
    org.openjdk.tools.javac.code.TypeTag UNINITIALIZED_OBJECT -> UNINITIALIZED_OBJECT
    int superClasses -> superClasses
    int numericClass -> numericClass
    boolean isPrimitive -> isPrimitive
    org.openjdk.tools.javac.code.TypeTag[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.TypeTag[] values() -> values
    org.openjdk.tools.javac.code.TypeTag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,int,int,boolean) -> <init>
    boolean isStrictSubRangeOf(org.openjdk.tools.javac.code.TypeTag) -> isStrictSubRangeOf
    boolean isSubRangeOf(org.openjdk.tools.javac.code.TypeTag) -> isSubRangeOf
    int getTypeTagCount() -> getTypeTagCount
    org.openjdk.source.tree.Tree$Kind getKindLiteral() -> getKindLiteral
    org.openjdk.javax.lang.model.type.TypeKind getPrimitiveTypeKind() -> getPrimitiveTypeKind
    boolean checkRange(int) -> checkRange
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeTag$1 -> org.openjdk.tools.javac.code.TypeTag$1:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.TypeTag$NumericClasses -> org.openjdk.tools.javac.code.TypeTag$NumericClasses:
    int BYTE_CLASS -> BYTE_CLASS
    int CHAR_CLASS -> CHAR_CLASS
    int SHORT_CLASS -> SHORT_CLASS
    int INT_CLASS -> INT_CLASS
    int LONG_CLASS -> LONG_CLASS
    int FLOAT_CLASS -> FLOAT_CLASS
    int DOUBLE_CLASS -> DOUBLE_CLASS
    int BYTE_SUPERCLASSES -> BYTE_SUPERCLASSES
    int CHAR_SUPERCLASSES -> CHAR_SUPERCLASSES
    int SHORT_SUPERCLASSES -> SHORT_SUPERCLASSES
    int INT_SUPERCLASSES -> INT_SUPERCLASSES
    int LONG_SUPERCLASSES -> LONG_SUPERCLASSES
    int FLOAT_SUPERCLASSES -> FLOAT_SUPERCLASSES
    void <init>() -> <init>
org.openjdk.tools.javac.code.Types -> org.openjdk.tools.javac.code.Types:
    org.openjdk.tools.javac.util.Context$Key typesKey -> typesKey
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.util.JavacMessages messages -> messages
    org.openjdk.tools.javac.util.Names names -> names
    boolean allowObjectToPrimitiveCast -> allowObjectToPrimitiveCast
    boolean allowDefaultMethods -> allowDefaultMethods
    boolean mapCapturesToBounds -> mapCapturesToBounds
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.util.List warnStack -> warnStack
    org.openjdk.tools.javac.util.Name capturedName -> capturedName
    org.openjdk.tools.javac.code.Types$FunctionDescriptorLookupError functionDescriptorLookupError -> functionDescriptorLookupError
    org.openjdk.tools.javac.util.Warner noWarnings -> noWarnings
    org.openjdk.tools.javac.code.Types$UnaryVisitor isUnbounded -> isUnbounded
    org.openjdk.tools.javac.code.Types$SimpleVisitor asSub -> asSub
    org.openjdk.tools.javac.code.Types$DescriptorCache descCache -> descCache
    org.openjdk.tools.javac.util.Filter bridgeFilter -> bridgeFilter
    org.openjdk.tools.javac.code.Types$TypeRelation isSubtype -> isSubtype
    org.openjdk.tools.javac.code.Types$TypeRelation isSameTypeLoose -> isSameTypeLoose
    org.openjdk.tools.javac.code.Types$TypeRelation isSameTypeStrict -> isSameTypeStrict
    org.openjdk.tools.javac.code.Types$TypeRelation containsType -> containsType
    org.openjdk.tools.javac.code.Types$TypeRelation isCastable -> isCastable
    org.openjdk.tools.javac.code.Types$TypeRelation disjointType -> disjointType
    org.openjdk.tools.javac.code.Types$TypeMapping cvarLowerBoundMapping -> cvarLowerBoundMapping
    org.openjdk.tools.javac.code.Types$UnaryVisitor isReifiable -> isReifiable
    org.openjdk.tools.javac.code.Types$TypeMapping elemTypeFun -> elemTypeFun
    org.openjdk.tools.javac.code.Types$SimpleVisitor asSuper -> asSuper
    org.openjdk.tools.javac.code.Types$SimpleVisitor memberType -> memberType
    org.openjdk.tools.javac.code.Types$TypeMapping erasure -> erasure
    org.openjdk.tools.javac.code.Types$UnaryVisitor supertype -> supertype
    org.openjdk.tools.javac.code.Types$UnaryVisitor interfaces -> interfaces
    org.openjdk.tools.javac.code.Types$UnaryVisitor directSupertypes -> directSupertypes
    java.util.Map isDerivedRawCache -> isDerivedRawCache
    org.openjdk.tools.javac.code.Types$UnaryVisitor classBound -> classBound
    org.openjdk.tools.javac.code.Types$ImplementationCache implCache -> implCache
    org.openjdk.tools.javac.code.Types$MembersClosureCache membersCache -> membersCache
    org.openjdk.tools.javac.code.Types$CandidatesCache candidatesCache -> candidatesCache
    org.openjdk.tools.javac.code.Types$TypeRelation hasSameArgs_strict -> hasSameArgs_strict
    org.openjdk.tools.javac.code.Types$TypeRelation hasSameArgs_nonstrict -> hasSameArgs_nonstrict
    org.openjdk.tools.javac.code.Types$TypeMapping newInstanceFun -> newInstanceFun
    org.openjdk.tools.javac.code.Types$MapVisitor methodWithParameters -> methodWithParameters
    org.openjdk.tools.javac.code.Types$MapVisitor methodWithThrown -> methodWithThrown
    org.openjdk.tools.javac.code.Types$MapVisitor methodWithReturn -> methodWithReturn
    java.util.Map closureCache -> closureCache
    java.util.function.BiPredicate basicClosureSkip -> basicClosureSkip
    java.util.Set mergeCache -> mergeCache
    org.openjdk.tools.javac.code.Type arraySuperType -> arraySuperType
    org.openjdk.tools.javac.code.Types$HashCodeVisitor hashCodeVisitor -> hashCodeVisitor
    org.openjdk.tools.javac.code.Types$HashCodeVisitor hashCodeStrictVisitor -> hashCodeStrictVisitor
    org.openjdk.tools.javac.code.Types instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.code.Type wildUpperBound(org.openjdk.tools.javac.code.Type) -> wildUpperBound
    org.openjdk.tools.javac.code.Type cvarUpperBound(org.openjdk.tools.javac.code.Type) -> cvarUpperBound
    org.openjdk.tools.javac.code.Type wildLowerBound(org.openjdk.tools.javac.code.Type) -> wildLowerBound
    org.openjdk.tools.javac.code.Type cvarLowerBound(org.openjdk.tools.javac.code.Type) -> cvarLowerBound
    org.openjdk.tools.javac.code.Type skipTypeVars(org.openjdk.tools.javac.code.Type,boolean) -> skipTypeVars
    boolean isUnbounded(org.openjdk.tools.javac.code.Type) -> isUnbounded
    org.openjdk.tools.javac.code.Type asSub(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> asSub
    boolean isConvertible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> isConvertible
    boolean isConvertible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isConvertible
    org.openjdk.tools.javac.code.Symbol findDescriptorSymbol(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> findDescriptorSymbol
    org.openjdk.tools.javac.code.Type findDescriptorType(org.openjdk.tools.javac.code.Type) -> findDescriptorType
    boolean isFunctionalInterface(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> isFunctionalInterface
    boolean isFunctionalInterface(org.openjdk.tools.javac.code.Type) -> isFunctionalInterface
    org.openjdk.tools.javac.code.Type removeWildcards(org.openjdk.tools.javac.code.Type) -> removeWildcards
    org.openjdk.tools.javac.code.Symbol$ClassSymbol makeFunctionalInterfaceClass(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,long) -> makeFunctionalInterfaceClass
    org.openjdk.tools.javac.util.List functionalInterfaceBridges(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> functionalInterfaceBridges
    boolean pendingBridges(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> pendingBridges
    boolean isSubtypeUnchecked(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isSubtypeUnchecked
    boolean isSubtypeUnchecked(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> isSubtypeUnchecked
    boolean isSubtypeUncheckedInternal(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,boolean,org.openjdk.tools.javac.util.Warner) -> isSubtypeUncheckedInternal
    void checkUnsafeVarargsConversion(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> checkUnsafeVarargsConversion
    boolean isSubtype(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isSubtype
    boolean isSubtypeNoCapture(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isSubtypeNoCapture
    boolean isSubtype(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,boolean) -> isSubtype
    boolean isSubtypeUnchecked(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> isSubtypeUnchecked
    boolean isSubtypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> isSubtypes
    boolean isSubtypesUnchecked(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> isSubtypesUnchecked
    boolean isSuperType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isSuperType
    boolean isSameTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> isSameTypes
    boolean isSameTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean) -> isSameTypes
    boolean isSignaturePolymorphic(org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> isSignaturePolymorphic
    boolean isSameType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isSameType
    boolean isSameType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,boolean) -> isSameType
    boolean containedBy(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> containedBy
    boolean containsType(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> containsType
    boolean containsType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> containsType
    boolean isCaptureOf(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$WildcardType) -> isCaptureOf
    boolean isSameWildcard(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.Type) -> isSameWildcard
    boolean containsTypeEquivalent(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> containsTypeEquivalent
    boolean isCastable(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isCastable
    boolean isCastable(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> isCastable
    boolean disjointTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> disjointTypes
    boolean disjointType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> disjointType
    org.openjdk.tools.javac.util.List cvarLowerBounds(org.openjdk.tools.javac.util.List) -> cvarLowerBounds
    boolean notSoftSubtype(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> notSoftSubtype
    org.openjdk.tools.javac.code.Type relaxBound(org.openjdk.tools.javac.code.Type) -> relaxBound
    boolean isReifiable(org.openjdk.tools.javac.code.Type) -> isReifiable
    boolean isArray(org.openjdk.tools.javac.code.Type) -> isArray
    org.openjdk.tools.javac.code.Type elemtype(org.openjdk.tools.javac.code.Type) -> elemtype
    org.openjdk.tools.javac.code.Type elemtypeOrType(org.openjdk.tools.javac.code.Type) -> elemtypeOrType
    int dimensions(org.openjdk.tools.javac.code.Type) -> dimensions
    org.openjdk.tools.javac.code.Type$ArrayType makeArrayType(org.openjdk.tools.javac.code.Type) -> makeArrayType
    org.openjdk.tools.javac.code.Type asSuper(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> asSuper
    org.openjdk.tools.javac.code.Type asOuterSuper(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> asOuterSuper
    org.openjdk.tools.javac.code.Type asEnclosingSuper(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> asEnclosingSuper
    org.openjdk.tools.javac.code.Type memberType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> memberType
    boolean isAssignable(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isAssignable
    boolean isAssignable(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> isAssignable
    org.openjdk.tools.javac.code.Type erasure(org.openjdk.tools.javac.code.Type) -> erasure
    boolean eraseNotNeeded(org.openjdk.tools.javac.code.Type) -> eraseNotNeeded
    org.openjdk.tools.javac.code.Type erasure(org.openjdk.tools.javac.code.Type,boolean) -> erasure
    org.openjdk.tools.javac.util.List erasure(org.openjdk.tools.javac.util.List) -> erasure
    org.openjdk.tools.javac.code.Type erasureRecursive(org.openjdk.tools.javac.code.Type) -> erasureRecursive
    org.openjdk.tools.javac.util.List erasureRecursive(org.openjdk.tools.javac.util.List) -> erasureRecursive
    org.openjdk.tools.javac.code.Type$IntersectionClassType makeIntersectionType(org.openjdk.tools.javac.util.List) -> makeIntersectionType
    org.openjdk.tools.javac.code.Type$IntersectionClassType makeIntersectionType(org.openjdk.tools.javac.util.List,boolean) -> makeIntersectionType
    org.openjdk.tools.javac.code.Type supertype(org.openjdk.tools.javac.code.Type) -> supertype
    org.openjdk.tools.javac.util.List interfaces(org.openjdk.tools.javac.code.Type) -> interfaces
    org.openjdk.tools.javac.util.List directSupertypes(org.openjdk.tools.javac.code.Type) -> directSupertypes
    boolean isDirectSuperInterface(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> isDirectSuperInterface
    boolean isDerivedRaw(org.openjdk.tools.javac.code.Type) -> isDerivedRaw
    boolean isDerivedRawInternal(org.openjdk.tools.javac.code.Type) -> isDerivedRawInternal
    boolean isDerivedRaw(org.openjdk.tools.javac.util.List) -> isDerivedRaw
    void setBounds(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.util.List) -> setBounds
    void setBounds(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.util.List,boolean) -> setBounds
    org.openjdk.tools.javac.util.List getBounds(org.openjdk.tools.javac.code.Type$TypeVar) -> getBounds
    org.openjdk.tools.javac.code.Type classBound(org.openjdk.tools.javac.code.Type) -> classBound
    boolean isSubSignature(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isSubSignature
    boolean isSubSignature(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,boolean) -> isSubSignature
    boolean overrideEquivalent(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> overrideEquivalent
    boolean overridesObjectMethod(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Symbol) -> overridesObjectMethod
    java.util.Optional mergeAbstracts(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,boolean) -> mergeAbstracts
    org.openjdk.tools.javac.code.Symbol$MethodSymbol implementation(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,boolean,org.openjdk.tools.javac.util.Filter) -> implementation
    org.openjdk.tools.javac.code.Scope$CompoundScope membersClosure(org.openjdk.tools.javac.code.Type,boolean) -> membersClosure
    org.openjdk.tools.javac.code.Symbol$MethodSymbol firstUnimplementedAbstract(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> firstUnimplementedAbstract
    org.openjdk.tools.javac.code.Symbol$MethodSymbol firstUnimplementedAbstractImpl(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> firstUnimplementedAbstractImpl
    org.openjdk.tools.javac.util.List interfaceCandidates(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> interfaceCandidates
    org.openjdk.tools.javac.util.List prune(org.openjdk.tools.javac.util.List) -> prune
    boolean hasSameArgs(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> hasSameArgs
    boolean hasSameArgs(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,boolean) -> hasSameArgs
    boolean hasSameArgs(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types$TypeRelation) -> hasSameArgs
    org.openjdk.tools.javac.util.List subst(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> subst
    org.openjdk.tools.javac.code.Type subst(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> subst
    org.openjdk.tools.javac.util.List substBounds(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> substBounds
    org.openjdk.tools.javac.code.Type$TypeVar substBound(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> substBound
    boolean hasSameBounds(org.openjdk.tools.javac.code.Type$ForAll,org.openjdk.tools.javac.code.Type$ForAll) -> hasSameBounds
    org.openjdk.tools.javac.util.List newInstances(org.openjdk.tools.javac.util.List) -> newInstances
    org.openjdk.tools.javac.code.Type createMethodTypeWithParameters(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> createMethodTypeWithParameters
    org.openjdk.tools.javac.code.Type createMethodTypeWithThrown(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> createMethodTypeWithThrown
    org.openjdk.tools.javac.code.Type createMethodTypeWithReturn(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> createMethodTypeWithReturn
    org.openjdk.tools.javac.code.Type createErrorType(org.openjdk.tools.javac.code.Type) -> createErrorType
    org.openjdk.tools.javac.code.Type createErrorType(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Type) -> createErrorType
    org.openjdk.tools.javac.code.Type createErrorType(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type) -> createErrorType
    int rank(org.openjdk.tools.javac.code.Type) -> rank
    java.lang.String toString(org.openjdk.tools.javac.code.Type,java.util.Locale) -> toString
    java.lang.String toString(org.openjdk.tools.javac.code.Symbol,java.util.Locale) -> toString
    java.lang.String toString(org.openjdk.tools.javac.code.Type) -> toString
    java.lang.String typaramsString(org.openjdk.tools.javac.util.List) -> typaramsString
    void appendTyparamString(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.StringBuilder) -> appendTyparamString
    org.openjdk.tools.javac.util.List closure(org.openjdk.tools.javac.code.Type) -> closure
    java.util.stream.Collector closureCollector(boolean,java.util.function.BiPredicate) -> closureCollector
    org.openjdk.tools.javac.util.List insert(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,java.util.function.BiPredicate) -> insert
    org.openjdk.tools.javac.util.List insert(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> insert
    org.openjdk.tools.javac.util.List union(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,java.util.function.BiPredicate) -> union
    org.openjdk.tools.javac.util.List union(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> union
    org.openjdk.tools.javac.util.List intersect(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> intersect
    org.openjdk.tools.javac.code.Type merge(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> merge
    org.openjdk.tools.javac.code.Type compoundMin(org.openjdk.tools.javac.util.List) -> compoundMin
    org.openjdk.tools.javac.util.List closureMin(org.openjdk.tools.javac.util.List) -> closureMin
    org.openjdk.tools.javac.code.Type lub(org.openjdk.tools.javac.util.List) -> lub
    org.openjdk.tools.javac.code.Type lub(org.openjdk.tools.javac.code.Type[]) -> lub
    org.openjdk.tools.javac.util.List erasedSupertypes(org.openjdk.tools.javac.code.Type) -> erasedSupertypes
    org.openjdk.tools.javac.code.Type arraySuperType() -> arraySuperType
    org.openjdk.tools.javac.code.Type glb(org.openjdk.tools.javac.util.List) -> glb
    org.openjdk.tools.javac.code.Type glb(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> glb
    org.openjdk.tools.javac.code.Type glbFlattened(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> glbFlattened
    int hashCode(org.openjdk.tools.javac.code.Type) -> hashCode
    int hashCode(org.openjdk.tools.javac.code.Type,boolean) -> hashCode
    boolean resultSubtype(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> resultSubtype
    boolean returnTypeSubstitutable(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> returnTypeSubstitutable
    boolean returnTypeSubstitutable(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> returnTypeSubstitutable
    boolean covariantReturnType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> covariantReturnType
    org.openjdk.tools.javac.code.Symbol$ClassSymbol boxedClass(org.openjdk.tools.javac.code.Type) -> boxedClass
    org.openjdk.tools.javac.code.Type boxedTypeOrType(org.openjdk.tools.javac.code.Type) -> boxedTypeOrType
    org.openjdk.tools.javac.code.Type unboxedType(org.openjdk.tools.javac.code.Type) -> unboxedType
    org.openjdk.tools.javac.code.Type unboxedTypeOrType(org.openjdk.tools.javac.code.Type) -> unboxedTypeOrType
    org.openjdk.tools.javac.util.List capture(org.openjdk.tools.javac.util.List) -> capture
    org.openjdk.tools.javac.code.Type capture(org.openjdk.tools.javac.code.Type) -> capture
    org.openjdk.tools.javac.util.List freshTypeVariables(org.openjdk.tools.javac.util.List) -> freshTypeVariables
    boolean sideCast(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> sideCast
    boolean sideCastFinal(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> sideCastFinal
    boolean giveWarning(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> giveWarning
    org.openjdk.tools.javac.util.List superClosure(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> superClosure
    boolean containsTypeEquivalent(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> containsTypeEquivalent
    void adapt(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.ListBuffer,org.openjdk.tools.javac.util.ListBuffer) -> adapt
    void adaptSelf(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.ListBuffer,org.openjdk.tools.javac.util.ListBuffer) -> adaptSelf
    org.openjdk.tools.javac.code.Type rewriteQuantifiers(org.openjdk.tools.javac.code.Type,boolean,boolean) -> rewriteQuantifiers
    org.openjdk.tools.javac.code.Type$WildcardType makeExtendsWildcard(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$TypeVar) -> makeExtendsWildcard
    org.openjdk.tools.javac.code.Type$WildcardType makeSuperWildcard(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$TypeVar) -> makeSuperWildcard
    org.openjdk.tools.javac.code.Attribute$RetentionPolicy getRetention(org.openjdk.tools.javac.code.Attribute$Compound) -> getRetention
    org.openjdk.tools.javac.code.Attribute$RetentionPolicy getRetention(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> getRetention
    void newRound() -> newRound
    boolean lambda$new$3(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> lambda$new$3
    org.openjdk.tools.javac.code.Types$ClosureHolder lambda$closureCollector$2(boolean,java.util.function.BiPredicate) -> lambda$closureCollector$2
    java.lang.String lambda$membersClosure$1(org.openjdk.tools.javac.code.Type) -> lambda$membersClosure$1
    boolean lambda$removeWildcards$0(org.openjdk.tools.javac.code.Type) -> lambda$removeWildcards$0
    org.openjdk.tools.javac.code.Types$FunctionDescriptorLookupError access$000(org.openjdk.tools.javac.code.Types) -> access$000
    void access$100(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.ListBuffer,org.openjdk.tools.javac.util.ListBuffer) -> access$100
    boolean access$200(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> access$200
    org.openjdk.tools.javac.code.Type access$400(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,boolean,boolean) -> access$400
    boolean access$500(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> access$500
    boolean access$600(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> access$600
    boolean access$700(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> access$700
    org.openjdk.tools.javac.code.Type access$800(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,boolean) -> access$800
    org.openjdk.tools.javac.code.Type access$900(org.openjdk.tools.javac.code.Types) -> access$900
    org.openjdk.tools.javac.util.List access$1100(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.util.List) -> access$1100
    org.openjdk.tools.javac.code.Type$WildcardType access$1300(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$TypeVar) -> access$1300
    org.openjdk.tools.javac.code.Type$WildcardType access$1400(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$TypeVar) -> access$1400
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Types$1 -> org.openjdk.tools.javac.code.Types$1:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    java.lang.Boolean visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$10 -> org.openjdk.tools.javac.code.Types$10:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    java.lang.Boolean visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    java.lang.Boolean visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Void) -> visitArrayType
    java.lang.Boolean visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$11 -> org.openjdk.tools.javac.code.Types$11:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Void) -> visitArrayType
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
org.openjdk.tools.javac.code.Types$12 -> org.openjdk.tools.javac.code.Types$12:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> visitType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Symbol) -> visitClassType
    org.openjdk.tools.javac.code.Type visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.code.Symbol) -> visitArrayType
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Symbol) -> visitTypeVar
    org.openjdk.tools.javac.code.Type visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Symbol) -> visitErrorType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$13 -> org.openjdk.tools.javac.code.Types$13:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> visitType
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.Symbol) -> visitWildcardType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Symbol) -> visitClassType
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Symbol) -> visitTypeVar
    org.openjdk.tools.javac.code.Type visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Symbol) -> visitErrorType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$14 -> org.openjdk.tools.javac.code.Types$14:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type combineMetadata(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> combineMetadata
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Boolean) -> visitType
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Boolean) -> visitWildcardType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Boolean) -> visitClassType
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Boolean) -> visitTypeVar
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$15 -> org.openjdk.tools.javac.code.Types$15:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    org.openjdk.tools.javac.code.Type visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Void) -> visitArrayType
    org.openjdk.tools.javac.code.Type visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Void) -> visitErrorType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$16 -> org.openjdk.tools.javac.code.Types$16:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.util.List visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    org.openjdk.tools.javac.util.List visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    org.openjdk.tools.javac.util.List visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$17 -> org.openjdk.tools.javac.code.Types$17:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.util.List visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$18 -> org.openjdk.tools.javac.code.Types$18:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    org.openjdk.tools.javac.code.Type visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Void) -> visitErrorType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$19 -> org.openjdk.tools.javac.code.Types$19:
    org.openjdk.tools.javac.code.Symbol val$s -> val$s
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
org.openjdk.tools.javac.code.Types$2 -> org.openjdk.tools.javac.code.Types$2:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> visitType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Symbol) -> visitClassType
    org.openjdk.tools.javac.code.Type visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Symbol) -> visitErrorType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$20 -> org.openjdk.tools.javac.code.Types$20:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type$TypeVar visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
org.openjdk.tools.javac.code.Types$21 -> org.openjdk.tools.javac.code.Types$21:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> visitType
    org.openjdk.tools.javac.code.Type visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.util.List) -> visitMethodType
    org.openjdk.tools.javac.code.Type visitForAll(org.openjdk.tools.javac.code.Type$ForAll,org.openjdk.tools.javac.util.List) -> visitForAll
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$22 -> org.openjdk.tools.javac.code.Types$22:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> visitType
    org.openjdk.tools.javac.code.Type visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.util.List) -> visitMethodType
    org.openjdk.tools.javac.code.Type visitForAll(org.openjdk.tools.javac.code.Type$ForAll,org.openjdk.tools.javac.util.List) -> visitForAll
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$23 -> org.openjdk.tools.javac.code.Types$23:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> visitType
    org.openjdk.tools.javac.code.Type visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.code.Type) -> visitMethodType
    org.openjdk.tools.javac.code.Type visitForAll(org.openjdk.tools.javac.code.Type$ForAll,org.openjdk.tools.javac.code.Type) -> visitForAll
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$23$1 -> org.openjdk.tools.javac.code.Types$23$1:
    org.openjdk.tools.javac.code.Type$MethodType val$t -> val$t
    org.openjdk.tools.javac.code.Types$23 this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$23,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Type$MethodType) -> <init>
    org.openjdk.tools.javac.code.Type baseType() -> baseType
org.openjdk.tools.javac.code.Types$23$2 -> org.openjdk.tools.javac.code.Types$23$2:
    org.openjdk.tools.javac.code.Type$ForAll val$t -> val$t
    org.openjdk.tools.javac.code.Types$23 this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$23,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$ForAll) -> <init>
    org.openjdk.tools.javac.code.Type baseType() -> baseType
org.openjdk.tools.javac.code.Types$24 -> org.openjdk.tools.javac.code.Types$24:
    void <init>() -> <init>
    java.lang.Integer visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
org.openjdk.tools.javac.code.Types$25 -> org.openjdk.tools.javac.code.Types$25:
    int[] $SwitchMap$com$sun$tools$javac$code$BoundKind -> $SwitchMap$com$sun$tools$javac$code$BoundKind
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    int[] $SwitchMap$javax$lang$model$type$TypeKind -> $SwitchMap$javax$lang$model$type$TypeKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Types$3 -> org.openjdk.tools.javac.code.Types$3:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    boolean accepts(org.openjdk.tools.javac.code.Symbol) -> accepts
    boolean accepts(java.lang.Object) -> accepts
org.openjdk.tools.javac.code.Types$4 -> org.openjdk.tools.javac.code.Types$4:
    java.util.Set cache -> cache
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> visitType
    boolean containsTypeRecursive(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> containsTypeRecursive
    org.openjdk.tools.javac.code.Type rewriteSupers(org.openjdk.tools.javac.code.Type) -> rewriteSupers
    java.lang.Boolean visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Type) -> visitClassType
    java.lang.Boolean visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.code.Type) -> visitArrayType
    java.lang.Boolean visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type) -> visitUndetVar
    java.lang.Boolean visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Type) -> visitErrorType
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$5 -> org.openjdk.tools.javac.code.Types$5:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    boolean sameTypeVars(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Type$TypeVar) -> sameTypeVars
    boolean containsTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> containsTypes
    java.lang.Boolean visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.Type) -> visitWildcardType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
org.openjdk.tools.javac.code.Types$6 -> org.openjdk.tools.javac.code.Types$6:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> visitType
    java.lang.Boolean visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.Type) -> visitWildcardType
    java.lang.Boolean visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type) -> visitUndetVar
    java.lang.Boolean visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Type) -> visitErrorType
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$7 -> org.openjdk.tools.javac.code.Types$7:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> visitType
    java.lang.Boolean visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.Type) -> visitWildcardType
    java.lang.Boolean visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Type) -> visitClassType
    boolean visitCompoundType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Type,boolean) -> visitCompoundType
    java.lang.Boolean visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.code.Type) -> visitArrayType
    java.lang.Boolean visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Type) -> visitTypeVar
    java.lang.Boolean visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Type) -> visitErrorType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$8 -> org.openjdk.tools.javac.code.Types$8:
    java.util.Set cache -> cache
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> visitType
    boolean isCastableRecursive(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isCastableRecursive
    boolean notSoftSubtypeRecursive(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> notSoftSubtypeRecursive
    java.lang.Boolean visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.Type) -> visitWildcardType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$9 -> org.openjdk.tools.javac.code.Types$9:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Type visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Void) -> visitCapturedType
    org.openjdk.tools.javac.code.Type visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
org.openjdk.tools.javac.code.Types$AdaptFailure -> org.openjdk.tools.javac.code.Types$AdaptFailure:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
org.openjdk.tools.javac.code.Types$Adapter -> org.openjdk.tools.javac.code.Types$Adapter:
    org.openjdk.tools.javac.util.ListBuffer from -> from
    org.openjdk.tools.javac.util.ListBuffer to -> to
    java.util.Map mapping -> mapping
    java.util.Set cache -> cache
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.util.ListBuffer,org.openjdk.tools.javac.util.ListBuffer) -> <init>
    void adapt(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> adapt
    java.lang.Void visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Type) -> visitClassType
    java.lang.Void visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.code.Type) -> visitArrayType
    java.lang.Void visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.Type) -> visitWildcardType
    java.lang.Void visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Type) -> visitTypeVar
    java.lang.Void visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> visitType
    void adaptRecursive(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> adaptRecursive
    void adaptRecursive(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> adaptRecursive
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$CandidatesCache -> org.openjdk.tools.javac.code.Types$CandidatesCache:
    java.util.Map cache -> cache
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.util.List get(org.openjdk.tools.javac.code.Types$CandidatesCache$Entry) -> get
    void put(org.openjdk.tools.javac.code.Types$CandidatesCache$Entry,org.openjdk.tools.javac.util.List) -> put
org.openjdk.tools.javac.code.Types$CandidatesCache$Entry -> org.openjdk.tools.javac.code.Types$CandidatesCache$Entry:
    org.openjdk.tools.javac.code.Type site -> site
    org.openjdk.tools.javac.code.Symbol$MethodSymbol msym -> msym
    org.openjdk.tools.javac.code.Types$CandidatesCache this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$CandidatesCache,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.openjdk.tools.javac.code.Types$ClosureHolder -> org.openjdk.tools.javac.code.Types$ClosureHolder:
    org.openjdk.tools.javac.util.List closure -> closure
    boolean minClosure -> minClosure
    java.util.function.BiPredicate shouldSkip -> shouldSkip
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types,boolean,java.util.function.BiPredicate) -> <init>
    void add(org.openjdk.tools.javac.code.Type) -> add
    org.openjdk.tools.javac.code.Types$ClosureHolder merge(org.openjdk.tools.javac.code.Types$ClosureHolder) -> merge
    org.openjdk.tools.javac.util.List closure() -> closure
org.openjdk.tools.javac.code.Types$DefaultSymbolVisitor -> org.openjdk.tools.javac.code.Types$DefaultSymbolVisitor:
    void <init>() -> <init>
    java.lang.Object visit(org.openjdk.tools.javac.code.Symbol,java.lang.Object) -> visit
    java.lang.Object visitClassSymbol(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.lang.Object) -> visitClassSymbol
    java.lang.Object visitMethodSymbol(org.openjdk.tools.javac.code.Symbol$MethodSymbol,java.lang.Object) -> visitMethodSymbol
    java.lang.Object visitOperatorSymbol(org.openjdk.tools.javac.code.Symbol$OperatorSymbol,java.lang.Object) -> visitOperatorSymbol
    java.lang.Object visitPackageSymbol(org.openjdk.tools.javac.code.Symbol$PackageSymbol,java.lang.Object) -> visitPackageSymbol
    java.lang.Object visitTypeSymbol(org.openjdk.tools.javac.code.Symbol$TypeSymbol,java.lang.Object) -> visitTypeSymbol
    java.lang.Object visitVarSymbol(org.openjdk.tools.javac.code.Symbol$VarSymbol,java.lang.Object) -> visitVarSymbol
org.openjdk.tools.javac.code.Types$DefaultTypeVisitor -> org.openjdk.tools.javac.code.Types$DefaultTypeVisitor:
    void <init>() -> <init>
    java.lang.Object visit(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visit
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,java.lang.Object) -> visitPackageType
    java.lang.Object visitModuleType(org.openjdk.tools.javac.code.Type$ModuleType,java.lang.Object) -> visitModuleType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
org.openjdk.tools.javac.code.Types$DescriptorCache -> org.openjdk.tools.javac.code.Types$DescriptorCache:
    java.util.WeakHashMap _map -> _map
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Types$DescriptorCache$FunctionDescriptor get(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> get
    org.openjdk.tools.javac.code.Types$DescriptorCache$FunctionDescriptor findDescriptorInternal(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Scope$CompoundScope) -> findDescriptorInternal
    org.openjdk.tools.javac.code.Types$DescriptorCache$FunctionDescriptor mergeDescriptors(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.List) -> mergeDescriptors
    org.openjdk.tools.javac.code.Types$FunctionDescriptorLookupError failure(java.lang.String,java.lang.Object[]) -> failure
    org.openjdk.tools.javac.code.Types$FunctionDescriptorLookupError failure(org.openjdk.tools.javac.util.JCDiagnostic) -> failure
    org.openjdk.tools.javac.code.Types$DescriptorCache$1 lambda$mergeDescriptors$3(org.openjdk.tools.javac.code.Symbol) -> lambda$mergeDescriptors$3
    boolean lambda$findDescriptorInternal$2(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> lambda$findDescriptorInternal$2
    org.openjdk.tools.javac.code.Type lambda$findDescriptorInternal$1(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Symbol) -> lambda$findDescriptorInternal$1
    boolean lambda$findDescriptorInternal$0(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> lambda$findDescriptorInternal$0
    java.util.WeakHashMap access$1500(org.openjdk.tools.javac.code.Types$DescriptorCache) -> access$1500
org.openjdk.tools.javac.code.Types$DescriptorCache$1 -> org.openjdk.tools.javac.code.Types$DescriptorCache$1:
    org.openjdk.tools.javac.code.Symbol val$bestSoFar -> val$bestSoFar
    org.openjdk.tools.javac.code.Types$DescriptorCache this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$DescriptorCache,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Type getType(org.openjdk.tools.javac.code.Type) -> getType
org.openjdk.tools.javac.code.Types$DescriptorCache$Entry -> org.openjdk.tools.javac.code.Types$DescriptorCache$Entry:
    org.openjdk.tools.javac.code.Types$DescriptorCache$FunctionDescriptor cachedDescRes -> cachedDescRes
    int prevMark -> prevMark
    org.openjdk.tools.javac.code.Types$DescriptorCache this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$DescriptorCache,org.openjdk.tools.javac.code.Types$DescriptorCache$FunctionDescriptor,int) -> <init>
    boolean matches(int) -> matches
org.openjdk.tools.javac.code.Types$DescriptorCache$FunctionDescriptor -> org.openjdk.tools.javac.code.Types$DescriptorCache$FunctionDescriptor:
    org.openjdk.tools.javac.code.Symbol descSym -> descSym
    org.openjdk.tools.javac.code.Types$DescriptorCache this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$DescriptorCache,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol getSymbol() -> getSymbol
    org.openjdk.tools.javac.code.Type getType(org.openjdk.tools.javac.code.Type) -> getType
org.openjdk.tools.javac.code.Types$DescriptorFilter -> org.openjdk.tools.javac.code.Types$DescriptorFilter:
    org.openjdk.tools.javac.code.Symbol$TypeSymbol origin -> origin
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    boolean accepts(org.openjdk.tools.javac.code.Symbol) -> accepts
    boolean accepts(java.lang.Object) -> accepts
org.openjdk.tools.javac.code.Types$FunctionDescriptorLookupError -> org.openjdk.tools.javac.code.Types$FunctionDescriptorLookupError:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.util.JCDiagnostic diagnostic -> diagnostic
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Types$FunctionDescriptorLookupError setMessage(org.openjdk.tools.javac.util.JCDiagnostic) -> setMessage
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic() -> getDiagnostic
org.openjdk.tools.javac.code.Types$HasSameArgs -> org.openjdk.tools.javac.code.Types$HasSameArgs:
    boolean strict -> strict
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types,boolean) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> visitType
    java.lang.Boolean visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.code.Type) -> visitMethodType
    java.lang.Boolean visitForAll(org.openjdk.tools.javac.code.Type$ForAll,org.openjdk.tools.javac.code.Type) -> visitForAll
    java.lang.Boolean visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Type) -> visitErrorType
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$HashCodeVisitor -> org.openjdk.tools.javac.code.Types$HashCodeVisitor:
    void <init>() -> <init>
    java.lang.Integer visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    java.lang.Integer visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    java.lang.Integer visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Void) -> visitMethodType
    java.lang.Integer visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Void) -> visitWildcardType
    java.lang.Integer visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Void) -> visitArrayType
    java.lang.Integer visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Integer visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Void) -> visitUndetVar
    java.lang.Integer visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Void) -> visitErrorType
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    void <init>(org.openjdk.tools.javac.code.Types$1) -> <init>
org.openjdk.tools.javac.code.Types$ImplementationCache -> org.openjdk.tools.javac.code.Types$ImplementationCache:
    java.util.WeakHashMap _map -> _map
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Symbol$MethodSymbol get(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,boolean,org.openjdk.tools.javac.util.Filter) -> get
    org.openjdk.tools.javac.code.Symbol$MethodSymbol implementationInternal(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,boolean,org.openjdk.tools.javac.util.Filter) -> implementationInternal
    java.util.WeakHashMap access$1600(org.openjdk.tools.javac.code.Types$ImplementationCache) -> access$1600
org.openjdk.tools.javac.code.Types$ImplementationCache$Entry -> org.openjdk.tools.javac.code.Types$ImplementationCache$Entry:
    org.openjdk.tools.javac.code.Symbol$MethodSymbol cachedImpl -> cachedImpl
    org.openjdk.tools.javac.util.Filter implFilter -> implFilter
    boolean checkResult -> checkResult
    int prevMark -> prevMark
    org.openjdk.tools.javac.code.Types$ImplementationCache this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$ImplementationCache,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.util.Filter,boolean,int) -> <init>
    boolean matches(org.openjdk.tools.javac.util.Filter,boolean,int) -> matches
org.openjdk.tools.javac.code.Types$LooseSameTypeVisitor -> org.openjdk.tools.javac.code.Types$LooseSameTypeVisitor:
    java.util.Set cache -> cache
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    boolean sameTypeVars(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Type$TypeVar) -> sameTypeVars
    boolean containsTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> containsTypes
    boolean checkSameBounds(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Type$TypeVar) -> checkSameBounds
    void <init>(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Types$1) -> <init>
org.openjdk.tools.javac.code.Types$MapVisitor -> org.openjdk.tools.javac.code.Types$MapVisitor:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type visit(org.openjdk.tools.javac.code.Type) -> visit
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$MembersClosureCache -> org.openjdk.tools.javac.code.Types$MembersClosureCache:
    java.util.Map _map -> _map
    java.util.Set seenTypes -> seenTypes
    org.openjdk.tools.javac.code.Scope$CompoundScope nilScope -> nilScope
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.code.Scope$CompoundScope visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    org.openjdk.tools.javac.code.Scope$CompoundScope visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    org.openjdk.tools.javac.code.Scope$CompoundScope visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.util.Map access$1700(org.openjdk.tools.javac.code.Types$MembersClosureCache) -> access$1700
org.openjdk.tools.javac.code.Types$MembersClosureCache$MembersScope -> org.openjdk.tools.javac.code.Types$MembersClosureCache$MembersScope:
    org.openjdk.tools.javac.code.Scope$CompoundScope scope -> scope
    org.openjdk.tools.javac.code.Types$MembersClosureCache this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$MembersClosureCache,org.openjdk.tools.javac.code.Scope$CompoundScope) -> <init>
    org.openjdk.tools.javac.util.Filter combine(org.openjdk.tools.javac.util.Filter) -> combine
    java.lang.Iterable getSymbols(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbols
    java.lang.Iterable getSymbolsByName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Scope$LookupKind) -> getSymbolsByName
    int getMark() -> getMark
    boolean lambda$combine$0(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.code.Symbol) -> lambda$combine$0
org.openjdk.tools.javac.code.Types$MethodFilter -> org.openjdk.tools.javac.code.Types$MethodFilter:
    org.openjdk.tools.javac.code.Symbol msym -> msym
    org.openjdk.tools.javac.code.Type site -> site
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> <init>
    boolean accepts(org.openjdk.tools.javac.code.Symbol) -> accepts
    boolean accepts(java.lang.Object) -> accepts
org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck -> org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck:
    org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck BASIC -> BASIC
    org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck RTS -> RTS
    org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck[] $VALUES -> $VALUES
    org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck[] values() -> values
    org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean test(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> test
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Types$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck$1 -> org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck$1:
    void <init>(java.lang.String,int) -> <init>
    boolean test(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> test
org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck$2 -> org.openjdk.tools.javac.code.Types$MostSpecificReturnCheck$2:
    void <init>(java.lang.String,int) -> <init>
    boolean test(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> test
org.openjdk.tools.javac.code.Types$Rewriter -> org.openjdk.tools.javac.code.Types$Rewriter:
    boolean high -> high
    boolean rewriteTypeVars -> rewriteTypeVars
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types,boolean,boolean) -> <init>
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    org.openjdk.tools.javac.code.Type visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Void) -> visitCapturedType
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Void) -> visitWildcardType
    org.openjdk.tools.javac.code.Type rewriteAsWildcardType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.BoundKind) -> rewriteAsWildcardType
    org.openjdk.tools.javac.code.Type B(org.openjdk.tools.javac.code.Type) -> B
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$SameTypeVisitor -> org.openjdk.tools.javac.code.Types$SameTypeVisitor:
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> visitType
    boolean sameTypeVars(org.openjdk.tools.javac.code.Type$TypeVar,org.openjdk.tools.javac.code.Type$TypeVar) -> sameTypeVars
    java.lang.Boolean visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.code.Type) -> visitWildcardType
    java.lang.Boolean visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.code.Type) -> visitClassType
    boolean containsTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> containsTypes
    java.lang.Boolean visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.code.Type) -> visitArrayType
    java.lang.Boolean visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.code.Type) -> visitMethodType
    java.lang.Boolean visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,org.openjdk.tools.javac.code.Type) -> visitPackageType
    java.lang.Boolean visitForAll(org.openjdk.tools.javac.code.Type$ForAll,org.openjdk.tools.javac.code.Type) -> visitForAll
    java.lang.Boolean visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type) -> visitUndetVar
    java.lang.Boolean visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,org.openjdk.tools.javac.code.Type) -> visitErrorType
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,java.lang.Object) -> visitPackageType
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.code.Types$SignatureGenerator -> org.openjdk.tools.javac.code.Types$SignatureGenerator:
    org.openjdk.tools.javac.code.Types types -> types
    void append(char) -> append
    void append(byte[]) -> append
    void append(org.openjdk.tools.javac.util.Name) -> append
    void classReference(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> classReference
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    void assembleSig(org.openjdk.tools.javac.code.Type) -> assembleSig
    boolean hasTypeVar(org.openjdk.tools.javac.util.List) -> hasTypeVar
    void assembleClassSig(org.openjdk.tools.javac.code.Type) -> assembleClassSig
    void assembleParamsSig(org.openjdk.tools.javac.util.List) -> assembleParamsSig
    void assembleSig(org.openjdk.tools.javac.util.List) -> assembleSig
org.openjdk.tools.javac.code.Types$SimpleVisitor -> org.openjdk.tools.javac.code.Types$SimpleVisitor:
    void <init>() -> <init>
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
org.openjdk.tools.javac.code.Types$Subst -> org.openjdk.tools.javac.code.Types$Subst:
    org.openjdk.tools.javac.util.List from -> from
    org.openjdk.tools.javac.util.List to -> to
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Void) -> visitWildcardType
    org.openjdk.tools.javac.code.Type visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Void) -> visitForAll
    org.openjdk.tools.javac.code.Type visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    org.openjdk.tools.javac.code.Type visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
org.openjdk.tools.javac.code.Types$Subst$1 -> org.openjdk.tools.javac.code.Types$Subst$1:
    org.openjdk.tools.javac.code.Types$Subst this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$Subst,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> <init>
    boolean needsStripping() -> needsStripping
org.openjdk.tools.javac.code.Types$Subst$2 -> org.openjdk.tools.javac.code.Types$Subst$2:
    org.openjdk.tools.javac.code.Types$Subst this$1 -> this$1
    void <init>(org.openjdk.tools.javac.code.Types$Subst,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> <init>
    boolean needsStripping() -> needsStripping
org.openjdk.tools.javac.code.Types$TypeMapping -> org.openjdk.tools.javac.code.Types$TypeMapping:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type apply(org.openjdk.tools.javac.code.Type) -> apply
    org.openjdk.tools.javac.util.List visit(org.openjdk.tools.javac.util.List,java.lang.Object) -> visit
    org.openjdk.tools.javac.code.Type visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object apply(java.lang.Object) -> apply
    org.openjdk.tools.javac.code.Type lambda$visit$0(java.lang.Object,org.openjdk.tools.javac.code.Type) -> lambda$visit$0
org.openjdk.tools.javac.code.Types$TypePair -> org.openjdk.tools.javac.code.Types$TypePair:
    org.openjdk.tools.javac.code.Type t1 -> t1
    org.openjdk.tools.javac.code.Type t2 -> t2
    boolean strict -> strict
    org.openjdk.tools.javac.code.Types this$0 -> this$0
    void <init>(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> <init>
    void <init>(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,boolean) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.openjdk.tools.javac.code.Types$TypeRelation -> org.openjdk.tools.javac.code.Types$TypeRelation:
    void <init>() -> <init>
org.openjdk.tools.javac.code.Types$UnaryVisitor -> org.openjdk.tools.javac.code.Types$UnaryVisitor:
    void <init>() -> <init>
    java.lang.Object visit(org.openjdk.tools.javac.code.Type) -> visit
org.openjdk.tools.javac.code.Types$UniqueType -> org.openjdk.tools.javac.code.Types$UniqueType:
    org.openjdk.tools.javac.code.Type type -> type
    org.openjdk.tools.javac.code.Types types -> types
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Analyzer -> org.openjdk.tools.javac.comp.Analyzer:
    org.openjdk.tools.javac.util.Context$Key analyzerKey -> analyzerKey
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.comp.DeferredAttr deferredAttr -> deferredAttr
    org.openjdk.tools.javac.comp.ArgumentAttr argumentAttr -> argumentAttr
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.util.Names names -> names
    boolean allowDiamondWithAnonymousClassCreation -> allowDiamondWithAnonymousClassCreation
    java.util.EnumSet analyzerModes -> analyzerModes
    org.openjdk.tools.javac.comp.Analyzer$StatementAnalyzer[] analyzers -> analyzers
    org.openjdk.tools.javac.comp.Analyzer instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void analyzeIfNeeded(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> analyzeIfNeeded
    void analyze(org.openjdk.tools.javac.tree.JCTree$JCStatement,org.openjdk.tools.javac.comp.Env) -> analyze
    void lambda$analyze$1(org.openjdk.tools.javac.comp.Analyzer$AnalysisContext,java.util.Map$Entry) -> lambda$analyze$1
    org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler lambda$analyze$0(org.openjdk.tools.javac.comp.Analyzer$AnalysisContext,org.openjdk.tools.javac.tree.JCTree) -> lambda$analyze$0
    boolean access$000(org.openjdk.tools.javac.comp.Analyzer) -> access$000
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Analyzer$AnalysisContext -> org.openjdk.tools.javac.comp.Analyzer$AnalysisContext:
    java.util.Map treesToAnalyzer -> treesToAnalyzer
    java.util.Map treeMap -> treeMap
    org.openjdk.tools.javac.util.ListBuffer errors -> errors
    org.openjdk.tools.javac.comp.Analyzer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Analyzer) -> <init>
org.openjdk.tools.javac.comp.Analyzer$AnalyzeDeferredDiagHandler -> org.openjdk.tools.javac.comp.Analyzer$AnalyzeDeferredDiagHandler:
    org.openjdk.tools.javac.comp.Analyzer$AnalysisContext context -> context
    org.openjdk.tools.javac.comp.Analyzer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Analyzer,org.openjdk.tools.javac.comp.Analyzer$AnalysisContext) -> <init>
    boolean lambda$new$0(org.openjdk.tools.javac.comp.Analyzer$AnalysisContext,org.openjdk.tools.javac.util.JCDiagnostic) -> lambda$new$0
org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode -> org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode:
    org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode DIAMOND -> DIAMOND
    org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode LAMBDA -> LAMBDA
    org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode METHOD -> METHOD
    java.lang.String opt -> opt
    java.util.function.Predicate sourceFilter -> sourceFilter
    org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode[] values() -> values
    org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.util.function.Predicate) -> <init>
    java.util.EnumSet getAnalyzerModes(java.lang.String,org.openjdk.tools.javac.code.Source) -> getAnalyzerModes
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Analyzer$DiamondInitializer -> org.openjdk.tools.javac.comp.Analyzer$DiamondInitializer:
    org.openjdk.tools.javac.comp.Analyzer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Analyzer) -> <init>
    boolean match(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> match
    org.openjdk.tools.javac.tree.JCTree$JCNewClass map(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> map
    void process(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.tree.JCTree$JCNewClass,boolean) -> process
    void process(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,boolean) -> process
    org.openjdk.tools.javac.tree.JCTree map(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> map
    boolean match(org.openjdk.tools.javac.tree.JCTree) -> match
org.openjdk.tools.javac.comp.Analyzer$LambdaAnalyzer -> org.openjdk.tools.javac.comp.Analyzer$LambdaAnalyzer:
    org.openjdk.tools.javac.comp.Analyzer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Analyzer) -> <init>
    boolean match(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> match
    org.openjdk.tools.javac.util.List decls(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> decls
    org.openjdk.tools.javac.tree.JCTree$JCLambda map(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> map
    void process(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.tree.JCTree$JCLambda,boolean) -> process
    void process(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,boolean) -> process
    org.openjdk.tools.javac.tree.JCTree map(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> map
    boolean match(org.openjdk.tools.javac.tree.JCTree) -> match
org.openjdk.tools.javac.comp.Analyzer$RedundantTypeArgAnalyzer -> org.openjdk.tools.javac.comp.Analyzer$RedundantTypeArgAnalyzer:
    org.openjdk.tools.javac.comp.Analyzer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Analyzer) -> <init>
    boolean match(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> match
    org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation map(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation,org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> map
    void process(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation,org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation,boolean) -> process
    void process(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,boolean) -> process
    org.openjdk.tools.javac.tree.JCTree map(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> map
    boolean match(org.openjdk.tools.javac.tree.JCTree) -> match
org.openjdk.tools.javac.comp.Analyzer$StatementAnalyzer -> org.openjdk.tools.javac.comp.Analyzer$StatementAnalyzer:
    org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode mode -> mode
    org.openjdk.tools.javac.tree.JCTree$Tag tag -> tag
    org.openjdk.tools.javac.comp.Analyzer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Analyzer,org.openjdk.tools.javac.comp.Analyzer$AnalyzerMode,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    boolean isEnabled() -> isEnabled
    boolean match(org.openjdk.tools.javac.tree.JCTree) -> match
    org.openjdk.tools.javac.tree.JCTree map(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> map
    void process(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,boolean) -> process
org.openjdk.tools.javac.comp.Analyzer$StatementScanner -> org.openjdk.tools.javac.comp.Analyzer$StatementScanner:
    org.openjdk.tools.javac.comp.Analyzer$AnalysisContext context -> context
    org.openjdk.tools.javac.comp.Analyzer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Analyzer,org.openjdk.tools.javac.comp.Analyzer$AnalysisContext) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
org.openjdk.tools.javac.comp.Analyzer$TreeMapper -> org.openjdk.tools.javac.comp.Analyzer$TreeMapper:
    org.openjdk.tools.javac.comp.Analyzer$AnalysisContext context -> context
    org.openjdk.tools.javac.comp.Analyzer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Analyzer,org.openjdk.tools.javac.comp.Analyzer$AnalysisContext) -> <init>
    org.openjdk.tools.javac.tree.JCTree copy(org.openjdk.tools.javac.tree.JCTree,java.lang.Void) -> copy
    org.openjdk.tools.javac.tree.JCTree visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Void) -> visitLambdaExpression
    org.openjdk.tools.javac.tree.JCTree visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Object) -> visitLambdaExpression
    org.openjdk.tools.javac.tree.JCTree copy(org.openjdk.tools.javac.tree.JCTree,java.lang.Object) -> copy
    java.lang.Object visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Object) -> visitLambdaExpression
    void lambda$visitLambdaExpression$0(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> lambda$visitLambdaExpression$0
org.openjdk.tools.javac.comp.Annotate -> org.openjdk.tools.javac.comp.Annotate:
    org.openjdk.tools.javac.util.Context$Key annotateKey -> annotateKey
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.comp.ConstFold cfolder -> cfolder
    org.openjdk.tools.javac.code.DeferredLintHandler deferredLintHandler -> deferredLintHandler
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.code.Lint lint -> lint
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.comp.Resolve resolve -> resolve
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.TypeEnvs typeEnvs -> typeEnvs
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.code.Attribute theUnfinishedDefaultValue -> theUnfinishedDefaultValue
    boolean allowRepeatedAnnos -> allowRepeatedAnnos
    java.lang.String sourceName -> sourceName
    int blockCount -> blockCount
    org.openjdk.tools.javac.util.ListBuffer q -> q
    org.openjdk.tools.javac.util.ListBuffer validateQ -> validateQ
    int flushCount -> flushCount
    org.openjdk.tools.javac.util.ListBuffer typesQ -> typesQ
    org.openjdk.tools.javac.util.ListBuffer afterTypesQ -> afterTypesQ
    org.openjdk.tools.javac.comp.Annotate$AnnotationTypeCompleter theSourceCompleter -> theSourceCompleter
    org.openjdk.tools.javac.comp.Annotate instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void blockAnnotations() -> blockAnnotations
    void unblockAnnotations() -> unblockAnnotations
    void unblockAnnotationsNoFlush() -> unblockAnnotationsNoFlush
    boolean annotationsBlocked() -> annotationsBlocked
    void enterDone() -> enterDone
    org.openjdk.tools.javac.util.List fromAnnotations(org.openjdk.tools.javac.util.List) -> fromAnnotations
    void normal(java.lang.Runnable) -> normal
    void validate(java.lang.Runnable) -> validate
    void flush() -> flush
    boolean isFlushing() -> isFlushing
    void startFlushing() -> startFlushing
    void doneFlushing() -> doneFlushing
    void typeAnnotation(java.lang.Runnable) -> typeAnnotation
    void afterTypes(java.lang.Runnable) -> afterTypes
    void annotateLater(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> annotateLater
    void annotateDefaultValueLater(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> annotateDefaultValueLater
    void enterDefaultValue(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> enterDefaultValue
    void annotateNow(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env,boolean,boolean) -> annotateNow
    org.openjdk.tools.javac.code.Attribute$Compound attributeAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Env) -> attributeAnnotation
    org.openjdk.tools.javac.code.Attribute$TypeCompound attributeTypeAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Env) -> attributeTypeAnnotation
    org.openjdk.tools.javac.util.List attributeAnnotationValues(org.openjdk.tools.javac.tree.JCTree$JCAnnotation,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Env) -> attributeAnnotationValues
    org.openjdk.tools.javac.util.Pair attributeAnnotationNameValuePair(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type,boolean,org.openjdk.tools.javac.comp.Env,boolean) -> attributeAnnotationNameValuePair
    org.openjdk.tools.javac.code.Attribute attributeAnnotationValue(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> attributeAnnotationValue
    org.openjdk.tools.javac.code.Attribute getAnnotationEnumValue(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> getAnnotationEnumValue
    org.openjdk.tools.javac.code.Attribute getAnnotationClassValue(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> getAnnotationClassValue
    org.openjdk.tools.javac.code.Attribute getAnnotationPrimitiveValue(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> getAnnotationPrimitiveValue
    org.openjdk.tools.javac.code.Attribute getAnnotationArrayValue(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> getAnnotationArrayValue
    org.openjdk.tools.javac.code.Attribute$Compound processRepeatedAnnotations(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Annotate$AnnotationContext,org.openjdk.tools.javac.code.Symbol,boolean) -> processRepeatedAnnotations
    org.openjdk.tools.javac.code.Type getContainingType(org.openjdk.tools.javac.code.Attribute$Compound,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,boolean) -> getContainingType
    org.openjdk.tools.javac.code.Type filterSame(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> filterSame
    org.openjdk.tools.javac.code.Type extractContainingType(org.openjdk.tools.javac.code.Attribute$Compound,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> extractContainingType
    org.openjdk.tools.javac.code.Symbol$MethodSymbol validateContainer(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> validateContainer
    org.openjdk.tools.javac.code.Attribute$Compound makeContainerAnnotation(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Annotate$AnnotationContext,org.openjdk.tools.javac.code.Symbol,boolean) -> makeContainerAnnotation
    void enterTypeAnnotations(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,boolean) -> enterTypeAnnotations
    void queueScanTreeAndTypeAnnotate(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> queueScanTreeAndTypeAnnotate
    void annotateTypeSecondStage(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> annotateTypeSecondStage
    void annotateTypeParameterSecondStage(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List) -> annotateTypeParameterSecondStage
    org.openjdk.tools.javac.comp.Annotate$AnnotationTypeCompleter annotationTypeSourceCompleter() -> annotationTypeSourceCompleter
    void attributeAnnotationType(org.openjdk.tools.javac.comp.Env) -> attributeAnnotationType
    org.openjdk.tools.javac.code.Attribute unfinishedDefaultValue() -> unfinishedDefaultValue
    void newRound() -> newRound
    void lambda$annotateTypeParameterSecondStage$6(org.openjdk.tools.javac.util.List) -> lambda$annotateTypeParameterSecondStage$6
    void lambda$annotateTypeSecondStage$5(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> lambda$annotateTypeSecondStage$5
    void lambda$queueScanTreeAndTypeAnnotate$4(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> lambda$queueScanTreeAndTypeAnnotate$4
    void lambda$annotateDefaultValueLater$3(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$annotateDefaultValueLater$3
    void lambda$annotateDefaultValueLater$2(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> lambda$annotateDefaultValueLater$2
    void lambda$annotateLater$1(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol) -> lambda$annotateLater$1
    void lambda$annotateLater$0(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.List) -> lambda$annotateLater$0
    org.openjdk.tools.javac.comp.TypeEnvs access$000(org.openjdk.tools.javac.comp.Annotate) -> access$000
    void access$100(org.openjdk.tools.javac.comp.Annotate,org.openjdk.tools.javac.comp.Env) -> access$100
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Annotate$1 -> org.openjdk.tools.javac.comp.Annotate$1:
    org.openjdk.tools.javac.comp.Annotate this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Annotate) -> <init>
    void visitTypeIdent(org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree) -> visitTypeIdent
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
org.openjdk.tools.javac.comp.Annotate$2 -> org.openjdk.tools.javac.comp.Annotate$2:
    org.openjdk.tools.javac.comp.Annotate this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Annotate) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> complete
org.openjdk.tools.javac.comp.Annotate$AnnotationContext -> org.openjdk.tools.javac.comp.Annotate$AnnotationContext:
    org.openjdk.tools.javac.comp.Env env -> env
    java.util.Map annotated -> annotated
    java.util.Map pos -> pos
    boolean isTypeCompound -> isTypeCompound
    org.openjdk.tools.javac.comp.Annotate this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Annotate,org.openjdk.tools.javac.comp.Env,java.util.Map,java.util.Map,boolean) -> <init>
org.openjdk.tools.javac.comp.Annotate$AnnotationTypeCompleter -> org.openjdk.tools.javac.comp.Annotate$AnnotationTypeCompleter:
    void complete(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> complete
org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata -> org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata:
    org.openjdk.tools.javac.code.Symbol$ClassSymbol metaDataFor -> metaDataFor
    org.openjdk.tools.javac.code.Attribute$Compound target -> target
    org.openjdk.tools.javac.code.Attribute$Compound repeatable -> repeatable
    org.openjdk.tools.javac.comp.Annotate$AnnotationTypeCompleter annotationTypeCompleter -> annotationTypeCompleter
    org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata NOT_AN_ANNOTATION_TYPE -> NOT_AN_ANNOTATION_TYPE
    void <init>(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.comp.Annotate$AnnotationTypeCompleter) -> <init>
    void init() -> init
    void complete() -> complete
    org.openjdk.tools.javac.code.Attribute$Compound getRepeatable() -> getRepeatable
    void setRepeatable(org.openjdk.tools.javac.code.Attribute$Compound) -> setRepeatable
    org.openjdk.tools.javac.code.Attribute$Compound getTarget() -> getTarget
    void setTarget(org.openjdk.tools.javac.code.Attribute$Compound) -> setTarget
    java.util.Set getAnnotationElements() -> getAnnotationElements
    java.util.Set getAnnotationElementsWithDefault() -> getAnnotationElementsWithDefault
    java.lang.String toString() -> toString
    boolean isMetadataForAnnotationType() -> isMetadataForAnnotationType
    org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata notAnAnnotationType() -> notAnAnnotationType
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata$1 -> org.openjdk.tools.javac.comp.Annotate$AnnotationTypeMetadata$1:
    void <init>(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.comp.Annotate$AnnotationTypeCompleter) -> <init>
    void complete() -> complete
    java.lang.String toString() -> toString
    java.util.Set getAnnotationElements() -> getAnnotationElements
    java.util.Set getAnnotationElementsWithDefault() -> getAnnotationElementsWithDefault
    boolean isMetadataForAnnotationType() -> isMetadataForAnnotationType
    org.openjdk.tools.javac.code.Attribute$Compound getTarget() -> getTarget
    org.openjdk.tools.javac.code.Attribute$Compound getRepeatable() -> getRepeatable
org.openjdk.tools.javac.comp.Annotate$AnnotationTypeVisitor -> org.openjdk.tools.javac.comp.Annotate$AnnotationTypeVisitor:
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.comp.Check check -> check
    org.openjdk.tools.javac.code.Symtab tab -> tab
    org.openjdk.tools.javac.comp.TypeEnvs typeEnvs -> typeEnvs
    org.openjdk.tools.javac.code.Attribute$Compound target -> target
    org.openjdk.tools.javac.code.Attribute$Compound repeatable -> repeatable
    org.openjdk.tools.javac.comp.Annotate this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Annotate,org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.comp.TypeEnvs) -> <init>
    org.openjdk.tools.javac.code.Attribute$Compound getRepeatable() -> getRepeatable
    org.openjdk.tools.javac.code.Attribute$Compound getTarget() -> getTarget
    void scanAnnotationType(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> scanAnnotationType
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    org.openjdk.tools.javac.code.Attribute$Compound access$200(org.openjdk.tools.javac.comp.Annotate$AnnotationTypeVisitor) -> access$200
    org.openjdk.tools.javac.code.Attribute$Compound access$300(org.openjdk.tools.javac.comp.Annotate$AnnotationTypeVisitor) -> access$300
org.openjdk.tools.javac.comp.Annotate$TypeAnnotate -> org.openjdk.tools.javac.comp.Annotate$TypeAnnotate:
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.code.Symbol sym -> sym
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition deferPos -> deferPos
    org.openjdk.tools.javac.comp.Annotate this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Annotate,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> <init>
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
org.openjdk.tools.javac.comp.ArgumentAttr -> org.openjdk.tools.javac.comp.ArgumentAttr:
    org.openjdk.tools.javac.util.Context$Key methodAttrKey -> methodAttrKey
    org.openjdk.tools.javac.comp.DeferredAttr deferredAttr -> deferredAttr
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.code.Type result -> result
    java.util.Map argumentTypeCache -> argumentTypeCache
    org.openjdk.tools.javac.comp.ArgumentAttr instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void setResult(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type) -> setResult
    org.openjdk.tools.javac.code.Type checkSpeculative(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> checkSpeculative
    org.openjdk.tools.javac.code.Type checkSpeculative(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> checkSpeculative
    org.openjdk.tools.javac.comp.ArgumentAttr$LocalCacheContext withLocalCacheContext() -> withLocalCacheContext
    org.openjdk.tools.javac.code.Type attribArg(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> attribArg
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    void processArg(org.openjdk.tools.javac.tree.JCTree$JCExpression,java.util.function.Function) -> processArg
    void processArg(org.openjdk.tools.javac.tree.JCTree$JCExpression,java.util.function.Supplier) -> processArg
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    org.openjdk.tools.javac.comp.ArgumentAttr$ResolvedConstructorType lambda$visitNewClass$5(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> lambda$visitNewClass$5
    org.openjdk.tools.javac.comp.ArgumentAttr$ResolvedMethodType lambda$visitApply$4(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation,org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> lambda$visitApply$4
    org.openjdk.tools.javac.comp.ArgumentAttr$ExplicitLambdaType lambda$visitLambda$3(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> lambda$visitLambda$3
    org.openjdk.tools.javac.comp.ArgumentAttr$ConditionalType lambda$visitConditional$2(org.openjdk.tools.javac.tree.JCTree$JCConditional,org.openjdk.tools.javac.tree.JCTree$JCConditional) -> lambda$visitConditional$2
    org.openjdk.tools.javac.comp.ArgumentAttr$ParensType lambda$visitParens$1(org.openjdk.tools.javac.tree.JCTree$JCParens,org.openjdk.tools.javac.tree.JCTree$JCParens) -> lambda$visitParens$1
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType lambda$processArg$0(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.ArgumentAttr$UniquePos,java.util.function.Function) -> lambda$processArg$0
    org.openjdk.tools.javac.comp.DeferredAttr access$000(org.openjdk.tools.javac.comp.ArgumentAttr) -> access$000
    org.openjdk.tools.javac.comp.Attr access$100(org.openjdk.tools.javac.comp.ArgumentAttr) -> access$100
    org.openjdk.tools.javac.code.Symtab access$200(org.openjdk.tools.javac.comp.ArgumentAttr) -> access$200
    org.openjdk.tools.javac.util.Log access$300(org.openjdk.tools.javac.comp.ArgumentAttr) -> access$300
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.ArgumentAttr$1 -> org.openjdk.tools.javac.comp.ArgumentAttr$1:
    org.openjdk.tools.javac.comp.ArgumentAttr$UniquePos val$pos -> val$pos
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.ArgumentAttr$UniquePos) -> <init>
    boolean needsArgumentAttr(org.openjdk.tools.javac.tree.JCTree) -> needsArgumentAttr
org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType -> org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType:
    org.openjdk.tools.javac.tree.JCTree$JCExpression speculativeTree -> speculativeTree
    java.util.Map speculativeTypes -> speculativeTypes
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCExpression,java.util.Map) -> <init>
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredTypeCompleter completer() -> completer
    org.openjdk.tools.javac.code.Type complete(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> complete
    org.openjdk.tools.javac.code.Type speculativeType(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> speculativeType
    org.openjdk.tools.javac.tree.JCTree speculativeTree(org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> speculativeTree
    org.openjdk.tools.javac.code.Type overloadCheck(org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> overloadCheck
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> dup
org.openjdk.tools.javac.comp.ArgumentAttr$ConditionalType -> org.openjdk.tools.javac.comp.ArgumentAttr$ConditionalType:
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCConditional) -> <init>
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCConditional,java.util.Map) -> <init>
    org.openjdk.tools.javac.code.Type overloadCheck(org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> overloadCheck
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCConditional,org.openjdk.tools.javac.comp.Env) -> dup
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> dup
org.openjdk.tools.javac.comp.ArgumentAttr$ExplicitLambdaType -> org.openjdk.tools.javac.comp.ArgumentAttr$ExplicitLambdaType:
    java.util.Optional argtypes -> argtypes
    java.util.Optional returnExpressions -> returnExpressions
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCLambda) -> <init>
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCLambda,java.util.Map) -> <init>
    org.openjdk.tools.javac.util.List argtypes() -> argtypes
    org.openjdk.tools.javac.util.List returnExpressions() -> returnExpressions
    org.openjdk.tools.javac.code.Type overloadCheck(org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> overloadCheck
    void checkLambdaCompatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> checkLambdaCompatible
    org.openjdk.tools.javac.code.Type getReturnType(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> getReturnType
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.comp.Env) -> dup
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> dup
    org.openjdk.tools.javac.util.List lambda$returnExpressions$1() -> lambda$returnExpressions$1
    org.openjdk.tools.javac.util.List lambda$argtypes$0() -> lambda$argtypes$0
org.openjdk.tools.javac.comp.ArgumentAttr$ExplicitLambdaType$1 -> org.openjdk.tools.javac.comp.ArgumentAttr$ExplicitLambdaType$1:
    org.openjdk.tools.javac.util.ListBuffer val$returnExpressions -> val$returnExpressions
    org.openjdk.tools.javac.comp.ArgumentAttr$ExplicitLambdaType this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr$ExplicitLambdaType,org.openjdk.tools.javac.util.ListBuffer) -> <init>
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
org.openjdk.tools.javac.comp.ArgumentAttr$LocalCacheContext -> org.openjdk.tools.javac.comp.ArgumentAttr$LocalCacheContext:
    java.util.Map prevCache -> prevCache
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr) -> <init>
    void leave() -> leave
org.openjdk.tools.javac.comp.ArgumentAttr$ParensType -> org.openjdk.tools.javac.comp.ArgumentAttr$ParensType:
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCParens) -> <init>
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCParens,java.util.Map) -> <init>
    org.openjdk.tools.javac.code.Type overloadCheck(org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> overloadCheck
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCParens,org.openjdk.tools.javac.comp.Env) -> dup
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> dup
org.openjdk.tools.javac.comp.ArgumentAttr$ResolvedConstructorType -> org.openjdk.tools.javac.comp.ArgumentAttr$ResolvedConstructorType:
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> <init>
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCNewClass,java.util.Map) -> <init>
    org.openjdk.tools.javac.comp.Attr$ResultInfo resultInfo(org.openjdk.tools.javac.comp.Attr$ResultInfo) -> resultInfo
    org.openjdk.tools.javac.code.Type methodType() -> methodType
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.comp.Env) -> dup
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> dup
org.openjdk.tools.javac.comp.ArgumentAttr$ResolvedMemberType -> org.openjdk.tools.javac.comp.ArgumentAttr$ResolvedMemberType:
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCExpression,java.util.Map) -> <init>
    org.openjdk.tools.javac.code.Type overloadCheck(org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> overloadCheck
    org.openjdk.tools.javac.comp.Attr$ResultInfo resultInfo(org.openjdk.tools.javac.comp.Attr$ResultInfo) -> resultInfo
    org.openjdk.tools.javac.code.Type methodType() -> methodType
org.openjdk.tools.javac.comp.ArgumentAttr$ResolvedMethodType -> org.openjdk.tools.javac.comp.ArgumentAttr$ResolvedMethodType:
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> <init>
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation,java.util.Map) -> <init>
    org.openjdk.tools.javac.comp.Attr$ResultInfo resultInfo(org.openjdk.tools.javac.comp.Attr$ResultInfo) -> resultInfo
    org.openjdk.tools.javac.code.Type methodType() -> methodType
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation,org.openjdk.tools.javac.comp.Env) -> dup
    org.openjdk.tools.javac.comp.ArgumentAttr$ArgumentType dup(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> dup
org.openjdk.tools.javac.comp.ArgumentAttr$UniquePos -> org.openjdk.tools.javac.comp.ArgumentAttr$UniquePos:
    int pos -> pos
    org.openjdk.tools.javac.util.DiagnosticSource source -> source
    org.openjdk.tools.javac.comp.ArgumentAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.ArgumentAttr,org.openjdk.tools.javac.tree.JCTree) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Attr -> org.openjdk.tools.javac.comp.Attr:
    org.openjdk.tools.javac.util.Context$Key attrKey -> attrKey
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Resolve rs -> rs
    org.openjdk.tools.javac.comp.Operators operators -> operators
    org.openjdk.tools.javac.comp.Infer infer -> infer
    org.openjdk.tools.javac.comp.Analyzer analyzer -> analyzer
    org.openjdk.tools.javac.comp.DeferredAttr deferredAttr -> deferredAttr
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.comp.Flow flow -> flow
    org.openjdk.tools.javac.comp.MemberEnter memberEnter -> memberEnter
    org.openjdk.tools.javac.comp.TypeEnter typeEnter -> typeEnter
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.comp.ConstFold cfolder -> cfolder
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.jvm.Target target -> target
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.code.TypeAnnotations typeAnnotations -> typeAnnotations
    org.openjdk.tools.javac.code.DeferredLintHandler deferredLintHandler -> deferredLintHandler
    org.openjdk.tools.javac.comp.TypeEnvs typeEnvs -> typeEnvs
    org.openjdk.tools.javac.util.Dependencies dependencies -> dependencies
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    org.openjdk.tools.javac.comp.ArgumentAttr argumentAttr -> argumentAttr
    boolean allowPoly -> allowPoly
    boolean allowTypeAnnos -> allowTypeAnnos
    boolean allowLambda -> allowLambda
    boolean allowDefaultMethods -> allowDefaultMethods
    boolean allowStaticInterfaceMethods -> allowStaticInterfaceMethods
    boolean useBeforeDeclarationWarning -> useBeforeDeclarationWarning
    boolean allowStringsInSwitch -> allowStringsInSwitch
    java.lang.String sourceName -> sourceName
    org.openjdk.source.tree.TreeVisitor identAttributer -> identAttributer
    org.openjdk.tools.javac.tree.JCTree breakTree -> breakTree
    org.openjdk.tools.javac.comp.Attr$ResultInfo statInfo -> statInfo
    org.openjdk.tools.javac.comp.Attr$ResultInfo varAssignmentInfo -> varAssignmentInfo
    org.openjdk.tools.javac.comp.Attr$ResultInfo methodAttrInfo -> methodAttrInfo
    org.openjdk.tools.javac.comp.Attr$ResultInfo unknownExprInfo -> unknownExprInfo
    org.openjdk.tools.javac.comp.Attr$ResultInfo unknownTypeInfo -> unknownTypeInfo
    org.openjdk.tools.javac.comp.Attr$ResultInfo unknownTypeExprInfo -> unknownTypeExprInfo
    org.openjdk.tools.javac.comp.Attr$ResultInfo recoveryInfo -> recoveryInfo
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.comp.Attr$ResultInfo resultInfo -> resultInfo
    org.openjdk.tools.javac.code.Type result -> result
    org.openjdk.tools.javac.tree.TreeTranslator removeClassParams -> removeClassParams
    org.openjdk.tools.javac.code.TypeTag[] primitiveTags -> primitiveTags
    org.openjdk.tools.javac.code.Types$MapVisitor targetChecker -> targetChecker
    java.util.Map clinits -> clinits
    org.openjdk.tools.javac.util.Filter anyNonAbstractOrDefaultMethod -> anyNonAbstractOrDefaultMethod
    org.openjdk.tools.javac.comp.Attr instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.code.Type check(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Kinds$KindSelector,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> check
    boolean isAssignableAsBlankFinal(org.openjdk.tools.javac.code.Symbol$VarSymbol,org.openjdk.tools.javac.comp.Env) -> isAssignableAsBlankFinal
    void checkAssignable(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$VarSymbol,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> checkAssignable
    boolean isStaticReference(org.openjdk.tools.javac.tree.JCTree) -> isStaticReference
    boolean isType(org.openjdk.tools.javac.code.Symbol) -> isType
    org.openjdk.tools.javac.code.Symbol thisSym(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env) -> thisSym
    org.openjdk.tools.javac.code.Symbol attribIdent(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> attribIdent
    org.openjdk.tools.javac.code.Symbol attribIdent(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> attribIdent
    org.openjdk.tools.javac.code.Type coerce(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> coerce
    org.openjdk.tools.javac.code.Type attribType(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> attribType
    org.openjdk.tools.javac.code.Type attribImportQualifier(org.openjdk.tools.javac.tree.JCTree$JCImport,org.openjdk.tools.javac.comp.Env) -> attribImportQualifier
    org.openjdk.tools.javac.comp.Env attribExprToTree(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree) -> attribExprToTree
    org.openjdk.tools.javac.comp.Env attribStatToTree(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree) -> attribStatToTree
    org.openjdk.tools.javac.code.Type pt() -> pt
    org.openjdk.tools.javac.code.Kinds$KindSelector pkind() -> pkind
    org.openjdk.tools.javac.code.Type attribTree(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> attribTree
    org.openjdk.tools.javac.comp.Env copyEnv(org.openjdk.tools.javac.comp.Env) -> copyEnv
    org.openjdk.tools.javac.code.Scope$WriteableScope copyScope(org.openjdk.tools.javac.code.Scope$WriteableScope) -> copyScope
    org.openjdk.tools.javac.code.Type attribExpr(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type) -> attribExpr
    org.openjdk.tools.javac.code.Type attribExpr(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> attribExpr
    org.openjdk.tools.javac.code.Type attribType(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> attribType
    org.openjdk.tools.javac.code.Type attribType(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type) -> attribType
    org.openjdk.tools.javac.code.Type attribStat(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> attribStat
    org.openjdk.tools.javac.util.List attribExprs(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type) -> attribExprs
    void attribStats(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> attribStats
    org.openjdk.tools.javac.code.Kinds$KindSelector attribArgs(org.openjdk.tools.javac.code.Kinds$KindSelector,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.ListBuffer) -> attribArgs
    org.openjdk.tools.javac.util.List attribAnyTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> attribAnyTypes
    org.openjdk.tools.javac.util.List attribTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> attribTypes
    void attribTypeVariables(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> attribTypeVariables
    void attribAnnotationTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> attribAnnotationTypes
    java.lang.Object attribLazyConstantValue(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.code.Type) -> attribLazyConstantValue
    org.openjdk.tools.javac.code.Type attribBase(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,boolean,boolean,boolean) -> attribBase
    org.openjdk.tools.javac.code.Type checkBase(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,boolean,boolean,boolean) -> checkBase
    org.openjdk.tools.javac.code.Type attribIdentAsEnumType(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCIdent) -> attribIdentAsEnumType
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitSkip(org.openjdk.tools.javac.tree.JCTree$JCSkip) -> visitSkip
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void addVars(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Scope$WriteableScope) -> addVars
    org.openjdk.tools.javac.code.Symbol enumConstant(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> enumConstant
    void visitSynchronized(org.openjdk.tools.javac.tree.JCTree$JCSynchronized) -> visitSynchronized
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void checkAutoCloseable(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type) -> checkAutoCloseable
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    boolean isBooleanOrNumeric(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> isBooleanOrNumeric
    boolean primitiveOrBoxed(org.openjdk.tools.javac.code.Type) -> primitiveOrBoxed
    org.openjdk.tools.javac.comp.Check$CheckContext conditionalContext(org.openjdk.tools.javac.comp.Check$CheckContext) -> conditionalContext
    org.openjdk.tools.javac.code.Type condType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> condType
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitExec(org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement) -> visitExec
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    org.openjdk.tools.javac.tree.JCTree findJumpTarget(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.comp.Env) -> findJumpTarget
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitAssert(org.openjdk.tools.javac.tree.JCTree$JCAssert) -> visitAssert
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    org.openjdk.tools.javac.code.Type adjustMethodReturnType(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> adjustMethodReturnType
    boolean checkFirstConstructorStat(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation,org.openjdk.tools.javac.comp.Env) -> checkFirstConstructorStat
    org.openjdk.tools.javac.code.Type newMethodTemplate(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> newMethodTemplate
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitAnonymousClassDefinition(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Kinds$KindSelector) -> visitAnonymousClassDefinition
    org.openjdk.tools.javac.comp.Check$CheckContext diamondContext(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.comp.Check$CheckContext) -> diamondContext
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeNullCheck(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> makeNullCheck
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    org.openjdk.tools.javac.comp.Attr$TargetInfo getTargetInfo(org.openjdk.tools.javac.tree.JCTree$JCPolyExpression,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.util.List) -> getTargetInfo
    void preFlow(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> preFlow
    org.openjdk.tools.javac.code.Type fallbackDescriptorType(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> fallbackDescriptorType
    void checkAccessibleTypes(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.code.Type[]) -> checkAccessibleTypes
    void checkAccessibleTypes(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.util.List) -> checkAccessibleTypes
    org.openjdk.tools.javac.comp.Attr$ResultInfo lambdaBodyResult(org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> lambdaBodyResult
    void checkLambdaCompatible(org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext) -> checkLambdaCompatible
    org.openjdk.tools.javac.code.Symbol$MethodSymbol removeClinit(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> removeClinit
    org.openjdk.tools.javac.comp.Env lambdaEnv(org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.comp.Env) -> lambdaEnv
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    org.openjdk.tools.javac.comp.Attr$ResultInfo memberReferenceQualifierResult(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> memberReferenceQualifierResult
    void checkReferenceCompatible(org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext,boolean) -> checkReferenceCompatible
    void setFunctionalInfo(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCFunctionalExpression,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext) -> setFunctionalInfo
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitTypeTest(org.openjdk.tools.javac.tree.JCTree$JCInstanceOf) -> visitTypeTest
    void visitIndexed(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess) -> visitIndexed
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    org.openjdk.tools.javac.code.Symbol selectSym(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> selectSym
    org.openjdk.tools.javac.code.Type checkId(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> checkId
    org.openjdk.tools.javac.code.Type checkMethodId(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> checkMethodId
    org.openjdk.tools.javac.code.Type checkSigPolyMethodId(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> checkSigPolyMethodId
    org.openjdk.tools.javac.code.Type checkMethodIdInternal(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> checkMethodIdInternal
    org.openjdk.tools.javac.code.Type checkIdInternal(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> checkIdInternal
    void checkInit(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$VarSymbol,boolean) -> checkInit
    org.openjdk.tools.javac.comp.Env enclosingInitEnv(org.openjdk.tools.javac.comp.Env) -> enclosingInitEnv
    void checkEnumInitializer(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$VarSymbol) -> checkEnumInitializer
    boolean isStaticEnumField(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> isStaticEnumField
    org.openjdk.tools.javac.code.Type checkMethod(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> checkMethod
    void visitLiteral(org.openjdk.tools.javac.tree.JCTree$JCLiteral) -> visitLiteral
    org.openjdk.tools.javac.code.Type litType(org.openjdk.tools.javac.code.TypeTag) -> litType
    void visitTypeIdent(org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree) -> visitTypeIdent
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitTypeUnion(org.openjdk.tools.javac.tree.JCTree$JCTypeUnion) -> visitTypeUnion
    void visitTypeIntersection(org.openjdk.tools.javac.tree.JCTree$JCTypeIntersection) -> visitTypeIntersection
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    org.openjdk.tools.javac.code.Type checkIntersection(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List) -> checkIntersection
    void visitWildcard(org.openjdk.tools.javac.tree.JCTree$JCWildcard) -> visitWildcard
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitErroneous(org.openjdk.tools.javac.tree.JCTree$JCErroneous) -> visitErroneous
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    void attrib(org.openjdk.tools.javac.comp.Env) -> attrib
    void attribTopLevel(org.openjdk.tools.javac.comp.Env) -> attribTopLevel
    void attribPackage(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> attribPackage
    void attribPackage(org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> attribPackage
    void attribModule(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> attribModule
    void attribModule(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> attribModule
    void attribClass(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> attribClass
    void attribClass(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> attribClass
    void visitImport(org.openjdk.tools.javac.tree.JCTree$JCImport) -> visitImport
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void attribClassBody(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> attribClassBody
    boolean checkForSerial(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> checkForSerial
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition getDiagnosticPosition(org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.code.Type) -> getDiagnosticPosition
    boolean isSerializable(org.openjdk.tools.javac.code.Type) -> isSerializable
    void checkSerialVersionUID(org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> checkSerialVersionUID
    org.openjdk.tools.javac.code.Type capture(org.openjdk.tools.javac.code.Type) -> capture
    void validateTypeAnnotations(org.openjdk.tools.javac.tree.JCTree,boolean) -> validateTypeAnnotations
    void postAttr(org.openjdk.tools.javac.tree.JCTree) -> postAttr
    void setPackageSymbols(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol) -> setPackageSymbols
    boolean lambda$static$10(org.openjdk.tools.javac.code.Symbol) -> lambda$static$10
    void lambda$setFunctionalInfo$9(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCFunctionalExpression,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$setFunctionalInfo$9
    void lambda$checkReferenceCompatible$8(org.openjdk.tools.javac.code.Type) -> lambda$checkReferenceCompatible$8
    boolean lambda$checkReferenceCompatible$7(org.openjdk.tools.javac.code.Type) -> lambda$checkReferenceCompatible$7
    void lambda$checkReferenceCompatible$6(org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$checkReferenceCompatible$6
    void lambda$checkAccessibleTypes$5(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$checkAccessibleTypes$5
    void lambda$visitLambda$4(org.openjdk.tools.javac.code.Type) -> lambda$visitLambda$4
    boolean lambda$visitLambda$3(org.openjdk.tools.javac.code.Type) -> lambda$visitLambda$3
    void lambda$visitAnonymousClassDefinition$2(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Kinds$KindSelector,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$visitAnonymousClassDefinition$2
    void lambda$visitNewClass$1(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$visitNewClass$1
    void lambda$check$0(org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Kinds$KindSelector,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$check$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Attr$1 -> org.openjdk.tools.javac.comp.Attr$1:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Check$CheckContext) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
org.openjdk.tools.javac.comp.Attr$10 -> org.openjdk.tools.javac.comp.Attr$10:
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    int[] $SwitchMap$com$sun$tools$javac$code$Kinds$Kind -> $SwitchMap$com$sun$tools$javac$code$Kinds$Kind
    int[] $SwitchMap$com$sun$source$tree$MemberReferenceTree$ReferenceMode -> $SwitchMap$com$sun$source$tree$MemberReferenceTree$ReferenceMode
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Attr$2 -> org.openjdk.tools.javac.comp.Attr$2:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr) -> <init>
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
org.openjdk.tools.javac.comp.Attr$3 -> org.openjdk.tools.javac.comp.Attr$3:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Check$CheckContext) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
org.openjdk.tools.javac.comp.Attr$4 -> org.openjdk.tools.javac.comp.Attr$4:
    org.openjdk.tools.javac.tree.JCTree$JCNewClass val$clazz -> val$clazz
    org.openjdk.tools.javac.code.Symbol$TypeSymbol val$tsym -> val$tsym
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Check$CheckContext,org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
org.openjdk.tools.javac.comp.Attr$5 -> org.openjdk.tools.javac.comp.Attr$5:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
org.openjdk.tools.javac.comp.Attr$6 -> org.openjdk.tools.javac.comp.Attr$6:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr) -> <init>
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> visitClassType
    org.openjdk.tools.javac.code.Type visitIntersectionClassType(org.openjdk.tools.javac.code.Type$IntersectionClassType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> visitIntersectionClassType
    org.openjdk.tools.javac.code.Symbol$TypeSymbol makeNotionalInterface(org.openjdk.tools.javac.code.Type$IntersectionClassType) -> makeNotionalInterface
    void reportIntersectionError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> reportIntersectionError
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
org.openjdk.tools.javac.comp.Attr$7 -> org.openjdk.tools.javac.comp.Attr$7:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Check$CheckContext) -> <init>
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
org.openjdk.tools.javac.comp.Attr$8 -> org.openjdk.tools.javac.comp.Attr$8:
    org.openjdk.tools.javac.code.Symbol val$sym -> val$sym
    org.openjdk.tools.javac.util.JCDiagnostic val$diag -> val$diag
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> <init>
    org.openjdk.tools.javac.util.Pair errCandidate() -> errCandidate
org.openjdk.tools.javac.comp.Attr$9 -> org.openjdk.tools.javac.comp.Attr$9:
    org.openjdk.tools.javac.code.Symbol packge -> packge
    org.openjdk.tools.javac.code.Symbol val$pkg -> val$pkg
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.code.Symbol) -> <init>
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
org.openjdk.tools.javac.comp.Attr$BreakAttr -> org.openjdk.tools.javac.comp.Attr$BreakAttr:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.comp.Env env -> env
    void <init>(org.openjdk.tools.javac.comp.Env) -> <init>
    org.openjdk.tools.javac.comp.Env access$100(org.openjdk.tools.javac.comp.Attr$BreakAttr) -> access$100
    void <init>(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$1) -> <init>
org.openjdk.tools.javac.comp.Attr$CheckMode -> org.openjdk.tools.javac.comp.Attr$CheckMode:
    org.openjdk.tools.javac.comp.Attr$CheckMode NORMAL -> NORMAL
    org.openjdk.tools.javac.comp.Attr$CheckMode NO_TREE_UPDATE -> NO_TREE_UPDATE
    org.openjdk.tools.javac.comp.Attr$CheckMode NO_INFERENCE_HOOK -> NO_INFERENCE_HOOK
    org.openjdk.tools.javac.comp.Attr$CheckMode[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Attr$CheckMode[] values() -> values
    org.openjdk.tools.javac.comp.Attr$CheckMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean updateTreeType() -> updateTreeType
    boolean installPostInferenceHook() -> installPostInferenceHook
    void <init>(java.lang.String,int,org.openjdk.tools.javac.comp.Attr$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Attr$CheckMode$1 -> org.openjdk.tools.javac.comp.Attr$CheckMode$1:
    void <init>(java.lang.String,int) -> <init>
    boolean updateTreeType() -> updateTreeType
org.openjdk.tools.javac.comp.Attr$CheckMode$2 -> org.openjdk.tools.javac.comp.Attr$CheckMode$2:
    void <init>(java.lang.String,int) -> <init>
    boolean installPostInferenceHook() -> installPostInferenceHook
org.openjdk.tools.javac.comp.Attr$ExpressionLambdaReturnContext -> org.openjdk.tools.javac.comp.Attr$ExpressionLambdaReturnContext:
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    boolean expStmtExpected -> expStmtExpected
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Check$CheckContext) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
org.openjdk.tools.javac.comp.Attr$FunctionalReturnContext -> org.openjdk.tools.javac.comp.Attr$FunctionalReturnContext:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Check$CheckContext) -> <init>
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
org.openjdk.tools.javac.comp.Attr$IdentAttributer -> org.openjdk.tools.javac.comp.Attr$IdentAttributer:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr) -> <init>
    org.openjdk.tools.javac.code.Symbol visitMemberSelect(org.openjdk.source.tree.MemberSelectTree,org.openjdk.tools.javac.comp.Env) -> visitMemberSelect
    org.openjdk.tools.javac.code.Symbol visitIdentifier(org.openjdk.source.tree.IdentifierTree,org.openjdk.tools.javac.comp.Env) -> visitIdentifier
    java.lang.Object visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitMemberSelect(org.openjdk.source.tree.MemberSelectTree,java.lang.Object) -> visitMemberSelect
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Attr$1) -> <init>
org.openjdk.tools.javac.comp.Attr$MethodAttrInfo -> org.openjdk.tools.javac.comp.Attr$MethodAttrInfo:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.Check$CheckContext) -> <init>
    boolean needsArgumentAttr(org.openjdk.tools.javac.tree.JCTree) -> needsArgumentAttr
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.code.Type) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.comp.Check$CheckContext) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext,org.openjdk.tools.javac.comp.Attr$CheckMode) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.comp.Attr$CheckMode) -> dup
org.openjdk.tools.javac.comp.Attr$PostAttrAnalyzer -> org.openjdk.tools.javac.comp.Attr$PostAttrAnalyzer:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr) -> <init>
    void initTypeIfNeeded(org.openjdk.tools.javac.tree.JCTree) -> initTypeIfNeeded
    org.openjdk.tools.javac.code.Type dummyMethodType(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> dummyMethodType
    org.openjdk.tools.javac.code.Type dummyMethodType() -> dummyMethodType
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
org.openjdk.tools.javac.comp.Attr$RecoveryInfo -> org.openjdk.tools.javac.comp.Attr$RecoveryInfo:
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> <init>
org.openjdk.tools.javac.comp.Attr$RecoveryInfo$1 -> org.openjdk.tools.javac.comp.Attr$RecoveryInfo$1:
    org.openjdk.tools.javac.comp.Attr val$this$0 -> val$this$0
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext val$deferredAttrContext -> val$deferredAttrContext
    void <init>(org.openjdk.tools.javac.comp.Check$CheckContext,org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> <init>
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext deferredAttrContext() -> deferredAttrContext
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
org.openjdk.tools.javac.comp.Attr$ResultInfo -> org.openjdk.tools.javac.comp.Attr$ResultInfo:
    org.openjdk.tools.javac.code.Kinds$KindSelector pkind -> pkind
    org.openjdk.tools.javac.code.Type pt -> pt
    org.openjdk.tools.javac.comp.Check$CheckContext checkContext -> checkContext
    org.openjdk.tools.javac.comp.Attr$CheckMode checkMode -> checkMode
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.code.Kinds$KindSelector,org.openjdk.tools.javac.code.Type) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.code.Kinds$KindSelector,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Attr$CheckMode) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.code.Kinds$KindSelector,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.code.Kinds$KindSelector,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext,org.openjdk.tools.javac.comp.Attr$CheckMode) -> <init>
    boolean needsArgumentAttr(org.openjdk.tools.javac.tree.JCTree) -> needsArgumentAttr
    org.openjdk.tools.javac.code.Type check(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> check
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.code.Type) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.comp.Check$CheckContext) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext,org.openjdk.tools.javac.comp.Attr$CheckMode) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.comp.Attr$CheckMode) -> dup
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Attr$TargetInfo -> org.openjdk.tools.javac.comp.Attr$TargetInfo:
    org.openjdk.tools.javac.code.Type target -> target
    org.openjdk.tools.javac.code.Type descriptor -> descriptor
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> <init>
org.openjdk.tools.javac.comp.Attr$TypeAnnotationsValidator -> org.openjdk.tools.javac.comp.Attr$TypeAnnotationsValidator:
    boolean sigOnly -> sigOnly
    org.openjdk.tools.javac.comp.Attr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Attr,boolean) -> <init>
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitTypeTest(org.openjdk.tools.javac.tree.JCTree$JCInstanceOf) -> visitTypeTest
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void validateAnnotatedType(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> validateAnnotatedType
    void checkForDeclarationAnnotations(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol) -> checkForDeclarationAnnotations
org.openjdk.tools.javac.comp.AttrContext -> org.openjdk.tools.javac.comp.AttrContext:
    org.openjdk.tools.javac.code.Scope$WriteableScope scope -> scope
    int staticLevel -> staticLevel
    boolean isSelfCall -> isSelfCall
    boolean selectSuper -> selectSuper
    boolean isSerializable -> isSerializable
    boolean isLambda -> isLambda
    boolean isSpeculative -> isSpeculative
    boolean isAnonymousDiamond -> isAnonymousDiamond
    boolean isNewClass -> isNewClass
    boolean visitingServiceImplementation -> visitingServiceImplementation
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase pendingResolutionPhase -> pendingResolutionPhase
    org.openjdk.tools.javac.code.Lint lint -> lint
    org.openjdk.tools.javac.code.Symbol enclVar -> enclVar
    org.openjdk.tools.javac.comp.Attr$ResultInfo returnResult -> returnResult
    org.openjdk.tools.javac.code.Type defaultSuperCallSite -> defaultSuperCallSite
    org.openjdk.tools.javac.tree.JCTree preferredTreeForDiagnostics -> preferredTreeForDiagnostics
    void <init>() -> <init>
    org.openjdk.tools.javac.comp.AttrContext dup(org.openjdk.tools.javac.code.Scope$WriteableScope) -> dup
    org.openjdk.tools.javac.comp.AttrContext dup() -> dup
    java.lang.Iterable getLocalElements() -> getLocalElements
    boolean lastResolveVarargs() -> lastResolveVarargs
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.AttrContextEnv -> org.openjdk.tools.javac.comp.AttrContextEnv:
    void <init>(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.AttrContext) -> <init>
org.openjdk.tools.javac.comp.Check -> org.openjdk.tools.javac.comp.Check:
    org.openjdk.tools.javac.util.Context$Key checkKey -> checkKey
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.comp.Resolve rs -> rs
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.comp.DeferredAttr deferredAttr -> deferredAttr
    org.openjdk.tools.javac.comp.Infer infer -> infer
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.code.TypeAnnotations typeAnnotations -> typeAnnotations
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.code.Source source -> source
    org.openjdk.tools.javac.jvm.Profile profile -> profile
    boolean warnOnAnyAccessToMembers -> warnOnAnyAccessToMembers
    org.openjdk.tools.javac.code.Lint lint -> lint
    org.openjdk.tools.javac.code.Symbol$MethodSymbol method -> method
    boolean allowSimplifiedVarargs -> allowSimplifiedVarargs
    boolean allowDefaultMethods -> allowDefaultMethods
    boolean allowStrictMethodClashCheck -> allowStrictMethodClashCheck
    boolean allowPrivateSafeVarargs -> allowPrivateSafeVarargs
    boolean allowDiamondWithAnonymousClassCreation -> allowDiamondWithAnonymousClassCreation
    char syntheticNameChar -> syntheticNameChar
    java.util.Map compiled -> compiled
    org.openjdk.tools.javac.util.MandatoryWarningHandler deprecationHandler -> deprecationHandler
    org.openjdk.tools.javac.util.MandatoryWarningHandler removalHandler -> removalHandler
    org.openjdk.tools.javac.util.MandatoryWarningHandler uncheckedHandler -> uncheckedHandler
    org.openjdk.tools.javac.util.MandatoryWarningHandler sunApiHandler -> sunApiHandler
    org.openjdk.tools.javac.code.DeferredLintHandler deferredLintHandler -> deferredLintHandler
    java.util.Map localClassNameIndexes -> localClassNameIndexes
    org.openjdk.tools.javac.comp.Check$CheckContext basicHandler -> basicHandler
    boolean ignoreAnnotatedCasts -> ignoreAnnotatedCasts
    org.openjdk.tools.javac.code.Types$SimpleVisitor diamondTypeChecker -> diamondTypeChecker
    org.openjdk.tools.javac.code.Types$UnaryVisitor isTypeArgErroneous -> isTypeArgErroneous
    org.openjdk.tools.javac.util.Warner overrideWarner -> overrideWarner
    org.openjdk.tools.javac.util.Filter equalsHasCodeFilter -> equalsHasCodeFilter
    java.util.Set defaultTargets -> defaultTargets
    org.openjdk.tools.javac.util.Name[] dfltTargetMeta -> dfltTargetMeta
    org.openjdk.tools.javac.comp.Check instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.code.Lint setLint(org.openjdk.tools.javac.code.Lint) -> setLint
    org.openjdk.tools.javac.code.Symbol$MethodSymbol setMethod(org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> setMethod
    void warnDeprecated(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> warnDeprecated
    void warnUnchecked(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> warnUnchecked
    void warnUnsafeVararg(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> warnUnsafeVararg
    void warnStatic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> warnStatic
    void warnDivZero(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> warnDivZero
    void reportDeferredDiagnostics() -> reportDeferredDiagnostics
    org.openjdk.tools.javac.code.Type completionError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$CompletionFailure) -> completionError
    org.openjdk.tools.javac.code.Type typeTagError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.Object,java.lang.Object) -> typeTagError
    void earlyRefError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> earlyRefError
    void duplicateError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> duplicateError
    void varargsDuplicateError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> varargsDuplicateError
    void checkTransparentVar(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$VarSymbol,org.openjdk.tools.javac.code.Scope) -> checkTransparentVar
    void checkTransparentClass(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Scope) -> checkTransparentClass
    boolean checkUniqueClassName(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Scope) -> checkUniqueClassName
    org.openjdk.tools.javac.util.Name localClassName(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> localClassName
    void clearLocalClassNameIndexes(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> clearLocalClassNameIndexes
    void newRound() -> newRound
    void putCompiled(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> putCompiled
    org.openjdk.tools.javac.code.Symbol$ClassSymbol getCompiled(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> getCompiled
    org.openjdk.tools.javac.code.Symbol$ClassSymbol getCompiled(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> getCompiled
    void removeCompiled(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> removeCompiled
    org.openjdk.tools.javac.code.Type checkType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> checkType
    org.openjdk.tools.javac.code.Type checkType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext) -> checkType
    org.openjdk.tools.javac.code.Type checkCastable(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> checkCastable
    org.openjdk.tools.javac.code.Type checkCastable(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext) -> checkCastable
    void checkRedundantCast(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> checkRedundantCast
    boolean is292targetTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> is292targetTypeCast
    boolean checkExtends(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> checkExtends
    org.openjdk.tools.javac.code.Type checkNonVoid(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkNonVoid
    org.openjdk.tools.javac.code.Type checkClassOrArrayType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkClassOrArrayType
    org.openjdk.tools.javac.code.Type checkClassType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkClassType
    java.lang.Object asTypeParam(org.openjdk.tools.javac.code.Type) -> asTypeParam
    org.openjdk.tools.javac.code.Type checkConstructorRefType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkConstructorRefType
    org.openjdk.tools.javac.code.Type checkClassType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,boolean) -> checkClassType
    org.openjdk.tools.javac.code.Type checkRefType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkRefType
    org.openjdk.tools.javac.util.List checkRefTypes(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> checkRefTypes
    org.openjdk.tools.javac.code.Type checkNullOrRefType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkNullOrRefType
    boolean checkDisjoint(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,long,long,long) -> checkDisjoint
    org.openjdk.tools.javac.code.Type checkDiamond(org.openjdk.tools.javac.tree.JCTree$JCNewClass,org.openjdk.tools.javac.code.Type) -> checkDiamond
    org.openjdk.tools.javac.util.List checkDiamondDenotable(org.openjdk.tools.javac.code.Type$ClassType) -> checkDiamondDenotable
    void checkVarargsMethodDecl(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> checkVarargsMethodDecl
    boolean isTrustMeAllowedOnMethod(org.openjdk.tools.javac.code.Symbol) -> isTrustMeAllowedOnMethod
    org.openjdk.tools.javac.code.Type checkMethod(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean,org.openjdk.tools.javac.comp.InferenceContext) -> checkMethod
    void assertConvertible(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> assertConvertible
    boolean checkValidGenericType(org.openjdk.tools.javac.code.Type) -> checkValidGenericType
    org.openjdk.tools.javac.code.Type firstIncompatibleTypeArg(org.openjdk.tools.javac.code.Type) -> firstIncompatibleTypeArg
    boolean isTypeArgErroneous(org.openjdk.tools.javac.code.Type) -> isTypeArgErroneous
    long checkFlags(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,long,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree) -> checkFlags
    long implicitEnumFinalFlag(org.openjdk.tools.javac.tree.JCTree) -> implicitEnumFinalFlag
    void validate(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> validate
    void validate(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,boolean) -> validate
    void validate(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> validate
    void checkRaw(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> checkRaw
    boolean withinAnonConstr(org.openjdk.tools.javac.comp.Env) -> withinAnonConstr
    boolean subset(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> subset
    boolean intersects(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> intersects
    org.openjdk.tools.javac.util.List incl(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> incl
    org.openjdk.tools.javac.util.List excl(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> excl
    org.openjdk.tools.javac.util.List union(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> union
    org.openjdk.tools.javac.util.List diff(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> diff
    org.openjdk.tools.javac.util.List intersect(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> intersect
    boolean isUnchecked(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> isUnchecked
    boolean isUnchecked(org.openjdk.tools.javac.code.Type) -> isUnchecked
    boolean isUnchecked(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> isUnchecked
    boolean isHandled(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> isHandled
    org.openjdk.tools.javac.util.List unhandled(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> unhandled
    int protection(long) -> protection
    java.lang.Object cannotOverride(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> cannotOverride
    java.lang.Object uncheckedOverrides(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> uncheckedOverrides
    java.lang.Object varargsOverrides(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> varargsOverrides
    void checkOverride(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> checkOverride
    boolean isDeprecatedOverrideIgnorable(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> isDeprecatedOverrideIgnorable
    void checkCompatibleConcretes(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkCompatibleConcretes
    boolean checkCompatibleAbstracts(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> checkCompatibleAbstracts
    org.openjdk.tools.javac.code.Symbol firstIncompatibility(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> firstIncompatibility
    void closure(org.openjdk.tools.javac.code.Type,java.util.Map) -> closure
    void closure(org.openjdk.tools.javac.code.Type,java.util.Map,java.util.Map) -> closure
    org.openjdk.tools.javac.code.Symbol firstDirectIncompatibility(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> firstDirectIncompatibility
    boolean checkCommonOverriderIn(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> checkCommonOverriderIn
    void checkOverride(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCMethodDecl,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> checkOverride
    void checkOverride(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> checkOverride
    void checkClassOverrideEqualsAndHashIfNeeded(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> checkClassOverrideEqualsAndHashIfNeeded
    void checkClassOverrideEqualsAndHash(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> checkClassOverrideEqualsAndHash
    void checkModuleName(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> checkModuleName
    boolean checkNameClash(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> checkNameClash
    void checkAllDefined(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> checkAllDefined
    void checkNonCyclicDecl(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> checkNonCyclicDecl
    void checkNonCyclic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkNonCyclic
    void checkNonCyclic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type$TypeVar) -> checkNonCyclic
    void checkNonCyclic1(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> checkNonCyclic1
    boolean checkNonCyclicInternal(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkNonCyclicInternal
    void noteCyclic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> noteCyclic
    void checkImplementations(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> checkImplementations
    void checkImplementations(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> checkImplementations
    void checkCompatibleSupertypes(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkCompatibleSupertypes
    void checkConflicts(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> checkConflicts
    void checkOverrideClashes(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> checkOverrideClashes
    void checkHideClashes(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> checkHideClashes
    void checkDefaultMethodClashes(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkDefaultMethodClashes
    void checkPotentiallyAmbiguousOverloads(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> checkPotentiallyAmbiguousOverloads
    void checkAccessFromSerializableElement(org.openjdk.tools.javac.tree.JCTree,boolean) -> checkAccessFromSerializableElement
    boolean isEffectivelyNonPublic(org.openjdk.tools.javac.code.Symbol) -> isEffectivelyNonPublic
    boolean belongsToRestrictedPackage(org.openjdk.tools.javac.code.Symbol) -> belongsToRestrictedPackage
    void syntheticError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> syntheticError
    void checkClassBounds(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkClassBounds
    void checkClassBounds(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.util.Map,org.openjdk.tools.javac.code.Type) -> checkClassBounds
    void checkNotRepeated(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,java.util.Set) -> checkNotRepeated
    void validateAnnotationTree(org.openjdk.tools.javac.tree.JCTree) -> validateAnnotationTree
    void validateAnnotationType(org.openjdk.tools.javac.tree.JCTree) -> validateAnnotationType
    void validateAnnotationType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> validateAnnotationType
    void validateAnnotationMethod(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> validateAnnotationMethod
    void validateAnnotations(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol) -> validateAnnotations
    void validateTypeAnnotations(org.openjdk.tools.javac.util.List,boolean) -> validateTypeAnnotations
    void validateAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation,org.openjdk.tools.javac.code.Symbol) -> validateAnnotation
    void validateTypeAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation,boolean) -> validateTypeAnnotation
    void validateRepeatable(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Attribute$Compound,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> validateRepeatable
    void validateValue(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> validateValue
    void validateRetention(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> validateRetention
    void validateDocumented(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> validateDocumented
    void validateInherited(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> validateInherited
    void validateTarget(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> validateTarget
    java.util.Set getDefaultTargetSet() -> getDefaultTargetSet
    boolean isTargetSubsetOf(java.util.Set,java.util.Set) -> isTargetSubsetOf
    void validateDefault(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> validateDefault
    boolean isOverrider(org.openjdk.tools.javac.code.Symbol) -> isOverrider
    boolean isTypeAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation,boolean) -> isTypeAnnotation
    boolean isTypeAnnotation(org.openjdk.tools.javac.code.Attribute,boolean) -> isTypeAnnotation
    boolean annotationApplicable(org.openjdk.tools.javac.tree.JCTree$JCAnnotation,org.openjdk.tools.javac.code.Symbol) -> annotationApplicable
    org.openjdk.tools.javac.code.Attribute$Array getAttributeTargetAttribute(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> getAttributeTargetAttribute
    org.openjdk.tools.javac.util.Name[] defaultTargetMetaInfo(org.openjdk.tools.javac.tree.JCTree$JCAnnotation,org.openjdk.tools.javac.code.Symbol) -> defaultTargetMetaInfo
    boolean validateAnnotationDeferErrors(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> validateAnnotationDeferErrors
    boolean validateAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> validateAnnotation
    boolean validateTargetAnnotationValue(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> validateTargetAnnotationValue
    void checkDeprecatedAnnotation(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> checkDeprecatedAnnotation
    void checkDeprecated(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> checkDeprecated
    void checkSunAPI(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> checkSunAPI
    void checkProfile(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> checkProfile
    void checkNonCyclicElements(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> checkNonCyclicElements
    void checkNonCyclicElementsInternal(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> checkNonCyclicElementsInternal
    void checkAnnotationResType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkAnnotationResType
    void checkCyclicConstructors(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> checkCyclicConstructors
    void checkCyclicConstructor(org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.code.Symbol,java.util.Map) -> checkCyclicConstructor
    void checkDivZero(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> checkDivZero
    void checkEmptyIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> checkEmptyIf
    boolean checkUnique(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope) -> checkUnique
    void duplicateErasureError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> duplicateErasureError
    void checkImportsUnique(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> checkImportsUnique
    boolean checkUniqueImport(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Symbol,boolean) -> checkUniqueImport
    void checkCanonical(org.openjdk.tools.javac.tree.JCTree) -> checkCanonical
    boolean isCanonical(org.openjdk.tools.javac.tree.JCTree) -> isCanonical
    void checkForBadAuxiliaryClassAccess(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> checkForBadAuxiliaryClassAccess
    org.openjdk.tools.javac.util.Warner castWarner(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> castWarner
    org.openjdk.tools.javac.util.Warner convertWarner(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> convertWarner
    void checkFunctionalInterface(org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> checkFunctionalInterface
    void checkImportsResolvable(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> checkImportsResolvable
    void checkImportedPackagesObservable(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> checkImportedPackagesObservable
    boolean checkTypeContainsImportableElement(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.tools.javac.util.Name,java.util.Set) -> checkTypeContainsImportableElement
    boolean importAccessible(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> importAccessible
    void checkLeaksNotAccessible(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> checkLeaksNotAccessible
    org.openjdk.tools.javac.code.Directive$ExportsDirective findExport(org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> findExport
    boolean isAPISymbol(org.openjdk.tools.javac.code.Symbol) -> isAPISymbol
    void checkVisible(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$PackageSymbol,boolean) -> checkVisible
    void checkModuleExists(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> checkModuleExists
    void checkPackageExistsForOpens(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> checkPackageExistsForOpens
    void checkModuleRequires(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Directive$RequiresDirective) -> checkModuleRequires
    void lambda$checkModuleRequires$12(org.openjdk.tools.javac.code.Directive$RequiresDirective,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> lambda$checkModuleRequires$12
    void lambda$checkPackageExistsForOpens$11(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> lambda$checkPackageExistsForOpens$11
    void lambda$checkModuleExists$10(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$checkModuleExists$10
    boolean lambda$checkUniqueImport$9(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> lambda$checkUniqueImport$9
    boolean lambda$checkImportsUnique$8(org.openjdk.tools.javac.code.Symbol) -> lambda$checkImportsUnique$8
    void lambda$checkDivZero$7(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> lambda$checkDivZero$7
    void lambda$checkSunAPI$6(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> lambda$checkSunAPI$6
    void lambda$checkDeprecated$5(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> lambda$checkDeprecated$5
    boolean lambda$isTypeAnnotation$4(boolean,org.openjdk.tools.javac.code.Attribute) -> lambda$isTypeAnnotation$4
    boolean lambda$new$3(org.openjdk.tools.javac.code.Symbol) -> lambda$new$3
    void lambda$checkMethod$2(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$checkMethod$2
    void lambda$checkRedundantCast$1(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> lambda$checkRedundantCast$1
    void lambda$checkType$0(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$checkType$0
    org.openjdk.tools.javac.util.Log access$000(org.openjdk.tools.javac.comp.Check) -> access$000
    org.openjdk.tools.javac.code.Types access$100(org.openjdk.tools.javac.comp.Check) -> access$100
    org.openjdk.tools.javac.comp.Infer access$200(org.openjdk.tools.javac.comp.Check) -> access$200
    org.openjdk.tools.javac.comp.DeferredAttr access$300(org.openjdk.tools.javac.comp.Check) -> access$300
    org.openjdk.tools.javac.code.Type access$400(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.code.Type) -> access$400
    org.openjdk.tools.javac.util.Names access$500(org.openjdk.tools.javac.comp.Check) -> access$500
    org.openjdk.tools.javac.comp.Enter access$600(org.openjdk.tools.javac.comp.Check) -> access$600
    void access$700(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> access$700
    boolean access$800(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> access$800
    org.openjdk.tools.javac.util.JCDiagnostic$Factory access$900(org.openjdk.tools.javac.comp.Check) -> access$900
    org.openjdk.tools.javac.code.Symbol$MethodSymbol access$1000(org.openjdk.tools.javac.comp.Check) -> access$1000
    org.openjdk.tools.javac.code.Symtab access$1100(org.openjdk.tools.javac.comp.Check) -> access$1100
    boolean access$1200(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.code.Symbol) -> access$1200
    boolean access$1300(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.code.Symbol) -> access$1300
    void access$1400(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$PackageSymbol,boolean) -> access$1400
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Check$1 -> org.openjdk.tools.javac.comp.Check$1:
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
    org.openjdk.tools.javac.util.Warner checkWarner(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> checkWarner
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext() -> inferenceContext
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext deferredAttrContext() -> deferredAttrContext
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Check$1AnnotationValidator -> org.openjdk.tools.javac.comp.Check$1AnnotationValidator:
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check) -> <init>
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
org.openjdk.tools.javac.comp.Check$1SpecialTreeVisitor -> org.openjdk.tools.javac.comp.Check$1SpecialTreeVisitor:
    boolean specialized -> specialized
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check) -> <init>
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
org.openjdk.tools.javac.comp.Check$2 -> org.openjdk.tools.javac.comp.Check$2:
    void <init>() -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    java.lang.Boolean visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    java.lang.Boolean visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Boolean visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Void) -> visitCapturedType
    java.lang.Boolean visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Void) -> visitArrayType
    java.lang.Boolean visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Void) -> visitWildcardType
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.comp.Check$3 -> org.openjdk.tools.javac.comp.Check$3:
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check) -> <init>
    java.lang.Boolean visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    java.lang.Boolean visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Boolean visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Void) -> visitCapturedType
    java.lang.Boolean visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Void) -> visitWildcardType
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.comp.Check$4 -> org.openjdk.tools.javac.comp.Check$4:
    org.openjdk.tools.javac.code.Lint lint -> lint
    boolean inSuperType -> inSuperType
    org.openjdk.tools.javac.comp.Env val$env -> val$env
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl val$check -> val$check
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit val$toplevel -> val$toplevel
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> <init>
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
org.openjdk.tools.javac.comp.Check$5 -> org.openjdk.tools.javac.comp.Check$5:
    int[] $SwitchMap$com$sun$tools$javac$code$Kinds$Kind -> $SwitchMap$com$sun$tools$javac$code$Kinds$Kind
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    int[] $SwitchMap$com$sun$tools$javac$code$Attribute$RetentionPolicy -> $SwitchMap$com$sun$tools$javac$code$Attribute$RetentionPolicy
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    int[] $SwitchMap$com$sun$tools$javac$code$Lint$LintCategory -> $SwitchMap$com$sun$tools$javac$code$Lint$LintCategory
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Check$CheckContext -> org.openjdk.tools.javac.comp.Check$CheckContext:
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
    org.openjdk.tools.javac.util.Warner checkWarner(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> checkWarner
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext() -> inferenceContext
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext deferredAttrContext() -> deferredAttrContext
org.openjdk.tools.javac.comp.Check$ClashFilter -> org.openjdk.tools.javac.comp.Check$ClashFilter:
    org.openjdk.tools.javac.code.Type site -> site
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.code.Type) -> <init>
    boolean shouldSkip(org.openjdk.tools.javac.code.Symbol) -> shouldSkip
    boolean accepts(org.openjdk.tools.javac.code.Symbol) -> accepts
    boolean accepts(java.lang.Object) -> accepts
org.openjdk.tools.javac.comp.Check$ConversionWarner -> org.openjdk.tools.javac.comp.Check$ConversionWarner:
    java.lang.String uncheckedKey -> uncheckedKey
    org.openjdk.tools.javac.code.Type found -> found
    org.openjdk.tools.javac.code.Type expected -> expected
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> <init>
    void warn(org.openjdk.tools.javac.code.Lint$LintCategory) -> warn
org.openjdk.tools.javac.comp.Check$CycleChecker -> org.openjdk.tools.javac.comp.Check$CycleChecker:
    org.openjdk.tools.javac.util.List seenClasses -> seenClasses
    boolean errorFound -> errorFound
    boolean partialCheck -> partialCheck
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check) -> <init>
    void checkSymbol(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> checkSymbol
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void checkClass(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List) -> checkClass
org.openjdk.tools.javac.comp.Check$DefaultMethodClashFilter -> org.openjdk.tools.javac.comp.Check$DefaultMethodClashFilter:
    org.openjdk.tools.javac.code.Type site -> site
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.code.Type) -> <init>
    boolean accepts(org.openjdk.tools.javac.code.Symbol) -> accepts
    boolean accepts(java.lang.Object) -> accepts
org.openjdk.tools.javac.comp.Check$NestedCheckContext -> org.openjdk.tools.javac.comp.Check$NestedCheckContext:
    org.openjdk.tools.javac.comp.Check$CheckContext enclosingContext -> enclosingContext
    void <init>(org.openjdk.tools.javac.comp.Check$CheckContext) -> <init>
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
    org.openjdk.tools.javac.util.Warner checkWarner(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> checkWarner
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext() -> inferenceContext
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext deferredAttrContext() -> deferredAttrContext
org.openjdk.tools.javac.comp.Check$Validator -> org.openjdk.tools.javac.comp.Check$Validator:
    boolean checkRaw -> checkRaw
    boolean isOuter -> isOuter
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.comp.Check this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Check,org.openjdk.tools.javac.comp.Env) -> <init>
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void visitWildcard(org.openjdk.tools.javac.tree.JCTree$JCWildcard) -> visitWildcard
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitSelectInternal(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelectInternal
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitTypeIdent(org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree) -> visitTypeIdent
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    void validateTree(org.openjdk.tools.javac.tree.JCTree,boolean,boolean) -> validateTree
    void validateTrees(org.openjdk.tools.javac.util.List,boolean,boolean) -> validateTrees
org.openjdk.tools.javac.comp.CompileStates -> org.openjdk.tools.javac.comp.CompileStates:
    org.openjdk.tools.javac.util.Context$Key compileStatesKey -> compileStatesKey
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.util.Context context -> context
    org.openjdk.tools.javac.comp.CompileStates instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    boolean isDone(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.CompileStates$CompileState) -> isDone
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.CompileStates$CompileState -> org.openjdk.tools.javac.comp.CompileStates$CompileState:
    org.openjdk.tools.javac.comp.CompileStates$CompileState INIT -> INIT
    org.openjdk.tools.javac.comp.CompileStates$CompileState PARSE -> PARSE
    org.openjdk.tools.javac.comp.CompileStates$CompileState ENTER -> ENTER
    org.openjdk.tools.javac.comp.CompileStates$CompileState PROCESS -> PROCESS
    org.openjdk.tools.javac.comp.CompileStates$CompileState ATTR -> ATTR
    org.openjdk.tools.javac.comp.CompileStates$CompileState FLOW -> FLOW
    org.openjdk.tools.javac.comp.CompileStates$CompileState TRANSTYPES -> TRANSTYPES
    org.openjdk.tools.javac.comp.CompileStates$CompileState UNLAMBDA -> UNLAMBDA
    org.openjdk.tools.javac.comp.CompileStates$CompileState LOWER -> LOWER
    org.openjdk.tools.javac.comp.CompileStates$CompileState GENERATE -> GENERATE
    int value -> value
    org.openjdk.tools.javac.comp.CompileStates$CompileState[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.CompileStates$CompileState[] values() -> values
    org.openjdk.tools.javac.comp.CompileStates$CompileState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    boolean isAfter(org.openjdk.tools.javac.comp.CompileStates$CompileState) -> isAfter
    org.openjdk.tools.javac.comp.CompileStates$CompileState max(org.openjdk.tools.javac.comp.CompileStates$CompileState,org.openjdk.tools.javac.comp.CompileStates$CompileState) -> max
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.ConstFold -> org.openjdk.tools.javac.comp.ConstFold:
    org.openjdk.tools.javac.util.Context$Key constFoldKey -> constFoldKey
    org.openjdk.tools.javac.code.Symtab syms -> syms
    java.lang.Integer minusOne -> minusOne
    java.lang.Integer zero -> zero
    java.lang.Integer one -> one
    org.openjdk.tools.javac.comp.ConstFold instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.lang.Integer b2i(boolean) -> b2i
    int intValue(java.lang.Object) -> intValue
    long longValue(java.lang.Object) -> longValue
    float floatValue(java.lang.Object) -> floatValue
    double doubleValue(java.lang.Object) -> doubleValue
    org.openjdk.tools.javac.code.Type fold(int,org.openjdk.tools.javac.util.List) -> fold
    org.openjdk.tools.javac.code.Type fold1(int,org.openjdk.tools.javac.code.Type) -> fold1
    org.openjdk.tools.javac.code.Type fold2(int,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> fold2
    org.openjdk.tools.javac.code.Type coerce(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> coerce
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.ConstFold$1 -> org.openjdk.tools.javac.comp.ConstFold$1:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.DeferredAttr -> org.openjdk.tools.javac.comp.DeferredAttr:
    org.openjdk.tools.javac.util.Context$Key deferredAttrKey -> deferredAttrKey
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.comp.ArgumentAttr argumentAttr -> argumentAttr
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.comp.Infer infer -> infer
    org.openjdk.tools.javac.comp.Resolve rs -> rs
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.tree.TreeCopier treeCopier -> treeCopier
    org.openjdk.tools.javac.code.Types$TypeMapping deferredCopier -> deferredCopier
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.comp.Flow flow -> flow
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.comp.TypeEnvs typeEnvs -> typeEnvs
    org.openjdk.tools.javac.tree.JCTree stuckTree -> stuckTree
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredTypeCompleter basicCompleter -> basicCompleter
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredStuckPolicy dummyStuckPolicy -> dummyStuckPolicy
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext emptyDeferredAttrContext -> emptyDeferredAttrContext
    org.openjdk.tools.javac.comp.DeferredAttr instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.tree.JCTree$JCLambda attribSpeculativeLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> attribSpeculativeLambda
    org.openjdk.tools.javac.tree.JCTree attribSpeculative(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> attribSpeculative
    org.openjdk.tools.javac.tree.JCTree attribSpeculative(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.ArgumentAttr$LocalCacheContext) -> attribSpeculative
    org.openjdk.tools.javac.tree.JCTree attribSpeculative(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.tree.TreeCopier,java.util.function.Function,org.openjdk.tools.javac.comp.ArgumentAttr$LocalCacheContext) -> attribSpeculative
    org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler lambda$attribSpeculative$3(org.openjdk.tools.javac.tree.JCTree) -> lambda$attribSpeculative$3
    org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler lambda$attribSpeculative$2(org.openjdk.tools.javac.tree.JCTree) -> lambda$attribSpeculative$2
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl lambda$attribSpeculativeLambda$1(org.openjdk.tools.javac.tree.JCTree$JCStatement) -> lambda$attribSpeculativeLambda$1
    boolean lambda$attribSpeculativeLambda$0(org.openjdk.tools.javac.tree.JCTree$JCStatement) -> lambda$attribSpeculativeLambda$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.DeferredAttr$1 -> org.openjdk.tools.javac.comp.DeferredAttr$1:
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.comp.DeferredAttr$AttrMode,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase,org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner) -> <init>
    void addDeferredAttrNode(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredStuckPolicy) -> addDeferredAttrNode
    void complete() -> complete
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.DeferredAttr$2 -> org.openjdk.tools.javac.comp.DeferredAttr$2:
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.tree.TreeMaker) -> <init>
    org.openjdk.tools.javac.tree.JCTree visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Void) -> visitNewClass
    org.openjdk.tools.javac.tree.JCTree visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Void) -> visitMemberReference
    org.openjdk.tools.javac.tree.JCTree visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Object) -> visitMemberReference
    org.openjdk.tools.javac.tree.JCTree visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Object) -> visitNewClass
    java.lang.Object visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Object) -> visitMemberReference
    java.lang.Object visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Object) -> visitNewClass
org.openjdk.tools.javac.comp.DeferredAttr$2$1 -> org.openjdk.tools.javac.comp.DeferredAttr$2$1:
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference val$t -> val$t
    org.openjdk.tools.javac.comp.DeferredAttr$2 this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr$2,org.openjdk.source.tree.MemberReferenceTree$ReferenceMode,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> <init>
    void setOverloadKind(org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind) -> setOverloadKind
org.openjdk.tools.javac.comp.DeferredAttr$3 -> org.openjdk.tools.javac.comp.DeferredAttr$3:
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.comp.DeferredAttr$4 -> org.openjdk.tools.javac.comp.DeferredAttr$4:
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr) -> <init>
    org.openjdk.tools.javac.code.Type complete(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> complete
org.openjdk.tools.javac.comp.DeferredAttr$5 -> org.openjdk.tools.javac.comp.DeferredAttr$5:
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr) -> <init>
    boolean isStuck() -> isStuck
    java.util.Set stuckVars() -> stuckVars
    java.util.Set depVars() -> depVars
org.openjdk.tools.javac.comp.DeferredAttr$6 -> org.openjdk.tools.javac.comp.DeferredAttr$6:
    int[] $SwitchMap$com$sun$tools$javac$comp$DeferredAttr$AttrMode -> $SwitchMap$com$sun$tools$javac$comp$DeferredAttr$AttrMode
    int[] $SwitchMap$com$sun$tools$javac$code$Kinds$Kind -> $SwitchMap$com$sun$tools$javac$code$Kinds$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.DeferredAttr$AttrMode -> org.openjdk.tools.javac.comp.DeferredAttr$AttrMode:
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode SPECULATIVE -> SPECULATIVE
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode CHECK -> CHECK
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode[] values() -> values
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.DeferredAttr$CheckStuckPolicy -> org.openjdk.tools.javac.comp.DeferredAttr$CheckStuckPolicy:
    org.openjdk.tools.javac.code.Type pt -> pt
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext -> inferenceContext
    java.util.Set stuckVars -> stuckVars
    java.util.Set depVars -> depVars
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    boolean isStuck() -> isStuck
    java.util.Set stuckVars() -> stuckVars
    java.util.Set depVars() -> depVars
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredType) -> <init>
    void typesInferred(org.openjdk.tools.javac.comp.InferenceContext) -> typesInferred
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void scanLambdaBody(org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.code.Type) -> scanLambdaBody
org.openjdk.tools.javac.comp.DeferredAttr$CheckStuckPolicy$1 -> org.openjdk.tools.javac.comp.DeferredAttr$CheckStuckPolicy$1:
    org.openjdk.tools.javac.code.Type val$pt -> val$pt
    org.openjdk.tools.javac.comp.DeferredAttr$CheckStuckPolicy this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr$CheckStuckPolicy,org.openjdk.tools.javac.code.Type) -> <init>
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext:
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode mode -> mode
    org.openjdk.tools.javac.code.Symbol msym -> msym
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase phase -> phase
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext -> inferenceContext
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext parent -> parent
    org.openjdk.tools.javac.util.Warner warn -> warn
    java.util.ArrayList deferredAttrNodes -> deferredAttrNodes
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.comp.DeferredAttr$AttrMode,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase,org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner) -> <init>
    void addDeferredAttrNode(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredStuckPolicy) -> addDeferredAttrNode
    void complete() -> complete
    boolean insideOverloadPhase() -> insideOverloadPhase
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode pickDeferredNode() -> pickDeferredNode
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext$StuckNode lambda$pickDeferredNode$0(org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode) -> lambda$pickDeferredNode$0
org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext$StuckNode -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext$StuckNode:
    java.util.Set deps -> deps
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode) -> <init>
    org.openjdk.tools.javac.util.GraphUtils$DependencyKind[] getSupportedDependencyKinds() -> getSupportedDependencyKinds
    java.util.Collection getDependenciesByKind(org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> getDependenciesByKind
    java.lang.Iterable getAllDependencies() -> getAllDependencies
org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrDiagHandler -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrDiagHandler:
    void <init>(org.openjdk.tools.javac.util.Log,org.openjdk.tools.javac.tree.JCTree) -> <init>
    boolean lambda$new$0(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.JCDiagnostic) -> lambda$new$0
org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrDiagHandler$PosScanner -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrDiagHandler$PosScanner:
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition pos -> pos
    boolean found -> found
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode:
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredType dt -> dt
    org.openjdk.tools.javac.comp.Attr$ResultInfo resultInfo -> resultInfo
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredStuckPolicy deferredStuckPolicy -> deferredStuckPolicy
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.comp.DeferredAttr$DeferredType,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredStuckPolicy) -> <init>
    boolean process(org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> process
org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode$1 -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode$1:
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext val$deferredAttrContext -> val$deferredAttrContext
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode,org.openjdk.tools.javac.comp.Check$CheckContext,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> <init>
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext() -> inferenceContext
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext deferredAttrContext() -> deferredAttrContext
org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode$LambdaBodyStructChecker -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode$LambdaBodyStructChecker:
    boolean isVoidCompatible -> isVoidCompatible
    boolean isPotentiallyValueCompatible -> isPotentiallyValueCompatible
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode) -> <init>
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode$StructuralStuckChecker -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode$StructuralStuckChecker:
    org.openjdk.tools.javac.comp.Attr$ResultInfo resultInfo -> resultInfo
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext -> inferenceContext
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrNode) -> <init>
    org.openjdk.tools.javac.code.Type complete(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> complete
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    boolean canLambdaBodyCompleteNormally(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> canLambdaBodyCompleteNormally
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl lambda$canLambdaBodyCompleteNormally$0(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> lambda$canLambdaBodyCompleteNormally$0
org.openjdk.tools.javac.comp.DeferredAttr$DeferredStuckPolicy -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredStuckPolicy:
    boolean isStuck() -> isStuck
    java.util.Set stuckVars() -> stuckVars
    java.util.Set depVars() -> depVars
org.openjdk.tools.javac.comp.DeferredAttr$DeferredType -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredType:
    org.openjdk.tools.javac.tree.JCTree$JCExpression tree -> tree
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode mode -> mode
    boolean pertinentToApplicability -> pertinentToApplicability
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache speculativeCache -> speculativeCache
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Env) -> <init>
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Type speculativeType(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> speculativeType
    org.openjdk.tools.javac.tree.JCTree speculativeTree(org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> speculativeTree
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredTypeCompleter completer() -> completer
    org.openjdk.tools.javac.code.Type check(org.openjdk.tools.javac.comp.Attr$ResultInfo) -> check
    org.openjdk.tools.javac.code.Type check(org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredStuckPolicy,org.openjdk.tools.javac.comp.DeferredAttr$DeferredTypeCompleter) -> check
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type access$000(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredStuckPolicy,org.openjdk.tools.javac.comp.DeferredAttr$DeferredTypeCompleter) -> access$000
org.openjdk.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache:
    java.util.Map cache -> cache
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredType this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType) -> <init>
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache$Entry get(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> get
    void put(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> put
org.openjdk.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache$Entry -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache$Entry:
    org.openjdk.tools.javac.tree.JCTree speculativeTree -> speculativeTree
    org.openjdk.tools.javac.comp.Attr$ResultInfo resultInfo -> resultInfo
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache this$2 -> this$2
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType$SpeculativeCache,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Attr$ResultInfo) -> <init>
    boolean matches(org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> matches
org.openjdk.tools.javac.comp.DeferredAttr$DeferredTypeCompleter -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredTypeCompleter:
    org.openjdk.tools.javac.code.Type complete(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> complete
org.openjdk.tools.javac.comp.DeferredAttr$DeferredTypeMap -> org.openjdk.tools.javac.comp.DeferredAttr$DeferredTypeMap:
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext deferredAttrContext -> deferredAttrContext
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.comp.DeferredAttr$AttrMode,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    org.openjdk.tools.javac.code.Type typeOf(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType) -> typeOf
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.comp.DeferredAttr$FilterScanner -> org.openjdk.tools.javac.comp.DeferredAttr$FilterScanner:
    org.openjdk.tools.javac.util.Filter treeFilter -> treeFilter
    void <init>(java.util.Set) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void skip(org.openjdk.tools.javac.tree.JCTree) -> skip
    boolean lambda$new$0(java.util.Set,org.openjdk.tools.javac.tree.JCTree) -> lambda$new$0
org.openjdk.tools.javac.comp.DeferredAttr$LambdaReturnScanner -> org.openjdk.tools.javac.comp.DeferredAttr$LambdaReturnScanner:
    void <init>() -> <init>
org.openjdk.tools.javac.comp.DeferredAttr$OverloadStuckPolicy -> org.openjdk.tools.javac.comp.DeferredAttr$OverloadStuckPolicy:
    boolean stuck -> stuck
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    boolean isStuck() -> isStuck
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.DeferredAttr$DeferredType) -> <init>
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
org.openjdk.tools.javac.comp.DeferredAttr$PolyScanner -> org.openjdk.tools.javac.comp.DeferredAttr$PolyScanner:
    void <init>() -> <init>
org.openjdk.tools.javac.comp.DeferredAttr$RecoveryDeferredTypeMap -> org.openjdk.tools.javac.comp.DeferredAttr$RecoveryDeferredTypeMap:
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.comp.DeferredAttr$AttrMode,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.code.Type typeOf(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType) -> typeOf
    org.openjdk.tools.javac.code.Type recover(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType) -> recover
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
org.openjdk.tools.javac.comp.DeferredAttr$RecoveryDeferredTypeMap$1 -> org.openjdk.tools.javac.comp.DeferredAttr$RecoveryDeferredTypeMap$1:
    org.openjdk.tools.javac.comp.DeferredAttr$RecoveryDeferredTypeMap this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr$RecoveryDeferredTypeMap,org.openjdk.tools.javac.comp.Attr,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> <init>
    org.openjdk.tools.javac.code.Type check(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> check
org.openjdk.tools.javac.comp.DeferredAttr$UnenterScanner -> org.openjdk.tools.javac.comp.DeferredAttr$UnenterScanner:
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol msym -> msym
    org.openjdk.tools.javac.comp.DeferredAttr this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.DeferredAttr,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> <init>
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
org.openjdk.tools.javac.comp.Enter -> org.openjdk.tools.javac.comp.Enter:
    org.openjdk.tools.javac.util.Context$Key enterKey -> enterKey
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.comp.TypeEnter typeEnter -> typeEnter
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.code.Lint lint -> lint
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.main.Option$PkgInfo pkginfoOpt -> pkginfoOpt
    org.openjdk.tools.javac.comp.TypeEnvs typeEnvs -> typeEnvs
    org.openjdk.tools.javac.comp.Modules modules -> modules
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.comp.Todo todo -> todo
    org.openjdk.tools.javac.util.ListBuffer uncompleted -> uncompleted
    org.openjdk.tools.javac.util.ListBuffer unfinishedModules -> unfinishedModules
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl predefClassDef -> predefClassDef
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.code.Type result -> result
    org.openjdk.tools.javac.comp.Enter instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.comp.Env getEnv(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> getEnv
    java.lang.Iterable getEnvs() -> getEnvs
    org.openjdk.tools.javac.comp.Env getClassEnv(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> getClassEnv
    org.openjdk.tools.javac.comp.Env classEnv(org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.comp.Env) -> classEnv
    org.openjdk.tools.javac.comp.Env topLevelEnv(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> topLevelEnv
    org.openjdk.tools.javac.comp.Env getTopLevelEnv(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> getTopLevelEnv
    org.openjdk.tools.javac.code.Scope$WriteableScope enterScope(org.openjdk.tools.javac.comp.Env) -> enterScope
    org.openjdk.tools.javac.comp.Env moduleEnv(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl,org.openjdk.tools.javac.comp.Env) -> moduleEnv
    org.openjdk.tools.javac.code.Type classEnter(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> classEnter
    org.openjdk.tools.javac.util.List classEnter(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> classEnter
    void visitTopLevel(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> visitTopLevel
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    boolean classNameMatchesFileName(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.comp.Env) -> classNameMatchesFileName
    void duplicateClass(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> duplicateClass
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    void main(org.openjdk.tools.javac.util.List) -> main
    void complete(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> complete
    void newRound() -> newRound
    java.lang.String lambda$visitClassDef$2(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> lambda$visitClassDef$2
    boolean lambda$visitTopLevel$1(java.util.Map,org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$visitTopLevel$1
    boolean lambda$visitTopLevel$0(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$visitTopLevel$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Env -> org.openjdk.tools.javac.comp.Env:
    org.openjdk.tools.javac.comp.Env next -> next
    org.openjdk.tools.javac.comp.Env outer -> outer
    org.openjdk.tools.javac.tree.JCTree tree -> tree
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit toplevel -> toplevel
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl enclClass -> enclClass
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl enclMethod -> enclMethod
    java.lang.Object info -> info
    boolean baseClause -> baseClause
    void <init>(org.openjdk.tools.javac.tree.JCTree,java.lang.Object) -> <init>
    org.openjdk.tools.javac.comp.Env dup(org.openjdk.tools.javac.tree.JCTree,java.lang.Object) -> dup
    org.openjdk.tools.javac.comp.Env dupto(org.openjdk.tools.javac.comp.Env) -> dupto
    org.openjdk.tools.javac.comp.Env dup(org.openjdk.tools.javac.tree.JCTree) -> dup
    org.openjdk.tools.javac.comp.Env enclosing(org.openjdk.tools.javac.tree.JCTree$Tag) -> enclosing
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
org.openjdk.tools.javac.comp.Env$1 -> org.openjdk.tools.javac.comp.Env$1:
    org.openjdk.tools.javac.comp.Env next -> next
    org.openjdk.tools.javac.comp.Env this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Env) -> <init>
    boolean hasNext() -> hasNext
    org.openjdk.tools.javac.comp.Env next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.openjdk.tools.javac.comp.Flow -> org.openjdk.tools.javac.comp.Flow:
    org.openjdk.tools.javac.util.Context$Key flowKey -> flowKey
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.comp.Resolve rs -> rs
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.comp.Env attrEnv -> attrEnv
    org.openjdk.tools.javac.code.Lint lint -> lint
    boolean allowImprovedRethrowAnalysis -> allowImprovedRethrowAnalysis
    boolean allowImprovedCatchAnalysis -> allowImprovedCatchAnalysis
    boolean allowEffectivelyFinalInInnerClasses -> allowEffectivelyFinalInInnerClasses
    boolean enforceThisDotInit -> enforceThisDotInit
    org.openjdk.tools.javac.comp.Flow instance(org.openjdk.tools.javac.util.Context) -> instance
    void analyzeTree(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.TreeMaker) -> analyzeTree
    void analyzeLambda(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.tree.TreeMaker,boolean) -> analyzeLambda
    org.openjdk.tools.javac.util.List analyzeLambdaThrownTypes(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.tree.TreeMaker) -> analyzeLambdaThrownTypes
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.util.Log access$100(org.openjdk.tools.javac.comp.Flow) -> access$100
    org.openjdk.tools.javac.code.Lint access$200(org.openjdk.tools.javac.comp.Flow) -> access$200
    org.openjdk.tools.javac.code.Lint access$202(org.openjdk.tools.javac.comp.Flow,org.openjdk.tools.javac.code.Lint) -> access$202
    org.openjdk.tools.javac.comp.Env access$302(org.openjdk.tools.javac.comp.Flow,org.openjdk.tools.javac.comp.Env) -> access$302
    org.openjdk.tools.javac.tree.TreeMaker access$402(org.openjdk.tools.javac.comp.Flow,org.openjdk.tools.javac.tree.TreeMaker) -> access$402
    org.openjdk.tools.javac.comp.Check access$500(org.openjdk.tools.javac.comp.Flow) -> access$500
    org.openjdk.tools.javac.util.Names access$600(org.openjdk.tools.javac.comp.Flow) -> access$600
    org.openjdk.tools.javac.tree.TreeMaker access$400(org.openjdk.tools.javac.comp.Flow) -> access$400
    org.openjdk.tools.javac.code.Types access$700(org.openjdk.tools.javac.comp.Flow) -> access$700
    org.openjdk.tools.javac.code.Symtab access$800(org.openjdk.tools.javac.comp.Flow) -> access$800
    org.openjdk.tools.javac.comp.Env access$300(org.openjdk.tools.javac.comp.Flow) -> access$300
    org.openjdk.tools.javac.comp.Resolve access$900(org.openjdk.tools.javac.comp.Flow) -> access$900
    boolean access$1000(org.openjdk.tools.javac.comp.Flow) -> access$1000
    boolean access$1100(org.openjdk.tools.javac.comp.Flow) -> access$1100
    boolean access$1200(org.openjdk.tools.javac.comp.Flow) -> access$1200
    boolean access$1300(org.openjdk.tools.javac.comp.Flow) -> access$1300
    org.openjdk.tools.javac.util.JCDiagnostic$Factory access$1400(org.openjdk.tools.javac.comp.Flow) -> access$1400
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Flow$1 -> org.openjdk.tools.javac.comp.Flow$1:
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Flow$AliveAnalyzer -> org.openjdk.tools.javac.comp.Flow$AliveAnalyzer:
    boolean alive -> alive
    org.openjdk.tools.javac.comp.Flow this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Flow) -> <init>
    void markDead() -> markDead
    void scanDef(org.openjdk.tools.javac.tree.JCTree) -> scanDef
    void scanStat(org.openjdk.tools.javac.tree.JCTree) -> scanStat
    void scanStats(org.openjdk.tools.javac.util.List) -> scanStats
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void analyzeTree(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.TreeMaker) -> analyzeTree
    void analyzeTree(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.TreeMaker) -> analyzeTree
org.openjdk.tools.javac.comp.Flow$AssignAnalyzer -> org.openjdk.tools.javac.comp.Flow$AssignAnalyzer:
    org.openjdk.tools.javac.util.Bits inits -> inits
    org.openjdk.tools.javac.util.Bits uninits -> uninits
    org.openjdk.tools.javac.util.Bits uninitsTry -> uninitsTry
    org.openjdk.tools.javac.util.Bits initsWhenTrue -> initsWhenTrue
    org.openjdk.tools.javac.util.Bits initsWhenFalse -> initsWhenFalse
    org.openjdk.tools.javac.util.Bits uninitsWhenTrue -> uninitsWhenTrue
    org.openjdk.tools.javac.util.Bits uninitsWhenFalse -> uninitsWhenFalse
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl[] vardecls -> vardecls
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl classDef -> classDef
    int firstadr -> firstadr
    int nextadr -> nextadr
    int returnadr -> returnadr
    org.openjdk.tools.javac.code.Scope$WriteableScope unrefdResources -> unrefdResources
    org.openjdk.tools.javac.comp.Flow$FlowKind flowKind -> flowKind
    int startPos -> startPos
    boolean isInitialConstructor -> isInitialConstructor
    org.openjdk.tools.javac.comp.Flow this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Flow) -> <init>
    void markDead() -> markDead
    boolean trackable(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> trackable
    boolean isFinalUninitializedField(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> isFinalUninitializedField
    boolean isFinalUninitializedStaticField(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> isFinalUninitializedStaticField
    void newVar(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> newVar
    void letInit(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$VarSymbol) -> letInit
    void uninit(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> uninit
    void letInit(org.openjdk.tools.javac.tree.JCTree) -> letInit
    void checkInit(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$VarSymbol) -> checkInit
    void checkInit(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$VarSymbol,java.lang.String) -> checkInit
    void resetBits(org.openjdk.tools.javac.util.Bits[]) -> resetBits
    void split(boolean) -> split
    void merge() -> merge
    void scanExpr(org.openjdk.tools.javac.tree.JCTree) -> scanExpr
    void scanExprs(org.openjdk.tools.javac.util.List) -> scanExprs
    void scanCond(org.openjdk.tools.javac.tree.JCTree) -> scanCond
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void initParam(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> initParam
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void addVars(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Bits,org.openjdk.tools.javac.util.Bits) -> addVars
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitAssert(org.openjdk.tools.javac.tree.JCTree$JCAssert) -> visitAssert
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    boolean isIdentOrThisDotIdent(org.openjdk.tools.javac.tree.JCTree) -> isIdentOrThisDotIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void referenced(org.openjdk.tools.javac.code.Symbol) -> referenced
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void analyzeTree(org.openjdk.tools.javac.comp.Env) -> analyzeTree
    void analyzeTree(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree) -> analyzeTree
    void visitPackageDef(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> visitPackageDef
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
org.openjdk.tools.javac.comp.Flow$AssignAnalyzer$AssignPendingExit -> org.openjdk.tools.javac.comp.Flow$AssignAnalyzer$AssignPendingExit:
    org.openjdk.tools.javac.util.Bits inits -> inits
    org.openjdk.tools.javac.util.Bits uninits -> uninits
    org.openjdk.tools.javac.util.Bits exit_inits -> exit_inits
    org.openjdk.tools.javac.util.Bits exit_uninits -> exit_uninits
    org.openjdk.tools.javac.comp.Flow$AssignAnalyzer this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.Flow$AssignAnalyzer,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.Bits,org.openjdk.tools.javac.util.Bits) -> <init>
    void resolveJump() -> resolveJump
org.openjdk.tools.javac.comp.Flow$BaseAnalyzer -> org.openjdk.tools.javac.comp.Flow$BaseAnalyzer:
    org.openjdk.tools.javac.util.ListBuffer pendingExits -> pendingExits
    void <init>() -> <init>
    void markDead() -> markDead
    void recordExit(org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$PendingExit) -> recordExit
    boolean resolveJump(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.ListBuffer,org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind) -> resolveJump
    boolean resolveContinues(org.openjdk.tools.javac.tree.JCTree) -> resolveContinues
    boolean resolveBreaks(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.ListBuffer) -> resolveBreaks
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void visitPackageDef(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> visitPackageDef
org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind -> org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind:
    org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind BREAK -> BREAK
    org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind CONTINUE -> CONTINUE
    org.openjdk.tools.javac.tree.JCTree$Tag treeTag -> treeTag
    org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind[] values() -> values
    org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.tree.JCTree getTarget(org.openjdk.tools.javac.tree.JCTree) -> getTarget
    void <init>(java.lang.String,int,org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.comp.Flow$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind$1 -> org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind$1:
    void <init>(java.lang.String,int,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.tree.JCTree getTarget(org.openjdk.tools.javac.tree.JCTree) -> getTarget
org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind$2 -> org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$JumpKind$2:
    void <init>(java.lang.String,int,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.tree.JCTree getTarget(org.openjdk.tools.javac.tree.JCTree) -> getTarget
org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$PendingExit -> org.openjdk.tools.javac.comp.Flow$BaseAnalyzer$PendingExit:
    org.openjdk.tools.javac.tree.JCTree tree -> tree
    void <init>(org.openjdk.tools.javac.tree.JCTree) -> <init>
    void resolveJump() -> resolveJump
org.openjdk.tools.javac.comp.Flow$CaptureAnalyzer -> org.openjdk.tools.javac.comp.Flow$CaptureAnalyzer:
    org.openjdk.tools.javac.tree.JCTree currentTree -> currentTree
    org.openjdk.tools.javac.comp.Flow this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Flow) -> <init>
    void markDead() -> markDead
    void checkEffectivelyFinal(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$VarSymbol) -> checkEffectivelyFinal
    void letInit(org.openjdk.tools.javac.tree.JCTree) -> letInit
    void reportEffectivelyFinalError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> reportEffectivelyFinalError
    void reportInnerClsNeedsFinalError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> reportInnerClsNeedsFinalError
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void analyzeTree(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.TreeMaker) -> analyzeTree
    void analyzeTree(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.TreeMaker) -> analyzeTree
org.openjdk.tools.javac.comp.Flow$FlowAnalyzer -> org.openjdk.tools.javac.comp.Flow$FlowAnalyzer:
    java.util.HashMap preciseRethrowTypes -> preciseRethrowTypes
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl classDef -> classDef
    org.openjdk.tools.javac.util.List thrown -> thrown
    org.openjdk.tools.javac.util.List caught -> caught
    org.openjdk.tools.javac.comp.Flow this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Flow) -> <init>
    void markDead() -> markDead
    void errorUncaught() -> errorUncaught
    void markThrown(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> markThrown
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void checkCaughtType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> checkCaughtType
    boolean isExceptionOrThrowable(org.openjdk.tools.javac.code.Type) -> isExceptionOrThrowable
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void analyzeTree(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.TreeMaker) -> analyzeTree
    void analyzeTree(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.TreeMaker) -> analyzeTree
org.openjdk.tools.javac.comp.Flow$FlowAnalyzer$FlowPendingExit -> org.openjdk.tools.javac.comp.Flow$FlowAnalyzer$FlowPendingExit:
    org.openjdk.tools.javac.code.Type thrown -> thrown
    org.openjdk.tools.javac.comp.Flow$FlowAnalyzer this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.Flow$FlowAnalyzer,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> <init>
org.openjdk.tools.javac.comp.Flow$FlowKind -> org.openjdk.tools.javac.comp.Flow$FlowKind:
    org.openjdk.tools.javac.comp.Flow$FlowKind NORMAL -> NORMAL
    org.openjdk.tools.javac.comp.Flow$FlowKind SPECULATIVE_LOOP -> SPECULATIVE_LOOP
    java.lang.String errKey -> errKey
    boolean isFinal -> isFinal
    org.openjdk.tools.javac.comp.Flow$FlowKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Flow$FlowKind[] values() -> values
    org.openjdk.tools.javac.comp.Flow$FlowKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,boolean) -> <init>
    boolean isFinal() -> isFinal
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Flow$LambdaAliveAnalyzer -> org.openjdk.tools.javac.comp.Flow$LambdaAliveAnalyzer:
    boolean inLambda -> inLambda
    org.openjdk.tools.javac.comp.Flow this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Flow) -> <init>
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
org.openjdk.tools.javac.comp.Flow$LambdaAssignAnalyzer -> org.openjdk.tools.javac.comp.Flow$LambdaAssignAnalyzer:
    org.openjdk.tools.javac.code.Scope$WriteableScope enclosedSymbols -> enclosedSymbols
    boolean inLambda -> inLambda
    org.openjdk.tools.javac.comp.Flow this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Flow,org.openjdk.tools.javac.comp.Env) -> <init>
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    boolean trackable(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> trackable
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
org.openjdk.tools.javac.comp.Flow$LambdaFlowAnalyzer -> org.openjdk.tools.javac.comp.Flow$LambdaFlowAnalyzer:
    org.openjdk.tools.javac.util.List inferredThrownTypes -> inferredThrownTypes
    boolean inLambda -> inLambda
    org.openjdk.tools.javac.comp.Flow this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Flow) -> <init>
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
org.openjdk.tools.javac.comp.Infer -> org.openjdk.tools.javac.comp.Infer:
    org.openjdk.tools.javac.util.Context$Key inferKey -> inferKey
    org.openjdk.tools.javac.comp.Resolve rs -> rs
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.util.Log log -> log
    boolean allowGraphInference -> allowGraphInference
    java.lang.String dependenciesFolder -> dependenciesFolder
    org.openjdk.tools.javac.util.List pendingGraphs -> pendingGraphs
    org.openjdk.tools.javac.code.Type anyPoly -> anyPoly
    org.openjdk.tools.javac.comp.Infer$InferenceException inferenceException -> inferenceException
    org.openjdk.tools.javac.code.Types$TypeMapping fromTypeVarFun -> fromTypeVarFun
    org.openjdk.tools.javac.comp.Infer$AbstractIncorporationEngine legacyEngine -> legacyEngine
    org.openjdk.tools.javac.comp.Infer$AbstractIncorporationEngine graphEngine -> graphEngine
    int MAX_INCORPORATION_STEPS -> MAX_INCORPORATION_STEPS
    java.util.Map incorporationCache -> incorporationCache
    org.openjdk.tools.javac.comp.InferenceContext emptyContext -> emptyContext
    org.openjdk.tools.javac.comp.Infer instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.code.Type instantiateMethod(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.util.List,boolean,boolean,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.util.Warner) -> instantiateMethod
    boolean shouldPropagate(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.InferenceContext) -> shouldPropagate
    org.openjdk.tools.javac.util.List roots(org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> roots
    void dumpGraphsIfNeeded(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext) -> dumpGraphsIfNeeded
    org.openjdk.tools.javac.code.Type generateReturnConstraints(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.comp.InferenceContext) -> generateReturnConstraints
    boolean needsEagerInstantiation(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.InferenceContext) -> needsEagerInstantiation
    boolean commonSuperWithDiffParameterization(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> commonSuperWithDiffParameterization
    org.openjdk.tools.javac.code.Type generateReferenceToTargetConstraint(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.InferenceContext) -> generateReferenceToTargetConstraint
    void instantiateAsUninferredVars(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.InferenceContext) -> instantiateAsUninferredVars
    org.openjdk.tools.javac.code.Type instantiatePolymorphicSignatureInstance(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.util.List) -> instantiatePolymorphicSignatureInstance
    org.openjdk.tools.javac.code.Type instantiateFunctionalInterface(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Check$CheckContext) -> instantiateFunctionalInterface
    org.openjdk.tools.javac.comp.Infer$AbstractIncorporationEngine incorporationEngine() -> incorporationEngine
    void doIncorporation(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.util.Warner) -> doIncorporation
    org.openjdk.tools.javac.util.List getParameterizedSupers(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> getParameterizedSupers
    org.openjdk.tools.javac.code.Type asSuper(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> asSuper
    boolean doIncorporationOp(org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> doIncorporationOp
    void reportInstError(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> reportInstError
    void reportBoundError(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> reportBoundError
    void reportBoundError(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> reportBoundError
    void reportInferenceError(java.lang.String,java.lang.Object[]) -> reportInferenceError
    boolean lambda$instantiateFunctionalInterface$0(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> lambda$instantiateFunctionalInterface$0
    boolean access$000(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.comp.InferenceContext) -> access$000
    org.openjdk.tools.javac.util.List access$100(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext) -> access$100
    org.openjdk.tools.javac.util.List access$200(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> access$200
    java.lang.String access$500(org.openjdk.tools.javac.comp.Infer) -> access$500
    org.openjdk.tools.javac.util.List access$602(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.util.List) -> access$602
    org.openjdk.tools.javac.util.List access$600(org.openjdk.tools.javac.comp.Infer) -> access$600
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Infer$1 -> org.openjdk.tools.javac.comp.Infer$1:
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer) -> <init>
    org.openjdk.tools.javac.code.Type visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
org.openjdk.tools.javac.comp.Infer$2 -> org.openjdk.tools.javac.comp.Infer$2:
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer) -> <init>
    org.openjdk.tools.javac.util.List getIncorporationActions(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type,boolean) -> getIncorporationActions
org.openjdk.tools.javac.comp.Infer$3 -> org.openjdk.tools.javac.comp.Infer$3:
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer) -> <init>
    org.openjdk.tools.javac.util.List getIncorporationActions(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type,boolean) -> getIncorporationActions
org.openjdk.tools.javac.comp.Infer$4 -> org.openjdk.tools.javac.comp.Infer$4:
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Infer$AbstractIncorporationEngine -> org.openjdk.tools.javac.comp.Infer$AbstractIncorporationEngine:
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer) -> <init>
    void varInstantiated(org.openjdk.tools.javac.code.Type$UndetVar) -> varInstantiated
    void varBoundChanged(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type,boolean) -> varBoundChanged
    org.openjdk.tools.javac.util.List getIncorporationActions(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type,boolean) -> getIncorporationActions
org.openjdk.tools.javac.comp.Infer$BestLeafSolver -> org.openjdk.tools.javac.comp.Infer$BestLeafSolver:
    org.openjdk.tools.javac.util.List varsToSolve -> varsToSolve
    java.util.Map treeCache -> treeCache
    org.openjdk.tools.javac.util.Pair noPath -> noPath
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.util.Pair computeTreeToLeafs(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node) -> computeTreeToLeafs
    org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node pickNode(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph) -> pickNode
org.openjdk.tools.javac.comp.Infer$BoundFilter -> org.openjdk.tools.javac.comp.Infer$BoundFilter:
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext -> inferenceContext
    void <init>(org.openjdk.tools.javac.comp.InferenceContext) -> <init>
    boolean accepts(org.openjdk.tools.javac.code.Type) -> accepts
    boolean accepts(java.lang.Object) -> accepts
org.openjdk.tools.javac.comp.Infer$CheckBounds -> org.openjdk.tools.javac.comp.Infer$CheckBounds:
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound from -> from
    java.util.function.BiFunction typeFunc -> typeFunc
    java.util.function.BiPredicate optFilter -> optFilter
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type,java.util.function.BiFunction,java.util.function.BiPredicate,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    org.openjdk.tools.javac.comp.Infer$IncorporationAction dup(org.openjdk.tools.javac.code.Type$UndetVar) -> dup
    void apply(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.util.Warner) -> apply
    java.util.EnumSet boundsToCheck() -> boundsToCheck
    boolean checkBound(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.util.Warner) -> checkBound
    void report(org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> report
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Infer$CheckInst -> org.openjdk.tools.javac.comp.Infer$CheckInst:
    java.util.EnumSet to -> to
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound[]) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$UndetVar,java.util.EnumSet) -> <init>
    org.openjdk.tools.javac.comp.Infer$IncorporationAction dup(org.openjdk.tools.javac.code.Type$UndetVar) -> dup
    java.util.EnumSet boundsToCheck() -> boundsToCheck
    void report(org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> report
org.openjdk.tools.javac.comp.Infer$CheckUpperBounds -> org.openjdk.tools.javac.comp.Infer$CheckUpperBounds:
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type) -> <init>
    org.openjdk.tools.javac.comp.Infer$IncorporationAction dup(org.openjdk.tools.javac.code.Type$UndetVar) -> dup
    void apply(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.util.Warner) -> apply
org.openjdk.tools.javac.comp.Infer$DependencyKind -> org.openjdk.tools.javac.comp.Infer$DependencyKind:
    org.openjdk.tools.javac.comp.Infer$DependencyKind BOUND -> BOUND
    org.openjdk.tools.javac.comp.Infer$DependencyKind STUCK -> STUCK
    java.lang.String dotSyle -> dotSyle
    org.openjdk.tools.javac.comp.Infer$DependencyKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Infer$DependencyKind[] values() -> values
    org.openjdk.tools.javac.comp.Infer$DependencyKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Infer$EqCheckLegacy -> org.openjdk.tools.javac.comp.Infer$EqCheckLegacy:
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    org.openjdk.tools.javac.comp.Infer$IncorporationAction dup(org.openjdk.tools.javac.code.Type$UndetVar) -> dup
    java.util.EnumSet boundsToCheck() -> boundsToCheck
org.openjdk.tools.javac.comp.Infer$FreeTypeListener -> org.openjdk.tools.javac.comp.Infer$FreeTypeListener:
    void typesInferred(org.openjdk.tools.javac.comp.InferenceContext) -> typesInferred
org.openjdk.tools.javac.comp.Infer$GraphInferenceSteps -> org.openjdk.tools.javac.comp.Infer$GraphInferenceSteps:
    org.openjdk.tools.javac.comp.Infer$GraphInferenceSteps EQ -> EQ
    org.openjdk.tools.javac.comp.Infer$GraphInferenceSteps EQ_LOWER -> EQ_LOWER
    org.openjdk.tools.javac.comp.Infer$GraphInferenceSteps EQ_LOWER_THROWS_UPPER_CAPTURED -> EQ_LOWER_THROWS_UPPER_CAPTURED
    java.util.EnumSet steps -> steps
    org.openjdk.tools.javac.comp.Infer$GraphInferenceSteps[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Infer$GraphInferenceSteps[] values() -> values
    org.openjdk.tools.javac.comp.Infer$GraphInferenceSteps valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.util.EnumSet) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Infer$GraphSolver -> org.openjdk.tools.javac.comp.Infer$GraphSolver:
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext -> inferenceContext
    org.openjdk.tools.javac.util.Warner warn -> warn
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.util.Warner) -> <init>
    void solve(org.openjdk.tools.javac.comp.Infer$GraphStrategy) -> solve
org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph -> org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph:
    java.util.ArrayList nodes -> nodes
    org.openjdk.tools.javac.comp.Infer$GraphSolver this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.Infer$GraphSolver) -> <init>
    org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node findNode(org.openjdk.tools.javac.code.Type) -> findNode
    void deleteNode(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node) -> deleteNode
    void notifyUpdate(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node,org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node) -> notifyUpdate
    void initNodes() -> initNodes
    java.lang.String toDot() -> toDot
org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node -> org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node:
    java.util.Set deps -> deps
    org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph this$2 -> this$2
    void <init>(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph,org.openjdk.tools.javac.code.Type) -> <init>
    org.openjdk.tools.javac.util.GraphUtils$DependencyKind[] getSupportedDependencyKinds() -> getSupportedDependencyKinds
    java.lang.Iterable getAllDependencies() -> getAllDependencies
    java.util.Collection getDependenciesByKind(org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> getDependenciesByKind
    void addDependency(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node) -> addDependency
    void addDependencies(java.util.Set) -> addDependencies
    boolean removeDependency(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node) -> removeDependency
    java.util.Set closure() -> closure
    boolean isLeaf() -> isLeaf
    void mergeWith(org.openjdk.tools.javac.util.List) -> mergeWith
    void graphChanged(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node,org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node) -> graphChanged
    java.util.Properties nodeAttributes() -> nodeAttributes
    java.util.Properties dependencyAttributes(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node,org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> dependencyAttributes
    java.util.Properties dependencyAttributes(org.openjdk.tools.javac.util.GraphUtils$DottableNode,org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> dependencyAttributes
    void access$700(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node,org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node,org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node) -> access$700
org.openjdk.tools.javac.comp.Infer$GraphStrategy -> org.openjdk.tools.javac.comp.Infer$GraphStrategy:
    org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node pickNode(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph) -> pickNode
    boolean done() -> done
org.openjdk.tools.javac.comp.Infer$GraphStrategy$NodeNotFoundException -> org.openjdk.tools.javac.comp.Infer$GraphStrategy$NodeNotFoundException:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph graph -> graph
    void <init>(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph) -> <init>
org.openjdk.tools.javac.comp.Infer$ImplicitArgType -> org.openjdk.tools.javac.comp.Infer$ImplicitArgType:
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.comp.Infer$IncorporationAction -> org.openjdk.tools.javac.comp.Infer$IncorporationAction:
    org.openjdk.tools.javac.code.Type$UndetVar uv -> uv
    org.openjdk.tools.javac.code.Type t -> t
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type) -> <init>
    org.openjdk.tools.javac.comp.Infer$IncorporationAction dup(org.openjdk.tools.javac.code.Type$UndetVar) -> dup
    void apply(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.util.Warner) -> apply
    boolean isSubtype(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> isSubtype
    boolean isSameType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isSameType
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOp -> org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOp:
    org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind opKind -> opKind
    org.openjdk.tools.javac.code.Type op1 -> op1
    org.openjdk.tools.javac.code.Type op2 -> op2
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean apply(org.openjdk.tools.javac.util.Warner) -> apply
org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind -> org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind:
    org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind IS_SUBTYPE -> IS_SUBTYPE
    org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind IS_SAME_TYPE -> IS_SAME_TYPE
    org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind[] values() -> values
    org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean apply(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner,org.openjdk.tools.javac.code.Types) -> apply
    void <init>(java.lang.String,int,org.openjdk.tools.javac.comp.Infer$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind$1 -> org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind$1:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner,org.openjdk.tools.javac.code.Types) -> apply
org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind$2 -> org.openjdk.tools.javac.comp.Infer$IncorporationBinaryOpKind$2:
    void <init>(java.lang.String,int) -> <init>
    boolean apply(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner,org.openjdk.tools.javac.code.Types) -> apply
org.openjdk.tools.javac.comp.Infer$InferenceException -> org.openjdk.tools.javac.comp.Infer$InferenceException:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.util.List messages -> messages
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic$Factory) -> <init>
    org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException setMessage() -> setMessage
    org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException setMessage(org.openjdk.tools.javac.util.JCDiagnostic) -> setMessage
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic() -> getDiagnostic
    void clear() -> clear
org.openjdk.tools.javac.comp.Infer$InferenceStep -> org.openjdk.tools.javac.comp.Infer$InferenceStep:
    org.openjdk.tools.javac.comp.Infer$InferenceStep EQ -> EQ
    org.openjdk.tools.javac.comp.Infer$InferenceStep LOWER -> LOWER
    org.openjdk.tools.javac.comp.Infer$InferenceStep THROWS -> THROWS
    org.openjdk.tools.javac.comp.Infer$InferenceStep UPPER -> UPPER
    org.openjdk.tools.javac.comp.Infer$InferenceStep UPPER_LEGACY -> UPPER_LEGACY
    org.openjdk.tools.javac.comp.Infer$InferenceStep CAPTURED -> CAPTURED
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound ib -> ib
    org.openjdk.tools.javac.comp.Infer$InferenceStep[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Infer$InferenceStep[] values() -> values
    org.openjdk.tools.javac.comp.Infer$InferenceStep valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    org.openjdk.tools.javac.code.Type solve(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> solve
    boolean accepts(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> accepts
    org.openjdk.tools.javac.util.List filterBounds(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> filterBounds
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound,org.openjdk.tools.javac.comp.Infer$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Infer$InferenceStep$1 -> org.openjdk.tools.javac.comp.Infer$InferenceStep$1:
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    org.openjdk.tools.javac.code.Type solve(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> solve
org.openjdk.tools.javac.comp.Infer$InferenceStep$2 -> org.openjdk.tools.javac.comp.Infer$InferenceStep$2:
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    org.openjdk.tools.javac.code.Type solve(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> solve
org.openjdk.tools.javac.comp.Infer$InferenceStep$3 -> org.openjdk.tools.javac.comp.Infer$InferenceStep$3:
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    boolean accepts(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> accepts
    org.openjdk.tools.javac.code.Type solve(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> solve
    boolean lambda$accepts$1(org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.code.Type) -> lambda$accepts$1
    boolean lambda$accepts$0(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.code.Type) -> lambda$accepts$0
org.openjdk.tools.javac.comp.Infer$InferenceStep$4 -> org.openjdk.tools.javac.comp.Infer$InferenceStep$4:
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    org.openjdk.tools.javac.code.Type solve(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> solve
org.openjdk.tools.javac.comp.Infer$InferenceStep$5 -> org.openjdk.tools.javac.comp.Infer$InferenceStep$5:
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    boolean accepts(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> accepts
    org.openjdk.tools.javac.code.Type solve(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> solve
org.openjdk.tools.javac.comp.Infer$InferenceStep$6 -> org.openjdk.tools.javac.comp.Infer$InferenceStep$6:
    void <init>(java.lang.String,int,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    boolean accepts(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> accepts
    org.openjdk.tools.javac.code.Type solve(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> solve
org.openjdk.tools.javac.comp.Infer$LeafSolver -> org.openjdk.tools.javac.comp.Infer$LeafSolver:
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer) -> <init>
    org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph$Node pickNode(org.openjdk.tools.javac.comp.Infer$GraphSolver$InferenceGraph) -> pickNode
org.openjdk.tools.javac.comp.Infer$LegacyInferenceSteps -> org.openjdk.tools.javac.comp.Infer$LegacyInferenceSteps:
    org.openjdk.tools.javac.comp.Infer$LegacyInferenceSteps EQ_LOWER -> EQ_LOWER
    org.openjdk.tools.javac.comp.Infer$LegacyInferenceSteps EQ_UPPER -> EQ_UPPER
    java.util.EnumSet steps -> steps
    org.openjdk.tools.javac.comp.Infer$LegacyInferenceSteps[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Infer$LegacyInferenceSteps[] values() -> values
    org.openjdk.tools.javac.comp.Infer$LegacyInferenceSteps valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.util.EnumSet) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Infer$PartiallyInferredMethodType -> org.openjdk.tools.javac.comp.Infer$PartiallyInferredMethodType:
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext -> inferenceContext
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.util.Warner warn -> warn
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Warner) -> <init>
    boolean isPartial() -> isPartial
    org.openjdk.tools.javac.code.Type check(org.openjdk.tools.javac.comp.Attr$ResultInfo) -> check
org.openjdk.tools.javac.comp.Infer$PropagateBounds -> org.openjdk.tools.javac.comp.Infer$PropagateBounds:
    org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound ib -> ib
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> <init>
    org.openjdk.tools.javac.comp.Infer$IncorporationAction dup(org.openjdk.tools.javac.code.Type$UndetVar) -> dup
    void apply(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.util.Warner) -> apply
    java.util.EnumSet forward() -> forward
    java.util.EnumSet backwards() -> backwards
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Infer$SubstBounds -> org.openjdk.tools.javac.comp.Infer$SubstBounds:
    org.openjdk.tools.javac.comp.Infer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.code.Type$UndetVar) -> <init>
    org.openjdk.tools.javac.comp.Infer$IncorporationAction dup(org.openjdk.tools.javac.code.Type$UndetVar) -> dup
    void apply(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.util.Warner) -> apply
    void checkCompatibleUpperBounds(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.comp.InferenceContext) -> checkCompatibleUpperBounds
org.openjdk.tools.javac.comp.InferenceContext -> org.openjdk.tools.javac.comp.InferenceContext:
    org.openjdk.tools.javac.util.List undetvars -> undetvars
    org.openjdk.tools.javac.util.List inferencevars -> inferencevars
    java.util.Map freeTypeListeners -> freeTypeListeners
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.comp.Infer infer -> infer
    java.util.Map captureTypeCache -> captureTypeCache
    org.openjdk.tools.javac.code.Type update(org.openjdk.tools.javac.code.Type) -> update
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.util.List) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    void addVar(org.openjdk.tools.javac.code.Type$TypeVar) -> addVar
    org.openjdk.tools.javac.util.List inferenceVars() -> inferenceVars
    org.openjdk.tools.javac.util.List undetVars() -> undetVars
    org.openjdk.tools.javac.util.List restvars() -> restvars
    org.openjdk.tools.javac.util.List instvars() -> instvars
    org.openjdk.tools.javac.util.List boundedVars() -> boundedVars
    org.openjdk.tools.javac.util.List filterVars(org.openjdk.tools.javac.util.Filter) -> filterVars
    boolean free(org.openjdk.tools.javac.code.Type) -> free
    boolean free(org.openjdk.tools.javac.util.List) -> free
    org.openjdk.tools.javac.util.List freeVarsIn(org.openjdk.tools.javac.code.Type) -> freeVarsIn
    org.openjdk.tools.javac.util.List freeVarsIn(org.openjdk.tools.javac.util.List) -> freeVarsIn
    org.openjdk.tools.javac.code.Type asUndetVar(org.openjdk.tools.javac.code.Type) -> asUndetVar
    org.openjdk.tools.javac.util.List asUndetVars(org.openjdk.tools.javac.util.List) -> asUndetVars
    org.openjdk.tools.javac.util.List instTypes() -> instTypes
    org.openjdk.tools.javac.code.Type asInstType(org.openjdk.tools.javac.code.Type) -> asInstType
    org.openjdk.tools.javac.util.List asInstTypes(org.openjdk.tools.javac.util.List) -> asInstTypes
    void addFreeTypeListener(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Infer$FreeTypeListener) -> addFreeTypeListener
    void notifyChange() -> notifyChange
    void notifyChange(org.openjdk.tools.javac.util.List) -> notifyChange
    org.openjdk.tools.javac.util.List save() -> save
    void rollback(org.openjdk.tools.javac.util.List) -> rollback
    void dupTo(org.openjdk.tools.javac.comp.InferenceContext) -> dupTo
    void dupTo(org.openjdk.tools.javac.comp.InferenceContext,boolean) -> dupTo
    org.openjdk.tools.javac.comp.InferenceContext min(org.openjdk.tools.javac.util.List,boolean,org.openjdk.tools.javac.util.Warner) -> min
    void solve(org.openjdk.tools.javac.comp.Infer$GraphStrategy,org.openjdk.tools.javac.util.Warner) -> solve
    void solve(org.openjdk.tools.javac.util.Warner) -> solve
    void solve(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> solve
    void solveAny(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> solveAny
    org.openjdk.tools.javac.util.List solveBasic(java.util.EnumSet) -> solveBasic
    org.openjdk.tools.javac.util.List solveBasic(org.openjdk.tools.javac.util.List,java.util.EnumSet) -> solveBasic
    void solveLegacy(boolean,org.openjdk.tools.javac.util.Warner,java.util.EnumSet) -> solveLegacy
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Type cachedCapture(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,boolean) -> cachedCapture
    void lambda$min$6(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$min$6
    void lambda$min$5(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner,org.openjdk.tools.javac.comp.InferenceContext$ReachabilityVisitor,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$min$5
    boolean lambda$min$4(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> lambda$min$4
    void lambda$dupTo$3(org.openjdk.tools.javac.comp.InferenceContext) -> lambda$dupTo$3
    boolean lambda$boundedVars$2(org.openjdk.tools.javac.code.Type$UndetVar) -> lambda$boundedVars$2
    boolean lambda$instvars$1(org.openjdk.tools.javac.code.Type$UndetVar) -> lambda$instvars$1
    boolean lambda$restvars$0(org.openjdk.tools.javac.code.Type$UndetVar) -> lambda$restvars$0
org.openjdk.tools.javac.comp.InferenceContext$1 -> org.openjdk.tools.javac.comp.InferenceContext$1:
    org.openjdk.tools.javac.comp.InferenceContext this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.comp.Infer) -> <init>
    boolean done() -> done
org.openjdk.tools.javac.comp.InferenceContext$2 -> org.openjdk.tools.javac.comp.InferenceContext$2:
    org.openjdk.tools.javac.util.List val$vars -> val$vars
    org.openjdk.tools.javac.comp.InferenceContext this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    boolean done() -> done
org.openjdk.tools.javac.comp.InferenceContext$3 -> org.openjdk.tools.javac.comp.InferenceContext$3:
    org.openjdk.tools.javac.comp.InferenceContext this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.comp.Infer,org.openjdk.tools.javac.util.List) -> <init>
    boolean done() -> done
org.openjdk.tools.javac.comp.InferenceContext$ReachabilityVisitor -> org.openjdk.tools.javac.comp.InferenceContext$ReachabilityVisitor:
    java.util.Set equiv -> equiv
    java.util.Set min -> min
    java.util.Map minMap -> minMap
    org.openjdk.tools.javac.comp.InferenceContext this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.InferenceContext) -> <init>
    void scan(org.openjdk.tools.javac.util.List) -> scan
    java.lang.Void visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    java.lang.Void visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Void) -> visitUndetVar
    java.lang.Void visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Void) -> visitWildcardType
    java.lang.Void visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Void visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Void) -> visitArrayType
    java.lang.Void visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    boolean isEquiv(org.openjdk.tools.javac.code.Type$UndetVar,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type$UndetVar$InferenceBound) -> isEquiv
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.comp.LambdaToMethod -> org.openjdk.tools.javac.comp.LambdaToMethod:
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.comp.Lower lower -> lower
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Resolve rs -> rs
    org.openjdk.tools.javac.comp.Operators operators -> operators
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.comp.TransTypes transTypes -> transTypes
    org.openjdk.tools.javac.comp.Env attrEnv -> attrEnv
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor analyzer -> analyzer
    java.util.Map contextMap -> contextMap
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext context -> context
    org.openjdk.tools.javac.comp.LambdaToMethod$KlassInfo kInfo -> kInfo
    boolean dumpLambdaToMethodStats -> dumpLambdaToMethodStats
    boolean forceSerializable -> forceSerializable
    int FLAG_SERIALIZABLE -> FLAG_SERIALIZABLE
    int FLAG_MARKERS -> FLAG_MARKERS
    int FLAG_BRIDGES -> FLAG_BRIDGES
    org.openjdk.tools.javac.util.Context$Key unlambdaKey -> unlambdaKey
    org.openjdk.tools.javac.comp.LambdaToMethod instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.tree.JCTree translate(org.openjdk.tools.javac.tree.JCTree) -> translate
    org.openjdk.tools.javac.tree.JCTree translate(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext) -> translate
    org.openjdk.tools.javac.util.List translate(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext) -> translate
    org.openjdk.tools.javac.tree.JCTree translateTopLevelClass(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.TreeMaker) -> translateTopLevelClass
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void apportionTypeAnnotations(org.openjdk.tools.javac.tree.JCTree$JCLambda,java.util.function.Supplier,java.util.function.Consumer,java.util.function.Consumer) -> apportionTypeAnnotations
    org.openjdk.tools.javac.tree.JCTree$JCIdent makeThis(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> makeThis
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    org.openjdk.tools.javac.tree.JCTree$JCBlock makeLambdaBody(org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> makeLambdaBody
    org.openjdk.tools.javac.tree.JCTree$JCBlock makeLambdaExpressionBody(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> makeLambdaExpressionBody
    org.openjdk.tools.javac.tree.JCTree$JCBlock makeLambdaStatementBody(org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.tree.JCTree$JCMethodDecl,boolean) -> makeLambdaStatementBody
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl makeDeserializeMethod(org.openjdk.tools.javac.code.Symbol) -> makeDeserializeMethod
    org.openjdk.tools.javac.tree.JCTree$JCNewClass makeNewClass(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol) -> makeNewClass
    org.openjdk.tools.javac.tree.JCTree$JCNewClass makeNewClass(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> makeNewClass
    void addDeserializationCase(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type$MethodType) -> addDeserializationCase
    org.openjdk.tools.javac.tree.JCTree$JCExpression eqTest(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> eqTest
    org.openjdk.tools.javac.tree.JCTree$JCExpression deserTest(org.openjdk.tools.javac.tree.JCTree$JCExpression,java.lang.String,java.lang.String) -> deserTest
    org.openjdk.tools.javac.tree.JCTree$JCExpression deserGetter(java.lang.String,org.openjdk.tools.javac.code.Type) -> deserGetter
    org.openjdk.tools.javac.tree.JCTree$JCExpression deserGetter(java.lang.String,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> deserGetter
    org.openjdk.tools.javac.code.Symbol$MethodSymbol makePrivateSyntheticMethod(long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> makePrivateSyntheticMethod
    org.openjdk.tools.javac.code.Symbol$VarSymbol makeSyntheticVar(long,java.lang.String,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> makeSyntheticVar
    org.openjdk.tools.javac.code.Symbol$VarSymbol makeSyntheticVar(long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> makeSyntheticVar
    void setVarargsIfNeeded(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> setVarargsIfNeeded
    org.openjdk.tools.javac.util.List convertArgs(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> convertArgs
    org.openjdk.tools.javac.code.Type$MethodType typeToMethodType(org.openjdk.tools.javac.code.Type) -> typeToMethodType
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeMetafactoryIndyCall(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext,int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List) -> makeMetafactoryIndyCall
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeIndyCall(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Name) -> makeIndyCall
    org.openjdk.tools.javac.util.List bsmStaticArgToTypes(org.openjdk.tools.javac.util.List) -> bsmStaticArgToTypes
    org.openjdk.tools.javac.code.Type bsmStaticArgToType(java.lang.Object) -> bsmStaticArgToType
    int referenceKind(org.openjdk.tools.javac.code.Symbol) -> referenceKind
    java.lang.String typeSig(org.openjdk.tools.javac.code.Type) -> typeSig
    java.lang.String classSig(org.openjdk.tools.javac.code.Type) -> classSig
    org.openjdk.tools.javac.code.Symtab access$000(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$000
    org.openjdk.tools.javac.util.Names access$100(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$100
    org.openjdk.tools.javac.code.Symbol$MethodSymbol access$200(org.openjdk.tools.javac.comp.LambdaToMethod,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> access$200
    org.openjdk.tools.javac.code.Symbol$VarSymbol access$1000(org.openjdk.tools.javac.comp.LambdaToMethod,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> access$1000
    org.openjdk.tools.javac.tree.TreeMaker access$1100(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$1100
    org.openjdk.tools.javac.comp.Env access$1200(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$1200
    org.openjdk.tools.javac.comp.TransTypes access$1300(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$1300
    org.openjdk.tools.javac.code.Types access$1600(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$1600
    org.openjdk.tools.javac.comp.Attr access$1700(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$1700
    org.openjdk.tools.javac.util.List access$1800(org.openjdk.tools.javac.comp.LambdaToMethod,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> access$1800
    void access$1900(org.openjdk.tools.javac.comp.LambdaToMethod,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> access$1900
    org.openjdk.tools.javac.util.Log access$2200(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$2200
    java.util.Map access$2300(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$2300
    boolean access$2400(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$2400
    org.openjdk.tools.javac.comp.Lower access$2500(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$2500
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext access$2800(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$2800
    boolean access$3100(org.openjdk.tools.javac.comp.LambdaToMethod) -> access$3100
    java.lang.String access$3300(org.openjdk.tools.javac.comp.LambdaToMethod,org.openjdk.tools.javac.code.Type) -> access$3300
    int access$3800(org.openjdk.tools.javac.comp.LambdaToMethod,org.openjdk.tools.javac.code.Symbol) -> access$3800
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.LambdaToMethod$1 -> org.openjdk.tools.javac.comp.LambdaToMethod$1:
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$JCMemberReference$ReferenceKind -> $SwitchMap$com$sun$tools$javac$tree$JCTree$JCMemberReference$ReferenceKind
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    int[] $SwitchMap$com$sun$tools$javac$comp$LambdaToMethod$LambdaSymbolKind -> $SwitchMap$com$sun$tools$javac$comp$LambdaToMethod$LambdaSymbolKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.LambdaToMethod$1LambdaBodyTranslator -> org.openjdk.tools.javac.comp.LambdaToMethod$1LambdaBodyTranslator:
    boolean val$isTarget_void -> val$isTarget_void
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl val$lambdaMethodDecl -> val$lambdaMethodDecl
    org.openjdk.tools.javac.code.Type val$restype -> val$restype
    org.openjdk.tools.javac.comp.LambdaToMethod this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod,boolean,org.openjdk.tools.javac.tree.JCTree$JCMethodDecl,org.openjdk.tools.javac.code.Type) -> <init>
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
org.openjdk.tools.javac.comp.LambdaToMethod$KlassInfo -> org.openjdk.tools.javac.comp.LambdaToMethod$KlassInfo:
    org.openjdk.tools.javac.util.ListBuffer appendedMethodList -> appendedMethodList
    java.util.Map deserializeCases -> deserializeCases
    org.openjdk.tools.javac.code.Symbol$MethodSymbol deserMethodSym -> deserMethodSym
    org.openjdk.tools.javac.code.Symbol$VarSymbol deserParamSym -> deserParamSym
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl clazz -> clazz
    org.openjdk.tools.javac.comp.LambdaToMethod this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> <init>
    void addMethod(org.openjdk.tools.javac.tree.JCTree) -> addMethod
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod,org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.comp.LambdaToMethod$1) -> <init>
    java.util.Map access$500(org.openjdk.tools.javac.comp.LambdaToMethod$KlassInfo) -> access$500
    void access$600(org.openjdk.tools.javac.comp.LambdaToMethod$KlassInfo,org.openjdk.tools.javac.tree.JCTree) -> access$600
    org.openjdk.tools.javac.util.ListBuffer access$700(org.openjdk.tools.javac.comp.LambdaToMethod$KlassInfo) -> access$700
    org.openjdk.tools.javac.code.Symbol$MethodSymbol access$1400(org.openjdk.tools.javac.comp.LambdaToMethod$KlassInfo) -> access$1400
    org.openjdk.tools.javac.code.Symbol$VarSymbol access$1500(org.openjdk.tools.javac.comp.LambdaToMethod$KlassInfo) -> access$1500
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl access$2000(org.openjdk.tools.javac.comp.LambdaToMethod$KlassInfo) -> access$2000
org.openjdk.tools.javac.comp.LambdaToMethod$L2MSignatureGenerator -> org.openjdk.tools.javac.comp.LambdaToMethod$L2MSignatureGenerator:
    java.lang.StringBuilder sb -> sb
    org.openjdk.tools.javac.comp.LambdaToMethod this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod) -> <init>
    void append(char) -> append
    void append(byte[]) -> append
    void append(org.openjdk.tools.javac.util.Name) -> append
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor:
    org.openjdk.tools.javac.util.List frameStack -> frameStack
    int lambdaCount -> lambdaCount
    org.openjdk.tools.javac.util.List typesUnderConstruction -> typesUnderConstruction
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$SyntheticMethodNameCounter syntheticMethodNameCounts -> syntheticMethodNameCounts
    java.util.Map localClassDefs -> localClassDefs
    java.util.Map clinits -> clinits
    org.openjdk.tools.javac.comp.LambdaToMethod this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod) -> <init>
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl analyzeAndPreprocessClass(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> analyzeAndPreprocessClass
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    org.openjdk.tools.javac.code.Symbol$ClassSymbol currentClass() -> currentClass
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void analyzeLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> analyzeLambda
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext analyzeLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda,java.lang.String) -> analyzeLambda
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void captureLocalClassDefs(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext) -> captureLocalClassDefs
    boolean currentlyInClass(org.openjdk.tools.javac.code.Symbol) -> currentlyInClass
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    org.openjdk.tools.javac.code.Symbol owner() -> owner
    org.openjdk.tools.javac.code.Symbol owner(boolean) -> owner
    org.openjdk.tools.javac.code.Symbol initSym(org.openjdk.tools.javac.code.Symbol$ClassSymbol,long) -> initSym
    org.openjdk.tools.javac.tree.JCTree directlyEnclosingLambda() -> directlyEnclosingLambda
    boolean inClassWithinLambda() -> inClassWithinLambda
    org.openjdk.tools.javac.tree.JCTree capturedDecl(int,org.openjdk.tools.javac.code.Symbol) -> capturedDecl
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext context() -> context
    boolean lambdaIdentSymbolFilter(org.openjdk.tools.javac.code.Symbol) -> lambdaIdentSymbolFilter
    boolean lambdaFieldAccessFilter(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> lambdaFieldAccessFilter
    boolean lambdaNewClassFilter(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext,org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> lambdaNewClassFilter
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl access$300(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> access$300
    boolean access$800(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,org.openjdk.tools.javac.code.Symbol) -> access$800
    boolean access$900(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> access$900
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext access$2600(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor) -> access$2600
    org.openjdk.tools.javac.tree.JCTree access$2700(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,int,org.openjdk.tools.javac.code.Symbol) -> access$2700
    org.openjdk.tools.javac.code.Symbol access$2900(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,boolean) -> access$2900
    org.openjdk.tools.javac.util.List access$3000(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor) -> access$3000
    org.openjdk.tools.javac.tree.JCTree access$3200(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor) -> access$3200
    int access$3408(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor) -> access$3408
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$SyntheticMethodNameCounter access$3500(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor) -> access$3500
    org.openjdk.tools.javac.util.List access$3600(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor) -> access$3600
    org.openjdk.tools.javac.code.Symbol$ClassSymbol access$3700(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor) -> access$3700
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$1 -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$1:
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext val$lambdaContext -> val$lambdaContext
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,org.openjdk.tools.javac.comp.Lower,org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext) -> <init>
    void addFreeVars(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> addFreeVars
    void visitSymbol(org.openjdk.tools.javac.code.Symbol) -> visitSymbol
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$Frame -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$Frame:
    org.openjdk.tools.javac.tree.JCTree tree -> tree
    org.openjdk.tools.javac.util.List locals -> locals
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,org.openjdk.tools.javac.tree.JCTree) -> <init>
    void addLocal(org.openjdk.tools.javac.code.Symbol) -> addLocal
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext:
    org.openjdk.tools.javac.code.Symbol self -> self
    org.openjdk.tools.javac.code.Symbol assignedTo -> assignedTo
    java.util.Map translatedSymbols -> translatedSymbols
    org.openjdk.tools.javac.code.Symbol$MethodSymbol translatedSym -> translatedSym
    org.openjdk.tools.javac.util.List syntheticParams -> syntheticParams
    java.util.Set freeVarProcessedLocalClasses -> freeVarProcessedLocalClasses
    org.openjdk.tools.javac.tree.JCTree$JCExpression methodReferenceReceiver -> methodReferenceReceiver
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,org.openjdk.tools.javac.tree.JCTree$JCLambda) -> <init>
    java.lang.String serializedLambdaDisambiguation() -> serializedLambdaDisambiguation
    org.openjdk.tools.javac.util.Name lambdaName() -> lambdaName
    org.openjdk.tools.javac.util.Name serializedLambdaName() -> serializedLambdaName
    org.openjdk.tools.javac.code.Symbol translate(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind) -> translate
    void addSymbol(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind) -> addSymbol
    java.util.Map getSymbolMap(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind) -> getSymbolMap
    org.openjdk.tools.javac.tree.JCTree translate(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> translate
    org.openjdk.tools.javac.tree.JCTree translate(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> translate
    void complete() -> complete
    org.openjdk.tools.javac.code.Type generatedLambdaSig() -> generatedLambdaSig
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext$1 -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext$1:
    org.openjdk.tools.javac.code.Symbol val$sym -> val$sym
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext this$2 -> this$2
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext$2 -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext$2:
    org.openjdk.tools.javac.code.Symbol val$sym -> val$sym
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext this$2 -> this$2
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$LambdaTranslationContext,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$ReferenceTranslationContext -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$ReferenceTranslationContext:
    boolean isSuper -> isSuper
    org.openjdk.tools.javac.code.Symbol sigPolySym -> sigPolySym
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> <init>
    int referenceKind() -> referenceKind
    boolean needsVarArgsConversion() -> needsVarArgsConversion
    boolean isArrayOp() -> isArrayOp
    boolean receiverAccessible() -> receiverAccessible
    boolean isPrivateInOtherClass() -> isPrivateInOtherClass
    boolean isProtectedInSuperClassOfEnclosingClassInOtherPackage() -> isProtectedInSuperClassOfEnclosingClassInOtherPackage
    boolean isSignaturePolymorphic() -> isSignaturePolymorphic
    boolean interfaceParameterIsIntersectionType() -> interfaceParameterIsIntersectionType
    boolean needsConversionToLambda() -> needsConversionToLambda
    org.openjdk.tools.javac.code.Type generatedRefSig() -> generatedRefSig
    org.openjdk.tools.javac.code.Type bridgedRefSig() -> bridgedRefSig
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$SyntheticMethodNameCounter -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$SyntheticMethodNameCounter:
    java.util.Map map -> map
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor) -> <init>
    int getIndex(java.lang.StringBuilder) -> getIndex
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,org.openjdk.tools.javac.comp.LambdaToMethod$1) -> <init>
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext:
    org.openjdk.tools.javac.tree.JCTree$JCFunctionalExpression tree -> tree
    org.openjdk.tools.javac.code.Symbol owner -> owner
    int depth -> depth
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext prev -> prev
    org.openjdk.tools.javac.util.List bridges -> bridges
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor,org.openjdk.tools.javac.tree.JCTree$JCFunctionalExpression) -> <init>
    boolean needsAltMetafactory() -> needsAltMetafactory
    boolean isSerializable() -> isSerializable
    java.lang.String enclosingMethodName() -> enclosingMethodName
    java.lang.String syntheticMethodNameComponent(org.openjdk.tools.javac.util.Name) -> syntheticMethodNameComponent
org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind -> org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind:
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind PARAM -> PARAM
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind LOCAL_VAR -> LOCAL_VAR
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind CAPTURED_VAR -> CAPTURED_VAR
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind CAPTURED_THIS -> CAPTURED_THIS
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind CAPTURED_OUTER_THIS -> CAPTURED_OUTER_THIS
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind TYPE_VAR -> TYPE_VAR
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind[] values() -> values
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaSymbolKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean propagateAnnotations() -> propagateAnnotations
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.LambdaToMethod$MemberReferenceToLambda -> org.openjdk.tools.javac.comp.LambdaToMethod$MemberReferenceToLambda:
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference tree -> tree
    org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$ReferenceTranslationContext localContext -> localContext
    org.openjdk.tools.javac.code.Symbol owner -> owner
    org.openjdk.tools.javac.util.ListBuffer args -> args
    org.openjdk.tools.javac.util.ListBuffer params -> params
    org.openjdk.tools.javac.tree.JCTree$JCExpression receiverExpression -> receiverExpression
    org.openjdk.tools.javac.comp.LambdaToMethod this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.LambdaToMethod,org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$ReferenceTranslationContext,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.tree.JCTree$JCLambda lambda() -> lambda
    org.openjdk.tools.javac.code.Symbol$VarSymbol addParametersReturnReceiver() -> addParametersReturnReceiver
    org.openjdk.tools.javac.tree.JCTree$JCExpression getReceiverExpression() -> getReceiverExpression
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeReceiver(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> makeReceiver
    org.openjdk.tools.javac.tree.JCTree$JCExpression expressionInvoke(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> expressionInvoke
    org.openjdk.tools.javac.tree.JCTree$JCExpression expressionNew() -> expressionNew
    org.openjdk.tools.javac.code.Symbol$VarSymbol addParameter(java.lang.String,org.openjdk.tools.javac.code.Type,boolean) -> addParameter
org.openjdk.tools.javac.comp.Lower -> org.openjdk.tools.javac.comp.Lower:
    org.openjdk.tools.javac.util.Context$Key lowerKey -> lowerKey
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Resolve rs -> rs
    org.openjdk.tools.javac.comp.Operators operators -> operators
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition make_pos -> make_pos
    org.openjdk.tools.javac.jvm.ClassWriter writer -> writer
    org.openjdk.tools.javac.comp.ConstFold cfolder -> cfolder
    org.openjdk.tools.javac.jvm.Target target -> target
    org.openjdk.tools.javac.code.Source source -> source
    org.openjdk.tools.javac.comp.TypeEnvs typeEnvs -> typeEnvs
    org.openjdk.tools.javac.util.Name dollarAssertionsDisabled -> dollarAssertionsDisabled
    org.openjdk.tools.javac.util.Name classDollar -> classDollar
    org.openjdk.tools.javac.util.Name dollarCloseResource -> dollarCloseResource
    org.openjdk.tools.javac.code.Types types -> types
    boolean debugLower -> debugLower
    org.openjdk.tools.javac.main.Option$PkgInfo pkginfoOpt -> pkginfoOpt
    org.openjdk.tools.javac.code.Symbol$ClassSymbol currentClass -> currentClass
    org.openjdk.tools.javac.util.ListBuffer translated -> translated
    org.openjdk.tools.javac.comp.Env attrEnv -> attrEnv
    org.openjdk.tools.javac.tree.EndPosTable endPosTable -> endPosTable
    java.util.Map classdefs -> classdefs
    java.util.Map prunedTree -> prunedTree
    java.util.Map actualSymbols -> actualSymbols
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl currentMethodDef -> currentMethodDef
    org.openjdk.tools.javac.code.Symbol$MethodSymbol currentMethodSym -> currentMethodSym
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl outermostClassDef -> outermostClassDef
    org.openjdk.tools.javac.tree.JCTree outermostMemberDef -> outermostMemberDef
    java.util.Map lambdaTranslationMap -> lambdaTranslationMap
    org.openjdk.tools.javac.comp.Lower$ClassMap classMap -> classMap
    java.util.Map freevarCache -> freevarCache
    java.util.Map enumSwitchMap -> enumSwitchMap
    org.openjdk.tools.javac.tree.JCTree$Visitor conflictsChecker -> conflictsChecker
    java.util.Map accessNums -> accessNums
    java.util.Map accessSyms -> accessSyms
    java.util.Map accessConstrs -> accessConstrs
    org.openjdk.tools.javac.util.List accessConstrTags -> accessConstrTags
    org.openjdk.tools.javac.util.ListBuffer accessed -> accessed
    org.openjdk.tools.javac.code.Scope$WriteableScope proxies -> proxies
    org.openjdk.tools.javac.code.Scope$WriteableScope twrVars -> twrVars
    org.openjdk.tools.javac.util.List outerThisStack -> outerThisStack
    int USE_CLOSE_RESOURCE_METHOD_THRESHOLD -> USE_CLOSE_RESOURCE_METHOD_THRESHOLD
    org.openjdk.tools.javac.code.Symbol$ClassSymbol assertionsDisabledClassCache -> assertionsDisabledClassCache
    org.openjdk.tools.javac.tree.JCTree$JCExpression enclOp -> enclOp
    org.openjdk.tools.javac.code.Symbol$MethodSymbol systemArraycopyMethod -> systemArraycopyMethod
    org.openjdk.tools.javac.comp.Lower instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl classDef(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> classDef
    org.openjdk.tools.javac.code.Symbol$ClassSymbol ownerToCopyFreeVarsFrom(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> ownerToCopyFreeVarsFrom
    org.openjdk.tools.javac.util.List freevars(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> freevars
    org.openjdk.tools.javac.comp.Lower$EnumMapping mapForEnum(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> mapForEnum
    org.openjdk.tools.javac.tree.TreeMaker make_at(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> make_at
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeLit(org.openjdk.tools.javac.code.Type,java.lang.Object) -> makeLit
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeNull() -> makeNull
    org.openjdk.tools.javac.tree.JCTree$JCNewClass makeNewClass(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> makeNewClass
    org.openjdk.tools.javac.tree.JCTree$JCUnary makeUnary(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> makeUnary
    org.openjdk.tools.javac.tree.JCTree$JCBinary makeBinary(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> makeBinary
    org.openjdk.tools.javac.tree.JCTree$JCAssignOp makeAssignop(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> makeAssignop
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeString(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> makeString
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl makeEmptyClass(long,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> makeEmptyClass
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl makeEmptyClass(long,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.Name,boolean) -> makeEmptyClass
    void enterSynthetic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope$WriteableScope) -> enterSynthetic
    org.openjdk.tools.javac.util.Name makeSyntheticName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Scope) -> makeSyntheticName
    void checkConflicts(org.openjdk.tools.javac.util.List) -> checkConflicts
    org.openjdk.tools.javac.code.Symbol lookupSynthetic(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Scope) -> lookupSynthetic
    org.openjdk.tools.javac.code.Symbol$MethodSymbol lookupMethod(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> lookupMethod
    org.openjdk.tools.javac.code.Symbol$MethodSymbol lookupConstructor(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> lookupConstructor
    org.openjdk.tools.javac.code.Symbol$VarSymbol lookupField(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name) -> lookupField
    void checkAccessConstructorTags() -> checkAccessConstructorTags
    boolean isTranslatedClassAvailable(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> isTranslatedClassAvailable
    void swapAccessConstructorTag(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> swapAccessConstructorTag
    int accessCode(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> accessCode
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol binaryAccessOperator(int,org.openjdk.tools.javac.tree.JCTree$Tag) -> binaryAccessOperator
    org.openjdk.tools.javac.tree.JCTree$Tag treeTag(org.openjdk.tools.javac.code.Symbol$OperatorSymbol) -> treeTag
    org.openjdk.tools.javac.util.Name accessName(int,int) -> accessName
    org.openjdk.tools.javac.code.Symbol$MethodSymbol accessSymbol(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,boolean,boolean) -> accessSymbol
    org.openjdk.tools.javac.tree.JCTree$JCExpression accessBase(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> accessBase
    boolean needsPrivateAccess(org.openjdk.tools.javac.code.Symbol) -> needsPrivateAccess
    boolean needsProtectedAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree) -> needsProtectedAccess
    org.openjdk.tools.javac.code.Symbol$ClassSymbol accessClass(org.openjdk.tools.javac.code.Symbol,boolean,org.openjdk.tools.javac.tree.JCTree) -> accessClass
    void addPrunedInfo(org.openjdk.tools.javac.tree.JCTree) -> addPrunedInfo
    org.openjdk.tools.javac.tree.JCTree$JCExpression access(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression,boolean) -> access
    org.openjdk.tools.javac.tree.JCTree$JCExpression access(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> access
    org.openjdk.tools.javac.code.Symbol accessConstructor(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> accessConstructor
    org.openjdk.tools.javac.code.Symbol$ClassSymbol accessConstructorTag() -> accessConstructorTag
    void makeAccessible(org.openjdk.tools.javac.code.Symbol) -> makeAccessible
    org.openjdk.tools.javac.tree.JCTree accessDef(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol,int) -> accessDef
    org.openjdk.tools.javac.tree.JCTree accessConstructorDef(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> accessConstructorDef
    org.openjdk.tools.javac.util.Name proxyName(org.openjdk.tools.javac.util.Name) -> proxyName
    org.openjdk.tools.javac.util.List freevarDefs(int,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol) -> freevarDefs
    org.openjdk.tools.javac.util.List freevarDefs(int,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol,long) -> freevarDefs
    org.openjdk.tools.javac.util.Name outerThisName(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> outerThisName
    org.openjdk.tools.javac.code.Symbol$VarSymbol makeOuterThisVarSymbol(org.openjdk.tools.javac.code.Symbol,long) -> makeOuterThisVarSymbol
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl makeOuterThisVarDecl(int,org.openjdk.tools.javac.code.Symbol$VarSymbol) -> makeOuterThisVarDecl
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl outerThisDef(int,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> outerThisDef
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl outerThisDef(int,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> outerThisDef
    org.openjdk.tools.javac.util.List loadFreevars(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.List) -> loadFreevars
    org.openjdk.tools.javac.tree.JCTree$JCExpression loadFreevar(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$VarSymbol) -> loadFreevar
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeThis(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> makeThis
    org.openjdk.tools.javac.tree.JCTree makeTwrTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> makeTwrTry
    org.openjdk.tools.javac.tree.JCTree$JCBlock makeTwrBlock(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock,boolean,int) -> makeTwrBlock
    org.openjdk.tools.javac.tree.JCTree$JCBlock makeTwrFinallyClause(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree$JCExpression,boolean) -> makeTwrFinallyClause
    boolean shouldUseCloseResourceMethod() -> shouldUseCloseResourceMethod
    org.openjdk.tools.javac.tree.JCTree$JCStatement makeTwrCloseStatement(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> makeTwrCloseStatement
    org.openjdk.tools.javac.tree.JCTree$JCStatement makeResourceCloseInvocation(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> makeResourceCloseInvocation
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeNonNullCheck(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> makeNonNullCheck
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeOuterThis(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> makeOuterThis
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeOwnerThis(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,boolean) -> makeOwnerThis
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeOwnerThisN(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,boolean) -> makeOwnerThisN
    org.openjdk.tools.javac.tree.JCTree$JCStatement initField(int,org.openjdk.tools.javac.util.Name) -> initField
    org.openjdk.tools.javac.tree.JCTree$JCStatement initOuterThis(int) -> initOuterThis
    org.openjdk.tools.javac.code.Symbol$ClassSymbol outerCacheClass() -> outerCacheClass
    org.openjdk.tools.javac.code.Symbol$MethodSymbol classDollarSym(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> classDollarSym
    org.openjdk.tools.javac.tree.JCTree$JCBlock classDollarSymBody(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> classDollarSymBody
    org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation makeCall(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> makeCall
    org.openjdk.tools.javac.util.Name cacheName(java.lang.String) -> cacheName
    org.openjdk.tools.javac.code.Symbol$VarSymbol cacheSym(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String) -> cacheSym
    org.openjdk.tools.javac.tree.JCTree$JCExpression classOf(org.openjdk.tools.javac.tree.JCTree) -> classOf
    org.openjdk.tools.javac.tree.JCTree$JCExpression classOfType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> classOfType
    org.openjdk.tools.javac.code.Symbol$ClassSymbol assertionsDisabledClass() -> assertionsDisabledClass
    org.openjdk.tools.javac.tree.JCTree$JCExpression assertFlagTest(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> assertFlagTest
    org.openjdk.tools.javac.tree.JCTree$JCExpression abstractRval(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Lower$TreeBuilder) -> abstractRval
    org.openjdk.tools.javac.tree.JCTree$JCExpression abstractRval(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Lower$TreeBuilder) -> abstractRval
    org.openjdk.tools.javac.tree.JCTree$JCExpression abstractLval(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.comp.Lower$TreeBuilder) -> abstractLval
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeComma(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> makeComma
    org.openjdk.tools.javac.tree.JCTree translate(org.openjdk.tools.javac.tree.JCTree) -> translate
    org.openjdk.tools.javac.tree.JCTree$JCExpression translate(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type) -> translate
    org.openjdk.tools.javac.tree.JCTree translate(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> translate
    org.openjdk.tools.javac.util.List translate(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> translate
    org.openjdk.tools.javac.util.List translate(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> translate
    void visitPackageDef(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> visitPackageDef
    boolean needPackageInfoClass(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> needPackageInfoClass
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void createInfoClass(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> createInfoClass
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitEnumDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitEnumDef
    boolean useClone() -> useClone
    void visitEnumConstantDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,int) -> visitEnumConstantDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitMethodDefInternal(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDefInternal
    java.util.Map makeTranslationMap(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> makeTranslationMap
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    boolean isTrue(org.openjdk.tools.javac.tree.JCTree) -> isTrue
    boolean isFalse(org.openjdk.tools.javac.tree.JCTree) -> isFalse
    java.lang.Boolean expValue(org.openjdk.tools.javac.tree.JCTree) -> expValue
    java.lang.Boolean expValueIsNull(boolean,org.openjdk.tools.javac.tree.JCTree) -> expValueIsNull
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    org.openjdk.tools.javac.tree.JCTree$JCExpression convert(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type) -> convert
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitAssert(org.openjdk.tools.javac.tree.JCTree$JCAssert) -> visitAssert
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    org.openjdk.tools.javac.util.List boxArgs(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> boxArgs
    org.openjdk.tools.javac.tree.JCTree$JCExpression boxIfNeeded(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type) -> boxIfNeeded
    org.openjdk.tools.javac.tree.JCTree$JCExpression boxPrimitive(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> boxPrimitive
    org.openjdk.tools.javac.tree.JCTree$JCExpression boxPrimitive(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type) -> boxPrimitive
    org.openjdk.tools.javac.tree.JCTree$JCExpression unbox(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type) -> unbox
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitIndexed(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess) -> visitIndexed
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    org.openjdk.tools.javac.tree.JCTree$JCExpression lowerBoxedPostop(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> lowerBoxedPostop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitArrayForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitArrayForeachLoop
    void patchTargets(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> patchTargets
    void visitIterableForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitIterableForeachLoop
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    org.openjdk.tools.javac.tree.JCTree visitEnumSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitEnumSwitch
    org.openjdk.tools.javac.tree.JCTree visitStringSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitStringSwitch
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitLetExpr(org.openjdk.tools.javac.tree.JCTree$LetExpr) -> visitLetExpr
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    org.openjdk.tools.javac.util.List translateTopLevelClass(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.TreeMaker) -> translateTopLevelClass
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambda$lowerBoxedPostop$7(org.openjdk.tools.javac.tree.JCTree$JCUnary,boolean,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$lowerBoxedPostop$7
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambda$null$6(org.openjdk.tools.javac.tree.JCTree$JCUnary,org.openjdk.tools.javac.tree.JCTree$JCExpression,boolean,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$null$6
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambda$visitAssignop$5(org.openjdk.tools.javac.tree.JCTree$JCAssignOp,boolean,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$visitAssignop$5
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambda$makeComma$4(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$makeComma$4
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambda$abstractLval$3(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess,org.openjdk.tools.javac.comp.Lower$TreeBuilder,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$abstractLval$3
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambda$null$2(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCArrayAccess,org.openjdk.tools.javac.comp.Lower$TreeBuilder,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$null$2
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambda$abstractLval$1(org.openjdk.tools.javac.comp.Lower$TreeBuilder,org.openjdk.tools.javac.tree.JCTree$JCFieldAccess,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$abstractLval$1
    boolean lambda$binaryAccessOperator$0(org.openjdk.tools.javac.tree.JCTree$Tag,int,org.openjdk.tools.javac.code.Symbol$OperatorSymbol) -> lambda$binaryAccessOperator$0
    org.openjdk.tools.javac.util.Names access$000(org.openjdk.tools.javac.comp.Lower) -> access$000
    org.openjdk.tools.javac.jvm.Target access$100(org.openjdk.tools.javac.comp.Lower) -> access$100
    org.openjdk.tools.javac.jvm.ClassWriter access$200(org.openjdk.tools.javac.comp.Lower) -> access$200
    org.openjdk.tools.javac.code.Symbol$ClassSymbol access$300(org.openjdk.tools.javac.comp.Lower) -> access$300
    org.openjdk.tools.javac.code.Symtab access$400(org.openjdk.tools.javac.comp.Lower) -> access$400
    void access$500(org.openjdk.tools.javac.comp.Lower,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Scope$WriteableScope) -> access$500
    org.openjdk.tools.javac.tree.TreeMaker access$600(org.openjdk.tools.javac.comp.Lower) -> access$600
    org.openjdk.tools.javac.code.Symbol$MethodSymbol access$700(org.openjdk.tools.javac.comp.Lower,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> access$700
    org.openjdk.tools.javac.comp.Check access$800(org.openjdk.tools.javac.comp.Lower) -> access$800
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Lower$1 -> org.openjdk.tools.javac.comp.Lower$1:
    org.openjdk.tools.javac.code.Symbol$TypeSymbol currentClass -> currentClass
    org.openjdk.tools.javac.comp.Lower this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Lower) -> <init>
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
org.openjdk.tools.javac.comp.Lower$1Patcher -> org.openjdk.tools.javac.comp.Lower$1Patcher:
    org.openjdk.tools.javac.tree.JCTree val$src -> val$src
    org.openjdk.tools.javac.tree.JCTree val$dest -> val$dest
    org.openjdk.tools.javac.comp.Lower this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Lower,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> <init>
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
org.openjdk.tools.javac.comp.Lower$1TryFinder -> org.openjdk.tools.javac.comp.Lower$1TryFinder:
    int closeCount -> closeCount
    org.openjdk.tools.javac.comp.Lower this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Lower) -> <init>
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    boolean useCloseResourceMethod() -> useCloseResourceMethod
org.openjdk.tools.javac.comp.Lower$2 -> org.openjdk.tools.javac.comp.Lower$2:
    int[] $SwitchMap$com$sun$tools$javac$code$Kinds$Kind -> $SwitchMap$com$sun$tools$javac$code$Kinds$Kind
    int[] $SwitchMap$com$sun$tools$javac$code$Symbol$OperatorSymbol$AccessCode -> $SwitchMap$com$sun$tools$javac$code$Symbol$OperatorSymbol$AccessCode
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    int[] $SwitchMap$com$sun$tools$javac$main$Option$PkgInfo -> $SwitchMap$com$sun$tools$javac$main$Option$PkgInfo
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Lower$AssignopDependencyScanner -> org.openjdk.tools.javac.comp.Lower$AssignopDependencyScanner:
    org.openjdk.tools.javac.code.Symbol sym -> sym
    boolean dependencyFound -> dependencyFound
    org.openjdk.tools.javac.comp.Lower this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Lower,org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
org.openjdk.tools.javac.comp.Lower$BasicFreeVarCollector -> org.openjdk.tools.javac.comp.Lower$BasicFreeVarCollector:
    org.openjdk.tools.javac.comp.Lower this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Lower) -> <init>
    void addFreeVars(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> addFreeVars
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSymbol(org.openjdk.tools.javac.code.Symbol) -> visitSymbol
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
org.openjdk.tools.javac.comp.Lower$ClassMap -> org.openjdk.tools.javac.comp.Lower$ClassMap:
    org.openjdk.tools.javac.comp.Lower this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Lower) -> <init>
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
org.openjdk.tools.javac.comp.Lower$EnumMapping -> org.openjdk.tools.javac.comp.Lower$EnumMapping:
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition pos -> pos
    int next -> next
    org.openjdk.tools.javac.code.Symbol$TypeSymbol forEnum -> forEnum
    org.openjdk.tools.javac.code.Symbol$VarSymbol mapVar -> mapVar
    java.util.Map values -> values
    org.openjdk.tools.javac.comp.Lower this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Lower,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    org.openjdk.tools.javac.tree.JCTree$JCLiteral forConstant(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> forConstant
    void translate() -> translate
org.openjdk.tools.javac.comp.Lower$FreeVarCollector -> org.openjdk.tools.javac.comp.Lower$FreeVarCollector:
    org.openjdk.tools.javac.code.Symbol owner -> owner
    org.openjdk.tools.javac.code.Symbol$ClassSymbol clazz -> clazz
    org.openjdk.tools.javac.util.List fvs -> fvs
    org.openjdk.tools.javac.comp.Lower this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Lower,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> <init>
    void addFreeVar(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> addFreeVar
    void addFreeVars(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> addFreeVars
    void visitSymbol(org.openjdk.tools.javac.code.Symbol) -> visitSymbol
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
org.openjdk.tools.javac.comp.Lower$TreeBuilder -> org.openjdk.tools.javac.comp.Lower$TreeBuilder:
    org.openjdk.tools.javac.tree.JCTree$JCExpression build(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> build
org.openjdk.tools.javac.comp.MemberEnter -> org.openjdk.tools.javac.comp.MemberEnter:
    org.openjdk.tools.javac.util.Context$Key memberEnterKey -> memberEnterKey
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.code.DeferredLintHandler deferredLintHandler -> deferredLintHandler
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.comp.MemberEnter instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.code.Type signature(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> signature
    void memberEnter(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> memberEnter
    void memberEnter(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> memberEnter
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    org.openjdk.tools.javac.comp.Env methodEnv(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl,org.openjdk.tools.javac.comp.Env) -> methodEnv
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void checkType(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type,java.lang.String) -> checkType
    void checkReceiver(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.comp.Env) -> checkReceiver
    boolean needsLazyConstValue(org.openjdk.tools.javac.tree.JCTree) -> needsLazyConstValue
    org.openjdk.tools.javac.comp.Env initEnv(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.comp.Env) -> initEnv
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    void visitErroneous(org.openjdk.tools.javac.tree.JCTree$JCErroneous) -> visitErroneous
    org.openjdk.tools.javac.comp.Env getMethodEnv(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl,org.openjdk.tools.javac.comp.Env) -> getMethodEnv
    org.openjdk.tools.javac.comp.Env getInitEnv(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.comp.Env) -> getInitEnv
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.MemberEnter$InitTreeVisitor -> org.openjdk.tools.javac.comp.MemberEnter$InitTreeVisitor:
    java.util.Set ALLOWED_OPERATORS -> ALLOWED_OPERATORS
    boolean result -> result
    void <init>() -> <init>
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    void visitLiteral(org.openjdk.tools.javac.tree.JCTree$JCLiteral) -> visitLiteral
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Modules -> org.openjdk.tools.javac.comp.Modules:
    java.lang.String ALL_SYSTEM -> ALL_SYSTEM
    java.lang.String ALL_MODULE_PATH -> ALL_MODULE_PATH
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.code.DeferredLintHandler deferredLintHandler -> deferredLintHandler
    org.openjdk.tools.javac.comp.TypeEnvs typeEnvs -> typeEnvs
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.code.ModuleFinder moduleFinder -> moduleFinder
    org.openjdk.tools.javac.code.Source source -> source
    boolean allowModules -> allowModules
    boolean allowAccessIntoSystem -> allowAccessIntoSystem
    boolean multiModuleMode -> multiModuleMode
    org.openjdk.tools.javac.util.Name java_se -> java_se
    org.openjdk.tools.javac.util.Name java_ -> java_
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol defaultModule -> defaultModule
    java.lang.String addExportsOpt -> addExportsOpt
    java.util.Map addExports -> addExports
    java.lang.String addReadsOpt -> addReadsOpt
    java.util.Map addReads -> addReads
    java.lang.String addModsOpt -> addModsOpt
    java.util.Set extraAddMods -> extraAddMods
    java.lang.String limitModsOpt -> limitModsOpt
    java.util.Set extraLimitMods -> extraLimitMods
    java.lang.String moduleVersionOpt -> moduleVersionOpt
    boolean lintOptions -> lintOptions
    java.util.Set rootModules -> rootModules
    java.util.Set warnedMissing -> warnedMissing
    org.openjdk.tools.javac.comp.Modules$PackageNameFinder findPackageInFile -> findPackageInFile
    java.lang.String XMODULES_PREFIX -> XMODULES_PREFIX
    int depth -> depth
    boolean inInitModules -> inInitModules
    org.openjdk.tools.javac.code.Symbol$Completer mainCompleter -> mainCompleter
    java.util.Set allModules -> allModules
    java.util.function.Predicate IS_AUTOMATIC -> IS_AUTOMATIC
    java.util.Map requiresTransitiveCache -> requiresTransitiveCache
    org.openjdk.tools.javac.comp.Modules instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void dprintln(java.lang.String) -> dprintln
    void addExtraAddModules(java.lang.String[]) -> addExtraAddModules
    void addExtraLimitModules(java.lang.String[]) -> addExtraLimitModules
    void initModules(org.openjdk.tools.javac.util.List) -> initModules
    boolean enter(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> enter
    boolean enter(org.openjdk.tools.javac.util.List,java.util.function.Consumer,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> enter
    org.openjdk.tools.javac.code.Symbol$Completer getCompleter() -> getCompleter
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol getDefaultModule() -> getDefaultModule
    boolean modulesInitialized() -> modulesInitialized
    java.util.Set enterModules(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> enterModules
    void enterModule(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.util.Set) -> enterModule
    void setCompilationUnitModules(org.openjdk.tools.javac.util.List,java.util.Set,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> setCompilationUnitModules
    void checkSourceLocation(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> checkSourceLocation
    java.lang.String singleModuleOverride(org.openjdk.tools.javac.util.List) -> singleModuleOverride
    org.openjdk.javax.tools.JavaFileManager$Location getModuleLocation(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> getModuleLocation
    void checkNoAllModulePath() -> checkNoAllModulePath
    void setupAutomaticModule(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> setupAutomaticModule
    void completeAutomaticModule(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> completeAutomaticModule
    org.openjdk.tools.javac.code.Symbol$Completer getSourceCompleter(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> getSourceCompleter
    boolean isRootModule(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> isRootModule
    java.util.Set getRootModules() -> getRootModules
    org.openjdk.tools.javac.code.Symbol$Completer getUsesProvidesCompleter() -> getUsesProvidesCompleter
    java.util.Set allModules() -> allModules
    void setupAllModules() -> setupAllModules
    boolean isInModuleGraph(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> isInModuleGraph
    java.util.Set computeTransitiveClosure(java.util.Set,java.util.Set,java.util.Set) -> computeTransitiveClosure
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol getObservableModule(org.openjdk.tools.javac.util.Name) -> getObservableModule
    org.openjdk.tools.javac.code.Symbol$Completer getUnnamedModuleCompleter() -> getUnnamedModuleCompleter
    void completeModule(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> completeModule
    java.util.Set retrieveRequiresTransitive(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> retrieveRequiresTransitive
    void initVisiblePackages(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.util.Collection) -> initVisiblePackages
    void addVisiblePackages(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.util.Map,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.util.Collection) -> addVisiblePackages
    void initAddExports() -> initAddExports
    boolean isKnownModule(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.util.Set) -> isKnownModule
    void initAddReads() -> initAddReads
    void checkCyclicDependencies(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> checkCyclicDependencies
    boolean isValidName(java.lang.CharSequence) -> isValidName
    java.lang.String toString(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> toString
    java.lang.String toString(org.openjdk.javax.tools.JavaFileManager$Location) -> toString
    java.lang.String toString(org.openjdk.javax.tools.JavaFileObject) -> toString
    void newRound() -> newRound
    java.util.Set lambda$initAddReads$21(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$initAddReads$21
    java.util.Set lambda$initAddExports$20(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$initAddExports$20
    void lambda$initVisiblePackages$19(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.util.Map,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.util.Set) -> lambda$initVisiblePackages$19
    java.lang.String lambda$retrieveRequiresTransitive$18(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$retrieveRequiresTransitive$18
    java.lang.String lambda$completeModule$17(org.openjdk.tools.javac.code.Directive$RequiresDirective) -> lambda$completeModule$17
    void lambda$completeModule$16(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.code.Symbol) -> lambda$completeModule$16
    boolean lambda$static$15(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$static$15
    void lambda$setupAllModules$14(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$setupAllModules$14
    java.lang.String lambda$setupAllModules$13(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$setupAllModules$13
    boolean lambda$setupAllModules$12(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$setupAllModules$12
    void lambda$setupAllModules$11(java.util.Set,java.util.Set,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$setupAllModules$11
    boolean lambda$setupAllModules$10(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$setupAllModules$10
    boolean lambda$setupAllModules$9(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$setupAllModules$9
    boolean lambda$null$8(org.openjdk.tools.javac.code.Directive$ExportsDirective) -> lambda$null$8
    boolean lambda$setupAllModules$7(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$setupAllModules$7
    boolean lambda$setupAllModules$6(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$setupAllModules$6
    boolean lambda$setupAllModules$5(java.util.Set,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$setupAllModules$5
    void lambda$getUsesProvidesCompleter$4(org.openjdk.tools.javac.code.Symbol) -> lambda$getUsesProvidesCompleter$4
    void lambda$setCompilationUnitModules$3(org.openjdk.tools.javac.code.Symbol) -> lambda$setCompilationUnitModules$3
    void lambda$setCompilationUnitModules$2(org.openjdk.tools.javac.code.Symbol) -> lambda$setCompilationUnitModules$2
    void lambda$enter$1(java.util.Set) -> lambda$enter$1
    void lambda$initModules$0(java.util.Set) -> lambda$initModules$0
    org.openjdk.tools.javac.code.ModuleFinder access$000(org.openjdk.tools.javac.comp.Modules) -> access$000
    void access$100(org.openjdk.tools.javac.comp.Modules,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> access$100
    void access$200(org.openjdk.tools.javac.comp.Modules,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> access$200
    org.openjdk.tools.javac.util.Log access$300(org.openjdk.tools.javac.comp.Modules) -> access$300
    org.openjdk.tools.javac.code.DeferredLintHandler access$400(org.openjdk.tools.javac.comp.Modules) -> access$400
    void access$500(org.openjdk.tools.javac.comp.Modules,org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> access$500
    java.util.Set access$600(org.openjdk.tools.javac.comp.Modules) -> access$600
    org.openjdk.tools.javac.code.Symtab access$700(org.openjdk.tools.javac.comp.Modules) -> access$700
    org.openjdk.tools.javac.comp.Attr access$800(org.openjdk.tools.javac.comp.Modules) -> access$800
    org.openjdk.tools.javac.comp.Check access$900(org.openjdk.tools.javac.comp.Modules) -> access$900
    org.openjdk.tools.javac.util.Names access$1000(org.openjdk.tools.javac.comp.Modules) -> access$1000
    java.util.Map access$1100(org.openjdk.tools.javac.comp.Modules) -> access$1100
    org.openjdk.tools.javac.code.Types access$1200(org.openjdk.tools.javac.comp.Modules) -> access$1200
    void access$1300(org.openjdk.tools.javac.comp.Modules,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.util.Collection) -> access$1300
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Modules$1 -> org.openjdk.tools.javac.comp.Modules$1:
    org.openjdk.tools.javac.comp.Modules this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Modules) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Modules$2 -> org.openjdk.tools.javac.comp.Modules$2:
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit val$tree -> val$tree
    org.openjdk.tools.javac.comp.Modules this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Modules,org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Modules$3 -> org.openjdk.tools.javac.comp.Modules$3:
    org.openjdk.tools.javac.comp.Modules this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Modules) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Modules$ModuleVisitor -> org.openjdk.tools.javac.comp.Modules$ModuleVisitor:
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol sym -> sym
    java.util.Set allRequires -> allRequires
    java.util.Map allExports -> allExports
    java.util.Map allOpens -> allOpens
    org.openjdk.tools.javac.comp.Modules this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Modules) -> <init>
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void visitRequires(org.openjdk.tools.javac.tree.JCTree$JCRequires) -> visitRequires
    void visitExports(org.openjdk.tools.javac.tree.JCTree$JCExports) -> visitExports
    void reportExportsConflict(org.openjdk.tools.javac.tree.JCTree$JCExports,org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> reportExportsConflict
    void checkDuplicateExportsToModule(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.code.Directive$ExportsDirective) -> checkDuplicateExportsToModule
    void reportExportsConflictToModule(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> reportExportsConflictToModule
    void visitOpens(org.openjdk.tools.javac.tree.JCTree$JCOpens) -> visitOpens
    void reportOpensConflict(org.openjdk.tools.javac.tree.JCTree$JCOpens,org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> reportOpensConflict
    void checkDuplicateOpensToModule(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.code.Directive$OpensDirective) -> checkDuplicateOpensToModule
    void reportOpensConflictToModule(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> reportOpensConflictToModule
    void visitProvides(org.openjdk.tools.javac.tree.JCTree$JCProvides) -> visitProvides
    void visitUses(org.openjdk.tools.javac.tree.JCTree$JCUses) -> visitUses
    void ensureJavaBase() -> ensureJavaBase
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol lookupModule(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lookupModule
    org.openjdk.tools.javac.util.List lambda$visitOpens$2(org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> lambda$visitOpens$2
    org.openjdk.tools.javac.util.List lambda$visitExports$1(org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> lambda$visitExports$1
    void lambda$visitModuleDef$0(org.openjdk.tools.javac.tree.JCTree$JCDirective) -> lambda$visitModuleDef$0
org.openjdk.tools.javac.comp.Modules$PackageNameFinder -> org.openjdk.tools.javac.comp.Modules$PackageNameFinder:
    org.openjdk.tools.javac.util.Name findPackageNameOf(org.openjdk.javax.tools.JavaFileObject) -> findPackageNameOf
org.openjdk.tools.javac.comp.Modules$UsesProvidesVisitor -> org.openjdk.tools.javac.comp.Modules$UsesProvidesVisitor:
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol msym -> msym
    org.openjdk.tools.javac.comp.Env env -> env
    java.util.Set allUses -> allUses
    java.util.Map allProvides -> allProvides
    java.util.Map directiveToTreeMap -> directiveToTreeMap
    org.openjdk.tools.javac.comp.Modules this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Modules,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.comp.Env) -> <init>
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void visitExports(org.openjdk.tools.javac.tree.JCTree$JCExports) -> visitExports
    void visitOpens(org.openjdk.tools.javac.tree.JCTree$JCOpens) -> visitOpens
    org.openjdk.tools.javac.code.Symbol$MethodSymbol noArgsConstructor(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> noArgsConstructor
    org.openjdk.tools.javac.code.Symbol$MethodSymbol factoryMethod(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> factoryMethod
    void visitProvides(org.openjdk.tools.javac.tree.JCTree$JCProvides) -> visitProvides
    void visitRequires(org.openjdk.tools.javac.tree.JCTree$JCRequires) -> visitRequires
    void visitUses(org.openjdk.tools.javac.tree.JCTree$JCUses) -> visitUses
    void checkForCorrectness() -> checkForCorrectness
    java.util.Set lambda$visitProvides$2(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> lambda$visitProvides$2
    boolean lambda$factoryMethod$1(org.openjdk.tools.javac.code.Symbol) -> lambda$factoryMethod$1
    void lambda$visitModuleDef$0(org.openjdk.tools.javac.tree.JCTree$JCDirective) -> lambda$visitModuleDef$0
org.openjdk.tools.javac.comp.Operators -> org.openjdk.tools.javac.comp.Operators:
    org.openjdk.tools.javac.util.Context$Key operatorsKey -> operatorsKey
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Types types -> types
    java.util.Map unaryOperators -> unaryOperators
    java.util.Map binaryOperators -> binaryOperators
    org.openjdk.tools.javac.util.Name[] opname -> opname
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol noOpSymbol -> noOpSymbol
    org.openjdk.tools.javac.comp.Operators instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.code.Type unaryPromotion(org.openjdk.tools.javac.code.Type) -> unaryPromotion
    org.openjdk.tools.javac.code.Type binaryPromotion(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> binaryPromotion
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolveUnary(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.code.Type) -> resolveUnary
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolveBinary(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> resolveBinary
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.tree.JCTree$Tag,java.util.Map,java.util.function.Predicate,java.util.function.Function,java.util.function.Supplier) -> resolve
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol makeOperator(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Operators$OperatorType,int[]) -> makeOperator
    int mergeOpcodes(int[]) -> mergeOpcodes
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol reportErrorIfNeeded(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.code.Type[]) -> reportErrorIfNeeded
    org.openjdk.tools.javac.util.Name operatorName(org.openjdk.tools.javac.tree.JCTree$Tag) -> operatorName
    void initUnaryOperators() -> initUnaryOperators
    void initBinaryOperators() -> initBinaryOperators
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol lookupBinaryOp(java.util.function.Predicate) -> lookupBinaryOp
    void initOperators(java.util.Map,org.openjdk.tools.javac.comp.Operators$OperatorHelper[]) -> initOperators
    void initOperatorNames() -> initOperatorNames
    void setOperatorName(org.openjdk.tools.javac.tree.JCTree$Tag,java.lang.String) -> setOperatorName
    void setOperatorName(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.util.Name) -> setOperatorName
    boolean lambda$lookupBinaryOp$8(org.openjdk.tools.javac.code.Symbol$OperatorSymbol) -> lambda$lookupBinaryOp$8
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol lambda$lookupBinaryOp$7(java.util.function.Predicate,org.openjdk.tools.javac.comp.Operators$BinaryOperatorHelper) -> lambda$lookupBinaryOp$7
    org.openjdk.tools.javac.code.Type lambda$makeOperator$6(org.openjdk.tools.javac.comp.Operators$OperatorType) -> lambda$makeOperator$6
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol lambda$resolveBinary$5(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> lambda$resolveBinary$5
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol lambda$resolveBinary$4(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Operators$BinaryOperatorHelper) -> lambda$resolveBinary$4
    boolean lambda$resolveBinary$3(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Operators$BinaryOperatorHelper) -> lambda$resolveBinary$3
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol lambda$resolveUnary$2(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.code.Type) -> lambda$resolveUnary$2
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol lambda$resolveUnary$1(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Operators$UnaryOperatorHelper) -> lambda$resolveUnary$1
    boolean lambda$resolveUnary$0(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Operators$UnaryOperatorHelper) -> lambda$resolveUnary$0
    org.openjdk.tools.javac.code.Types access$000(org.openjdk.tools.javac.comp.Operators) -> access$000
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol access$100(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Operators$OperatorType,int[]) -> access$100
    org.openjdk.tools.javac.code.Symtab access$200(org.openjdk.tools.javac.comp.Operators) -> access$200
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Operators$1 -> org.openjdk.tools.javac.comp.Operators$1:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Operators$BinaryBooleanOperator -> org.openjdk.tools.javac.comp.Operators$BinaryBooleanOperator:
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> resolve
    boolean test(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> test
    boolean test(java.lang.Object,java.lang.Object) -> test
org.openjdk.tools.javac.comp.Operators$BinaryEqualityOperator -> org.openjdk.tools.javac.comp.Operators$BinaryEqualityOperator:
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    boolean test(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> test
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> resolve
    org.openjdk.tools.javac.comp.Operators$ComparisonKind getKind(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> getKind
    boolean test(java.lang.Object,java.lang.Object) -> test
org.openjdk.tools.javac.comp.Operators$BinaryNumericOperator -> org.openjdk.tools.javac.comp.Operators$BinaryNumericOperator:
    java.util.function.Predicate numericTest -> numericTest
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag,java.util.function.Predicate) -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> resolve
    boolean test(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> test
    boolean test(java.lang.Object,java.lang.Object) -> test
org.openjdk.tools.javac.comp.Operators$BinaryOperatorHelper -> org.openjdk.tools.javac.comp.Operators$BinaryOperatorHelper:
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol doLookup(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> doLookup
    boolean isBinaryOperatorApplicable(org.openjdk.tools.javac.code.Symbol$OperatorSymbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> isBinaryOperatorApplicable
    org.openjdk.tools.javac.comp.Operators$BinaryOperatorHelper addBinaryOperator(org.openjdk.tools.javac.comp.Operators$OperatorType,org.openjdk.tools.javac.comp.Operators$OperatorType,org.openjdk.tools.javac.comp.Operators$OperatorType,int[]) -> addBinaryOperator
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> resolve
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol lambda$addBinaryOperator$1(org.openjdk.tools.javac.comp.Operators$OperatorType,org.openjdk.tools.javac.comp.Operators$OperatorType,org.openjdk.tools.javac.comp.Operators$OperatorType,int[]) -> lambda$addBinaryOperator$1
    boolean lambda$doLookup$0(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$OperatorSymbol) -> lambda$doLookup$0
org.openjdk.tools.javac.comp.Operators$BinaryShiftOperator -> org.openjdk.tools.javac.comp.Operators$BinaryShiftOperator:
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> resolve
    boolean test(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> test
    boolean test(java.lang.Object,java.lang.Object) -> test
org.openjdk.tools.javac.comp.Operators$BinaryStringOperator -> org.openjdk.tools.javac.comp.Operators$BinaryStringOperator:
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> resolve
    boolean test(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> test
    org.openjdk.tools.javac.code.Type stringPromotion(org.openjdk.tools.javac.code.Type) -> stringPromotion
    boolean test(java.lang.Object,java.lang.Object) -> test
org.openjdk.tools.javac.comp.Operators$ComparisonKind -> org.openjdk.tools.javac.comp.Operators$ComparisonKind:
    org.openjdk.tools.javac.comp.Operators$ComparisonKind NUMERIC_OR_BOOLEAN -> NUMERIC_OR_BOOLEAN
    org.openjdk.tools.javac.comp.Operators$ComparisonKind REFERENCE -> REFERENCE
    org.openjdk.tools.javac.comp.Operators$ComparisonKind INVALID -> INVALID
    org.openjdk.tools.javac.comp.Operators$ComparisonKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Operators$ComparisonKind[] values() -> values
    org.openjdk.tools.javac.comp.Operators$ComparisonKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Operators$OperatorHelper -> org.openjdk.tools.javac.comp.Operators$OperatorHelper:
    org.openjdk.tools.javac.util.Name name -> name
    java.util.Optional alternatives -> alternatives
    org.openjdk.tools.javac.util.List operatorSuppliers -> operatorSuppliers
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol doLookup(java.util.function.Predicate) -> doLookup
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol[] initOperators() -> initOperators
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol[] lambda$initOperators$0(int) -> lambda$initOperators$0
org.openjdk.tools.javac.comp.Operators$OperatorType -> org.openjdk.tools.javac.comp.Operators$OperatorType:
    org.openjdk.tools.javac.comp.Operators$OperatorType BYTE -> BYTE
    org.openjdk.tools.javac.comp.Operators$OperatorType SHORT -> SHORT
    org.openjdk.tools.javac.comp.Operators$OperatorType INT -> INT
    org.openjdk.tools.javac.comp.Operators$OperatorType LONG -> LONG
    org.openjdk.tools.javac.comp.Operators$OperatorType FLOAT -> FLOAT
    org.openjdk.tools.javac.comp.Operators$OperatorType DOUBLE -> DOUBLE
    org.openjdk.tools.javac.comp.Operators$OperatorType CHAR -> CHAR
    org.openjdk.tools.javac.comp.Operators$OperatorType BOOLEAN -> BOOLEAN
    org.openjdk.tools.javac.comp.Operators$OperatorType OBJECT -> OBJECT
    org.openjdk.tools.javac.comp.Operators$OperatorType STRING -> STRING
    org.openjdk.tools.javac.comp.Operators$OperatorType BOT -> BOT
    java.util.function.Function asTypeFunc -> asTypeFunc
    org.openjdk.tools.javac.comp.Operators$OperatorType[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Operators$OperatorType[] values() -> values
    org.openjdk.tools.javac.comp.Operators$OperatorType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.util.function.Function) -> <init>
    org.openjdk.tools.javac.code.Type asType(org.openjdk.tools.javac.code.Symtab) -> asType
    org.openjdk.tools.javac.code.Type lambda$static$10(org.openjdk.tools.javac.code.Symtab) -> lambda$static$10
    org.openjdk.tools.javac.code.Type lambda$static$9(org.openjdk.tools.javac.code.Symtab) -> lambda$static$9
    org.openjdk.tools.javac.code.Type lambda$static$8(org.openjdk.tools.javac.code.Symtab) -> lambda$static$8
    org.openjdk.tools.javac.code.Type lambda$static$7(org.openjdk.tools.javac.code.Symtab) -> lambda$static$7
    org.openjdk.tools.javac.code.Type lambda$static$6(org.openjdk.tools.javac.code.Symtab) -> lambda$static$6
    org.openjdk.tools.javac.code.Type lambda$static$5(org.openjdk.tools.javac.code.Symtab) -> lambda$static$5
    org.openjdk.tools.javac.code.Type lambda$static$4(org.openjdk.tools.javac.code.Symtab) -> lambda$static$4
    org.openjdk.tools.javac.code.Type lambda$static$3(org.openjdk.tools.javac.code.Symtab) -> lambda$static$3
    org.openjdk.tools.javac.code.Type lambda$static$2(org.openjdk.tools.javac.code.Symtab) -> lambda$static$2
    org.openjdk.tools.javac.code.Type lambda$static$1(org.openjdk.tools.javac.code.Symtab) -> lambda$static$1
    org.openjdk.tools.javac.code.Type lambda$static$0(org.openjdk.tools.javac.code.Symtab) -> lambda$static$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Operators$UnaryBooleanOperator -> org.openjdk.tools.javac.comp.Operators$UnaryBooleanOperator:
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    boolean test(org.openjdk.tools.javac.code.Type) -> test
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type) -> resolve
    boolean test(java.lang.Object) -> test
org.openjdk.tools.javac.comp.Operators$UnaryNumericOperator -> org.openjdk.tools.javac.comp.Operators$UnaryNumericOperator:
    java.util.function.Predicate numericTest -> numericTest
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag,java.util.function.Predicate) -> <init>
    boolean test(org.openjdk.tools.javac.code.Type) -> test
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type) -> resolve
    boolean test(java.lang.Object) -> test
org.openjdk.tools.javac.comp.Operators$UnaryOperatorHelper -> org.openjdk.tools.javac.comp.Operators$UnaryOperatorHelper:
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol doLookup(org.openjdk.tools.javac.code.Type) -> doLookup
    boolean isUnaryOperatorApplicable(org.openjdk.tools.javac.code.Symbol$OperatorSymbol,org.openjdk.tools.javac.code.Type) -> isUnaryOperatorApplicable
    org.openjdk.tools.javac.comp.Operators$UnaryOperatorHelper addUnaryOperator(org.openjdk.tools.javac.comp.Operators$OperatorType,org.openjdk.tools.javac.comp.Operators$OperatorType,int[]) -> addUnaryOperator
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type) -> resolve
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol lambda$addUnaryOperator$1(org.openjdk.tools.javac.comp.Operators$OperatorType,org.openjdk.tools.javac.comp.Operators$OperatorType,int[]) -> lambda$addUnaryOperator$1
    boolean lambda$doLookup$0(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$OperatorSymbol) -> lambda$doLookup$0
org.openjdk.tools.javac.comp.Operators$UnaryPrefixPostfixOperator -> org.openjdk.tools.javac.comp.Operators$UnaryPrefixPostfixOperator:
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type) -> resolve
org.openjdk.tools.javac.comp.Operators$UnaryReferenceOperator -> org.openjdk.tools.javac.comp.Operators$UnaryReferenceOperator:
    org.openjdk.tools.javac.comp.Operators this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Operators,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    boolean test(org.openjdk.tools.javac.code.Type) -> test
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol resolve(org.openjdk.tools.javac.code.Type) -> resolve
    boolean test(java.lang.Object) -> test
org.openjdk.tools.javac.comp.Resolve -> org.openjdk.tools.javac.comp.Resolve:
    org.openjdk.tools.javac.util.Context$Key resolveKey -> resolveKey
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.comp.DeferredAttr deferredAttr -> deferredAttr
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.comp.Infer infer -> infer
    org.openjdk.tools.javac.code.ClassFinder finder -> finder
    org.openjdk.tools.javac.code.ModuleFinder moduleFinder -> moduleFinder
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    boolean allowMethodHandles -> allowMethodHandles
    boolean allowFunctionalInterfaceMostSpecific -> allowFunctionalInterfaceMostSpecific
    boolean allowModules -> allowModules
    boolean checkVarargsAccessAfterResolution -> checkVarargsAccessAfterResolution
    boolean compactMethodDiags -> compactMethodDiags
    java.util.EnumSet verboseResolutionMode -> verboseResolutionMode
    org.openjdk.tools.javac.code.Scope$WriteableScope polymorphicSignatureScope -> polymorphicSignatureScope
    org.openjdk.tools.javac.comp.Resolve$SymbolNotFoundError varNotFound -> varNotFound
    org.openjdk.tools.javac.comp.Resolve$SymbolNotFoundError methodNotFound -> methodNotFound
    org.openjdk.tools.javac.comp.Resolve$SymbolNotFoundError typeNotFound -> typeNotFound
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult referenceNotFound -> referenceNotFound
    org.openjdk.tools.javac.code.Types$SimpleVisitor accessibilityChecker -> accessibilityChecker
    org.openjdk.tools.javac.comp.Resolve$MethodCheck nilMethodCheck -> nilMethodCheck
    org.openjdk.tools.javac.comp.Resolve$MethodCheck arityMethodCheck -> arityMethodCheck
    org.openjdk.tools.javac.comp.Resolve$MethodCheck resolveMethodCheck -> resolveMethodCheck
    org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException inapplicableMethodException -> inapplicableMethodException
    org.openjdk.tools.javac.util.Warner noteWarner -> noteWarner
    org.openjdk.tools.javac.comp.Resolve$RecoveryLoadClass noRecovery -> noRecovery
    org.openjdk.tools.javac.comp.Resolve$RecoveryLoadClass doRecoveryLoadClass -> doRecoveryLoadClass
    org.openjdk.tools.javac.comp.Resolve$RecoveryLoadClass namedImportScopeRecovery -> namedImportScopeRecovery
    org.openjdk.tools.javac.comp.Resolve$RecoveryLoadClass starImportScopeRecovery -> starImportScopeRecovery
    org.openjdk.tools.javac.comp.Resolve$LogResolveHelper basicLogResolveHelper -> basicLogResolveHelper
    org.openjdk.tools.javac.comp.Resolve$LogResolveHelper methodLogResolveHelper -> methodLogResolveHelper
    org.openjdk.tools.javac.comp.Resolve$ReferenceChooser basicReferenceChooser -> basicReferenceChooser
    org.openjdk.tools.javac.comp.Resolve$ReferenceChooser structuralReferenceChooser -> structuralReferenceChooser
    org.openjdk.tools.javac.api.Formattable$LocalizedString noArgs -> noArgs
    org.openjdk.tools.javac.util.List methodResolutionSteps -> methodResolutionSteps
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext currentResolutionContext -> currentResolutionContext
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.comp.Resolve instance(org.openjdk.tools.javac.util.Context) -> instance
    org.openjdk.tools.javac.code.Symbol bestOf(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> bestOf
    void reportVerboseResolutionDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol) -> reportVerboseResolutionDiagnostic
    org.openjdk.tools.javac.util.JCDiagnostic getVerboseApplicableCandidateDiag(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> getVerboseApplicableCandidateDiag
    org.openjdk.tools.javac.util.JCDiagnostic getVerboseInapplicableCandidateDiag(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> getVerboseInapplicableCandidateDiag
    boolean isStatic(org.openjdk.tools.javac.comp.Env) -> isStatic
    boolean isInitializer(org.openjdk.tools.javac.comp.Env) -> isInitializer
    boolean isAccessible(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> isAccessible
    boolean isAccessible(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$TypeSymbol,boolean) -> isAccessible
    boolean isInnerSubClass(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Symbol) -> isInnerSubClass
    boolean isAccessible(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type) -> isAccessible
    boolean isAccessible(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,boolean) -> isAccessible
    boolean isAccessible(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> isAccessible
    boolean isAccessible(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,boolean) -> isAccessible
    boolean notOverriddenIn(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> notOverriddenIn
    boolean isProtectedAccessible(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Type) -> isProtectedAccessible
    void checkAccessibleType(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type) -> checkAccessibleType
    org.openjdk.tools.javac.code.Type rawInstantiate(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean,boolean,org.openjdk.tools.javac.util.Warner) -> rawInstantiate
    org.openjdk.tools.javac.code.Type checkMethod(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> checkMethod
    org.openjdk.tools.javac.code.Type instantiate(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean,boolean,org.openjdk.tools.javac.util.Warner) -> instantiate
    org.openjdk.tools.javac.util.List dummyArgs(int) -> dummyArgs
    org.openjdk.tools.javac.code.Symbol findField(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> findField
    org.openjdk.tools.javac.code.Symbol$VarSymbol resolveInternalField(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name) -> resolveInternalField
    org.openjdk.tools.javac.code.Symbol findVar(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name) -> findVar
    org.openjdk.tools.javac.code.Symbol selectBest(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,boolean,boolean) -> selectBest
    org.openjdk.tools.javac.code.Symbol mostSpecific(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,boolean) -> mostSpecific
    boolean signatureMoreSpecific(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,boolean) -> signatureMoreSpecific
    org.openjdk.tools.javac.util.List adjustArgs(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol,int,boolean) -> adjustArgs
    org.openjdk.tools.javac.code.Symbol ambiguityError(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> ambiguityError
    org.openjdk.tools.javac.code.Symbol findMethodInScope(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Symbol,boolean,boolean,boolean) -> findMethodInScope
    org.openjdk.tools.javac.code.Symbol findMethod(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean,boolean) -> findMethod
    org.openjdk.tools.javac.code.Symbol findMethod(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,boolean,boolean) -> findMethod
    java.lang.Iterable superclasses(org.openjdk.tools.javac.code.Type) -> superclasses
    org.openjdk.tools.javac.code.Symbol findFun(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean,boolean) -> findFun
    org.openjdk.tools.javac.code.Symbol loadClass(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.comp.Resolve$RecoveryLoadClass) -> loadClass
    org.openjdk.tools.javac.code.Symbol lookupPackage(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name) -> lookupPackage
    boolean isImportOnDemand(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name) -> isImportOnDemand
    org.openjdk.tools.javac.code.Symbol lookupInvisibleSymbol(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name,java.util.function.Function,java.util.function.BiFunction,java.util.function.Predicate,boolean,org.openjdk.tools.javac.code.Symbol) -> lookupInvisibleSymbol
    org.openjdk.tools.javac.code.Symbol createInvisibleSymbolError(org.openjdk.tools.javac.comp.Env,boolean,org.openjdk.tools.javac.code.Symbol) -> createInvisibleSymbolError
    boolean symbolPackageVisible(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol) -> symbolPackageVisible
    org.openjdk.tools.javac.code.Symbol findImmediateMemberType(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> findImmediateMemberType
    org.openjdk.tools.javac.code.Symbol findInheritedMemberType(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> findInheritedMemberType
    org.openjdk.tools.javac.code.Symbol findMemberType(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> findMemberType
    org.openjdk.tools.javac.code.Symbol findGlobalType(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.comp.Resolve$RecoveryLoadClass) -> findGlobalType
    org.openjdk.tools.javac.code.Symbol findTypeVar(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name,boolean) -> findTypeVar
    org.openjdk.tools.javac.code.Symbol findType(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name) -> findType
    org.openjdk.tools.javac.code.Symbol findIdent(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Kinds$KindSelector) -> findIdent
    org.openjdk.tools.javac.code.Symbol findIdentInPackage(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Kinds$KindSelector) -> findIdentInPackage
    org.openjdk.tools.javac.code.Symbol findIdentInType(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Kinds$KindSelector) -> findIdentInType
    org.openjdk.tools.javac.code.Symbol accessInternal(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,boolean,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$LogResolveHelper) -> accessInternal
    org.openjdk.tools.javac.code.Symbol accessMethod(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,boolean,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> accessMethod
    org.openjdk.tools.javac.code.Symbol accessMethod(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,boolean,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> accessMethod
    org.openjdk.tools.javac.code.Symbol accessBase(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,boolean) -> accessBase
    org.openjdk.tools.javac.code.Symbol accessBase(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,boolean) -> accessBase
    void checkNonAbstract(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> checkNonAbstract
    org.openjdk.tools.javac.code.Symbol resolveIdent(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Kinds$KindSelector) -> resolveIdent
    org.openjdk.tools.javac.code.Symbol resolveMethod(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveMethod
    org.openjdk.tools.javac.code.Symbol resolveQualifiedMethod(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveQualifiedMethod
    org.openjdk.tools.javac.code.Symbol resolveQualifiedMethod(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveQualifiedMethod
    org.openjdk.tools.javac.code.Symbol resolveQualifiedMethod(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveQualifiedMethod
    org.openjdk.tools.javac.code.Symbol findPolymorphicSignatureInstance(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List) -> findPolymorphicSignatureInstance
    org.openjdk.tools.javac.code.Symbol$MethodSymbol resolveInternalMethod(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveInternalMethod
    org.openjdk.tools.javac.code.Symbol resolveConstructor(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveConstructor
    org.openjdk.tools.javac.code.Symbol resolveConstructor(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveConstructor
    org.openjdk.tools.javac.code.Symbol$MethodSymbol resolveInternalConstructor(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveInternalConstructor
    org.openjdk.tools.javac.code.Symbol findConstructor(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean,boolean) -> findConstructor
    org.openjdk.tools.javac.code.Symbol resolveDiamond(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveDiamond
    org.openjdk.tools.javac.code.Symbol findDiamond(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean,boolean) -> findDiamond
    org.openjdk.tools.javac.code.Symbol getMemberReference(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name) -> getMemberReference
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupHelper makeReferenceLookupHelper(org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> makeReferenceLookupHelper
    org.openjdk.tools.javac.util.Pair resolveMemberReference(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodCheck,org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.comp.Resolve$ReferenceChooser) -> resolveMemberReference
    org.openjdk.tools.javac.code.Symbol lookupMethod(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodCheck,org.openjdk.tools.javac.comp.Resolve$LookupHelper) -> lookupMethod
    org.openjdk.tools.javac.code.Symbol lookupMethod(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.comp.Resolve$LookupHelper) -> lookupMethod
    org.openjdk.tools.javac.code.Symbol resolveSelf(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.Name) -> resolveSelf
    org.openjdk.tools.javac.util.List pruneInterfaces(org.openjdk.tools.javac.code.Type) -> pruneInterfaces
    org.openjdk.tools.javac.code.Symbol resolveSelfContaining(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,boolean) -> resolveSelfContaining
    boolean enclosingInstanceMissing(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type) -> enclosingInstanceMissing
    org.openjdk.tools.javac.code.Symbol resolveSelfContainingInternal(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol,boolean) -> resolveSelfContainingInternal
    org.openjdk.tools.javac.code.Type resolveImplicitThis(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type) -> resolveImplicitThis
    org.openjdk.tools.javac.code.Type resolveImplicitThis(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,boolean) -> resolveImplicitThis
    void logAccessErrorInternal(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> logAccessErrorInternal
    void logResolveError(org.openjdk.tools.javac.comp.Resolve$ResolveError,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> logResolveError
    java.lang.Object methodArguments(org.openjdk.tools.javac.util.List) -> methodArguments
    org.openjdk.tools.javac.util.JCDiagnostic inaccessiblePackageReason(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> inaccessiblePackageReason
    boolean lambda$inaccessiblePackageReason$8(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.tools.javac.code.Directive$ExportsDirective) -> lambda$inaccessiblePackageReason$8
    boolean lambda$lookupPackage$7(org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> lambda$lookupPackage$7
    boolean lambda$lookupPackage$6(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$PackageSymbol) -> lambda$lookupPackage$6
    org.openjdk.tools.javac.code.Symbol lambda$new$5(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name) -> lambda$new$5
    boolean lambda$null$4(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> lambda$null$4
    org.openjdk.tools.javac.code.Symbol lambda$new$3(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name) -> lambda$new$3
    boolean lambda$null$2(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> lambda$null$2
    org.openjdk.tools.javac.code.Symbol lambda$new$1(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name) -> lambda$new$1
    java.util.Iterator lambda$superclasses$0(org.openjdk.tools.javac.code.Type) -> lambda$superclasses$0
    org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException access$300(org.openjdk.tools.javac.comp.Resolve) -> access$300
    org.openjdk.tools.javac.comp.Resolve$SymbolNotFoundError access$900(org.openjdk.tools.javac.comp.Resolve) -> access$900
    org.openjdk.tools.javac.code.Symbol access$1000(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name,java.util.function.Function,java.util.function.BiFunction,java.util.function.Predicate,boolean,org.openjdk.tools.javac.code.Symbol) -> access$1000
    org.openjdk.tools.javac.code.Symbol access$1100(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean,boolean) -> access$1100
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult access$1300(org.openjdk.tools.javac.comp.Resolve) -> access$1300
    org.openjdk.tools.javac.comp.Resolve$SymbolNotFoundError access$1400(org.openjdk.tools.javac.comp.Resolve) -> access$1400
    boolean access$1500(org.openjdk.tools.javac.comp.Resolve) -> access$1500
    boolean access$1600(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Symbol) -> access$1600
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Resolve$1 -> org.openjdk.tools.javac.comp.Resolve$1:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    void visit(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> visit
    java.lang.Void visitType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Env) -> visitType
    java.lang.Void visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,org.openjdk.tools.javac.comp.Env) -> visitArrayType
    java.lang.Void visitClassType(org.openjdk.tools.javac.code.Type$ClassType,org.openjdk.tools.javac.comp.Env) -> visitClassType
    java.lang.Void visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,org.openjdk.tools.javac.comp.Env) -> visitWildcardType
    java.lang.Void visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.comp.Env) -> visitMethodType
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.comp.Resolve$10 -> org.openjdk.tools.javac.comp.Resolve$10:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.code.Symbol doLookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> doLookup
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> access
org.openjdk.tools.javac.comp.Resolve$11 -> org.openjdk.tools.javac.comp.Resolve$11:
    org.openjdk.tools.javac.code.Symbol val$spMethod -> val$spMethod
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
org.openjdk.tools.javac.comp.Resolve$12 -> org.openjdk.tools.javac.comp.Resolve$12:
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition val$pos -> val$pos
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> <init>
    org.openjdk.tools.javac.code.Symbol doLookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> doLookup
org.openjdk.tools.javac.comp.Resolve$13 -> org.openjdk.tools.javac.comp.Resolve$13:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.code.Symbol doLookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> doLookup
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> access
org.openjdk.tools.javac.comp.Resolve$14 -> org.openjdk.tools.javac.comp.Resolve$14:
    org.openjdk.tools.javac.code.Symbol val$sym -> val$sym
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
org.openjdk.tools.javac.comp.Resolve$15 -> org.openjdk.tools.javac.comp.Resolve$15:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    org.openjdk.tools.javac.code.Symbol boundResult(org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult) -> boundResult
    org.openjdk.tools.javac.code.Symbol unboundResult(org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult,org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult) -> unboundResult
org.openjdk.tools.javac.comp.Resolve$16 -> org.openjdk.tools.javac.comp.Resolve$16:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    org.openjdk.tools.javac.code.Symbol boundResult(org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult) -> boundResult
    org.openjdk.tools.javac.code.Symbol unboundResult(org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult,org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult) -> unboundResult
org.openjdk.tools.javac.comp.Resolve$17 -> org.openjdk.tools.javac.comp.Resolve$17:
    int[] $SwitchMap$com$sun$tools$javac$code$Kinds$Kind -> $SwitchMap$com$sun$tools$javac$code$Kinds$Kind
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    int[] $SwitchMap$com$sun$tools$javac$code$Kinds$KindName -> $SwitchMap$com$sun$tools$javac$code$Kinds$KindName
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Resolve$2 -> org.openjdk.tools.javac.comp.Resolve$2:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    void argumentsAcceptable(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> argumentsAcceptable
    org.openjdk.tools.javac.comp.Resolve$MethodCheck mostSpecificCheck(org.openjdk.tools.javac.util.List) -> mostSpecificCheck
org.openjdk.tools.javac.comp.Resolve$3 -> org.openjdk.tools.javac.comp.Resolve$3:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    void checkArg(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,boolean,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner) -> checkArg
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Resolve$4 -> org.openjdk.tools.javac.comp.Resolve$4:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    void checkArg(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,boolean,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner) -> checkArg
    void argumentsAcceptable(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> argumentsAcceptable
    void varargsAccessible(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.InferenceContext) -> varargsAccessible
    org.openjdk.tools.javac.comp.Attr$ResultInfo methodCheckResult(boolean,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner) -> methodCheckResult
    org.openjdk.tools.javac.comp.Resolve$MethodCheck mostSpecificCheck(org.openjdk.tools.javac.util.List) -> mostSpecificCheck
    java.lang.String toString() -> toString
    void lambda$varargsAccessible$0(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.InferenceContext) -> lambda$varargsAccessible$0
org.openjdk.tools.javac.comp.Resolve$4$1 -> org.openjdk.tools.javac.comp.Resolve$4$1:
    org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag methodDiag -> methodDiag
    boolean val$varargsCheck -> val$varargsCheck
    org.openjdk.tools.javac.comp.Resolve$4 this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.Resolve$4,boolean,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner,boolean) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
org.openjdk.tools.javac.comp.Resolve$5 -> org.openjdk.tools.javac.comp.Resolve$5:
    org.openjdk.tools.javac.code.Symbol$TypeSymbol currentSym -> currentSym
    org.openjdk.tools.javac.code.Symbol$TypeSymbol prevSym -> prevSym
    org.openjdk.tools.javac.util.List seen -> seen
    org.openjdk.tools.javac.code.Type val$intype -> val$intype
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Type) -> <init>
    boolean hasNext() -> hasNext
    org.openjdk.tools.javac.code.Symbol$TypeSymbol next() -> next
    void remove() -> remove
    org.openjdk.tools.javac.code.Symbol$TypeSymbol symbolFor(org.openjdk.tools.javac.code.Type) -> symbolFor
    java.lang.Object next() -> next
org.openjdk.tools.javac.comp.Resolve$6 -> org.openjdk.tools.javac.comp.Resolve$6:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    org.openjdk.tools.javac.code.Symbol loadClass(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name) -> loadClass
    boolean lambda$loadClass$4(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> lambda$loadClass$4
    org.openjdk.tools.javac.code.Symbol$ClassSymbol lambda$loadClass$3(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.Name) -> lambda$loadClass$3
    java.lang.Iterable lambda$loadClass$2(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Name) -> lambda$loadClass$2
    java.util.Iterator lambda$null$1(org.openjdk.tools.javac.util.List) -> lambda$null$1
    java.util.Iterator lambda$null$0(org.openjdk.tools.javac.util.Name) -> lambda$null$0
org.openjdk.tools.javac.comp.Resolve$7 -> org.openjdk.tools.javac.comp.Resolve$7:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    boolean resolveDiagnosticNeeded(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveDiagnosticNeeded
    org.openjdk.tools.javac.util.List getArgumentTypes(org.openjdk.tools.javac.comp.Resolve$ResolveError,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> getArgumentTypes
org.openjdk.tools.javac.comp.Resolve$8 -> org.openjdk.tools.javac.comp.Resolve$8:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    boolean resolveDiagnosticNeeded(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveDiagnosticNeeded
    org.openjdk.tools.javac.util.List getArgumentTypes(org.openjdk.tools.javac.comp.Resolve$ResolveError,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> getArgumentTypes
org.openjdk.tools.javac.comp.Resolve$9 -> org.openjdk.tools.javac.comp.Resolve$9:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.code.Symbol doLookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> doLookup
org.openjdk.tools.javac.comp.Resolve$AbstractMethodCheck -> org.openjdk.tools.javac.comp.Resolve$AbstractMethodCheck:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    void argumentsAcceptable(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> argumentsAcceptable
    org.openjdk.tools.javac.tree.JCTree treeForDiagnostics(org.openjdk.tools.javac.comp.Env) -> treeForDiagnostics
    void checkArg(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,boolean,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner) -> checkArg
    void reportMC(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag,org.openjdk.tools.javac.comp.InferenceContext,java.lang.Object[]) -> reportMC
    org.openjdk.tools.javac.comp.Resolve$MethodCheck mostSpecificCheck(org.openjdk.tools.javac.util.List) -> mostSpecificCheck
org.openjdk.tools.javac.comp.Resolve$AccessError -> org.openjdk.tools.javac.comp.Resolve$AccessError:
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.code.Type site -> site
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    boolean exists() -> exists
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
    java.lang.String toString(org.openjdk.tools.javac.code.Type) -> toString
org.openjdk.tools.javac.comp.Resolve$AmbiguityError -> org.openjdk.tools.javac.comp.Resolve$AmbiguityError:
    org.openjdk.tools.javac.util.List ambiguousSyms -> ambiguousSyms
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    boolean exists() -> exists
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.util.List flatten(org.openjdk.tools.javac.code.Symbol) -> flatten
    org.openjdk.tools.javac.comp.Resolve$AmbiguityError addAmbiguousSymbol(org.openjdk.tools.javac.code.Symbol) -> addAmbiguousSymbol
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
    org.openjdk.tools.javac.code.Symbol mergeAbstracts(org.openjdk.tools.javac.code.Type) -> mergeAbstracts
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> access
org.openjdk.tools.javac.comp.Resolve$ArrayConstructorReferenceLookupHelper -> org.openjdk.tools.javac.comp.Resolve$ArrayConstructorReferenceLookupHelper:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.code.Symbol lookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> lookup
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind referenceKind(org.openjdk.tools.javac.code.Symbol) -> referenceKind
org.openjdk.tools.javac.comp.Resolve$BadConstructorReferenceError -> org.openjdk.tools.javac.comp.Resolve$BadConstructorReferenceError:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
org.openjdk.tools.javac.comp.Resolve$BadMethodReferenceError -> org.openjdk.tools.javac.comp.Resolve$BadMethodReferenceError:
    boolean unboundLookup -> unboundLookup
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Symbol,boolean) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
org.openjdk.tools.javac.comp.Resolve$BadVarargsMethod -> org.openjdk.tools.javac.comp.Resolve$BadVarargsMethod:
    org.openjdk.tools.javac.comp.Resolve$ResolveError delegatedError -> delegatedError
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.Resolve$ResolveError) -> <init>
    org.openjdk.tools.javac.code.Symbol baseSymbol() -> baseSymbol
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> access
    boolean exists() -> exists
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
org.openjdk.tools.javac.comp.Resolve$BasicLookupHelper -> org.openjdk.tools.javac.comp.Resolve$BasicLookupHelper:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.code.Symbol lookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> lookup
    org.openjdk.tools.javac.code.Symbol doLookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> doLookup
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> access
    void debug(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> debug
org.openjdk.tools.javac.comp.Resolve$ConstructorReferenceLookupHelper -> org.openjdk.tools.javac.comp.Resolve$ConstructorReferenceLookupHelper:
    boolean needsInference -> needsInference
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.code.Symbol lookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> lookup
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind referenceKind(org.openjdk.tools.javac.code.Symbol) -> referenceKind
org.openjdk.tools.javac.comp.Resolve$DiamondError -> org.openjdk.tools.javac.comp.Resolve$DiamondError:
    org.openjdk.tools.javac.code.Symbol sym -> sym
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic getDetails() -> getDetails
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException -> org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.util.JCDiagnostic diagnostic -> diagnostic
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic$Factory) -> <init>
    org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException setMessage() -> setMessage
    org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException setMessage(java.lang.String) -> setMessage
    org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException setMessage(java.lang.String,java.lang.Object[]) -> setMessage
    org.openjdk.tools.javac.comp.Resolve$InapplicableMethodException setMessage(org.openjdk.tools.javac.util.JCDiagnostic) -> setMessage
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic() -> getDiagnostic
org.openjdk.tools.javac.comp.Resolve$InapplicableSymbolError -> org.openjdk.tools.javac.comp.Resolve$InapplicableSymbolError:
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext resolveContext -> resolveContext
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Kinds$Kind,java.lang.String,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext) -> <init>
    java.lang.String toString() -> toString
    boolean exists() -> exists
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> access
    org.openjdk.tools.javac.util.Pair errCandidate() -> errCandidate
org.openjdk.tools.javac.comp.Resolve$InapplicableSymbolsError -> org.openjdk.tools.javac.comp.Resolve$InapplicableSymbolsError:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
    java.util.Map mapCandidates() -> mapCandidates
    java.util.Map filterCandidates(java.util.Map) -> filterCandidates
    org.openjdk.tools.javac.util.List candidateDetails(java.util.Map,org.openjdk.tools.javac.code.Type) -> candidateDetails
    java.util.Map access$1200(org.openjdk.tools.javac.comp.Resolve$InapplicableSymbolsError) -> access$1200
org.openjdk.tools.javac.comp.Resolve$InapplicableSymbolsError$1 -> org.openjdk.tools.javac.comp.Resolve$InapplicableSymbolsError$1:
    org.openjdk.tools.javac.util.Pair val$p -> val$p
    org.openjdk.tools.javac.comp.Resolve$InapplicableSymbolsError this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.Resolve$InapplicableSymbolsError,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.util.Pair) -> <init>
    org.openjdk.tools.javac.util.Pair errCandidate() -> errCandidate
org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase -> org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase:
    org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase ABSTRACT_OK -> ABSTRACT_OK
    org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase DEFAULT_OK -> DEFAULT_OK
    org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase[] values() -> values
    org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase update(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve) -> update
    void <init>(java.lang.String,int,org.openjdk.tools.javac.comp.Resolve$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase$1 -> org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase$1:
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase update(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve) -> update
org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase$2 -> org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase$2:
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.comp.Resolve$InterfaceLookupPhase update(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve) -> update
org.openjdk.tools.javac.comp.Resolve$InvalidSymbolError -> org.openjdk.tools.javac.comp.Resolve$InvalidSymbolError:
    org.openjdk.tools.javac.code.Symbol sym -> sym
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,java.lang.String) -> <init>
    boolean exists() -> exists
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> access
org.openjdk.tools.javac.comp.Resolve$InvisibleSymbolError -> org.openjdk.tools.javac.comp.Resolve$InvisibleSymbolError:
    org.openjdk.tools.javac.comp.Env env -> env
    boolean suppressError -> suppressError
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.Env,boolean,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
org.openjdk.tools.javac.comp.Resolve$LogResolveHelper -> org.openjdk.tools.javac.comp.Resolve$LogResolveHelper:
    boolean resolveDiagnosticNeeded(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> resolveDiagnosticNeeded
    org.openjdk.tools.javac.util.List getArgumentTypes(org.openjdk.tools.javac.comp.Resolve$ResolveError,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> getArgumentTypes
org.openjdk.tools.javac.comp.Resolve$LookupFilter -> org.openjdk.tools.javac.comp.Resolve$LookupFilter:
    boolean abstractOk -> abstractOk
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,boolean) -> <init>
    boolean accepts(org.openjdk.tools.javac.code.Symbol) -> accepts
    boolean accepts(java.lang.Object) -> accepts
org.openjdk.tools.javac.comp.Resolve$LookupHelper -> org.openjdk.tools.javac.comp.Resolve$LookupHelper:
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.code.Type site -> site
    org.openjdk.tools.javac.util.List argtypes -> argtypes
    org.openjdk.tools.javac.util.List typeargtypes -> typeargtypes
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase maxPhase -> maxPhase
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    boolean shouldStop(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> shouldStop
    org.openjdk.tools.javac.code.Symbol lookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> lookup
    void debug(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol) -> debug
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> access
org.openjdk.tools.javac.comp.Resolve$MethodCheck -> org.openjdk.tools.javac.comp.Resolve$MethodCheck:
    void argumentsAcceptable(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> argumentsAcceptable
    org.openjdk.tools.javac.comp.Resolve$MethodCheck mostSpecificCheck(org.openjdk.tools.javac.util.List) -> mostSpecificCheck
org.openjdk.tools.javac.comp.Resolve$MethodCheckContext -> org.openjdk.tools.javac.comp.Resolve$MethodCheckContext:
    boolean strict -> strict
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext deferredAttrContext -> deferredAttrContext
    org.openjdk.tools.javac.util.Warner rsWarner -> rsWarner
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,boolean,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner) -> <init>
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
    org.openjdk.tools.javac.util.Warner checkWarner(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> checkWarner
    org.openjdk.tools.javac.comp.InferenceContext inferenceContext() -> inferenceContext
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext deferredAttrContext() -> deferredAttrContext
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag -> org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag:
    org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag ARITY_MISMATCH -> ARITY_MISMATCH
    org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag ARG_MISMATCH -> ARG_MISMATCH
    org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag VARARG_MISMATCH -> VARARG_MISMATCH
    org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag INACCESSIBLE_VARARGS -> INACCESSIBLE_VARARGS
    java.lang.String basicKey -> basicKey
    java.lang.String inferKey -> inferKey
    org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag[] values() -> values
    org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String regex() -> regex
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Resolve$MethodReferenceCheck -> org.openjdk.tools.javac.comp.Resolve$MethodReferenceCheck:
    org.openjdk.tools.javac.comp.InferenceContext pendingInferenceContext -> pendingInferenceContext
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.InferenceContext) -> <init>
    void checkArg(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,boolean,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner) -> checkArg
    org.openjdk.tools.javac.comp.Attr$ResultInfo methodCheckResult(boolean,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner) -> methodCheckResult
    org.openjdk.tools.javac.comp.Resolve$MethodCheck mostSpecificCheck(org.openjdk.tools.javac.util.List) -> mostSpecificCheck
    java.lang.String toString() -> toString
org.openjdk.tools.javac.comp.Resolve$MethodReferenceCheck$1 -> org.openjdk.tools.javac.comp.Resolve$MethodReferenceCheck$1:
    org.openjdk.tools.javac.comp.Resolve$MethodCheckDiag methodDiag -> methodDiag
    boolean val$varargsCheck -> val$varargsCheck
    org.openjdk.tools.javac.comp.Resolve$MethodReferenceCheck this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.Resolve$MethodReferenceCheck,boolean,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner,boolean) -> <init>
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic) -> report
org.openjdk.tools.javac.comp.Resolve$MethodReferenceLookupHelper -> org.openjdk.tools.javac.comp.Resolve$MethodReferenceLookupHelper:
    org.openjdk.tools.javac.code.Type originalSite -> originalSite
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.code.Symbol lookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> lookup
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupHelper unboundLookup(org.openjdk.tools.javac.comp.InferenceContext) -> unboundLookup
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind referenceKind(org.openjdk.tools.javac.code.Symbol) -> referenceKind
org.openjdk.tools.javac.comp.Resolve$MethodReferenceLookupHelper$1 -> org.openjdk.tools.javac.comp.Resolve$MethodReferenceLookupHelper$1:
    org.openjdk.tools.javac.comp.Resolve$MethodReferenceLookupHelper this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.Resolve$MethodReferenceLookupHelper,org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupHelper unboundLookup(org.openjdk.tools.javac.comp.InferenceContext) -> unboundLookup
    org.openjdk.tools.javac.code.Symbol lookup(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> lookup
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind referenceKind(org.openjdk.tools.javac.code.Symbol) -> referenceKind
org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext:
    org.openjdk.tools.javac.util.List candidates -> candidates
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase step -> step
    org.openjdk.tools.javac.comp.Resolve$MethodCheck methodCheck -> methodCheck
    boolean internalResolution -> internalResolution
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode attrMode -> attrMode
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    void addInapplicableCandidate(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> addInapplicableCandidate
    void addApplicableCandidate(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> addApplicableCandidate
    org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext deferredAttrContext(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.InferenceContext,org.openjdk.tools.javac.comp.Attr$ResultInfo,org.openjdk.tools.javac.util.Warner) -> deferredAttrContext
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode attrMode() -> attrMode
    boolean internal() -> internal
    boolean access$000(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext) -> access$000
    org.openjdk.tools.javac.util.List access$100(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext) -> access$100
    org.openjdk.tools.javac.comp.DeferredAttr$AttrMode access$202(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.comp.DeferredAttr$AttrMode) -> access$202
    boolean access$002(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,boolean) -> access$002
org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext$Candidate -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext$Candidate:
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase step -> step
    org.openjdk.tools.javac.code.Symbol sym -> sym
    org.openjdk.tools.javac.util.JCDiagnostic details -> details
    org.openjdk.tools.javac.code.Type mtype -> mtype
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Type) -> <init>
    boolean equals(java.lang.Object) -> equals
    boolean isApplicable() -> isApplicable
    void <init>(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Resolve$1) -> <init>
org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper:
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template skip -> skip
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template argMismatchTemplate -> argMismatchTemplate
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template inferArgMismatchTemplate -> inferArgMismatchTemplate
    java.util.Map rewriters -> rewriters
    void <init>() -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic rewrite(org.openjdk.tools.javac.util.JCDiagnostic$Factory,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic) -> rewrite
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$1 -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$1:
    void <init>(java.lang.String,org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template[]) -> <init>
    boolean matches(java.lang.Object) -> matches
org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$2 -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$2:
    java.util.function.BiPredicate containsPredicate -> containsPredicate
    void <init>(java.lang.String,org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template[]) -> <init>
    boolean matches(java.lang.Object) -> matches
    boolean containsAny(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.List) -> containsAny
    boolean lambda$containsAny$1(org.openjdk.tools.javac.util.List,java.lang.Object) -> lambda$containsAny$1
    boolean lambda$$0(java.lang.Object,org.openjdk.tools.javac.util.List) -> lambda$$0
org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$ArgMismatchRewriter -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$ArgMismatchRewriter:
    int causeIndex -> causeIndex
    void <init>(int) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic rewriteDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$Factory,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic) -> rewriteDiagnostic
org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$DiagnosticRewriter -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$DiagnosticRewriter:
    org.openjdk.tools.javac.util.JCDiagnostic rewriteDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$Factory,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic) -> rewriteDiagnostic
org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template:
    java.lang.String regex -> regex
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template[] subTemplates -> subTemplates
    void <init>(java.lang.String,org.openjdk.tools.javac.comp.Resolve$MethodResolutionDiagHelper$Template[]) -> <init>
    boolean matches(java.lang.Object) -> matches
org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase:
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase BASIC -> BASIC
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase BOX -> BOX
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase VARARITY -> VARARITY
    boolean isBoxingRequired -> isBoxingRequired
    boolean isVarargsRequired -> isVarargsRequired
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase[] values() -> values
    org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean,boolean) -> <init>
    boolean isBoxingRequired() -> isBoxingRequired
    boolean isVarargsRequired() -> isVarargsRequired
    org.openjdk.tools.javac.code.Symbol mergeResults(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> mergeResults
    void <init>(java.lang.String,int,boolean,boolean,org.openjdk.tools.javac.comp.Resolve$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase$1 -> org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase$1:
    void <init>(java.lang.String,int,boolean,boolean) -> <init>
    org.openjdk.tools.javac.code.Symbol mergeResults(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> mergeResults
org.openjdk.tools.javac.comp.Resolve$MethodResultInfo -> org.openjdk.tools.javac.comp.Resolve$MethodResultInfo:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext) -> <init>
    org.openjdk.tools.javac.code.Type check(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> check
    org.openjdk.tools.javac.code.Type U(org.openjdk.tools.javac.code.Type) -> U
    org.openjdk.tools.javac.comp.Resolve$MethodResultInfo dup(org.openjdk.tools.javac.code.Type) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.comp.Check$CheckContext) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Check$CheckContext) -> dup
    org.openjdk.tools.javac.comp.Attr$ResultInfo dup(org.openjdk.tools.javac.code.Type) -> dup
org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck -> org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck:
    org.openjdk.tools.javac.util.List actuals -> actuals
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.util.List) -> <init>
    void argumentsAcceptable(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.Warner) -> argumentsAcceptable
    org.openjdk.tools.javac.comp.Attr$ResultInfo methodCheckResult(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner,org.openjdk.tools.javac.code.Type) -> methodCheckResult
    org.openjdk.tools.javac.comp.Resolve$MethodCheck mostSpecificCheck(org.openjdk.tools.javac.util.List) -> mostSpecificCheck
org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext -> org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext:
    org.openjdk.tools.javac.code.Type actual -> actual
    org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck,org.openjdk.tools.javac.comp.DeferredAttr$DeferredAttrContext,org.openjdk.tools.javac.util.Warner,org.openjdk.tools.javac.code.Type) -> <init>
    boolean compatible(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Warner) -> compatible
    boolean compatibleBySubtyping(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> compatibleBySubtyping
    boolean unrelatedFunctionalInterfaces(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> unrelatedFunctionalInterfaces
    boolean unrelatedInterfaces(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> unrelatedInterfaces
    boolean functionalInterfaceMostSpecific(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree) -> functionalInterfaceMostSpecific
    boolean access$400(org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> access$400
    boolean access$500(org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> access$500
    boolean access$600(org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree) -> access$600
org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext$MostSpecificFunctionReturnChecker -> org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext$MostSpecificFunctionReturnChecker:
    org.openjdk.tools.javac.code.Type tRet -> tRet
    org.openjdk.tools.javac.code.Type sRet -> sRet
    boolean result -> result
    org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext this$2 -> this$2
    void <init>(org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> <init>
    void skip(org.openjdk.tools.javac.tree.JCTree) -> skip
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    org.openjdk.tools.javac.util.List lambdaResults(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> lambdaResults
    org.openjdk.tools.javac.tree.JCTree$JCExpression asExpr(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> asExpr
    org.openjdk.tools.javac.tree.JCTree$JCExpression access$700(org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext$MostSpecificFunctionReturnChecker,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> access$700
org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext$MostSpecificFunctionReturnChecker$1 -> org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext$MostSpecificFunctionReturnChecker$1:
    org.openjdk.tools.javac.util.ListBuffer val$buffer -> val$buffer
    org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext$MostSpecificFunctionReturnChecker this$3 -> this$3
    void <init>(org.openjdk.tools.javac.comp.Resolve$MostSpecificCheck$MostSpecificCheckContext$MostSpecificFunctionReturnChecker,org.openjdk.tools.javac.util.ListBuffer) -> <init>
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
org.openjdk.tools.javac.comp.Resolve$RecoveryLoadClass -> org.openjdk.tools.javac.comp.Resolve$RecoveryLoadClass:
    org.openjdk.tools.javac.code.Symbol loadClass(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.Name) -> loadClass
org.openjdk.tools.javac.comp.Resolve$ReferenceChooser -> org.openjdk.tools.javac.comp.Resolve$ReferenceChooser:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve) -> <init>
    org.openjdk.tools.javac.code.Symbol result(org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult,org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult) -> result
    org.openjdk.tools.javac.code.Symbol boundResult(org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult) -> boundResult
    org.openjdk.tools.javac.code.Symbol unboundResult(org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult,org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult) -> unboundResult
org.openjdk.tools.javac.comp.Resolve$ReferenceLookupHelper -> org.openjdk.tools.javac.comp.Resolve$ReferenceLookupHelper:
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference referenceTree -> referenceTree
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupHelper unboundLookup(org.openjdk.tools.javac.comp.InferenceContext) -> unboundLookup
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind referenceKind(org.openjdk.tools.javac.code.Symbol) -> referenceKind
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> access
org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult -> org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult:
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind staticKind -> staticKind
    org.openjdk.tools.javac.code.Symbol sym -> sym
    void <init>(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext) -> <init>
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind staticKind(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext) -> staticKind
    boolean isSuccess() -> isSuccess
    boolean hasKind(org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind) -> hasKind
    boolean canIgnore() -> canIgnore
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind lambda$staticKind$1(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext$Candidate) -> lambda$staticKind$1
    boolean lambda$staticKind$0(org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext,org.openjdk.tools.javac.comp.Resolve$MethodResolutionContext$Candidate) -> lambda$staticKind$0
org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind -> org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind:
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind STATIC -> STATIC
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind NON_STATIC -> NON_STATIC
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind BOTH -> BOTH
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind UNDEFINED -> UNDEFINED
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind[] values() -> values
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind from(org.openjdk.tools.javac.code.Symbol) -> from
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind reduce(org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind,org.openjdk.tools.javac.comp.Resolve$ReferenceLookupResult$StaticKind) -> reduce
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Resolve$ResolveDeferredRecoveryMap -> org.openjdk.tools.javac.comp.Resolve$ResolveDeferredRecoveryMap:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.comp.DeferredAttr$AttrMode,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.code.Type typeOf(org.openjdk.tools.javac.comp.DeferredAttr$DeferredType) -> typeOf
org.openjdk.tools.javac.comp.Resolve$ResolveError -> org.openjdk.tools.javac.comp.Resolve$ResolveError:
    java.lang.String debugName -> debugName
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Kinds$Kind,java.lang.String) -> <init>
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
    java.lang.String toString() -> toString
    boolean exists() -> exists
    boolean isStatic() -> isStatic
    org.openjdk.tools.javac.code.Symbol access(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> access
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
org.openjdk.tools.javac.comp.Resolve$StaticError -> org.openjdk.tools.javac.comp.Resolve$StaticError:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
org.openjdk.tools.javac.comp.Resolve$SymbolNotFoundError -> org.openjdk.tools.javac.comp.Resolve$SymbolNotFoundError:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Kinds$Kind) -> <init>
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.code.Kinds$Kind,java.lang.String) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic getDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> getDiagnostic
    java.lang.Object args(org.openjdk.tools.javac.util.List) -> args
    java.lang.String getErrorKey(org.openjdk.tools.javac.code.Kinds$KindName,boolean,boolean) -> getErrorKey
    org.openjdk.tools.javac.util.JCDiagnostic getLocationDiag(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> getLocationDiag
org.openjdk.tools.javac.comp.Resolve$UnboundMethodReferenceLookupHelper -> org.openjdk.tools.javac.comp.Resolve$UnboundMethodReferenceLookupHelper:
    org.openjdk.tools.javac.comp.Resolve this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Resolve,org.openjdk.tools.javac.tree.JCTree$JCMemberReference,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Resolve$MethodResolutionPhase) -> <init>
    org.openjdk.tools.javac.comp.Resolve$ReferenceLookupHelper unboundLookup(org.openjdk.tools.javac.comp.InferenceContext) -> unboundLookup
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind referenceKind(org.openjdk.tools.javac.code.Symbol) -> referenceKind
org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode -> org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode:
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode SUCCESS -> SUCCESS
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode FAILURE -> FAILURE
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode APPLICABLE -> APPLICABLE
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode INAPPLICABLE -> INAPPLICABLE
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode DEFERRED_INST -> DEFERRED_INST
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode PREDEF -> PREDEF
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode OBJECT_INIT -> OBJECT_INIT
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode INTERNAL -> INTERNAL
    java.lang.String opt -> opt
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode[] $VALUES -> $VALUES
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode[] values() -> values
    org.openjdk.tools.javac.comp.Resolve$VerboseResolutionMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.util.EnumSet getVerboseResolutionMode(org.openjdk.tools.javac.util.Options) -> getVerboseResolutionMode
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Todo -> org.openjdk.tools.javac.comp.Todo:
    org.openjdk.tools.javac.util.Context$Key todoKey -> todoKey
    java.util.LinkedList contents -> contents
    java.util.LinkedList contentsByFile -> contentsByFile
    java.util.Map fileMap -> fileMap
    org.openjdk.tools.javac.comp.Todo instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void append(org.openjdk.tools.javac.comp.Env) -> append
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean offer(org.openjdk.tools.javac.comp.Env) -> offer
    void retainFiles(java.util.Collection) -> retainFiles
    org.openjdk.tools.javac.comp.Env poll() -> poll
    org.openjdk.tools.javac.comp.Env peek() -> peek
    java.util.Queue groupByFile(org.openjdk.tools.javac.comp.Env) -> groupByFile
    java.util.Queue groupByFile() -> groupByFile
    void addByFile(org.openjdk.tools.javac.comp.Env) -> addByFile
    void removeByFile(org.openjdk.tools.javac.comp.Env) -> removeByFile
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.Todo$FileQueue -> org.openjdk.tools.javac.comp.Todo$FileQueue:
    java.util.LinkedList fileContents -> fileContents
    org.openjdk.tools.javac.comp.Todo this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.Todo) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean offer(org.openjdk.tools.javac.comp.Env) -> offer
    org.openjdk.tools.javac.comp.Env poll() -> poll
    org.openjdk.tools.javac.comp.Env peek() -> peek
    java.lang.Object peek() -> peek
    java.lang.Object poll() -> poll
    boolean offer(java.lang.Object) -> offer
org.openjdk.tools.javac.comp.TransTypes -> org.openjdk.tools.javac.comp.TransTypes:
    org.openjdk.tools.javac.util.Context$Key transTypesKey -> transTypesKey
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    org.openjdk.tools.javac.comp.Resolve resolve -> resolve
    org.openjdk.tools.javac.comp.CompileStates compileStates -> compileStates
    boolean allowGraphInference -> allowGraphInference
    boolean allowInterfaceBridges -> allowInterfaceBridges
    boolean skipDuplicateBridges -> skipDuplicateBridges
    java.util.Map bridgeSpans -> bridgeSpans
    org.openjdk.tools.javac.code.Type pt -> pt
    org.openjdk.tools.javac.tree.JCTree currentMethod -> currentMethod
    org.openjdk.tools.javac.comp.Env env -> env
    java.lang.String statePreviousToFlowAssertMsg -> statePreviousToFlowAssertMsg
    org.openjdk.tools.javac.comp.TransTypes instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.tree.JCTree$JCExpression cast(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type) -> cast
    org.openjdk.tools.javac.tree.JCTree$JCExpression coerce(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type) -> coerce
    org.openjdk.tools.javac.tree.JCTree$JCExpression coerce(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type) -> coerce
    org.openjdk.tools.javac.tree.JCTree$JCExpression retype(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> retype
    org.openjdk.tools.javac.util.List translateArgs(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> translateArgs
    org.openjdk.tools.javac.util.List translateArgs(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.comp.Env) -> translateArgs
    void addBridge(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol,boolean,org.openjdk.tools.javac.util.ListBuffer) -> addBridge
    org.openjdk.tools.javac.util.List createBridgeParams(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Type) -> createBridgeParams
    void addBridgeIfNeeded(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.ListBuffer) -> addBridgeIfNeeded
    boolean isBridgeNeeded(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Type) -> isBridgeNeeded
    boolean isSameMemberWhenErased(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Type) -> isSameMemberWhenErased
    boolean skipBridge(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Type) -> skipBridge
    void addBridges(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.ListBuffer) -> addBridges
    void addBridges(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.ListBuffer) -> addBridges
    org.openjdk.tools.javac.tree.JCTree translate(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> translate
    org.openjdk.tools.javac.util.List translate(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> translate
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void visitCase(org.openjdk.tools.javac.tree.JCTree$JCCase) -> visitCase
    void visitSynchronized(org.openjdk.tools.javac.tree.JCTree$JCSynchronized) -> visitSynchronized
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitExec(org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement) -> visitExec
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitAssert(org.openjdk.tools.javac.tree.JCTree$JCAssert) -> visitAssert
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitTypeTest(org.openjdk.tools.javac.tree.JCTree$JCInstanceOf) -> visitTypeTest
    void visitIndexed(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess) -> visitIndexed
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitTypeIntersection(org.openjdk.tools.javac.tree.JCTree$JCTypeIntersection) -> visitTypeIntersection
    org.openjdk.tools.javac.code.Type erasure(org.openjdk.tools.javac.code.Type) -> erasure
    void translateClass(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> translateClass
    org.openjdk.tools.javac.tree.JCTree translateTopLevelClass(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.TreeMaker) -> translateTopLevelClass
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.TypeEnter -> org.openjdk.tools.javac.comp.TypeEnter:
    org.openjdk.tools.javac.util.Context$Key typeEnterKey -> typeEnterKey
    boolean checkClash -> checkClash
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.comp.MemberEnter memberEnter -> memberEnter
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.comp.Todo todo -> todo
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    org.openjdk.tools.javac.code.TypeAnnotations typeAnnotations -> typeAnnotations
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.code.DeferredLintHandler deferredLintHandler -> deferredLintHandler
    org.openjdk.tools.javac.code.Lint lint -> lint
    org.openjdk.tools.javac.comp.TypeEnvs typeEnvs -> typeEnvs
    org.openjdk.tools.javac.util.Dependencies dependencies -> dependencies
    boolean allowTypeAnnos -> allowTypeAnnos
    boolean allowDeprecationOnImport -> allowDeprecationOnImport
    boolean completionEnabled -> completionEnabled
    org.openjdk.tools.javac.comp.TypeEnter$ImportsPhase completeClass -> completeClass
    org.openjdk.tools.javac.comp.TypeEnter$Phase topLevelPhase -> topLevelPhase
    org.openjdk.tools.javac.comp.TypeEnter instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void ensureImportsChecked(org.openjdk.tools.javac.util.List) -> ensureImportsChecked
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    void finishImports(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,java.lang.Runnable) -> finishImports
    org.openjdk.tools.javac.tree.JCTree DefaultConstructor(org.openjdk.tools.javac.tree.TreeMaker,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,long,boolean) -> DefaultConstructor
    org.openjdk.tools.javac.util.List createDefaultConstructorParams(org.openjdk.tools.javac.tree.TreeMaker,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.util.List,boolean) -> createDefaultConstructorParams
    org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement SuperCall(org.openjdk.tools.javac.tree.TreeMaker,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,boolean) -> SuperCall
    void markDeprecated(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> markDeprecated
    void handleDeprecatedAnnotations(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol) -> handleDeprecatedAnnotations
    void lambda$handleDeprecatedAnnotations$5(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree$JCAssign) -> lambda$handleDeprecatedAnnotations$5
    boolean lambda$handleDeprecatedAnnotations$4(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> lambda$handleDeprecatedAnnotations$4
    org.openjdk.tools.javac.tree.JCTree$JCAssign lambda$handleDeprecatedAnnotations$3(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$handleDeprecatedAnnotations$3
    boolean lambda$handleDeprecatedAnnotations$2(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> lambda$handleDeprecatedAnnotations$2
    void lambda$complete$1() -> lambda$complete$1
    void lambda$ensureImportsChecked$0(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.comp.Env) -> lambda$ensureImportsChecked$0
    org.openjdk.tools.javac.comp.TypeEnter$Phase access$000(org.openjdk.tools.javac.comp.TypeEnter) -> access$000
    org.openjdk.tools.javac.comp.TypeEnter$Phase access$002(org.openjdk.tools.javac.comp.TypeEnter,org.openjdk.tools.javac.comp.TypeEnter$Phase) -> access$002
    org.openjdk.tools.javac.util.Log access$100(org.openjdk.tools.javac.comp.TypeEnter) -> access$100
    org.openjdk.tools.javac.code.DeferredLintHandler access$200(org.openjdk.tools.javac.comp.TypeEnter) -> access$200
    org.openjdk.tools.javac.util.Dependencies access$300(org.openjdk.tools.javac.comp.TypeEnter) -> access$300
    org.openjdk.tools.javac.comp.Check access$400(org.openjdk.tools.javac.comp.TypeEnter) -> access$400
    org.openjdk.tools.javac.comp.Todo access$500(org.openjdk.tools.javac.comp.TypeEnter) -> access$500
    org.openjdk.tools.javac.code.Lint access$600(org.openjdk.tools.javac.comp.TypeEnter) -> access$600
    org.openjdk.tools.javac.code.Symtab access$700(org.openjdk.tools.javac.comp.TypeEnter) -> access$700
    org.openjdk.tools.javac.util.Names access$800(org.openjdk.tools.javac.comp.TypeEnter) -> access$800
    org.openjdk.tools.javac.util.JCDiagnostic$Factory access$900(org.openjdk.tools.javac.comp.TypeEnter) -> access$900
    org.openjdk.tools.javac.tree.TreeMaker access$1000(org.openjdk.tools.javac.comp.TypeEnter) -> access$1000
    org.openjdk.tools.javac.comp.Annotate access$1100(org.openjdk.tools.javac.comp.TypeEnter) -> access$1100
    org.openjdk.tools.javac.comp.Attr access$1200(org.openjdk.tools.javac.comp.TypeEnter) -> access$1200
    org.openjdk.tools.javac.code.Types access$1300(org.openjdk.tools.javac.comp.TypeEnter) -> access$1300
    org.openjdk.tools.javac.comp.TypeEnvs access$1400(org.openjdk.tools.javac.comp.TypeEnter) -> access$1400
    org.openjdk.tools.javac.code.TypeAnnotations access$1500(org.openjdk.tools.javac.comp.TypeEnter) -> access$1500
    org.openjdk.tools.javac.comp.MemberEnter access$1600(org.openjdk.tools.javac.comp.TypeEnter) -> access$1600
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.TypeEnter$1 -> org.openjdk.tools.javac.comp.TypeEnter$1:
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase -> org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase:
    org.openjdk.tools.javac.comp.TypeEnter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.TypeEnter,org.openjdk.tools.javac.util.Dependencies$CompletionCause,org.openjdk.tools.javac.comp.TypeEnter$Phase) -> <init>
    org.openjdk.tools.javac.comp.Env baseEnv(org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.comp.Env) -> baseEnv
    org.openjdk.tools.javac.tree.JCTree$JCExpression enumBase(int,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> enumBase
    org.openjdk.tools.javac.code.Type modelMissingTypes(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCExpression,boolean) -> modelMissingTypes
    void attribSuperTypes(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Env) -> attribSuperTypes
    org.openjdk.tools.javac.tree.JCTree$JCExpression clearTypeParams(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> clearTypeParams
org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$1 -> org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$1:
    org.openjdk.tools.javac.code.Type modelType -> modelType
    org.openjdk.tools.javac.comp.Env val$env -> val$env
    boolean val$interfaceExpected -> val$interfaceExpected
    org.openjdk.tools.javac.tree.JCTree$JCExpression val$tree -> val$tree
    org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.comp.Env,boolean,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    org.openjdk.tools.javac.code.Type getModelType() -> getModelType
org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer -> org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer:
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol msym -> msym
    org.openjdk.tools.javac.code.Type originalType -> originalType
    boolean interfaceExpected -> interfaceExpected
    org.openjdk.tools.javac.util.List synthesizedSymbols -> synthesizedSymbols
    org.openjdk.tools.javac.code.Type result -> result
    org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase this$1 -> this$1
    void <init>(org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.code.Type,boolean) -> <init>
    org.openjdk.tools.javac.code.Type visit(org.openjdk.tools.javac.tree.JCTree) -> visit
    org.openjdk.tools.javac.util.List visit(org.openjdk.tools.javac.util.List) -> visit
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    org.openjdk.tools.javac.code.Symbol$ClassSymbol synthesizeClass(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> synthesizeClass
    void synthesizeTyparams(org.openjdk.tools.javac.code.Symbol$ClassSymbol,int) -> synthesizeTyparams
org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer$1 -> org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer$1:
    org.openjdk.tools.javac.util.List val$actuals -> val$actuals
    org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer this$2 -> this$2
    void <init>(org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    java.util.List getTypeArguments() -> getTypeArguments
org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer$2 -> org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer$2:
    org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer this$2 -> this$2
    void <init>(org.openjdk.tools.javac.comp.TypeEnter$AbstractHeaderPhase$Synthesizer,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    java.util.List getTypeArguments() -> getTypeArguments
org.openjdk.tools.javac.comp.TypeEnter$HeaderPhase -> org.openjdk.tools.javac.comp.TypeEnter$HeaderPhase:
    org.openjdk.tools.javac.comp.TypeEnter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.TypeEnter) -> <init>
    void runPhase(org.openjdk.tools.javac.comp.Env) -> runPhase
org.openjdk.tools.javac.comp.TypeEnter$HierarchyPhase -> org.openjdk.tools.javac.comp.TypeEnter$HierarchyPhase:
    org.openjdk.tools.javac.comp.TypeEnter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.TypeEnter) -> <init>
    void doCompleteEnvs(org.openjdk.tools.javac.util.List) -> doCompleteEnvs
    void runPhase(org.openjdk.tools.javac.comp.Env) -> runPhase
    org.openjdk.tools.javac.tree.JCTree$JCExpression clearTypeParams(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> clearTypeParams
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
org.openjdk.tools.javac.comp.TypeEnter$ImportsPhase -> org.openjdk.tools.javac.comp.TypeEnter$ImportsPhase:
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.code.Scope$ImportFilter staticImportFilter -> staticImportFilter
    org.openjdk.tools.javac.code.Scope$ImportFilter typeImportFilter -> typeImportFilter
    java.util.function.BiConsumer cfHandler -> cfHandler
    org.openjdk.tools.javac.comp.TypeEnter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.TypeEnter) -> <init>
    void runPhase(org.openjdk.tools.javac.comp.Env) -> runPhase
    void resolveImports(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.comp.Env) -> resolveImports
    void checkClassPackageClash(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> checkClassPackageClash
    void doImport(org.openjdk.tools.javac.tree.JCTree$JCImport) -> doImport
    org.openjdk.tools.javac.code.Type attribImportType(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> attribImportType
    void importAll(org.openjdk.tools.javac.tree.JCTree$JCImport,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.comp.Env) -> importAll
    void importStaticAll(org.openjdk.tools.javac.tree.JCTree$JCImport,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.comp.Env) -> importStaticAll
    void importNamedStatic(org.openjdk.tools.javac.tree.JCTree$JCImport,org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.comp.Env) -> importNamedStatic
    void importNamed(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCImport) -> importNamed
    boolean lambda$resolveImports$2(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Symbol) -> lambda$resolveImports$2
    boolean lambda$resolveImports$1(org.openjdk.tools.javac.code.Symbol$PackageSymbol,org.openjdk.tools.javac.code.Scope,org.openjdk.tools.javac.code.Symbol) -> lambda$resolveImports$1
    void lambda$new$0(org.openjdk.tools.javac.tree.JCTree$JCImport,org.openjdk.tools.javac.code.Symbol$CompletionFailure) -> lambda$new$0
    void access$1700(org.openjdk.tools.javac.comp.TypeEnter$ImportsPhase,org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.comp.Env) -> access$1700
org.openjdk.tools.javac.comp.TypeEnter$MembersPhase -> org.openjdk.tools.javac.comp.TypeEnter$MembersPhase:
    boolean completing -> completing
    org.openjdk.tools.javac.util.List todo -> todo
    org.openjdk.tools.javac.comp.TypeEnter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.TypeEnter) -> <init>
    void doCompleteEnvs(org.openjdk.tools.javac.util.List) -> doCompleteEnvs
    void runPhase(org.openjdk.tools.javac.comp.Env) -> runPhase
    void finishClass(org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.comp.Env) -> finishClass
    void addEnumMembers(org.openjdk.tools.javac.tree.JCTree$JCClassDecl,org.openjdk.tools.javac.comp.Env) -> addEnumMembers
org.openjdk.tools.javac.comp.TypeEnter$Phase -> org.openjdk.tools.javac.comp.TypeEnter$Phase:
    org.openjdk.tools.javac.util.ListBuffer queue -> queue
    org.openjdk.tools.javac.comp.TypeEnter$Phase next -> next
    org.openjdk.tools.javac.util.Dependencies$CompletionCause phaseName -> phaseName
    org.openjdk.tools.javac.comp.TypeEnter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.comp.TypeEnter,org.openjdk.tools.javac.util.Dependencies$CompletionCause,org.openjdk.tools.javac.comp.TypeEnter$Phase) -> <init>
    org.openjdk.tools.javac.util.List completeEnvs(org.openjdk.tools.javac.util.List) -> completeEnvs
    void doCompleteEnvs(org.openjdk.tools.javac.util.List) -> doCompleteEnvs
    void runPhase(org.openjdk.tools.javac.comp.Env) -> runPhase
org.openjdk.tools.javac.comp.TypeEnvs -> org.openjdk.tools.javac.comp.TypeEnvs:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.util.Context$Key typeEnvsKey -> typeEnvsKey
    java.util.HashMap map -> map
    org.openjdk.tools.javac.comp.TypeEnvs instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.comp.Env get(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> get
    org.openjdk.tools.javac.comp.Env put(org.openjdk.tools.javac.code.Symbol$TypeSymbol,org.openjdk.tools.javac.comp.Env) -> put
    org.openjdk.tools.javac.comp.Env remove(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> remove
    java.util.Collection values() -> values
    void clear() -> clear
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.file.BaseFileManager -> org.openjdk.tools.javac.file.BaseFileManager:
    org.openjdk.tools.javac.util.Log log -> log
    java.nio.charset.Charset charset -> charset
    org.openjdk.tools.javac.util.Options options -> options
    java.lang.String classLoaderClass -> classLoaderClass
    org.openjdk.tools.javac.file.Locations locations -> locations
    boolean autoClose -> autoClose
    long lastUsedTime -> lastUsedTime
    long deferredCloseTimeout -> deferredCloseTimeout
    java.util.Set javacFileManagerOptions -> javacFileManagerOptions
    java.lang.String multiReleaseValue -> multiReleaseValue
    java.lang.String encodingName -> encodingName
    java.lang.String defaultEncodingName -> defaultEncodingName
    org.openjdk.tools.javac.file.BaseFileManager$ByteBufferCache byteBufferCache -> byteBufferCache
    java.util.Map contentCache -> contentCache
    void <init>(java.nio.charset.Charset) -> <init>
    void setContext(org.openjdk.tools.javac.util.Context) -> setContext
    org.openjdk.tools.javac.file.Locations createLocations() -> createLocations
    void deferredClose() -> deferredClose
    void updateLastUsedTime() -> updateLastUsedTime
    java.lang.ClassLoader getClassLoader(java.net.URL[]) -> getClassLoader
    boolean isDefaultBootClassPath() -> isDefaultBootClassPath
    boolean handleOption(java.lang.String,java.util.Iterator) -> handleOption
    int isSupportedOption(java.lang.String) -> isSupportedOption
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    boolean handleOptions(java.util.Map) -> handleOptions
    java.lang.String getDefaultEncodingName() -> getDefaultEncodingName
    java.lang.String getEncodingName() -> getEncodingName
    java.nio.CharBuffer decode(java.nio.ByteBuffer,boolean) -> decode
    java.nio.charset.CharsetDecoder getDecoder(java.lang.String,boolean) -> getDecoder
    java.nio.ByteBuffer makeByteBuffer(java.io.InputStream) -> makeByteBuffer
    void recycleByteBuffer(java.nio.ByteBuffer) -> recycleByteBuffer
    java.nio.CharBuffer getCachedContent(org.openjdk.javax.tools.JavaFileObject) -> getCachedContent
    void cache(org.openjdk.javax.tools.JavaFileObject,java.nio.CharBuffer) -> cache
    void flushCache(org.openjdk.javax.tools.JavaFileObject) -> flushCache
    org.openjdk.javax.tools.JavaFileObject$Kind getKind(java.nio.file.Path) -> getKind
    org.openjdk.javax.tools.JavaFileObject$Kind getKind(java.lang.String) -> getKind
    java.lang.Object nullCheck(java.lang.Object) -> nullCheck
    java.util.Collection nullCheck(java.util.Collection) -> nullCheck
    long access$100(org.openjdk.tools.javac.file.BaseFileManager) -> access$100
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.file.BaseFileManager$1 -> org.openjdk.tools.javac.file.BaseFileManager$1:
    org.openjdk.tools.javac.file.BaseFileManager this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.lang.String) -> <init>
    void run() -> run
org.openjdk.tools.javac.file.BaseFileManager$2 -> org.openjdk.tools.javac.file.BaseFileManager$2:
    org.openjdk.tools.javac.file.BaseFileManager this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,org.openjdk.tools.javac.util.Log) -> <init>
    java.lang.String get(org.openjdk.tools.javac.main.Option) -> get
    void put(java.lang.String,java.lang.String) -> put
    void remove(java.lang.String) -> remove
    boolean handleFileManagerOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleFileManagerOption
org.openjdk.tools.javac.file.BaseFileManager$3 -> org.openjdk.tools.javac.file.BaseFileManager$3:
    int[] $SwitchMap$com$sun$tools$javac$main$Option -> $SwitchMap$com$sun$tools$javac$main$Option
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.file.BaseFileManager$ByteBufferCache -> org.openjdk.tools.javac.file.BaseFileManager$ByteBufferCache:
    java.nio.ByteBuffer cached -> cached
    void <init>() -> <init>
    java.nio.ByteBuffer get(int) -> get
    void put(java.nio.ByteBuffer) -> put
    void <init>(org.openjdk.tools.javac.file.BaseFileManager$1) -> <init>
org.openjdk.tools.javac.file.BaseFileManager$ContentCacheEntry -> org.openjdk.tools.javac.file.BaseFileManager$ContentCacheEntry:
    long timestamp -> timestamp
    java.lang.ref.SoftReference ref -> ref
    void <init>(org.openjdk.javax.tools.JavaFileObject,java.nio.CharBuffer) -> <init>
    boolean isValid(org.openjdk.javax.tools.JavaFileObject) -> isValid
    java.nio.CharBuffer getValue() -> getValue
org.openjdk.tools.javac.file.CacheFSInfo -> org.openjdk.tools.javac.file.CacheFSInfo:
    java.util.Map cache -> cache
    void <init>() -> <init>
    void preRegister(org.openjdk.tools.javac.util.Context) -> preRegister
    void clearCache() -> clearCache
    java.nio.file.Path getCanonicalFile(java.nio.file.Path) -> getCanonicalFile
    boolean exists(java.nio.file.Path) -> exists
    boolean isDirectory(java.nio.file.Path) -> isDirectory
    boolean isFile(java.nio.file.Path) -> isFile
    java.util.List getJarClassPath(java.nio.file.Path) -> getJarClassPath
    org.openjdk.tools.javac.file.CacheFSInfo$Entry getEntry(java.nio.file.Path) -> getEntry
    org.openjdk.tools.javac.file.FSInfo lambda$preRegister$0(org.openjdk.tools.javac.util.Context) -> lambda$preRegister$0
org.openjdk.tools.javac.file.CacheFSInfo$1 -> org.openjdk.tools.javac.file.CacheFSInfo$1:
org.openjdk.tools.javac.file.CacheFSInfo$Entry -> org.openjdk.tools.javac.file.CacheFSInfo$Entry:
    java.nio.file.Path canonicalFile -> canonicalFile
    boolean exists -> exists
    boolean isFile -> isFile
    boolean isDirectory -> isDirectory
    java.util.List jarClassPath -> jarClassPath
    void <init>() -> <init>
    void <init>(org.openjdk.tools.javac.file.CacheFSInfo$1) -> <init>
org.openjdk.tools.javac.file.FSInfo -> org.openjdk.tools.javac.file.FSInfo:
    java.nio.file.spi.FileSystemProvider jarFSProvider -> jarFSProvider
    org.openjdk.tools.javac.file.FSInfo instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>() -> <init>
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.nio.file.Path getCanonicalFile(java.nio.file.Path) -> getCanonicalFile
    boolean exists(java.nio.file.Path) -> exists
    boolean isDirectory(java.nio.file.Path) -> isDirectory
    boolean isFile(java.nio.file.Path) -> isFile
    java.util.List getJarClassPath(java.nio.file.Path) -> getJarClassPath
    java.nio.file.spi.FileSystemProvider getJarFSProvider() -> getJarFSProvider
org.openjdk.tools.javac.file.JRTIndex -> org.openjdk.tools.javac.file.JRTIndex:
    org.openjdk.tools.javac.file.JRTIndex sharedInstance -> sharedInstance
    java.nio.file.FileSystem jrtfs -> jrtfs
    java.util.Map entries -> entries
    java.util.ResourceBundle ctBundle -> ctBundle
    org.openjdk.tools.javac.file.JRTIndex getSharedInstance() -> getSharedInstance
    org.openjdk.tools.javac.file.JRTIndex instance(org.openjdk.tools.javac.util.Context) -> instance
    boolean isAvailable() -> isAvailable
    void <init>() -> <init>
    org.openjdk.tools.javac.file.JRTIndex$CtSym getCtSym(java.lang.CharSequence) -> getCtSym
    org.openjdk.tools.javac.file.JRTIndex$Entry getEntry(org.openjdk.tools.javac.file.RelativePath$RelativeDirectory) -> getEntry
    boolean isInJRT(org.openjdk.javax.tools.FileObject) -> isInJRT
    org.openjdk.tools.javac.file.JRTIndex$CtSym getCtInfo(org.openjdk.tools.javac.file.RelativePath$RelativeDirectory) -> getCtInfo
org.openjdk.tools.javac.file.JRTIndex$1 -> org.openjdk.tools.javac.file.JRTIndex$1:
org.openjdk.tools.javac.file.JRTIndex$CtSym -> org.openjdk.tools.javac.file.JRTIndex$CtSym:
    boolean hidden -> hidden
    boolean proprietary -> proprietary
    java.lang.String minProfile -> minProfile
    org.openjdk.tools.javac.file.JRTIndex$CtSym EMPTY -> EMPTY
    void <init>(boolean,boolean,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.file.JRTIndex$Entry -> org.openjdk.tools.javac.file.JRTIndex$Entry:
    java.util.Map files -> files
    java.util.Set subdirs -> subdirs
    org.openjdk.tools.javac.file.JRTIndex$CtSym ctSym -> ctSym
    org.openjdk.tools.javac.file.JRTIndex this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.JRTIndex,java.util.Map,java.util.Set,org.openjdk.tools.javac.file.JRTIndex$CtSym) -> <init>
    void <init>(org.openjdk.tools.javac.file.JRTIndex,java.util.Map,java.util.Set,org.openjdk.tools.javac.file.JRTIndex$CtSym,org.openjdk.tools.javac.file.JRTIndex$1) -> <init>
org.openjdk.tools.javac.file.JavacFileManager -> org.openjdk.tools.javac.file.JavacFileManager:
    org.openjdk.tools.javac.file.FSInfo fsInfo -> fsInfo
    java.util.Set sourceOrClass -> sourceOrClass
    boolean symbolFileEnabled -> symbolFileEnabled
    org.openjdk.javax.tools.StandardJavaFileManager$PathFactory pathFactory -> pathFactory
    org.openjdk.tools.javac.file.JavacFileManager$SortFiles sortFiles -> sortFiles
    java.util.Map containers -> containers
    org.openjdk.tools.javac.file.JavacFileManager$Container MISSING_CONTAINER -> MISSING_CONTAINER
    org.openjdk.tools.javac.file.JRTIndex jrtIndex -> jrtIndex
    boolean fileSystemIsCaseSensitive -> fileSystemIsCaseSensitive
    char[] toArray(java.nio.CharBuffer) -> toArray
    void preRegister(org.openjdk.tools.javac.util.Context) -> preRegister
    void <init>(org.openjdk.tools.javac.util.Context,boolean,java.nio.charset.Charset) -> <init>
    void setContext(org.openjdk.tools.javac.util.Context) -> setContext
    void setPathFactory(org.openjdk.javax.tools.StandardJavaFileManager$PathFactory) -> setPathFactory
    java.nio.file.Path getPath(java.lang.String,java.lang.String[]) -> getPath
    void setSymbolFileEnabled(boolean) -> setSymbolFileEnabled
    boolean isSymbolFileEnabled() -> isSymbolFileEnabled
    org.openjdk.javax.tools.JavaFileObject getJavaFileObject(java.lang.String) -> getJavaFileObject
    org.openjdk.javax.tools.JavaFileObject getJavaFileObject(java.nio.file.Path) -> getJavaFileObject
    org.openjdk.javax.tools.JavaFileObject getFileForOutput(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind,org.openjdk.javax.tools.JavaFileObject) -> getFileForOutput
    java.lang.Iterable getJavaFileObjectsFromStrings(java.lang.Iterable) -> getJavaFileObjectsFromStrings
    java.lang.Iterable getJavaFileObjects(java.lang.String[]) -> getJavaFileObjects
    boolean isValidName(java.lang.String) -> isValidName
    void validateClassName(java.lang.String) -> validateClassName
    void validatePackageName(java.lang.String) -> validatePackageName
    void testName(java.lang.String,boolean,boolean) -> testName
    void printAscii(java.lang.String,java.lang.Object[]) -> printAscii
    org.openjdk.tools.javac.file.JavacFileManager$Container getContainer(java.nio.file.Path) -> getContainer
    org.openjdk.tools.javac.file.JRTIndex getJRTIndex() -> getJRTIndex
    boolean isValidFile(java.lang.String,java.util.Set) -> isValidFile
    boolean caseMapCheck(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath) -> caseMapCheck
    void flush() -> flush
    void close() -> close
    java.lang.ClassLoader getClassLoader(org.openjdk.javax.tools.JavaFileManager$Location) -> getClassLoader
    java.lang.Iterable list(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.util.Set,boolean) -> list
    java.lang.String inferBinaryName(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> inferBinaryName
    boolean isSameFile(org.openjdk.javax.tools.FileObject,org.openjdk.javax.tools.FileObject) -> isSameFile
    boolean hasLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> hasLocation
    org.openjdk.javax.tools.JavaFileObject getJavaFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> getJavaFileForInput
    org.openjdk.javax.tools.FileObject getFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String) -> getFileForInput
    org.openjdk.javax.tools.JavaFileObject getFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.tools.javac.file.RelativePath$RelativeFile) -> getFileForInput
    org.openjdk.javax.tools.JavaFileObject getJavaFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind,org.openjdk.javax.tools.FileObject) -> getJavaFileForOutput
    org.openjdk.javax.tools.FileObject getFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String,org.openjdk.javax.tools.FileObject) -> getFileForOutput
    org.openjdk.javax.tools.JavaFileObject getFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.tools.javac.file.RelativePath$RelativeFile,org.openjdk.javax.tools.FileObject) -> getFileForOutput
    java.lang.Iterable getJavaFileObjectsFromFiles(java.lang.Iterable) -> getJavaFileObjectsFromFiles
    java.lang.Iterable getJavaFileObjectsFromPaths(java.lang.Iterable) -> getJavaFileObjectsFromPaths
    java.lang.Iterable getJavaFileObjects(java.io.File[]) -> getJavaFileObjects
    java.lang.Iterable getJavaFileObjects(java.nio.file.Path[]) -> getJavaFileObjects
    void setLocation(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.Iterable) -> setLocation
    void setLocationFromPaths(org.openjdk.javax.tools.JavaFileManager$Location,java.util.Collection) -> setLocationFromPaths
    java.lang.Iterable getLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> getLocation
    java.lang.Iterable getLocationAsPaths(org.openjdk.javax.tools.JavaFileManager$Location) -> getLocationAsPaths
    boolean contains(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.FileObject) -> contains
    java.nio.file.Path getClassOutDir() -> getClassOutDir
    java.nio.file.Path getSourceOutDir() -> getSourceOutDir
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String) -> getLocationForModule
    java.util.ServiceLoader getServiceLoader(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.Class) -> getServiceLoader
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> getLocationForModule
    void setLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.util.Collection) -> setLocationForModule
    java.lang.String inferModuleName(org.openjdk.javax.tools.JavaFileManager$Location) -> inferModuleName
    java.lang.Iterable listLocationsForModules(org.openjdk.javax.tools.JavaFileManager$Location) -> listLocationsForModules
    java.nio.file.Path asPath(org.openjdk.javax.tools.FileObject) -> asPath
    boolean isRelativeUri(java.net.URI) -> isRelativeUri
    boolean isRelativeUri(java.lang.String) -> isRelativeUri
    java.lang.String getRelativeName(java.io.File) -> getRelativeName
    java.lang.String getMessage(java.io.IOException) -> getMessage
    void checkOutputLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> checkOutputLocation
    void checkModuleOrientedOrOutputLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> checkModuleOrientedOrOutputLocation
    void checkNotModuleOrientedLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> checkNotModuleOrientedLocation
    java.lang.Iterable asPaths(java.lang.Iterable) -> asPaths
    java.lang.Iterable asFiles(java.lang.Iterable) -> asFiles
    java.util.Iterator lambda$asFiles$2(java.lang.Iterable) -> lambda$asFiles$2
    java.util.Iterator lambda$asPaths$1(java.lang.Iterable) -> lambda$asPaths$1
    org.openjdk.javax.tools.JavaFileManager lambda$preRegister$0(org.openjdk.tools.javac.util.Context) -> lambda$preRegister$0
    org.openjdk.tools.javac.file.JRTIndex access$200(org.openjdk.tools.javac.file.JavacFileManager) -> access$200
    boolean access$300(org.openjdk.tools.javac.file.JavacFileManager,java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath) -> access$300
    boolean access$400(org.openjdk.tools.javac.file.JavacFileManager,java.lang.String,java.util.Set) -> access$400
    org.openjdk.tools.javac.file.FSInfo access$500(org.openjdk.tools.javac.file.JavacFileManager) -> access$500
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.file.JavacFileManager$1 -> org.openjdk.tools.javac.file.JavacFileManager$1:
    void <init>() -> <init>
    void list(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeDirectory,java.util.Set,boolean,org.openjdk.tools.javac.util.ListBuffer) -> list
    org.openjdk.javax.tools.JavaFileObject getFileObject(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeFile) -> getFileObject
    void close() -> close
org.openjdk.tools.javac.file.JavacFileManager$2 -> org.openjdk.tools.javac.file.JavacFileManager$2:
    java.util.Iterator iter -> iter
    java.lang.Iterable val$files -> val$files
    void <init>(java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.nio.file.Path next() -> next
    java.lang.Object next() -> next
org.openjdk.tools.javac.file.JavacFileManager$3 -> org.openjdk.tools.javac.file.JavacFileManager$3:
    java.util.Iterator iter -> iter
    java.lang.Iterable val$paths -> val$paths
    void <init>(java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.io.File next() -> next
    java.lang.Object next() -> next
org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer -> org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer:
    java.nio.file.Path archivePath -> archivePath
    java.nio.file.FileSystem fileSystem -> fileSystem
    java.util.Map packages -> packages
    org.openjdk.tools.javac.file.JavacFileManager this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.JavacFileManager,java.nio.file.Path) -> <init>
    void list(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeDirectory,java.util.Set,boolean,org.openjdk.tools.javac.util.ListBuffer) -> list
    boolean isValid(java.nio.file.Path) -> isValid
    org.openjdk.javax.tools.JavaFileObject getFileObject(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeFile) -> getFileObject
    void close() -> close
    boolean access$600(org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer,java.nio.file.Path) -> access$600
    java.util.Map access$700(org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer) -> access$700
    java.nio.file.Path access$800(org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer) -> access$800
org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer$1 -> org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer$1:
    org.openjdk.tools.javac.file.JavacFileManager val$this$0 -> val$this$0
    java.nio.file.Path val$root -> val$root
    org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer this$1 -> this$1
    void <init>(org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer,org.openjdk.tools.javac.file.JavacFileManager,java.nio.file.Path) -> <init>
    java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes) -> preVisitDirectory
    java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object,java.nio.file.attribute.BasicFileAttributes) -> preVisitDirectory
org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer$2 -> org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer$2:
    java.util.Set val$fileKinds -> val$fileKinds
    org.openjdk.tools.javac.util.ListBuffer val$resultList -> val$resultList
    org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer this$1 -> this$1
    void <init>(org.openjdk.tools.javac.file.JavacFileManager$ArchiveContainer,java.util.Set,org.openjdk.tools.javac.util.ListBuffer) -> <init>
    java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes) -> preVisitDirectory
    java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes) -> visitFile
    java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes) -> visitFile
    java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object,java.nio.file.attribute.BasicFileAttributes) -> preVisitDirectory
org.openjdk.tools.javac.file.JavacFileManager$Container -> org.openjdk.tools.javac.file.JavacFileManager$Container:
    void list(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeDirectory,java.util.Set,boolean,org.openjdk.tools.javac.util.ListBuffer) -> list
    org.openjdk.javax.tools.JavaFileObject getFileObject(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeFile) -> getFileObject
    void close() -> close
org.openjdk.tools.javac.file.JavacFileManager$DirectoryContainer -> org.openjdk.tools.javac.file.JavacFileManager$DirectoryContainer:
    java.nio.file.Path directory -> directory
    org.openjdk.tools.javac.file.JavacFileManager this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.JavacFileManager,java.nio.file.Path) -> <init>
    void list(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeDirectory,java.util.Set,boolean,org.openjdk.tools.javac.util.ListBuffer) -> list
    org.openjdk.javax.tools.JavaFileObject getFileObject(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeFile) -> getFileObject
    void close() -> close
org.openjdk.tools.javac.file.JavacFileManager$JRTImageContainer -> org.openjdk.tools.javac.file.JavacFileManager$JRTImageContainer:
    org.openjdk.tools.javac.file.JavacFileManager this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.JavacFileManager) -> <init>
    void list(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeDirectory,java.util.Set,boolean,org.openjdk.tools.javac.util.ListBuffer) -> list
    org.openjdk.javax.tools.JavaFileObject getFileObject(java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath$RelativeFile) -> getFileObject
    void close() -> close
    void <init>(org.openjdk.tools.javac.file.JavacFileManager,org.openjdk.tools.javac.file.JavacFileManager$1) -> <init>
org.openjdk.tools.javac.file.JavacFileManager$SortFiles -> org.openjdk.tools.javac.file.JavacFileManager$SortFiles:
    org.openjdk.tools.javac.file.JavacFileManager$SortFiles FORWARD -> FORWARD
    org.openjdk.tools.javac.file.JavacFileManager$SortFiles REVERSE -> REVERSE
    org.openjdk.tools.javac.file.JavacFileManager$SortFiles[] $VALUES -> $VALUES
    org.openjdk.tools.javac.file.JavacFileManager$SortFiles[] values() -> values
    org.openjdk.tools.javac.file.JavacFileManager$SortFiles valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.javac.file.JavacFileManager$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.file.JavacFileManager$SortFiles$1 -> org.openjdk.tools.javac.file.JavacFileManager$SortFiles$1:
    void <init>(java.lang.String,int) -> <init>
    int compare(java.nio.file.Path,java.nio.file.Path) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.openjdk.tools.javac.file.JavacFileManager$SortFiles$2 -> org.openjdk.tools.javac.file.JavacFileManager$SortFiles$2:
    void <init>(java.lang.String,int) -> <init>
    int compare(java.nio.file.Path,java.nio.file.Path) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.openjdk.tools.javac.file.Locations -> org.openjdk.tools.javac.file.Locations:
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.file.FSInfo fsInfo -> fsInfo
    boolean warn -> warn
    org.openjdk.tools.javac.jvm.ModuleNameReader moduleNameReader -> moduleNameReader
    org.openjdk.javax.tools.StandardJavaFileManager$PathFactory pathFactory -> pathFactory
    java.nio.file.Path javaHome -> javaHome
    java.nio.file.Path thisSystemModules -> thisSystemModules
    java.util.Map fileSystems -> fileSystems
    java.util.List closeables -> closeables
    java.util.Map fsEnv -> fsEnv
    java.util.Map handlersForLocation -> handlersForLocation
    java.util.Map handlersForOption -> handlersForOption
    void <init>() -> <init>
    java.nio.file.Path getPath(java.lang.String,java.lang.String[]) -> getPath
    void close() -> close
    void update(org.openjdk.tools.javac.util.Log,boolean,org.openjdk.tools.javac.file.FSInfo) -> update
    void setPathFactory(org.openjdk.javax.tools.StandardJavaFileManager$PathFactory) -> setPathFactory
    boolean isDefaultBootClassPath() -> isDefaultBootClassPath
    java.lang.Iterable getPathEntries(java.lang.String) -> getPathEntries
    java.lang.Iterable getPathEntries(java.lang.String,java.nio.file.Path) -> getPathEntries
    void setMultiReleaseValue(java.lang.String) -> setMultiReleaseValue
    boolean contains(java.util.Collection,java.nio.file.Path) -> contains
    void initHandlers() -> initHandlers
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    boolean hasLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> hasLocation
    java.util.Collection getLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> getLocation
    java.nio.file.Path getOutputLocation(org.openjdk.javax.tools.JavaFileManager$Location) -> getOutputLocation
    void setLocation(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.Iterable) -> setLocation
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String) -> getLocationForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,java.nio.file.Path) -> getLocationForModule
    void setLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.Iterable) -> setLocationForModule
    java.lang.String inferModuleName(org.openjdk.javax.tools.JavaFileManager$Location) -> inferModuleName
    java.lang.Iterable listLocationsForModules(org.openjdk.javax.tools.JavaFileManager$Location) -> listLocationsForModules
    boolean contains(org.openjdk.javax.tools.JavaFileManager$Location,java.nio.file.Path) -> contains
    org.openjdk.tools.javac.file.Locations$LocationHandler getHandler(org.openjdk.javax.tools.JavaFileManager$Location) -> getHandler
    boolean isArchive(java.nio.file.Path) -> isArchive
    java.nio.file.Path normalize(java.nio.file.Path) -> normalize
    void lambda$close$0(org.openjdk.tools.javac.util.ListBuffer,java.io.Closeable) -> lambda$close$0
    java.lang.Iterable access$000(org.openjdk.tools.javac.file.Locations,java.lang.String) -> access$000
    boolean access$100(org.openjdk.tools.javac.file.Locations) -> access$100
    org.openjdk.tools.javac.util.Log access$200(org.openjdk.tools.javac.file.Locations) -> access$200
    java.lang.Iterable access$300(org.openjdk.tools.javac.file.Locations,java.lang.String,java.nio.file.Path) -> access$300
    org.openjdk.tools.javac.file.FSInfo access$400(org.openjdk.tools.javac.file.Locations) -> access$400
    boolean access$500(org.openjdk.tools.javac.file.Locations,java.nio.file.Path) -> access$500
    boolean access$800(org.openjdk.tools.javac.file.Locations,java.util.Collection,java.nio.file.Path) -> access$800
    java.util.Map access$1100(org.openjdk.tools.javac.file.Locations) -> access$1100
    org.openjdk.tools.javac.jvm.ModuleNameReader access$1300(org.openjdk.tools.javac.file.Locations) -> access$1300
    org.openjdk.tools.javac.jvm.ModuleNameReader access$1302(org.openjdk.tools.javac.file.Locations,org.openjdk.tools.javac.jvm.ModuleNameReader) -> access$1302
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.file.Locations$1 -> org.openjdk.tools.javac.file.Locations$1:
    int[] $SwitchMap$com$sun$tools$javac$main$Option -> $SwitchMap$com$sun$tools$javac$main$Option
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.file.Locations$BasicLocationHandler -> org.openjdk.tools.javac.file.Locations$BasicLocationHandler:
    org.openjdk.javax.tools.JavaFileManager$Location location -> location
    java.util.Set options -> options
    void <init>(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.tools.javac.main.Option[]) -> <init>
    void setPathsForModule(java.lang.String,java.lang.Iterable) -> setPathsForModule
    java.nio.file.Path checkSingletonDirectory(java.lang.Iterable) -> checkSingletonDirectory
    java.nio.file.Path checkDirectory(java.nio.file.Path) -> checkDirectory
org.openjdk.tools.javac.file.Locations$BootClassPathLocationHandler -> org.openjdk.tools.javac.file.Locations$BootClassPathLocationHandler:
    java.util.Collection searchPath -> searchPath
    java.util.Map optionValues -> optionValues
    boolean isDefault -> isDefault
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations) -> <init>
    boolean isDefault() -> isDefault
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    org.openjdk.tools.javac.main.Option canonicalize(org.openjdk.tools.javac.main.Option) -> canonicalize
    java.util.Collection getPaths() -> getPaths
    void setPaths(java.lang.Iterable) -> setPaths
    org.openjdk.tools.javac.file.Locations$SearchPath computePath() -> computePath
    java.util.Collection systemClasses() -> systemClasses
    void lazy() -> lazy
    boolean contains(java.nio.file.Path) -> contains
org.openjdk.tools.javac.file.Locations$ClassPathLocationHandler -> org.openjdk.tools.javac.file.Locations$ClassPathLocationHandler:
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations) -> <init>
    java.util.Collection getPaths() -> getPaths
    org.openjdk.tools.javac.file.Locations$SearchPath computePath(java.lang.String) -> computePath
    org.openjdk.tools.javac.file.Locations$SearchPath createPath() -> createPath
    void lazy() -> lazy
org.openjdk.tools.javac.file.Locations$LocationHandler -> org.openjdk.tools.javac.file.Locations$LocationHandler:
    void <init>() -> <init>
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    boolean isSet() -> isSet
    java.util.Collection getPaths() -> getPaths
    void setPaths(java.lang.Iterable) -> setPaths
    void setPathsForModule(java.lang.String,java.lang.Iterable) -> setPathsForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.lang.String) -> getLocationForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.nio.file.Path) -> getLocationForModule
    java.lang.String inferModuleName() -> inferModuleName
    java.lang.Iterable listLocationsForModules() -> listLocationsForModules
    boolean contains(java.nio.file.Path) -> contains
org.openjdk.tools.javac.file.Locations$ModuleLocationHandler -> org.openjdk.tools.javac.file.Locations$ModuleLocationHandler:
    org.openjdk.tools.javac.file.Locations$LocationHandler parent -> parent
    java.lang.String name -> name
    java.lang.String moduleName -> moduleName
    boolean output -> output
    java.util.Collection searchPath -> searchPath
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations,org.openjdk.tools.javac.file.Locations$LocationHandler,java.lang.String,java.lang.String,java.util.Collection,boolean) -> <init>
    java.lang.String getName() -> getName
    boolean isOutputLocation() -> isOutputLocation
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    java.util.Collection getPaths() -> getPaths
    void setPaths(java.lang.Iterable) -> setPaths
    void setPathsForModule(java.lang.String,java.lang.Iterable) -> setPathsForModule
    java.lang.String inferModuleName() -> inferModuleName
    boolean contains(java.nio.file.Path) -> contains
    java.lang.String toString() -> toString
    java.lang.String access$900(org.openjdk.tools.javac.file.Locations$ModuleLocationHandler) -> access$900
org.openjdk.tools.javac.file.Locations$ModulePathLocationHandler -> org.openjdk.tools.javac.file.Locations$ModulePathLocationHandler:
    org.openjdk.tools.javac.file.Locations$ModuleTable moduleTable -> moduleTable
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations,org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.tools.javac.main.Option[]) -> <init>
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.lang.String) -> getLocationForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.nio.file.Path) -> getLocationForModule
    java.lang.Iterable listLocationsForModules() -> listLocationsForModules
    boolean contains(java.nio.file.Path) -> contains
    void setPaths(java.lang.Iterable) -> setPaths
    void setPathsForModule(java.lang.String,java.lang.Iterable) -> setPathsForModule
    java.util.List checkPaths(java.lang.Iterable) -> checkPaths
    void initModuleLocations() -> initModuleLocations
    void checkValidModulePathEntry(java.nio.file.Path) -> checkValidModulePathEntry
    boolean isModuleName(java.lang.String) -> isModuleName
    java.util.Iterator lambda$listLocationsForModules$0() -> lambda$listLocationsForModules$0
    boolean access$1200(org.openjdk.tools.javac.file.Locations$ModulePathLocationHandler,java.lang.String) -> access$1200
org.openjdk.tools.javac.file.Locations$ModulePathLocationHandler$ModulePathIterator -> org.openjdk.tools.javac.file.Locations$ModulePathLocationHandler$ModulePathIterator:
    java.util.Iterator pathIter -> pathIter
    int pathIndex -> pathIndex
    java.util.Set next -> next
    org.openjdk.tools.javac.file.Locations$ModulePathLocationHandler this$1 -> this$1
    void <init>(org.openjdk.tools.javac.file.Locations$ModulePathLocationHandler) -> <init>
    boolean hasNext() -> hasNext
    java.util.Set next() -> next
    java.util.Set scanDirectory(java.nio.file.Path) -> scanDirectory
    java.util.Set scanFile(java.nio.file.Path) -> scanFile
    org.openjdk.tools.javac.util.Pair inferModuleName(java.nio.file.Path) -> inferModuleName
    java.lang.String readModuleName(java.nio.file.Path) -> readModuleName
    java.lang.Object next() -> next
org.openjdk.tools.javac.file.Locations$ModuleSourcePathLocationHandler -> org.openjdk.tools.javac.file.Locations$ModuleSourcePathLocationHandler:
    org.openjdk.tools.javac.file.Locations$ModuleTable moduleTable -> moduleTable
    java.util.List paths -> paths
    java.util.function.Predicate checkModuleInfo -> checkModuleInfo
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations) -> <init>
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    void init(java.lang.String) -> init
    void initModuleTable(java.util.Map) -> initModuleTable
    boolean isSeparator(char) -> isSeparator
    void add(java.util.Map,java.nio.file.Path,java.nio.file.Path) -> add
    void expandBraces(java.lang.String,java.util.Collection) -> expandBraces
    int getMatchingBrace(java.lang.String,int) -> getMatchingBrace
    boolean isSet() -> isSet
    java.util.Collection getPaths() -> getPaths
    void setPaths(java.lang.Iterable) -> setPaths
    void setPathsForModule(java.lang.String,java.lang.Iterable) -> setPathsForModule
    java.util.List checkPaths(java.lang.Iterable) -> checkPaths
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.lang.String) -> getLocationForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.nio.file.Path) -> getLocationForModule
    java.lang.Iterable listLocationsForModules() -> listLocationsForModules
    boolean contains(java.nio.file.Path) -> contains
    boolean lambda$add$2(java.nio.file.Path) -> lambda$add$2
    boolean lambda$new$1(java.nio.file.Path) -> lambda$new$1
    void lambda$initModuleTable$0(java.lang.String,java.util.List) -> lambda$initModuleTable$0
org.openjdk.tools.javac.file.Locations$ModuleTable -> org.openjdk.tools.javac.file.Locations$ModuleTable:
    java.util.Map nameMap -> nameMap
    java.util.Map pathMap -> pathMap
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations) -> <init>
    void add(org.openjdk.tools.javac.file.Locations$ModuleLocationHandler) -> add
    void updatePaths(org.openjdk.tools.javac.file.Locations$ModuleLocationHandler) -> updatePaths
    org.openjdk.tools.javac.file.Locations$ModuleLocationHandler get(java.lang.String) -> get
    org.openjdk.tools.javac.file.Locations$ModuleLocationHandler get(java.nio.file.Path) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    boolean contains(java.nio.file.Path) -> contains
    java.util.Set locations() -> locations
    void <init>(org.openjdk.tools.javac.file.Locations,org.openjdk.tools.javac.file.Locations$1) -> <init>
    java.util.Map access$1000(org.openjdk.tools.javac.file.Locations$ModuleTable) -> access$1000
org.openjdk.tools.javac.file.Locations$OutputLocationHandler -> org.openjdk.tools.javac.file.Locations$OutputLocationHandler:
    java.nio.file.Path outputDir -> outputDir
    org.openjdk.tools.javac.file.Locations$ModuleTable moduleTable -> moduleTable
    boolean listed -> listed
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations,org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.tools.javac.main.Option[]) -> <init>
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    java.util.Collection getPaths() -> getPaths
    void setPaths(java.lang.Iterable) -> setPaths
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.lang.String) -> getLocationForModule
    void setPathsForModule(java.lang.String,java.lang.Iterable) -> setPathsForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.nio.file.Path) -> getLocationForModule
    java.lang.Iterable listLocationsForModules() -> listLocationsForModules
    boolean contains(java.nio.file.Path) -> contains
    java.nio.file.Path access$1400(org.openjdk.tools.javac.file.Locations$OutputLocationHandler) -> access$1400
org.openjdk.tools.javac.file.Locations$PatchModulesLocationHandler -> org.openjdk.tools.javac.file.Locations$PatchModulesLocationHandler:
    org.openjdk.tools.javac.file.Locations$ModuleTable moduleTable -> moduleTable
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations) -> <init>
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    boolean isSet() -> isSet
    java.util.Collection getPaths() -> getPaths
    void setPaths(java.lang.Iterable) -> setPaths
    void setPathsForModule(java.lang.String,java.lang.Iterable) -> setPathsForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.lang.String) -> getLocationForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.nio.file.Path) -> getLocationForModule
    java.lang.Iterable listLocationsForModules() -> listLocationsForModules
    boolean contains(java.nio.file.Path) -> contains
org.openjdk.tools.javac.file.Locations$SearchPath -> org.openjdk.tools.javac.file.Locations$SearchPath:
    long serialVersionUID -> serialVersionUID
    boolean expandJarClassPaths -> expandJarClassPaths
    java.util.Set canonicalValues -> canonicalValues
    java.nio.file.Path emptyPathDefault -> emptyPathDefault
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations) -> <init>
    org.openjdk.tools.javac.file.Locations$SearchPath expandJarClassPaths(boolean) -> expandJarClassPaths
    org.openjdk.tools.javac.file.Locations$SearchPath emptyPathDefault(java.nio.file.Path) -> emptyPathDefault
    org.openjdk.tools.javac.file.Locations$SearchPath addDirectories(java.lang.String,boolean) -> addDirectories
    org.openjdk.tools.javac.file.Locations$SearchPath addDirectories(java.lang.String) -> addDirectories
    void addDirectory(java.nio.file.Path,boolean) -> addDirectory
    org.openjdk.tools.javac.file.Locations$SearchPath addFiles(java.lang.String,boolean) -> addFiles
    org.openjdk.tools.javac.file.Locations$SearchPath addFiles(java.lang.String) -> addFiles
    org.openjdk.tools.javac.file.Locations$SearchPath addFiles(java.lang.Iterable,boolean) -> addFiles
    org.openjdk.tools.javac.file.Locations$SearchPath addFiles(java.lang.Iterable) -> addFiles
    void addFile(java.nio.file.Path,boolean) -> addFile
    void addJarClassPath(java.nio.file.Path,boolean) -> addJarClassPath
    void lambda$addDirectory$1(boolean,java.nio.file.Path) -> lambda$addDirectory$1
    boolean lambda$addDirectory$0(org.openjdk.tools.javac.file.Locations,java.nio.file.Path) -> lambda$addDirectory$0
    void <init>(org.openjdk.tools.javac.file.Locations,org.openjdk.tools.javac.file.Locations$1) -> <init>
org.openjdk.tools.javac.file.Locations$SimpleLocationHandler -> org.openjdk.tools.javac.file.Locations$SimpleLocationHandler:
    java.util.Collection searchPath -> searchPath
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations,org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.tools.javac.main.Option[]) -> <init>
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    java.util.Collection getPaths() -> getPaths
    void setPaths(java.lang.Iterable) -> setPaths
    org.openjdk.tools.javac.file.Locations$SearchPath computePath(java.lang.String) -> computePath
    org.openjdk.tools.javac.file.Locations$SearchPath createPath() -> createPath
    boolean contains(java.nio.file.Path) -> contains
org.openjdk.tools.javac.file.Locations$SystemModulesLocationHandler -> org.openjdk.tools.javac.file.Locations$SystemModulesLocationHandler:
    java.nio.file.Path systemJavaHome -> systemJavaHome
    java.nio.file.Path modules -> modules
    org.openjdk.tools.javac.file.Locations$ModuleTable moduleTable -> moduleTable
    org.openjdk.tools.javac.file.Locations this$0 -> this$0
    void <init>(org.openjdk.tools.javac.file.Locations) -> <init>
    boolean handleOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleOption
    java.util.Collection getPaths() -> getPaths
    void setPaths(java.lang.Iterable) -> setPaths
    void setPathsForModule(java.lang.String,java.lang.Iterable) -> setPathsForModule
    java.util.List checkPaths(java.lang.Iterable) -> checkPaths
    void update(java.nio.file.Path) -> update
    boolean isCurrentPlatform(java.nio.file.Path) -> isCurrentPlatform
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.lang.String) -> getLocationForModule
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(java.nio.file.Path) -> getLocationForModule
    java.lang.Iterable listLocationsForModules() -> listLocationsForModules
    boolean contains(java.nio.file.Path) -> contains
    void initSystemModules() -> initSystemModules
    boolean lambda$initSystemModules$0(java.nio.file.Path) -> lambda$initSystemModules$0
org.openjdk.tools.javac.file.PathFileObject -> org.openjdk.tools.javac.file.PathFileObject:
    java.nio.file.FileSystem defaultFileSystem -> defaultFileSystem
    boolean isMacOS -> isMacOS
    org.openjdk.tools.javac.file.BaseFileManager fileManager -> fileManager
    java.nio.file.Path path -> path
    boolean hasParents -> hasParents
    org.openjdk.tools.javac.file.PathFileObject forDirectoryPath(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath) -> forDirectoryPath
    org.openjdk.tools.javac.file.PathFileObject forJarPath(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,java.nio.file.Path) -> forJarPath
    org.openjdk.tools.javac.file.PathFileObject forJRTPath(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path) -> forJRTPath
    org.openjdk.tools.javac.file.PathFileObject forSimplePath(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,java.nio.file.Path) -> forSimplePath
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path) -> <init>
    java.lang.String inferBinaryName(java.lang.Iterable) -> inferBinaryName
    org.openjdk.tools.javac.file.PathFileObject getSibling(java.lang.String) -> getSibling
    java.nio.file.Path getPath() -> getPath
    java.lang.String getShortName() -> getShortName
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    boolean isPathNameCompatible(java.nio.file.Path,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isPathNameCompatible
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
    java.net.URI toUri() -> toUri
    java.io.InputStream openInputStream() -> openInputStream
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.io.Reader openReader(boolean) -> openReader
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
    java.io.Writer openWriter() -> openWriter
    long getLastModified() -> getLastModified
    boolean delete() -> delete
    boolean isSameFile(org.openjdk.tools.javac.file.PathFileObject) -> isSameFile
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void ensureParentDirectoriesExist() -> ensureParentDirectoriesExist
    java.lang.String toBinaryName(org.openjdk.tools.javac.file.RelativePath) -> toBinaryName
    java.lang.String toBinaryName(java.nio.file.Path) -> toBinaryName
    java.lang.String toBinaryName(java.lang.String,java.lang.String) -> toBinaryName
    java.lang.String removeExtension(java.lang.String) -> removeExtension
    java.lang.String getSimpleName(org.openjdk.javax.tools.FileObject) -> getSimpleName
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.file.PathFileObject$1 -> org.openjdk.tools.javac.file.PathFileObject$1:
org.openjdk.tools.javac.file.PathFileObject$CannotCreateUriError -> org.openjdk.tools.javac.file.PathFileObject$CannotCreateUriError:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.openjdk.tools.javac.file.PathFileObject$DirectoryFileObject -> org.openjdk.tools.javac.file.PathFileObject$DirectoryFileObject:
    java.nio.file.Path userPackageRootDir -> userPackageRootDir
    org.openjdk.tools.javac.file.RelativePath relativePath -> relativePath
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath) -> <init>
    java.lang.String getName() -> getName
    java.lang.String inferBinaryName(java.lang.Iterable) -> inferBinaryName
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.file.PathFileObject getSibling(java.lang.String) -> getSibling
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,java.nio.file.Path,org.openjdk.tools.javac.file.RelativePath,org.openjdk.tools.javac.file.PathFileObject$1) -> <init>
org.openjdk.tools.javac.file.PathFileObject$JRTFileObject -> org.openjdk.tools.javac.file.PathFileObject$JRTFileObject:
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path) -> <init>
    java.lang.String getName() -> getName
    java.lang.String inferBinaryName(java.lang.Iterable) -> inferBinaryName
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.file.PathFileObject getSibling(java.lang.String) -> getSibling
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,org.openjdk.tools.javac.file.PathFileObject$1) -> <init>
org.openjdk.tools.javac.file.PathFileObject$JarFileObject -> org.openjdk.tools.javac.file.PathFileObject$JarFileObject:
    java.nio.file.Path userJarPath -> userJarPath
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,java.nio.file.Path) -> <init>
    java.lang.String getName() -> getName
    java.lang.String inferBinaryName(java.lang.Iterable) -> inferBinaryName
    java.net.URI toUri() -> toUri
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.file.PathFileObject getSibling(java.lang.String) -> getSibling
    java.net.URI createJarUri(java.nio.file.Path,java.lang.String) -> createJarUri
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,java.nio.file.Path,org.openjdk.tools.javac.file.PathFileObject$1) -> <init>
org.openjdk.tools.javac.file.PathFileObject$SimpleFileObject -> org.openjdk.tools.javac.file.PathFileObject$SimpleFileObject:
    java.nio.file.Path userPath -> userPath
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,java.nio.file.Path) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getShortName() -> getShortName
    java.lang.String inferBinaryName(java.lang.Iterable) -> inferBinaryName
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    org.openjdk.tools.javac.file.PathFileObject getSibling(java.lang.String) -> getSibling
    void <init>(org.openjdk.tools.javac.file.BaseFileManager,java.nio.file.Path,java.nio.file.Path,org.openjdk.tools.javac.file.PathFileObject$1) -> <init>
org.openjdk.tools.javac.file.RelativePath -> org.openjdk.tools.javac.file.RelativePath:
    java.lang.String path -> path
    void <init>(java.lang.String) -> <init>
    org.openjdk.tools.javac.file.RelativePath$RelativeDirectory dirname() -> dirname
    java.lang.String basename() -> basename
    java.nio.file.Path resolveAgainst(java.nio.file.Path) -> resolveAgainst
    java.nio.file.Path resolveAgainst(java.nio.file.FileSystem) -> resolveAgainst
    int compareTo(org.openjdk.tools.javac.file.RelativePath) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String getPath() -> getPath
    int compareTo(java.lang.Object) -> compareTo
org.openjdk.tools.javac.file.RelativePath$RelativeDirectory -> org.openjdk.tools.javac.file.RelativePath$RelativeDirectory:
    org.openjdk.tools.javac.file.RelativePath$RelativeDirectory forPackage(java.lang.CharSequence) -> forPackage
    void <init>(java.lang.String) -> <init>
    void <init>(org.openjdk.tools.javac.file.RelativePath$RelativeDirectory,java.lang.String) -> <init>
    org.openjdk.tools.javac.file.RelativePath$RelativeDirectory dirname() -> dirname
    java.lang.String basename() -> basename
    boolean contains(org.openjdk.tools.javac.file.RelativePath) -> contains
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.openjdk.tools.javac.file.RelativePath$RelativeFile -> org.openjdk.tools.javac.file.RelativePath$RelativeFile:
    org.openjdk.tools.javac.file.RelativePath$RelativeFile forClass(java.lang.CharSequence,org.openjdk.javax.tools.JavaFileObject$Kind) -> forClass
    void <init>(java.lang.String) -> <init>
    void <init>(org.openjdk.tools.javac.file.RelativePath$RelativeDirectory,java.lang.String) -> <init>
    void <init>(org.openjdk.tools.javac.file.RelativePath$RelativeDirectory,org.openjdk.tools.javac.file.RelativePath) -> <init>
    org.openjdk.tools.javac.file.RelativePath$RelativeDirectory dirname() -> dirname
    java.lang.String basename() -> basename
    java.util.zip.ZipEntry getZipEntry(java.util.zip.ZipFile) -> getZipEntry
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.openjdk.tools.javac.jvm.ByteCodes -> org.openjdk.tools.javac.jvm.ByteCodes:
    int illegal -> illegal
    int nop -> nop
    int aconst_null -> aconst_null
    int iconst_m1 -> iconst_m1
    int iconst_0 -> iconst_0
    int iconst_1 -> iconst_1
    int iconst_2 -> iconst_2
    int iconst_3 -> iconst_3
    int iconst_4 -> iconst_4
    int iconst_5 -> iconst_5
    int lconst_0 -> lconst_0
    int lconst_1 -> lconst_1
    int fconst_0 -> fconst_0
    int fconst_1 -> fconst_1
    int fconst_2 -> fconst_2
    int dconst_0 -> dconst_0
    int dconst_1 -> dconst_1
    int bipush -> bipush
    int sipush -> sipush
    int ldc1 -> ldc1
    int ldc2 -> ldc2
    int ldc2w -> ldc2w
    int iload -> iload
    int lload -> lload
    int fload -> fload
    int dload -> dload
    int aload -> aload
    int iload_0 -> iload_0
    int iload_1 -> iload_1
    int iload_2 -> iload_2
    int iload_3 -> iload_3
    int lload_0 -> lload_0
    int lload_1 -> lload_1
    int lload_2 -> lload_2
    int lload_3 -> lload_3
    int fload_0 -> fload_0
    int fload_1 -> fload_1
    int fload_2 -> fload_2
    int fload_3 -> fload_3
    int dload_0 -> dload_0
    int dload_1 -> dload_1
    int dload_2 -> dload_2
    int dload_3 -> dload_3
    int aload_0 -> aload_0
    int aload_1 -> aload_1
    int aload_2 -> aload_2
    int aload_3 -> aload_3
    int iaload -> iaload
    int laload -> laload
    int faload -> faload
    int daload -> daload
    int aaload -> aaload
    int baload -> baload
    int caload -> caload
    int saload -> saload
    int istore -> istore
    int lstore -> lstore
    int fstore -> fstore
    int dstore -> dstore
    int astore -> astore
    int istore_0 -> istore_0
    int istore_1 -> istore_1
    int istore_2 -> istore_2
    int istore_3 -> istore_3
    int lstore_0 -> lstore_0
    int lstore_1 -> lstore_1
    int lstore_2 -> lstore_2
    int lstore_3 -> lstore_3
    int fstore_0 -> fstore_0
    int fstore_1 -> fstore_1
    int fstore_2 -> fstore_2
    int fstore_3 -> fstore_3
    int dstore_0 -> dstore_0
    int dstore_1 -> dstore_1
    int dstore_2 -> dstore_2
    int dstore_3 -> dstore_3
    int astore_0 -> astore_0
    int astore_1 -> astore_1
    int astore_2 -> astore_2
    int astore_3 -> astore_3
    int iastore -> iastore
    int lastore -> lastore
    int fastore -> fastore
    int dastore -> dastore
    int aastore -> aastore
    int bastore -> bastore
    int castore -> castore
    int sastore -> sastore
    int pop -> pop
    int pop2 -> pop2
    int dup -> dup
    int dup_x1 -> dup_x1
    int dup_x2 -> dup_x2
    int dup2 -> dup2
    int dup2_x1 -> dup2_x1
    int dup2_x2 -> dup2_x2
    int swap -> swap
    int iadd -> iadd
    int ladd -> ladd
    int fadd -> fadd
    int dadd -> dadd
    int isub -> isub
    int lsub -> lsub
    int fsub -> fsub
    int dsub -> dsub
    int imul -> imul
    int lmul -> lmul
    int fmul -> fmul
    int dmul -> dmul
    int idiv -> idiv
    int ldiv -> ldiv
    int fdiv -> fdiv
    int ddiv -> ddiv
    int imod -> imod
    int lmod -> lmod
    int fmod -> fmod
    int dmod -> dmod
    int ineg -> ineg
    int lneg -> lneg
    int fneg -> fneg
    int dneg -> dneg
    int ishl -> ishl
    int lshl -> lshl
    int ishr -> ishr
    int lshr -> lshr
    int iushr -> iushr
    int lushr -> lushr
    int iand -> iand
    int land -> land
    int ior -> ior
    int lor -> lor
    int ixor -> ixor
    int lxor -> lxor
    int iinc -> iinc
    int i2l -> i2l
    int i2f -> i2f
    int i2d -> i2d
    int l2i -> l2i
    int l2f -> l2f
    int l2d -> l2d
    int f2i -> f2i
    int f2l -> f2l
    int f2d -> f2d
    int d2i -> d2i
    int d2l -> d2l
    int d2f -> d2f
    int int2byte -> int2byte
    int int2char -> int2char
    int int2short -> int2short
    int lcmp -> lcmp
    int fcmpl -> fcmpl
    int fcmpg -> fcmpg
    int dcmpl -> dcmpl
    int dcmpg -> dcmpg
    int ifeq -> ifeq
    int ifne -> ifne
    int iflt -> iflt
    int ifge -> ifge
    int ifgt -> ifgt
    int ifle -> ifle
    int if_icmpeq -> if_icmpeq
    int if_icmpne -> if_icmpne
    int if_icmplt -> if_icmplt
    int if_icmpge -> if_icmpge
    int if_icmpgt -> if_icmpgt
    int if_icmple -> if_icmple
    int if_acmpeq -> if_acmpeq
    int if_acmpne -> if_acmpne
    int goto_ -> goto_
    int jsr -> jsr
    int ret -> ret
    int tableswitch -> tableswitch
    int lookupswitch -> lookupswitch
    int ireturn -> ireturn
    int lreturn -> lreturn
    int freturn -> freturn
    int dreturn -> dreturn
    int areturn -> areturn
    int return_ -> return_
    int getstatic -> getstatic
    int putstatic -> putstatic
    int getfield -> getfield
    int putfield -> putfield
    int invokevirtual -> invokevirtual
    int invokespecial -> invokespecial
    int invokestatic -> invokestatic
    int invokeinterface -> invokeinterface
    int invokedynamic -> invokedynamic
    int new_ -> new_
    int newarray -> newarray
    int anewarray -> anewarray
    int arraylength -> arraylength
    int athrow -> athrow
    int checkcast -> checkcast
    int instanceof_ -> instanceof_
    int monitorenter -> monitorenter
    int monitorexit -> monitorexit
    int wide -> wide
    int multianewarray -> multianewarray
    int if_acmp_null -> if_acmp_null
    int if_acmp_nonnull -> if_acmp_nonnull
    int goto_w -> goto_w
    int jsr_w -> jsr_w
    int breakpoint -> breakpoint
    int ByteCodeCount -> ByteCodeCount
    int string_add -> string_add
    int bool_not -> bool_not
    int bool_and -> bool_and
    int bool_or -> bool_or
    int ishll -> ishll
    int lshll -> lshll
    int ishrl -> ishrl
    int lshrl -> lshrl
    int iushrl -> iushrl
    int lushrl -> lushrl
    int nullchk -> nullchk
    int error -> error
    int dontgoto -> dontgoto
    int preShift -> preShift
    int preMask -> preMask
    int INTcode -> INTcode
    int LONGcode -> LONGcode
    int FLOATcode -> FLOATcode
    int DOUBLEcode -> DOUBLEcode
    int OBJECTcode -> OBJECTcode
    int BYTEcode -> BYTEcode
    int CHARcode -> CHARcode
    int SHORTcode -> SHORTcode
    int VOIDcode -> VOIDcode
    int TypeCodeCount -> TypeCodeCount
    java.lang.String[] typecodeNames -> typecodeNames
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.CRTFlags -> org.openjdk.tools.javac.jvm.CRTFlags:
    int CRT_STATEMENT -> CRT_STATEMENT
    int CRT_BLOCK -> CRT_BLOCK
    int CRT_ASSIGNMENT -> CRT_ASSIGNMENT
    int CRT_FLOW_CONTROLLER -> CRT_FLOW_CONTROLLER
    int CRT_FLOW_TARGET -> CRT_FLOW_TARGET
    int CRT_INVOKE -> CRT_INVOKE
    int CRT_CREATE -> CRT_CREATE
    int CRT_BRANCH_TRUE -> CRT_BRANCH_TRUE
    int CRT_BRANCH_FALSE -> CRT_BRANCH_FALSE
    int CRT_VALID_FLAGS -> CRT_VALID_FLAGS
org.openjdk.tools.javac.jvm.CRTable -> org.openjdk.tools.javac.jvm.CRTable:
    boolean crtDebug -> crtDebug
    org.openjdk.tools.javac.util.ListBuffer entries -> entries
    java.util.Map positions -> positions
    org.openjdk.tools.javac.tree.EndPosTable endPosTable -> endPosTable
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl methodTree -> methodTree
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl,org.openjdk.tools.javac.tree.EndPosTable) -> <init>
    void put(java.lang.Object,int,int,int) -> put
    int writeCRT(org.openjdk.tools.javac.util.ByteBuffer,org.openjdk.tools.javac.util.Position$LineMap,org.openjdk.tools.javac.util.Log) -> writeCRT
    int length() -> length
    java.lang.String getTypes(int) -> getTypes
    int encodePosition(int,org.openjdk.tools.javac.util.Position$LineMap,org.openjdk.tools.javac.util.Log) -> encodePosition
    java.util.Map access$000(org.openjdk.tools.javac.jvm.CRTable) -> access$000
    org.openjdk.tools.javac.tree.EndPosTable access$100(org.openjdk.tools.javac.jvm.CRTable) -> access$100
org.openjdk.tools.javac.jvm.CRTable$CRTEntry -> org.openjdk.tools.javac.jvm.CRTable$CRTEntry:
    java.lang.Object tree -> tree
    int flags -> flags
    int startPc -> startPc
    int endPc -> endPc
    void <init>(java.lang.Object,int,int,int) -> <init>
org.openjdk.tools.javac.jvm.CRTable$SourceComputer -> org.openjdk.tools.javac.jvm.CRTable$SourceComputer:
    org.openjdk.tools.javac.jvm.CRTable$SourceRange result -> result
    org.openjdk.tools.javac.jvm.CRTable this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.CRTable) -> <init>
    org.openjdk.tools.javac.jvm.CRTable$SourceRange csp(org.openjdk.tools.javac.tree.JCTree) -> csp
    org.openjdk.tools.javac.jvm.CRTable$SourceRange csp(org.openjdk.tools.javac.util.List) -> csp
    org.openjdk.tools.javac.jvm.CRTable$SourceRange cspCases(org.openjdk.tools.javac.util.List) -> cspCases
    org.openjdk.tools.javac.jvm.CRTable$SourceRange cspCatchers(org.openjdk.tools.javac.util.List) -> cspCatchers
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitSkip(org.openjdk.tools.javac.tree.JCTree$JCSkip) -> visitSkip
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void visitCase(org.openjdk.tools.javac.tree.JCTree$JCCase) -> visitCase
    void visitSynchronized(org.openjdk.tools.javac.tree.JCTree$JCSynchronized) -> visitSynchronized
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitCatch(org.openjdk.tools.javac.tree.JCTree$JCCatch) -> visitCatch
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitExec(org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement) -> visitExec
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitAssert(org.openjdk.tools.javac.tree.JCTree$JCAssert) -> visitAssert
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitTypeTest(org.openjdk.tools.javac.tree.JCTree$JCInstanceOf) -> visitTypeTest
    void visitIndexed(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess) -> visitIndexed
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitLiteral(org.openjdk.tools.javac.tree.JCTree$JCLiteral) -> visitLiteral
    void visitTypeIdent(org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree) -> visitTypeIdent
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitLetExpr(org.openjdk.tools.javac.tree.JCTree$LetExpr) -> visitLetExpr
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void visitTypeUnion(org.openjdk.tools.javac.tree.JCTree$JCTypeUnion) -> visitTypeUnion
    void visitWildcard(org.openjdk.tools.javac.tree.JCTree$JCWildcard) -> visitWildcard
    void visitErroneous(org.openjdk.tools.javac.tree.JCTree$JCErroneous) -> visitErroneous
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    int startPos(org.openjdk.tools.javac.tree.JCTree) -> startPos
    int endPos(org.openjdk.tools.javac.tree.JCTree) -> endPos
org.openjdk.tools.javac.jvm.CRTable$SourceRange -> org.openjdk.tools.javac.jvm.CRTable$SourceRange:
    int startPos -> startPos
    int endPos -> endPos
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    org.openjdk.tools.javac.jvm.CRTable$SourceRange mergeWith(org.openjdk.tools.javac.jvm.CRTable$SourceRange) -> mergeWith
org.openjdk.tools.javac.jvm.ClassFile -> org.openjdk.tools.javac.jvm.ClassFile:
    int JAVA_MAGIC -> JAVA_MAGIC
    int CONSTANT_Utf8 -> CONSTANT_Utf8
    int CONSTANT_Unicode -> CONSTANT_Unicode
    int CONSTANT_Integer -> CONSTANT_Integer
    int CONSTANT_Float -> CONSTANT_Float
    int CONSTANT_Long -> CONSTANT_Long
    int CONSTANT_Double -> CONSTANT_Double
    int CONSTANT_Class -> CONSTANT_Class
    int CONSTANT_String -> CONSTANT_String
    int CONSTANT_Fieldref -> CONSTANT_Fieldref
    int CONSTANT_Methodref -> CONSTANT_Methodref
    int CONSTANT_InterfaceMethodref -> CONSTANT_InterfaceMethodref
    int CONSTANT_NameandType -> CONSTANT_NameandType
    int CONSTANT_MethodHandle -> CONSTANT_MethodHandle
    int CONSTANT_MethodType -> CONSTANT_MethodType
    int CONSTANT_InvokeDynamic -> CONSTANT_InvokeDynamic
    int CONSTANT_Module -> CONSTANT_Module
    int CONSTANT_Package -> CONSTANT_Package
    int REF_getField -> REF_getField
    int REF_getStatic -> REF_getStatic
    int REF_putField -> REF_putField
    int REF_putStatic -> REF_putStatic
    int REF_invokeVirtual -> REF_invokeVirtual
    int REF_invokeStatic -> REF_invokeStatic
    int REF_invokeSpecial -> REF_invokeSpecial
    int REF_newInvokeSpecial -> REF_newInvokeSpecial
    int REF_invokeInterface -> REF_invokeInterface
    int MAX_PARAMETERS -> MAX_PARAMETERS
    int MAX_DIMENSIONS -> MAX_DIMENSIONS
    int MAX_CODE -> MAX_CODE
    int MAX_LOCALS -> MAX_LOCALS
    int MAX_STACK -> MAX_STACK
    void <init>() -> <init>
    byte[] internalize(byte[],int,int) -> internalize
    byte[] internalize(org.openjdk.tools.javac.util.Name) -> internalize
    byte[] externalize(byte[],int,int) -> externalize
    byte[] externalize(org.openjdk.tools.javac.util.Name) -> externalize
org.openjdk.tools.javac.jvm.ClassFile$NameAndType -> org.openjdk.tools.javac.jvm.ClassFile$NameAndType:
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.code.Types$UniqueType uniqueType -> uniqueType
    org.openjdk.tools.javac.code.Types types -> types
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> <init>
    void setType(org.openjdk.tools.javac.code.Type) -> setType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.openjdk.tools.javac.jvm.ClassFile$Version -> org.openjdk.tools.javac.jvm.ClassFile$Version:
    org.openjdk.tools.javac.jvm.ClassFile$Version V45_3 -> V45_3
    org.openjdk.tools.javac.jvm.ClassFile$Version V49 -> V49
    org.openjdk.tools.javac.jvm.ClassFile$Version V50 -> V50
    org.openjdk.tools.javac.jvm.ClassFile$Version V51 -> V51
    org.openjdk.tools.javac.jvm.ClassFile$Version V52 -> V52
    org.openjdk.tools.javac.jvm.ClassFile$Version V53 -> V53
    int major -> major
    int minor -> minor
    org.openjdk.tools.javac.jvm.ClassFile$Version MIN -> MIN
    org.openjdk.tools.javac.jvm.ClassFile$Version MAX -> MAX
    org.openjdk.tools.javac.jvm.ClassFile$Version[] $VALUES -> $VALUES
    org.openjdk.tools.javac.jvm.ClassFile$Version[] values() -> values
    org.openjdk.tools.javac.jvm.ClassFile$Version valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int) -> <init>
    org.openjdk.tools.javac.jvm.ClassFile$Version MIN() -> MIN
    org.openjdk.tools.javac.jvm.ClassFile$Version MAX() -> MAX
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.ClassReader -> org.openjdk.tools.javac.jvm.ClassReader:
    org.openjdk.tools.javac.util.Context$Key classReaderKey -> classReaderKey
    int INITIAL_BUFFER_SIZE -> INITIAL_BUFFER_SIZE
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    boolean verbose -> verbose
    boolean readAllOfClassFile -> readAllOfClassFile
    boolean allowSimplifiedVarargs -> allowSimplifiedVarargs
    boolean allowModules -> allowModules
    boolean lintClassfile -> lintClassfile
    boolean saveParameterNames -> saveParameterNames
    org.openjdk.tools.javac.jvm.Profile profile -> profile
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diagFactory -> diagFactory
    org.openjdk.tools.javac.code.Scope$WriteableScope typevars -> typevars
    org.openjdk.tools.javac.util.List interimUses -> interimUses
    org.openjdk.tools.javac.util.List interimProvides -> interimProvides
    org.openjdk.javax.tools.JavaFileObject currentClassFile -> currentClassFile
    org.openjdk.tools.javac.code.Symbol currentOwner -> currentOwner
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol currentModule -> currentModule
    byte[] buf -> buf
    int bp -> bp
    java.lang.Object[] poolObj -> poolObj
    int[] poolIdx -> poolIdx
    int majorVersion -> majorVersion
    int minorVersion -> minorVersion
    int[] parameterNameIndices -> parameterNameIndices
    org.openjdk.tools.javac.jvm.ClassReader$ParameterAnnotations[] parameterAnnotations -> parameterAnnotations
    boolean haveParameterNameIndices -> haveParameterNameIndices
    boolean sawMethodParameters -> sawMethodParameters
    java.util.Set warnedAttrs -> warnedAttrs
    org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy target -> target
    org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy repeatable -> repeatable
    byte[] signature -> signature
    int sigp -> sigp
    int siglimit -> siglimit
    boolean sigEnterPhase -> sigEnterPhase
    byte[] signatureBuffer -> signatureBuffer
    int sbp -> sbp
    java.util.Set CLASS_ATTRIBUTE -> CLASS_ATTRIBUTE
    java.util.Set MEMBER_ATTRIBUTE -> MEMBER_ATTRIBUTE
    java.util.Set CLASS_OR_MEMBER_ATTRIBUTE -> CLASS_OR_MEMBER_ATTRIBUTE
    java.util.Map attributeReaders -> attributeReaders
    boolean readingClassAttr -> readingClassAttr
    org.openjdk.tools.javac.util.List missingTypeVariables -> missingTypeVariables
    org.openjdk.tools.javac.util.List foundTypeVariables -> foundTypeVariables
    boolean filling -> filling
    org.openjdk.tools.javac.jvm.ClassReader instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void enterMember(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.code.Symbol) -> enterMember
    org.openjdk.tools.javac.code.ClassFinder$BadClassFile badClassFile(java.lang.String,java.lang.Object[]) -> badClassFile
    org.openjdk.tools.javac.code.ClassFinder$BadEnclosingMethodAttr badEnclosingMethod(java.lang.Object[]) -> badEnclosingMethod
    char nextChar() -> nextChar
    int nextByte() -> nextByte
    int nextInt() -> nextInt
    char getChar(int) -> getChar
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    float getFloat(int) -> getFloat
    double getDouble(int) -> getDouble
    void indexPool() -> indexPool
    java.lang.Object readPool(int) -> readPool
    org.openjdk.tools.javac.code.Type readType(int) -> readType
    java.lang.Object readClassOrType(int) -> readClassOrType
    org.openjdk.tools.javac.util.List readTypeParams(int) -> readTypeParams
    org.openjdk.tools.javac.code.Symbol$ClassSymbol readClassSymbol(int) -> readClassSymbol
    org.openjdk.tools.javac.util.Name readClassName(int) -> readClassName
    org.openjdk.tools.javac.util.Name readName(int) -> readName
    org.openjdk.tools.javac.jvm.ClassFile$NameAndType readNameAndType(int) -> readNameAndType
    org.openjdk.tools.javac.util.Name readModuleName(int) -> readModuleName
    java.util.Set readModuleFlags(int) -> readModuleFlags
    java.util.Set readModuleResolutionFlags(int) -> readModuleResolutionFlags
    java.util.Set readExportsFlags(int) -> readExportsFlags
    java.util.Set readOpensFlags(int) -> readOpensFlags
    java.util.Set readRequiresFlags(int) -> readRequiresFlags
    org.openjdk.tools.javac.code.Type sigToType(byte[],int,int) -> sigToType
    org.openjdk.tools.javac.code.Type sigToType() -> sigToType
    org.openjdk.tools.javac.code.Type classSigToType() -> classSigToType
    org.openjdk.tools.javac.util.List sigToTypes(char) -> sigToTypes
    org.openjdk.tools.javac.util.List sigToTypeParams(byte[],int,int) -> sigToTypeParams
    org.openjdk.tools.javac.util.List sigToTypeParams() -> sigToTypeParams
    org.openjdk.tools.javac.code.Type sigToTypeParam() -> sigToTypeParam
    org.openjdk.tools.javac.code.Type findTypeVar(org.openjdk.tools.javac.util.Name) -> findTypeVar
    void initAttributeReaders() -> initAttributeReaders
    void readEnclosingMethodAttr(org.openjdk.tools.javac.code.Symbol) -> readEnclosingMethodAttr
    org.openjdk.tools.javac.util.Name simpleBinaryName(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Name) -> simpleBinaryName
    org.openjdk.tools.javac.code.Symbol$MethodSymbol findMethod(org.openjdk.tools.javac.jvm.ClassFile$NameAndType,org.openjdk.tools.javac.code.Scope,long) -> findMethod
    boolean isSameBinaryType(org.openjdk.tools.javac.code.Type$MethodType,org.openjdk.tools.javac.code.Type$MethodType) -> isSameBinaryType
    boolean isAsciiDigit(char) -> isAsciiDigit
    void readMemberAttrs(org.openjdk.tools.javac.code.Symbol) -> readMemberAttrs
    void readAttrs(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.jvm.ClassReader$AttributeKind) -> readAttrs
    void readClassAttrs(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> readClassAttrs
    org.openjdk.tools.javac.jvm.Code readCode(org.openjdk.tools.javac.code.Symbol) -> readCode
    org.openjdk.tools.javac.util.List readAnnotations() -> readAnnotations
    void attachAnnotations(org.openjdk.tools.javac.code.Symbol) -> attachAnnotations
    void attachAnnotations(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List) -> attachAnnotations
    void readParameterAnnotations(org.openjdk.tools.javac.code.Symbol) -> readParameterAnnotations
    void attachTypeAnnotations(org.openjdk.tools.javac.code.Symbol) -> attachTypeAnnotations
    void attachAnnotationDefault(org.openjdk.tools.javac.code.Symbol) -> attachAnnotationDefault
    org.openjdk.tools.javac.code.Type readTypeOrClassSymbol(int) -> readTypeOrClassSymbol
    org.openjdk.tools.javac.code.Type readEnumType(int) -> readEnumType
    org.openjdk.tools.javac.code.Type readTypeToProxy(int) -> readTypeToProxy
    org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy readCompoundAnnotation() -> readCompoundAnnotation
    org.openjdk.tools.javac.jvm.ClassReader$TypeAnnotationProxy readTypeAnnotation() -> readTypeAnnotation
    org.openjdk.tools.javac.code.TypeAnnotationPosition readPosition() -> readPosition
    org.openjdk.tools.javac.util.List readTypePath() -> readTypePath
    org.openjdk.tools.javac.code.Attribute readAttributeValue() -> readAttributeValue
    org.openjdk.tools.javac.code.Symbol$VarSymbol readField() -> readField
    org.openjdk.tools.javac.code.Symbol$MethodSymbol readMethod() -> readMethod
    org.openjdk.tools.javac.util.List adjustMethodParams(long,org.openjdk.tools.javac.util.List) -> adjustMethodParams
    void initParameterNames(org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> initParameterNames
    void setParameters(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Type) -> setParameters
    org.openjdk.tools.javac.util.Name parameterName(int,org.openjdk.tools.javac.util.List) -> parameterName
    void skipBytes(int) -> skipBytes
    void skipMember() -> skipMember
    void skipInnerClasses() -> skipInnerClasses
    void enterTypevars(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> enterTypevars
    org.openjdk.tools.javac.code.Symbol$ClassSymbol enterClass(org.openjdk.tools.javac.util.Name) -> enterClass
    org.openjdk.tools.javac.code.Symbol$ClassSymbol enterClass(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> enterClass
    void readClass(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> readClass
    void readInnerClasses(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> readInnerClasses
    void readClassBuffer(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> readClassBuffer
    void readClassFile(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> readClassFile
    byte[] readInputStream(byte[],java.io.InputStream) -> readInputStream
    byte[] ensureCapacity(byte[],int) -> ensureCapacity
    long adjustFieldFlags(long) -> adjustFieldFlags
    long adjustMethodFlags(long) -> adjustMethodFlags
    long adjustClassFlags(long) -> adjustClassFlags
    boolean access$002(org.openjdk.tools.javac.jvm.ClassReader,boolean) -> access$002
    org.openjdk.tools.javac.util.List access$102(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.List) -> access$102
    org.openjdk.tools.javac.util.List access$202(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.List) -> access$202
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.ClassReader$1 -> org.openjdk.tools.javac.jvm.ClassReader$1:
    boolean completed -> completed
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> <init>
    org.openjdk.tools.javac.code.Type getEnclosingType() -> getEnclosingType
    void setEnclosingType(org.openjdk.tools.javac.code.Type) -> setEnclosingType
    org.openjdk.javax.lang.model.type.TypeMirror getEnclosingType() -> getEnclosingType
org.openjdk.tools.javac.jvm.ClassReader$10 -> org.openjdk.tools.javac.jvm.ClassReader$10:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$11 -> org.openjdk.tools.javac.jvm.ClassReader$11:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$12 -> org.openjdk.tools.javac.jvm.ClassReader$12:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$13 -> org.openjdk.tools.javac.jvm.ClassReader$13:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$14 -> org.openjdk.tools.javac.jvm.ClassReader$14:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$15 -> org.openjdk.tools.javac.jvm.ClassReader$15:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$16 -> org.openjdk.tools.javac.jvm.ClassReader$16:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$17 -> org.openjdk.tools.javac.jvm.ClassReader$17:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$18 -> org.openjdk.tools.javac.jvm.ClassReader$18:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$19 -> org.openjdk.tools.javac.jvm.ClassReader$19:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$2 -> org.openjdk.tools.javac.jvm.ClassReader$2:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$20 -> org.openjdk.tools.javac.jvm.ClassReader$20:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$21 -> org.openjdk.tools.javac.jvm.ClassReader$21:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$22 -> org.openjdk.tools.javac.jvm.ClassReader$22:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$23 -> org.openjdk.tools.javac.jvm.ClassReader$23:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$24 -> org.openjdk.tools.javac.jvm.ClassReader$24:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    boolean accepts(org.openjdk.tools.javac.jvm.ClassReader$AttributeKind) -> accepts
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$25 -> org.openjdk.tools.javac.jvm.ClassReader$25:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    boolean accepts(org.openjdk.tools.javac.jvm.ClassReader$AttributeKind) -> accepts
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$26 -> org.openjdk.tools.javac.jvm.ClassReader$26:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    int[] $SwitchMap$com$sun$tools$javac$code$TargetType -> $SwitchMap$com$sun$tools$javac$code$TargetType
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.ClassReader$3 -> org.openjdk.tools.javac.jvm.ClassReader$3:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
    void checkType(org.openjdk.tools.javac.code.Symbol,java.lang.Class,java.lang.Object) -> checkType
org.openjdk.tools.javac.jvm.ClassReader$4 -> org.openjdk.tools.javac.jvm.ClassReader$4:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$5 -> org.openjdk.tools.javac.jvm.ClassReader$5:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$6 -> org.openjdk.tools.javac.jvm.ClassReader$6:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$7 -> org.openjdk.tools.javac.jvm.ClassReader$7:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$8 -> org.openjdk.tools.javac.jvm.ClassReader$8:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$9 -> org.openjdk.tools.javac.jvm.ClassReader$9:
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$AnnotationCompleter -> org.openjdk.tools.javac.jvm.ClassReader$AnnotationCompleter:
    org.openjdk.tools.javac.code.Symbol sym -> sym
    org.openjdk.tools.javac.util.List l -> l
    org.openjdk.javax.tools.JavaFileObject classFile -> classFile
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List) -> <init>
    void run() -> run
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.ClassReader$AnnotationDefaultCompleter -> org.openjdk.tools.javac.jvm.ClassReader$AnnotationDefaultCompleter:
    org.openjdk.tools.javac.code.Symbol$MethodSymbol sym -> sym
    org.openjdk.tools.javac.code.Attribute value -> value
    org.openjdk.javax.tools.JavaFileObject classFile -> classFile
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Attribute) -> <init>
    void run() -> run
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.ClassReader$AnnotationDeproxy -> org.openjdk.tools.javac.jvm.ClassReader$AnnotationDeproxy:
    org.openjdk.tools.javac.code.Symbol$ClassSymbol requestingOwner -> requestingOwner
    org.openjdk.tools.javac.code.Attribute result -> result
    org.openjdk.tools.javac.code.Type type -> type
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> <init>
    org.openjdk.tools.javac.util.List deproxyCompoundList(org.openjdk.tools.javac.util.List) -> deproxyCompoundList
    org.openjdk.tools.javac.code.Attribute$Compound deproxyCompound(org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy) -> deproxyCompound
    org.openjdk.tools.javac.code.Symbol$MethodSymbol findAccessMethod(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name) -> findAccessMethod
    org.openjdk.tools.javac.code.Attribute deproxy(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Attribute) -> deproxy
    void visitConstant(org.openjdk.tools.javac.code.Attribute$Constant) -> visitConstant
    void visitClass(org.openjdk.tools.javac.code.Attribute$Class) -> visitClass
    void visitEnum(org.openjdk.tools.javac.code.Attribute$Enum) -> visitEnum
    void visitCompound(org.openjdk.tools.javac.code.Attribute$Compound) -> visitCompound
    void visitArray(org.openjdk.tools.javac.code.Attribute$Array) -> visitArray
    void visitError(org.openjdk.tools.javac.code.Attribute$Error) -> visitError
    void visitEnumAttributeProxy(org.openjdk.tools.javac.jvm.ClassReader$EnumAttributeProxy) -> visitEnumAttributeProxy
    void visitClassAttributeProxy(org.openjdk.tools.javac.jvm.ClassReader$ClassAttributeProxy) -> visitClassAttributeProxy
    void visitArrayAttributeProxy(org.openjdk.tools.javac.jvm.ClassReader$ArrayAttributeProxy) -> visitArrayAttributeProxy
    void visitCompoundAnnotationProxy(org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy) -> visitCompoundAnnotationProxy
    org.openjdk.tools.javac.code.Type resolvePossibleProxyType(org.openjdk.tools.javac.code.Type) -> resolvePossibleProxyType
org.openjdk.tools.javac.jvm.ClassReader$ArrayAttributeProxy -> org.openjdk.tools.javac.jvm.ClassReader$ArrayAttributeProxy:
    org.openjdk.tools.javac.util.List values -> values
    void <init>(org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.ClassReader$AttributeKind -> org.openjdk.tools.javac.jvm.ClassReader$AttributeKind:
    org.openjdk.tools.javac.jvm.ClassReader$AttributeKind CLASS -> CLASS
    org.openjdk.tools.javac.jvm.ClassReader$AttributeKind MEMBER -> MEMBER
    org.openjdk.tools.javac.jvm.ClassReader$AttributeKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.jvm.ClassReader$AttributeKind[] values() -> values
    org.openjdk.tools.javac.jvm.ClassReader$AttributeKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.ClassReader$AttributeReader -> org.openjdk.tools.javac.jvm.ClassReader$AttributeReader:
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.jvm.ClassFile$Version version -> version
    java.util.Set kinds -> kinds
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.jvm.ClassFile$Version,java.util.Set) -> <init>
    boolean accepts(org.openjdk.tools.javac.jvm.ClassReader$AttributeKind) -> accepts
    void read(org.openjdk.tools.javac.code.Symbol,int) -> read
org.openjdk.tools.javac.jvm.ClassReader$ClassAttributeProxy -> org.openjdk.tools.javac.jvm.ClassReader$ClassAttributeProxy:
    org.openjdk.tools.javac.code.Type classType -> classType
    void <init>(org.openjdk.tools.javac.code.Type) -> <init>
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.ClassReader$CompleterDeproxy -> org.openjdk.tools.javac.jvm.ClassReader$CompleterDeproxy:
    org.openjdk.tools.javac.code.Symbol$ClassSymbol proxyOn -> proxyOn
    org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy target -> target
    org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy repeatable -> repeatable
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy,org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> complete
org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy -> org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy:
    org.openjdk.tools.javac.util.List values -> values
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.ClassReader$EnumAttributeProxy -> org.openjdk.tools.javac.jvm.ClassReader$EnumAttributeProxy:
    org.openjdk.tools.javac.code.Type enumType -> enumType
    org.openjdk.tools.javac.util.Name enumerator -> enumerator
    void <init>(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name) -> <init>
    void accept(org.openjdk.tools.javac.code.Attribute$Visitor) -> accept
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.ClassReader$InterimProvidesDirective -> org.openjdk.tools.javac.jvm.ClassReader$InterimProvidesDirective:
    org.openjdk.tools.javac.util.Name service -> service
    org.openjdk.tools.javac.util.List impls -> impls
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> <init>
org.openjdk.tools.javac.jvm.ClassReader$InterimUsesDirective -> org.openjdk.tools.javac.jvm.ClassReader$InterimUsesDirective:
    org.openjdk.tools.javac.util.Name service -> service
    void <init>(org.openjdk.tools.javac.util.Name) -> <init>
org.openjdk.tools.javac.jvm.ClassReader$ParameterAnnotations -> org.openjdk.tools.javac.jvm.ClassReader$ParameterAnnotations:
    org.openjdk.tools.javac.util.List proxies -> proxies
    void <init>() -> <init>
    void add(org.openjdk.tools.javac.util.List) -> add
org.openjdk.tools.javac.jvm.ClassReader$ProxyType -> org.openjdk.tools.javac.jvm.ClassReader$ProxyType:
    byte[] content -> content
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,byte[]) -> <init>
    org.openjdk.tools.javac.code.TypeTag getTag() -> getTag
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type resolve() -> resolve
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.ClassReader$ProxyVisitor -> org.openjdk.tools.javac.jvm.ClassReader$ProxyVisitor:
    void visitEnumAttributeProxy(org.openjdk.tools.javac.jvm.ClassReader$EnumAttributeProxy) -> visitEnumAttributeProxy
    void visitClassAttributeProxy(org.openjdk.tools.javac.jvm.ClassReader$ClassAttributeProxy) -> visitClassAttributeProxy
    void visitArrayAttributeProxy(org.openjdk.tools.javac.jvm.ClassReader$ArrayAttributeProxy) -> visitArrayAttributeProxy
    void visitCompoundAnnotationProxy(org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy) -> visitCompoundAnnotationProxy
org.openjdk.tools.javac.jvm.ClassReader$SourceFileObject -> org.openjdk.tools.javac.jvm.ClassReader$SourceFileObject:
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.util.Name flatname -> flatname
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Name) -> <init>
    java.net.URI toUri() -> toUri
    java.lang.String getName() -> getName
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    java.io.InputStream openInputStream() -> openInputStream
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.nio.CharBuffer getCharContent(boolean) -> getCharContent
    java.io.Reader openReader(boolean) -> openReader
    java.io.Writer openWriter() -> openWriter
    long getLastModified() -> getLastModified
    boolean delete() -> delete
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
org.openjdk.tools.javac.jvm.ClassReader$TypeAnnotationCompleter -> org.openjdk.tools.javac.jvm.ClassReader$TypeAnnotationCompleter:
    org.openjdk.tools.javac.util.List proxies -> proxies
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.util.List deproxyTypeCompoundList(org.openjdk.tools.javac.util.List) -> deproxyTypeCompoundList
    void run() -> run
org.openjdk.tools.javac.jvm.ClassReader$TypeAnnotationProxy -> org.openjdk.tools.javac.jvm.ClassReader$TypeAnnotationProxy:
    org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy compound -> compound
    org.openjdk.tools.javac.code.TypeAnnotationPosition position -> position
    void <init>(org.openjdk.tools.javac.jvm.ClassReader$CompoundAnnotationProxy,org.openjdk.tools.javac.code.TypeAnnotationPosition) -> <init>
org.openjdk.tools.javac.jvm.ClassReader$UsesProvidesCompleter -> org.openjdk.tools.javac.jvm.ClassReader$UsesProvidesCompleter:
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol currentModule -> currentModule
    org.openjdk.tools.javac.util.List interimUsesCopy -> interimUsesCopy
    org.openjdk.tools.javac.util.List interimProvidesCopy -> interimProvidesCopy
    org.openjdk.tools.javac.jvm.ClassReader this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassReader,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
org.openjdk.tools.javac.jvm.ClassWriter -> org.openjdk.tools.javac.jvm.ClassWriter:
    org.openjdk.tools.javac.util.Context$Key classWriterKey -> classWriterKey
    org.openjdk.tools.javac.util.Options options -> options
    boolean verbose -> verbose
    boolean emitSourceFile -> emitSourceFile
    boolean genCrt -> genCrt
    boolean debugstackmap -> debugstackmap
    org.openjdk.tools.javac.jvm.Target target -> target
    org.openjdk.tools.javac.code.Source source -> source
    org.openjdk.tools.javac.code.Types types -> types
    boolean multiModuleMode -> multiModuleMode
    int DATA_BUF_SIZE -> DATA_BUF_SIZE
    int POOL_BUF_SIZE -> POOL_BUF_SIZE
    org.openjdk.tools.javac.util.ByteBuffer databuf -> databuf
    org.openjdk.tools.javac.util.ByteBuffer poolbuf -> poolbuf
    org.openjdk.tools.javac.jvm.Pool pool -> pool
    java.util.Set innerClasses -> innerClasses
    org.openjdk.tools.javac.util.ListBuffer innerClassesQueue -> innerClassesQueue
    java.util.Map bootstrapMethods -> bootstrapMethods
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.jvm.ClassWriter$CWSignatureGenerator signatureGen -> signatureGen
    int SAME_FRAME_SIZE -> SAME_FRAME_SIZE
    int SAME_LOCALS_1_STACK_ITEM_EXTENDED -> SAME_LOCALS_1_STACK_ITEM_EXTENDED
    int SAME_FRAME_EXTENDED -> SAME_FRAME_EXTENDED
    int FULL_FRAME -> FULL_FRAME
    int MAX_LOCAL_LENGTH_DIFF -> MAX_LOCAL_LENGTH_DIFF
    boolean dumpClassModifiers -> dumpClassModifiers
    boolean dumpFieldModifiers -> dumpFieldModifiers
    boolean dumpInnerClassModifiers -> dumpInnerClassModifiers
    boolean dumpMethodModifiers -> dumpMethodModifiers
    java.lang.String[] flagName -> flagName
    org.openjdk.tools.javac.jvm.ClassWriter$AttributeWriter awriter -> awriter
    org.openjdk.tools.javac.jvm.ClassWriter instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.lang.String flagNames(long) -> flagNames
    void putChar(org.openjdk.tools.javac.util.ByteBuffer,int,int) -> putChar
    void putInt(org.openjdk.tools.javac.util.ByteBuffer,int,int) -> putInt
    org.openjdk.tools.javac.util.Name typeSig(org.openjdk.tools.javac.code.Type) -> typeSig
    org.openjdk.tools.javac.util.Name xClassName(org.openjdk.tools.javac.code.Type) -> xClassName
    void writePool(org.openjdk.tools.javac.jvm.Pool) -> writePool
    org.openjdk.tools.javac.jvm.ClassFile$NameAndType nameType(org.openjdk.tools.javac.code.Symbol) -> nameType
    int writeAttr(org.openjdk.tools.javac.util.Name) -> writeAttr
    void endAttr(int) -> endAttr
    int beginAttrs() -> beginAttrs
    void endAttrs(int,int) -> endAttrs
    int writeEnclosingMethodAttribute(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> writeEnclosingMethodAttribute
    int writeEnclosingMethodAttribute(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> writeEnclosingMethodAttribute
    int writeFlagAttrs(long) -> writeFlagAttrs
    int writeMemberAttrs(org.openjdk.tools.javac.code.Symbol) -> writeMemberAttrs
    int writeMethodParametersAttr(org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> writeMethodParametersAttr
    void writeParamAnnotations(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Attribute$RetentionPolicy) -> writeParamAnnotations
    void writeParamAnnotations(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Attribute$RetentionPolicy) -> writeParamAnnotations
    int writeParameterAttrs(org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> writeParameterAttrs
    int writeJavaAnnotations(org.openjdk.tools.javac.util.List) -> writeJavaAnnotations
    int writeTypeAnnotations(org.openjdk.tools.javac.util.List,boolean) -> writeTypeAnnotations
    void writeCompoundAttribute(org.openjdk.tools.javac.code.Attribute$Compound) -> writeCompoundAttribute
    void writeTypeAnnotation(org.openjdk.tools.javac.code.Attribute$TypeCompound) -> writeTypeAnnotation
    void writePosition(org.openjdk.tools.javac.code.TypeAnnotationPosition) -> writePosition
    int writeModuleAttribute(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> writeModuleAttribute
    void enterInner(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> enterInner
    void writeInnerClasses() -> writeInnerClasses
    void writeBootstrapMethods() -> writeBootstrapMethods
    void writeField(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> writeField
    void writeMethod(org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> writeMethod
    void writeCode(org.openjdk.tools.javac.jvm.Code) -> writeCode
    boolean needsLocalVariableTypeEntry(org.openjdk.tools.javac.code.Type) -> needsLocalVariableTypeEntry
    void writeStackMap(org.openjdk.tools.javac.jvm.Code) -> writeStackMap
    void writeStackMapType(org.openjdk.tools.javac.code.Type) -> writeStackMapType
    void writeFields(org.openjdk.tools.javac.code.Scope) -> writeFields
    void writeMethods(org.openjdk.tools.javac.code.Scope) -> writeMethods
    org.openjdk.javax.tools.JavaFileObject writeClass(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> writeClass
    void writeClassFile(java.io.OutputStream,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> writeClassFile
    int writeExtraClassAttributes(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> writeExtraClassAttributes
    int adjustFlags(long) -> adjustFlags
    long getLastModified(org.openjdk.javax.tools.FileObject) -> getLastModified
    void lambda$writeModuleAttribute$2(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.util.Set) -> lambda$writeModuleAttribute$2
    void lambda$null$1(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> lambda$null$1
    java.util.Set lambda$writeModuleAttribute$0(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> lambda$writeModuleAttribute$0
    org.openjdk.tools.javac.code.Types access$000(org.openjdk.tools.javac.jvm.ClassWriter) -> access$000
    org.openjdk.tools.javac.util.Names access$100(org.openjdk.tools.javac.jvm.ClassWriter) -> access$100
    boolean access$500(org.openjdk.tools.javac.jvm.ClassWriter) -> access$500
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.ClassWriter$1 -> org.openjdk.tools.javac.jvm.ClassWriter$1:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    int[] $SwitchMap$com$sun$tools$javac$code$Attribute$RetentionPolicy -> $SwitchMap$com$sun$tools$javac$code$Attribute$RetentionPolicy
    int[] $SwitchMap$com$sun$tools$javac$code$TargetType -> $SwitchMap$com$sun$tools$javac$code$TargetType
    int[] $SwitchMap$com$sun$tools$javac$jvm$Code$StackMapFormat -> $SwitchMap$com$sun$tools$javac$jvm$Code$StackMapFormat
    int[] $SwitchMap$com$sun$tools$javac$code$Kinds$Kind -> $SwitchMap$com$sun$tools$javac$code$Kinds$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.ClassWriter$AttributeWriter -> org.openjdk.tools.javac.jvm.ClassWriter$AttributeWriter:
    org.openjdk.tools.javac.jvm.ClassWriter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassWriter) -> <init>
    void visitConstant(org.openjdk.tools.javac.code.Attribute$Constant) -> visitConstant
    void visitEnum(org.openjdk.tools.javac.code.Attribute$Enum) -> visitEnum
    void visitClass(org.openjdk.tools.javac.code.Attribute$Class) -> visitClass
    void visitCompound(org.openjdk.tools.javac.code.Attribute$Compound) -> visitCompound
    void visitError(org.openjdk.tools.javac.code.Attribute$Error) -> visitError
    void visitArray(org.openjdk.tools.javac.code.Attribute$Array) -> visitArray
org.openjdk.tools.javac.jvm.ClassWriter$CWSignatureGenerator -> org.openjdk.tools.javac.jvm.ClassWriter$CWSignatureGenerator:
    org.openjdk.tools.javac.util.ByteBuffer sigbuf -> sigbuf
    org.openjdk.tools.javac.jvm.ClassWriter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.ClassWriter,org.openjdk.tools.javac.code.Types) -> <init>
    void assembleSig(org.openjdk.tools.javac.code.Type) -> assembleSig
    void append(char) -> append
    void append(byte[]) -> append
    void append(org.openjdk.tools.javac.util.Name) -> append
    void classReference(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> classReference
    void reset() -> reset
    org.openjdk.tools.javac.util.Name toName() -> toName
    boolean isEmpty() -> isEmpty
    boolean access$200(org.openjdk.tools.javac.jvm.ClassWriter$CWSignatureGenerator) -> access$200
    org.openjdk.tools.javac.util.Name access$300(org.openjdk.tools.javac.jvm.ClassWriter$CWSignatureGenerator) -> access$300
    void access$400(org.openjdk.tools.javac.jvm.ClassWriter$CWSignatureGenerator) -> access$400
org.openjdk.tools.javac.jvm.ClassWriter$PoolOverflow -> org.openjdk.tools.javac.jvm.ClassWriter$PoolOverflow:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame -> org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame:
    void <init>() -> <init>
    int getFrameType() -> getFrameType
    void write(org.openjdk.tools.javac.jvm.ClassWriter) -> write
    org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame getInstance(org.openjdk.tools.javac.jvm.Code$StackMapFrame,int,org.openjdk.tools.javac.code.Type[],org.openjdk.tools.javac.code.Types) -> getInstance
    boolean isInt(org.openjdk.tools.javac.code.Type) -> isInt
    boolean isSameType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Types) -> isSameType
    int compare(org.openjdk.tools.javac.code.Type[],org.openjdk.tools.javac.code.Type[],org.openjdk.tools.javac.code.Types) -> compare
org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$AppendFrame -> org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$AppendFrame:
    int frameType -> frameType
    int offsetDelta -> offsetDelta
    org.openjdk.tools.javac.code.Type[] locals -> locals
    void <init>(int,int,org.openjdk.tools.javac.code.Type[]) -> <init>
    int getFrameType() -> getFrameType
    void write(org.openjdk.tools.javac.jvm.ClassWriter) -> write
org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$ChopFrame -> org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$ChopFrame:
    int frameType -> frameType
    int offsetDelta -> offsetDelta
    void <init>(int,int) -> <init>
    int getFrameType() -> getFrameType
    void write(org.openjdk.tools.javac.jvm.ClassWriter) -> write
org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$FullFrame -> org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$FullFrame:
    int offsetDelta -> offsetDelta
    org.openjdk.tools.javac.code.Type[] locals -> locals
    org.openjdk.tools.javac.code.Type[] stack -> stack
    void <init>(int,org.openjdk.tools.javac.code.Type[],org.openjdk.tools.javac.code.Type[]) -> <init>
    int getFrameType() -> getFrameType
    void write(org.openjdk.tools.javac.jvm.ClassWriter) -> write
org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$SameFrame -> org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$SameFrame:
    int offsetDelta -> offsetDelta
    void <init>(int) -> <init>
    int getFrameType() -> getFrameType
    void write(org.openjdk.tools.javac.jvm.ClassWriter) -> write
org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$SameLocals1StackItemFrame -> org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame$SameLocals1StackItemFrame:
    int offsetDelta -> offsetDelta
    org.openjdk.tools.javac.code.Type stack -> stack
    void <init>(int,org.openjdk.tools.javac.code.Type) -> <init>
    int getFrameType() -> getFrameType
    void write(org.openjdk.tools.javac.jvm.ClassWriter) -> write
org.openjdk.tools.javac.jvm.ClassWriter$StringOverflow -> org.openjdk.tools.javac.jvm.ClassWriter$StringOverflow:
    long serialVersionUID -> serialVersionUID
    java.lang.String value -> value
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.javac.jvm.Code -> org.openjdk.tools.javac.jvm.Code:
    boolean debugCode -> debugCode
    boolean needStackMap -> needStackMap
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.code.Symtab syms -> syms
    int max_stack -> max_stack
    int max_locals -> max_locals
    byte[] code -> code
    int cp -> cp
    org.openjdk.tools.javac.util.ListBuffer catchInfo -> catchInfo
    org.openjdk.tools.javac.util.List lineInfo -> lineInfo
    org.openjdk.tools.javac.jvm.CRTable crt -> crt
    boolean fatcode -> fatcode
    boolean alive -> alive
    org.openjdk.tools.javac.jvm.Code$State state -> state
    boolean fixedPc -> fixedPc
    int nextreg -> nextreg
    org.openjdk.tools.javac.jvm.Code$Chain pendingJumps -> pendingJumps
    int pendingStatPos -> pendingStatPos
    boolean pendingStackMap -> pendingStackMap
    org.openjdk.tools.javac.jvm.Code$StackMapFormat stackMap -> stackMap
    boolean varDebugInfo -> varDebugInfo
    boolean lineDebugInfo -> lineDebugInfo
    org.openjdk.tools.javac.util.Position$LineMap lineMap -> lineMap
    org.openjdk.tools.javac.jvm.Pool pool -> pool
    org.openjdk.tools.javac.code.Symbol$MethodSymbol meth -> meth
    org.openjdk.tools.javac.jvm.Code$StackMapFrame[] stackMapBuffer -> stackMapBuffer
    org.openjdk.tools.javac.jvm.ClassWriter$StackMapTableFrame[] stackMapTableBuffer -> stackMapTableBuffer
    int stackMapBufferSize -> stackMapBufferSize
    int lastStackMapPC -> lastStackMapPC
    org.openjdk.tools.javac.jvm.Code$StackMapFrame lastFrame -> lastFrame
    org.openjdk.tools.javac.jvm.Code$StackMapFrame frameBeforeLast -> frameBeforeLast
    org.openjdk.tools.javac.code.Type jsrReturnValue -> jsrReturnValue
    org.openjdk.tools.javac.jvm.Code$LocalVar[] lvar -> lvar
    org.openjdk.tools.javac.jvm.Code$LocalVar[] varBuffer -> varBuffer
    int varBufferSize -> varBufferSize
    boolean checkLimits(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.Log) -> checkLimits
    void <init>(org.openjdk.tools.javac.code.Symbol$MethodSymbol,boolean,org.openjdk.tools.javac.util.Position$LineMap,boolean,org.openjdk.tools.javac.jvm.Code$StackMapFormat,boolean,org.openjdk.tools.javac.jvm.CRTable,org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.jvm.Pool) -> <init>
    int typecode(org.openjdk.tools.javac.code.Type) -> typecode
    int truncate(int) -> truncate
    int width(int) -> width
    int width(org.openjdk.tools.javac.code.Type) -> width
    int width(org.openjdk.tools.javac.util.List) -> width
    int arraycode(org.openjdk.tools.javac.code.Type) -> arraycode
    int curCP() -> curCP
    void emit1(int) -> emit1
    void emit2(int) -> emit2
    void emit4(int) -> emit4
    void emitop(int) -> emitop
    void postop() -> postop
    void emitLdc(int) -> emitLdc
    void emitMultianewarray(int,int,org.openjdk.tools.javac.code.Type) -> emitMultianewarray
    void emitNewarray(int,org.openjdk.tools.javac.code.Type) -> emitNewarray
    void emitAnewarray(int,org.openjdk.tools.javac.code.Type) -> emitAnewarray
    void emitInvokeinterface(int,org.openjdk.tools.javac.code.Type) -> emitInvokeinterface
    void emitInvokespecial(int,org.openjdk.tools.javac.code.Type) -> emitInvokespecial
    void emitInvokestatic(int,org.openjdk.tools.javac.code.Type) -> emitInvokestatic
    void emitInvokevirtual(int,org.openjdk.tools.javac.code.Type) -> emitInvokevirtual
    void emitInvokedynamic(int,org.openjdk.tools.javac.code.Type) -> emitInvokedynamic
    void emitop0(int) -> emitop0
    void emitop1(int,int) -> emitop1
    org.openjdk.tools.javac.code.Type typeForPool(java.lang.Object) -> typeForPool
    void emitop1w(int,int) -> emitop1w
    void emitop1w(int,int,int) -> emitop1w
    void emitop2(int,int) -> emitop2
    void emitop4(int,int) -> emitop4
    void align(int) -> align
    void put1(int,int) -> put1
    void put2(int,int) -> put2
    void put4(int,int) -> put4
    int get1(int) -> get1
    int get2(int) -> get2
    int get4(int) -> get4
    boolean isAlive() -> isAlive
    void markDead() -> markDead
    int entryPoint() -> entryPoint
    int entryPoint(org.openjdk.tools.javac.jvm.Code$State) -> entryPoint
    int entryPoint(org.openjdk.tools.javac.jvm.Code$State,org.openjdk.tools.javac.code.Type) -> entryPoint
    void emitStackMap() -> emitStackMap
    int getLocalsSize() -> getLocalsSize
    void emitCLDCStackMap(int,int) -> emitCLDCStackMap
    void emitStackMapFrame(int,int) -> emitStackMapFrame
    org.openjdk.tools.javac.jvm.Code$StackMapFrame getInitialFrame() -> getInitialFrame
    int negate(int) -> negate
    int emitJump(int) -> emitJump
    org.openjdk.tools.javac.jvm.Code$Chain branch(int) -> branch
    void resolve(org.openjdk.tools.javac.jvm.Code$Chain,int) -> resolve
    void resolve(org.openjdk.tools.javac.jvm.Code$Chain) -> resolve
    void resolvePending() -> resolvePending
    org.openjdk.tools.javac.jvm.Code$Chain mergeChains(org.openjdk.tools.javac.jvm.Code$Chain,org.openjdk.tools.javac.jvm.Code$Chain) -> mergeChains
    void addCatch(char,char,char,char) -> addCatch
    void compressCatchTable() -> compressCatchTable
    void addLineNumber(char,char) -> addLineNumber
    void statBegin(int) -> statBegin
    void markStatBegin() -> markStatBegin
    void addLocalVar(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> addLocalVar
    void adjustAliveRanges(int,int) -> adjustAliveRanges
    int getLVTSize() -> getLVTSize
    void setDefined(org.openjdk.tools.javac.util.Bits) -> setDefined
    void setDefined(int) -> setDefined
    void setUndefined(int) -> setUndefined
    void endScope(int) -> endScope
    void fillLocalVarPosition(org.openjdk.tools.javac.jvm.Code$LocalVar) -> fillLocalVarPosition
    void fillExceptionParameterPositions() -> fillExceptionParameterPositions
    int findExceptionIndex(org.openjdk.tools.javac.code.TypeAnnotationPosition) -> findExceptionIndex
    void putVar(org.openjdk.tools.javac.jvm.Code$LocalVar) -> putVar
    int newLocal(int) -> newLocal
    int newLocal(org.openjdk.tools.javac.code.Type) -> newLocal
    int newLocal(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> newLocal
    void newRegSegment() -> newRegSegment
    void endScopes(int) -> endScopes
    java.lang.String mnem(int) -> mnem
    boolean access$100(org.openjdk.tools.javac.jvm.Code) -> access$100
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.Code$1 -> org.openjdk.tools.javac.jvm.Code$1:
    int[] $SwitchMap$com$sun$tools$javac$jvm$Code$StackMapFormat -> $SwitchMap$com$sun$tools$javac$jvm$Code$StackMapFormat
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.Code$Chain -> org.openjdk.tools.javac.jvm.Code$Chain:
    int pc -> pc
    org.openjdk.tools.javac.jvm.Code$State state -> state
    org.openjdk.tools.javac.jvm.Code$Chain next -> next
    void <init>(int,org.openjdk.tools.javac.jvm.Code$Chain,org.openjdk.tools.javac.jvm.Code$State) -> <init>
org.openjdk.tools.javac.jvm.Code$LocalVar -> org.openjdk.tools.javac.jvm.Code$LocalVar:
    org.openjdk.tools.javac.code.Symbol$VarSymbol sym -> sym
    char reg -> reg
    java.util.List aliveRanges -> aliveRanges
    void <init>(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> <init>
    org.openjdk.tools.javac.jvm.Code$LocalVar dup() -> dup
    org.openjdk.tools.javac.jvm.Code$LocalVar$Range firstRange() -> firstRange
    org.openjdk.tools.javac.jvm.Code$LocalVar$Range lastRange() -> lastRange
    void removeLastRange() -> removeLastRange
    java.lang.String toString() -> toString
    void openRange(char) -> openRange
    void closeRange(char) -> closeRange
    boolean hasOpenRange() -> hasOpenRange
    boolean isLastRangeInitialized() -> isLastRangeInitialized
    org.openjdk.tools.javac.jvm.Code$LocalVar$Range getWidestRange() -> getWidestRange
org.openjdk.tools.javac.jvm.Code$LocalVar$Range -> org.openjdk.tools.javac.jvm.Code$LocalVar$Range:
    char start_pc -> start_pc
    char length -> length
    org.openjdk.tools.javac.jvm.Code$LocalVar this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Code$LocalVar) -> <init>
    void <init>(org.openjdk.tools.javac.jvm.Code$LocalVar,char) -> <init>
    void <init>(org.openjdk.tools.javac.jvm.Code$LocalVar,char,char) -> <init>
    boolean closed() -> closed
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Code$Mneumonics -> org.openjdk.tools.javac.jvm.Code$Mneumonics:
    java.lang.String[] mnem -> mnem
    void <init>() -> <init>
    java.lang.String[] access$200() -> access$200
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.Code$StackMapFormat -> org.openjdk.tools.javac.jvm.Code$StackMapFormat:
    org.openjdk.tools.javac.jvm.Code$StackMapFormat NONE -> NONE
    org.openjdk.tools.javac.jvm.Code$StackMapFormat CLDC -> CLDC
    org.openjdk.tools.javac.jvm.Code$StackMapFormat JSR202 -> JSR202
    org.openjdk.tools.javac.jvm.Code$StackMapFormat[] $VALUES -> $VALUES
    org.openjdk.tools.javac.jvm.Code$StackMapFormat[] values() -> values
    org.openjdk.tools.javac.jvm.Code$StackMapFormat valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.util.Name getAttributeName(org.openjdk.tools.javac.util.Names) -> getAttributeName
    void <init>(java.lang.String,int,org.openjdk.tools.javac.jvm.Code$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.Code$StackMapFormat$1 -> org.openjdk.tools.javac.jvm.Code$StackMapFormat$1:
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.util.Name getAttributeName(org.openjdk.tools.javac.util.Names) -> getAttributeName
org.openjdk.tools.javac.jvm.Code$StackMapFormat$2 -> org.openjdk.tools.javac.jvm.Code$StackMapFormat$2:
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.util.Name getAttributeName(org.openjdk.tools.javac.util.Names) -> getAttributeName
org.openjdk.tools.javac.jvm.Code$StackMapFrame -> org.openjdk.tools.javac.jvm.Code$StackMapFrame:
    int pc -> pc
    org.openjdk.tools.javac.code.Type[] locals -> locals
    org.openjdk.tools.javac.code.Type[] stack -> stack
    void <init>() -> <init>
org.openjdk.tools.javac.jvm.Code$State -> org.openjdk.tools.javac.jvm.Code$State:
    org.openjdk.tools.javac.util.Bits defined -> defined
    org.openjdk.tools.javac.code.Type[] stack -> stack
    int stacksize -> stacksize
    int[] locks -> locks
    int nlocks -> nlocks
    org.openjdk.tools.javac.jvm.Code this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Code) -> <init>
    org.openjdk.tools.javac.jvm.Code$State dup() -> dup
    void lock(int) -> lock
    void unlock(int) -> unlock
    void push(org.openjdk.tools.javac.code.Type) -> push
    org.openjdk.tools.javac.code.Type pop1() -> pop1
    org.openjdk.tools.javac.code.Type peek() -> peek
    org.openjdk.tools.javac.code.Type pop2() -> pop2
    void pop(int) -> pop
    void pop(org.openjdk.tools.javac.code.Type) -> pop
    void forceStackTop(org.openjdk.tools.javac.code.Type) -> forceStackTop
    void markInitialized(org.openjdk.tools.javac.jvm.UninitializedType) -> markInitialized
    org.openjdk.tools.javac.jvm.Code$State join(org.openjdk.tools.javac.jvm.Code$State) -> join
    org.openjdk.tools.javac.code.Type error() -> error
    void dump() -> dump
    void dump(int) -> dump
org.openjdk.tools.javac.jvm.Gen -> org.openjdk.tools.javac.jvm.Gen:
    org.openjdk.tools.javac.util.Context$Key genKey -> genKey
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.comp.Resolve rs -> rs
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.jvm.Target target -> target
    org.openjdk.tools.javac.util.Name accessDollar -> accessDollar
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.comp.Lower lower -> lower
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    org.openjdk.tools.javac.jvm.StringConcat concat -> concat
    org.openjdk.tools.javac.jvm.Code$StackMapFormat stackMap -> stackMap
    org.openjdk.tools.javac.code.Type methodType -> methodType
    int letExprDepth -> letExprDepth
    org.openjdk.tools.javac.jvm.Pool pool -> pool
    boolean lineDebugInfo -> lineDebugInfo
    boolean varDebugInfo -> varDebugInfo
    boolean genCrt -> genCrt
    boolean debugCode -> debugCode
    boolean allowBetterNullChecks -> allowBetterNullChecks
    org.openjdk.tools.javac.jvm.Code code -> code
    org.openjdk.tools.javac.jvm.Items items -> items
    org.openjdk.tools.javac.comp.Env attrEnv -> attrEnv
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit toplevel -> toplevel
    int nerrs -> nerrs
    org.openjdk.tools.javac.tree.EndPosTable endPosTable -> endPosTable
    org.openjdk.tools.javac.comp.Env env -> env
    org.openjdk.tools.javac.code.Type pt -> pt
    org.openjdk.tools.javac.jvm.Items$Item result -> result
    org.openjdk.tools.javac.jvm.Gen$ClassReferenceVisitor classReferenceVisitor -> classReferenceVisitor
    org.openjdk.tools.javac.jvm.Gen instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void loadIntConst(int) -> loadIntConst
    int zero(int) -> zero
    int one(int) -> one
    void emitMinusOne(int) -> emitMinusOne
    org.openjdk.tools.javac.code.Symbol binaryQualifier(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> binaryQualifier
    int makeRef(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> makeRef
    void checkDimension(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type) -> checkDimension
    org.openjdk.tools.javac.jvm.Items$LocalItem makeTemp(org.openjdk.tools.javac.code.Type) -> makeTemp
    void callMethod(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,boolean) -> callMethod
    boolean isAccessSuper(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> isAccessSuper
    boolean isOddAccessName(org.openjdk.tools.javac.util.Name) -> isOddAccessName
    void genFinalizer(org.openjdk.tools.javac.comp.Env) -> genFinalizer
    org.openjdk.tools.javac.comp.Env unwind(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> unwind
    void endFinalizerGap(org.openjdk.tools.javac.comp.Env) -> endFinalizerGap
    void endFinalizerGaps(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.comp.Env) -> endFinalizerGaps
    boolean hasFinally(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> hasFinally
    org.openjdk.tools.javac.util.List normalizeDefs(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> normalizeDefs
    org.openjdk.tools.javac.util.List getAndRemoveNonFieldTAs(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> getAndRemoveNonFieldTAs
    void checkStringConstant(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.Object) -> checkStringConstant
    void normalizeMethod(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> normalizeMethod
    void genDef(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> genDef
    void genStat(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env,int) -> genStat
    void genStat(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.comp.Env) -> genStat
    void genStats(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env,int) -> genStats
    void genStats(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> genStats
    org.openjdk.tools.javac.jvm.Items$CondItem genCond(org.openjdk.tools.javac.tree.JCTree,int) -> genCond
    org.openjdk.tools.javac.jvm.Items$CondItem genCond(org.openjdk.tools.javac.tree.JCTree,boolean) -> genCond
    org.openjdk.tools.javac.jvm.Code getCode() -> getCode
    org.openjdk.tools.javac.jvm.Items getItems() -> getItems
    org.openjdk.tools.javac.comp.Env getAttrEnv() -> getAttrEnv
    org.openjdk.tools.javac.jvm.Items$Item genExpr(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> genExpr
    void genArgs(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> genArgs
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void genMethod(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl,org.openjdk.tools.javac.comp.Env,boolean) -> genMethod
    int initCode(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl,org.openjdk.tools.javac.comp.Env,boolean) -> initCode
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitSkip(org.openjdk.tools.javac.tree.JCTree$JCSkip) -> visitSkip
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void genLoop(org.openjdk.tools.javac.tree.JCTree$JCStatement,org.openjdk.tools.javac.tree.JCTree$JCStatement,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,boolean) -> genLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void qsort2(int[],int[],int,int) -> qsort2
    void visitSynchronized(org.openjdk.tools.javac.tree.JCTree$JCSynchronized) -> visitSynchronized
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void genTry(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.comp.Env) -> genTry
    void genCatch(org.openjdk.tools.javac.tree.JCTree$JCCatch,org.openjdk.tools.javac.comp.Env,int,int,org.openjdk.tools.javac.util.List) -> genCatch
    org.openjdk.tools.javac.util.List catchTypesWithAnnotations(org.openjdk.tools.javac.tree.JCTree$JCCatch) -> catchTypesWithAnnotations
    org.openjdk.tools.javac.util.List catchTypesWithAnnotationsFromMulticatch(org.openjdk.tools.javac.tree.JCTree$JCTypeUnion,org.openjdk.tools.javac.util.List) -> catchTypesWithAnnotationsFromMulticatch
    void registerCatch(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,int,int,int,int) -> registerCatch
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitExec(org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement) -> visitExec
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void setTypeAnnotationPositions(int) -> setTypeAnnotationPositions
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    org.openjdk.tools.javac.jvm.Items$Item makeNewArray(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.code.Type,int) -> makeNewArray
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void genNullCheck(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> genNullCheck
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    org.openjdk.tools.javac.jvm.Items$Item completeBinop(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Symbol$OperatorSymbol) -> completeBinop
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitWildcard(org.openjdk.tools.javac.tree.JCTree$JCWildcard) -> visitWildcard
    void visitTypeTest(org.openjdk.tools.javac.tree.JCTree$JCInstanceOf) -> visitTypeTest
    void visitIndexed(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess) -> visitIndexed
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    boolean isInvokeDynamic(org.openjdk.tools.javac.code.Symbol) -> isInvokeDynamic
    void visitLiteral(org.openjdk.tools.javac.tree.JCTree$JCLiteral) -> visitLiteral
    void visitLetExpr(org.openjdk.tools.javac.tree.JCTree$LetExpr) -> visitLetExpr
    void generateReferencesToPrunedTree(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.jvm.Pool) -> generateReferencesToPrunedTree
    boolean genClass(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> genClass
    org.openjdk.tools.javac.jvm.Pool access$000(org.openjdk.tools.javac.jvm.Gen) -> access$000
    org.openjdk.tools.javac.jvm.Code access$100(org.openjdk.tools.javac.jvm.Gen) -> access$100
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.Gen$1 -> org.openjdk.tools.javac.jvm.Gen$1:
    org.openjdk.tools.javac.comp.Env val$syncEnv -> val$syncEnv
    org.openjdk.tools.javac.jvm.Items$LocalItem val$lockVar -> val$lockVar
    org.openjdk.tools.javac.jvm.Gen this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Gen,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.jvm.Items$LocalItem) -> <init>
    void gen() -> gen
    void genLast() -> genLast
org.openjdk.tools.javac.jvm.Gen$2 -> org.openjdk.tools.javac.jvm.Gen$2:
    org.openjdk.tools.javac.comp.Env val$tryEnv -> val$tryEnv
    org.openjdk.tools.javac.tree.JCTree$JCTry val$tree -> val$tree
    org.openjdk.tools.javac.comp.Env val$oldEnv -> val$oldEnv
    org.openjdk.tools.javac.jvm.Gen this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Gen,org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCTry,org.openjdk.tools.javac.comp.Env) -> <init>
    void gen() -> gen
    void genLast() -> genLast
    boolean hasFinalizer() -> hasFinalizer
org.openjdk.tools.javac.jvm.Gen$3 -> org.openjdk.tools.javac.jvm.Gen$3:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.Gen$ClassReferenceVisitor -> org.openjdk.tools.javac.jvm.Gen$ClassReferenceVisitor:
    org.openjdk.tools.javac.jvm.Gen this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Gen) -> <init>
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
org.openjdk.tools.javac.jvm.Gen$CodeSizeOverflow -> org.openjdk.tools.javac.jvm.Gen$CodeSizeOverflow:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
org.openjdk.tools.javac.jvm.Gen$GenContext -> org.openjdk.tools.javac.jvm.Gen$GenContext:
    org.openjdk.tools.javac.jvm.Code$Chain exit -> exit
    org.openjdk.tools.javac.jvm.Code$Chain cont -> cont
    org.openjdk.tools.javac.jvm.Gen$GenFinalizer finalize -> finalize
    boolean isSwitch -> isSwitch
    org.openjdk.tools.javac.util.ListBuffer gaps -> gaps
    void <init>() -> <init>
    void addExit(org.openjdk.tools.javac.jvm.Code$Chain) -> addExit
    void addCont(org.openjdk.tools.javac.jvm.Code$Chain) -> addCont
org.openjdk.tools.javac.jvm.Gen$GenFinalizer -> org.openjdk.tools.javac.jvm.Gen$GenFinalizer:
    org.openjdk.tools.javac.jvm.Gen this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Gen) -> <init>
    void gen() -> gen
    void genLast() -> genLast
    boolean hasFinalizer() -> hasFinalizer
org.openjdk.tools.javac.jvm.Items -> org.openjdk.tools.javac.jvm.Items:
    org.openjdk.tools.javac.jvm.Pool pool -> pool
    org.openjdk.tools.javac.jvm.Code code -> code
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.jvm.Items$Item voidItem -> voidItem
    org.openjdk.tools.javac.jvm.Items$Item thisItem -> thisItem
    org.openjdk.tools.javac.jvm.Items$Item superItem -> superItem
    org.openjdk.tools.javac.jvm.Items$Item[] stackItem -> stackItem
    void <init>(org.openjdk.tools.javac.jvm.Pool,org.openjdk.tools.javac.jvm.Code,org.openjdk.tools.javac.code.Symtab,org.openjdk.tools.javac.code.Types) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item makeVoidItem() -> makeVoidItem
    org.openjdk.tools.javac.jvm.Items$Item makeThisItem() -> makeThisItem
    org.openjdk.tools.javac.jvm.Items$Item makeSuperItem() -> makeSuperItem
    org.openjdk.tools.javac.jvm.Items$Item makeStackItem(org.openjdk.tools.javac.code.Type) -> makeStackItem
    org.openjdk.tools.javac.jvm.Items$Item makeDynamicItem(org.openjdk.tools.javac.code.Symbol) -> makeDynamicItem
    org.openjdk.tools.javac.jvm.Items$Item makeIndexedItem(org.openjdk.tools.javac.code.Type) -> makeIndexedItem
    org.openjdk.tools.javac.jvm.Items$LocalItem makeLocalItem(org.openjdk.tools.javac.code.Symbol$VarSymbol) -> makeLocalItem
    org.openjdk.tools.javac.jvm.Items$LocalItem makeLocalItem(org.openjdk.tools.javac.code.Type,int) -> makeLocalItem
    org.openjdk.tools.javac.jvm.Items$Item makeStaticItem(org.openjdk.tools.javac.code.Symbol) -> makeStaticItem
    org.openjdk.tools.javac.jvm.Items$Item makeMemberItem(org.openjdk.tools.javac.code.Symbol,boolean) -> makeMemberItem
    org.openjdk.tools.javac.jvm.Items$Item makeImmediateItem(org.openjdk.tools.javac.code.Type,java.lang.Object) -> makeImmediateItem
    org.openjdk.tools.javac.jvm.Items$Item makeAssignItem(org.openjdk.tools.javac.jvm.Items$Item) -> makeAssignItem
    org.openjdk.tools.javac.jvm.Items$CondItem makeCondItem(int,org.openjdk.tools.javac.jvm.Code$Chain,org.openjdk.tools.javac.jvm.Code$Chain) -> makeCondItem
    org.openjdk.tools.javac.jvm.Items$CondItem makeCondItem(int) -> makeCondItem
    org.openjdk.tools.javac.jvm.Items$Item[] access$000(org.openjdk.tools.javac.jvm.Items) -> access$000
org.openjdk.tools.javac.jvm.Items$1 -> org.openjdk.tools.javac.jvm.Items$1:
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,int) -> <init>
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$AssignItem -> org.openjdk.tools.javac.jvm.Items$AssignItem:
    org.openjdk.tools.javac.jvm.Items$Item lhs -> lhs
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,org.openjdk.tools.javac.jvm.Items$Item) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    void duplicate() -> duplicate
    void drop() -> drop
    void stash(int) -> stash
    int width() -> width
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$CondItem -> org.openjdk.tools.javac.jvm.Items$CondItem:
    org.openjdk.tools.javac.jvm.Code$Chain trueJumps -> trueJumps
    org.openjdk.tools.javac.jvm.Code$Chain falseJumps -> falseJumps
    int opcode -> opcode
    org.openjdk.tools.javac.tree.JCTree tree -> tree
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,int,org.openjdk.tools.javac.jvm.Code$Chain,org.openjdk.tools.javac.jvm.Code$Chain) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    void duplicate() -> duplicate
    void drop() -> drop
    void stash(int) -> stash
    org.openjdk.tools.javac.jvm.Items$CondItem mkCond() -> mkCond
    org.openjdk.tools.javac.jvm.Code$Chain jumpTrue() -> jumpTrue
    org.openjdk.tools.javac.jvm.Code$Chain jumpFalse() -> jumpFalse
    org.openjdk.tools.javac.jvm.Items$CondItem negate() -> negate
    int width() -> width
    boolean isTrue() -> isTrue
    boolean isFalse() -> isFalse
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$DynamicItem -> org.openjdk.tools.javac.jvm.Items$DynamicItem:
    boolean $assertionsDisabled -> $assertionsDisabled
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    void store() -> store
    org.openjdk.tools.javac.jvm.Items$Item invoke() -> invoke
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.Items$ImmediateItem -> org.openjdk.tools.javac.jvm.Items$ImmediateItem:
    java.lang.Object value -> value
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,org.openjdk.tools.javac.code.Type,java.lang.Object) -> <init>
    void ldc() -> ldc
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    boolean isPosZero(float) -> isPosZero
    boolean isPosZero(double) -> isPosZero
    org.openjdk.tools.javac.jvm.Items$CondItem mkCond() -> mkCond
    org.openjdk.tools.javac.jvm.Items$Item coerce(int) -> coerce
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$IndexedItem -> org.openjdk.tools.javac.jvm.Items$IndexedItem:
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,org.openjdk.tools.javac.code.Type) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    void store() -> store
    void duplicate() -> duplicate
    void drop() -> drop
    void stash(int) -> stash
    int width() -> width
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$Item -> org.openjdk.tools.javac.jvm.Items$Item:
    int typecode -> typecode
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,int) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    void store() -> store
    org.openjdk.tools.javac.jvm.Items$Item invoke() -> invoke
    void duplicate() -> duplicate
    void drop() -> drop
    void stash(int) -> stash
    org.openjdk.tools.javac.jvm.Items$CondItem mkCond() -> mkCond
    org.openjdk.tools.javac.jvm.Items$Item coerce(int) -> coerce
    org.openjdk.tools.javac.jvm.Items$Item coerce(org.openjdk.tools.javac.code.Type) -> coerce
    int width() -> width
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$LocalItem -> org.openjdk.tools.javac.jvm.Items$LocalItem:
    int reg -> reg
    org.openjdk.tools.javac.code.Type type -> type
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,org.openjdk.tools.javac.code.Type,int) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    void store() -> store
    void incr(int) -> incr
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$MemberItem -> org.openjdk.tools.javac.jvm.Items$MemberItem:
    org.openjdk.tools.javac.code.Symbol member -> member
    boolean nonvirtual -> nonvirtual
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,org.openjdk.tools.javac.code.Symbol,boolean) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    void store() -> store
    org.openjdk.tools.javac.jvm.Items$Item invoke() -> invoke
    void duplicate() -> duplicate
    void drop() -> drop
    void stash(int) -> stash
    int width() -> width
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$SelfItem -> org.openjdk.tools.javac.jvm.Items$SelfItem:
    boolean isSuper -> isSuper
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,boolean) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$StackItem -> org.openjdk.tools.javac.jvm.Items$StackItem:
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,int) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    void duplicate() -> duplicate
    void drop() -> drop
    void stash(int) -> stash
    int width() -> width
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.Items$StaticItem -> org.openjdk.tools.javac.jvm.Items$StaticItem:
    org.openjdk.tools.javac.code.Symbol member -> member
    org.openjdk.tools.javac.jvm.Items this$0 -> this$0
    void <init>(org.openjdk.tools.javac.jvm.Items,org.openjdk.tools.javac.code.Symbol) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item load() -> load
    void store() -> store
    org.openjdk.tools.javac.jvm.Items$Item invoke() -> invoke
    java.lang.String toString() -> toString
org.openjdk.tools.javac.jvm.JNIWriter -> org.openjdk.tools.javac.jvm.JNIWriter:
    org.openjdk.tools.javac.util.Context$Key jniWriterKey -> jniWriterKey
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.util.Log log -> log
    boolean verbose -> verbose
    boolean checkAll -> checkAll
    boolean multiModuleMode -> multiModuleMode
    org.openjdk.tools.javac.util.Context context -> context
    boolean isWindows -> isWindows
    org.openjdk.tools.javac.jvm.JNIWriter instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void lazyInit() -> lazyInit
    boolean isSynthetic(org.openjdk.tools.javac.code.Symbol) -> isSynthetic
    boolean isStatic(org.openjdk.tools.javac.code.Symbol) -> isStatic
    boolean isFinal(org.openjdk.tools.javac.code.Symbol) -> isFinal
    boolean isNative(org.openjdk.tools.javac.code.Symbol) -> isNative
    boolean hasFlag(org.openjdk.tools.javac.code.Symbol,int) -> hasFlag
    boolean needsHeader(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> needsHeader
    boolean needsHeader(org.openjdk.tools.javac.code.Symbol$ClassSymbol,boolean) -> needsHeader
    org.openjdk.javax.tools.FileObject write(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> write
    void write(java.io.PrintWriter,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> write
    void writeStatics(java.io.PrintWriter,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> writeStatics
    void printStaticDefines(java.io.PrintWriter,org.openjdk.tools.javac.util.Pair) -> printStaticDefines
    void writeMethods(java.io.PrintWriter,org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.lang.String) -> writeMethods
    java.lang.String jniType(org.openjdk.tools.javac.code.Type) -> jniType
    void fileTop(java.io.PrintWriter) -> fileTop
    void includes(java.io.PrintWriter) -> includes
    void cppGuardBegin(java.io.PrintWriter) -> cppGuardBegin
    void cppGuardEnd(java.io.PrintWriter) -> cppGuardEnd
    void guardBegin(java.io.PrintWriter,java.lang.String) -> guardBegin
    void guardEnd(java.io.PrintWriter) -> guardEnd
    java.lang.String encodeMethod(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol$ClassSymbol,boolean) -> encodeMethod
    java.lang.String encode(java.lang.CharSequence,org.openjdk.tools.javac.jvm.JNIWriter$EncoderType) -> encode
    java.lang.String encodeChar(char) -> encodeChar
    boolean isalnum(char) -> isalnum
    boolean isprint(char) -> isprint
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.JNIWriter$1 -> org.openjdk.tools.javac.jvm.JNIWriter$1:
    int[] $SwitchMap$javax$lang$model$type$TypeKind -> $SwitchMap$javax$lang$model$type$TypeKind
    int[] $SwitchMap$com$sun$tools$javac$jvm$JNIWriter$EncoderType -> $SwitchMap$com$sun$tools$javac$jvm$JNIWriter$EncoderType
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.JNIWriter$EncoderType -> org.openjdk.tools.javac.jvm.JNIWriter$EncoderType:
    org.openjdk.tools.javac.jvm.JNIWriter$EncoderType CLASS -> CLASS
    org.openjdk.tools.javac.jvm.JNIWriter$EncoderType FIELDSTUB -> FIELDSTUB
    org.openjdk.tools.javac.jvm.JNIWriter$EncoderType FIELD -> FIELD
    org.openjdk.tools.javac.jvm.JNIWriter$EncoderType JNI -> JNI
    org.openjdk.tools.javac.jvm.JNIWriter$EncoderType SIGNATURE -> SIGNATURE
    org.openjdk.tools.javac.jvm.JNIWriter$EncoderType[] $VALUES -> $VALUES
    org.openjdk.tools.javac.jvm.JNIWriter$EncoderType[] values() -> values
    org.openjdk.tools.javac.jvm.JNIWriter$EncoderType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.JNIWriter$SimpleTypeVisitor -> org.openjdk.tools.javac.jvm.JNIWriter$SimpleTypeVisitor:
    java.lang.Object DEFAULT_VALUE -> DEFAULT_VALUE
    void <init>() -> <init>
    void <init>(java.lang.Object) -> <init>
    java.lang.Object defaultAction(org.openjdk.tools.javac.code.Type,java.lang.Object) -> defaultAction
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitPackageType(org.openjdk.tools.javac.code.Type$PackageType,java.lang.Object) -> visitPackageType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitUndetVar(org.openjdk.tools.javac.code.Type$UndetVar,java.lang.Object) -> visitUndetVar
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitModuleType(org.openjdk.tools.javac.code.Type$ModuleType,java.lang.Object) -> visitModuleType
org.openjdk.tools.javac.jvm.JNIWriter$TypeSignature -> org.openjdk.tools.javac.jvm.JNIWriter$TypeSignature:
    org.openjdk.tools.javac.model.JavacElements elems -> elems
    org.openjdk.tools.javac.code.Types types -> types
    java.lang.String SIG_VOID -> SIG_VOID
    java.lang.String SIG_BOOLEAN -> SIG_BOOLEAN
    java.lang.String SIG_BYTE -> SIG_BYTE
    java.lang.String SIG_CHAR -> SIG_CHAR
    java.lang.String SIG_SHORT -> SIG_SHORT
    java.lang.String SIG_INT -> SIG_INT
    java.lang.String SIG_LONG -> SIG_LONG
    java.lang.String SIG_FLOAT -> SIG_FLOAT
    java.lang.String SIG_DOUBLE -> SIG_DOUBLE
    java.lang.String SIG_ARRAY -> SIG_ARRAY
    java.lang.String SIG_CLASS -> SIG_CLASS
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    java.lang.StringBuilder getParameterSignature(org.openjdk.tools.javac.code.Type) -> getParameterSignature
    java.lang.StringBuilder getReturnSignature(org.openjdk.tools.javac.code.Type) -> getReturnSignature
    java.lang.StringBuilder getSignature(org.openjdk.tools.javac.code.Type) -> getSignature
    java.lang.StringBuilder getJvmSignature(org.openjdk.tools.javac.code.Type) -> getJvmSignature
org.openjdk.tools.javac.jvm.JNIWriter$TypeSignature$JvmTypeVisitor -> org.openjdk.tools.javac.jvm.JNIWriter$TypeSignature$JvmTypeVisitor:
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.StringBuilder) -> visitClassType
    org.openjdk.tools.javac.code.Type visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.StringBuilder) -> visitArrayType
    org.openjdk.tools.javac.code.Type visitType(org.openjdk.tools.javac.code.Type,java.lang.StringBuilder) -> visitType
    void setDeclaredType(org.openjdk.tools.javac.code.Type,java.lang.StringBuilder) -> setDeclaredType
    java.lang.String getJvmPrimitiveSignature(org.openjdk.tools.javac.code.Type) -> getJvmPrimitiveSignature
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
org.openjdk.tools.javac.jvm.JNIWriter$TypeSignature$SignatureException -> org.openjdk.tools.javac.jvm.JNIWriter$TypeSignature$SignatureException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.javac.jvm.ModuleNameReader -> org.openjdk.tools.javac.jvm.ModuleNameReader:
    int INITIAL_BUFFER_SIZE -> INITIAL_BUFFER_SIZE
    byte[] buf -> buf
    int bp -> bp
    int[] poolIdx -> poolIdx
    void <init>() -> <init>
    java.lang.String readModuleName(java.nio.file.Path) -> readModuleName
    java.lang.String readModuleName(org.openjdk.javax.tools.JavaFileObject) -> readModuleName
    java.lang.String readModuleName(java.io.InputStream) -> readModuleName
    void checkZero(int,java.lang.String) -> checkZero
    char getChar(int) -> getChar
    char nextChar() -> nextChar
    int nextInt() -> nextInt
    void indexPool() -> indexPool
    java.lang.String getUtf8Value(int,boolean) -> getUtf8Value
    java.lang.String getModuleName(int) -> getModuleName
    byte[] readInputStream(byte[],java.io.InputStream) -> readInputStream
    byte[] ensureCapacity(byte[],int) -> ensureCapacity
org.openjdk.tools.javac.jvm.ModuleNameReader$BadClassFile -> org.openjdk.tools.javac.jvm.ModuleNameReader$BadClassFile:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.javac.jvm.Pool -> org.openjdk.tools.javac.jvm.Pool:
    int MAX_ENTRIES -> MAX_ENTRIES
    int MAX_STRING_LENGTH -> MAX_STRING_LENGTH
    int pp -> pp
    java.lang.Object[] pool -> pool
    java.util.Map indices -> indices
    org.openjdk.tools.javac.code.Types types -> types
    void <init>(int,java.lang.Object[],org.openjdk.tools.javac.code.Types) -> <init>
    void <init>(org.openjdk.tools.javac.code.Types) -> <init>
    int numEntries() -> numEntries
    void reset() -> reset
    int put(java.lang.Object) -> put
    java.lang.Object makePoolValue(java.lang.Object) -> makePoolValue
    int get(java.lang.Object) -> get
org.openjdk.tools.javac.jvm.Pool$DynamicMethod -> org.openjdk.tools.javac.jvm.Pool$DynamicMethod:
    java.lang.Object[] uniqueStaticArgs -> uniqueStaticArgs
    void <init>(org.openjdk.tools.javac.code.Symbol$DynamicMethodSymbol,org.openjdk.tools.javac.code.Types) -> <init>
    boolean equals(java.lang.Object) -> equals
    boolean equalsImpl(java.lang.Object,boolean) -> equalsImpl
    int hashCode() -> hashCode
    int hashCodeImpl(boolean) -> hashCodeImpl
    java.lang.Object[] getUniqueTypeArray(java.lang.Object[],org.openjdk.tools.javac.code.Types) -> getUniqueTypeArray
org.openjdk.tools.javac.jvm.Pool$DynamicMethod$BootstrapMethodsKey -> org.openjdk.tools.javac.jvm.Pool$DynamicMethod$BootstrapMethodsKey:
    void <init>(org.openjdk.tools.javac.code.Symbol$DynamicMethodSymbol,org.openjdk.tools.javac.code.Types) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object[] getUniqueArgs() -> getUniqueArgs
org.openjdk.tools.javac.jvm.Pool$DynamicMethod$BootstrapMethodsValue -> org.openjdk.tools.javac.jvm.Pool$DynamicMethod$BootstrapMethodsValue:
    org.openjdk.tools.javac.jvm.Pool$MethodHandle mh -> mh
    int index -> index
    void <init>(org.openjdk.tools.javac.jvm.Pool$MethodHandle,int) -> <init>
org.openjdk.tools.javac.jvm.Pool$Method -> org.openjdk.tools.javac.jvm.Pool$Method:
    org.openjdk.tools.javac.code.Types$UniqueType uniqueType -> uniqueType
    void <init>(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Types) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.openjdk.tools.javac.jvm.Pool$MethodHandle -> org.openjdk.tools.javac.jvm.Pool$MethodHandle:
    int refKind -> refKind
    org.openjdk.tools.javac.code.Symbol refSym -> refSym
    org.openjdk.tools.javac.code.Types$UniqueType uniqueType -> uniqueType
    org.openjdk.tools.javac.util.Filter nonInitFilter -> nonInitFilter
    org.openjdk.tools.javac.util.Filter initFilter -> initFilter
    void <init>(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Types) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void checkConsistent() -> checkConsistent
    boolean lambda$new$1(org.openjdk.tools.javac.util.Name) -> lambda$new$1
    boolean lambda$new$0(org.openjdk.tools.javac.util.Name) -> lambda$new$0
org.openjdk.tools.javac.jvm.Pool$Variable -> org.openjdk.tools.javac.jvm.Pool$Variable:
    org.openjdk.tools.javac.code.Types$UniqueType uniqueType -> uniqueType
    void <init>(org.openjdk.tools.javac.code.Symbol$VarSymbol,org.openjdk.tools.javac.code.Types) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.openjdk.tools.javac.jvm.Profile -> org.openjdk.tools.javac.jvm.Profile:
    org.openjdk.tools.javac.jvm.Profile COMPACT1 -> COMPACT1
    org.openjdk.tools.javac.jvm.Profile COMPACT2 -> COMPACT2
    org.openjdk.tools.javac.jvm.Profile COMPACT3 -> COMPACT3
    org.openjdk.tools.javac.jvm.Profile DEFAULT -> DEFAULT
    org.openjdk.tools.javac.util.Context$Key profileKey -> profileKey
    java.lang.String name -> name
    int value -> value
    java.util.Set targets -> targets
    org.openjdk.tools.javac.jvm.Profile[] $VALUES -> $VALUES
    org.openjdk.tools.javac.jvm.Profile[] values() -> values
    org.openjdk.tools.javac.jvm.Profile valueOf(java.lang.String) -> valueOf
    org.openjdk.tools.javac.jvm.Profile instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,java.lang.String,int,org.openjdk.tools.javac.jvm.Target,org.openjdk.tools.javac.jvm.Target[]) -> <init>
    org.openjdk.tools.javac.jvm.Profile lookup(java.lang.String) -> lookup
    org.openjdk.tools.javac.jvm.Profile lookup(int) -> lookup
    boolean isValid(org.openjdk.tools.javac.jvm.Target) -> isValid
    void <init>(java.lang.String,int,org.openjdk.tools.javac.jvm.Profile$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.Profile$1 -> org.openjdk.tools.javac.jvm.Profile$1:
    void <init>(java.lang.String,int) -> <init>
    boolean isValid(org.openjdk.tools.javac.jvm.Target) -> isValid
org.openjdk.tools.javac.jvm.StringConcat -> org.openjdk.tools.javac.jvm.StringConcat:
    int MAX_INDY_CONCAT_ARG_SLOTS -> MAX_INDY_CONCAT_ARG_SLOTS
    char TAG_ARG -> TAG_ARG
    char TAG_CONST -> TAG_CONST
    org.openjdk.tools.javac.jvm.Gen gen -> gen
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.code.Types types -> types
    java.util.Map sbAppends -> sbAppends
    org.openjdk.tools.javac.comp.Resolve rs -> rs
    org.openjdk.tools.javac.util.Context$Key concatKey -> concatKey
    org.openjdk.tools.javac.jvm.StringConcat instance(org.openjdk.tools.javac.util.Context) -> instance
    org.openjdk.tools.javac.jvm.StringConcat makeConcat(org.openjdk.tools.javac.util.Context) -> makeConcat
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item makeConcat(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> makeConcat
    org.openjdk.tools.javac.jvm.Items$Item makeConcat(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> makeConcat
    org.openjdk.tools.javac.util.List collectAll(org.openjdk.tools.javac.tree.JCTree) -> collectAll
    org.openjdk.tools.javac.util.List collectAll(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> collectAll
    org.openjdk.tools.javac.util.List collect(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List) -> collect
    org.openjdk.tools.javac.code.Type sharpestAccessible(org.openjdk.tools.javac.code.Type) -> sharpestAccessible
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.StringConcat$Indy -> org.openjdk.tools.javac.jvm.StringConcat$Indy:
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item makeConcat(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> makeConcat
    org.openjdk.tools.javac.jvm.Items$Item makeConcat(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> makeConcat
    void emit(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> emit
    org.openjdk.tools.javac.util.List split(org.openjdk.tools.javac.util.List) -> split
org.openjdk.tools.javac.jvm.StringConcat$IndyConstants -> org.openjdk.tools.javac.jvm.StringConcat$IndyConstants:
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void emit(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> emit
    void doCall(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> doCall
org.openjdk.tools.javac.jvm.StringConcat$IndyPlain -> org.openjdk.tools.javac.jvm.StringConcat$IndyPlain:
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void emit(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> emit
    void doCall(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.List) -> doCall
org.openjdk.tools.javac.jvm.StringConcat$Inline -> org.openjdk.tools.javac.jvm.StringConcat$Inline:
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.jvm.Items$Item makeConcat(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> makeConcat
    org.openjdk.tools.javac.jvm.Items$Item makeConcat(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> makeConcat
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition newStringBuilder(org.openjdk.tools.javac.tree.JCTree) -> newStringBuilder
    void appendString(org.openjdk.tools.javac.tree.JCTree) -> appendString
    void builderToString(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> builderToString
org.openjdk.tools.javac.jvm.Target -> org.openjdk.tools.javac.jvm.Target:
    org.openjdk.tools.javac.jvm.Target JDK1_1 -> JDK1_1
    org.openjdk.tools.javac.jvm.Target JDK1_2 -> JDK1_2
    org.openjdk.tools.javac.jvm.Target JDK1_3 -> JDK1_3
    org.openjdk.tools.javac.jvm.Target JDK1_4 -> JDK1_4
    org.openjdk.tools.javac.jvm.Target JDK1_5 -> JDK1_5
    org.openjdk.tools.javac.jvm.Target JDK1_6 -> JDK1_6
    org.openjdk.tools.javac.jvm.Target JDK1_7 -> JDK1_7
    org.openjdk.tools.javac.jvm.Target JDK1_8 -> JDK1_8
    org.openjdk.tools.javac.jvm.Target JDK1_9 -> JDK1_9
    org.openjdk.tools.javac.util.Context$Key targetKey -> targetKey
    org.openjdk.tools.javac.jvm.Target MIN -> MIN
    org.openjdk.tools.javac.jvm.Target MAX -> MAX
    java.util.Map tab -> tab
    java.lang.String name -> name
    int majorVersion -> majorVersion
    int minorVersion -> minorVersion
    org.openjdk.tools.javac.jvm.Target DEFAULT -> DEFAULT
    org.openjdk.tools.javac.jvm.Target[] $VALUES -> $VALUES
    org.openjdk.tools.javac.jvm.Target[] values() -> values
    org.openjdk.tools.javac.jvm.Target valueOf(java.lang.String) -> valueOf
    org.openjdk.tools.javac.jvm.Target instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(java.lang.String,int,java.lang.String,int,int) -> <init>
    org.openjdk.tools.javac.jvm.Target lookup(java.lang.String) -> lookup
    char syntheticNameChar() -> syntheticNameChar
    boolean hasInvokedynamic() -> hasInvokedynamic
    boolean hasObjects() -> hasObjects
    boolean hasMethodHandles() -> hasMethodHandles
    boolean hasStringConcatFactory() -> hasStringConcatFactory
    java.lang.String multiReleaseValue() -> multiReleaseValue
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.jvm.UninitializedType -> org.openjdk.tools.javac.jvm.UninitializedType:
    int offset -> offset
    org.openjdk.tools.javac.jvm.UninitializedType uninitializedThis(org.openjdk.tools.javac.code.Type) -> uninitializedThis
    org.openjdk.tools.javac.jvm.UninitializedType uninitializedObject(org.openjdk.tools.javac.code.Type,int) -> uninitializedObject
    void <init>(org.openjdk.tools.javac.code.TypeTag,org.openjdk.tools.javac.code.Type,int,org.openjdk.tools.javac.code.TypeMetadata) -> <init>
    org.openjdk.tools.javac.jvm.UninitializedType cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
    org.openjdk.tools.javac.code.Type initializedType() -> initializedType
    org.openjdk.tools.javac.code.Type cloneWithMetadata(org.openjdk.tools.javac.code.TypeMetadata) -> cloneWithMetadata
org.openjdk.tools.javac.main.Arguments -> org.openjdk.tools.javac.main.Arguments:
    org.openjdk.tools.javac.util.Context$Key argsKey -> argsKey
    java.lang.String ownName -> ownName
    java.util.Set classNames -> classNames
    java.util.Set files -> files
    java.util.Map deferredFileManagerOptions -> deferredFileManagerOptions
    java.util.Set fileObjects -> fileObjects
    boolean emptyAllowed -> emptyAllowed
    org.openjdk.tools.javac.util.Options options -> options
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.util.Context context -> context
    org.openjdk.tools.javac.main.Arguments$ErrorMode errorMode -> errorMode
    boolean errors -> errors
    org.openjdk.tools.javac.main.OptionHelper cmdLineHelper -> cmdLineHelper
    org.openjdk.tools.javac.main.OptionHelper apiHelper -> apiHelper
    org.openjdk.tools.javac.main.Arguments instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void init(java.lang.String,java.lang.String[]) -> init
    void init(java.lang.String,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable) -> init
    void init(java.lang.String) -> init
    java.util.Set getFileObjects() -> getFileObjects
    java.util.Set getClassNames() -> getClassNames
    boolean handleReleaseOptions(java.util.function.Predicate) -> handleReleaseOptions
    boolean processArgs(java.lang.Iterable,java.util.Set,org.openjdk.tools.javac.main.OptionHelper,boolean,boolean) -> processArgs
    boolean doProcessArgs(java.lang.Iterable,java.util.Set,org.openjdk.tools.javac.main.OptionHelper,boolean,boolean) -> doProcessArgs
    boolean validate() -> validate
    void validateAddExports(org.openjdk.javax.lang.model.SourceVersion) -> validateAddExports
    void validateAddReads(org.openjdk.javax.lang.model.SourceVersion) -> validateAddReads
    void validateAddModules(org.openjdk.javax.lang.model.SourceVersion) -> validateAddModules
    void validateLimitModules(org.openjdk.javax.lang.model.SourceVersion) -> validateLimitModules
    void validateDefaultModuleForCreatedFiles(org.openjdk.javax.lang.model.SourceVersion) -> validateDefaultModuleForCreatedFiles
    boolean isEmpty() -> isEmpty
    void allowEmpty() -> allowEmpty
    java.util.Map getDeferredFileManagerOptions() -> getDeferredFileManagerOptions
    java.util.Set getPluginOpts() -> getPluginOpts
    org.openjdk.tools.javac.util.List getDocLintOpts() -> getDocLintOpts
    boolean checkDirectory(org.openjdk.tools.javac.main.Option) -> checkDirectory
    void checkOptionAllowed(boolean,org.openjdk.tools.javac.main.Arguments$ErrorReporter,org.openjdk.tools.javac.main.Option[]) -> checkOptionAllowed
    void error(org.openjdk.tools.javac.util.JCDiagnostic$Error) -> error
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(org.openjdk.tools.javac.main.Option$InvalidValueException) -> error
    void warning(java.lang.String,java.lang.Object[]) -> warning
    void report(java.lang.String,java.lang.Object[]) -> report
    void report(org.openjdk.tools.javac.util.JCDiagnostic$Error) -> report
    org.openjdk.javax.tools.JavaFileManager getFileManager() -> getFileManager
    org.openjdk.tools.javac.util.ListBuffer toList(java.lang.Iterable) -> toList
    java.util.Set toSet(java.lang.Iterable) -> toSet
    void lambda$validate$3(org.openjdk.tools.javac.jvm.Target,org.openjdk.tools.javac.main.Option) -> lambda$validate$3
    void lambda$validate$2(org.openjdk.tools.javac.jvm.Target,org.openjdk.tools.javac.main.Option) -> lambda$validate$2
    boolean lambda$processArgs$1(java.util.Set,org.openjdk.tools.javac.main.OptionHelper,boolean,boolean,java.lang.Iterable) -> lambda$processArgs$1
    void lambda$handleReleaseOptions$0(org.openjdk.tools.javac.main.Option) -> lambda$handleReleaseOptions$0
    org.openjdk.tools.javac.util.Options access$000(org.openjdk.tools.javac.main.Arguments) -> access$000
    java.util.Map access$100(org.openjdk.tools.javac.main.Arguments) -> access$100
    org.openjdk.tools.javac.util.Log access$200(org.openjdk.tools.javac.main.Arguments) -> access$200
    java.lang.String access$300(org.openjdk.tools.javac.main.Arguments) -> access$300
    java.util.Set access$400(org.openjdk.tools.javac.main.Arguments) -> access$400
    java.util.Set access$500(org.openjdk.tools.javac.main.Arguments) -> access$500
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Arguments$1 -> org.openjdk.tools.javac.main.Arguments$1:
    org.openjdk.tools.javac.main.Arguments this$0 -> this$0
    void <init>(org.openjdk.tools.javac.main.Arguments) -> <init>
    java.lang.String get(org.openjdk.tools.javac.main.Option) -> get
    void put(java.lang.String,java.lang.String) -> put
    void remove(java.lang.String) -> remove
    boolean handleFileManagerOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleFileManagerOption
    org.openjdk.tools.javac.util.Log getLog() -> getLog
    java.lang.String getOwnName() -> getOwnName
    void addFile(java.nio.file.Path) -> addFile
    void addClassName(java.lang.String) -> addClassName
org.openjdk.tools.javac.main.Arguments$2 -> org.openjdk.tools.javac.main.Arguments$2:
    org.openjdk.tools.javac.main.Arguments this$0 -> this$0
    void <init>(org.openjdk.tools.javac.main.Arguments,org.openjdk.tools.javac.util.Log) -> <init>
    java.lang.String get(org.openjdk.tools.javac.main.Option) -> get
    void put(java.lang.String,java.lang.String) -> put
    void remove(java.lang.String) -> remove
    org.openjdk.tools.javac.util.Log getLog() -> getLog
org.openjdk.tools.javac.main.Arguments$3 -> org.openjdk.tools.javac.main.Arguments$3:
    int[] $SwitchMap$com$sun$tools$javac$main$Arguments$ErrorMode -> $SwitchMap$com$sun$tools$javac$main$Arguments$ErrorMode
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Arguments$ErrorMode -> org.openjdk.tools.javac.main.Arguments$ErrorMode:
    org.openjdk.tools.javac.main.Arguments$ErrorMode ILLEGAL_ARGUMENT -> ILLEGAL_ARGUMENT
    org.openjdk.tools.javac.main.Arguments$ErrorMode ILLEGAL_STATE -> ILLEGAL_STATE
    org.openjdk.tools.javac.main.Arguments$ErrorMode LOG -> LOG
    org.openjdk.tools.javac.main.Arguments$ErrorMode[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.Arguments$ErrorMode[] values() -> values
    org.openjdk.tools.javac.main.Arguments$ErrorMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Arguments$ErrorReporter -> org.openjdk.tools.javac.main.Arguments$ErrorReporter:
    void report(org.openjdk.tools.javac.main.Option) -> report
org.openjdk.tools.javac.main.CommandLine -> org.openjdk.tools.javac.main.CommandLine:
    void <init>() -> <init>
    java.lang.String[] parse(java.lang.String[]) -> parse
    void appendParsedCommandArgs(java.util.List,java.util.List) -> appendParsedCommandArgs
    java.util.List parse(java.lang.String,java.util.List) -> parse
    java.lang.String[] parse(java.lang.String,java.lang.String[]) -> parse
    void loadCmdFile(java.lang.String,java.util.List) -> loadCmdFile
    void appendParsedEnvVariables(java.util.List,java.lang.String) -> appendParsedEnvVariables
org.openjdk.tools.javac.main.CommandLine$Tokenizer -> org.openjdk.tools.javac.main.CommandLine$Tokenizer:
    java.io.Reader in -> in
    int ch -> ch
    void <init>(java.io.Reader) -> <init>
    java.lang.String nextToken() -> nextToken
    void skipWhite() -> skipWhite
org.openjdk.tools.javac.main.CommandLine$UnmatchedQuote -> org.openjdk.tools.javac.main.CommandLine$UnmatchedQuote:
    long serialVersionUID -> serialVersionUID
    java.lang.String variableName -> variableName
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.javac.main.JavaCompiler -> org.openjdk.tools.javac.main.JavaCompiler:
    org.openjdk.tools.javac.util.Context$Key compilerKey -> compilerKey
    java.lang.String versionRBName -> versionRBName
    java.util.ResourceBundle versionRB -> versionRB
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy DEFAULT_COMPILE_POLICY -> DEFAULT_COMPILE_POLICY
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diagFactory -> diagFactory
    org.openjdk.tools.javac.tree.TreeMaker make -> make
    org.openjdk.tools.javac.code.ClassFinder finder -> finder
    org.openjdk.tools.javac.jvm.ClassReader reader -> reader
    org.openjdk.tools.javac.jvm.ClassWriter writer -> writer
    org.openjdk.tools.javac.jvm.JNIWriter jniWriter -> jniWriter
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Source source -> source
    org.openjdk.tools.javac.jvm.Gen gen -> gen
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.comp.Attr attr -> attr
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.comp.Flow flow -> flow
    org.openjdk.tools.javac.comp.Modules modules -> modules
    org.openjdk.tools.javac.code.ModuleFinder moduleFinder -> moduleFinder
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.comp.TransTypes transTypes -> transTypes
    org.openjdk.tools.javac.comp.Lower lower -> lower
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    org.openjdk.tools.javac.util.Name completionFailureName -> completionFailureName
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.parser.ParserFactory parserFactory -> parserFactory
    org.openjdk.tools.javac.api.MultiTaskListener taskListener -> taskListener
    org.openjdk.tools.javac.code.Symbol$Completer sourceCompleter -> sourceCompleter
    org.openjdk.tools.javac.util.Options options -> options
    org.openjdk.tools.javac.util.Context context -> context
    boolean annotationProcessingOccurred -> annotationProcessingOccurred
    boolean implicitSourceFilesRead -> implicitSourceFilesRead
    boolean enterDone -> enterDone
    org.openjdk.tools.javac.comp.CompileStates compileStates -> compileStates
    boolean verbose -> verbose
    boolean sourceOutput -> sourceOutput
    boolean lineDebugInfo -> lineDebugInfo
    boolean genEndPos -> genEndPos
    boolean devVerbose -> devVerbose
    boolean processPcks -> processPcks
    boolean werror -> werror
    boolean explicitAnnotationProcessingRequested -> explicitAnnotationProcessingRequested
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy compilePolicy -> compilePolicy
    org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy implicitSourcePolicy -> implicitSourcePolicy
    boolean verboseCompilePolicy -> verboseCompilePolicy
    org.openjdk.tools.javac.comp.CompileStates$CompileState shouldStopPolicyIfError -> shouldStopPolicyIfError
    org.openjdk.tools.javac.comp.CompileStates$CompileState shouldStopPolicyIfNoError -> shouldStopPolicyIfNoError
    org.openjdk.tools.javac.comp.Todo todo -> todo
    org.openjdk.tools.javac.util.List closeables -> closeables
    java.util.Set inputFiles -> inputFiles
    org.openjdk.tools.javac.code.Symbol silentFail -> silentFail
    boolean keepComments -> keepComments
    boolean hasBeenUsed -> hasBeenUsed
    long start_msec -> start_msec
    long elapsed_msec -> elapsed_msec
    org.openjdk.tools.javac.util.List rootClasses -> rootClasses
    boolean processAnnotations -> processAnnotations
    org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler deferredDiagnosticHandler -> deferredDiagnosticHandler
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment procEnvImpl -> procEnvImpl
    java.util.HashMap desugaredEnvs -> desugaredEnvs
    org.openjdk.tools.javac.main.JavaCompiler instance(org.openjdk.tools.javac.util.Context) -> instance
    java.lang.String version() -> version
    java.lang.String fullVersion() -> fullVersion
    java.lang.String version(java.lang.String) -> version
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    boolean shouldStop(org.openjdk.tools.javac.comp.CompileStates$CompileState) -> shouldStop
    int errorCount() -> errorCount
    java.util.Queue stopIfError(org.openjdk.tools.javac.comp.CompileStates$CompileState,java.util.Queue) -> stopIfError
    org.openjdk.tools.javac.util.List stopIfError(org.openjdk.tools.javac.comp.CompileStates$CompileState,org.openjdk.tools.javac.util.List) -> stopIfError
    int warningCount() -> warningCount
    java.lang.CharSequence readSource(org.openjdk.javax.tools.JavaFileObject) -> readSource
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit parse(org.openjdk.javax.tools.JavaFileObject,java.lang.CharSequence) -> parse
    boolean keepComments() -> keepComments
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String) -> parse
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit parse(org.openjdk.javax.tools.JavaFileObject) -> parse
    org.openjdk.tools.javac.code.Symbol resolveBinaryNameOrIdent(java.lang.String) -> resolveBinaryNameOrIdent
    org.openjdk.tools.javac.code.Symbol resolveBinaryNameOrIdent(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String) -> resolveBinaryNameOrIdent
    org.openjdk.tools.javac.code.Symbol resolveIdent(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String) -> resolveIdent
    org.openjdk.javax.tools.JavaFileObject genCode(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> genCode
    org.openjdk.javax.tools.JavaFileObject printSource(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> printSource
    void readSourceFile(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> readSourceFile
    void readSourceFile(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> readSourceFile
    void compile(org.openjdk.tools.javac.util.List) -> compile
    void compile(java.util.Collection,java.util.Collection,java.lang.Iterable,java.util.Collection) -> compile
    void checkReusable() -> checkReusable
    org.openjdk.tools.javac.util.List parseFiles(java.lang.Iterable) -> parseFiles
    org.openjdk.tools.javac.util.List enterTreesIfNeeded(org.openjdk.tools.javac.util.List) -> enterTreesIfNeeded
    org.openjdk.tools.javac.util.List initModules(org.openjdk.tools.javac.util.List) -> initModules
    org.openjdk.tools.javac.util.List enterTrees(org.openjdk.tools.javac.util.List) -> enterTrees
    void initProcessAnnotations(java.lang.Iterable,java.util.Collection,java.util.Collection) -> initProcessAnnotations
    void processAnnotations(org.openjdk.tools.javac.util.List) -> processAnnotations
    void processAnnotations(org.openjdk.tools.javac.util.List,java.util.Collection) -> processAnnotations
    boolean unrecoverableError() -> unrecoverableError
    boolean explicitAnnotationProcessingRequested() -> explicitAnnotationProcessingRequested
    boolean explicitAnnotationProcessingRequested(org.openjdk.tools.javac.util.Options) -> explicitAnnotationProcessingRequested
    void setDeferredDiagnosticHandler(org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler) -> setDeferredDiagnosticHandler
    java.util.Queue attribute(java.util.Queue) -> attribute
    org.openjdk.tools.javac.comp.Env attribute(org.openjdk.tools.javac.comp.Env) -> attribute
    java.util.Queue flow(java.util.Queue) -> flow
    java.util.Queue flow(org.openjdk.tools.javac.comp.Env) -> flow
    void flow(org.openjdk.tools.javac.comp.Env,java.util.Queue) -> flow
    java.util.Queue desugar(java.util.Queue) -> desugar
    void desugar(org.openjdk.tools.javac.comp.Env,java.util.Queue) -> desugar
    void desugarByFile(java.lang.Iterable) -> desugarByFile
    void generate(java.util.Queue) -> generate
    void generate(java.util.Queue,java.util.Queue) -> generate
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl removeMethodBodies(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> removeMethodBodies
    void reportDeferredDiagnostics() -> reportDeferredDiagnostics
    void enterDone() -> enterDone
    boolean isEnterDone() -> isEnterDone
    org.openjdk.tools.javac.util.Name readModuleName(org.openjdk.javax.tools.JavaFileObject) -> readModuleName
    org.openjdk.tools.javac.util.Name findPackageInFile(org.openjdk.javax.tools.JavaFileObject) -> findPackageInFile
    org.openjdk.tools.javac.util.Name parseAndGetName(org.openjdk.javax.tools.JavaFileObject,java.util.function.Function) -> parseAndGetName
    void close() -> close
    void printNote(java.lang.String) -> printNote
    void printCount(java.lang.String,int) -> printCount
    long now() -> now
    long elapsed(long) -> elapsed
    void newRound() -> newRound
    org.openjdk.tools.javac.util.Name lambda$findPackageInFile$2(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> lambda$findPackageInFile$2
    org.openjdk.tools.javac.util.Name lambda$readModuleName$1(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> lambda$readModuleName$1
    void lambda$new$0(org.openjdk.tools.javac.code.Symbol) -> lambda$new$0
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy access$000() -> access$000
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.JavaCompiler$1 -> org.openjdk.tools.javac.main.JavaCompiler$1:
    org.openjdk.tools.javac.main.JavaCompiler this$0 -> this$0
    void <init>(org.openjdk.tools.javac.main.JavaCompiler,org.openjdk.tools.javac.code.Kinds$Kind,long,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> <init>
    java.lang.Object accept(org.openjdk.javax.lang.model.element.ElementVisitor,java.lang.Object) -> accept
    boolean exists() -> exists
org.openjdk.tools.javac.main.JavaCompiler$1MethodBodyRemover -> org.openjdk.tools.javac.main.JavaCompiler$1MethodBodyRemover:
    boolean val$isInterface -> val$isInterface
    org.openjdk.tools.javac.main.JavaCompiler this$0 -> this$0
    void <init>(org.openjdk.tools.javac.main.JavaCompiler,boolean) -> <init>
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
org.openjdk.tools.javac.main.JavaCompiler$1ScanNested -> org.openjdk.tools.javac.main.JavaCompiler$1ScanNested:
    java.util.Set dependencies -> dependencies
    boolean hasLambdas -> hasLambdas
    org.openjdk.tools.javac.comp.Env val$env -> val$env
    org.openjdk.tools.javac.main.JavaCompiler this$0 -> this$0
    void <init>(org.openjdk.tools.javac.main.JavaCompiler,org.openjdk.tools.javac.comp.Env) -> <init>
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
org.openjdk.tools.javac.main.JavaCompiler$2 -> org.openjdk.tools.javac.main.JavaCompiler$2:
    int[] $SwitchMap$com$sun$tools$javac$main$JavaCompiler$CompilePolicy -> $SwitchMap$com$sun$tools$javac$main$JavaCompiler$CompilePolicy
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy -> org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy:
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy ATTR_ONLY -> ATTR_ONLY
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy CHECK_ONLY -> CHECK_ONLY
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy SIMPLE -> SIMPLE
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy BY_FILE -> BY_FILE
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy BY_TODO -> BY_TODO
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy[] values() -> values
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.main.JavaCompiler$CompilePolicy decode(java.lang.String) -> decode
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy -> org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy:
    org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy NONE -> NONE
    org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy CLASS -> CLASS
    org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy UNSET -> UNSET
    org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy[] values() -> values
    org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.main.JavaCompiler$ImplicitSourcePolicy decode(java.lang.String) -> decode
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Main -> org.openjdk.tools.javac.main.Main:
    java.lang.String ownName -> ownName
    java.io.PrintWriter stdOut -> stdOut
    java.io.PrintWriter stdErr -> stdErr
    org.openjdk.tools.javac.util.Log log -> log
    boolean apiMode -> apiMode
    java.lang.String ENV_OPT_NAME -> ENV_OPT_NAME
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    java.lang.String javacBundleName -> javacBundleName
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.io.PrintWriter) -> <init>
    void <init>(java.lang.String,java.io.PrintWriter,java.io.PrintWriter) -> <init>
    void error(java.lang.String,java.lang.Object[]) -> error
    void warning(java.lang.String,java.lang.Object[]) -> warning
    org.openjdk.tools.javac.main.Main$Result compile(java.lang.String[]) -> compile
    org.openjdk.tools.javac.main.Main$Result compile(java.lang.String[],org.openjdk.tools.javac.util.Context) -> compile
    void bugMessage(java.lang.Throwable) -> bugMessage
    void feMessage(java.lang.Throwable,org.openjdk.tools.javac.util.Options) -> feMessage
    void ioMessage(java.lang.Throwable) -> ioMessage
    void resourceMessage(java.lang.Throwable) -> resourceMessage
    void apMessage(org.openjdk.tools.javac.processing.AnnotationProcessingError) -> apMessage
    void pluginMessage(java.lang.Throwable) -> pluginMessage
    void showClass(java.lang.String) -> showClass
org.openjdk.tools.javac.main.Main$1 -> org.openjdk.tools.javac.main.Main$1:
    org.openjdk.tools.javac.main.Main this$0 -> this$0
    void <init>(org.openjdk.tools.javac.main.Main,org.openjdk.tools.javac.util.Log) -> <init>
    java.lang.String getOwnName() -> getOwnName
    void put(java.lang.String,java.lang.String) -> put
org.openjdk.tools.javac.main.Main$Result -> org.openjdk.tools.javac.main.Main$Result:
    org.openjdk.tools.javac.main.Main$Result OK -> OK
    org.openjdk.tools.javac.main.Main$Result ERROR -> ERROR
    org.openjdk.tools.javac.main.Main$Result CMDERR -> CMDERR
    org.openjdk.tools.javac.main.Main$Result SYSERR -> SYSERR
    org.openjdk.tools.javac.main.Main$Result ABNORMAL -> ABNORMAL
    int exitCode -> exitCode
    org.openjdk.tools.javac.main.Main$Result[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.Main$Result[] values() -> values
    org.openjdk.tools.javac.main.Main$Result valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    boolean isOK() -> isOK
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Option -> org.openjdk.tools.javac.main.Option:
    org.openjdk.tools.javac.main.Option G -> G
    org.openjdk.tools.javac.main.Option G_NONE -> G_NONE
    org.openjdk.tools.javac.main.Option G_CUSTOM -> G_CUSTOM
    org.openjdk.tools.javac.main.Option XLINT -> XLINT
    org.openjdk.tools.javac.main.Option XLINT_CUSTOM -> XLINT_CUSTOM
    org.openjdk.tools.javac.main.Option XDOCLINT -> XDOCLINT
    org.openjdk.tools.javac.main.Option XDOCLINT_CUSTOM -> XDOCLINT_CUSTOM
    org.openjdk.tools.javac.main.Option XDOCLINT_PACKAGE -> XDOCLINT_PACKAGE
    org.openjdk.tools.javac.main.Option DOCLINT_FORMAT -> DOCLINT_FORMAT
    org.openjdk.tools.javac.main.Option NOWARN -> NOWARN
    org.openjdk.tools.javac.main.Option VERBOSE -> VERBOSE
    org.openjdk.tools.javac.main.Option DEPRECATION -> DEPRECATION
    org.openjdk.tools.javac.main.Option CLASS_PATH -> CLASS_PATH
    org.openjdk.tools.javac.main.Option SOURCE_PATH -> SOURCE_PATH
    org.openjdk.tools.javac.main.Option MODULE_SOURCE_PATH -> MODULE_SOURCE_PATH
    org.openjdk.tools.javac.main.Option MODULE_PATH -> MODULE_PATH
    org.openjdk.tools.javac.main.Option UPGRADE_MODULE_PATH -> UPGRADE_MODULE_PATH
    org.openjdk.tools.javac.main.Option SYSTEM -> SYSTEM
    org.openjdk.tools.javac.main.Option PATCH_MODULE -> PATCH_MODULE
    org.openjdk.tools.javac.main.Option BOOT_CLASS_PATH -> BOOT_CLASS_PATH
    org.openjdk.tools.javac.main.Option XBOOTCLASSPATH_PREPEND -> XBOOTCLASSPATH_PREPEND
    org.openjdk.tools.javac.main.Option XBOOTCLASSPATH_APPEND -> XBOOTCLASSPATH_APPEND
    org.openjdk.tools.javac.main.Option XBOOTCLASSPATH -> XBOOTCLASSPATH
    org.openjdk.tools.javac.main.Option EXTDIRS -> EXTDIRS
    org.openjdk.tools.javac.main.Option DJAVA_EXT_DIRS -> DJAVA_EXT_DIRS
    org.openjdk.tools.javac.main.Option ENDORSEDDIRS -> ENDORSEDDIRS
    org.openjdk.tools.javac.main.Option DJAVA_ENDORSED_DIRS -> DJAVA_ENDORSED_DIRS
    org.openjdk.tools.javac.main.Option PROC -> PROC
    org.openjdk.tools.javac.main.Option PROCESSOR -> PROCESSOR
    org.openjdk.tools.javac.main.Option PROCESSOR_PATH -> PROCESSOR_PATH
    org.openjdk.tools.javac.main.Option PROCESSOR_MODULE_PATH -> PROCESSOR_MODULE_PATH
    org.openjdk.tools.javac.main.Option PARAMETERS -> PARAMETERS
    org.openjdk.tools.javac.main.Option D -> D
    org.openjdk.tools.javac.main.Option S -> S
    org.openjdk.tools.javac.main.Option H -> H
    org.openjdk.tools.javac.main.Option IMPLICIT -> IMPLICIT
    org.openjdk.tools.javac.main.Option ENCODING -> ENCODING
    org.openjdk.tools.javac.main.Option SOURCE -> SOURCE
    org.openjdk.tools.javac.main.Option TARGET -> TARGET
    org.openjdk.tools.javac.main.Option RELEASE -> RELEASE
    org.openjdk.tools.javac.main.Option PROFILE -> PROFILE
    org.openjdk.tools.javac.main.Option VERSION -> VERSION
    org.openjdk.tools.javac.main.Option FULLVERSION -> FULLVERSION
    org.openjdk.tools.javac.main.Option HELP -> HELP
    org.openjdk.tools.javac.main.Option A -> A
    org.openjdk.tools.javac.main.Option DEFAULT_MODULE_FOR_CREATED_FILES -> DEFAULT_MODULE_FOR_CREATED_FILES
    org.openjdk.tools.javac.main.Option X -> X
    org.openjdk.tools.javac.main.Option J -> J
    org.openjdk.tools.javac.main.Option MOREINFO -> MOREINFO
    org.openjdk.tools.javac.main.Option WERROR -> WERROR
    org.openjdk.tools.javac.main.Option PROMPT -> PROMPT
    org.openjdk.tools.javac.main.Option DOE -> DOE
    org.openjdk.tools.javac.main.Option PRINTSOURCE -> PRINTSOURCE
    org.openjdk.tools.javac.main.Option WARNUNCHECKED -> WARNUNCHECKED
    org.openjdk.tools.javac.main.Option XMAXERRS -> XMAXERRS
    org.openjdk.tools.javac.main.Option XMAXWARNS -> XMAXWARNS
    org.openjdk.tools.javac.main.Option XSTDOUT -> XSTDOUT
    org.openjdk.tools.javac.main.Option XPRINT -> XPRINT
    org.openjdk.tools.javac.main.Option XPRINTROUNDS -> XPRINTROUNDS
    org.openjdk.tools.javac.main.Option XPRINTPROCESSORINFO -> XPRINTPROCESSORINFO
    org.openjdk.tools.javac.main.Option XPREFER -> XPREFER
    org.openjdk.tools.javac.main.Option XXUSERPATHSFIRST -> XXUSERPATHSFIRST
    org.openjdk.tools.javac.main.Option XPKGINFO -> XPKGINFO
    org.openjdk.tools.javac.main.Option O -> O
    org.openjdk.tools.javac.main.Option XJCOV -> XJCOV
    org.openjdk.tools.javac.main.Option PLUGIN -> PLUGIN
    org.openjdk.tools.javac.main.Option XDIAGS -> XDIAGS
    org.openjdk.tools.javac.main.Option DEBUG -> DEBUG
    org.openjdk.tools.javac.main.Option SHOULDSTOP -> SHOULDSTOP
    org.openjdk.tools.javac.main.Option DIAGS -> DIAGS
    org.openjdk.tools.javac.main.Option XD -> XD
    org.openjdk.tools.javac.main.Option ADD_EXPORTS -> ADD_EXPORTS
    org.openjdk.tools.javac.main.Option ADD_OPENS -> ADD_OPENS
    org.openjdk.tools.javac.main.Option ADD_READS -> ADD_READS
    org.openjdk.tools.javac.main.Option MODULE -> MODULE
    org.openjdk.tools.javac.main.Option ADD_MODULES -> ADD_MODULES
    org.openjdk.tools.javac.main.Option LIMIT_MODULES -> LIMIT_MODULES
    org.openjdk.tools.javac.main.Option MODULE_VERSION -> MODULE_VERSION
    org.openjdk.tools.javac.main.Option AT -> AT
    org.openjdk.tools.javac.main.Option SOURCEFILE -> SOURCEFILE
    org.openjdk.tools.javac.main.Option MULTIRELEASE -> MULTIRELEASE
    org.openjdk.tools.javac.main.Option INHERIT_RUNTIME_ENVIRONMENT -> INHERIT_RUNTIME_ENVIRONMENT
    java.lang.String primaryName -> primaryName
    java.lang.String[] names -> names
    java.lang.String argsNameKey -> argsNameKey
    java.lang.String descrKey -> descrKey
    org.openjdk.tools.javac.main.Option$OptionKind kind -> kind
    org.openjdk.tools.javac.main.Option$OptionGroup group -> group
    org.openjdk.tools.javac.main.Option$ArgKind argKind -> argKind
    org.openjdk.tools.javac.main.Option$ChoiceKind choiceKind -> choiceKind
    java.util.Set choices -> choices
    java.lang.String SMALL_INDENT -> SMALL_INDENT
    java.lang.String LARGE_INDENT -> LARGE_INDENT
    int DEFAULT_SYNOPSIS_WIDTH -> DEFAULT_SYNOPSIS_WIDTH
    int DEFAULT_MAX_LINE_LENGTH -> DEFAULT_MAX_LINE_LENGTH
    java.lang.String COMPACT_FORMAT -> COMPACT_FORMAT
    org.openjdk.tools.javac.main.Option[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.Option[] values() -> values
    org.openjdk.tools.javac.main.Option valueOf(java.lang.String) -> valueOf
    org.openjdk.tools.javac.main.Option lookup(java.lang.String) -> lookup
    org.openjdk.tools.javac.main.Option lookup(java.lang.String,java.util.Set) -> lookup
    void showHelp(org.openjdk.tools.javac.util.Log,org.openjdk.tools.javac.main.Option$OptionKind) -> showHelp
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ArgKind) -> <init>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ChoiceKind,java.util.Set) -> <init>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ChoiceKind,java.lang.String[]) -> <init>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ChoiceKind,java.util.Set,org.openjdk.tools.javac.main.Option$ArgKind) -> <init>
    java.lang.String getPrimaryName() -> getPrimaryName
    org.openjdk.tools.javac.main.Option$OptionKind getKind() -> getKind
    org.openjdk.tools.javac.main.Option$ArgKind getArgKind() -> getArgKind
    boolean hasArg() -> hasArg
    boolean matches(java.lang.String) -> matches
    boolean matches(java.lang.String,java.lang.String) -> matches
    void handleOption(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.util.Iterator) -> handleOption
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
    java.util.regex.Pattern getPattern() -> getPattern
    int findSeparator(java.lang.String) -> findSeparator
    void help(org.openjdk.tools.javac.util.Log) -> help
    void help(org.openjdk.tools.javac.util.Log,java.lang.String) -> help
    java.lang.String helpSynopsis(java.lang.String,org.openjdk.tools.javac.util.Log) -> helpSynopsis
    java.util.Set getXLintChoices() -> getXLintChoices
    java.util.Set getJavaCompilerOptions() -> getJavaCompilerOptions
    java.util.Set getJavacFileManagerOptions() -> getJavacFileManagerOptions
    java.util.Set getJavacToolOptions() -> getJavacToolOptions
    java.util.Set getOptions(org.openjdk.tools.javac.main.Option$OptionGroup) -> getOptions
    java.util.EnumSet lambda$getOptions$4() -> lambda$getOptions$4
    boolean lambda$getOptions$3(org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option) -> lambda$getOptions$3
    java.lang.String lambda$help$2(org.openjdk.tools.javac.util.Log,java.lang.String) -> lambda$help$2
    void lambda$showHelp$1(org.openjdk.tools.javac.util.Log,org.openjdk.tools.javac.main.Option) -> lambda$showHelp$1
    boolean lambda$showHelp$0(org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option) -> lambda$showHelp$0
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$1) -> <init>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ChoiceKind,java.util.Set,org.openjdk.tools.javac.main.Option$1) -> <init>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$1) -> <init>
    void access$300(org.openjdk.tools.javac.util.Log,org.openjdk.tools.javac.main.Option$OptionKind) -> access$300
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ArgKind,org.openjdk.tools.javac.main.Option$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Option$1 -> org.openjdk.tools.javac.main.Option$1:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$10 -> org.openjdk.tools.javac.main.Option$10:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$11 -> org.openjdk.tools.javac.main.Option$11:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$12 -> org.openjdk.tools.javac.main.Option$12:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$13 -> org.openjdk.tools.javac.main.Option$13:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$14 -> org.openjdk.tools.javac.main.Option$14:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void help(org.openjdk.tools.javac.util.Log) -> help
    java.util.stream.Stream lambda$help$0(org.openjdk.tools.javac.platform.PlatformProvider) -> lambda$help$0
org.openjdk.tools.javac.main.Option$15 -> org.openjdk.tools.javac.main.Option$15:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$16 -> org.openjdk.tools.javac.main.Option$16:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$17 -> org.openjdk.tools.javac.main.Option$17:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$18 -> org.openjdk.tools.javac.main.Option$18:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$19 -> org.openjdk.tools.javac.main.Option$19:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ArgKind) -> <init>
    boolean matches(java.lang.String) -> matches
    boolean hasArg() -> hasArg
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$2 -> org.openjdk.tools.javac.main.Option$2:
    java.lang.String LINT_KEY_FORMAT -> LINT_KEY_FORMAT
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ChoiceKind,java.util.Set) -> <init>
    void help(org.openjdk.tools.javac.util.Log) -> help
org.openjdk.tools.javac.main.Option$20 -> org.openjdk.tools.javac.main.Option$20:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
    java.util.regex.Pattern getPattern() -> getPattern
org.openjdk.tools.javac.main.Option$21 -> org.openjdk.tools.javac.main.Option$21:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$22 -> org.openjdk.tools.javac.main.Option$22:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ArgKind) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$23 -> org.openjdk.tools.javac.main.Option$23:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$24 -> org.openjdk.tools.javac.main.Option$24:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$25 -> org.openjdk.tools.javac.main.Option$25:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$26 -> org.openjdk.tools.javac.main.Option$26:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$27 -> org.openjdk.tools.javac.main.Option$27:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$28 -> org.openjdk.tools.javac.main.Option$28:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$29 -> org.openjdk.tools.javac.main.Option$29:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$3 -> org.openjdk.tools.javac.main.Option$3:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    boolean matches(java.lang.String) -> matches
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$30 -> org.openjdk.tools.javac.main.Option$30:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    boolean matches(java.lang.String) -> matches
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$31 -> org.openjdk.tools.javac.main.Option$31:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
    java.util.regex.Pattern getPattern() -> getPattern
org.openjdk.tools.javac.main.Option$32 -> org.openjdk.tools.javac.main.Option$32:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
    java.util.regex.Pattern getPattern() -> getPattern
org.openjdk.tools.javac.main.Option$33 -> org.openjdk.tools.javac.main.Option$33:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
    java.util.regex.Pattern getPattern() -> getPattern
org.openjdk.tools.javac.main.Option$34 -> org.openjdk.tools.javac.main.Option$34:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
    java.util.regex.Pattern getPattern() -> getPattern
org.openjdk.tools.javac.main.Option$35 -> org.openjdk.tools.javac.main.Option$35:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$36 -> org.openjdk.tools.javac.main.Option$36:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup,org.openjdk.tools.javac.main.Option$ArgKind) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$37 -> org.openjdk.tools.javac.main.Option$37:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    boolean matches(java.lang.String) -> matches
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$38 -> org.openjdk.tools.javac.main.Option$38:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
    org.openjdk.tools.javac.main.Option[] getSupportedRuntimeOptions() -> getSupportedRuntimeOptions
    boolean lambda$process$1(java.lang.String) -> lambda$process$1
    java.lang.String lambda$process$0(java.lang.String) -> lambda$process$0
org.openjdk.tools.javac.main.Option$39 -> org.openjdk.tools.javac.main.Option$39:
    java.text.Collator collator -> collator
    void <init>() -> <init>
    int compare(org.openjdk.tools.javac.main.Option,org.openjdk.tools.javac.main.Option) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.openjdk.tools.javac.main.Option$4 -> org.openjdk.tools.javac.main.Option$4:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    boolean matches(java.lang.String) -> matches
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$40 -> org.openjdk.tools.javac.main.Option$40:
    int[] $SwitchMap$com$sun$tools$javac$main$Option -> $SwitchMap$com$sun$tools$javac$main$Option
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Option$5 -> org.openjdk.tools.javac.main.Option$5:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$6 -> org.openjdk.tools.javac.main.Option$6:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$7 -> org.openjdk.tools.javac.main.Option$7:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
    java.util.regex.Pattern getPattern() -> getPattern
    java.lang.String lambda$process$0(java.lang.String) -> lambda$process$0
org.openjdk.tools.javac.main.Option$8 -> org.openjdk.tools.javac.main.Option$8:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$9 -> org.openjdk.tools.javac.main.Option$9:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,org.openjdk.tools.javac.main.Option$OptionKind,org.openjdk.tools.javac.main.Option$OptionGroup) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javac.main.Option$ArgKind -> org.openjdk.tools.javac.main.Option$ArgKind:
    org.openjdk.tools.javac.main.Option$ArgKind NONE -> NONE
    org.openjdk.tools.javac.main.Option$ArgKind REQUIRED -> REQUIRED
    org.openjdk.tools.javac.main.Option$ArgKind ADJACENT -> ADJACENT
    org.openjdk.tools.javac.main.Option$ArgKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.Option$ArgKind[] values() -> values
    org.openjdk.tools.javac.main.Option$ArgKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Option$ChoiceKind -> org.openjdk.tools.javac.main.Option$ChoiceKind:
    org.openjdk.tools.javac.main.Option$ChoiceKind ONEOF -> ONEOF
    org.openjdk.tools.javac.main.Option$ChoiceKind ANYOF -> ANYOF
    org.openjdk.tools.javac.main.Option$ChoiceKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.Option$ChoiceKind[] values() -> values
    org.openjdk.tools.javac.main.Option$ChoiceKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Option$HiddenGroup -> org.openjdk.tools.javac.main.Option$HiddenGroup:
    org.openjdk.tools.javac.main.Option$HiddenGroup DIAGS -> DIAGS
    org.openjdk.tools.javac.main.Option$HiddenGroup DEBUG -> DEBUG
    org.openjdk.tools.javac.main.Option$HiddenGroup SHOULDSTOP -> SHOULDSTOP
    java.util.Set skipSet -> skipSet
    java.lang.String text -> text
    org.openjdk.tools.javac.main.Option$HiddenGroup[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.Option$HiddenGroup[] values() -> values
    org.openjdk.tools.javac.main.Option$HiddenGroup valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void process(org.openjdk.tools.javac.main.OptionHelper,java.lang.String) -> process
    boolean skip(java.lang.String) -> skip
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Option$InvalidValueException -> org.openjdk.tools.javac.main.Option$InvalidValueException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.openjdk.tools.javac.main.Option$OptionGroup -> org.openjdk.tools.javac.main.Option$OptionGroup:
    org.openjdk.tools.javac.main.Option$OptionGroup BASIC -> BASIC
    org.openjdk.tools.javac.main.Option$OptionGroup FILEMANAGER -> FILEMANAGER
    org.openjdk.tools.javac.main.Option$OptionGroup INFO -> INFO
    org.openjdk.tools.javac.main.Option$OptionGroup OPERAND -> OPERAND
    org.openjdk.tools.javac.main.Option$OptionGroup[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.Option$OptionGroup[] values() -> values
    org.openjdk.tools.javac.main.Option$OptionGroup valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Option$OptionKind -> org.openjdk.tools.javac.main.Option$OptionKind:
    org.openjdk.tools.javac.main.Option$OptionKind STANDARD -> STANDARD
    org.openjdk.tools.javac.main.Option$OptionKind EXTENDED -> EXTENDED
    org.openjdk.tools.javac.main.Option$OptionKind HIDDEN -> HIDDEN
    org.openjdk.tools.javac.main.Option$OptionKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.Option$OptionKind[] values() -> values
    org.openjdk.tools.javac.main.Option$OptionKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.Option$PkgInfo -> org.openjdk.tools.javac.main.Option$PkgInfo:
    org.openjdk.tools.javac.main.Option$PkgInfo ALWAYS -> ALWAYS
    org.openjdk.tools.javac.main.Option$PkgInfo LEGACY -> LEGACY
    org.openjdk.tools.javac.main.Option$PkgInfo NONEMPTY -> NONEMPTY
    org.openjdk.tools.javac.main.Option$PkgInfo[] $VALUES -> $VALUES
    org.openjdk.tools.javac.main.Option$PkgInfo[] values() -> values
    org.openjdk.tools.javac.main.Option$PkgInfo valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.main.Option$PkgInfo get(org.openjdk.tools.javac.util.Options) -> get
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.main.OptionHelper -> org.openjdk.tools.javac.main.OptionHelper:
    void <init>() -> <init>
    java.lang.String get(org.openjdk.tools.javac.main.Option) -> get
    void put(java.lang.String,java.lang.String) -> put
    void remove(java.lang.String) -> remove
    boolean handleFileManagerOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleFileManagerOption
    org.openjdk.tools.javac.util.Log getLog() -> getLog
    java.lang.String getOwnName() -> getOwnName
    org.openjdk.tools.javac.main.Option$InvalidValueException newInvalidValueException(java.lang.String,java.lang.Object[]) -> newInvalidValueException
    void addFile(java.nio.file.Path) -> addFile
    void addClassName(java.lang.String) -> addClassName
org.openjdk.tools.javac.main.OptionHelper$GrumpyHelper -> org.openjdk.tools.javac.main.OptionHelper$GrumpyHelper:
    org.openjdk.tools.javac.util.Log log -> log
    void <init>(org.openjdk.tools.javac.util.Log) -> <init>
    org.openjdk.tools.javac.util.Log getLog() -> getLog
    java.lang.String getOwnName() -> getOwnName
    java.lang.String get(org.openjdk.tools.javac.main.Option) -> get
    void put(java.lang.String,java.lang.String) -> put
    void remove(java.lang.String) -> remove
    boolean handleFileManagerOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> handleFileManagerOption
    void addFile(java.nio.file.Path) -> addFile
    void addClassName(java.lang.String) -> addClassName
org.openjdk.tools.javac.model.AnnotationProxyMaker -> org.openjdk.tools.javac.model.AnnotationProxyMaker:
    org.openjdk.tools.javac.code.Attribute$Compound anno -> anno
    java.lang.Class annoType -> annoType
    void <init>(org.openjdk.tools.javac.code.Attribute$Compound,java.lang.Class) -> <init>
    java.lang.annotation.Annotation generateAnnotation(org.openjdk.tools.javac.code.Attribute$Compound,java.lang.Class) -> generateAnnotation
    java.lang.annotation.Annotation generateAnnotation() -> generateAnnotation
    java.util.Map getAllReflectedValues() -> getAllReflectedValues
    java.util.Map getAllValues() -> getAllValues
    java.lang.Object generateValue(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Attribute) -> generateValue
    java.lang.Class access$000(org.openjdk.tools.javac.model.AnnotationProxyMaker) -> access$000
org.openjdk.tools.javac.model.AnnotationProxyMaker$MirroredTypeExceptionProxy -> org.openjdk.tools.javac.model.AnnotationProxyMaker$MirroredTypeExceptionProxy:
    long serialVersionUID -> serialVersionUID
    org.openjdk.javax.lang.model.type.TypeMirror type -> type
    java.lang.String typeString -> typeString
    void <init>(org.openjdk.javax.lang.model.type.TypeMirror) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.RuntimeException generateException() -> generateException
    void readObject(java.io.ObjectInputStream) -> readObject
org.openjdk.tools.javac.model.AnnotationProxyMaker$MirroredTypesExceptionProxy -> org.openjdk.tools.javac.model.AnnotationProxyMaker$MirroredTypesExceptionProxy:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.util.List types -> types
    java.lang.String typeStrings -> typeStrings
    void <init>(org.openjdk.tools.javac.util.List) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.RuntimeException generateException() -> generateException
    void readObject(java.io.ObjectInputStream) -> readObject
org.openjdk.tools.javac.model.AnnotationProxyMaker$ValueVisitor -> org.openjdk.tools.javac.model.AnnotationProxyMaker$ValueVisitor:
    org.openjdk.tools.javac.code.Symbol$MethodSymbol meth -> meth
    java.lang.Class returnClass -> returnClass
    java.lang.Object value -> value
    org.openjdk.tools.javac.model.AnnotationProxyMaker this$0 -> this$0
    void <init>(org.openjdk.tools.javac.model.AnnotationProxyMaker,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> <init>
    java.lang.Object getValue(org.openjdk.tools.javac.code.Attribute) -> getValue
    void visitConstant(org.openjdk.tools.javac.code.Attribute$Constant) -> visitConstant
    void visitClass(org.openjdk.tools.javac.code.Attribute$Class) -> visitClass
    void visitArray(org.openjdk.tools.javac.code.Attribute$Array) -> visitArray
    void visitEnum(org.openjdk.tools.javac.code.Attribute$Enum) -> visitEnum
    void visitCompound(org.openjdk.tools.javac.code.Attribute$Compound) -> visitCompound
    void visitError(org.openjdk.tools.javac.code.Attribute$Error) -> visitError
    void typeMismatch(java.lang.reflect.Method,org.openjdk.tools.javac.code.Attribute) -> typeMismatch
org.openjdk.tools.javac.model.AnnotationProxyMaker$ValueVisitor$1AnnotationTypeMismatchExceptionProxy -> org.openjdk.tools.javac.model.AnnotationProxyMaker$ValueVisitor$1AnnotationTypeMismatchExceptionProxy:
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Method method -> method
    org.openjdk.tools.javac.code.Attribute val$attr -> val$attr
    org.openjdk.tools.javac.model.AnnotationProxyMaker$ValueVisitor this$1 -> this$1
    void <init>(org.openjdk.tools.javac.model.AnnotationProxyMaker$ValueVisitor,java.lang.reflect.Method,org.openjdk.tools.javac.code.Attribute) -> <init>
    java.lang.String toString() -> toString
    java.lang.RuntimeException generateException() -> generateException
org.openjdk.tools.javac.model.FilteredMemberList -> org.openjdk.tools.javac.model.FilteredMemberList:
    org.openjdk.tools.javac.code.Scope scope -> scope
    void <init>(org.openjdk.tools.javac.code.Scope) -> <init>
    int size() -> size
    org.openjdk.tools.javac.code.Symbol get(int) -> get
    java.util.Iterator iterator() -> iterator
    boolean unwanted(org.openjdk.tools.javac.code.Symbol) -> unwanted
    java.lang.Object get(int) -> get
    boolean lambda$iterator$0(org.openjdk.tools.javac.code.Symbol) -> lambda$iterator$0
org.openjdk.tools.javac.model.JavacElements -> org.openjdk.tools.javac.model.JavacElements:
    org.openjdk.tools.javac.main.JavaCompiler javaCompiler -> javaCompiler
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.comp.Modules modules -> modules
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.comp.Resolve resolve -> resolve
    org.openjdk.tools.javac.api.JavacTaskImpl javacTaskImpl -> javacTaskImpl
    org.openjdk.tools.javac.util.Log log -> log
    boolean allowModules -> allowModules
    java.util.Set alreadyWarnedDuplicates -> alreadyWarnedDuplicates
    org.openjdk.tools.javac.model.JavacElements instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.util.Set getAllModuleElements() -> getAllModuleElements
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol getModuleElement(java.lang.CharSequence) -> getModuleElement
    org.openjdk.tools.javac.code.Symbol$PackageSymbol getPackageElement(java.lang.CharSequence) -> getPackageElement
    org.openjdk.tools.javac.code.Symbol$PackageSymbol getPackageElement(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.CharSequence) -> getPackageElement
    org.openjdk.tools.javac.code.Symbol$PackageSymbol doGetPackageElement(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.CharSequence) -> doGetPackageElement
    org.openjdk.tools.javac.code.Symbol$ClassSymbol getTypeElement(java.lang.CharSequence) -> getTypeElement
    org.openjdk.tools.javac.code.Symbol$ClassSymbol getTypeElement(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.CharSequence) -> getTypeElement
    org.openjdk.tools.javac.code.Symbol$ClassSymbol doGetTypeElement(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.CharSequence) -> doGetTypeElement
    org.openjdk.tools.javac.code.Symbol doGetElement(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.String,java.lang.CharSequence,java.lang.Class) -> doGetElement
    org.openjdk.tools.javac.code.Symbol unboundNameToSymbol(java.lang.String,java.lang.String,java.lang.Class) -> unboundNameToSymbol
    org.openjdk.tools.javac.code.Symbol nameToSymbol(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String,java.lang.Class) -> nameToSymbol
    org.openjdk.tools.javac.tree.JCTree matchAnnoToTree(org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.Element,org.openjdk.tools.javac.tree.JCTree) -> matchAnnoToTree
    org.openjdk.tools.javac.tree.JCTree matchAnnoToTree(org.openjdk.tools.javac.code.Attribute$Compound,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> matchAnnoToTree
    org.openjdk.tools.javac.tree.JCTree matchAttributeToTree(org.openjdk.tools.javac.code.Attribute,org.openjdk.tools.javac.code.Attribute,org.openjdk.tools.javac.tree.JCTree) -> matchAttributeToTree
    org.openjdk.tools.javac.tree.JCTree$JCExpression scanForAssign(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.tree.JCTree) -> scanForAssign
    org.openjdk.tools.javac.tree.JCTree getTree(org.openjdk.javax.lang.model.element.Element) -> getTree
    java.lang.String getDocComment(org.openjdk.javax.lang.model.element.Element) -> getDocComment
    org.openjdk.javax.lang.model.element.PackageElement getPackageOf(org.openjdk.javax.lang.model.element.Element) -> getPackageOf
    org.openjdk.javax.lang.model.element.ModuleElement getModuleOf(org.openjdk.javax.lang.model.element.Element) -> getModuleOf
    boolean isDeprecated(org.openjdk.javax.lang.model.element.Element) -> isDeprecated
    org.openjdk.javax.lang.model.util.Elements$Origin getOrigin(org.openjdk.javax.lang.model.element.Element) -> getOrigin
    org.openjdk.javax.lang.model.util.Elements$Origin getOrigin(org.openjdk.javax.lang.model.AnnotatedConstruct,org.openjdk.javax.lang.model.element.AnnotationMirror) -> getOrigin
    org.openjdk.javax.lang.model.util.Elements$Origin getOrigin(org.openjdk.javax.lang.model.element.ModuleElement,org.openjdk.javax.lang.model.element.ModuleElement$Directive) -> getOrigin
    org.openjdk.tools.javac.util.Name getBinaryName(org.openjdk.javax.lang.model.element.TypeElement) -> getBinaryName
    java.util.Map getElementValuesWithDefaults(org.openjdk.javax.lang.model.element.AnnotationMirror) -> getElementValuesWithDefaults
    org.openjdk.tools.javac.model.FilteredMemberList getAllMembers(org.openjdk.javax.lang.model.element.TypeElement) -> getAllMembers
    void addMembers(org.openjdk.tools.javac.code.Scope$WriteableScope,org.openjdk.tools.javac.code.Type) -> addMembers
    org.openjdk.tools.javac.util.List getAllAnnotationMirrors(org.openjdk.javax.lang.model.element.Element) -> getAllAnnotationMirrors
    boolean isInherited(org.openjdk.tools.javac.code.Type) -> isInherited
    boolean containsAnnoOfType(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Type) -> containsAnnoOfType
    boolean hides(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.Element) -> hides
    boolean overrides(org.openjdk.javax.lang.model.element.ExecutableElement,org.openjdk.javax.lang.model.element.ExecutableElement,org.openjdk.javax.lang.model.element.TypeElement) -> overrides
    java.lang.String getConstantExpression(java.lang.Object) -> getConstantExpression
    void printElements(java.io.Writer,org.openjdk.javax.lang.model.element.Element[]) -> printElements
    org.openjdk.tools.javac.util.Name getName(java.lang.CharSequence) -> getName
    boolean isFunctionalInterface(org.openjdk.javax.lang.model.element.TypeElement) -> isFunctionalInterface
    org.openjdk.tools.javac.util.Pair getTreeAndTopLevel(org.openjdk.javax.lang.model.element.Element) -> getTreeAndTopLevel
    org.openjdk.tools.javac.util.Pair getTreeAndTopLevel(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.AnnotationValue) -> getTreeAndTopLevel
    org.openjdk.tools.javac.comp.Env getEnterEnv(org.openjdk.tools.javac.code.Symbol) -> getEnterEnv
    void ensureEntered(java.lang.String) -> ensureEntered
    java.lang.Object cast(java.lang.Class,java.lang.Object) -> cast
    org.openjdk.javax.lang.model.element.Name getName(java.lang.CharSequence) -> getName
    java.util.List getAllAnnotationMirrors(org.openjdk.javax.lang.model.element.Element) -> getAllAnnotationMirrors
    java.util.List getAllMembers(org.openjdk.javax.lang.model.element.TypeElement) -> getAllMembers
    org.openjdk.javax.lang.model.element.Name getBinaryName(org.openjdk.javax.lang.model.element.TypeElement) -> getBinaryName
    org.openjdk.javax.lang.model.element.ModuleElement getModuleElement(java.lang.CharSequence) -> getModuleElement
    org.openjdk.javax.lang.model.element.TypeElement getTypeElement(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.CharSequence) -> getTypeElement
    org.openjdk.javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence) -> getTypeElement
    org.openjdk.javax.lang.model.element.PackageElement getPackageElement(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.CharSequence) -> getPackageElement
    org.openjdk.javax.lang.model.element.PackageElement getPackageElement(java.lang.CharSequence) -> getPackageElement
    java.lang.String lambda$unboundNameToSymbol$1(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$unboundNameToSymbol$1
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol lambda$unboundNameToSymbol$0(org.openjdk.tools.javac.code.Symbol) -> lambda$unboundNameToSymbol$0
    org.openjdk.tools.javac.tree.JCTree$JCExpression access$000(org.openjdk.tools.javac.model.JavacElements,org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.tree.JCTree) -> access$000
    org.openjdk.tools.javac.tree.JCTree access$100(org.openjdk.tools.javac.model.JavacElements,org.openjdk.tools.javac.code.Attribute,org.openjdk.tools.javac.code.Attribute,org.openjdk.tools.javac.tree.JCTree) -> access$100
org.openjdk.tools.javac.model.JavacElements$1 -> org.openjdk.tools.javac.model.JavacElements$1:
    int[] $SwitchMap$javax$lang$model$element$ModuleElement$DirectiveKind -> $SwitchMap$javax$lang$model$element$ModuleElement$DirectiveKind
    int[] $SwitchMap$com$sun$tools$javac$code$Kinds$Kind -> $SwitchMap$com$sun$tools$javac$code$Kinds$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.model.JavacElements$1TS -> org.openjdk.tools.javac.model.JavacElements$1TS:
    org.openjdk.tools.javac.tree.JCTree$JCExpression result -> result
    org.openjdk.tools.javac.tree.JCTree val$tree -> val$tree
    org.openjdk.tools.javac.code.Symbol$MethodSymbol val$sym -> val$sym
    org.openjdk.tools.javac.model.JavacElements this$0 -> this$0
    void <init>(org.openjdk.tools.javac.model.JavacElements,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
org.openjdk.tools.javac.model.JavacElements$1Vis -> org.openjdk.tools.javac.model.JavacElements$1Vis:
    org.openjdk.tools.javac.util.List result -> result
    org.openjdk.tools.javac.model.JavacElements this$0 -> this$0
    void <init>(org.openjdk.tools.javac.model.JavacElements) -> <init>
    void visitPackageDef(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> visitPackageDef
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
org.openjdk.tools.javac.model.JavacElements$2Vis -> org.openjdk.tools.javac.model.JavacElements$2Vis:
    org.openjdk.tools.javac.tree.JCTree result -> result
    org.openjdk.tools.javac.tree.JCTree val$tree -> val$tree
    org.openjdk.tools.javac.code.Attribute val$findme -> val$findme
    org.openjdk.tools.javac.model.JavacElements this$0 -> this$0
    void <init>(org.openjdk.tools.javac.model.JavacElements,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Attribute) -> <init>
    void visitConstant(org.openjdk.tools.javac.code.Attribute$Constant) -> visitConstant
    void visitClass(org.openjdk.tools.javac.code.Attribute$Class) -> visitClass
    void visitCompound(org.openjdk.tools.javac.code.Attribute$Compound) -> visitCompound
    void visitArray(org.openjdk.tools.javac.code.Attribute$Array) -> visitArray
    void visitEnum(org.openjdk.tools.javac.code.Attribute$Enum) -> visitEnum
    void visitError(org.openjdk.tools.javac.code.Attribute$Error) -> visitError
org.openjdk.tools.javac.model.JavacTypes -> org.openjdk.tools.javac.model.JavacTypes:
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Types types -> types
    java.util.Set EXEC_OR_PKG_OR_MOD -> EXEC_OR_PKG_OR_MOD
    org.openjdk.tools.javac.model.JavacTypes instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.javax.lang.model.element.Element asElement(org.openjdk.javax.lang.model.type.TypeMirror) -> asElement
    boolean isSameType(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> isSameType
    boolean isSubtype(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> isSubtype
    boolean isAssignable(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> isAssignable
    boolean contains(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> contains
    boolean isSubsignature(org.openjdk.javax.lang.model.type.ExecutableType,org.openjdk.javax.lang.model.type.ExecutableType) -> isSubsignature
    java.util.List directSupertypes(org.openjdk.javax.lang.model.type.TypeMirror) -> directSupertypes
    org.openjdk.javax.lang.model.type.TypeMirror erasure(org.openjdk.javax.lang.model.type.TypeMirror) -> erasure
    org.openjdk.javax.lang.model.element.TypeElement boxedClass(org.openjdk.javax.lang.model.type.PrimitiveType) -> boxedClass
    org.openjdk.javax.lang.model.type.PrimitiveType unboxedType(org.openjdk.javax.lang.model.type.TypeMirror) -> unboxedType
    org.openjdk.javax.lang.model.type.TypeMirror capture(org.openjdk.javax.lang.model.type.TypeMirror) -> capture
    org.openjdk.javax.lang.model.type.PrimitiveType getPrimitiveType(org.openjdk.javax.lang.model.type.TypeKind) -> getPrimitiveType
    org.openjdk.javax.lang.model.type.NullType getNullType() -> getNullType
    org.openjdk.javax.lang.model.type.NoType getNoType(org.openjdk.javax.lang.model.type.TypeKind) -> getNoType
    org.openjdk.javax.lang.model.type.ArrayType getArrayType(org.openjdk.javax.lang.model.type.TypeMirror) -> getArrayType
    org.openjdk.javax.lang.model.type.WildcardType getWildcardType(org.openjdk.javax.lang.model.type.TypeMirror,org.openjdk.javax.lang.model.type.TypeMirror) -> getWildcardType
    org.openjdk.javax.lang.model.type.DeclaredType getDeclaredType(org.openjdk.javax.lang.model.element.TypeElement,org.openjdk.javax.lang.model.type.TypeMirror[]) -> getDeclaredType
    org.openjdk.javax.lang.model.type.DeclaredType getDeclaredType(org.openjdk.javax.lang.model.type.DeclaredType,org.openjdk.javax.lang.model.element.TypeElement,org.openjdk.javax.lang.model.type.TypeMirror[]) -> getDeclaredType
    org.openjdk.javax.lang.model.type.DeclaredType getDeclaredType0(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.javax.lang.model.type.TypeMirror[]) -> getDeclaredType0
    org.openjdk.javax.lang.model.type.TypeMirror asMemberOf(org.openjdk.javax.lang.model.type.DeclaredType,org.openjdk.javax.lang.model.element.Element) -> asMemberOf
    void validateTypeNotIn(org.openjdk.javax.lang.model.type.TypeMirror,java.util.Set) -> validateTypeNotIn
    java.lang.Object cast(java.lang.Class,java.lang.Object) -> cast
    java.util.Set getOverriddenMethods(org.openjdk.javax.lang.model.element.Element) -> getOverriddenMethods
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.model.JavacTypes$1 -> org.openjdk.tools.javac.model.JavacTypes$1:
    int[] $SwitchMap$javax$lang$model$type$TypeKind -> $SwitchMap$javax$lang$model$type$TypeKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.DocCommentParser -> org.openjdk.tools.javac.parser.DocCommentParser:
    org.openjdk.tools.javac.parser.ParserFactory fac -> fac
    org.openjdk.tools.javac.util.DiagnosticSource diagSource -> diagSource
    org.openjdk.tools.javac.parser.Tokens$Comment comment -> comment
    org.openjdk.tools.javac.tree.DocTreeMaker m -> m
    org.openjdk.tools.javac.util.Names names -> names
    java.text.BreakIterator sentenceBreaker -> sentenceBreaker
    char[] buf -> buf
    int bp -> bp
    int buflen -> buflen
    char ch -> ch
    int textStart -> textStart
    int lastNonWhite -> lastNonWhite
    boolean newline -> newline
    java.util.Map tagParsers -> tagParsers
    void <init>(org.openjdk.tools.javac.parser.ParserFactory,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.parser.Tokens$Comment) -> <init>
    void <init>(org.openjdk.tools.javac.parser.ParserFactory) -> <init>
    org.openjdk.tools.javac.tree.DCTree$DCDocComment parse() -> parse
    void nextChar() -> nextChar
    org.openjdk.tools.javac.util.List blockContent() -> blockContent
    org.openjdk.tools.javac.util.List blockTags() -> blockTags
    org.openjdk.tools.javac.tree.DCTree blockTag() -> blockTag
    void inlineTag(org.openjdk.tools.javac.util.ListBuffer) -> inlineTag
    org.openjdk.tools.javac.tree.DCTree inlineTag() -> inlineTag
    org.openjdk.tools.javac.tree.DCTree inlineText(org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy) -> inlineText
    org.openjdk.tools.javac.tree.DCTree$DCReference reference(boolean) -> reference
    org.openjdk.tools.javac.tree.JCTree parseType(java.lang.String) -> parseType
    org.openjdk.tools.javac.util.Name parseMember(java.lang.String) -> parseMember
    org.openjdk.tools.javac.util.List parseParams(java.lang.String) -> parseParams
    org.openjdk.tools.javac.tree.DCTree$DCIdentifier identifier() -> identifier
    org.openjdk.tools.javac.tree.DCTree$DCText quotedString() -> quotedString
    org.openjdk.tools.javac.tree.DCTree$DCText inlineWord() -> inlineWord
    org.openjdk.tools.javac.util.List inlineContent() -> inlineContent
    void entity(org.openjdk.tools.javac.util.ListBuffer) -> entity
    org.openjdk.tools.javac.tree.DCTree entity() -> entity
    org.openjdk.tools.javac.tree.DCTree html() -> html
    org.openjdk.tools.javac.util.List htmlAttrs() -> htmlAttrs
    void attrValueChar(org.openjdk.tools.javac.util.ListBuffer) -> attrValueChar
    void addPendingText(org.openjdk.tools.javac.util.ListBuffer,int) -> addPendingText
    org.openjdk.tools.javac.tree.DCTree$DCErroneous erroneous(java.lang.String,int) -> erroneous
    boolean isIdentifierStart(char) -> isIdentifierStart
    org.openjdk.tools.javac.util.Name readIdentifier() -> readIdentifier
    org.openjdk.tools.javac.util.Name readAttributeName() -> readAttributeName
    org.openjdk.tools.javac.util.Name readTagName() -> readTagName
    boolean isJavaIdentifierStart(char) -> isJavaIdentifierStart
    org.openjdk.tools.javac.util.Name readJavaIdentifier() -> readJavaIdentifier
    boolean isDecimalDigit(char) -> isDecimalDigit
    boolean isHexDigit(char) -> isHexDigit
    boolean isUnquotedAttrValueTerminator(char) -> isUnquotedAttrValueTerminator
    boolean isWhitespace(char) -> isWhitespace
    void skipWhitespace() -> skipWhitespace
    java.lang.String newString(int,int) -> newString
    void initTagParsers() -> initTagParsers
    org.openjdk.tools.javac.tree.DCTree access$000(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy) -> access$000
    org.openjdk.tools.javac.util.List access$100(org.openjdk.tools.javac.parser.DocCommentParser) -> access$100
org.openjdk.tools.javac.parser.DocCommentParser$1 -> org.openjdk.tools.javac.parser.DocCommentParser$1:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$10 -> org.openjdk.tools.javac.parser.DocCommentParser$10:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$11 -> org.openjdk.tools.javac.parser.DocCommentParser$11:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind,boolean) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$12 -> org.openjdk.tools.javac.parser.DocCommentParser$12:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$13 -> org.openjdk.tools.javac.parser.DocCommentParser$13:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$14 -> org.openjdk.tools.javac.parser.DocCommentParser$14:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$15 -> org.openjdk.tools.javac.parser.DocCommentParser$15:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$16 -> org.openjdk.tools.javac.parser.DocCommentParser$16:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$17 -> org.openjdk.tools.javac.parser.DocCommentParser$17:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$18 -> org.openjdk.tools.javac.parser.DocCommentParser$18:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$19 -> org.openjdk.tools.javac.parser.DocCommentParser$19:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$2 -> org.openjdk.tools.javac.parser.DocCommentParser$2:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind,boolean) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$20 -> org.openjdk.tools.javac.parser.DocCommentParser$20:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$21 -> org.openjdk.tools.javac.parser.DocCommentParser$21:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$22 -> org.openjdk.tools.javac.parser.DocCommentParser$22:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$23 -> org.openjdk.tools.javac.parser.DocCommentParser$23:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$24 -> org.openjdk.tools.javac.parser.DocCommentParser$24:
    int[] $SwitchMap$com$sun$tools$javac$parser$DocCommentParser$TagParser$Kind -> $SwitchMap$com$sun$tools$javac$parser$DocCommentParser$TagParser$Kind
    int[] $SwitchMap$com$sun$tools$javac$parser$DocCommentParser$WhitespaceRetentionPolicy -> $SwitchMap$com$sun$tools$javac$parser$DocCommentParser$WhitespaceRetentionPolicy
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.DocCommentParser$3 -> org.openjdk.tools.javac.parser.DocCommentParser$3:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$4 -> org.openjdk.tools.javac.parser.DocCommentParser$4:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$5 -> org.openjdk.tools.javac.parser.DocCommentParser$5:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$6 -> org.openjdk.tools.javac.parser.DocCommentParser$6:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$7 -> org.openjdk.tools.javac.parser.DocCommentParser$7:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$8 -> org.openjdk.tools.javac.parser.DocCommentParser$8:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$9 -> org.openjdk.tools.javac.parser.DocCommentParser$9:
    org.openjdk.tools.javac.parser.DocCommentParser this$0 -> this$0
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser,org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$ParseException -> org.openjdk.tools.javac.parser.DocCommentParser$ParseException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.javac.parser.DocCommentParser$TagParser -> org.openjdk.tools.javac.parser.DocCommentParser$TagParser:
    org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind kind -> kind
    org.openjdk.source.doctree.DocTree$Kind treeKind -> treeKind
    boolean retainWhiteSpace -> retainWhiteSpace
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind) -> <init>
    void <init>(org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind,org.openjdk.source.doctree.DocTree$Kind,boolean) -> <init>
    org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind getKind() -> getKind
    org.openjdk.source.doctree.DocTree$Kind getTreeKind() -> getTreeKind
    org.openjdk.tools.javac.tree.DCTree parse(int) -> parse
org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind -> org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind:
    org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind INLINE -> INLINE
    org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind BLOCK -> BLOCK
    org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind[] values() -> values
    org.openjdk.tools.javac.parser.DocCommentParser$TagParser$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy -> org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy:
    org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy RETAIN_ALL -> RETAIN_ALL
    org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy REMOVE_FIRST_SPACE -> REMOVE_FIRST_SPACE
    org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy REMOVE_ALL -> REMOVE_ALL
    org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy[] $VALUES -> $VALUES
    org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy[] values() -> values
    org.openjdk.tools.javac.parser.DocCommentParser$WhitespaceRetentionPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.JavaTokenizer -> org.openjdk.tools.javac.parser.JavaTokenizer:
    boolean scannerDebug -> scannerDebug
    boolean allowBinaryLiterals -> allowBinaryLiterals
    boolean allowUnderscoresInLiterals -> allowUnderscoresInLiterals
    org.openjdk.tools.javac.code.Source source -> source
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.parser.Tokens tokens -> tokens
    org.openjdk.tools.javac.parser.Tokens$TokenKind tk -> tk
    int radix -> radix
    org.openjdk.tools.javac.util.Name name -> name
    int errPos -> errPos
    org.openjdk.tools.javac.parser.UnicodeReader reader -> reader
    org.openjdk.tools.javac.parser.ScannerFactory fac -> fac
    boolean hexFloatsWork -> hexFloatsWork
    boolean hexFloatsWork() -> hexFloatsWork
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,java.nio.CharBuffer) -> <init>
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,char[],int) -> <init>
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,org.openjdk.tools.javac.parser.UnicodeReader) -> <init>
    void lexError(int,java.lang.String,java.lang.Object[]) -> lexError
    void scanLitChar(int) -> scanLitChar
    void scanDigits(int,int) -> scanDigits
    void scanHexExponentAndSuffix(int) -> scanHexExponentAndSuffix
    void scanFraction(int) -> scanFraction
    void scanFractionAndSuffix(int) -> scanFractionAndSuffix
    void scanHexFractionAndSuffix(int,boolean) -> scanHexFractionAndSuffix
    void skipIllegalUnderscores() -> skipIllegalUnderscores
    void scanNumber(int,int) -> scanNumber
    void scanIdent() -> scanIdent
    boolean isSpecial(char) -> isSpecial
    void scanOperator() -> scanOperator
    org.openjdk.tools.javac.parser.Tokens$Token readToken() -> readToken
    org.openjdk.tools.javac.util.List addComment(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.parser.Tokens$Comment) -> addComment
    int errPos() -> errPos
    void errPos(int) -> errPos
    org.openjdk.tools.javac.parser.Tokens$Comment processComment(int,int,org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle) -> processComment
    void processWhiteSpace(int,int) -> processWhiteSpace
    void processLineTerminator(int,int) -> processLineTerminator
    org.openjdk.tools.javac.util.Position$LineMap getLineMap() -> getLineMap
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.JavaTokenizer$1 -> org.openjdk.tools.javac.parser.JavaTokenizer$1:
    int[] $SwitchMap$com$sun$tools$javac$parser$Tokens$Token$Tag -> $SwitchMap$com$sun$tools$javac$parser$Tokens$Token$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.JavaTokenizer$BasicComment -> org.openjdk.tools.javac.parser.JavaTokenizer$BasicComment:
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle cs -> cs
    org.openjdk.tools.javac.parser.UnicodeReader comment_reader -> comment_reader
    boolean deprecatedFlag -> deprecatedFlag
    boolean scanned -> scanned
    void <init>(org.openjdk.tools.javac.parser.UnicodeReader,org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle) -> <init>
    java.lang.String getText() -> getText
    int getSourcePos(int) -> getSourcePos
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle getStyle() -> getStyle
    boolean isDeprecated() -> isDeprecated
    void scanDocComment() -> scanDocComment
org.openjdk.tools.javac.parser.JavacParser -> org.openjdk.tools.javac.parser.JavacParser:
    int infixPrecedenceLevels -> infixPrecedenceLevels
    boolean parseModuleInfo -> parseModuleInfo
    org.openjdk.tools.javac.parser.Lexer S -> S
    org.openjdk.tools.javac.tree.TreeMaker F -> F
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.code.Source source -> source
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.parser.JavacParser$AbstractEndPosTable endPosTable -> endPosTable
    org.openjdk.tools.javac.util.List typeAnnotationsPushedBack -> typeAnnotationsPushedBack
    boolean permitTypeAnnotationsPushBack -> permitTypeAnnotationsPushBack
    boolean allowDiamond -> allowDiamond
    boolean allowMulticatch -> allowMulticatch
    boolean allowTWR -> allowTWR
    boolean allowEffectivelyFinalVariablesInTWR -> allowEffectivelyFinalVariablesInTWR
    boolean allowStringFolding -> allowStringFolding
    boolean allowLambda -> allowLambda
    boolean allowMethodReferences -> allowMethodReferences
    boolean allowModules -> allowModules
    boolean allowDefaultMethods -> allowDefaultMethods
    boolean allowStaticInterfaceMethods -> allowStaticInterfaceMethods
    boolean allowPrivateInterfaceMethods -> allowPrivateInterfaceMethods
    boolean allowIntersectionTypesInCast -> allowIntersectionTypesInCast
    boolean keepDocComments -> keepDocComments
    boolean keepLineMap -> keepLineMap
    boolean allowTypeAnnotations -> allowTypeAnnotations
    boolean allowAnnotationsAfterTypeParams -> allowAnnotationsAfterTypeParams
    boolean allowUnderscoreIdentifier -> allowUnderscoreIdentifier
    boolean allowThisIdent -> allowThisIdent
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl receiverParam -> receiverParam
    int EXPR -> EXPR
    int TYPE -> TYPE
    int NOPARAMS -> NOPARAMS
    int TYPEARG -> TYPEARG
    int DIAMOND -> DIAMOND
    int mode -> mode
    int lastmode -> lastmode
    org.openjdk.tools.javac.parser.Tokens$Token token -> token
    org.openjdk.tools.javac.tree.JCTree$JCErroneous errorTree -> errorTree
    int RECOVERY_THRESHOLD -> RECOVERY_THRESHOLD
    int errorPos -> errorPos
    int count -> count
    org.openjdk.tools.javac.tree.DocCommentTable docComments -> docComments
    java.util.ArrayList odStackSupply -> odStackSupply
    java.util.ArrayList opStackSupply -> opStackSupply
    org.openjdk.tools.javac.util.Filter LAX_IDENTIFIER -> LAX_IDENTIFIER
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(org.openjdk.tools.javac.parser.ParserFactory,org.openjdk.tools.javac.parser.Lexer,boolean,boolean,boolean) -> <init>
    void <init>(org.openjdk.tools.javac.parser.ParserFactory,org.openjdk.tools.javac.parser.Lexer,boolean,boolean,boolean,boolean) -> <init>
    org.openjdk.tools.javac.parser.JavacParser$AbstractEndPosTable newEndPosTable(boolean) -> newEndPosTable
    org.openjdk.tools.javac.tree.DocCommentTable newDocCommentTable(boolean,org.openjdk.tools.javac.parser.ParserFactory) -> newDocCommentTable
    org.openjdk.tools.javac.parser.Tokens$Token token() -> token
    void nextToken() -> nextToken
    boolean peekToken(org.openjdk.tools.javac.util.Filter) -> peekToken
    boolean peekToken(int,org.openjdk.tools.javac.util.Filter) -> peekToken
    boolean peekToken(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.util.Filter) -> peekToken
    boolean peekToken(int,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.util.Filter) -> peekToken
    boolean peekToken(org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.util.Filter) -> peekToken
    boolean peekToken(int,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.util.Filter,org.openjdk.tools.javac.util.Filter) -> peekToken
    boolean peekToken(org.openjdk.tools.javac.util.Filter[]) -> peekToken
    boolean peekToken(int,org.openjdk.tools.javac.util.Filter[]) -> peekToken
    void skip(boolean,boolean,boolean,boolean) -> skip
    org.openjdk.tools.javac.tree.JCTree$JCErroneous syntaxError(int,java.lang.String,org.openjdk.tools.javac.parser.Tokens$TokenKind[]) -> syntaxError
    org.openjdk.tools.javac.tree.JCTree$JCErroneous syntaxError(int,org.openjdk.tools.javac.util.List,java.lang.String,org.openjdk.tools.javac.parser.Tokens$TokenKind[]) -> syntaxError
    void reportSyntaxError(int,java.lang.String,java.lang.Object[]) -> reportSyntaxError
    void reportSyntaxError(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> reportSyntaxError
    org.openjdk.tools.javac.tree.JCTree$JCErroneous syntaxError(java.lang.String) -> syntaxError
    org.openjdk.tools.javac.tree.JCTree$JCErroneous syntaxError(java.lang.String,org.openjdk.tools.javac.parser.Tokens$TokenKind) -> syntaxError
    void accept(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> accept
    org.openjdk.tools.javac.tree.JCTree$JCExpression illegal(int) -> illegal
    org.openjdk.tools.javac.tree.JCTree$JCExpression illegal() -> illegal
    void checkNoMods(long) -> checkNoMods
    void attach(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.parser.Tokens$Comment) -> attach
    void setErrorEndPos(int) -> setErrorEndPos
    void storeEnd(org.openjdk.tools.javac.tree.JCTree,int) -> storeEnd
    org.openjdk.tools.javac.tree.JCTree to(org.openjdk.tools.javac.tree.JCTree) -> to
    org.openjdk.tools.javac.tree.JCTree toP(org.openjdk.tools.javac.tree.JCTree) -> toP
    int getStartPos(org.openjdk.tools.javac.tree.JCTree) -> getStartPos
    int getEndPos(org.openjdk.tools.javac.tree.JCTree) -> getEndPos
    org.openjdk.tools.javac.util.Name ident() -> ident
    org.openjdk.tools.javac.util.Name ident(boolean) -> ident
    org.openjdk.tools.javac.tree.JCTree$JCExpression qualident(boolean) -> qualident
    org.openjdk.tools.javac.tree.JCTree$JCExpression literal(org.openjdk.tools.javac.util.Name) -> literal
    org.openjdk.tools.javac.tree.JCTree$JCExpression literal(org.openjdk.tools.javac.util.Name,int) -> literal
    boolean isZero(java.lang.String) -> isZero
    java.lang.String strval(org.openjdk.tools.javac.util.Name) -> strval
    org.openjdk.tools.javac.tree.JCTree$JCExpression parseExpression() -> parseExpression
    org.openjdk.tools.javac.tree.JCTree$JCExpression parseType() -> parseType
    org.openjdk.tools.javac.tree.JCTree$JCExpression parseType(org.openjdk.tools.javac.util.List) -> parseType
    org.openjdk.tools.javac.tree.JCTree$JCExpression unannotatedType() -> unannotatedType
    org.openjdk.tools.javac.tree.JCTree$JCExpression term(int) -> term
    org.openjdk.tools.javac.tree.JCTree$JCExpression term() -> term
    org.openjdk.tools.javac.tree.JCTree$JCExpression termRest(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> termRest
    org.openjdk.tools.javac.tree.JCTree$JCExpression term1() -> term1
    org.openjdk.tools.javac.tree.JCTree$JCExpression term1Rest(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> term1Rest
    org.openjdk.tools.javac.tree.JCTree$JCExpression term2() -> term2
    org.openjdk.tools.javac.tree.JCTree$JCExpression term2Rest(org.openjdk.tools.javac.tree.JCTree$JCExpression,int) -> term2Rest
    org.openjdk.tools.javac.tree.JCTree$JCExpression makeOp(int,org.openjdk.tools.javac.parser.Tokens$TokenKind,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> makeOp
    org.openjdk.tools.javac.tree.JCTree$JCExpression foldStrings(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> foldStrings
    boolean foldIfNeeded(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.ListBuffer,org.openjdk.tools.javac.util.ListBuffer,boolean) -> foldIfNeeded
    boolean merge(org.openjdk.tools.javac.util.ListBuffer,org.openjdk.tools.javac.util.ListBuffer) -> merge
    org.openjdk.tools.javac.tree.JCTree$JCLiteral stringLiteral(org.openjdk.tools.javac.tree.JCTree) -> stringLiteral
    org.openjdk.tools.javac.tree.JCTree$JCExpression[] newOdStack() -> newOdStack
    org.openjdk.tools.javac.parser.Tokens$Token[] newOpStack() -> newOpStack
    org.openjdk.tools.javac.tree.JCTree$JCExpression term3() -> term3
    org.openjdk.tools.javac.tree.JCTree$JCExpression term3Rest(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> term3Rest
    boolean isUnboundMemberRef() -> isUnboundMemberRef
    org.openjdk.tools.javac.parser.JavacParser$ParensResult analyzeParens() -> analyzeParens
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambdaExpressionOrStatement(boolean,boolean,int) -> lambdaExpressionOrStatement
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambdaExpressionOrStatementRest(org.openjdk.tools.javac.util.List,int) -> lambdaExpressionOrStatementRest
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambdaStatement(org.openjdk.tools.javac.util.List,int,int) -> lambdaStatement
    org.openjdk.tools.javac.tree.JCTree$JCExpression lambdaExpression(org.openjdk.tools.javac.util.List,int) -> lambdaExpression
    org.openjdk.tools.javac.tree.JCTree$JCExpression superSuffix(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> superSuffix
    org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree basicType() -> basicType
    org.openjdk.tools.javac.tree.JCTree$JCExpression argumentsOpt(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> argumentsOpt
    org.openjdk.tools.javac.util.List arguments() -> arguments
    org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation arguments(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> arguments
    org.openjdk.tools.javac.tree.JCTree$JCExpression typeArgumentsOpt(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> typeArgumentsOpt
    org.openjdk.tools.javac.util.List typeArgumentsOpt() -> typeArgumentsOpt
    org.openjdk.tools.javac.util.List typeArgumentsOpt(int) -> typeArgumentsOpt
    org.openjdk.tools.javac.util.List typeArguments(boolean) -> typeArguments
    org.openjdk.tools.javac.tree.JCTree$JCExpression typeArgument() -> typeArgument
    org.openjdk.tools.javac.tree.JCTree$JCTypeApply typeArguments(org.openjdk.tools.javac.tree.JCTree$JCExpression,boolean) -> typeArguments
    org.openjdk.tools.javac.tree.JCTree$JCExpression bracketsOpt(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> bracketsOpt
    org.openjdk.tools.javac.tree.JCTree$JCExpression bracketsOpt(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> bracketsOpt
    org.openjdk.tools.javac.tree.JCTree$JCExpression bracketsOptCont(org.openjdk.tools.javac.tree.JCTree$JCExpression,int,org.openjdk.tools.javac.util.List) -> bracketsOptCont
    org.openjdk.tools.javac.tree.JCTree$JCExpression bracketsSuffix(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> bracketsSuffix
    org.openjdk.tools.javac.tree.JCTree$JCExpression memberReferenceSuffix(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> memberReferenceSuffix
    org.openjdk.tools.javac.tree.JCTree$JCExpression memberReferenceSuffix(int,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> memberReferenceSuffix
    org.openjdk.tools.javac.tree.JCTree$JCExpression creator(int,org.openjdk.tools.javac.util.List) -> creator
    org.openjdk.tools.javac.tree.JCTree$JCExpression innerCreator(int,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> innerCreator
    org.openjdk.tools.javac.tree.JCTree$JCExpression arrayCreatorRest(int,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> arrayCreatorRest
    org.openjdk.tools.javac.tree.JCTree$JCNewClass classCreatorRest(int,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> classCreatorRest
    org.openjdk.tools.javac.tree.JCTree$JCExpression arrayInitializer(int,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> arrayInitializer
    org.openjdk.tools.javac.tree.JCTree$JCExpression variableInitializer() -> variableInitializer
    org.openjdk.tools.javac.tree.JCTree$JCExpression parExpression() -> parExpression
    org.openjdk.tools.javac.tree.JCTree$JCBlock block(int,long) -> block
    org.openjdk.tools.javac.tree.JCTree$JCBlock block() -> block
    org.openjdk.tools.javac.util.List blockStatements() -> blockStatements
    org.openjdk.tools.javac.tree.JCTree$JCStatement parseStatementAsBlock() -> parseStatementAsBlock
    org.openjdk.tools.javac.util.List blockStatement() -> blockStatement
    org.openjdk.tools.javac.tree.JCTree$JCStatement parseSimpleStatement() -> parseSimpleStatement
    org.openjdk.tools.javac.tree.JCTree$JCStatement parseStatement() -> parseStatement
    org.openjdk.tools.javac.tree.JCTree$JCStatement doRecover(int,org.openjdk.tools.javac.parser.JavacParser$ErrorRecoveryAction,java.lang.String) -> doRecover
    org.openjdk.tools.javac.tree.JCTree$JCCatch catchClause() -> catchClause
    org.openjdk.tools.javac.util.List catchTypes() -> catchTypes
    org.openjdk.tools.javac.util.List switchBlockStatementGroups() -> switchBlockStatementGroups
    org.openjdk.tools.javac.tree.JCTree$JCCase switchBlockStatementGroup() -> switchBlockStatementGroup
    org.openjdk.tools.javac.util.ListBuffer moreStatementExpressions(int,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.ListBuffer) -> moreStatementExpressions
    org.openjdk.tools.javac.util.List forInit() -> forInit
    org.openjdk.tools.javac.util.List forUpdate() -> forUpdate
    org.openjdk.tools.javac.util.List annotationsOpt(org.openjdk.tools.javac.tree.JCTree$Tag) -> annotationsOpt
    org.openjdk.tools.javac.util.List typeAnnotationsOpt() -> typeAnnotationsOpt
    org.openjdk.tools.javac.tree.JCTree$JCModifiers modifiersOpt() -> modifiersOpt
    org.openjdk.tools.javac.tree.JCTree$JCModifiers modifiersOpt(org.openjdk.tools.javac.tree.JCTree$JCModifiers) -> modifiersOpt
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation annotation(int,org.openjdk.tools.javac.tree.JCTree$Tag) -> annotation
    org.openjdk.tools.javac.util.List annotationFieldValuesOpt() -> annotationFieldValuesOpt
    org.openjdk.tools.javac.util.List annotationFieldValues() -> annotationFieldValues
    org.openjdk.tools.javac.tree.JCTree$JCExpression annotationFieldValue() -> annotationFieldValue
    org.openjdk.tools.javac.tree.JCTree$JCExpression annotationValue() -> annotationValue
    org.openjdk.tools.javac.util.ListBuffer variableDeclarators(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.ListBuffer) -> variableDeclarators
    org.openjdk.tools.javac.util.ListBuffer variableDeclaratorsRest(int,org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.Name,boolean,org.openjdk.tools.javac.parser.Tokens$Comment,org.openjdk.tools.javac.util.ListBuffer) -> variableDeclaratorsRest
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl variableDeclarator(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.tree.JCTree$JCExpression,boolean,org.openjdk.tools.javac.parser.Tokens$Comment) -> variableDeclarator
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl variableDeclaratorRest(int,org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.Name,boolean,org.openjdk.tools.javac.parser.Tokens$Comment) -> variableDeclaratorRest
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl variableDeclaratorId(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> variableDeclaratorId
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl variableDeclaratorId(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.tree.JCTree$JCExpression,boolean) -> variableDeclaratorId
    org.openjdk.tools.javac.util.List resources() -> resources
    org.openjdk.tools.javac.tree.JCTree resource() -> resource
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit parseCompilationUnit() -> parseCompilationUnit
    org.openjdk.tools.javac.tree.JCTree$JCModuleDecl moduleDecl(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.source.tree.ModuleTree$ModuleKind,org.openjdk.tools.javac.parser.Tokens$Comment) -> moduleDecl
    org.openjdk.tools.javac.util.List moduleDirectiveList() -> moduleDirectiveList
    org.openjdk.tools.javac.tree.JCTree importDeclaration() -> importDeclaration
    org.openjdk.tools.javac.tree.JCTree typeDeclaration(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.parser.Tokens$Comment) -> typeDeclaration
    org.openjdk.tools.javac.tree.JCTree$JCStatement classOrInterfaceOrEnumDeclaration(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.parser.Tokens$Comment) -> classOrInterfaceOrEnumDeclaration
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl classDeclaration(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.parser.Tokens$Comment) -> classDeclaration
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl interfaceDeclaration(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.parser.Tokens$Comment) -> interfaceDeclaration
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl enumDeclaration(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.parser.Tokens$Comment) -> enumDeclaration
    org.openjdk.tools.javac.util.List enumBody(org.openjdk.tools.javac.util.Name) -> enumBody
    org.openjdk.tools.javac.tree.JCTree enumeratorDeclaration(org.openjdk.tools.javac.util.Name) -> enumeratorDeclaration
    org.openjdk.tools.javac.util.List typeList() -> typeList
    org.openjdk.tools.javac.util.List classOrInterfaceBody(org.openjdk.tools.javac.util.Name,boolean) -> classOrInterfaceBody
    org.openjdk.tools.javac.util.List classOrInterfaceBodyDeclaration(org.openjdk.tools.javac.util.Name,boolean) -> classOrInterfaceBodyDeclaration
    org.openjdk.tools.javac.tree.JCTree methodDeclaratorRest(int,org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,boolean,boolean,org.openjdk.tools.javac.parser.Tokens$Comment) -> methodDeclaratorRest
    org.openjdk.tools.javac.util.List qualidentList(boolean) -> qualidentList
    org.openjdk.tools.javac.util.List typeParametersOpt() -> typeParametersOpt
    org.openjdk.tools.javac.tree.JCTree$JCTypeParameter typeParameter() -> typeParameter
    org.openjdk.tools.javac.util.List formalParameters() -> formalParameters
    org.openjdk.tools.javac.util.List formalParameters(boolean) -> formalParameters
    org.openjdk.tools.javac.util.List implicitParameters(boolean) -> implicitParameters
    org.openjdk.tools.javac.tree.JCTree$JCModifiers optFinal(long) -> optFinal
    org.openjdk.tools.javac.tree.JCTree$JCExpression insertAnnotationsToMostInner(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,boolean) -> insertAnnotationsToMostInner
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl formalParameter() -> formalParameter
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl formalParameter(boolean) -> formalParameter
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl implicitParameter() -> implicitParameter
    void error(int,java.lang.String,java.lang.Object[]) -> error
    void error(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> error
    void warning(int,java.lang.String,java.lang.Object[]) -> warning
    org.openjdk.tools.javac.tree.JCTree$JCExpression checkExprStat(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> checkExprStat
    int prec(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> prec
    int earlier(int,int) -> earlier
    org.openjdk.tools.javac.tree.JCTree$Tag optag(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> optag
    org.openjdk.tools.javac.tree.JCTree$Tag unoptag(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> unoptag
    org.openjdk.tools.javac.code.TypeTag typetag(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> typetag
    void checkDiamond() -> checkDiamond
    void checkMulticatch() -> checkMulticatch
    void checkTryWithResources() -> checkTryWithResources
    void checkVariableInTryWithResources(int) -> checkVariableInTryWithResources
    void checkLambda() -> checkLambda
    void checkMethodReferences() -> checkMethodReferences
    void checkDefaultMethods() -> checkDefaultMethods
    void checkIntersectionTypesInCast() -> checkIntersectionTypesInCast
    void checkStaticInterfaceMethods() -> checkStaticInterfaceMethods
    void checkTypeAnnotations() -> checkTypeAnnotations
    void checkPrivateInterfaceMethods() -> checkPrivateInterfaceMethods
    void checkAnnotationsAfterTypeParams(int) -> checkAnnotationsAfterTypeParams
    boolean lambda$new$1(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> lambda$new$1
    java.lang.String lambda$merge$0(org.openjdk.tools.javac.tree.JCTree$JCLiteral) -> lambda$merge$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.JavacParser$1 -> org.openjdk.tools.javac.parser.JavacParser$1:
    int[] $SwitchMap$com$sun$tools$javac$parser$Tokens$TokenKind -> $SwitchMap$com$sun$tools$javac$parser$Tokens$TokenKind
    int[] $SwitchMap$com$sun$tools$javac$parser$JavacParser$ParensResult -> $SwitchMap$com$sun$tools$javac$parser$JavacParser$ParensResult
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.JavacParser$AbstractEndPosTable -> org.openjdk.tools.javac.parser.JavacParser$AbstractEndPosTable:
    org.openjdk.tools.javac.parser.JavacParser parser -> parser
    int errorEndPos -> errorEndPos
    void <init>(org.openjdk.tools.javac.parser.JavacParser) -> <init>
    org.openjdk.tools.javac.tree.JCTree to(org.openjdk.tools.javac.tree.JCTree) -> to
    org.openjdk.tools.javac.tree.JCTree toP(org.openjdk.tools.javac.tree.JCTree) -> toP
    void setErrorEndPos(int) -> setErrorEndPos
    void setParser(org.openjdk.tools.javac.parser.JavacParser) -> setParser
org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction -> org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction:
    org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction BLOCK_STMT -> BLOCK_STMT
    org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction CATCH_CLAUSE -> CATCH_CLAUSE
    org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction[] $VALUES -> $VALUES
    org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction[] values() -> values
    org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.javac.parser.JavacParser$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction$1 -> org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction$1:
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.tree.JCTree doRecover(org.openjdk.tools.javac.parser.JavacParser) -> doRecover
org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction$2 -> org.openjdk.tools.javac.parser.JavacParser$BasicErrorRecoveryAction$2:
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.tree.JCTree doRecover(org.openjdk.tools.javac.parser.JavacParser) -> doRecover
org.openjdk.tools.javac.parser.JavacParser$EmptyEndPosTable -> org.openjdk.tools.javac.parser.JavacParser$EmptyEndPosTable:
    void <init>(org.openjdk.tools.javac.parser.JavacParser) -> <init>
    void storeEnd(org.openjdk.tools.javac.tree.JCTree,int) -> storeEnd
    org.openjdk.tools.javac.tree.JCTree to(org.openjdk.tools.javac.tree.JCTree) -> to
    org.openjdk.tools.javac.tree.JCTree toP(org.openjdk.tools.javac.tree.JCTree) -> toP
    int getEndPos(org.openjdk.tools.javac.tree.JCTree) -> getEndPos
    int replaceTree(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> replaceTree
org.openjdk.tools.javac.parser.JavacParser$ErrorRecoveryAction -> org.openjdk.tools.javac.parser.JavacParser$ErrorRecoveryAction:
    org.openjdk.tools.javac.tree.JCTree doRecover(org.openjdk.tools.javac.parser.JavacParser) -> doRecover
org.openjdk.tools.javac.parser.JavacParser$ParensResult -> org.openjdk.tools.javac.parser.JavacParser$ParensResult:
    org.openjdk.tools.javac.parser.JavacParser$ParensResult CAST -> CAST
    org.openjdk.tools.javac.parser.JavacParser$ParensResult EXPLICIT_LAMBDA -> EXPLICIT_LAMBDA
    org.openjdk.tools.javac.parser.JavacParser$ParensResult IMPLICIT_LAMBDA -> IMPLICIT_LAMBDA
    org.openjdk.tools.javac.parser.JavacParser$ParensResult PARENS -> PARENS
    org.openjdk.tools.javac.parser.JavacParser$ParensResult[] $VALUES -> $VALUES
    org.openjdk.tools.javac.parser.JavacParser$ParensResult[] values() -> values
    org.openjdk.tools.javac.parser.JavacParser$ParensResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.JavacParser$SimpleEndPosTable -> org.openjdk.tools.javac.parser.JavacParser$SimpleEndPosTable:
    org.openjdk.tools.javac.util.IntHashTable endPosMap -> endPosMap
    void <init>(org.openjdk.tools.javac.parser.JavacParser) -> <init>
    void storeEnd(org.openjdk.tools.javac.tree.JCTree,int) -> storeEnd
    org.openjdk.tools.javac.tree.JCTree to(org.openjdk.tools.javac.tree.JCTree) -> to
    org.openjdk.tools.javac.tree.JCTree toP(org.openjdk.tools.javac.tree.JCTree) -> toP
    int getEndPos(org.openjdk.tools.javac.tree.JCTree) -> getEndPos
    int replaceTree(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> replaceTree
org.openjdk.tools.javac.parser.JavadocTokenizer -> org.openjdk.tools.javac.parser.JavadocTokenizer:
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,java.nio.CharBuffer) -> <init>
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,char[],int) -> <init>
    org.openjdk.tools.javac.parser.Tokens$Comment processComment(int,int,org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle) -> processComment
    org.openjdk.tools.javac.util.Position$LineMap getLineMap() -> getLineMap
org.openjdk.tools.javac.parser.JavadocTokenizer$DocReader -> org.openjdk.tools.javac.parser.JavadocTokenizer$DocReader:
    int col -> col
    int startPos -> startPos
    int[] pbuf -> pbuf
    int pp -> pp
    int doubleBackslashBp -> doubleBackslashBp
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,char[],int,int) -> <init>
    void convertUnicode() -> convertUnicode
    void scanCommentChar() -> scanCommentChar
    void scanChar() -> scanChar
    void putChar(char,boolean) -> putChar
    boolean isDoubleBackslash() -> isDoubleBackslash
org.openjdk.tools.javac.parser.JavadocTokenizer$JavadocComment -> org.openjdk.tools.javac.parser.JavadocTokenizer$JavadocComment:
    java.lang.String docComment -> docComment
    int[] docPosns -> docPosns
    java.util.regex.Pattern DEPRECATED_PATTERN -> DEPRECATED_PATTERN
    void <init>(org.openjdk.tools.javac.parser.JavadocTokenizer$DocReader,org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle) -> <init>
    java.lang.String getText() -> getText
    int getSourcePos(int) -> getSourcePos
    void scanDocComment() -> scanDocComment
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.LazyDocCommentTable -> org.openjdk.tools.javac.parser.LazyDocCommentTable:
    org.openjdk.tools.javac.parser.ParserFactory fac -> fac
    org.openjdk.tools.javac.util.DiagnosticSource diagSource -> diagSource
    java.util.Map table -> table
    void <init>(org.openjdk.tools.javac.parser.ParserFactory) -> <init>
    boolean hasComment(org.openjdk.tools.javac.tree.JCTree) -> hasComment
    org.openjdk.tools.javac.parser.Tokens$Comment getComment(org.openjdk.tools.javac.tree.JCTree) -> getComment
    java.lang.String getCommentText(org.openjdk.tools.javac.tree.JCTree) -> getCommentText
    org.openjdk.tools.javac.tree.DCTree$DCDocComment getCommentTree(org.openjdk.tools.javac.tree.JCTree) -> getCommentTree
    void putComment(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.parser.Tokens$Comment) -> putComment
org.openjdk.tools.javac.parser.LazyDocCommentTable$Entry -> org.openjdk.tools.javac.parser.LazyDocCommentTable$Entry:
    org.openjdk.tools.javac.parser.Tokens$Comment comment -> comment
    org.openjdk.tools.javac.tree.DCTree$DCDocComment tree -> tree
    void <init>(org.openjdk.tools.javac.parser.Tokens$Comment) -> <init>
org.openjdk.tools.javac.parser.Lexer -> org.openjdk.tools.javac.parser.Lexer:
    void nextToken() -> nextToken
    org.openjdk.tools.javac.parser.Tokens$Token token() -> token
    org.openjdk.tools.javac.parser.Tokens$Token token(int) -> token
    org.openjdk.tools.javac.parser.Tokens$Token prevToken() -> prevToken
    org.openjdk.tools.javac.parser.Tokens$Token split() -> split
    int errPos() -> errPos
    void errPos(int) -> errPos
    org.openjdk.tools.javac.util.Position$LineMap getLineMap() -> getLineMap
org.openjdk.tools.javac.parser.Parser -> org.openjdk.tools.javac.parser.Parser:
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit parseCompilationUnit() -> parseCompilationUnit
    org.openjdk.tools.javac.tree.JCTree$JCExpression parseExpression() -> parseExpression
    org.openjdk.tools.javac.tree.JCTree$JCStatement parseStatement() -> parseStatement
    org.openjdk.tools.javac.tree.JCTree$JCExpression parseType() -> parseType
org.openjdk.tools.javac.parser.ParserFactory -> org.openjdk.tools.javac.parser.ParserFactory:
    org.openjdk.tools.javac.util.Context$Key parserFactoryKey -> parserFactoryKey
    org.openjdk.tools.javac.tree.TreeMaker F -> F
    org.openjdk.tools.javac.tree.DocTreeMaker docTreeMaker -> docTreeMaker
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.parser.Tokens tokens -> tokens
    org.openjdk.tools.javac.code.Source source -> source
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.util.Options options -> options
    org.openjdk.tools.javac.parser.ScannerFactory scannerFactory -> scannerFactory
    java.util.Locale locale -> locale
    org.openjdk.tools.javac.parser.ParserFactory instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.parser.JavacParser newParser(java.lang.CharSequence,boolean,boolean,boolean) -> newParser
    org.openjdk.tools.javac.parser.JavacParser newParser(java.lang.CharSequence,boolean,boolean,boolean,boolean) -> newParser
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.ReferenceParser -> org.openjdk.tools.javac.parser.ReferenceParser:
    org.openjdk.tools.javac.parser.ParserFactory fac -> fac
    void <init>(org.openjdk.tools.javac.parser.ParserFactory) -> <init>
    org.openjdk.tools.javac.parser.ReferenceParser$Reference parse(java.lang.String) -> parse
    org.openjdk.tools.javac.tree.JCTree parseType(java.lang.String) -> parseType
    org.openjdk.tools.javac.util.Name parseMember(java.lang.String) -> parseMember
    org.openjdk.tools.javac.util.List parseParams(java.lang.String) -> parseParams
org.openjdk.tools.javac.parser.ReferenceParser$ParseException -> org.openjdk.tools.javac.parser.ReferenceParser$ParseException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.javac.parser.ReferenceParser$Reference -> org.openjdk.tools.javac.parser.ReferenceParser$Reference:
    org.openjdk.tools.javac.tree.JCTree qualExpr -> qualExpr
    org.openjdk.tools.javac.util.Name member -> member
    org.openjdk.tools.javac.util.List paramTypes -> paramTypes
    void <init>(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> <init>
org.openjdk.tools.javac.parser.Scanner -> org.openjdk.tools.javac.parser.Scanner:
    org.openjdk.tools.javac.parser.Tokens tokens -> tokens
    org.openjdk.tools.javac.parser.Tokens$Token token -> token
    org.openjdk.tools.javac.parser.Tokens$Token prevToken -> prevToken
    java.util.List savedTokens -> savedTokens
    org.openjdk.tools.javac.parser.JavaTokenizer tokenizer -> tokenizer
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,java.nio.CharBuffer) -> <init>
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,char[],int) -> <init>
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,org.openjdk.tools.javac.parser.JavaTokenizer) -> <init>
    org.openjdk.tools.javac.parser.Tokens$Token token() -> token
    org.openjdk.tools.javac.parser.Tokens$Token token(int) -> token
    void ensureLookahead(int) -> ensureLookahead
    org.openjdk.tools.javac.parser.Tokens$Token prevToken() -> prevToken
    void nextToken() -> nextToken
    org.openjdk.tools.javac.parser.Tokens$Token split() -> split
    org.openjdk.tools.javac.util.Position$LineMap getLineMap() -> getLineMap
    int errPos() -> errPos
    void errPos(int) -> errPos
org.openjdk.tools.javac.parser.ScannerFactory -> org.openjdk.tools.javac.parser.ScannerFactory:
    org.openjdk.tools.javac.util.Context$Key scannerFactoryKey -> scannerFactoryKey
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.code.Source source -> source
    org.openjdk.tools.javac.parser.Tokens tokens -> tokens
    org.openjdk.tools.javac.parser.ScannerFactory instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.parser.Scanner newScanner(java.lang.CharSequence,boolean) -> newScanner
    org.openjdk.tools.javac.parser.Scanner newScanner(char[],int,boolean) -> newScanner
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.Tokens -> org.openjdk.tools.javac.parser.Tokens:
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.parser.Tokens$TokenKind[] key -> key
    int maxKey -> maxKey
    org.openjdk.tools.javac.util.Name[] tokenName -> tokenName
    org.openjdk.tools.javac.util.Context$Key tokensKey -> tokensKey
    org.openjdk.tools.javac.parser.Tokens$Token DUMMY -> DUMMY
    org.openjdk.tools.javac.parser.Tokens instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void enterKeyword(java.lang.String,org.openjdk.tools.javac.parser.Tokens$TokenKind) -> enterKeyword
    org.openjdk.tools.javac.parser.Tokens$TokenKind lookupKind(org.openjdk.tools.javac.util.Name) -> lookupKind
    org.openjdk.tools.javac.parser.Tokens$TokenKind lookupKind(java.lang.String) -> lookupKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.Tokens$1 -> org.openjdk.tools.javac.parser.Tokens$1:
    int[] $SwitchMap$com$sun$tools$javac$parser$Tokens$TokenKind -> $SwitchMap$com$sun$tools$javac$parser$Tokens$TokenKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.Tokens$Comment -> org.openjdk.tools.javac.parser.Tokens$Comment:
    java.lang.String getText() -> getText
    int getSourcePos(int) -> getSourcePos
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle getStyle() -> getStyle
    boolean isDeprecated() -> isDeprecated
org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle -> org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle:
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle LINE -> LINE
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle BLOCK -> BLOCK
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle JAVADOC -> JAVADOC
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle[] $VALUES -> $VALUES
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle[] values() -> values
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.Tokens$NamedToken -> org.openjdk.tools.javac.parser.Tokens$NamedToken:
    org.openjdk.tools.javac.util.Name name -> name
    void <init>(org.openjdk.tools.javac.parser.Tokens$TokenKind,int,int,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> <init>
    void checkKind() -> checkKind
    org.openjdk.tools.javac.util.Name name() -> name
org.openjdk.tools.javac.parser.Tokens$NumericToken -> org.openjdk.tools.javac.parser.Tokens$NumericToken:
    int radix -> radix
    void <init>(org.openjdk.tools.javac.parser.Tokens$TokenKind,int,int,java.lang.String,int,org.openjdk.tools.javac.util.List) -> <init>
    void checkKind() -> checkKind
    int radix() -> radix
org.openjdk.tools.javac.parser.Tokens$StringToken -> org.openjdk.tools.javac.parser.Tokens$StringToken:
    java.lang.String stringVal -> stringVal
    void <init>(org.openjdk.tools.javac.parser.Tokens$TokenKind,int,int,java.lang.String,org.openjdk.tools.javac.util.List) -> <init>
    void checkKind() -> checkKind
    java.lang.String stringVal() -> stringVal
org.openjdk.tools.javac.parser.Tokens$Token -> org.openjdk.tools.javac.parser.Tokens$Token:
    org.openjdk.tools.javac.parser.Tokens$TokenKind kind -> kind
    int pos -> pos
    int endPos -> endPos
    org.openjdk.tools.javac.util.List comments -> comments
    void <init>(org.openjdk.tools.javac.parser.Tokens$TokenKind,int,int,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.parser.Tokens$Token[] split(org.openjdk.tools.javac.parser.Tokens) -> split
    void checkKind() -> checkKind
    org.openjdk.tools.javac.util.Name name() -> name
    java.lang.String stringVal() -> stringVal
    int radix() -> radix
    org.openjdk.tools.javac.parser.Tokens$Comment comment(org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle) -> comment
    boolean deprecatedFlag() -> deprecatedFlag
    org.openjdk.tools.javac.util.List getComments(org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle) -> getComments
org.openjdk.tools.javac.parser.Tokens$Token$Tag -> org.openjdk.tools.javac.parser.Tokens$Token$Tag:
    org.openjdk.tools.javac.parser.Tokens$Token$Tag DEFAULT -> DEFAULT
    org.openjdk.tools.javac.parser.Tokens$Token$Tag NAMED -> NAMED
    org.openjdk.tools.javac.parser.Tokens$Token$Tag STRING -> STRING
    org.openjdk.tools.javac.parser.Tokens$Token$Tag NUMERIC -> NUMERIC
    org.openjdk.tools.javac.parser.Tokens$Token$Tag[] $VALUES -> $VALUES
    org.openjdk.tools.javac.parser.Tokens$Token$Tag[] values() -> values
    org.openjdk.tools.javac.parser.Tokens$Token$Tag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.Tokens$TokenKind -> org.openjdk.tools.javac.parser.Tokens$TokenKind:
    org.openjdk.tools.javac.parser.Tokens$TokenKind EOF -> EOF
    org.openjdk.tools.javac.parser.Tokens$TokenKind ERROR -> ERROR
    org.openjdk.tools.javac.parser.Tokens$TokenKind IDENTIFIER -> IDENTIFIER
    org.openjdk.tools.javac.parser.Tokens$TokenKind ABSTRACT -> ABSTRACT
    org.openjdk.tools.javac.parser.Tokens$TokenKind ASSERT -> ASSERT
    org.openjdk.tools.javac.parser.Tokens$TokenKind BOOLEAN -> BOOLEAN
    org.openjdk.tools.javac.parser.Tokens$TokenKind BREAK -> BREAK
    org.openjdk.tools.javac.parser.Tokens$TokenKind BYTE -> BYTE
    org.openjdk.tools.javac.parser.Tokens$TokenKind CASE -> CASE
    org.openjdk.tools.javac.parser.Tokens$TokenKind CATCH -> CATCH
    org.openjdk.tools.javac.parser.Tokens$TokenKind CHAR -> CHAR
    org.openjdk.tools.javac.parser.Tokens$TokenKind CLASS -> CLASS
    org.openjdk.tools.javac.parser.Tokens$TokenKind CONST -> CONST
    org.openjdk.tools.javac.parser.Tokens$TokenKind CONTINUE -> CONTINUE
    org.openjdk.tools.javac.parser.Tokens$TokenKind DEFAULT -> DEFAULT
    org.openjdk.tools.javac.parser.Tokens$TokenKind DO -> DO
    org.openjdk.tools.javac.parser.Tokens$TokenKind DOUBLE -> DOUBLE
    org.openjdk.tools.javac.parser.Tokens$TokenKind ELSE -> ELSE
    org.openjdk.tools.javac.parser.Tokens$TokenKind ENUM -> ENUM
    org.openjdk.tools.javac.parser.Tokens$TokenKind EXTENDS -> EXTENDS
    org.openjdk.tools.javac.parser.Tokens$TokenKind FINAL -> FINAL
    org.openjdk.tools.javac.parser.Tokens$TokenKind FINALLY -> FINALLY
    org.openjdk.tools.javac.parser.Tokens$TokenKind FLOAT -> FLOAT
    org.openjdk.tools.javac.parser.Tokens$TokenKind FOR -> FOR
    org.openjdk.tools.javac.parser.Tokens$TokenKind GOTO -> GOTO
    org.openjdk.tools.javac.parser.Tokens$TokenKind IF -> IF
    org.openjdk.tools.javac.parser.Tokens$TokenKind IMPLEMENTS -> IMPLEMENTS
    org.openjdk.tools.javac.parser.Tokens$TokenKind IMPORT -> IMPORT
    org.openjdk.tools.javac.parser.Tokens$TokenKind INSTANCEOF -> INSTANCEOF
    org.openjdk.tools.javac.parser.Tokens$TokenKind INT -> INT
    org.openjdk.tools.javac.parser.Tokens$TokenKind INTERFACE -> INTERFACE
    org.openjdk.tools.javac.parser.Tokens$TokenKind LONG -> LONG
    org.openjdk.tools.javac.parser.Tokens$TokenKind NATIVE -> NATIVE
    org.openjdk.tools.javac.parser.Tokens$TokenKind NEW -> NEW
    org.openjdk.tools.javac.parser.Tokens$TokenKind PACKAGE -> PACKAGE
    org.openjdk.tools.javac.parser.Tokens$TokenKind PRIVATE -> PRIVATE
    org.openjdk.tools.javac.parser.Tokens$TokenKind PROTECTED -> PROTECTED
    org.openjdk.tools.javac.parser.Tokens$TokenKind PUBLIC -> PUBLIC
    org.openjdk.tools.javac.parser.Tokens$TokenKind RETURN -> RETURN
    org.openjdk.tools.javac.parser.Tokens$TokenKind SHORT -> SHORT
    org.openjdk.tools.javac.parser.Tokens$TokenKind STATIC -> STATIC
    org.openjdk.tools.javac.parser.Tokens$TokenKind STRICTFP -> STRICTFP
    org.openjdk.tools.javac.parser.Tokens$TokenKind SUPER -> SUPER
    org.openjdk.tools.javac.parser.Tokens$TokenKind SWITCH -> SWITCH
    org.openjdk.tools.javac.parser.Tokens$TokenKind SYNCHRONIZED -> SYNCHRONIZED
    org.openjdk.tools.javac.parser.Tokens$TokenKind THIS -> THIS
    org.openjdk.tools.javac.parser.Tokens$TokenKind THROW -> THROW
    org.openjdk.tools.javac.parser.Tokens$TokenKind THROWS -> THROWS
    org.openjdk.tools.javac.parser.Tokens$TokenKind TRANSIENT -> TRANSIENT
    org.openjdk.tools.javac.parser.Tokens$TokenKind TRY -> TRY
    org.openjdk.tools.javac.parser.Tokens$TokenKind VOID -> VOID
    org.openjdk.tools.javac.parser.Tokens$TokenKind VOLATILE -> VOLATILE
    org.openjdk.tools.javac.parser.Tokens$TokenKind WHILE -> WHILE
    org.openjdk.tools.javac.parser.Tokens$TokenKind INTLITERAL -> INTLITERAL
    org.openjdk.tools.javac.parser.Tokens$TokenKind LONGLITERAL -> LONGLITERAL
    org.openjdk.tools.javac.parser.Tokens$TokenKind FLOATLITERAL -> FLOATLITERAL
    org.openjdk.tools.javac.parser.Tokens$TokenKind DOUBLELITERAL -> DOUBLELITERAL
    org.openjdk.tools.javac.parser.Tokens$TokenKind CHARLITERAL -> CHARLITERAL
    org.openjdk.tools.javac.parser.Tokens$TokenKind STRINGLITERAL -> STRINGLITERAL
    org.openjdk.tools.javac.parser.Tokens$TokenKind TRUE -> TRUE
    org.openjdk.tools.javac.parser.Tokens$TokenKind FALSE -> FALSE
    org.openjdk.tools.javac.parser.Tokens$TokenKind NULL -> NULL
    org.openjdk.tools.javac.parser.Tokens$TokenKind UNDERSCORE -> UNDERSCORE
    org.openjdk.tools.javac.parser.Tokens$TokenKind ARROW -> ARROW
    org.openjdk.tools.javac.parser.Tokens$TokenKind COLCOL -> COLCOL
    org.openjdk.tools.javac.parser.Tokens$TokenKind LPAREN -> LPAREN
    org.openjdk.tools.javac.parser.Tokens$TokenKind RPAREN -> RPAREN
    org.openjdk.tools.javac.parser.Tokens$TokenKind LBRACE -> LBRACE
    org.openjdk.tools.javac.parser.Tokens$TokenKind RBRACE -> RBRACE
    org.openjdk.tools.javac.parser.Tokens$TokenKind LBRACKET -> LBRACKET
    org.openjdk.tools.javac.parser.Tokens$TokenKind RBRACKET -> RBRACKET
    org.openjdk.tools.javac.parser.Tokens$TokenKind SEMI -> SEMI
    org.openjdk.tools.javac.parser.Tokens$TokenKind COMMA -> COMMA
    org.openjdk.tools.javac.parser.Tokens$TokenKind DOT -> DOT
    org.openjdk.tools.javac.parser.Tokens$TokenKind ELLIPSIS -> ELLIPSIS
    org.openjdk.tools.javac.parser.Tokens$TokenKind EQ -> EQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind GT -> GT
    org.openjdk.tools.javac.parser.Tokens$TokenKind LT -> LT
    org.openjdk.tools.javac.parser.Tokens$TokenKind BANG -> BANG
    org.openjdk.tools.javac.parser.Tokens$TokenKind TILDE -> TILDE
    org.openjdk.tools.javac.parser.Tokens$TokenKind QUES -> QUES
    org.openjdk.tools.javac.parser.Tokens$TokenKind COLON -> COLON
    org.openjdk.tools.javac.parser.Tokens$TokenKind EQEQ -> EQEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind LTEQ -> LTEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind GTEQ -> GTEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind BANGEQ -> BANGEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind AMPAMP -> AMPAMP
    org.openjdk.tools.javac.parser.Tokens$TokenKind BARBAR -> BARBAR
    org.openjdk.tools.javac.parser.Tokens$TokenKind PLUSPLUS -> PLUSPLUS
    org.openjdk.tools.javac.parser.Tokens$TokenKind SUBSUB -> SUBSUB
    org.openjdk.tools.javac.parser.Tokens$TokenKind PLUS -> PLUS
    org.openjdk.tools.javac.parser.Tokens$TokenKind SUB -> SUB
    org.openjdk.tools.javac.parser.Tokens$TokenKind STAR -> STAR
    org.openjdk.tools.javac.parser.Tokens$TokenKind SLASH -> SLASH
    org.openjdk.tools.javac.parser.Tokens$TokenKind AMP -> AMP
    org.openjdk.tools.javac.parser.Tokens$TokenKind BAR -> BAR
    org.openjdk.tools.javac.parser.Tokens$TokenKind CARET -> CARET
    org.openjdk.tools.javac.parser.Tokens$TokenKind PERCENT -> PERCENT
    org.openjdk.tools.javac.parser.Tokens$TokenKind LTLT -> LTLT
    org.openjdk.tools.javac.parser.Tokens$TokenKind GTGT -> GTGT
    org.openjdk.tools.javac.parser.Tokens$TokenKind GTGTGT -> GTGTGT
    org.openjdk.tools.javac.parser.Tokens$TokenKind PLUSEQ -> PLUSEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind SUBEQ -> SUBEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind STAREQ -> STAREQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind SLASHEQ -> SLASHEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind AMPEQ -> AMPEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind BAREQ -> BAREQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind CARETEQ -> CARETEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind PERCENTEQ -> PERCENTEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind LTLTEQ -> LTLTEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind GTGTEQ -> GTGTEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind GTGTGTEQ -> GTGTGTEQ
    org.openjdk.tools.javac.parser.Tokens$TokenKind MONKEYS_AT -> MONKEYS_AT
    org.openjdk.tools.javac.parser.Tokens$TokenKind CUSTOM -> CUSTOM
    java.lang.String name -> name
    org.openjdk.tools.javac.parser.Tokens$Token$Tag tag -> tag
    org.openjdk.tools.javac.parser.Tokens$TokenKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.parser.Tokens$TokenKind[] values() -> values
    org.openjdk.tools.javac.parser.Tokens$TokenKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int,org.openjdk.tools.javac.parser.Tokens$Token$Tag) -> <init>
    void <init>(java.lang.String,int,java.lang.String,org.openjdk.tools.javac.parser.Tokens$Token$Tag) -> <init>
    java.lang.String toString() -> toString
    java.lang.String getKind() -> getKind
    java.lang.String toString(java.util.Locale,org.openjdk.tools.javac.api.Messages) -> toString
    boolean accepts(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> accepts
    boolean accepts(java.lang.Object) -> accepts
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.parser.UnicodeReader -> org.openjdk.tools.javac.parser.UnicodeReader:
    char[] buf -> buf
    int bp -> bp
    int buflen -> buflen
    char ch -> ch
    int unicodeConversionBp -> unicodeConversionBp
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.util.Names names -> names
    char[] sbuf -> sbuf
    int sp -> sp
    boolean surrogatesSupported -> surrogatesSupported
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,java.nio.CharBuffer) -> <init>
    void <init>(org.openjdk.tools.javac.parser.ScannerFactory,char[],int) -> <init>
    void scanChar() -> scanChar
    void scanCommentChar() -> scanCommentChar
    void putChar(char,boolean) -> putChar
    void putChar(char) -> putChar
    void putChar(boolean) -> putChar
    org.openjdk.tools.javac.util.Name name() -> name
    java.lang.String chars() -> chars
    void convertUnicode() -> convertUnicode
    boolean surrogatesSupported() -> surrogatesSupported
    int peekSurrogates() -> peekSurrogates
    int digit(int,int) -> digit
    boolean isUnicode() -> isUnicode
    void skipChar() -> skipChar
    char peekChar() -> peekChar
    char[] getRawCharacters() -> getRawCharacters
    char[] getRawCharacters(int,int) -> getRawCharacters
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.platform.JDKPlatformProvider -> org.openjdk.tools.javac.platform.JDKPlatformProvider:
    java.lang.String[] symbolFileLocation -> symbolFileLocation
    java.util.Set SUPPORTED_JAVA_PLATFORM_VERSIONS -> SUPPORTED_JAVA_PLATFORM_VERSIONS
    void <init>() -> <init>
    java.lang.Iterable getSupportedPlatformNames() -> getSupportedPlatformNames
    org.openjdk.tools.javac.platform.PlatformDescription getPlatform(java.lang.String,java.lang.String) -> getPlatform
    java.lang.String targetNumericVersion(org.openjdk.tools.javac.jvm.Target) -> targetNumericVersion
    java.nio.file.Path findCtSym() -> findCtSym
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.platform.JDKPlatformProvider$PlatformDescriptionImpl -> org.openjdk.tools.javac.platform.JDKPlatformProvider$PlatformDescriptionImpl:
    java.util.Map ctSym2FileSystem -> ctSym2FileSystem
    java.lang.String version -> version
    void <init>(java.lang.String) -> <init>
    java.util.Collection getPlatformPath() -> getPlatformPath
    java.lang.String getSourceVersion() -> getSourceVersion
    java.lang.String getTargetVersion() -> getTargetVersion
    java.util.List getAnnotationProcessors() -> getAnnotationProcessors
    java.util.List getPlugins() -> getPlugins
    java.util.List getAdditionalOptions() -> getAdditionalOptions
    void close() -> close
    void lambda$getPlatformPath$2(java.util.List,java.nio.file.Path) -> lambda$getPlatformPath$2
    boolean lambda$getPlatformPath$1(java.nio.file.Path) -> lambda$getPlatformPath$1
    java.nio.file.Path lambda$getPlatformPath$0(java.nio.file.Path,java.lang.String) -> lambda$getPlatformPath$0
org.openjdk.tools.javac.platform.PlatformDescription -> org.openjdk.tools.javac.platform.PlatformDescription:
    java.util.Collection getPlatformPath() -> getPlatformPath
    java.lang.String getSourceVersion() -> getSourceVersion
    java.lang.String getTargetVersion() -> getTargetVersion
    java.util.List getAnnotationProcessors() -> getAnnotationProcessors
    java.util.List getPlugins() -> getPlugins
    java.util.List getAdditionalOptions() -> getAdditionalOptions
    void close() -> close
org.openjdk.tools.javac.platform.PlatformDescription$PluginInfo -> org.openjdk.tools.javac.platform.PlatformDescription$PluginInfo:
    java.lang.String getName() -> getName
    java.util.Map getOptions() -> getOptions
    java.lang.Object getPlugin() -> getPlugin
org.openjdk.tools.javac.platform.PlatformProvider -> org.openjdk.tools.javac.platform.PlatformProvider:
    java.lang.Iterable getSupportedPlatformNames() -> getSupportedPlatformNames
    org.openjdk.tools.javac.platform.PlatformDescription getPlatform(java.lang.String,java.lang.String) -> getPlatform
org.openjdk.tools.javac.platform.PlatformProvider$PlatformNotSupported -> org.openjdk.tools.javac.platform.PlatformProvider$PlatformNotSupported:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
org.openjdk.tools.javac.platform.PlatformUtils -> org.openjdk.tools.javac.platform.PlatformUtils:
    void <init>() -> <init>
    org.openjdk.tools.javac.platform.PlatformDescription lookupPlatformDescription(java.lang.String) -> lookupPlatformDescription
    java.util.Optional lambda$lookupPlatformDescription$1(java.lang.String,java.lang.String,org.openjdk.tools.javac.platform.PlatformProvider) -> lambda$lookupPlatformDescription$1
    boolean lambda$lookupPlatformDescription$0(java.lang.String,org.openjdk.tools.javac.platform.PlatformProvider) -> lambda$lookupPlatformDescription$0
org.openjdk.tools.javac.processing.AnnotationProcessingError -> org.openjdk.tools.javac.processing.AnnotationProcessingError:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Throwable) -> <init>
org.openjdk.tools.javac.processing.JavacFiler -> org.openjdk.tools.javac.processing.JavacFiler:
    java.lang.String ALREADY_OPENED -> ALREADY_OPENED
    java.lang.String NOT_FOR_READING -> NOT_FOR_READING
    java.lang.String NOT_FOR_WRITING -> NOT_FOR_WRITING
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.model.JavacElements elementUtils -> elementUtils
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.comp.Modules modules -> modules
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.util.Context context -> context
    boolean lastRound -> lastRound
    boolean lint -> lint
    java.util.Set initialInputs -> initialInputs
    java.util.Set fileObjectHistory -> fileObjectHistory
    java.util.Set openTypeNames -> openTypeNames
    java.util.Set generatedSourceNames -> generatedSourceNames
    java.util.Map generatedClasses -> generatedClasses
    java.util.Set generatedSourceFileObjects -> generatedSourceFileObjects
    java.util.Set aggregateGeneratedSourceNames -> aggregateGeneratedSourceNames
    java.util.Set aggregateGeneratedClassNames -> aggregateGeneratedClassNames
    java.util.Set initialClassNames -> initialClassNames
    java.lang.String defaultTargetModule -> defaultTargetModule
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.javax.tools.JavaFileObject createSourceFile(java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element[]) -> createSourceFile
    org.openjdk.javax.tools.JavaFileObject createClassFile(java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element[]) -> createClassFile
    org.openjdk.tools.javac.util.Pair checkOrInferModule(java.lang.CharSequence) -> checkOrInferModule
    org.openjdk.javax.tools.JavaFileObject createSourceOrClassFile(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,boolean,java.lang.String) -> createSourceOrClassFile
    org.openjdk.javax.tools.FileObject createResource(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.CharSequence,java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element[]) -> createResource
    void locationCheck(org.openjdk.javax.tools.JavaFileManager$Location) -> locationCheck
    org.openjdk.javax.tools.FileObject getResource(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.CharSequence,java.lang.CharSequence) -> getResource
    org.openjdk.tools.javac.processing.JavacFiler$Tuple3 checkOrInferModule(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.CharSequence,boolean) -> checkOrInferModule
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol inferModule(java.lang.String) -> inferModule
    void checkName(java.lang.String) -> checkName
    void checkName(java.lang.String,boolean) -> checkName
    boolean isPackageInfo(java.lang.String,boolean) -> isPackageInfo
    void checkNameAndExistence(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String,boolean) -> checkNameAndExistence
    void checkFileReopening(org.openjdk.javax.tools.FileObject,boolean) -> checkFileReopening
    boolean isInFileObjectHistory(org.openjdk.javax.tools.FileObject,boolean) -> isInFileObjectHistory
    boolean newFiles() -> newFiles
    java.util.Set getGeneratedSourceNames() -> getGeneratedSourceNames
    java.util.Set getGeneratedSourceFileObjects() -> getGeneratedSourceFileObjects
    java.util.Map getGeneratedClasses() -> getGeneratedClasses
    void warnIfUnclosedFiles() -> warnIfUnclosedFiles
    void newRound() -> newRound
    void setLastRound(boolean) -> setLastRound
    void setInitialState(java.util.Collection,java.util.Collection) -> setInitialState
    void close() -> close
    void clearRoundState() -> clearRoundState
    void displayState() -> displayState
    java.lang.String toString() -> toString
    void closeFileObject(org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String,org.openjdk.javax.tools.FileObject) -> closeFileObject
    java.util.Map lambda$closeFileObject$0(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$closeFileObject$0
    void access$000(org.openjdk.tools.javac.processing.JavacFiler,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String,org.openjdk.javax.tools.FileObject) -> access$000
org.openjdk.tools.javac.processing.JavacFiler$1 -> org.openjdk.tools.javac.processing.JavacFiler$1:
    int[] $SwitchMap$javax$tools$JavaFileObject$Kind -> $SwitchMap$javax$tools$JavaFileObject$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.processing.JavacFiler$FilerInputFileObject -> org.openjdk.tools.javac.processing.JavacFiler$FilerInputFileObject:
    org.openjdk.tools.javac.processing.JavacFiler this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacFiler,org.openjdk.javax.tools.FileObject) -> <init>
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.io.Writer openWriter() -> openWriter
    boolean delete() -> delete
org.openjdk.tools.javac.processing.JavacFiler$FilerInputJavaFileObject -> org.openjdk.tools.javac.processing.JavacFiler$FilerInputJavaFileObject:
    org.openjdk.javax.tools.JavaFileObject javaFileObject -> javaFileObject
    org.openjdk.tools.javac.processing.JavacFiler this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacFiler,org.openjdk.javax.tools.JavaFileObject) -> <init>
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
org.openjdk.tools.javac.processing.JavacFiler$FilerOutputFileObject -> org.openjdk.tools.javac.processing.JavacFiler$FilerOutputFileObject:
    boolean opened -> opened
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol mod -> mod
    java.lang.String name -> name
    org.openjdk.tools.javac.processing.JavacFiler this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacFiler,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String,org.openjdk.javax.tools.FileObject) -> <init>
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.io.Writer openWriter() -> openWriter
    java.io.InputStream openInputStream() -> openInputStream
    java.io.Reader openReader(boolean) -> openReader
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
    boolean delete() -> delete
org.openjdk.tools.javac.processing.JavacFiler$FilerOutputJavaFileObject -> org.openjdk.tools.javac.processing.JavacFiler$FilerOutputJavaFileObject:
    org.openjdk.javax.tools.JavaFileObject javaFileObject -> javaFileObject
    org.openjdk.tools.javac.processing.JavacFiler this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacFiler,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String,org.openjdk.javax.tools.JavaFileObject) -> <init>
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
org.openjdk.tools.javac.processing.JavacFiler$FilerOutputStream -> org.openjdk.tools.javac.processing.JavacFiler$FilerOutputStream:
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol mod -> mod
    java.lang.String typeName -> typeName
    org.openjdk.javax.tools.FileObject fileObject -> fileObject
    boolean closed -> closed
    org.openjdk.tools.javac.processing.JavacFiler this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacFiler,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String,org.openjdk.javax.tools.FileObject) -> <init>
    void close() -> close
org.openjdk.tools.javac.processing.JavacFiler$FilerWriter -> org.openjdk.tools.javac.processing.JavacFiler$FilerWriter:
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol mod -> mod
    java.lang.String typeName -> typeName
    org.openjdk.javax.tools.FileObject fileObject -> fileObject
    boolean closed -> closed
    org.openjdk.tools.javac.processing.JavacFiler this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacFiler,org.openjdk.tools.javac.code.Symbol$ModuleSymbol,java.lang.String,org.openjdk.javax.tools.FileObject) -> <init>
    void close() -> close
org.openjdk.tools.javac.processing.JavacFiler$Tuple3 -> org.openjdk.tools.javac.processing.JavacFiler$Tuple3:
    java.lang.Object a -> a
    java.lang.Object b -> b
    java.lang.Object c -> c
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
org.openjdk.tools.javac.processing.JavacMessager -> org.openjdk.tools.javac.processing.JavacMessager:
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment processingEnv -> processingEnv
    int errorCount -> errorCount
    int warningCount -> warningCount
    void <init>(org.openjdk.tools.javac.util.Context,org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> <init>
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence) -> printMessage
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element) -> printMessage
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror) -> printMessage
    void printMessage(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.CharSequence,org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.AnnotationMirror,org.openjdk.javax.lang.model.element.AnnotationValue) -> printMessage
    void printError(java.lang.String) -> printError
    void printWarning(java.lang.String) -> printWarning
    void printNotice(java.lang.String) -> printNotice
    boolean errorRaised() -> errorRaised
    int errorCount() -> errorCount
    int warningCount() -> warningCount
    void newRound() -> newRound
    java.lang.String toString() -> toString
org.openjdk.tools.javac.processing.JavacMessager$1 -> org.openjdk.tools.javac.processing.JavacMessager$1:
    int[] $SwitchMap$javax$tools$Diagnostic$Kind -> $SwitchMap$javax$tools$Diagnostic$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.processing.JavacProcessingEnvironment -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment:
    org.openjdk.tools.javac.util.Options options -> options
    boolean printProcessorInfo -> printProcessorInfo
    boolean printRounds -> printRounds
    boolean verbose -> verbose
    boolean lint -> lint
    boolean fatalErrors -> fatalErrors
    boolean werror -> werror
    boolean showResolveErrors -> showResolveErrors
    boolean allowModules -> allowModules
    org.openjdk.tools.javac.processing.JavacFiler filer -> filer
    org.openjdk.tools.javac.processing.JavacMessager messager -> messager
    org.openjdk.tools.javac.model.JavacElements elementUtils -> elementUtils
    org.openjdk.tools.javac.model.JavacTypes typeUtils -> typeUtils
    org.openjdk.tools.javac.main.JavaCompiler compiler -> compiler
    org.openjdk.tools.javac.comp.Modules modules -> modules
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.comp.Annotate annotate -> annotate
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors discoveredProcs -> discoveredProcs
    java.util.Map processorOptions -> processorOptions
    java.util.Set unmatchedProcessorOptions -> unmatchedProcessorOptions
    java.util.Set platformAnnotations -> platformAnnotations
    java.util.Set specifiedPackages -> specifiedPackages
    org.openjdk.tools.javac.util.Log log -> log
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.code.Source source -> source
    java.lang.ClassLoader processorClassLoader -> processorClassLoader
    java.util.ServiceLoader serviceLoader -> serviceLoader
    java.lang.SecurityException processorLoaderException -> processorLoaderException
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.tools.javac.util.JavacMessages messages -> messages
    org.openjdk.tools.javac.api.MultiTaskListener taskListener -> taskListener
    org.openjdk.tools.javac.code.Symtab symtab -> symtab
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.comp.Enter enter -> enter
    org.openjdk.tools.javac.code.Symbol$Completer initialCompleter -> initialCompleter
    org.openjdk.tools.javac.comp.Check chk -> chk
    org.openjdk.tools.javac.util.Context context -> context
    org.openjdk.tools.javac.tree.TreeScanner treeCleaner -> treeCleaner
    java.util.regex.Pattern noMatches -> noMatches
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void setProcessors(java.lang.Iterable) -> setProcessors
    java.util.Set initPlatformAnnotations() -> initPlatformAnnotations
    void initProcessorLoader() -> initProcessorLoader
    void initProcessorIterator(java.lang.Iterable) -> initProcessorIterator
    java.util.ServiceLoader getServiceLoader(java.lang.Class) -> getServiceLoader
    java.util.Iterator handleServiceLoaderUnavailability(java.lang.String,java.lang.Exception) -> handleServiceLoaderUnavailability
    void handleException(java.lang.String,java.lang.Exception) -> handleException
    boolean atLeastOneProcessor() -> atLeastOneProcessor
    java.util.Map initProcessorOptions() -> initProcessorOptions
    java.util.Set initUnmatchedProcessorOptions() -> initUnmatchedProcessorOptions
    void discoverAndRunProcs(java.util.Set,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> discoverAndRunProcs
    boolean callProcessor(org.openjdk.javax.annotation.processing.Processor,java.util.Set,org.openjdk.javax.annotation.processing.RoundEnvironment) -> callProcessor
    boolean doProcessing(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,java.lang.Iterable,org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler) -> doProcessing
    void warnIfUnmatchedOptions() -> warnIfUnmatchedOptions
    void close() -> close
    org.openjdk.tools.javac.util.List getTopLevelClasses(org.openjdk.tools.javac.util.List) -> getTopLevelClasses
    org.openjdk.tools.javac.util.List getTopLevelClassesFromClasses(org.openjdk.tools.javac.util.List) -> getTopLevelClassesFromClasses
    org.openjdk.tools.javac.util.List getPackageInfoFiles(org.openjdk.tools.javac.util.List) -> getPackageInfoFiles
    org.openjdk.tools.javac.util.List getPackageInfoFilesFromClasses(org.openjdk.tools.javac.util.List) -> getPackageInfoFilesFromClasses
    org.openjdk.tools.javac.util.List getModuleInfoFiles(org.openjdk.tools.javac.util.List) -> getModuleInfoFiles
    org.openjdk.tools.javac.util.List join(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> join
    boolean isPkgInfo(org.openjdk.javax.tools.JavaFileObject,org.openjdk.javax.tools.JavaFileObject$Kind) -> isPkgInfo
    boolean isPkgInfo(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> isPkgInfo
    boolean isModuleInfo(org.openjdk.javax.tools.JavaFileObject,org.openjdk.javax.tools.JavaFileObject$Kind) -> isModuleInfo
    boolean needClassLoader(java.lang.String,java.lang.Iterable) -> needClassLoader
    boolean moreToDo() -> moreToDo
    java.util.Map getOptions() -> getOptions
    org.openjdk.javax.annotation.processing.Messager getMessager() -> getMessager
    org.openjdk.tools.javac.processing.JavacFiler getFiler() -> getFiler
    org.openjdk.tools.javac.model.JavacElements getElementUtils() -> getElementUtils
    org.openjdk.tools.javac.model.JavacTypes getTypeUtils() -> getTypeUtils
    org.openjdk.javax.lang.model.SourceVersion getSourceVersion() -> getSourceVersion
    java.util.Locale getLocale() -> getLocale
    java.util.Set getSpecifiedPackages() -> getSpecifiedPackages
    java.util.regex.Pattern importStringToPattern(boolean,java.lang.String,org.openjdk.javax.annotation.processing.Processor,org.openjdk.tools.javac.util.Log) -> importStringToPattern
    org.openjdk.tools.javac.util.Context getContext() -> getContext
    java.lang.ClassLoader getProcessorClassLoader() -> getProcessorClassLoader
    java.lang.String toString() -> toString
    boolean isValidOptionName(java.lang.String) -> isValidOptionName
    org.openjdk.javax.lang.model.util.Types getTypeUtils() -> getTypeUtils
    org.openjdk.javax.lang.model.util.Elements getElementUtils() -> getElementUtils
    org.openjdk.javax.annotation.processing.Filer getFiler() -> getFiler
    java.util.Iterator lambda$initProcessorIterator$0(java.util.Iterator) -> lambda$initProcessorIterator$0
    java.util.Iterator access$000(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,java.lang.String,java.lang.Exception) -> access$000
    java.util.regex.Pattern access$100(boolean,java.lang.String,org.openjdk.javax.annotation.processing.Processor,org.openjdk.tools.javac.util.Log) -> access$100
    boolean access$200(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$200
    boolean access$300(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.javax.annotation.processing.Processor,java.util.Set,org.openjdk.javax.annotation.processing.RoundEnvironment) -> access$300
    org.openjdk.tools.javac.main.JavaCompiler access$400(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$400
    org.openjdk.tools.javac.util.List access$500(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.tools.javac.util.List) -> access$500
    org.openjdk.tools.javac.util.List access$600(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.tools.javac.util.List) -> access$600
    org.openjdk.tools.javac.util.List access$700(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.tools.javac.util.List) -> access$700
    org.openjdk.tools.javac.util.List access$800(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.tools.javac.util.List) -> access$800
    org.openjdk.tools.javac.util.List access$900(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> access$900
    org.openjdk.tools.javac.util.List access$1000(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.tools.javac.util.List) -> access$1000
    org.openjdk.tools.javac.processing.JavacMessager access$1100(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$1100
    boolean access$1200(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$1200
    boolean access$1300(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$1300
    org.openjdk.tools.javac.model.JavacElements access$1400(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$1400
    org.openjdk.tools.javac.util.Names access$1500(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$1500
    boolean access$1600(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.javax.tools.JavaFileObject,org.openjdk.javax.tools.JavaFileObject$Kind) -> access$1600
    org.openjdk.tools.javac.code.Symtab access$1700(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$1700
    org.openjdk.tools.javac.code.Symbol$Completer access$1800(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$1800
    org.openjdk.tools.javac.api.MultiTaskListener access$1900(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$1900
    org.openjdk.tools.javac.processing.JavacFiler access$2000(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$2000
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors access$2100(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$2100
    void access$2200(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,java.util.Set,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> access$2200
    boolean access$2300(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$2300
    boolean access$2400(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$2400
    org.openjdk.tools.javac.comp.Enter access$2500(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$2500
    org.openjdk.tools.javac.tree.TreeScanner access$2600(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$2600
    org.openjdk.tools.javac.comp.Check access$2700(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$2700
    org.openjdk.tools.javac.comp.Modules access$2800(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$2800
    org.openjdk.tools.javac.code.Types access$2900(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$2900
    org.openjdk.tools.javac.comp.Annotate access$3000(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> access$3000
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$1 -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$1:
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit topLevel -> topLevel
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void visitTopLevel(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> visitTopLevel
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void lambda$visitTopLevel$0(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.code.Symbol) -> lambda$visitTopLevel$0
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$2 -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$2:
    int[] $SwitchMap$javax$tools$Diagnostic$Kind -> $SwitchMap$javax$tools$Diagnostic$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$ComputeAnnotationSet -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$ComputeAnnotationSet:
    org.openjdk.javax.lang.model.util.Elements elements -> elements
    void <init>(org.openjdk.javax.lang.model.util.Elements) -> <init>
    java.util.Set visitPackage(org.openjdk.javax.lang.model.element.PackageElement,java.util.Set) -> visitPackage
    java.util.Set visitType(org.openjdk.javax.lang.model.element.TypeElement,java.util.Set) -> visitType
    java.util.Set visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.util.Set) -> visitExecutable
    void addAnnotations(org.openjdk.javax.lang.model.element.Element,java.util.Set) -> addAnnotations
    java.util.Set scan(org.openjdk.javax.lang.model.element.Element,java.util.Set) -> scan
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutable
    java.lang.Object visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitType
    java.lang.Object visitPackage(org.openjdk.javax.lang.model.element.PackageElement,java.lang.Object) -> visitPackage
    java.lang.Object scan(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> scan
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors:
    java.util.Iterator processorIterator -> processorIterator
    java.util.ArrayList procStateList -> procStateList
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment this$0 -> this$0
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator iterator() -> iterator
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,java.util.Iterator) -> <init>
    void close() -> close
    java.util.Iterator iterator() -> iterator
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors$ProcessorStateIterator:
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors psi -> psi
    java.util.Iterator innerIter -> innerIter
    boolean onProcInterator -> onProcInterator
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors this$1 -> this$1
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors,org.openjdk.tools.javac.processing.JavacProcessingEnvironment$DiscoveredProcessors) -> <init>
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment$ProcessorState next() -> next
    boolean hasNext() -> hasNext
    void remove() -> remove
    void runContributingProcs(org.openjdk.javax.annotation.processing.RoundEnvironment) -> runContributingProcs
    java.lang.Object next() -> next
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$ImplicitCompleter -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$ImplicitCompleter:
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit topLevel -> topLevel
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> <init>
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$NameProcessIterator:
    org.openjdk.javax.annotation.processing.Processor nextProc -> nextProc
    java.util.Iterator names -> names
    java.lang.ClassLoader processorCL -> processorCL
    org.openjdk.tools.javac.util.Log log -> log
    void <init>(java.lang.String,java.lang.ClassLoader,org.openjdk.tools.javac.util.Log) -> <init>
    boolean hasNext() -> hasNext
    org.openjdk.javax.annotation.processing.Processor getNextProcessor(java.lang.String) -> getNextProcessor
    org.openjdk.javax.annotation.processing.Processor next() -> next
    void remove() -> remove
    void ensureReadable(java.lang.Class) -> ensureReadable
    java.lang.Object next() -> next
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$NameServiceIterator -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$NameServiceIterator:
    java.util.Map namedProcessorsMap -> namedProcessorsMap
    java.util.Iterator processorNames -> processorNames
    org.openjdk.javax.annotation.processing.Processor nextProc -> nextProc
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,java.util.ServiceLoader,org.openjdk.tools.javac.util.Log,java.lang.String) -> <init>
    boolean internalHasNext() -> internalHasNext
    org.openjdk.javax.annotation.processing.Processor internalNext() -> internalNext
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$ProcessorState -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$ProcessorState:
    org.openjdk.javax.annotation.processing.Processor processor -> processor
    boolean contributed -> contributed
    java.util.ArrayList supportedAnnotationPatterns -> supportedAnnotationPatterns
    java.util.ArrayList supportedOptionNames -> supportedOptionNames
    void <init>(org.openjdk.javax.annotation.processing.Processor,org.openjdk.tools.javac.util.Log,org.openjdk.tools.javac.code.Source,boolean,org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> <init>
    void checkSourceVersionCompatibility(org.openjdk.tools.javac.code.Source,org.openjdk.tools.javac.util.Log) -> checkSourceVersionCompatibility
    boolean checkOptionName(java.lang.String,org.openjdk.tools.javac.util.Log) -> checkOptionName
    boolean annotationSupported(java.lang.String) -> annotationSupported
    void removeSupportedOptions(java.util.Set) -> removeSupportedOptions
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$Round -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$Round:
    int number -> number
    org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler deferredDiagnosticHandler -> deferredDiagnosticHandler
    org.openjdk.tools.javac.util.List roots -> roots
    java.util.Set treesToClean -> treesToClean
    java.util.Map genClassFiles -> genClassFiles
    java.util.Set annotationsPresent -> annotationsPresent
    org.openjdk.tools.javac.util.List topLevelClasses -> topLevelClasses
    org.openjdk.tools.javac.util.List packageInfoFiles -> packageInfoFiles
    org.openjdk.tools.javac.util.List moduleInfoFiles -> moduleInfoFiles
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,int,java.util.Set,org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler) -> <init>
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,java.util.Set,org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler) -> <init>
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,org.openjdk.tools.javac.processing.JavacProcessingEnvironment$Round,java.util.Set,java.util.Map) -> <init>
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment$Round next(java.util.Set,java.util.Map) -> next
    void finalCompiler() -> finalCompiler
    int errorCount() -> errorCount
    int warningCount() -> warningCount
    boolean unrecoverableError() -> unrecoverableError
    void findAnnotationsPresent() -> findAnnotationsPresent
    org.openjdk.tools.javac.util.List enterClassFiles(java.util.Map) -> enterClassFiles
    void enterTrees(org.openjdk.tools.javac.util.List) -> enterTrees
    void run(boolean,boolean) -> run
    void showDiagnostics(boolean) -> showDiagnostics
    void printRoundInfo(boolean) -> printRoundInfo
    void newRound() -> newRound
    java.util.Map lambda$new$0(org.openjdk.tools.javac.code.Symbol$ModuleSymbol) -> lambda$new$0
org.openjdk.tools.javac.processing.JavacProcessingEnvironment$ServiceIterator -> org.openjdk.tools.javac.processing.JavacProcessingEnvironment$ServiceIterator:
    java.util.Iterator iterator -> iterator
    org.openjdk.tools.javac.util.Log log -> log
    java.util.ServiceLoader loader -> loader
    org.openjdk.tools.javac.processing.JavacProcessingEnvironment this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,java.lang.ClassLoader,org.openjdk.tools.javac.util.Log) -> <init>
    void <init>(org.openjdk.tools.javac.processing.JavacProcessingEnvironment,java.util.ServiceLoader,org.openjdk.tools.javac.util.Log) -> <init>
    boolean hasNext() -> hasNext
    boolean internalHasNext() -> internalHasNext
    org.openjdk.javax.annotation.processing.Processor next() -> next
    org.openjdk.javax.annotation.processing.Processor internalNext() -> internalNext
    void remove() -> remove
    void close() -> close
    java.lang.Object next() -> next
org.openjdk.tools.javac.processing.JavacRoundEnvironment -> org.openjdk.tools.javac.processing.JavacRoundEnvironment:
    boolean processingOver -> processingOver
    boolean errorRaised -> errorRaised
    org.openjdk.javax.annotation.processing.ProcessingEnvironment processingEnv -> processingEnv
    org.openjdk.javax.lang.model.util.Elements eltUtils -> eltUtils
    java.util.Set rootElements -> rootElements
    java.lang.String NOT_AN_ANNOTATION_TYPE -> NOT_AN_ANNOTATION_TYPE
    void <init>(boolean,boolean,java.util.Set,org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> <init>
    java.lang.String toString() -> toString
    boolean processingOver() -> processingOver
    boolean errorRaised() -> errorRaised
    java.util.Set getRootElements() -> getRootElements
    java.util.Set getElementsAnnotatedWith(org.openjdk.javax.lang.model.element.TypeElement) -> getElementsAnnotatedWith
    java.util.Set getElementsAnnotatedWithAny(org.openjdk.javax.lang.model.element.TypeElement[]) -> getElementsAnnotatedWithAny
    java.util.Set getElementsAnnotatedWith(java.lang.Class) -> getElementsAnnotatedWith
    java.util.Set getElementsAnnotatedWithAny(java.util.Set) -> getElementsAnnotatedWithAny
    org.openjdk.javax.lang.model.element.Element mirrorAsElement(org.openjdk.javax.lang.model.element.AnnotationMirror) -> mirrorAsElement
    void throwIfNotAnnotation(java.lang.Class) -> throwIfNotAnnotation
    void throwIfNotAnnotation(org.openjdk.javax.lang.model.element.TypeElement) -> throwIfNotAnnotation
    org.openjdk.javax.lang.model.util.Elements access$000(org.openjdk.tools.javac.processing.JavacRoundEnvironment) -> access$000
    org.openjdk.javax.lang.model.element.Element access$100(org.openjdk.tools.javac.processing.JavacRoundEnvironment,org.openjdk.javax.lang.model.element.AnnotationMirror) -> access$100
org.openjdk.tools.javac.processing.JavacRoundEnvironment$AnnotationSetMultiScanner -> org.openjdk.tools.javac.processing.JavacRoundEnvironment$AnnotationSetMultiScanner:
    java.util.Set annotatedElements -> annotatedElements
    org.openjdk.tools.javac.processing.JavacRoundEnvironment this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacRoundEnvironment,java.util.Set) -> <init>
    java.util.Set scan(org.openjdk.javax.lang.model.element.Element,java.util.Set) -> scan
    java.lang.Object scan(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> scan
org.openjdk.tools.javac.processing.JavacRoundEnvironment$AnnotationSetScanner -> org.openjdk.tools.javac.processing.JavacRoundEnvironment$AnnotationSetScanner:
    java.util.Set annotatedElements -> annotatedElements
    org.openjdk.tools.javac.processing.JavacRoundEnvironment this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.JavacRoundEnvironment,java.util.Set) -> <init>
    java.util.Set scan(org.openjdk.javax.lang.model.element.Element,org.openjdk.javax.lang.model.element.TypeElement) -> scan
    java.lang.Object scan(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> scan
org.openjdk.tools.javac.processing.JavacRoundEnvironment$ElementScanningIncludingTypeParameters -> org.openjdk.tools.javac.processing.JavacRoundEnvironment$ElementScanningIncludingTypeParameters:
    void <init>(java.lang.Object) -> <init>
    java.lang.Object visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitType
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutable
org.openjdk.tools.javac.processing.PrintingProcessor -> org.openjdk.tools.javac.processing.PrintingProcessor:
    java.io.PrintWriter writer -> writer
    void <init>() -> <init>
    void setWriter(java.io.Writer) -> setWriter
    boolean process(java.util.Set,org.openjdk.javax.annotation.processing.RoundEnvironment) -> process
    void print(org.openjdk.javax.lang.model.element.Element) -> print
org.openjdk.tools.javac.processing.PrintingProcessor$1 -> org.openjdk.tools.javac.processing.PrintingProcessor$1:
    int[] $SwitchMap$javax$lang$model$element$ElementKind -> $SwitchMap$javax$lang$model$element$ElementKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor -> org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor:
    int indentation -> indentation
    java.io.PrintWriter writer -> writer
    org.openjdk.javax.lang.model.util.Elements elementUtils -> elementUtils
    java.lang.String[] spaces -> spaces
    void <init>(java.io.Writer,org.openjdk.javax.lang.model.util.Elements) -> <init>
    org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor defaultAction(org.openjdk.javax.lang.model.element.Element,java.lang.Boolean) -> defaultAction
    org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Boolean) -> visitExecutable
    org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Boolean) -> visitType
    org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Boolean) -> visitVariable
    org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor visitTypeParameter(org.openjdk.javax.lang.model.element.TypeParameterElement,java.lang.Boolean) -> visitTypeParameter
    org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor visitPackage(org.openjdk.javax.lang.model.element.PackageElement,java.lang.Boolean) -> visitPackage
    org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor visitModule(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.Boolean) -> visitModule
    void printDirective(org.openjdk.javax.lang.model.element.ModuleElement$Directive) -> printDirective
    void flush() -> flush
    void printDocComment(org.openjdk.javax.lang.model.element.Element) -> printDocComment
    void printModifiers(org.openjdk.javax.lang.model.element.Element) -> printModifiers
    void printFormalTypeParameters(org.openjdk.javax.lang.model.element.Parameterizable,boolean) -> printFormalTypeParameters
    void printAnnotationsInline(org.openjdk.javax.lang.model.element.Element) -> printAnnotationsInline
    void printAnnotations(org.openjdk.javax.lang.model.element.Element) -> printAnnotations
    void printParameters(org.openjdk.javax.lang.model.element.ExecutableElement) -> printParameters
    void printInterfaces(org.openjdk.javax.lang.model.element.TypeElement) -> printInterfaces
    void printThrows(org.openjdk.javax.lang.model.element.ExecutableElement) -> printThrows
    void indent() -> indent
    java.lang.Object visitModule(org.openjdk.javax.lang.model.element.ModuleElement,java.lang.Object) -> visitModule
    java.lang.Object visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariable
    java.lang.Object visitTypeParameter(org.openjdk.javax.lang.model.element.TypeParameterElement,java.lang.Object) -> visitTypeParameter
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutable
    java.lang.Object visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitType
    java.lang.Object visitPackage(org.openjdk.javax.lang.model.element.PackageElement,java.lang.Object) -> visitPackage
    java.lang.Object defaultAction(org.openjdk.javax.lang.model.element.Element,java.lang.Object) -> defaultAction
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor$1 -> org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor$1:
    org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor this$0 -> this$0
    void <init>(org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor) -> <init>
    org.openjdk.javax.lang.model.element.NestingKind visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Void) -> visitType
    java.lang.Object visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitType
org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor$PrintDirective -> org.openjdk.tools.javac.processing.PrintingProcessor$PrintingElementVisitor$PrintDirective:
    java.io.PrintWriter writer -> writer
    void <init>(java.io.PrintWriter) -> <init>
    java.lang.Void visitExports(org.openjdk.javax.lang.model.element.ModuleElement$ExportsDirective,java.lang.Void) -> visitExports
    java.lang.Void visitOpens(org.openjdk.javax.lang.model.element.ModuleElement$OpensDirective,java.lang.Void) -> visitOpens
    java.lang.Void visitProvides(org.openjdk.javax.lang.model.element.ModuleElement$ProvidesDirective,java.lang.Void) -> visitProvides
    java.lang.Void visitRequires(org.openjdk.javax.lang.model.element.ModuleElement$RequiresDirective,java.lang.Void) -> visitRequires
    java.lang.Void visitUses(org.openjdk.javax.lang.model.element.ModuleElement$UsesDirective,java.lang.Void) -> visitUses
    void printModuleList(java.util.List) -> printModuleList
    void printNameableList(java.util.List) -> printNameableList
    java.lang.Object visitProvides(org.openjdk.javax.lang.model.element.ModuleElement$ProvidesDirective,java.lang.Object) -> visitProvides
    java.lang.Object visitUses(org.openjdk.javax.lang.model.element.ModuleElement$UsesDirective,java.lang.Object) -> visitUses
    java.lang.Object visitOpens(org.openjdk.javax.lang.model.element.ModuleElement$OpensDirective,java.lang.Object) -> visitOpens
    java.lang.Object visitExports(org.openjdk.javax.lang.model.element.ModuleElement$ExportsDirective,java.lang.Object) -> visitExports
    java.lang.Object visitRequires(org.openjdk.javax.lang.model.element.ModuleElement$RequiresDirective,java.lang.Object) -> visitRequires
org.openjdk.tools.javac.processing.ServiceProxy -> org.openjdk.tools.javac.processing.ServiceProxy:
    java.lang.String prefix -> prefix
    void <init>() -> <init>
    void fail(java.lang.Class,java.lang.String) -> fail
    void fail(java.lang.Class,java.net.URL,int,java.lang.String) -> fail
    boolean parse(java.lang.Class,java.net.URL) -> parse
    boolean hasService(java.lang.Class,java.net.URL[]) -> hasService
org.openjdk.tools.javac.processing.ServiceProxy$ServiceConfigurationError -> org.openjdk.tools.javac.processing.ServiceProxy$ServiceConfigurationError:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.javac.resources.CompilerProperties -> org.openjdk.tools.javac.resources.CompilerProperties:
    void <init>() -> <init>
org.openjdk.tools.javac.resources.CompilerProperties$Errors -> org.openjdk.tools.javac.resources.CompilerProperties$Errors:
    org.openjdk.tools.javac.util.JCDiagnostic$Error AbstractMethCantHaveBody -> AbstractMethCantHaveBody
    org.openjdk.tools.javac.util.JCDiagnostic$Error AddmodsAllModulePathInvalid -> AddmodsAllModulePathInvalid
    org.openjdk.tools.javac.util.JCDiagnostic$Error AlreadyAnnotated -> AlreadyAnnotated
    org.openjdk.tools.javac.util.JCDiagnostic$Error AlreadyDefinedThisUnit -> AlreadyDefinedThisUnit
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnnotationTypeNotApplicable -> AnnotationTypeNotApplicable
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnnotationValueMustBeAnnotation -> AnnotationValueMustBeAnnotation
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnnotationValueMustBeNameValue -> AnnotationValueMustBeNameValue
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnnotationValueNotAllowableType -> AnnotationValueNotAllowableType
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnonClassImplIntfNoArgs -> AnonClassImplIntfNoArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnonClassImplIntfNoQualForNew -> AnonClassImplIntfNoQualForNew
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnonClassImplIntfNoTypeargs -> AnonClassImplIntfNoTypeargs
    org.openjdk.tools.javac.util.JCDiagnostic$Error ArrayAndReceiver -> ArrayAndReceiver
    org.openjdk.tools.javac.util.JCDiagnostic$Error ArrayDimensionMissing -> ArrayDimensionMissing
    org.openjdk.tools.javac.util.JCDiagnostic$Error AssertAsIdentifier -> AssertAsIdentifier
    org.openjdk.tools.javac.util.JCDiagnostic$Error AttributeValueMustBeConstant -> AttributeValueMustBeConstant
    org.openjdk.tools.javac.util.JCDiagnostic$Error BadFunctionalIntfAnno -> BadFunctionalIntfAnno
    org.openjdk.tools.javac.util.JCDiagnostic$Error BreakOutsideSwitchLoop -> BreakOutsideSwitchLoop
    org.openjdk.tools.javac.util.JCDiagnostic$Error CannotCreateArrayWithDiamond -> CannotCreateArrayWithDiamond
    org.openjdk.tools.javac.util.JCDiagnostic$Error CannotCreateArrayWithTypeArguments -> CannotCreateArrayWithTypeArguments
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantAssignValToThis -> CantAssignValToThis
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantExtendIntfAnnotation -> CantExtendIntfAnnotation
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantInheritFromAnon -> CantInheritFromAnon
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantReadFile -> CantReadFile
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantSelectStaticClassFromParamType -> CantSelectStaticClassFromParamType
    org.openjdk.tools.javac.util.JCDiagnostic$Error CatchWithoutTry -> CatchWithoutTry
    org.openjdk.tools.javac.util.JCDiagnostic$Error ClassNotAllowed -> ClassNotAllowed
    org.openjdk.tools.javac.util.JCDiagnostic$Error ConstExprReq -> ConstExprReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error ContOutsideLoop -> ContOutsideLoop
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcBadEntity -> DcBadEntity
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcBadGt -> DcBadGt
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcBadInlineTag -> DcBadInlineTag
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcGtExpected -> DcGtExpected
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcIdentifierExpected -> DcIdentifierExpected
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcMalformedHtml -> DcMalformedHtml
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcMissingSemicolon -> DcMissingSemicolon
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcNoContent -> DcNoContent
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcNoTagName -> DcNoTagName
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcRefBadParens -> DcRefBadParens
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcRefSyntaxError -> DcRefSyntaxError
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcRefUnexpectedInput -> DcRefUnexpectedInput
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcUnexpectedContent -> DcUnexpectedContent
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcUnterminatedInlineTag -> DcUnterminatedInlineTag
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcUnterminatedSignature -> DcUnterminatedSignature
    org.openjdk.tools.javac.util.JCDiagnostic$Error DcUnterminatedString -> DcUnterminatedString
    org.openjdk.tools.javac.util.JCDiagnostic$Error DefaultAllowedInIntfAnnotationMember -> DefaultAllowedInIntfAnnotationMember
    org.openjdk.tools.javac.util.JCDiagnostic$Error DotClassExpected -> DotClassExpected
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateCaseLabel -> DuplicateCaseLabel
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateDefaultLabel -> DuplicateDefaultLabel
    org.openjdk.tools.javac.util.JCDiagnostic$Error ElseWithoutIf -> ElseWithoutIf
    org.openjdk.tools.javac.util.JCDiagnostic$Error EmptyCharLit -> EmptyCharLit
    org.openjdk.tools.javac.util.JCDiagnostic$Error EnumAnnotationMustBeEnumConstant -> EnumAnnotationMustBeEnumConstant
    org.openjdk.tools.javac.util.JCDiagnostic$Error EnumAsIdentifier -> EnumAsIdentifier
    org.openjdk.tools.javac.util.JCDiagnostic$Error EnumCantBeInstantiated -> EnumCantBeInstantiated
    org.openjdk.tools.javac.util.JCDiagnostic$Error EnumLabelMustBeUnqualifiedEnum -> EnumLabelMustBeUnqualifiedEnum
    org.openjdk.tools.javac.util.JCDiagnostic$Error EnumNoFinalize -> EnumNoFinalize
    org.openjdk.tools.javac.util.JCDiagnostic$Error EnumNoSubclassing -> EnumNoSubclassing
    org.openjdk.tools.javac.util.JCDiagnostic$Error EnumTypesNotExtensible -> EnumTypesNotExtensible
    org.openjdk.tools.javac.util.JCDiagnostic$Error EnumsMustBeStatic -> EnumsMustBeStatic
    org.openjdk.tools.javac.util.JCDiagnostic$Error Error -> Error
    org.openjdk.tools.javac.util.JCDiagnostic$Error ExpectedModule -> ExpectedModule
    org.openjdk.tools.javac.util.JCDiagnostic$Error ExpectedModuleOrOpen -> ExpectedModuleOrOpen
    org.openjdk.tools.javac.util.JCDiagnostic$Error ExpressionNotAllowableAsAnnotationValue -> ExpressionNotAllowableAsAnnotationValue
    org.openjdk.tools.javac.util.JCDiagnostic$Error FileSbOnSourceOrPatchPathForModule -> FileSbOnSourceOrPatchPathForModule
    org.openjdk.tools.javac.util.JCDiagnostic$Error FinallyWithoutTry -> FinallyWithoutTry
    org.openjdk.tools.javac.util.JCDiagnostic$Error FpNumberTooLarge -> FpNumberTooLarge
    org.openjdk.tools.javac.util.JCDiagnostic$Error FpNumberTooSmall -> FpNumberTooSmall
    org.openjdk.tools.javac.util.JCDiagnostic$Error GenericArrayCreation -> GenericArrayCreation
    org.openjdk.tools.javac.util.JCDiagnostic$Error GenericThrowable -> GenericThrowable
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalDot -> IllegalDot
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalEnumStaticRef -> IllegalEnumStaticRef
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalEscChar -> IllegalEscChar
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalForwardRef -> IllegalForwardRef
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalGenericTypeForInstof -> IllegalGenericTypeForInstof
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalLineEndInCharLit -> IllegalLineEndInCharLit
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalNonasciiDigit -> IllegalNonasciiDigit
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalSelfRef -> IllegalSelfRef
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalStartOfExpr -> IllegalStartOfExpr
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalStartOfStmt -> IllegalStartOfStmt
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalStartOfType -> IllegalStartOfType
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalUnderscore -> IllegalUnderscore
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalUnicodeEsc -> IllegalUnicodeEsc
    org.openjdk.tools.javac.util.JCDiagnostic$Error ImproperlyFormedTypeInnerRawParam -> ImproperlyFormedTypeInnerRawParam
    org.openjdk.tools.javac.util.JCDiagnostic$Error ImproperlyFormedTypeParamMissing -> ImproperlyFormedTypeParamMissing
    org.openjdk.tools.javac.util.JCDiagnostic$Error InitializerMustBeAbleToCompleteNormally -> InitializerMustBeAbleToCompleteNormally
    org.openjdk.tools.javac.util.JCDiagnostic$Error InitializerNotAllowed -> InitializerNotAllowed
    org.openjdk.tools.javac.util.JCDiagnostic$Error IntfAnnotationMembersCantHaveParams -> IntfAnnotationMembersCantHaveParams
    org.openjdk.tools.javac.util.JCDiagnostic$Error IntfAnnotationMembersCantHaveTypeParams -> IntfAnnotationMembersCantHaveTypeParams
    org.openjdk.tools.javac.util.JCDiagnostic$Error IntfExpectedHere -> IntfExpectedHere
    org.openjdk.tools.javac.util.JCDiagnostic$Error IntfMethCantHaveBody -> IntfMethCantHaveBody
    org.openjdk.tools.javac.util.JCDiagnostic$Error IntfNotAllowedHere -> IntfNotAllowedHere
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidBinaryNumber -> InvalidBinaryNumber
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidHexNumber -> InvalidHexNumber
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidMethDeclRetTypeReq -> InvalidMethDeclRetTypeReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidModuleDirective -> InvalidModuleDirective
    org.openjdk.tools.javac.util.JCDiagnostic$Error IoException -> IoException
    org.openjdk.tools.javac.util.JCDiagnostic$Error LambdaBodyNeitherValueNorVoidCompatible -> LambdaBodyNeitherValueNorVoidCompatible
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitCode -> LimitCode
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitCodeTooLargeForTryStmt -> LimitCodeTooLargeForTryStmt
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitDimensions -> LimitDimensions
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitLocals -> LimitLocals
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitParameters -> LimitParameters
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitPool -> LimitPool
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitPoolInClass -> LimitPoolInClass
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitStack -> LimitStack
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitString -> LimitString
    org.openjdk.tools.javac.util.JCDiagnostic$Error LimitStringOverflow -> LimitStringOverflow
    org.openjdk.tools.javac.util.JCDiagnostic$Error LocalEnum -> LocalEnum
    org.openjdk.tools.javac.util.JCDiagnostic$Error MalformedFpLit -> MalformedFpLit
    org.openjdk.tools.javac.util.JCDiagnostic$Error MethodDoesNotOverrideSuperclass -> MethodDoesNotOverrideSuperclass
    org.openjdk.tools.javac.util.JCDiagnostic$Error MissingMethBodyOrDeclAbstract -> MissingMethBodyOrDeclAbstract
    org.openjdk.tools.javac.util.JCDiagnostic$Error MissingRetStmt -> MissingRetStmt
    org.openjdk.tools.javac.util.JCDiagnostic$Error ModuleDeclSbInModuleInfoJava -> ModuleDeclSbInModuleInfoJava
    org.openjdk.tools.javac.util.JCDiagnostic$Error ModuleNotFoundOnModuleSourcePath -> ModuleNotFoundOnModuleSourcePath
    org.openjdk.tools.javac.util.JCDiagnostic$Error ModulesourcepathMustBeSpecifiedWithDashMOption -> ModulesourcepathMustBeSpecifiedWithDashMOption
    org.openjdk.tools.javac.util.JCDiagnostic$Error NameReservedForInternalUse -> NameReservedForInternalUse
    org.openjdk.tools.javac.util.JCDiagnostic$Error NativeMethCantHaveBody -> NativeMethCantHaveBody
    org.openjdk.tools.javac.util.JCDiagnostic$Error NewNotAllowedInAnnotation -> NewNotAllowedInAnnotation
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoAnnotationMember -> NoAnnotationMember
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoAnnotationsOnDotClass -> NoAnnotationsOnDotClass
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoEnclInstanceOfTypeInScope -> NoEnclInstanceOfTypeInScope
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoIntfExpectedHere -> NoIntfExpectedHere
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoMatchEntry -> NoMatchEntry
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoOpensUnlessStrong -> NoOpensUnlessStrong
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoOutputDir -> NoOutputDir
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoPkgInModuleInfoJava -> NoPkgInModuleInfoJava
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotAnnotationType -> NotAnnotationType
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotInModuleOnModuleSourcePath -> NotInModuleOnModuleSourcePath
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotStmt -> NotStmt
    org.openjdk.tools.javac.util.JCDiagnostic$Error OutputDirMustBeSpecifiedWithDashMOption -> OutputDirMustBeSpecifiedWithDashMOption
    org.openjdk.tools.javac.util.JCDiagnostic$Error PkgAnnotationsSbInPackageInfoJava -> PkgAnnotationsSbInPackageInfoJava
    org.openjdk.tools.javac.util.JCDiagnostic$Error PrematureEof -> PrematureEof
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcBadConfigFile -> ProcBadConfigFile
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcCantAccess -> ProcCantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcCantCreateLoader -> ProcCantCreateLoader
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcNoService -> ProcNoService
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcProcessorBadOptionName -> ProcProcessorBadOptionName
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcServiceProblem -> ProcServiceProblem
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcessorpathNoProcessormodulepath -> ProcessorpathNoProcessormodulepath
    org.openjdk.tools.javac.util.JCDiagnostic$Error RecursiveCtorInvocation -> RecursiveCtorInvocation
    org.openjdk.tools.javac.util.JCDiagnostic$Error RepeatedAnnotationTarget -> RepeatedAnnotationTarget
    org.openjdk.tools.javac.util.JCDiagnostic$Error RepeatedInterface -> RepeatedInterface
    org.openjdk.tools.javac.util.JCDiagnostic$Error RepeatedModifier -> RepeatedModifier
    org.openjdk.tools.javac.util.JCDiagnostic$Error RetOutsideMeth -> RetOutsideMeth
    org.openjdk.tools.javac.util.JCDiagnostic$Error ServiceImplementationMustBeSubtypeOfServiceInterface -> ServiceImplementationMustBeSubtypeOfServiceInterface
    org.openjdk.tools.javac.util.JCDiagnostic$Error ServiceImplementationProviderReturnMustBeSubtypeOfServiceInterface -> ServiceImplementationProviderReturnMustBeSubtypeOfServiceInterface
    org.openjdk.tools.javac.util.JCDiagnostic$Error SignatureDoesntMatchIntf -> SignatureDoesntMatchIntf
    org.openjdk.tools.javac.util.JCDiagnostic$Error SignatureDoesntMatchSupertype -> SignatureDoesntMatchSupertype
    org.openjdk.tools.javac.util.JCDiagnostic$Error SourceCantOverwriteInputFile -> SourceCantOverwriteInputFile
    org.openjdk.tools.javac.util.JCDiagnostic$Error StackSimError -> StackSimError
    org.openjdk.tools.javac.util.JCDiagnostic$Error StaticImpOnlyClassesAndInterfaces -> StaticImpOnlyClassesAndInterfaces
    org.openjdk.tools.javac.util.JCDiagnostic$Error StringConstReq -> StringConstReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error ThisAsIdentifier -> ThisAsIdentifier
    org.openjdk.tools.javac.util.JCDiagnostic$Error ThrowsNotAllowedInIntfAnnotation -> ThrowsNotAllowedInIntfAnnotation
    org.openjdk.tools.javac.util.JCDiagnostic$Error TooManyModules -> TooManyModules
    org.openjdk.tools.javac.util.JCDiagnostic$Error TryWithResourcesExprNeedsVar -> TryWithResourcesExprNeedsVar
    org.openjdk.tools.javac.util.JCDiagnostic$Error TryWithoutCatchFinallyOrResourceDecls -> TryWithoutCatchFinallyOrResourceDecls
    org.openjdk.tools.javac.util.JCDiagnostic$Error TryWithoutCatchOrFinally -> TryWithoutCatchOrFinally
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeVarCantBeDeref -> TypeVarCantBeDeref
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeVarMayNotBeFollowedByOtherBounds -> TypeVarMayNotBeFollowedByOtherBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeVarMoreThanOnce -> TypeVarMoreThanOnce
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeVarMoreThanOnceInResult -> TypeVarMoreThanOnceInResult
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnclosedCharLit -> UnclosedCharLit
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnclosedComment -> UnclosedComment
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnclosedStrLit -> UnclosedStrLit
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnderscoreAsIdentifier -> UnderscoreAsIdentifier
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnderscoreAsIdentifierInLambda -> UnderscoreAsIdentifierInLambda
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnexpectedLambda -> UnexpectedLambda
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnexpectedMref -> UnexpectedMref
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnexpectedType -> UnexpectedType
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnnamedPkgNotAllowedNamedModules -> UnnamedPkgNotAllowedNamedModules
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnreachableStmt -> UnreachableStmt
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnsupportedCrossFpLit -> UnsupportedCrossFpLit
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarargsAndOldArraySyntax -> VarargsAndOldArraySyntax
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarargsAndReceiver -> VarargsAndReceiver
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarargsMustBeLast -> VarargsMustBeLast
    org.openjdk.tools.javac.util.JCDiagnostic$Error VariableNotAllowed -> VariableNotAllowed
    org.openjdk.tools.javac.util.JCDiagnostic$Error VoidNotAllowedHere -> VoidNotAllowedHere
    org.openjdk.tools.javac.util.JCDiagnostic$Error WarningsAndWerror -> WarningsAndWerror
    void <init>() -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic$Error AbstractCantBeAccessedDirectly(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> AbstractCantBeAccessedDirectly
    org.openjdk.tools.javac.util.JCDiagnostic$Error AbstractCantBeInstantiated(org.openjdk.tools.javac.code.Symbol) -> AbstractCantBeInstantiated
    org.openjdk.tools.javac.util.JCDiagnostic$Error AddExportsWithRelease(org.openjdk.tools.javac.code.Symbol) -> AddExportsWithRelease
    org.openjdk.tools.javac.util.JCDiagnostic$Error AddReadsWithRelease(org.openjdk.tools.javac.code.Symbol) -> AddReadsWithRelease
    org.openjdk.tools.javac.util.JCDiagnostic$Error AlreadyDefined(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> AlreadyDefined
    org.openjdk.tools.javac.util.JCDiagnostic$Error AlreadyDefinedInClinit(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> AlreadyDefinedInClinit
    org.openjdk.tools.javac.util.JCDiagnostic$Error AlreadyDefinedSingleImport(java.lang.String) -> AlreadyDefinedSingleImport
    org.openjdk.tools.javac.util.JCDiagnostic$Error AlreadyDefinedStaticSingleImport(java.lang.String) -> AlreadyDefinedStaticSingleImport
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnnotationMissingDefaultValue(org.openjdk.tools.javac.code.Type,java.util.List) -> AnnotationMissingDefaultValue
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnnotationMissingDefaultValue1(org.openjdk.tools.javac.code.Type,java.util.List) -> AnnotationMissingDefaultValue1
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnnotationNotValidForType(org.openjdk.tools.javac.code.Type) -> AnnotationNotValidForType
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnnotationTypeNotApplicableToType(org.openjdk.tools.javac.code.Type) -> AnnotationTypeNotApplicableToType
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnnotationsAfterTypeParamsNotSupportedInSource(java.lang.String) -> AnnotationsAfterTypeParamsNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnonymousDiamondMethodDoesNotOverrideSuperclass(org.openjdk.tools.javac.util.JCDiagnostic) -> AnonymousDiamondMethodDoesNotOverrideSuperclass
    org.openjdk.tools.javac.util.JCDiagnostic$Error AnonymousDiamondMethodDoesNotOverrideSuperclass(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> AnonymousDiamondMethodDoesNotOverrideSuperclass
    org.openjdk.tools.javac.util.JCDiagnostic$Error ArrayAndVarargs(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> ArrayAndVarargs
    org.openjdk.tools.javac.util.JCDiagnostic$Error ArrayReqButFound(org.openjdk.tools.javac.code.Type) -> ArrayReqButFound
    org.openjdk.tools.javac.util.JCDiagnostic$Error BadFunctionalIntfAnno1(org.openjdk.tools.javac.util.JCDiagnostic) -> BadFunctionalIntfAnno1
    org.openjdk.tools.javac.util.JCDiagnostic$Error BadFunctionalIntfAnno1(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> BadFunctionalIntfAnno1
    org.openjdk.tools.javac.util.JCDiagnostic$Error BadInitializer(java.lang.String) -> BadInitializer
    org.openjdk.tools.javac.util.JCDiagnostic$Error BadNameForOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> BadNameForOption
    org.openjdk.tools.javac.util.JCDiagnostic$Error CallMustBeFirstStmtInCtor(org.openjdk.tools.javac.util.Name) -> CallMustBeFirstStmtInCtor
    org.openjdk.tools.javac.util.JCDiagnostic$Error CallToSuperNotAllowedInEnumCtor(java.lang.Void) -> CallToSuperNotAllowedInEnumCtor
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> CantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplyDiamond(org.openjdk.tools.javac.util.JCDiagnostic,java.lang.Void) -> CantApplyDiamond
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplyDiamond(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,java.lang.Void) -> CantApplyDiamond
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplyDiamond1(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplyDiamond1(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplyDiamond1(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplyDiamond1(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplyDiamond1(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplyDiamond1(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantApplySymbols(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List) -> CantApplySymbols
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantAssignValToFinalVar(org.openjdk.tools.javac.code.Symbol) -> CantAssignValToFinalVar
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantDeref(org.openjdk.tools.javac.code.Type) -> CantDeref
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantInheritDiffArg(org.openjdk.tools.javac.code.Symbol,java.lang.String,java.lang.String) -> CantInheritDiffArg
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantInheritFromFinal(org.openjdk.tools.javac.code.Symbol) -> CantInheritFromFinal
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantRefBeforeCtorCalled(org.openjdk.tools.javac.code.Symbol) -> CantRefBeforeCtorCalled
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantRefNonEffectivelyFinalVar(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> CantRefNonEffectivelyFinalVar
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantRefNonEffectivelyFinalVar(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantRefNonEffectivelyFinalVar
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantResolve(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.lang.Void,java.lang.Void) -> CantResolve
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantResolveArgs(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.lang.Void,java.util.List) -> CantResolveArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantResolveArgsParams(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List) -> CantResolveArgsParams
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantResolveLocation(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.lang.Void,java.lang.Void,org.openjdk.tools.javac.util.JCDiagnostic) -> CantResolveLocation
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantResolveLocation(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.lang.Void,java.lang.Void,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantResolveLocation
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantResolveLocationArgs(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.lang.Void,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> CantResolveLocationArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantResolveLocationArgs(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.lang.Void,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantResolveLocationArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantResolveLocationArgsParams(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> CantResolveLocationArgsParams
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantResolveLocationArgsParams(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantResolveLocationArgsParams
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantTypeAnnotateScoping(java.util.List) -> CantTypeAnnotateScoping
    org.openjdk.tools.javac.util.JCDiagnostic$Error CantTypeAnnotateScoping1(org.openjdk.tools.javac.code.Symbol) -> CantTypeAnnotateScoping1
    org.openjdk.tools.javac.util.JCDiagnostic$Error ClashWithPkgOfSameName(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> ClashWithPkgOfSameName
    org.openjdk.tools.javac.util.JCDiagnostic$Error ClassCantWrite(org.openjdk.tools.javac.code.Symbol,java.lang.String) -> ClassCantWrite
    org.openjdk.tools.javac.util.JCDiagnostic$Error ClassPublicShouldBeInFile(org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.util.Name) -> ClassPublicShouldBeInFile
    org.openjdk.tools.javac.util.JCDiagnostic$Error ConcreteInheritanceConflict(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,java.lang.Void) -> ConcreteInheritanceConflict
    org.openjdk.tools.javac.util.JCDiagnostic$Error ConflictingExports(org.openjdk.tools.javac.code.Symbol) -> ConflictingExports
    org.openjdk.tools.javac.util.JCDiagnostic$Error ConflictingExportsToModule(org.openjdk.tools.javac.code.Symbol) -> ConflictingExportsToModule
    org.openjdk.tools.javac.util.JCDiagnostic$Error ConflictingOpens(org.openjdk.tools.javac.code.Symbol) -> ConflictingOpens
    org.openjdk.tools.javac.util.JCDiagnostic$Error ConflictingOpensToModule(org.openjdk.tools.javac.code.Symbol) -> ConflictingOpensToModule
    org.openjdk.tools.javac.util.JCDiagnostic$Error CyclicAnnotationElement(org.openjdk.tools.javac.code.Symbol) -> CyclicAnnotationElement
    org.openjdk.tools.javac.util.JCDiagnostic$Error CyclicInheritance(org.openjdk.tools.javac.code.Symbol) -> CyclicInheritance
    org.openjdk.tools.javac.util.JCDiagnostic$Error CyclicRequires(org.openjdk.tools.javac.code.Symbol) -> CyclicRequires
    org.openjdk.tools.javac.util.JCDiagnostic$Error DefaultMethodsNotSupportedInSource(java.lang.String) -> DefaultMethodsNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error DefaultOverridesObjectMember(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Symbol) -> DefaultOverridesObjectMember
    org.openjdk.tools.javac.util.JCDiagnostic$Error DiamondNotSupportedInSource(java.lang.String) -> DiamondNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error DoesNotOverrideAbstract(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> DoesNotOverrideAbstract
    org.openjdk.tools.javac.util.JCDiagnostic$Error DoesntExist(org.openjdk.tools.javac.code.Symbol) -> DoesntExist
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateAnnotationInvalidRepeated(org.openjdk.tools.javac.code.Type) -> DuplicateAnnotationInvalidRepeated
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateAnnotationMemberValue(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type) -> DuplicateAnnotationMemberValue
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateAnnotationMissingContainer(org.openjdk.tools.javac.util.Name,java.lang.Void) -> DuplicateAnnotationMissingContainer
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateClass(org.openjdk.tools.javac.util.Name) -> DuplicateClass
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateModule(org.openjdk.tools.javac.code.Symbol) -> DuplicateModule
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateModuleOnPath(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.Name) -> DuplicateModuleOnPath
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateProvides(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> DuplicateProvides
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateRequires(org.openjdk.tools.javac.code.Symbol) -> DuplicateRequires
    org.openjdk.tools.javac.util.JCDiagnostic$Error DuplicateUses(org.openjdk.tools.javac.code.Symbol) -> DuplicateUses
    org.openjdk.tools.javac.util.JCDiagnostic$Error EnclClassRequired(org.openjdk.tools.javac.code.Symbol) -> EnclClassRequired
    org.openjdk.tools.javac.util.JCDiagnostic$Error ErrorReadingFile(java.io.File,java.lang.String) -> ErrorReadingFile
    org.openjdk.tools.javac.util.JCDiagnostic$Error ErrorReadingFile(org.openjdk.javax.tools.JavaFileObject,java.lang.String) -> ErrorReadingFile
    org.openjdk.tools.javac.util.JCDiagnostic$Error ExceptAlreadyCaught(org.openjdk.tools.javac.code.Type) -> ExceptAlreadyCaught
    org.openjdk.tools.javac.util.JCDiagnostic$Error ExceptNeverThrownInTry(org.openjdk.tools.javac.code.Type) -> ExceptNeverThrownInTry
    org.openjdk.tools.javac.util.JCDiagnostic$Error Expected(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> Expected
    org.openjdk.tools.javac.util.JCDiagnostic$Error Expected2(org.openjdk.tools.javac.parser.Tokens$TokenKind,org.openjdk.tools.javac.parser.Tokens$TokenKind) -> Expected2
    org.openjdk.tools.javac.util.JCDiagnostic$Error Expected3(org.openjdk.tools.javac.parser.Tokens$TokenKind,org.openjdk.tools.javac.parser.Tokens$TokenKind,org.openjdk.tools.javac.parser.Tokens$TokenKind) -> Expected3
    org.openjdk.tools.javac.util.JCDiagnostic$Error FilePatchedAndMsp(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Name) -> FilePatchedAndMsp
    org.openjdk.tools.javac.util.JCDiagnostic$Error FinalParameterMayNotBeAssigned(org.openjdk.tools.javac.code.Symbol) -> FinalParameterMayNotBeAssigned
    org.openjdk.tools.javac.util.JCDiagnostic$Error ForeachNotApplicableToType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> ForeachNotApplicableToType
    org.openjdk.tools.javac.util.JCDiagnostic$Error ForeachNotApplicableToType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> ForeachNotApplicableToType
    org.openjdk.tools.javac.util.JCDiagnostic$Error IclsCantHaveStaticDecl(org.openjdk.tools.javac.code.Symbol) -> IclsCantHaveStaticDecl
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalArgumentForOption(java.lang.String,java.lang.String) -> IllegalArgumentForOption
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalChar(java.lang.String) -> IllegalChar
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalCharForEncoding(java.lang.String,java.lang.String) -> IllegalCharForEncoding
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalCombinationOfModifiers(java.util.Set,java.util.Set) -> IllegalCombinationOfModifiers
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalDefaultSuperCall(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> IllegalDefaultSuperCall
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalDefaultSuperCall(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> IllegalDefaultSuperCall
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalInitializerForType(org.openjdk.tools.javac.code.Type) -> IllegalInitializerForType
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalQualNotIcls(org.openjdk.tools.javac.code.Symbol) -> IllegalQualNotIcls
    org.openjdk.tools.javac.util.JCDiagnostic$Error IllegalStaticIntfMethCall(org.openjdk.tools.javac.code.Type) -> IllegalStaticIntfMethCall
    org.openjdk.tools.javac.util.JCDiagnostic$Error ImportRequiresCanonical(org.openjdk.tools.javac.code.Symbol) -> ImportRequiresCanonical
    org.openjdk.tools.javac.util.JCDiagnostic$Error IncomparableTypes(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> IncomparableTypes
    org.openjdk.tools.javac.util.JCDiagnostic$Error IncompatibleThrownTypesInMref(java.util.List) -> IncompatibleThrownTypesInMref
    org.openjdk.tools.javac.util.JCDiagnostic$Error IncorrectConstructorReceiverName(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> IncorrectConstructorReceiverName
    org.openjdk.tools.javac.util.JCDiagnostic$Error IncorrectConstructorReceiverType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> IncorrectConstructorReceiverType
    org.openjdk.tools.javac.util.JCDiagnostic$Error IncorrectReceiverName(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> IncorrectReceiverName
    org.openjdk.tools.javac.util.JCDiagnostic$Error IncorrectReceiverType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> IncorrectReceiverType
    org.openjdk.tools.javac.util.JCDiagnostic$Error IntNumberTooLarge(int) -> IntNumberTooLarge
    org.openjdk.tools.javac.util.JCDiagnostic$Error IntersectionTypesInCastNotSupportedInSource(java.lang.String) -> IntersectionTypesInCastNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error IntfAnnotationCantHaveTypeParams(org.openjdk.tools.javac.code.Symbol) -> IntfAnnotationCantHaveTypeParams
    org.openjdk.tools.javac.util.JCDiagnostic$Error IntfAnnotationMemberClash(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> IntfAnnotationMemberClash
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidAnnotationMemberType(org.openjdk.tools.javac.code.Symbol) -> InvalidAnnotationMemberType
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidModuleSpecifier(java.lang.String) -> InvalidModuleSpecifier
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidMref(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.JCDiagnostic) -> InvalidMref
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidMref(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> InvalidMref
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotation(org.openjdk.tools.javac.code.Type,java.lang.Void) -> InvalidRepeatableAnnotation
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationElemNondefault(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> InvalidRepeatableAnnotationElemNondefault
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationElemNondefault(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> InvalidRepeatableAnnotationElemNondefault
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationIncompatibleTarget(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> InvalidRepeatableAnnotationIncompatibleTarget
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationInvalidValue(org.openjdk.tools.javac.code.Type) -> InvalidRepeatableAnnotationInvalidValue
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationMultipleValues(org.openjdk.tools.javac.code.Type,int) -> InvalidRepeatableAnnotationMultipleValues
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationNoValue(org.openjdk.tools.javac.code.Symbol) -> InvalidRepeatableAnnotationNoValue
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationNoValue(org.openjdk.tools.javac.code.Type) -> InvalidRepeatableAnnotationNoValue
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationNotApplicable(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> InvalidRepeatableAnnotationNotApplicable
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationNotApplicableInContext(org.openjdk.tools.javac.code.Type) -> InvalidRepeatableAnnotationNotApplicableInContext
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationNotDocumented(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> InvalidRepeatableAnnotationNotDocumented
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationNotInherited(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> InvalidRepeatableAnnotationNotInherited
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationRepeatedAndContainerPresent(org.openjdk.tools.javac.code.Symbol) -> InvalidRepeatableAnnotationRepeatedAndContainerPresent
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationRetention(org.openjdk.tools.javac.code.Symbol,java.lang.Void,org.openjdk.tools.javac.code.Symbol,java.lang.Void) -> InvalidRepeatableAnnotationRetention
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationValueReturn(org.openjdk.tools.javac.code.Symbol,java.lang.Void,org.openjdk.tools.javac.code.Type) -> InvalidRepeatableAnnotationValueReturn
    org.openjdk.tools.javac.util.JCDiagnostic$Error InvalidRepeatableAnnotationValueReturn(org.openjdk.tools.javac.code.Type,java.lang.Void,org.openjdk.tools.javac.code.Type) -> InvalidRepeatableAnnotationValueReturn
    org.openjdk.tools.javac.util.JCDiagnostic$Error LabelAlreadyInUse(org.openjdk.tools.javac.util.Name) -> LabelAlreadyInUse
    org.openjdk.tools.javac.util.JCDiagnostic$Error LambdaNotSupportedInSource(java.lang.String) -> LambdaNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error LocalVarAccessedFromIclsNeedsFinal(org.openjdk.tools.javac.code.Symbol) -> LocalVarAccessedFromIclsNeedsFinal
    org.openjdk.tools.javac.util.JCDiagnostic$Error LocnBadModuleInfo(java.nio.file.Path) -> LocnBadModuleInfo
    org.openjdk.tools.javac.util.JCDiagnostic$Error LocnCantGetModuleNameForJar(java.nio.file.Path) -> LocnCantGetModuleNameForJar
    org.openjdk.tools.javac.util.JCDiagnostic$Error LocnCantReadDirectory(java.nio.file.Path) -> LocnCantReadDirectory
    org.openjdk.tools.javac.util.JCDiagnostic$Error LocnCantReadFile(java.nio.file.Path) -> LocnCantReadFile
    org.openjdk.tools.javac.util.JCDiagnostic$Error LocnInvalidArgForXpatch(java.lang.String) -> LocnInvalidArgForXpatch
    org.openjdk.tools.javac.util.JCDiagnostic$Error LocnModuleInfoNotAllowedOnPatchPath(org.openjdk.javax.tools.JavaFileObject) -> LocnModuleInfoNotAllowedOnPatchPath
    org.openjdk.tools.javac.util.JCDiagnostic$Error MethodInvokedWithIncorrectNumberArguments(int,int) -> MethodInvokedWithIncorrectNumberArguments
    org.openjdk.tools.javac.util.JCDiagnostic$Error MethodReferencesNotSupportedInSource(java.lang.String) -> MethodReferencesNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error ModNotAllowedHere(java.util.Set) -> ModNotAllowedHere
    org.openjdk.tools.javac.util.JCDiagnostic$Error ModuleNameMismatch(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Name) -> ModuleNameMismatch
    org.openjdk.tools.javac.util.JCDiagnostic$Error ModuleNonZeroOpens(org.openjdk.tools.javac.util.Name) -> ModuleNonZeroOpens
    org.openjdk.tools.javac.util.JCDiagnostic$Error ModuleNotFound(org.openjdk.tools.javac.code.Symbol) -> ModuleNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Error ModuleNotFoundInModuleSourcePath(java.lang.String) -> ModuleNotFoundInModuleSourcePath
    org.openjdk.tools.javac.util.JCDiagnostic$Error ModulesNotSupportedInSource(java.lang.String) -> ModulesNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error MultiModuleOutdirCannotBeExplodedModule(java.nio.file.Path) -> MultiModuleOutdirCannotBeExplodedModule
    org.openjdk.tools.javac.util.JCDiagnostic$Error MulticatchNotSupportedInSource(java.lang.String) -> MulticatchNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error MulticatchParameterMayNotBeAssigned(org.openjdk.tools.javac.code.Symbol) -> MulticatchParameterMayNotBeAssigned
    org.openjdk.tools.javac.util.JCDiagnostic$Error MulticatchTypesMustBeDisjoint(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> MulticatchTypesMustBeDisjoint
    org.openjdk.tools.javac.util.JCDiagnostic$Error NameClashSameErasure(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NameClashSameErasure
    org.openjdk.tools.javac.util.JCDiagnostic$Error NameClashSameErasureNoHide(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NameClashSameErasureNoHide
    org.openjdk.tools.javac.util.JCDiagnostic$Error NameClashSameErasureNoOverride(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.Void) -> NameClashSameErasureNoOverride
    org.openjdk.tools.javac.util.JCDiagnostic$Error NameClashSameErasureNoOverride1(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NameClashSameErasureNoOverride1
    org.openjdk.tools.javac.util.JCDiagnostic$Error NeitherConditionalSubtype(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> NeitherConditionalSubtype
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoSuperclass(org.openjdk.tools.javac.code.Type) -> NoSuperclass
    org.openjdk.tools.javac.util.JCDiagnostic$Error NoZipfsForArchive(java.nio.file.Path) -> NoZipfsForArchive
    org.openjdk.tools.javac.util.JCDiagnostic$Error NonStaticCantBeRef(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> NonStaticCantBeRef
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotDefAccessClassIntfCantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefAccessClassIntfCantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotDefAccessClassIntfCantAccessReason(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> NotDefAccessClassIntfCantAccessReason
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotDefAccessClassIntfCantAccessReason(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> NotDefAccessClassIntfCantAccessReason
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotDefAccessPackageCantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> NotDefAccessPackageCantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotDefAccessPackageCantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> NotDefAccessPackageCantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotDefPublic(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefPublic
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotDefPublicCantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefPublicCantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotEnclClass(org.openjdk.tools.javac.code.Symbol) -> NotEnclClass
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotInProfile(org.openjdk.tools.javac.code.Symbol,java.lang.String) -> NotInProfile
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotLoopLabel(org.openjdk.tools.javac.util.Name) -> NotLoopLabel
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotWithinBounds(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> NotWithinBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Error NotWithinBounds(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> NotWithinBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Error OperatorCantBeApplied(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type) -> OperatorCantBeApplied
    org.openjdk.tools.javac.util.JCDiagnostic$Error OperatorCantBeApplied1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> OperatorCantBeApplied1
    org.openjdk.tools.javac.util.JCDiagnostic$Error OptionRemovedSource(java.lang.String,java.lang.String) -> OptionRemovedSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error OptionRemovedTarget(java.lang.String,java.lang.String) -> OptionRemovedTarget
    org.openjdk.tools.javac.util.JCDiagnostic$Error Orphaned(org.openjdk.tools.javac.parser.Tokens$TokenKind) -> Orphaned
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideIncompatibleRet(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> OverrideIncompatibleRet
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideIncompatibleRet(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> OverrideIncompatibleRet
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideMeth(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Set) -> OverrideMeth
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideMeth(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,java.util.Set) -> OverrideMeth
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideMethDoesntThrow(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Type) -> OverrideMethDoesntThrow
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideMethDoesntThrow(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Type) -> OverrideMethDoesntThrow
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideStatic(org.openjdk.tools.javac.util.JCDiagnostic) -> OverrideStatic
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideStatic(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> OverrideStatic
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideWeakerAccess(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Set) -> OverrideWeakerAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error OverrideWeakerAccess(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,java.util.Set) -> OverrideWeakerAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error PackageClashFromRequires(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> PackageClashFromRequires
    org.openjdk.tools.javac.util.JCDiagnostic$Error PackageClashFromRequiresInUnnamed(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> PackageClashFromRequiresInUnnamed
    org.openjdk.tools.javac.util.JCDiagnostic$Error PackageEmptyOrNotFound(org.openjdk.tools.javac.code.Symbol) -> PackageEmptyOrNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Error PackageInOtherModule(org.openjdk.tools.javac.code.Symbol) -> PackageInOtherModule
    org.openjdk.tools.javac.util.JCDiagnostic$Error PackageNotVisible(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> PackageNotVisible
    org.openjdk.tools.javac.util.JCDiagnostic$Error PackageNotVisible(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> PackageNotVisible
    org.openjdk.tools.javac.util.JCDiagnostic$Error PatchModuleWithRelease(org.openjdk.tools.javac.code.Symbol) -> PatchModuleWithRelease
    org.openjdk.tools.javac.util.JCDiagnostic$Error PkgClashesWithClassOfSameName(org.openjdk.tools.javac.code.Symbol) -> PkgClashesWithClassOfSameName
    org.openjdk.tools.javac.util.JCDiagnostic$Error PluginNotFound(java.lang.String) -> PluginNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Error PrivateIntfMethodsNotSupportedInSource(java.lang.String) -> PrivateIntfMethodsNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProbFoundReq(org.openjdk.tools.javac.util.JCDiagnostic) -> ProbFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProbFoundReq(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> ProbFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcCantAccess1(org.openjdk.tools.javac.code.Symbol,java.lang.String) -> ProcCantAccess1
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcCantFindClass(java.lang.String) -> ProcCantFindClass
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcMessager(java.lang.String) -> ProcMessager
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcNoExplicitAnnotationProcessingRequested(java.util.List) -> ProcNoExplicitAnnotationProcessingRequested
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcProcessorCantInstantiate(java.lang.String) -> ProcProcessorCantInstantiate
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcProcessorNotFound(java.lang.String) -> ProcProcessorNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Error ProcProcessorWrongType(java.lang.String) -> ProcProcessorWrongType
    org.openjdk.tools.javac.util.JCDiagnostic$Error QualifiedNewOfStaticClass(java.lang.Void) -> QualifiedNewOfStaticClass
    org.openjdk.tools.javac.util.JCDiagnostic$Error ReceiverParameterNotApplicableConstructorToplevelClass(org.openjdk.tools.javac.code.Symbol) -> ReceiverParameterNotApplicableConstructorToplevelClass
    org.openjdk.tools.javac.util.JCDiagnostic$Error RefAmbiguous(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> RefAmbiguous
    org.openjdk.tools.javac.util.JCDiagnostic$Error RepeatableAnnotationsNotSupportedInSource(java.lang.String) -> RepeatableAnnotationsNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error RepeatedProvidesForService(org.openjdk.tools.javac.code.Symbol) -> RepeatedProvidesForService
    org.openjdk.tools.javac.util.JCDiagnostic$Error ReportAccess(org.openjdk.tools.javac.code.Symbol,java.util.Set,org.openjdk.tools.javac.code.Symbol) -> ReportAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Error ServiceDefinitionIsEnum(org.openjdk.tools.javac.code.Symbol) -> ServiceDefinitionIsEnum
    org.openjdk.tools.javac.util.JCDiagnostic$Error ServiceImplementationDoesntHaveANoArgsConstructor(org.openjdk.tools.javac.code.Symbol) -> ServiceImplementationDoesntHaveANoArgsConstructor
    org.openjdk.tools.javac.util.JCDiagnostic$Error ServiceImplementationIsAbstract(org.openjdk.tools.javac.code.Symbol) -> ServiceImplementationIsAbstract
    org.openjdk.tools.javac.util.JCDiagnostic$Error ServiceImplementationIsInner(org.openjdk.tools.javac.code.Symbol) -> ServiceImplementationIsInner
    org.openjdk.tools.javac.util.JCDiagnostic$Error ServiceImplementationNoArgsConstructorNotPublic(org.openjdk.tools.javac.code.Symbol) -> ServiceImplementationNoArgsConstructorNotPublic
    org.openjdk.tools.javac.util.JCDiagnostic$Error ServiceImplementationNotInRightModule(org.openjdk.tools.javac.code.Symbol) -> ServiceImplementationNotInRightModule
    org.openjdk.tools.javac.util.JCDiagnostic$Error StaticIntfMethodInvokeNotSupportedInSource(java.lang.String) -> StaticIntfMethodInvokeNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error StaticIntfMethodsNotSupportedInSource(java.lang.String) -> StaticIntfMethodsNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error StringSwitchNotSupportedInSource(java.lang.String) -> StringSwitchNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error SyntheticNameConflict(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> SyntheticNameConflict
    org.openjdk.tools.javac.util.JCDiagnostic$Error TooManyPatchedModules(java.util.Set) -> TooManyPatchedModules
    org.openjdk.tools.javac.util.JCDiagnostic$Error TryResourceMayNotBeAssigned(org.openjdk.tools.javac.code.Symbol) -> TryResourceMayNotBeAssigned
    org.openjdk.tools.javac.util.JCDiagnostic$Error TryWithResourcesExprEffectivelyFinalVar(org.openjdk.tools.javac.code.Symbol) -> TryWithResourcesExprEffectivelyFinalVar
    org.openjdk.tools.javac.util.JCDiagnostic$Error TryWithResourcesNotSupportedInSource(java.lang.String) -> TryWithResourcesNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeAnnotationsNotSupportedInSource(java.lang.String) -> TypeAnnotationsNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeDoesntTakeParams(org.openjdk.tools.javac.code.Symbol) -> TypeDoesntTakeParams
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeFoundReq(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic) -> TypeFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeFoundReq(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> TypeFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeFoundReq(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic) -> TypeFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeFoundReq(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> TypeFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeFoundReq(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> TypeFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypeFoundReq(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> TypeFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypesIncompatibleAbstractDefault(org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> TypesIncompatibleAbstractDefault
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypesIncompatibleDiffRet(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,java.lang.String) -> TypesIncompatibleDiffRet
    org.openjdk.tools.javac.util.JCDiagnostic$Error TypesIncompatibleUnrelatedDefaults(org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> TypesIncompatibleUnrelatedDefaults
    org.openjdk.tools.javac.util.JCDiagnostic$Error UndefLabel(org.openjdk.tools.javac.util.Name) -> UndefLabel
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnreportedExceptionDefaultConstructor(org.openjdk.tools.javac.code.Type) -> UnreportedExceptionDefaultConstructor
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnreportedExceptionImplicitClose(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.Name) -> UnreportedExceptionImplicitClose
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnreportedExceptionNeedToCatchOrThrow(org.openjdk.tools.javac.code.Type) -> UnreportedExceptionNeedToCatchOrThrow
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnsupportedBinaryLit(java.lang.String) -> UnsupportedBinaryLit
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnsupportedEncoding(org.openjdk.tools.javac.util.Name) -> UnsupportedEncoding
    org.openjdk.tools.javac.util.JCDiagnostic$Error UnsupportedUnderscoreLit(java.lang.String) -> UnsupportedUnderscoreLit
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarInTryWithResourcesNotSupportedInSource(java.lang.String) -> VarInTryWithResourcesNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarMightAlreadyBeAssigned(org.openjdk.tools.javac.code.Symbol) -> VarMightAlreadyBeAssigned
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarMightBeAssignedInLoop(org.openjdk.tools.javac.code.Symbol) -> VarMightBeAssignedInLoop
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarMightNotHaveBeenInitialized(org.openjdk.tools.javac.code.Symbol) -> VarMightNotHaveBeenInitialized
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarNotInitializedInDefaultConstructor(org.openjdk.tools.javac.code.Symbol) -> VarNotInitializedInDefaultConstructor
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarargsInvalidTrustmeAnno(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> VarargsInvalidTrustmeAnno
    org.openjdk.tools.javac.util.JCDiagnostic$Error VarargsInvalidTrustmeAnno(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> VarargsInvalidTrustmeAnno
    org.openjdk.tools.javac.util.JCDiagnostic$Error WrongNumberTypeArgs(java.lang.String) -> WrongNumberTypeArgs
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.resources.CompilerProperties$Fragments -> org.openjdk.tools.javac.resources.CompilerProperties$Fragments:
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ArgLengthMismatch -> ArgLengthMismatch
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadClassSignature -> BadClassSignature
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadConstPoolTag -> BadConstPoolTag
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadConstPoolTagAt -> BadConstPoolTagAt
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadEnclosingClass -> BadEnclosingClass
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadModuleInfoName -> BadModuleInfoName
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadRuntimeInvisibleParamAnnotations -> BadRuntimeInvisibleParamAnnotations
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadSignature -> BadSignature
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadTypeAnnotationValue -> BadTypeAnnotationValue
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BaseMembership -> BaseMembership
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantResolveModules -> CantResolveModules
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ClassFileNotFound -> ClassFileNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ClassFileWrongClass -> ClassFileWrongClass
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ConditionalTargetCantBeVoid -> ConditionalTargetCantBeVoid
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment DiamondAnonymousMethodsImplicitlyOverride -> DiamondAnonymousMethodsImplicitlyOverride
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment FatalErrCantClose -> FatalErrCantClose
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment FatalErrCantLocateCtor -> FatalErrCantLocateCtor
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment FatalErrCantLocateField -> FatalErrCantLocateField
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment FatalErrCantLocateMeth -> FatalErrCantLocateMeth
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment FatalErrNoJavaLang -> FatalErrNoJavaLang
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment FileDoesNotContainModule -> FileDoesNotContainModule
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment FileDoesNotContainPackage -> FileDoesNotContainPackage
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IllegalStartOfClassFile -> IllegalStartOfClassFile
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleArgTypesInLambda -> IncompatibleArgTypesInLambda
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleArgTypesInMref -> IncompatibleArgTypesInMref
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InnerCls -> InnerCls
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameAnnotation -> KindnameAnnotation
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameClass -> KindnameClass
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameConstructor -> KindnameConstructor
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameEnum -> KindnameEnum
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameInstanceInit -> KindnameInstanceInit
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameInterface -> KindnameInterface
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameMethod -> KindnameMethod
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameModule -> KindnameModule
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnamePackage -> KindnamePackage
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameStatic -> KindnameStatic
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameStaticInit -> KindnameStaticInit
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameTypeVariable -> KindnameTypeVariable
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameTypeVariableBound -> KindnameTypeVariableBound
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameValue -> KindnameValue
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment KindnameVariable -> KindnameVariable
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment Lambda -> Lambda
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment LocnModule_path -> LocnModule_path
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment LocnModule_source_path -> LocnModule_source_path
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment LocnSystem_modules -> LocnSystem_modules
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment LocnUpgrade_module_path -> LocnUpgrade_module_path
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment MalformedVarargMethod -> MalformedVarargMethod
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ModuleInfoInvalidSuperClass -> ModuleInfoInvalidSuperClass
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NoArgs -> NoArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NoUniqueMinimalInstanceExists -> NoUniqueMinimalInstanceExists
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ResumeAbort -> ResumeAbort
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment SourceUnavailable -> SourceUnavailable
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment StatExprExpected -> StatExprExpected
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment StaticMrefWithTargs -> StaticMrefWithTargs
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TokenBadSymbol -> TokenBadSymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TokenCharacter -> TokenCharacter
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TokenDouble -> TokenDouble
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TokenEndOfInput -> TokenEndOfInput
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TokenFloat -> TokenFloat
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TokenIdentifier -> TokenIdentifier
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TokenInteger -> TokenInteger
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TokenLongInteger -> TokenLongInteger
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TokenString -> TokenString
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeCaptureof1 -> TypeCaptureof1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeNone -> TypeNone
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeNull -> TypeNull
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeReqArrayOrIterable -> TypeReqArrayOrIterable
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeReqClass -> TypeReqClass
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeReqClassArray -> TypeReqClassArray
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeReqExact -> TypeReqExact
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeReqRef -> TypeReqRef
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UnableToAccessFile -> UnableToAccessFile
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UncheckedAssign -> UncheckedAssign
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UncheckedCastToType -> UncheckedCastToType
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UndeclTypeVar -> UndeclTypeVar
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UnexpectedRetVal -> UnexpectedRetVal
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UnicodeStrNotSupported -> UnicodeStrNotSupported
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UnnamedModule -> UnnamedModule
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UnnamedPackage -> UnnamedPackage
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VersionNotAvailable -> VersionNotAvailable
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereDescriptionCaptured -> WhereDescriptionCaptured
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WrongVersion -> WrongVersion
    void <init>() -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment AnachronisticModuleInfo(java.lang.String,java.lang.String) -> AnachronisticModuleInfo
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment AnonymousClass(org.openjdk.tools.javac.util.Name) -> AnonymousClass
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ApplicableMethodFound(int,org.openjdk.tools.javac.code.Symbol,java.lang.Void) -> ApplicableMethodFound
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ApplicableMethodFound1(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> ApplicableMethodFound1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ApplicableMethodFound1(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> ApplicableMethodFound1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadClassFile(org.openjdk.tools.javac.util.Name) -> BadClassFile
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadClassFileHeader(java.io.File,org.openjdk.tools.javac.util.JCDiagnostic) -> BadClassFileHeader
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadClassFileHeader(java.io.File,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> BadClassFileHeader
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadClassFileHeader(org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.JCDiagnostic) -> BadClassFileHeader
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadClassFileHeader(org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> BadClassFileHeader
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadConstPoolEntry(java.io.File,java.lang.String,int) -> BadConstPoolEntry
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadConstPoolEntry(org.openjdk.javax.tools.JavaFileObject,java.lang.String,int) -> BadConstPoolEntry
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadConstantRange(java.lang.String,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> BadConstantRange
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadConstantValue(java.lang.String,org.openjdk.tools.javac.code.Symbol,java.lang.String) -> BadConstantValue
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadEnclosingMethod(org.openjdk.tools.javac.code.Symbol) -> BadEnclosingMethod
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadInstanceMethodInUnboundLookup(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> BadInstanceMethodInUnboundLookup
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadIntersectionTargetForFunctionalExpr(org.openjdk.tools.javac.util.JCDiagnostic) -> BadIntersectionTargetForFunctionalExpr
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadIntersectionTargetForFunctionalExpr(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> BadIntersectionTargetForFunctionalExpr
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadSourceFileHeader(java.io.File,org.openjdk.tools.javac.util.JCDiagnostic) -> BadSourceFileHeader
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadSourceFileHeader(java.io.File,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> BadSourceFileHeader
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadSourceFileHeader(org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.JCDiagnostic) -> BadSourceFileHeader
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadSourceFileHeader(org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> BadSourceFileHeader
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadStaticMethodInBoundLookup(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> BadStaticMethodInBoundLookup
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment BadStaticMethodInUnboundLookup(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> BadStaticMethodInUnboundLookup
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantAccessInnerClsConstr(org.openjdk.tools.javac.code.Symbol,java.util.List,org.openjdk.tools.javac.code.Type) -> CantAccessInnerClsConstr
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplyDiamond1(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplyDiamond1(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplyDiamond1(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplyDiamond1(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplyDiamond1(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplyDiamond1(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplyDiamond1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbol(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantApplySymbol
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantApplySymbols(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List) -> CantApplySymbols
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantHide(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> CantHide
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantImplement(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> CantImplement
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantOverride(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> CantOverride
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantResolveLocationArgs(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.lang.Void,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> CantResolveLocationArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantResolveLocationArgs(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.lang.Void,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantResolveLocationArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantResolveLocationArgsParams(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> CantResolveLocationArgsParams
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CantResolveLocationArgsParams(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> CantResolveLocationArgsParams
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CapturedType(int) -> CapturedType
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ClashesWith(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> ClashesWith
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CountError(int) -> CountError
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CountErrorPlural(int) -> CountErrorPlural
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CountWarn(int) -> CountWarn
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment CountWarnPlural(int) -> CountWarnPlural
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment Descriptor(org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.code.Type,java.util.List) -> Descriptor
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment DescriptorThrows(org.openjdk.tools.javac.util.Name,java.util.List,org.openjdk.tools.javac.code.Type,java.util.List) -> DescriptorThrows
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment Diamond(org.openjdk.tools.javac.code.Symbol) -> Diamond
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment DiamondAndAnonClassNotSupportedInSource(java.lang.String) -> DiamondAndAnonClassNotSupportedInSource
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment DiamondAndExplicitParams(java.lang.Void) -> DiamondAndExplicitParams
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment DiamondInvalidArg(java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> DiamondInvalidArg
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment DiamondInvalidArg(java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> DiamondInvalidArg
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment DiamondInvalidArgs(java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> DiamondInvalidArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment DiamondInvalidArgs(java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> DiamondInvalidArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment DiamondNonGeneric(org.openjdk.tools.javac.code.Type) -> DiamondNonGeneric
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ExplicitParamDoNotConformToBounds(org.openjdk.tools.javac.code.Type,java.util.List) -> ExplicitParamDoNotConformToBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment FileDoesntContainClass(org.openjdk.tools.javac.util.Name) -> FileDoesntContainClass
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InaccessibleVarargsType(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> InaccessibleVarargsType
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InapplicableMethod(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> InapplicableMethod
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InapplicableMethod(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> InapplicableMethod
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleAbstracts(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> IncompatibleAbstracts
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleDescsInFunctionalIntf(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> IncompatibleDescsInFunctionalIntf
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleEqBounds(org.openjdk.tools.javac.code.Type,java.util.List) -> IncompatibleEqBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleEqLowerBounds(org.openjdk.tools.javac.code.Type,java.util.List,java.util.List) -> IncompatibleEqLowerBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleEqUpperBounds(org.openjdk.tools.javac.code.Type,java.util.List,java.util.List) -> IncompatibleEqUpperBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleRetTypeInLambda(org.openjdk.tools.javac.code.Type) -> IncompatibleRetTypeInLambda
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleRetTypeInMref(org.openjdk.tools.javac.code.Type) -> IncompatibleRetTypeInMref
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleTypeInConditional(org.openjdk.tools.javac.util.JCDiagnostic) -> IncompatibleTypeInConditional
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleTypeInConditional(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> IncompatibleTypeInConditional
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleUpperBounds(org.openjdk.tools.javac.code.Type,java.util.List) -> IncompatibleUpperBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IncompatibleUpperLowerBounds(org.openjdk.tools.javac.code.Type,java.util.List,java.util.List) -> IncompatibleUpperLowerBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InconvertibleTypes(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> InconvertibleTypes
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InferArgLengthMismatch(java.util.List) -> InferArgLengthMismatch
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InferNoConformingAssignmentExists(java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> InferNoConformingAssignmentExists
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InferNoConformingAssignmentExists(java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> InferNoConformingAssignmentExists
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InferNoConformingInstanceExists(java.util.List,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> InferNoConformingInstanceExists
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InferVarargsArgumentMismatch(java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> InferVarargsArgumentMismatch
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InferVarargsArgumentMismatch(java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> InferVarargsArgumentMismatch
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InferredDoNotConformToEqBounds(org.openjdk.tools.javac.code.Type,java.util.List) -> InferredDoNotConformToEqBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InferredDoNotConformToLowerBounds(org.openjdk.tools.javac.code.Type,java.util.List) -> InferredDoNotConformToLowerBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InferredDoNotConformToUpperBounds(org.openjdk.tools.javac.code.Type,java.util.List) -> InferredDoNotConformToUpperBounds
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment IntersectionType(int) -> IntersectionType
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InvalidDefaultInterface(java.lang.String,java.lang.String) -> InvalidDefaultInterface
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InvalidGenericLambdaTarget(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> InvalidGenericLambdaTarget
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InvalidMref(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.JCDiagnostic) -> InvalidMref
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InvalidMref(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> InvalidMref
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment InvalidStaticInterface(java.lang.String,java.lang.String) -> InvalidStaticInterface
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment Location(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Type,java.lang.Void) -> Location
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment Location(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,java.lang.Void) -> Location
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment Location1(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> Location1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment MissingRetVal(java.lang.Void) -> MissingRetVal
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ModuleNameMismatch(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.Name) -> ModuleNameMismatch
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ModuleNonZeroOpens(org.openjdk.tools.javac.util.Name) -> ModuleNonZeroOpens
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment MrefInferAndExplicitParams(java.lang.Void) -> MrefInferAndExplicitParams
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NoAbstracts(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> NoAbstracts
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NoConformingAssignmentExists(org.openjdk.tools.javac.util.JCDiagnostic) -> NoConformingAssignmentExists
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NoConformingAssignmentExists(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> NoConformingAssignmentExists
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NoSuitableFunctionalIntfInst(org.openjdk.tools.javac.code.Type) -> NoSuitableFunctionalIntfInst
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NoUniqueMaximalInstanceExists(org.openjdk.tools.javac.code.Type,java.util.List) -> NoUniqueMaximalInstanceExists
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotAFunctionalIntf(org.openjdk.tools.javac.code.Symbol) -> NotAFunctionalIntf
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotAFunctionalIntf1(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> NotAFunctionalIntf1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotAFunctionalIntf1(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> NotAFunctionalIntf1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotAnIntfComponent(org.openjdk.tools.javac.code.Symbol) -> NotAnIntfComponent
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotAnIntfComponent(org.openjdk.tools.javac.code.Type) -> NotAnIntfComponent
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotApplicableMethodFound(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> NotApplicableMethodFound
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotApplicableMethodFound(int,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> NotApplicableMethodFound
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessClassIntfCantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefAccessClassIntfCantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessClassIntfCantAccessReason(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> NotDefAccessClassIntfCantAccessReason
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessClassIntfCantAccessReason(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> NotDefAccessClassIntfCantAccessReason
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessDoesNotRead(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefAccessDoesNotRead
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessDoesNotReadFromUnnamed(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefAccessDoesNotReadFromUnnamed
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessDoesNotReadUnnamed(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefAccessDoesNotReadUnnamed
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessNotExported(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefAccessNotExported
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessNotExportedFromUnnamed(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefAccessNotExportedFromUnnamed
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessNotExportedToModule(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefAccessNotExportedToModule
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessNotExportedToModuleFromUnnamed(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefAccessNotExportedToModuleFromUnnamed
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessPackageCantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> NotDefAccessPackageCantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefAccessPackageCantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> NotDefAccessPackageCantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment NotDefPublicCantAccess(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> NotDefPublicCantAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment OverriddenDefault(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> OverriddenDefault
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment PackageNotVisible(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> PackageNotVisible
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment PackageNotVisible(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> PackageNotVisible
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment PartialInstSig(org.openjdk.tools.javac.code.Type) -> PartialInstSig
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment PossibleLossOfPrecision(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> PossibleLossOfPrecision
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ProbFoundReq(org.openjdk.tools.javac.util.JCDiagnostic) -> ProbFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ProbFoundReq(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> ProbFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment RedundantSupertype(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> RedundantSupertype
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment RedundantSupertype(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> RedundantSupertype
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment RefAmbiguous(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> RefAmbiguous
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment ReportAccess(org.openjdk.tools.javac.code.Symbol,java.util.Set,org.openjdk.tools.javac.code.Symbol) -> ReportAccess
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TryNotApplicableToType(org.openjdk.tools.javac.code.Type) -> TryNotApplicableToType
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeCaptureof(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type) -> TypeCaptureof
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeParameter(org.openjdk.tools.javac.code.Type) -> TypeParameter
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment TypeVar(org.openjdk.tools.javac.util.Name,int) -> TypeVar
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UncheckedClashWith(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> UncheckedClashWith
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UncheckedImplement(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> UncheckedImplement
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment UncheckedOverride(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> UncheckedOverride
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VarargsArgumentMismatch(org.openjdk.tools.javac.util.JCDiagnostic) -> VarargsArgumentMismatch
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VarargsArgumentMismatch(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> VarargsArgumentMismatch
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VarargsClashWith(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> VarargsClashWith
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VarargsImplement(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> VarargsImplement
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VarargsOverride(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> VarargsOverride
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VarargsTrustmeOnNonVarargsMeth(org.openjdk.tools.javac.code.Symbol) -> VarargsTrustmeOnNonVarargsMeth
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VarargsTrustmeOnReifiableVarargs(org.openjdk.tools.javac.code.Type) -> VarargsTrustmeOnReifiableVarargs
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VarargsTrustmeOnVirtualVarargs(org.openjdk.tools.javac.code.Symbol) -> VarargsTrustmeOnVirtualVarargs
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VarargsTrustmeOnVirtualVarargsFinalOnly(org.openjdk.tools.javac.code.Symbol) -> VarargsTrustmeOnVirtualVarargsFinalOnly
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseCheckingAttribution(org.openjdk.tools.javac.code.Symbol) -> VerboseCheckingAttribution
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseClasspath(java.lang.String) -> VerboseClasspath
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseLoading(java.lang.String) -> VerboseLoading
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseParsingDone(java.lang.String) -> VerboseParsingDone
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseParsingStarted(java.io.File) -> VerboseParsingStarted
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseParsingStarted(org.openjdk.javax.tools.JavaFileObject) -> VerboseParsingStarted
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseSourcepath(java.lang.String) -> VerboseSourcepath
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseTotal(java.lang.String) -> VerboseTotal
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseWroteFile(java.io.File) -> VerboseWroteFile
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment VerboseWroteFile(org.openjdk.javax.tools.JavaFileObject) -> VerboseWroteFile
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereCaptured(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> WhereCaptured
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereCaptured1(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type,java.lang.Void,org.openjdk.tools.javac.code.Type) -> WhereCaptured1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereDescriptionCaptured1(java.util.Set) -> WhereDescriptionCaptured1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereDescriptionIntersection(java.util.Set) -> WhereDescriptionIntersection
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereDescriptionIntersection1(java.util.Set) -> WhereDescriptionIntersection1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereDescriptionTypevar(java.util.Set) -> WhereDescriptionTypevar
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereDescriptionTypevar1(java.util.Set) -> WhereDescriptionTypevar1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereFreshTypevar(org.openjdk.tools.javac.code.Type,java.util.List) -> WhereFreshTypevar
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereIntersection(org.openjdk.tools.javac.code.Type,java.util.List) -> WhereIntersection
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereTypevar(org.openjdk.tools.javac.code.Type,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> WhereTypevar
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WhereTypevar1(org.openjdk.tools.javac.code.Type,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> WhereTypevar1
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment WrongNumberTypeArgs(java.lang.String) -> WrongNumberTypeArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment XPrintProcessorInfo(java.lang.String,java.lang.String,boolean) -> XPrintProcessorInfo
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment XPrintRounds(int,java.lang.String,java.util.Set,boolean) -> XPrintRounds
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.resources.CompilerProperties$Notes -> org.openjdk.tools.javac.resources.CompilerProperties$Notes:
    org.openjdk.tools.javac.util.JCDiagnostic$Note CompressedDiags -> CompressedDiags
    org.openjdk.tools.javac.util.JCDiagnostic$Note DeprecatedPlural -> DeprecatedPlural
    org.openjdk.tools.javac.util.JCDiagnostic$Note DeprecatedPluralAdditional -> DeprecatedPluralAdditional
    org.openjdk.tools.javac.util.JCDiagnostic$Note DeprecatedRecompile -> DeprecatedRecompile
    org.openjdk.tools.javac.util.JCDiagnostic$Note Note -> Note
    org.openjdk.tools.javac.util.JCDiagnostic$Note RemovalPlural -> RemovalPlural
    org.openjdk.tools.javac.util.JCDiagnostic$Note RemovalPluralAdditional -> RemovalPluralAdditional
    org.openjdk.tools.javac.util.JCDiagnostic$Note RemovalRecompile -> RemovalRecompile
    org.openjdk.tools.javac.util.JCDiagnostic$Note UncheckedPlural -> UncheckedPlural
    org.openjdk.tools.javac.util.JCDiagnostic$Note UncheckedPluralAdditional -> UncheckedPluralAdditional
    org.openjdk.tools.javac.util.JCDiagnostic$Note UncheckedRecompile -> UncheckedRecompile
    void <init>() -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic$Note DeferredMethodInst(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> DeferredMethodInst
    org.openjdk.tools.javac.util.JCDiagnostic$Note DeprecatedFilename(java.io.File) -> DeprecatedFilename
    org.openjdk.tools.javac.util.JCDiagnostic$Note DeprecatedFilename(org.openjdk.javax.tools.JavaFileObject) -> DeprecatedFilename
    org.openjdk.tools.javac.util.JCDiagnostic$Note DeprecatedFilenameAdditional(java.io.File) -> DeprecatedFilenameAdditional
    org.openjdk.tools.javac.util.JCDiagnostic$Note DeprecatedFilenameAdditional(org.openjdk.javax.tools.JavaFileObject) -> DeprecatedFilenameAdditional
    org.openjdk.tools.javac.util.JCDiagnostic$Note LambdaStat(boolean,org.openjdk.tools.javac.code.Symbol) -> LambdaStat
    org.openjdk.tools.javac.util.JCDiagnostic$Note MrefStat(boolean,java.lang.Void) -> MrefStat
    org.openjdk.tools.javac.util.JCDiagnostic$Note MrefStat1(boolean,org.openjdk.tools.javac.code.Symbol) -> MrefStat1
    org.openjdk.tools.javac.util.JCDiagnostic$Note MultipleElements(java.lang.String,java.lang.String,java.lang.String) -> MultipleElements
    org.openjdk.tools.javac.util.JCDiagnostic$Note ProcMessager(java.lang.String) -> ProcMessager
    org.openjdk.tools.javac.util.JCDiagnostic$Note RemovalFilename(java.io.File) -> RemovalFilename
    org.openjdk.tools.javac.util.JCDiagnostic$Note RemovalFilename(org.openjdk.javax.tools.JavaFileObject) -> RemovalFilename
    org.openjdk.tools.javac.util.JCDiagnostic$Note RemovalFilenameAdditional(java.io.File) -> RemovalFilenameAdditional
    org.openjdk.tools.javac.util.JCDiagnostic$Note RemovalFilenameAdditional(org.openjdk.javax.tools.JavaFileObject) -> RemovalFilenameAdditional
    org.openjdk.tools.javac.util.JCDiagnostic$Note UncheckedFilename(java.io.File) -> UncheckedFilename
    org.openjdk.tools.javac.util.JCDiagnostic$Note UncheckedFilename(org.openjdk.javax.tools.JavaFileObject) -> UncheckedFilename
    org.openjdk.tools.javac.util.JCDiagnostic$Note UncheckedFilenameAdditional(java.io.File) -> UncheckedFilenameAdditional
    org.openjdk.tools.javac.util.JCDiagnostic$Note UncheckedFilenameAdditional(org.openjdk.javax.tools.JavaFileObject) -> UncheckedFilenameAdditional
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,java.lang.String,java.util.List,java.util.List) -> VerboseResolveMulti
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,java.lang.String,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> VerboseResolveMulti
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,java.lang.String,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> VerboseResolveMulti
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic,java.util.List) -> VerboseResolveMulti
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic) -> VerboseResolveMulti
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> VerboseResolveMulti
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,java.util.List) -> VerboseResolveMulti
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic) -> VerboseResolveMulti
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,int,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> VerboseResolveMulti
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.String,java.util.List,java.util.List) -> VerboseResolveMulti1
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.String,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic) -> VerboseResolveMulti1
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.String,java.util.List,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> VerboseResolveMulti1
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic,java.util.List) -> VerboseResolveMulti1
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic) -> VerboseResolveMulti1
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> VerboseResolveMulti1
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,java.util.List) -> VerboseResolveMulti1
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic) -> VerboseResolveMulti1
    org.openjdk.tools.javac.util.JCDiagnostic$Note VerboseResolveMulti1(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol,java.lang.Void,java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> VerboseResolveMulti1
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.resources.CompilerProperties$Warnings -> org.openjdk.tools.javac.resources.CompilerProperties$Warnings:
    org.openjdk.tools.javac.util.JCDiagnostic$Warning AddopensIgnored -> AddopensIgnored
    org.openjdk.tools.javac.util.JCDiagnostic$Warning AnnotationMethodNotFound -> AnnotationMethodNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning AnnotationMethodNotFoundReason -> AnnotationMethodNotFoundReason
    org.openjdk.tools.javac.util.JCDiagnostic$Warning DivZero -> DivZero
    org.openjdk.tools.javac.util.JCDiagnostic$Warning EmptyIf -> EmptyIf
    org.openjdk.tools.javac.util.JCDiagnostic$Warning FinallyCannotComplete -> FinallyCannotComplete
    org.openjdk.tools.javac.util.JCDiagnostic$Warning IllegalCharForEncoding -> IllegalCharForEncoding
    org.openjdk.tools.javac.util.JCDiagnostic$Warning InvalidArchiveFile -> InvalidArchiveFile
    org.openjdk.tools.javac.util.JCDiagnostic$Warning InvalidPath -> InvalidPath
    org.openjdk.tools.javac.util.JCDiagnostic$Warning MethodRedundantTypeargs -> MethodRedundantTypeargs
    org.openjdk.tools.javac.util.JCDiagnostic$Warning MissingDeprecatedAnnotation -> MissingDeprecatedAnnotation
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OptionObsoleteSuppression -> OptionObsoleteSuppression
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideBridge -> OverrideBridge
    org.openjdk.tools.javac.util.JCDiagnostic$Warning PossibleFallThroughIntoCase -> PossibleFallThroughIntoCase
    org.openjdk.tools.javac.util.JCDiagnostic$Warning PotentialLambdaFound -> PotentialLambdaFound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcProcOnlyRequestedNoProcs -> ProcProcOnlyRequestedNoProcs
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcUseImplicit -> ProcUseImplicit
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcUseProcOrImplicit -> ProcUseProcOrImplicit
    org.openjdk.tools.javac.util.JCDiagnostic$Warning RequiresAutomatic -> RequiresAutomatic
    org.openjdk.tools.javac.util.JCDiagnostic$Warning RequiresTransitiveAutomatic -> RequiresTransitiveAutomatic
    org.openjdk.tools.javac.util.JCDiagnostic$Warning TryExplicitCloseCall -> TryExplicitCloseCall
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UncheckedAssign -> UncheckedAssign
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UncheckedCastToType -> UncheckedCastToType
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UnderscoreAsIdentifier -> UnderscoreAsIdentifier
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UnexpectedArchiveFile -> UnexpectedArchiveFile
    org.openjdk.tools.javac.util.JCDiagnostic$Warning Warning -> Warning
    void <init>() -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic$Warning AccessToMemberFromSerializableElement(org.openjdk.tools.javac.code.Symbol) -> AccessToMemberFromSerializableElement
    org.openjdk.tools.javac.util.JCDiagnostic$Warning AccessToMemberFromSerializableLambda(org.openjdk.tools.javac.code.Symbol) -> AccessToMemberFromSerializableLambda
    org.openjdk.tools.javac.util.JCDiagnostic$Warning AuxiliaryClassAccessedFromOutsideOfItsSourceFile(org.openjdk.tools.javac.code.Symbol,java.io.File) -> AuxiliaryClassAccessedFromOutsideOfItsSourceFile
    org.openjdk.tools.javac.util.JCDiagnostic$Warning AuxiliaryClassAccessedFromOutsideOfItsSourceFile(org.openjdk.tools.javac.code.Symbol,org.openjdk.javax.tools.JavaFileObject) -> AuxiliaryClassAccessedFromOutsideOfItsSourceFile
    org.openjdk.tools.javac.util.JCDiagnostic$Warning AuxiliaryClassAccessedFromOutsideOfItsSourceFile(org.openjdk.tools.javac.code.Type,java.io.File) -> AuxiliaryClassAccessedFromOutsideOfItsSourceFile
    org.openjdk.tools.javac.util.JCDiagnostic$Warning AuxiliaryClassAccessedFromOutsideOfItsSourceFile(org.openjdk.tools.javac.code.Type,org.openjdk.javax.tools.JavaFileObject) -> AuxiliaryClassAccessedFromOutsideOfItsSourceFile
    org.openjdk.tools.javac.util.JCDiagnostic$Warning BadNameForOption(org.openjdk.tools.javac.main.Option,java.lang.String) -> BadNameForOption
    org.openjdk.tools.javac.util.JCDiagnostic$Warning BigMajorVersion(java.io.File,int,int) -> BigMajorVersion
    org.openjdk.tools.javac.util.JCDiagnostic$Warning BigMajorVersion(org.openjdk.javax.tools.JavaFileObject,int,int) -> BigMajorVersion
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ConstantSVUID(org.openjdk.tools.javac.code.Symbol) -> ConstantSVUID
    org.openjdk.tools.javac.util.JCDiagnostic$Warning DeprecatedAnnotationHasNoEffect(org.openjdk.tools.javac.code.Kinds$Kind) -> DeprecatedAnnotationHasNoEffect
    org.openjdk.tools.javac.util.JCDiagnostic$Warning DiamondRedundantArgs(java.lang.Void,java.lang.Void) -> DiamondRedundantArgs
    org.openjdk.tools.javac.util.JCDiagnostic$Warning DirPathElementNotDirectory(java.io.File) -> DirPathElementNotDirectory
    org.openjdk.tools.javac.util.JCDiagnostic$Warning DirPathElementNotDirectory(org.openjdk.javax.tools.JavaFileObject) -> DirPathElementNotDirectory
    org.openjdk.tools.javac.util.JCDiagnostic$Warning DirPathElementNotFound(java.io.File) -> DirPathElementNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning DirPathElementNotFound(org.openjdk.javax.tools.JavaFileObject) -> DirPathElementNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning FileFromFuture(java.io.File) -> FileFromFuture
    org.openjdk.tools.javac.util.JCDiagnostic$Warning FileFromFuture(org.openjdk.javax.tools.JavaFileObject) -> FileFromFuture
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ForwardRef(org.openjdk.tools.javac.code.Symbol) -> ForwardRef
    org.openjdk.tools.javac.util.JCDiagnostic$Warning FutureAttr(org.openjdk.tools.javac.util.Name,int,int,int,int) -> FutureAttr
    org.openjdk.tools.javac.util.JCDiagnostic$Warning HasBeenDeprecated(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> HasBeenDeprecated
    org.openjdk.tools.javac.util.JCDiagnostic$Warning HasBeenDeprecatedForRemoval(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> HasBeenDeprecatedForRemoval
    org.openjdk.tools.javac.util.JCDiagnostic$Warning HasBeenDeprecatedForRemovalModule(org.openjdk.tools.javac.code.Symbol) -> HasBeenDeprecatedForRemovalModule
    org.openjdk.tools.javac.util.JCDiagnostic$Warning HasBeenDeprecatedModule(org.openjdk.tools.javac.code.Symbol) -> HasBeenDeprecatedModule
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ImproperSVUID(org.openjdk.tools.javac.code.Symbol) -> ImproperSVUID
    org.openjdk.tools.javac.util.JCDiagnostic$Warning IncubatingModules(java.lang.String) -> IncubatingModules
    org.openjdk.tools.javac.util.JCDiagnostic$Warning InexactNonVarargsCall(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> InexactNonVarargsCall
    org.openjdk.tools.javac.util.JCDiagnostic$Warning LeaksNotAccessible(org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> LeaksNotAccessible
    org.openjdk.tools.javac.util.JCDiagnostic$Warning LeaksNotAccessibleNotRequiredTransitive(org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> LeaksNotAccessibleNotRequiredTransitive
    org.openjdk.tools.javac.util.JCDiagnostic$Warning LeaksNotAccessibleUnexported(org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> LeaksNotAccessibleUnexported
    org.openjdk.tools.javac.util.JCDiagnostic$Warning LeaksNotAccessibleUnexportedQualified(org.openjdk.tools.javac.code.Kinds$KindName,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> LeaksNotAccessibleUnexportedQualified
    org.openjdk.tools.javac.util.JCDiagnostic$Warning LintOption(org.openjdk.tools.javac.main.Option) -> LintOption
    org.openjdk.tools.javac.util.JCDiagnostic$Warning LocnUnknownFileOnModulePath(java.nio.file.Path) -> LocnUnknownFileOnModulePath
    org.openjdk.tools.javac.util.JCDiagnostic$Warning LongSVUID(org.openjdk.tools.javac.code.Symbol) -> LongSVUID
    org.openjdk.tools.javac.util.JCDiagnostic$Warning MissingSVUID(org.openjdk.tools.javac.code.Symbol) -> MissingSVUID
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ModuleForOptionNotFound(org.openjdk.tools.javac.main.Option,org.openjdk.tools.javac.code.Symbol) -> ModuleForOptionNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ModuleNotFound(org.openjdk.tools.javac.code.Symbol) -> ModuleNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OptionObsoleteSource(java.lang.String) -> OptionObsoleteSource
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OptionObsoleteTarget(java.lang.String) -> OptionObsoleteTarget
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OutdirIsInExplodedModule(java.nio.file.Path) -> OutdirIsInExplodedModule
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideEqualsButNotHashcode(org.openjdk.tools.javac.code.Symbol) -> OverrideEqualsButNotHashcode
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideUncheckedRet(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> OverrideUncheckedRet
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideUncheckedRet(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> OverrideUncheckedRet
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideUncheckedThrown(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Type) -> OverrideUncheckedThrown
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideUncheckedThrown(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Type) -> OverrideUncheckedThrown
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideVarargsExtra(org.openjdk.tools.javac.util.JCDiagnostic) -> OverrideVarargsExtra
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideVarargsExtra(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> OverrideVarargsExtra
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideVarargsMissing(org.openjdk.tools.javac.util.JCDiagnostic) -> OverrideVarargsMissing
    org.openjdk.tools.javac.util.JCDiagnostic$Warning OverrideVarargsMissing(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> OverrideVarargsMissing
    org.openjdk.tools.javac.util.JCDiagnostic$Warning PackageEmptyOrNotFound(org.openjdk.tools.javac.code.Symbol) -> PackageEmptyOrNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning PathElementNotFound(java.io.File) -> PathElementNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning PathElementNotFound(org.openjdk.javax.tools.JavaFileObject) -> PathElementNotFound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning PkgInfoAlreadySeen(org.openjdk.tools.javac.code.Symbol) -> PkgInfoAlreadySeen
    org.openjdk.tools.javac.util.JCDiagnostic$Warning PoorChoiceForModuleName(org.openjdk.tools.javac.util.Name) -> PoorChoiceForModuleName
    org.openjdk.tools.javac.util.JCDiagnostic$Warning PositionOverflow(int) -> PositionOverflow
    org.openjdk.tools.javac.util.JCDiagnostic$Warning PotentiallyAmbiguousOverload(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Symbol) -> PotentiallyAmbiguousOverload
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProbFoundReq(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> ProbFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProbFoundReq(org.openjdk.tools.javac.util.JCDiagnostic$Fragment,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> ProbFoundReq
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcAnnotationsWithoutProcessors(java.util.Set) -> ProcAnnotationsWithoutProcessors
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcFileCreateLastRound(org.openjdk.tools.javac.util.Name) -> ProcFileCreateLastRound
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcFileReopening(org.openjdk.tools.javac.util.Name) -> ProcFileReopening
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcIllegalFileName(java.lang.String) -> ProcIllegalFileName
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcMalformedSupportedString(java.lang.String,java.lang.String) -> ProcMalformedSupportedString
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcMessager(java.lang.String) -> ProcMessager
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcPackageDoesNotExist(java.lang.String) -> ProcPackageDoesNotExist
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcProcessorIncompatibleSourceVersion(org.openjdk.tools.javac.code.Source,java.lang.String,java.lang.String) -> ProcProcessorIncompatibleSourceVersion
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcSuspiciousClassName(java.lang.String,java.lang.String) -> ProcSuspiciousClassName
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcTypeAlreadyExists(org.openjdk.tools.javac.util.Name) -> ProcTypeAlreadyExists
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcTypeRecreate(org.openjdk.tools.javac.util.Name) -> ProcTypeRecreate
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcUnclosedTypeFiles(java.util.Set) -> ProcUnclosedTypeFiles
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ProcUnmatchedProcessorOptions(java.lang.String) -> ProcUnmatchedProcessorOptions
    org.openjdk.tools.javac.util.JCDiagnostic$Warning RawClassUse(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Type) -> RawClassUse
    org.openjdk.tools.javac.util.JCDiagnostic$Warning RedundantCast(org.openjdk.tools.javac.code.Type) -> RedundantCast
    org.openjdk.tools.javac.util.JCDiagnostic$Warning SelfRef(org.openjdk.tools.javac.code.Symbol) -> SelfRef
    org.openjdk.tools.javac.util.JCDiagnostic$Warning ServiceProvidedButNotExportedOrUsed(org.openjdk.tools.javac.code.Symbol) -> ServiceProvidedButNotExportedOrUsed
    org.openjdk.tools.javac.util.JCDiagnostic$Warning SourceNoBootclasspath(java.lang.String) -> SourceNoBootclasspath
    org.openjdk.tools.javac.util.JCDiagnostic$Warning StaticNotQualifiedByType(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> StaticNotQualifiedByType
    org.openjdk.tools.javac.util.JCDiagnostic$Warning SunProprietary(org.openjdk.tools.javac.code.Symbol) -> SunProprietary
    org.openjdk.tools.javac.util.JCDiagnostic$Warning TryResourceNotReferenced(org.openjdk.tools.javac.code.Symbol) -> TryResourceNotReferenced
    org.openjdk.tools.javac.util.JCDiagnostic$Warning TryResourceThrowsInterruptedExc(org.openjdk.tools.javac.code.Type) -> TryResourceThrowsInterruptedExc
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UncheckedAssignToVar(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> UncheckedAssignToVar
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UncheckedCallMbrOfRawType(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.code.Type) -> UncheckedCallMbrOfRawType
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UncheckedGenericArrayCreation(org.openjdk.tools.javac.code.Type) -> UncheckedGenericArrayCreation
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UncheckedMethInvocationApplied(org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.util.Name,java.util.List,java.util.List,org.openjdk.tools.javac.code.Kinds$Kind,org.openjdk.tools.javac.code.Symbol) -> UncheckedMethInvocationApplied
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UncheckedVarargsNonReifiableType(org.openjdk.tools.javac.code.Type) -> UncheckedVarargsNonReifiableType
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UnknownEnumConstant(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.Name) -> UnknownEnumConstant
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UnknownEnumConstantReason(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic) -> UnknownEnumConstantReason
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UnknownEnumConstantReason(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> UnknownEnumConstantReason
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UnreachableCatch(java.util.List) -> UnreachableCatch
    org.openjdk.tools.javac.util.JCDiagnostic$Warning UnreachableCatch1(java.util.List) -> UnreachableCatch1
    org.openjdk.tools.javac.util.JCDiagnostic$Warning VarargsRedundantTrustmeAnno(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic) -> VarargsRedundantTrustmeAnno
    org.openjdk.tools.javac.util.JCDiagnostic$Warning VarargsRedundantTrustmeAnno(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> VarargsRedundantTrustmeAnno
    org.openjdk.tools.javac.util.JCDiagnostic$Warning VarargsUnsafeUseVarargsParam(org.openjdk.tools.javac.code.Symbol) -> VarargsUnsafeUseVarargsParam
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.resources.compiler -> org.openjdk.tools.javac.resources.compiler:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javac.resources.compiler_ja -> org.openjdk.tools.javac.resources.compiler_ja:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javac.resources.compiler_zh_CN -> org.openjdk.tools.javac.resources.compiler_zh_CN:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javac.resources.ct -> org.openjdk.tools.javac.resources.ct:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javac.resources.javac -> org.openjdk.tools.javac.resources.javac:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javac.resources.javac_ja -> org.openjdk.tools.javac.resources.javac_ja:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javac.resources.javac_zh_CN -> org.openjdk.tools.javac.resources.javac_zh_CN:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javac.resources.legacy -> org.openjdk.tools.javac.resources.legacy:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javac.tree.DCTree -> org.openjdk.tools.javac.tree.DCTree:
    int pos -> pos
    void <init>() -> <init>
    long getSourcePosition(org.openjdk.tools.javac.tree.DCTree$DCDocComment) -> getSourcePosition
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition pos(org.openjdk.tools.javac.tree.DCTree$DCDocComment) -> pos
    java.lang.String toString() -> toString
org.openjdk.tools.javac.tree.DCTree$DCAttribute -> org.openjdk.tools.javac.tree.DCTree$DCAttribute:
    org.openjdk.javax.lang.model.element.Name name -> name
    org.openjdk.source.doctree.AttributeTree$ValueKind vkind -> vkind
    java.util.List value -> value
    void <init>(org.openjdk.javax.lang.model.element.Name,org.openjdk.source.doctree.AttributeTree$ValueKind,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    org.openjdk.source.doctree.AttributeTree$ValueKind getValueKind() -> getValueKind
    java.util.List getValue() -> getValue
org.openjdk.tools.javac.tree.DCTree$DCAuthor -> org.openjdk.tools.javac.tree.DCTree$DCAuthor:
    java.util.List name -> name
    void <init>(java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getName() -> getName
org.openjdk.tools.javac.tree.DCTree$DCBlockTag -> org.openjdk.tools.javac.tree.DCTree$DCBlockTag:
    void <init>() -> <init>
    java.lang.String getTagName() -> getTagName
org.openjdk.tools.javac.tree.DCTree$DCComment -> org.openjdk.tools.javac.tree.DCTree$DCComment:
    java.lang.String body -> body
    void <init>(java.lang.String) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.lang.String getBody() -> getBody
org.openjdk.tools.javac.tree.DCTree$DCDeprecated -> org.openjdk.tools.javac.tree.DCTree$DCDeprecated:
    java.util.List body -> body
    void <init>(java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getBody() -> getBody
org.openjdk.tools.javac.tree.DCTree$DCDocComment -> org.openjdk.tools.javac.tree.DCTree$DCDocComment:
    org.openjdk.tools.javac.parser.Tokens$Comment comment -> comment
    java.util.List fullBody -> fullBody
    java.util.List firstSentence -> firstSentence
    java.util.List body -> body
    java.util.List tags -> tags
    void <init>(org.openjdk.tools.javac.parser.Tokens$Comment,java.util.List,java.util.List,java.util.List,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getFirstSentence() -> getFirstSentence
    java.util.List getFullBody() -> getFullBody
    java.util.List getBody() -> getBody
    java.util.List getBlockTags() -> getBlockTags
org.openjdk.tools.javac.tree.DCTree$DCDocRoot -> org.openjdk.tools.javac.tree.DCTree$DCDocRoot:
    void <init>() -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
org.openjdk.tools.javac.tree.DCTree$DCEndElement -> org.openjdk.tools.javac.tree.DCTree$DCEndElement:
    org.openjdk.javax.lang.model.element.Name name -> name
    void <init>(org.openjdk.javax.lang.model.element.Name) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.element.Name getName() -> getName
org.openjdk.tools.javac.tree.DCTree$DCEndPosTree -> org.openjdk.tools.javac.tree.DCTree$DCEndPosTree:
    int endPos -> endPos
    void <init>() -> <init>
    int getEndPos(org.openjdk.tools.javac.tree.DCTree$DCDocComment) -> getEndPos
    org.openjdk.tools.javac.tree.DCTree$DCEndPosTree setEndPos(int) -> setEndPos
org.openjdk.tools.javac.tree.DCTree$DCEntity -> org.openjdk.tools.javac.tree.DCTree$DCEntity:
    org.openjdk.javax.lang.model.element.Name name -> name
    void <init>(org.openjdk.javax.lang.model.element.Name) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.element.Name getName() -> getName
org.openjdk.tools.javac.tree.DCTree$DCErroneous -> org.openjdk.tools.javac.tree.DCTree$DCErroneous:
    java.lang.String body -> body
    org.openjdk.tools.javac.util.JCDiagnostic diag -> diag
    void <init>(java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic$Factory,org.openjdk.tools.javac.util.DiagnosticSource,java.lang.String,java.lang.Object[]) -> <init>
    void <init>(java.lang.String,org.openjdk.tools.javac.util.JCDiagnostic) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.lang.String getBody() -> getBody
    org.openjdk.javax.tools.Diagnostic getDiagnostic() -> getDiagnostic
    org.openjdk.tools.javac.tree.JCTree getTree() -> getTree
    int getStartPosition() -> getStartPosition
    int getPreferredPosition() -> getPreferredPosition
    int getEndPosition(org.openjdk.tools.javac.tree.EndPosTable) -> getEndPosition
org.openjdk.tools.javac.tree.DCTree$DCHidden -> org.openjdk.tools.javac.tree.DCTree$DCHidden:
    java.util.List body -> body
    void <init>(java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getBody() -> getBody
org.openjdk.tools.javac.tree.DCTree$DCIdentifier -> org.openjdk.tools.javac.tree.DCTree$DCIdentifier:
    org.openjdk.javax.lang.model.element.Name name -> name
    void <init>(org.openjdk.javax.lang.model.element.Name) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.element.Name getName() -> getName
org.openjdk.tools.javac.tree.DCTree$DCIndex -> org.openjdk.tools.javac.tree.DCTree$DCIndex:
    org.openjdk.tools.javac.tree.DCTree term -> term
    java.util.List description -> description
    void <init>(org.openjdk.tools.javac.tree.DCTree,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.source.doctree.DocTree getSearchTerm() -> getSearchTerm
    java.util.List getDescription() -> getDescription
org.openjdk.tools.javac.tree.DCTree$DCInheritDoc -> org.openjdk.tools.javac.tree.DCTree$DCInheritDoc:
    void <init>() -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
org.openjdk.tools.javac.tree.DCTree$DCInlineTag -> org.openjdk.tools.javac.tree.DCTree$DCInlineTag:
    void <init>() -> <init>
    java.lang.String getTagName() -> getTagName
org.openjdk.tools.javac.tree.DCTree$DCLink -> org.openjdk.tools.javac.tree.DCTree$DCLink:
    org.openjdk.source.doctree.DocTree$Kind kind -> kind
    org.openjdk.tools.javac.tree.DCTree$DCReference ref -> ref
    java.util.List label -> label
    void <init>(org.openjdk.source.doctree.DocTree$Kind,org.openjdk.tools.javac.tree.DCTree$DCReference,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.source.doctree.ReferenceTree getReference() -> getReference
    java.util.List getLabel() -> getLabel
org.openjdk.tools.javac.tree.DCTree$DCLiteral -> org.openjdk.tools.javac.tree.DCTree$DCLiteral:
    org.openjdk.source.doctree.DocTree$Kind kind -> kind
    org.openjdk.tools.javac.tree.DCTree$DCText body -> body
    void <init>(org.openjdk.source.doctree.DocTree$Kind,org.openjdk.tools.javac.tree.DCTree$DCText) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.DCTree$DCText getBody() -> getBody
    org.openjdk.source.doctree.TextTree getBody() -> getBody
org.openjdk.tools.javac.tree.DCTree$DCParam -> org.openjdk.tools.javac.tree.DCTree$DCParam:
    boolean isTypeParameter -> isTypeParameter
    org.openjdk.tools.javac.tree.DCTree$DCIdentifier name -> name
    java.util.List description -> description
    void <init>(boolean,org.openjdk.tools.javac.tree.DCTree$DCIdentifier,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    boolean isTypeParameter() -> isTypeParameter
    org.openjdk.source.doctree.IdentifierTree getName() -> getName
    java.util.List getDescription() -> getDescription
org.openjdk.tools.javac.tree.DCTree$DCProvides -> org.openjdk.tools.javac.tree.DCTree$DCProvides:
    org.openjdk.tools.javac.tree.DCTree$DCReference serviceType -> serviceType
    java.util.List description -> description
    void <init>(org.openjdk.tools.javac.tree.DCTree$DCReference,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.source.doctree.ReferenceTree getServiceType() -> getServiceType
    java.util.List getDescription() -> getDescription
org.openjdk.tools.javac.tree.DCTree$DCReference -> org.openjdk.tools.javac.tree.DCTree$DCReference:
    java.lang.String signature -> signature
    org.openjdk.tools.javac.tree.JCTree qualifierExpression -> qualifierExpression
    org.openjdk.javax.lang.model.element.Name memberName -> memberName
    java.util.List paramTypes -> paramTypes
    void <init>(java.lang.String,org.openjdk.tools.javac.tree.JCTree,org.openjdk.javax.lang.model.element.Name,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.lang.String getSignature() -> getSignature
org.openjdk.tools.javac.tree.DCTree$DCReturn -> org.openjdk.tools.javac.tree.DCTree$DCReturn:
    java.util.List description -> description
    void <init>(java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getDescription() -> getDescription
org.openjdk.tools.javac.tree.DCTree$DCSee -> org.openjdk.tools.javac.tree.DCTree$DCSee:
    java.util.List reference -> reference
    void <init>(java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getReference() -> getReference
org.openjdk.tools.javac.tree.DCTree$DCSerial -> org.openjdk.tools.javac.tree.DCTree$DCSerial:
    java.util.List description -> description
    void <init>(java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getDescription() -> getDescription
org.openjdk.tools.javac.tree.DCTree$DCSerialData -> org.openjdk.tools.javac.tree.DCTree$DCSerialData:
    java.util.List description -> description
    void <init>(java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getDescription() -> getDescription
org.openjdk.tools.javac.tree.DCTree$DCSerialField -> org.openjdk.tools.javac.tree.DCTree$DCSerialField:
    org.openjdk.tools.javac.tree.DCTree$DCIdentifier name -> name
    org.openjdk.tools.javac.tree.DCTree$DCReference type -> type
    java.util.List description -> description
    void <init>(org.openjdk.tools.javac.tree.DCTree$DCIdentifier,org.openjdk.tools.javac.tree.DCTree$DCReference,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getDescription() -> getDescription
    org.openjdk.source.doctree.IdentifierTree getName() -> getName
    org.openjdk.source.doctree.ReferenceTree getType() -> getType
org.openjdk.tools.javac.tree.DCTree$DCSince -> org.openjdk.tools.javac.tree.DCTree$DCSince:
    java.util.List body -> body
    void <init>(java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getBody() -> getBody
org.openjdk.tools.javac.tree.DCTree$DCStartElement -> org.openjdk.tools.javac.tree.DCTree$DCStartElement:
    org.openjdk.javax.lang.model.element.Name name -> name
    java.util.List attrs -> attrs
    boolean selfClosing -> selfClosing
    void <init>(org.openjdk.javax.lang.model.element.Name,java.util.List,boolean) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    java.util.List getAttributes() -> getAttributes
    boolean isSelfClosing() -> isSelfClosing
org.openjdk.tools.javac.tree.DCTree$DCText -> org.openjdk.tools.javac.tree.DCTree$DCText:
    java.lang.String text -> text
    void <init>(java.lang.String) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.lang.String getBody() -> getBody
org.openjdk.tools.javac.tree.DCTree$DCThrows -> org.openjdk.tools.javac.tree.DCTree$DCThrows:
    org.openjdk.source.doctree.DocTree$Kind kind -> kind
    org.openjdk.tools.javac.tree.DCTree$DCReference name -> name
    java.util.List description -> description
    void <init>(org.openjdk.source.doctree.DocTree$Kind,org.openjdk.tools.javac.tree.DCTree$DCReference,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.source.doctree.ReferenceTree getExceptionName() -> getExceptionName
    java.util.List getDescription() -> getDescription
org.openjdk.tools.javac.tree.DCTree$DCUnknownBlockTag -> org.openjdk.tools.javac.tree.DCTree$DCUnknownBlockTag:
    org.openjdk.javax.lang.model.element.Name name -> name
    java.util.List content -> content
    void <init>(org.openjdk.javax.lang.model.element.Name,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.lang.String getTagName() -> getTagName
    java.util.List getContent() -> getContent
org.openjdk.tools.javac.tree.DCTree$DCUnknownInlineTag -> org.openjdk.tools.javac.tree.DCTree$DCUnknownInlineTag:
    org.openjdk.javax.lang.model.element.Name name -> name
    java.util.List content -> content
    void <init>(org.openjdk.javax.lang.model.element.Name,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.lang.String getTagName() -> getTagName
    java.util.List getContent() -> getContent
org.openjdk.tools.javac.tree.DCTree$DCUses -> org.openjdk.tools.javac.tree.DCTree$DCUses:
    org.openjdk.tools.javac.tree.DCTree$DCReference serviceType -> serviceType
    java.util.List description -> description
    void <init>(org.openjdk.tools.javac.tree.DCTree$DCReference,java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.source.doctree.ReferenceTree getServiceType() -> getServiceType
    java.util.List getDescription() -> getDescription
org.openjdk.tools.javac.tree.DCTree$DCValue -> org.openjdk.tools.javac.tree.DCTree$DCValue:
    org.openjdk.tools.javac.tree.DCTree$DCReference ref -> ref
    void <init>(org.openjdk.tools.javac.tree.DCTree$DCReference) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    org.openjdk.source.doctree.ReferenceTree getReference() -> getReference
org.openjdk.tools.javac.tree.DCTree$DCVersion -> org.openjdk.tools.javac.tree.DCTree$DCVersion:
    java.util.List body -> body
    void <init>(java.util.List) -> <init>
    org.openjdk.source.doctree.DocTree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.doctree.DocTreeVisitor,java.lang.Object) -> accept
    java.util.List getBody() -> getBody
org.openjdk.tools.javac.tree.DocCommentTable -> org.openjdk.tools.javac.tree.DocCommentTable:
    boolean hasComment(org.openjdk.tools.javac.tree.JCTree) -> hasComment
    org.openjdk.tools.javac.parser.Tokens$Comment getComment(org.openjdk.tools.javac.tree.JCTree) -> getComment
    java.lang.String getCommentText(org.openjdk.tools.javac.tree.JCTree) -> getCommentText
    org.openjdk.tools.javac.tree.DCTree$DCDocComment getCommentTree(org.openjdk.tools.javac.tree.JCTree) -> getCommentTree
    void putComment(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.parser.Tokens$Comment) -> putComment
org.openjdk.tools.javac.tree.DocPretty -> org.openjdk.tools.javac.tree.DocPretty:
    java.io.Writer out -> out
    int lmargin -> lmargin
    java.lang.String lineSep -> lineSep
    void <init>(java.io.Writer) -> <init>
    void print(org.openjdk.source.doctree.DocTree) -> print
    void print(java.lang.Object) -> print
    void print(java.util.List) -> print
    void print(java.util.List,java.lang.String) -> print
    void println() -> println
    void printTagName(org.openjdk.source.doctree.DocTree) -> printTagName
    java.lang.Void visitAttribute(org.openjdk.source.doctree.AttributeTree,java.lang.Void) -> visitAttribute
    java.lang.Void visitAuthor(org.openjdk.source.doctree.AuthorTree,java.lang.Void) -> visitAuthor
    java.lang.Void visitComment(org.openjdk.source.doctree.CommentTree,java.lang.Void) -> visitComment
    java.lang.Void visitDeprecated(org.openjdk.source.doctree.DeprecatedTree,java.lang.Void) -> visitDeprecated
    java.lang.Void visitDocComment(org.openjdk.source.doctree.DocCommentTree,java.lang.Void) -> visitDocComment
    java.lang.Void visitDocRoot(org.openjdk.source.doctree.DocRootTree,java.lang.Void) -> visitDocRoot
    java.lang.Void visitEndElement(org.openjdk.source.doctree.EndElementTree,java.lang.Void) -> visitEndElement
    java.lang.Void visitEntity(org.openjdk.source.doctree.EntityTree,java.lang.Void) -> visitEntity
    java.lang.Void visitErroneous(org.openjdk.source.doctree.ErroneousTree,java.lang.Void) -> visitErroneous
    java.lang.Void visitHidden(org.openjdk.source.doctree.HiddenTree,java.lang.Void) -> visitHidden
    java.lang.Void visitIdentifier(org.openjdk.source.doctree.IdentifierTree,java.lang.Void) -> visitIdentifier
    java.lang.Void visitIndex(org.openjdk.source.doctree.IndexTree,java.lang.Void) -> visitIndex
    java.lang.Void visitInheritDoc(org.openjdk.source.doctree.InheritDocTree,java.lang.Void) -> visitInheritDoc
    java.lang.Void visitLink(org.openjdk.source.doctree.LinkTree,java.lang.Void) -> visitLink
    java.lang.Void visitLiteral(org.openjdk.source.doctree.LiteralTree,java.lang.Void) -> visitLiteral
    java.lang.Void visitParam(org.openjdk.source.doctree.ParamTree,java.lang.Void) -> visitParam
    java.lang.Void visitProvides(org.openjdk.source.doctree.ProvidesTree,java.lang.Void) -> visitProvides
    java.lang.Void visitReference(org.openjdk.source.doctree.ReferenceTree,java.lang.Void) -> visitReference
    java.lang.Void visitReturn(org.openjdk.source.doctree.ReturnTree,java.lang.Void) -> visitReturn
    java.lang.Void visitSee(org.openjdk.source.doctree.SeeTree,java.lang.Void) -> visitSee
    java.lang.Void visitSerial(org.openjdk.source.doctree.SerialTree,java.lang.Void) -> visitSerial
    java.lang.Void visitSerialData(org.openjdk.source.doctree.SerialDataTree,java.lang.Void) -> visitSerialData
    java.lang.Void visitSerialField(org.openjdk.source.doctree.SerialFieldTree,java.lang.Void) -> visitSerialField
    java.lang.Void visitSince(org.openjdk.source.doctree.SinceTree,java.lang.Void) -> visitSince
    java.lang.Void visitStartElement(org.openjdk.source.doctree.StartElementTree,java.lang.Void) -> visitStartElement
    java.lang.Void visitText(org.openjdk.source.doctree.TextTree,java.lang.Void) -> visitText
    java.lang.Void visitThrows(org.openjdk.source.doctree.ThrowsTree,java.lang.Void) -> visitThrows
    java.lang.Void visitUnknownBlockTag(org.openjdk.source.doctree.UnknownBlockTagTree,java.lang.Void) -> visitUnknownBlockTag
    java.lang.Void visitUnknownInlineTag(org.openjdk.source.doctree.UnknownInlineTagTree,java.lang.Void) -> visitUnknownInlineTag
    java.lang.Void visitUses(org.openjdk.source.doctree.UsesTree,java.lang.Void) -> visitUses
    java.lang.Void visitValue(org.openjdk.source.doctree.ValueTree,java.lang.Void) -> visitValue
    java.lang.Void visitVersion(org.openjdk.source.doctree.VersionTree,java.lang.Void) -> visitVersion
    java.lang.Void visitOther(org.openjdk.source.doctree.DocTree,java.lang.Void) -> visitOther
    java.lang.Object visitOther(org.openjdk.source.doctree.DocTree,java.lang.Object) -> visitOther
    java.lang.Object visitVersion(org.openjdk.source.doctree.VersionTree,java.lang.Object) -> visitVersion
    java.lang.Object visitValue(org.openjdk.source.doctree.ValueTree,java.lang.Object) -> visitValue
    java.lang.Object visitUses(org.openjdk.source.doctree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitUnknownInlineTag(org.openjdk.source.doctree.UnknownInlineTagTree,java.lang.Object) -> visitUnknownInlineTag
    java.lang.Object visitUnknownBlockTag(org.openjdk.source.doctree.UnknownBlockTagTree,java.lang.Object) -> visitUnknownBlockTag
    java.lang.Object visitThrows(org.openjdk.source.doctree.ThrowsTree,java.lang.Object) -> visitThrows
    java.lang.Object visitText(org.openjdk.source.doctree.TextTree,java.lang.Object) -> visitText
    java.lang.Object visitStartElement(org.openjdk.source.doctree.StartElementTree,java.lang.Object) -> visitStartElement
    java.lang.Object visitSince(org.openjdk.source.doctree.SinceTree,java.lang.Object) -> visitSince
    java.lang.Object visitSerialField(org.openjdk.source.doctree.SerialFieldTree,java.lang.Object) -> visitSerialField
    java.lang.Object visitSerialData(org.openjdk.source.doctree.SerialDataTree,java.lang.Object) -> visitSerialData
    java.lang.Object visitSerial(org.openjdk.source.doctree.SerialTree,java.lang.Object) -> visitSerial
    java.lang.Object visitSee(org.openjdk.source.doctree.SeeTree,java.lang.Object) -> visitSee
    java.lang.Object visitReturn(org.openjdk.source.doctree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitReference(org.openjdk.source.doctree.ReferenceTree,java.lang.Object) -> visitReference
    java.lang.Object visitProvides(org.openjdk.source.doctree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitParam(org.openjdk.source.doctree.ParamTree,java.lang.Object) -> visitParam
    java.lang.Object visitLiteral(org.openjdk.source.doctree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitLink(org.openjdk.source.doctree.LinkTree,java.lang.Object) -> visitLink
    java.lang.Object visitInheritDoc(org.openjdk.source.doctree.InheritDocTree,java.lang.Object) -> visitInheritDoc
    java.lang.Object visitIndex(org.openjdk.source.doctree.IndexTree,java.lang.Object) -> visitIndex
    java.lang.Object visitIdentifier(org.openjdk.source.doctree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitHidden(org.openjdk.source.doctree.HiddenTree,java.lang.Object) -> visitHidden
    java.lang.Object visitErroneous(org.openjdk.source.doctree.ErroneousTree,java.lang.Object) -> visitErroneous
    java.lang.Object visitEntity(org.openjdk.source.doctree.EntityTree,java.lang.Object) -> visitEntity
    java.lang.Object visitEndElement(org.openjdk.source.doctree.EndElementTree,java.lang.Object) -> visitEndElement
    java.lang.Object visitDocRoot(org.openjdk.source.doctree.DocRootTree,java.lang.Object) -> visitDocRoot
    java.lang.Object visitDocComment(org.openjdk.source.doctree.DocCommentTree,java.lang.Object) -> visitDocComment
    java.lang.Object visitDeprecated(org.openjdk.source.doctree.DeprecatedTree,java.lang.Object) -> visitDeprecated
    java.lang.Object visitComment(org.openjdk.source.doctree.CommentTree,java.lang.Object) -> visitComment
    java.lang.Object visitAuthor(org.openjdk.source.doctree.AuthorTree,java.lang.Object) -> visitAuthor
    java.lang.Object visitAttribute(org.openjdk.source.doctree.AttributeTree,java.lang.Object) -> visitAttribute
org.openjdk.tools.javac.tree.DocPretty$1 -> org.openjdk.tools.javac.tree.DocPretty$1:
    int[] $SwitchMap$com$sun$source$doctree$AttributeTree$ValueKind -> $SwitchMap$com$sun$source$doctree$AttributeTree$ValueKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.DocPretty$UncheckedIOException -> org.openjdk.tools.javac.tree.DocPretty$UncheckedIOException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.io.IOException) -> <init>
org.openjdk.tools.javac.tree.DocTreeMaker -> org.openjdk.tools.javac.tree.DocTreeMaker:
    org.openjdk.tools.javac.util.Context$Key treeMakerKey -> treeMakerKey
    java.util.EnumSet sentenceBreakTags -> sentenceBreakTags
    int pos -> pos
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.api.JavacTrees trees -> trees
    org.openjdk.tools.javac.parser.ReferenceParser referenceParser -> referenceParser
    org.openjdk.tools.javac.tree.DocTreeMaker instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.tree.DocTreeMaker at(int) -> at
    org.openjdk.tools.javac.tree.DocTreeMaker at(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> at
    org.openjdk.tools.javac.tree.DCTree$DCAttribute newAttributeTree(org.openjdk.javax.lang.model.element.Name,org.openjdk.source.doctree.AttributeTree$ValueKind,java.util.List) -> newAttributeTree
    org.openjdk.tools.javac.tree.DCTree$DCAuthor newAuthorTree(java.util.List) -> newAuthorTree
    org.openjdk.tools.javac.tree.DCTree$DCLiteral newCodeTree(org.openjdk.source.doctree.TextTree) -> newCodeTree
    org.openjdk.tools.javac.tree.DCTree$DCComment newCommentTree(java.lang.String) -> newCommentTree
    org.openjdk.tools.javac.tree.DCTree$DCDeprecated newDeprecatedTree(java.util.List) -> newDeprecatedTree
    org.openjdk.tools.javac.tree.DCTree$DCDocComment newDocCommentTree(org.openjdk.tools.javac.parser.Tokens$Comment,java.util.List,java.util.List) -> newDocCommentTree
    org.openjdk.tools.javac.tree.DCTree$DCDocComment newDocCommentTree(java.util.List,java.util.List) -> newDocCommentTree
    org.openjdk.tools.javac.tree.DCTree$DCDocRoot newDocRootTree() -> newDocRootTree
    org.openjdk.tools.javac.tree.DCTree$DCEndElement newEndElementTree(org.openjdk.javax.lang.model.element.Name) -> newEndElementTree
    org.openjdk.tools.javac.tree.DCTree$DCEntity newEntityTree(org.openjdk.javax.lang.model.element.Name) -> newEntityTree
    org.openjdk.tools.javac.tree.DCTree$DCErroneous newErroneousTree(java.lang.String,org.openjdk.javax.tools.Diagnostic) -> newErroneousTree
    org.openjdk.tools.javac.tree.DCTree$DCErroneous newErroneousTree(java.lang.String,org.openjdk.tools.javac.util.DiagnosticSource,java.lang.String,java.lang.Object[]) -> newErroneousTree
    org.openjdk.tools.javac.tree.DCTree$DCThrows newExceptionTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newExceptionTree
    org.openjdk.tools.javac.tree.DCTree$DCHidden newHiddenTree(java.util.List) -> newHiddenTree
    org.openjdk.tools.javac.tree.DCTree$DCIdentifier newIdentifierTree(org.openjdk.javax.lang.model.element.Name) -> newIdentifierTree
    org.openjdk.tools.javac.tree.DCTree$DCIndex newIndexTree(org.openjdk.source.doctree.DocTree,java.util.List) -> newIndexTree
    org.openjdk.tools.javac.tree.DCTree$DCInheritDoc newInheritDocTree() -> newInheritDocTree
    org.openjdk.tools.javac.tree.DCTree$DCLink newLinkTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newLinkTree
    org.openjdk.tools.javac.tree.DCTree$DCLink newLinkPlainTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newLinkPlainTree
    org.openjdk.tools.javac.tree.DCTree$DCLiteral newLiteralTree(org.openjdk.source.doctree.TextTree) -> newLiteralTree
    org.openjdk.tools.javac.tree.DCTree$DCParam newParamTree(boolean,org.openjdk.source.doctree.IdentifierTree,java.util.List) -> newParamTree
    org.openjdk.tools.javac.tree.DCTree$DCProvides newProvidesTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newProvidesTree
    org.openjdk.tools.javac.tree.DCTree$DCReference newReferenceTree(java.lang.String) -> newReferenceTree
    org.openjdk.tools.javac.tree.DCTree$DCReference newReferenceTree(java.lang.String,org.openjdk.tools.javac.tree.JCTree,org.openjdk.javax.lang.model.element.Name,java.util.List) -> newReferenceTree
    org.openjdk.tools.javac.tree.DCTree$DCReturn newReturnTree(java.util.List) -> newReturnTree
    org.openjdk.tools.javac.tree.DCTree$DCSee newSeeTree(java.util.List) -> newSeeTree
    org.openjdk.tools.javac.tree.DCTree$DCSerial newSerialTree(java.util.List) -> newSerialTree
    org.openjdk.tools.javac.tree.DCTree$DCSerialData newSerialDataTree(java.util.List) -> newSerialDataTree
    org.openjdk.tools.javac.tree.DCTree$DCSerialField newSerialFieldTree(org.openjdk.source.doctree.IdentifierTree,org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newSerialFieldTree
    org.openjdk.tools.javac.tree.DCTree$DCSince newSinceTree(java.util.List) -> newSinceTree
    org.openjdk.tools.javac.tree.DCTree$DCStartElement newStartElementTree(org.openjdk.javax.lang.model.element.Name,java.util.List,boolean) -> newStartElementTree
    org.openjdk.tools.javac.tree.DCTree$DCText newTextTree(java.lang.String) -> newTextTree
    org.openjdk.tools.javac.tree.DCTree$DCThrows newThrowsTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newThrowsTree
    org.openjdk.tools.javac.tree.DCTree$DCUnknownBlockTag newUnknownBlockTagTree(org.openjdk.javax.lang.model.element.Name,java.util.List) -> newUnknownBlockTagTree
    org.openjdk.tools.javac.tree.DCTree$DCUnknownInlineTag newUnknownInlineTagTree(org.openjdk.javax.lang.model.element.Name,java.util.List) -> newUnknownInlineTagTree
    org.openjdk.tools.javac.tree.DCTree$DCUses newUsesTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newUsesTree
    org.openjdk.tools.javac.tree.DCTree$DCValue newValueTree(org.openjdk.source.doctree.ReferenceTree) -> newValueTree
    org.openjdk.tools.javac.tree.DCTree$DCVersion newVersionTree(java.util.List) -> newVersionTree
    java.util.List getFirstSentence(java.util.List) -> getFirstSentence
    org.openjdk.tools.javac.util.Pair splitBody(java.util.Collection) -> splitBody
    boolean isTextTree(org.openjdk.source.doctree.DocTree) -> isTextTree
    int defaultSentenceBreak(java.lang.String) -> defaultSentenceBreak
    int getSentenceBreak(java.lang.String,org.openjdk.source.doctree.DocTree) -> getSentenceBreak
    boolean isSentenceBreak(org.openjdk.javax.lang.model.element.Name) -> isSentenceBreak
    boolean isSentenceBreak(org.openjdk.source.doctree.DocTree,boolean) -> isSentenceBreak
    int skipWhiteSpace(java.lang.String,int) -> skipWhiteSpace
    java.lang.String removeTrailingWhitespace(java.lang.String) -> removeTrailingWhitespace
    java.util.List cast(java.util.List) -> cast
    org.openjdk.source.util.DocTreeFactory at(int) -> at
    org.openjdk.source.doctree.VersionTree newVersionTree(java.util.List) -> newVersionTree
    org.openjdk.source.doctree.ValueTree newValueTree(org.openjdk.source.doctree.ReferenceTree) -> newValueTree
    org.openjdk.source.doctree.UsesTree newUsesTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newUsesTree
    org.openjdk.source.doctree.UnknownInlineTagTree newUnknownInlineTagTree(org.openjdk.javax.lang.model.element.Name,java.util.List) -> newUnknownInlineTagTree
    org.openjdk.source.doctree.UnknownBlockTagTree newUnknownBlockTagTree(org.openjdk.javax.lang.model.element.Name,java.util.List) -> newUnknownBlockTagTree
    org.openjdk.source.doctree.ThrowsTree newThrowsTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newThrowsTree
    org.openjdk.source.doctree.TextTree newTextTree(java.lang.String) -> newTextTree
    org.openjdk.source.doctree.StartElementTree newStartElementTree(org.openjdk.javax.lang.model.element.Name,java.util.List,boolean) -> newStartElementTree
    org.openjdk.source.doctree.SinceTree newSinceTree(java.util.List) -> newSinceTree
    org.openjdk.source.doctree.SerialFieldTree newSerialFieldTree(org.openjdk.source.doctree.IdentifierTree,org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newSerialFieldTree
    org.openjdk.source.doctree.SerialDataTree newSerialDataTree(java.util.List) -> newSerialDataTree
    org.openjdk.source.doctree.SerialTree newSerialTree(java.util.List) -> newSerialTree
    org.openjdk.source.doctree.SeeTree newSeeTree(java.util.List) -> newSeeTree
    org.openjdk.source.doctree.ReturnTree newReturnTree(java.util.List) -> newReturnTree
    org.openjdk.source.doctree.ReferenceTree newReferenceTree(java.lang.String) -> newReferenceTree
    org.openjdk.source.doctree.ProvidesTree newProvidesTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newProvidesTree
    org.openjdk.source.doctree.ParamTree newParamTree(boolean,org.openjdk.source.doctree.IdentifierTree,java.util.List) -> newParamTree
    org.openjdk.source.doctree.LiteralTree newLiteralTree(org.openjdk.source.doctree.TextTree) -> newLiteralTree
    org.openjdk.source.doctree.LinkTree newLinkPlainTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newLinkPlainTree
    org.openjdk.source.doctree.LinkTree newLinkTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newLinkTree
    org.openjdk.source.doctree.InheritDocTree newInheritDocTree() -> newInheritDocTree
    org.openjdk.source.doctree.IndexTree newIndexTree(org.openjdk.source.doctree.DocTree,java.util.List) -> newIndexTree
    org.openjdk.source.doctree.IdentifierTree newIdentifierTree(org.openjdk.javax.lang.model.element.Name) -> newIdentifierTree
    org.openjdk.source.doctree.HiddenTree newHiddenTree(java.util.List) -> newHiddenTree
    org.openjdk.source.doctree.ThrowsTree newExceptionTree(org.openjdk.source.doctree.ReferenceTree,java.util.List) -> newExceptionTree
    org.openjdk.source.doctree.ErroneousTree newErroneousTree(java.lang.String,org.openjdk.javax.tools.Diagnostic) -> newErroneousTree
    org.openjdk.source.doctree.EntityTree newEntityTree(org.openjdk.javax.lang.model.element.Name) -> newEntityTree
    org.openjdk.source.doctree.EndElementTree newEndElementTree(org.openjdk.javax.lang.model.element.Name) -> newEndElementTree
    org.openjdk.source.doctree.DocRootTree newDocRootTree() -> newDocRootTree
    org.openjdk.source.doctree.DocCommentTree newDocCommentTree(java.util.List,java.util.List) -> newDocCommentTree
    org.openjdk.source.doctree.DeprecatedTree newDeprecatedTree(java.util.List) -> newDeprecatedTree
    org.openjdk.source.doctree.CommentTree newCommentTree(java.lang.String) -> newCommentTree
    org.openjdk.source.doctree.LiteralTree newCodeTree(org.openjdk.source.doctree.TextTree) -> newCodeTree
    org.openjdk.source.doctree.AuthorTree newAuthorTree(java.util.List) -> newAuthorTree
    org.openjdk.source.doctree.AttributeTree newAttributeTree(org.openjdk.javax.lang.model.element.Name,org.openjdk.source.doctree.AttributeTree$ValueKind,java.util.List) -> newAttributeTree
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.DocTreeMaker$1 -> org.openjdk.tools.javac.tree.DocTreeMaker$1:
    org.openjdk.tools.javac.tree.DocTreeMaker this$0 -> this$0
    void <init>(org.openjdk.tools.javac.tree.DocTreeMaker) -> <init>
    java.lang.String getText() -> getText
    int getSourcePos(int) -> getSourcePos
    org.openjdk.tools.javac.parser.Tokens$Comment$CommentStyle getStyle() -> getStyle
    boolean isDeprecated() -> isDeprecated
org.openjdk.tools.javac.tree.DocTreeMaker$2 -> org.openjdk.tools.javac.tree.DocTreeMaker$2:
    int[] $SwitchMap$com$sun$source$doctree$DocTree$Kind -> $SwitchMap$com$sun$source$doctree$DocTree$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.EndPosTable -> org.openjdk.tools.javac.tree.EndPosTable:
    int getEndPos(org.openjdk.tools.javac.tree.JCTree) -> getEndPos
    void storeEnd(org.openjdk.tools.javac.tree.JCTree,int) -> storeEnd
    int replaceTree(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> replaceTree
org.openjdk.tools.javac.tree.JCTree -> org.openjdk.tools.javac.tree.JCTree:
    int pos -> pos
    org.openjdk.tools.javac.code.Type type -> type
    void <init>() -> <init>
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    boolean hasTag(org.openjdk.tools.javac.tree.JCTree$Tag) -> hasTag
    java.lang.String toString() -> toString
    org.openjdk.tools.javac.tree.JCTree setPos(int) -> setPos
    org.openjdk.tools.javac.tree.JCTree setType(org.openjdk.tools.javac.code.Type) -> setType
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    java.lang.Object clone() -> clone
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition pos() -> pos
    org.openjdk.tools.javac.tree.JCTree getTree() -> getTree
    int getStartPosition() -> getStartPosition
    int getPreferredPosition() -> getPreferredPosition
    int getEndPosition(org.openjdk.tools.javac.tree.EndPosTable) -> getEndPosition
org.openjdk.tools.javac.tree.JCTree$1 -> org.openjdk.tools.javac.tree.JCTree$1:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    int[] $SwitchMap$com$sun$tools$javac$code$BoundKind -> $SwitchMap$com$sun$tools$javac$code$BoundKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.JCTree$Factory -> org.openjdk.tools.javac.tree.JCTree$Factory:
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit TopLevel(org.openjdk.tools.javac.util.List) -> TopLevel
    org.openjdk.tools.javac.tree.JCTree$JCPackageDecl PackageDecl(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> PackageDecl
    org.openjdk.tools.javac.tree.JCTree$JCImport Import(org.openjdk.tools.javac.tree.JCTree,boolean) -> Import
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl ClassDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> ClassDef
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl MethodDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> MethodDef
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl VarDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> VarDef
    org.openjdk.tools.javac.tree.JCTree$JCSkip Skip() -> Skip
    org.openjdk.tools.javac.tree.JCTree$JCBlock Block(long,org.openjdk.tools.javac.util.List) -> Block
    org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop DoLoop(org.openjdk.tools.javac.tree.JCTree$JCStatement,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> DoLoop
    org.openjdk.tools.javac.tree.JCTree$JCWhileLoop WhileLoop(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> WhileLoop
    org.openjdk.tools.javac.tree.JCTree$JCForLoop ForLoop(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> ForLoop
    org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop ForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> ForeachLoop
    org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement Labelled(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> Labelled
    org.openjdk.tools.javac.tree.JCTree$JCSwitch Switch(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Switch
    org.openjdk.tools.javac.tree.JCTree$JCCase Case(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Case
    org.openjdk.tools.javac.tree.JCTree$JCSynchronized Synchronized(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> Synchronized
    org.openjdk.tools.javac.tree.JCTree$JCTry Try(org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> Try
    org.openjdk.tools.javac.tree.JCTree$JCTry Try(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> Try
    org.openjdk.tools.javac.tree.JCTree$JCCatch Catch(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> Catch
    org.openjdk.tools.javac.tree.JCTree$JCConditional Conditional(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Conditional
    org.openjdk.tools.javac.tree.JCTree$JCIf If(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCStatement,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> If
    org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement Exec(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Exec
    org.openjdk.tools.javac.tree.JCTree$JCBreak Break(org.openjdk.tools.javac.util.Name) -> Break
    org.openjdk.tools.javac.tree.JCTree$JCContinue Continue(org.openjdk.tools.javac.util.Name) -> Continue
    org.openjdk.tools.javac.tree.JCTree$JCReturn Return(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Return
    org.openjdk.tools.javac.tree.JCTree$JCThrow Throw(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Throw
    org.openjdk.tools.javac.tree.JCTree$JCAssert Assert(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Assert
    org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation Apply(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Apply
    org.openjdk.tools.javac.tree.JCTree$JCNewClass NewClass(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> NewClass
    org.openjdk.tools.javac.tree.JCTree$JCNewArray NewArray(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> NewArray
    org.openjdk.tools.javac.tree.JCTree$JCParens Parens(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Parens
    org.openjdk.tools.javac.tree.JCTree$JCAssign Assign(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Assign
    org.openjdk.tools.javac.tree.JCTree$JCAssignOp Assignop(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> Assignop
    org.openjdk.tools.javac.tree.JCTree$JCUnary Unary(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Unary
    org.openjdk.tools.javac.tree.JCTree$JCBinary Binary(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Binary
    org.openjdk.tools.javac.tree.JCTree$JCTypeCast TypeCast(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> TypeCast
    org.openjdk.tools.javac.tree.JCTree$JCInstanceOf TypeTest(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree) -> TypeTest
    org.openjdk.tools.javac.tree.JCTree$JCArrayAccess Indexed(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Indexed
    org.openjdk.tools.javac.tree.JCTree$JCFieldAccess Select(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.Name) -> Select
    org.openjdk.tools.javac.tree.JCTree$JCIdent Ident(org.openjdk.tools.javac.util.Name) -> Ident
    org.openjdk.tools.javac.tree.JCTree$JCLiteral Literal(org.openjdk.tools.javac.code.TypeTag,java.lang.Object) -> Literal
    org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree TypeIdent(org.openjdk.tools.javac.code.TypeTag) -> TypeIdent
    org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree TypeArray(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> TypeArray
    org.openjdk.tools.javac.tree.JCTree$JCTypeApply TypeApply(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> TypeApply
    org.openjdk.tools.javac.tree.JCTree$JCTypeParameter TypeParameter(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> TypeParameter
    org.openjdk.tools.javac.tree.JCTree$JCWildcard Wildcard(org.openjdk.tools.javac.tree.JCTree$TypeBoundKind,org.openjdk.tools.javac.tree.JCTree) -> Wildcard
    org.openjdk.tools.javac.tree.JCTree$TypeBoundKind TypeBoundKind(org.openjdk.tools.javac.code.BoundKind) -> TypeBoundKind
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation Annotation(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List) -> Annotation
    org.openjdk.tools.javac.tree.JCTree$JCModifiers Modifiers(long,org.openjdk.tools.javac.util.List) -> Modifiers
    org.openjdk.tools.javac.tree.JCTree$JCErroneous Erroneous(org.openjdk.tools.javac.util.List) -> Erroneous
    org.openjdk.tools.javac.tree.JCTree$JCModuleDecl ModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.source.tree.ModuleTree$ModuleKind,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> ModuleDef
    org.openjdk.tools.javac.tree.JCTree$JCExports Exports(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Exports
    org.openjdk.tools.javac.tree.JCTree$JCOpens Opens(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Opens
    org.openjdk.tools.javac.tree.JCTree$JCProvides Provides(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Provides
    org.openjdk.tools.javac.tree.JCTree$JCRequires Requires(boolean,boolean,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Requires
    org.openjdk.tools.javac.tree.JCTree$JCUses Uses(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Uses
    org.openjdk.tools.javac.tree.JCTree$LetExpr LetExpr(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> LetExpr
org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType -> org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType:
    org.openjdk.tools.javac.util.List annotations -> annotations
    org.openjdk.tools.javac.tree.JCTree$JCExpression underlyingType -> underlyingType
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.List getAnnotations() -> getAnnotations
    org.openjdk.tools.javac.tree.JCTree$JCExpression getUnderlyingType() -> getUnderlyingType
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getUnderlyingType() -> getUnderlyingType
    java.util.List getAnnotations() -> getAnnotations
org.openjdk.tools.javac.tree.JCTree$JCAnnotation -> org.openjdk.tools.javac.tree.JCTree$JCAnnotation:
    org.openjdk.tools.javac.tree.JCTree$Tag tag -> tag
    org.openjdk.tools.javac.tree.JCTree annotationType -> annotationType
    org.openjdk.tools.javac.util.List args -> args
    org.openjdk.tools.javac.code.Attribute$Compound attribute -> attribute
    void <init>(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree getAnnotationType() -> getAnnotationType
    org.openjdk.tools.javac.util.List getArguments() -> getArguments
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getArguments() -> getArguments
    org.openjdk.source.tree.Tree getAnnotationType() -> getAnnotationType
org.openjdk.tools.javac.tree.JCTree$JCArrayAccess -> org.openjdk.tools.javac.tree.JCTree$JCArrayAccess:
    org.openjdk.tools.javac.tree.JCTree$JCExpression indexed -> indexed
    org.openjdk.tools.javac.tree.JCTree$JCExpression index -> index
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    org.openjdk.tools.javac.tree.JCTree$JCExpression getIndex() -> getIndex
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getIndex() -> getIndex
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree -> org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree:
    org.openjdk.tools.javac.tree.JCTree$JCExpression elemtype -> elemtype
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree getType() -> getType
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.Tree getType() -> getType
org.openjdk.tools.javac.tree.JCTree$JCAssert -> org.openjdk.tools.javac.tree.JCTree$JCAssert:
    org.openjdk.tools.javac.tree.JCTree$JCExpression cond -> cond
    org.openjdk.tools.javac.tree.JCTree$JCExpression detail -> detail
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getCondition() -> getCondition
    org.openjdk.tools.javac.tree.JCTree$JCExpression getDetail() -> getDetail
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getDetail() -> getDetail
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
org.openjdk.tools.javac.tree.JCTree$JCAssign -> org.openjdk.tools.javac.tree.JCTree$JCAssign:
    org.openjdk.tools.javac.tree.JCTree$JCExpression lhs -> lhs
    org.openjdk.tools.javac.tree.JCTree$JCExpression rhs -> rhs
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getVariable() -> getVariable
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    org.openjdk.source.tree.ExpressionTree getVariable() -> getVariable
org.openjdk.tools.javac.tree.JCTree$JCAssignOp -> org.openjdk.tools.javac.tree.JCTree$JCAssignOp:
    org.openjdk.tools.javac.tree.JCTree$JCExpression lhs -> lhs
    org.openjdk.tools.javac.tree.JCTree$JCExpression rhs -> rhs
    void <init>(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Symbol$OperatorSymbol) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getVariable() -> getVariable
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$JCExpression getOperand(org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos) -> getOperand
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    org.openjdk.source.tree.ExpressionTree getVariable() -> getVariable
org.openjdk.tools.javac.tree.JCTree$JCBinary -> org.openjdk.tools.javac.tree.JCTree$JCBinary:
    org.openjdk.tools.javac.tree.JCTree$JCExpression lhs -> lhs
    org.openjdk.tools.javac.tree.JCTree$JCExpression rhs -> rhs
    void <init>(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol$OperatorSymbol) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getLeftOperand() -> getLeftOperand
    org.openjdk.tools.javac.tree.JCTree$JCExpression getRightOperand() -> getRightOperand
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$JCExpression getOperand(org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos) -> getOperand
    org.openjdk.source.tree.ExpressionTree getRightOperand() -> getRightOperand
    org.openjdk.source.tree.ExpressionTree getLeftOperand() -> getLeftOperand
org.openjdk.tools.javac.tree.JCTree$JCBlock -> org.openjdk.tools.javac.tree.JCTree$JCBlock:
    long flags -> flags
    org.openjdk.tools.javac.util.List stats -> stats
    int endpos -> endpos
    void <init>(long,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.List getStatements() -> getStatements
    boolean isStatic() -> isStatic
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getStatements() -> getStatements
org.openjdk.tools.javac.tree.JCTree$JCBreak -> org.openjdk.tools.javac.tree.JCTree$JCBreak:
    org.openjdk.tools.javac.util.Name label -> label
    org.openjdk.tools.javac.tree.JCTree target -> target
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.Name getLabel() -> getLabel
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.javax.lang.model.element.Name getLabel() -> getLabel
org.openjdk.tools.javac.tree.JCTree$JCCase -> org.openjdk.tools.javac.tree.JCTree$JCCase:
    org.openjdk.tools.javac.tree.JCTree$JCExpression pat -> pat
    org.openjdk.tools.javac.util.List stats -> stats
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    org.openjdk.tools.javac.util.List getStatements() -> getStatements
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getStatements() -> getStatements
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCCatch -> org.openjdk.tools.javac.tree.JCTree$JCCatch:
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl param -> param
    org.openjdk.tools.javac.tree.JCTree$JCBlock body -> body
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl getParameter() -> getParameter
    org.openjdk.tools.javac.tree.JCTree$JCBlock getBlock() -> getBlock
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.BlockTree getBlock() -> getBlock
    org.openjdk.source.tree.VariableTree getParameter() -> getParameter
org.openjdk.tools.javac.tree.JCTree$JCClassDecl -> org.openjdk.tools.javac.tree.JCTree$JCClassDecl:
    org.openjdk.tools.javac.tree.JCTree$JCModifiers mods -> mods
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.util.List typarams -> typarams
    org.openjdk.tools.javac.tree.JCTree$JCExpression extending -> extending
    org.openjdk.tools.javac.util.List implementing -> implementing
    org.openjdk.tools.javac.util.List defs -> defs
    org.openjdk.tools.javac.code.Symbol$ClassSymbol sym -> sym
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCModifiers getModifiers() -> getModifiers
    org.openjdk.tools.javac.util.Name getSimpleName() -> getSimpleName
    org.openjdk.tools.javac.util.List getTypeParameters() -> getTypeParameters
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExtendsClause() -> getExtendsClause
    org.openjdk.tools.javac.util.List getImplementsClause() -> getImplementsClause
    org.openjdk.tools.javac.util.List getMembers() -> getMembers
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getMembers() -> getMembers
    java.util.List getImplementsClause() -> getImplementsClause
    org.openjdk.source.tree.Tree getExtendsClause() -> getExtendsClause
    java.util.List getTypeParameters() -> getTypeParameters
    org.openjdk.javax.lang.model.element.Name getSimpleName() -> getSimpleName
    org.openjdk.source.tree.ModifiersTree getModifiers() -> getModifiers
org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit -> org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit:
    org.openjdk.tools.javac.util.List defs -> defs
    org.openjdk.javax.tools.JavaFileObject sourcefile -> sourcefile
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol modle -> modle
    org.openjdk.javax.tools.JavaFileManager$Location locn -> locn
    org.openjdk.tools.javac.code.Symbol$PackageSymbol packge -> packge
    org.openjdk.tools.javac.code.Scope$WriteableScope toplevelScope -> toplevelScope
    org.openjdk.tools.javac.code.Scope$NamedImportScope namedImportScope -> namedImportScope
    org.openjdk.tools.javac.code.Scope$StarImportScope starImportScope -> starImportScope
    org.openjdk.tools.javac.util.Position$LineMap lineMap -> lineMap
    org.openjdk.tools.javac.tree.DocCommentTable docComments -> docComments
    org.openjdk.tools.javac.tree.EndPosTable endPositions -> endPositions
    void <init>(org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCModuleDecl getModuleDecl() -> getModuleDecl
    org.openjdk.tools.javac.tree.JCTree$JCPackageDecl getPackage() -> getPackage
    org.openjdk.tools.javac.util.List getPackageAnnotations() -> getPackageAnnotations
    org.openjdk.source.tree.ExpressionTree getPackageName() -> getPackageName
    org.openjdk.tools.javac.util.List getImports() -> getImports
    org.openjdk.javax.tools.JavaFileObject getSourceFile() -> getSourceFile
    org.openjdk.tools.javac.util.Position$LineMap getLineMap() -> getLineMap
    org.openjdk.tools.javac.util.List getTypeDecls() -> getTypeDecls
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.LineMap getLineMap() -> getLineMap
    java.util.List getTypeDecls() -> getTypeDecls
    java.util.List getImports() -> getImports
    org.openjdk.source.tree.PackageTree getPackage() -> getPackage
    java.util.List getPackageAnnotations() -> getPackageAnnotations
org.openjdk.tools.javac.tree.JCTree$JCConditional -> org.openjdk.tools.javac.tree.JCTree$JCConditional:
    org.openjdk.tools.javac.tree.JCTree$JCExpression cond -> cond
    org.openjdk.tools.javac.tree.JCTree$JCExpression truepart -> truepart
    org.openjdk.tools.javac.tree.JCTree$JCExpression falsepart -> falsepart
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getCondition() -> getCondition
    org.openjdk.tools.javac.tree.JCTree$JCExpression getTrueExpression() -> getTrueExpression
    org.openjdk.tools.javac.tree.JCTree$JCExpression getFalseExpression() -> getFalseExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getFalseExpression() -> getFalseExpression
    org.openjdk.source.tree.ExpressionTree getTrueExpression() -> getTrueExpression
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
org.openjdk.tools.javac.tree.JCTree$JCContinue -> org.openjdk.tools.javac.tree.JCTree$JCContinue:
    org.openjdk.tools.javac.util.Name label -> label
    org.openjdk.tools.javac.tree.JCTree target -> target
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.Name getLabel() -> getLabel
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.javax.lang.model.element.Name getLabel() -> getLabel
org.openjdk.tools.javac.tree.JCTree$JCDirective -> org.openjdk.tools.javac.tree.JCTree$JCDirective:
    void <init>() -> <init>
org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop -> org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop:
    org.openjdk.tools.javac.tree.JCTree$JCStatement body -> body
    org.openjdk.tools.javac.tree.JCTree$JCExpression cond -> cond
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCStatement,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getCondition() -> getCondition
    org.openjdk.tools.javac.tree.JCTree$JCStatement getStatement() -> getStatement
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop -> org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop:
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl var -> var
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    org.openjdk.tools.javac.tree.JCTree$JCStatement body -> body
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl getVariable() -> getVariable
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    org.openjdk.tools.javac.tree.JCTree$JCStatement getStatement() -> getStatement
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    org.openjdk.source.tree.VariableTree getVariable() -> getVariable
org.openjdk.tools.javac.tree.JCTree$JCErroneous -> org.openjdk.tools.javac.tree.JCTree$JCErroneous:
    org.openjdk.tools.javac.util.List errs -> errs
    void <init>(org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.List getErrorTrees() -> getErrorTrees
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getErrorTrees() -> getErrorTrees
org.openjdk.tools.javac.tree.JCTree$JCExports -> org.openjdk.tools.javac.tree.JCTree$JCExports:
    org.openjdk.tools.javac.tree.JCTree$JCExpression qualid -> qualid
    org.openjdk.tools.javac.util.List moduleNames -> moduleNames
    org.openjdk.tools.javac.code.Directive$ExportsDirective directive -> directive
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getPackageName() -> getPackageName
    org.openjdk.tools.javac.util.List getModuleNames() -> getModuleNames
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getModuleNames() -> getModuleNames
    org.openjdk.source.tree.ExpressionTree getPackageName() -> getPackageName
org.openjdk.tools.javac.tree.JCTree$JCExpression -> org.openjdk.tools.javac.tree.JCTree$JCExpression:
    void <init>() -> <init>
    org.openjdk.tools.javac.tree.JCTree$JCExpression setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.tools.javac.tree.JCTree$JCExpression setPos(int) -> setPos
    boolean isPoly() -> isPoly
    boolean isStandalone() -> isStandalone
    org.openjdk.tools.javac.tree.JCTree setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.tools.javac.tree.JCTree setPos(int) -> setPos
org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement -> org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement:
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.lang.String toString() -> toString
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCFieldAccess -> org.openjdk.tools.javac.tree.JCTree$JCFieldAccess:
    org.openjdk.tools.javac.tree.JCTree$JCExpression selected -> selected
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.code.Symbol sym -> sym
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.util.Name getIdentifier() -> getIdentifier
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.javax.lang.model.element.Name getIdentifier() -> getIdentifier
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCForLoop -> org.openjdk.tools.javac.tree.JCTree$JCForLoop:
    org.openjdk.tools.javac.util.List init -> init
    org.openjdk.tools.javac.tree.JCTree$JCExpression cond -> cond
    org.openjdk.tools.javac.util.List step -> step
    org.openjdk.tools.javac.tree.JCTree$JCStatement body -> body
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getCondition() -> getCondition
    org.openjdk.tools.javac.tree.JCTree$JCStatement getStatement() -> getStatement
    org.openjdk.tools.javac.util.List getInitializer() -> getInitializer
    org.openjdk.tools.javac.util.List getUpdate() -> getUpdate
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
    java.util.List getUpdate() -> getUpdate
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
    java.util.List getInitializer() -> getInitializer
org.openjdk.tools.javac.tree.JCTree$JCFunctionalExpression -> org.openjdk.tools.javac.tree.JCTree$JCFunctionalExpression:
    org.openjdk.tools.javac.util.List targets -> targets
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Type getDescriptorType(org.openjdk.tools.javac.code.Types) -> getDescriptorType
org.openjdk.tools.javac.tree.JCTree$JCIdent -> org.openjdk.tools.javac.tree.JCTree$JCIdent:
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.code.Symbol sym -> sym
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Symbol) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.Name getName() -> getName
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.javax.lang.model.element.Name getName() -> getName
org.openjdk.tools.javac.tree.JCTree$JCIf -> org.openjdk.tools.javac.tree.JCTree$JCIf:
    org.openjdk.tools.javac.tree.JCTree$JCExpression cond -> cond
    org.openjdk.tools.javac.tree.JCTree$JCStatement thenpart -> thenpart
    org.openjdk.tools.javac.tree.JCTree$JCStatement elsepart -> elsepart
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCStatement,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getCondition() -> getCondition
    org.openjdk.tools.javac.tree.JCTree$JCStatement getThenStatement() -> getThenStatement
    org.openjdk.tools.javac.tree.JCTree$JCStatement getElseStatement() -> getElseStatement
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.StatementTree getElseStatement() -> getElseStatement
    org.openjdk.source.tree.StatementTree getThenStatement() -> getThenStatement
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
org.openjdk.tools.javac.tree.JCTree$JCImport -> org.openjdk.tools.javac.tree.JCTree$JCImport:
    boolean staticImport -> staticImport
    org.openjdk.tools.javac.tree.JCTree qualid -> qualid
    org.openjdk.tools.javac.code.Scope importScope -> importScope
    void <init>(org.openjdk.tools.javac.tree.JCTree,boolean) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    boolean isStatic() -> isStatic
    org.openjdk.tools.javac.tree.JCTree getQualifiedIdentifier() -> getQualifiedIdentifier
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.Tree getQualifiedIdentifier() -> getQualifiedIdentifier
org.openjdk.tools.javac.tree.JCTree$JCInstanceOf -> org.openjdk.tools.javac.tree.JCTree$JCInstanceOf:
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    org.openjdk.tools.javac.tree.JCTree clazz -> clazz
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree getType() -> getType
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.Tree getType() -> getType
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement -> org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement:
    org.openjdk.tools.javac.util.Name label -> label
    org.openjdk.tools.javac.tree.JCTree$JCStatement body -> body
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.Name getLabel() -> getLabel
    org.openjdk.tools.javac.tree.JCTree$JCStatement getStatement() -> getStatement
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
    org.openjdk.javax.lang.model.element.Name getLabel() -> getLabel
org.openjdk.tools.javac.tree.JCTree$JCLambda -> org.openjdk.tools.javac.tree.JCTree$JCLambda:
    org.openjdk.tools.javac.util.List params -> params
    org.openjdk.tools.javac.tree.JCTree body -> body
    boolean canCompleteNormally -> canCompleteNormally
    org.openjdk.tools.javac.tree.JCTree$JCLambda$ParameterKind paramKind -> paramKind
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree) -> <init>
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree getBody() -> getBody
    java.util.List getParameters() -> getParameters
    org.openjdk.tools.javac.tree.JCTree$JCLambda setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.source.tree.LambdaExpressionTree$BodyKind getBodyKind() -> getBodyKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.tools.javac.tree.JCTree setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.source.tree.Tree getBody() -> getBody
org.openjdk.tools.javac.tree.JCTree$JCLambda$ParameterKind -> org.openjdk.tools.javac.tree.JCTree$JCLambda$ParameterKind:
    org.openjdk.tools.javac.tree.JCTree$JCLambda$ParameterKind IMPLICIT -> IMPLICIT
    org.openjdk.tools.javac.tree.JCTree$JCLambda$ParameterKind EXPLICIT -> EXPLICIT
    org.openjdk.tools.javac.tree.JCTree$JCLambda$ParameterKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.tree.JCTree$JCLambda$ParameterKind[] values() -> values
    org.openjdk.tools.javac.tree.JCTree$JCLambda$ParameterKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.JCTree$JCLiteral -> org.openjdk.tools.javac.tree.JCTree$JCLiteral:
    org.openjdk.tools.javac.code.TypeTag typetag -> typetag
    java.lang.Object value -> value
    void <init>(org.openjdk.tools.javac.code.TypeTag,java.lang.Object) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    java.lang.Object getValue() -> getValue
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$JCLiteral setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.tools.javac.tree.JCTree$JCExpression setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.tools.javac.tree.JCTree setType(org.openjdk.tools.javac.code.Type) -> setType
org.openjdk.tools.javac.tree.JCTree$JCMemberReference -> org.openjdk.tools.javac.tree.JCTree$JCMemberReference:
    org.openjdk.source.tree.MemberReferenceTree$ReferenceMode mode -> mode
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind kind -> kind
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    org.openjdk.tools.javac.util.List typeargs -> typeargs
    org.openjdk.tools.javac.code.Symbol sym -> sym
    org.openjdk.tools.javac.code.Type varargsElement -> varargsElement
    org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind refPolyKind -> refPolyKind
    boolean ownerAccessible -> ownerAccessible
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind overloadKind -> overloadKind
    org.openjdk.tools.javac.code.Type referentType -> referentType
    void <init>(org.openjdk.source.tree.MemberReferenceTree$ReferenceMode,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.source.tree.MemberReferenceTree$ReferenceMode getMode() -> getMode
    org.openjdk.tools.javac.tree.JCTree$JCExpression getQualifierExpression() -> getQualifierExpression
    org.openjdk.tools.javac.util.Name getName() -> getName
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    boolean hasKind(org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind) -> hasKind
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind getOverloadKind() -> getOverloadKind
    void setOverloadKind(org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind) -> setOverloadKind
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    org.openjdk.source.tree.ExpressionTree getQualifierExpression() -> getQualifierExpression
org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind -> org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind:
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind OVERLOADED -> OVERLOADED
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind UNOVERLOADED -> UNOVERLOADED
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind[] values() -> values
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$OverloadKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind -> org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind:
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind SUPER -> SUPER
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind UNBOUND -> UNBOUND
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind STATIC -> STATIC
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind BOUND -> BOUND
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind IMPLICIT_INNER -> IMPLICIT_INNER
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind TOPLEVEL -> TOPLEVEL
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind ARRAY_CTOR -> ARRAY_CTOR
    org.openjdk.source.tree.MemberReferenceTree$ReferenceMode mode -> mode
    boolean unbound -> unbound
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind[] values() -> values
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference$ReferenceKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,org.openjdk.source.tree.MemberReferenceTree$ReferenceMode,boolean) -> <init>
    boolean isUnbound() -> isUnbound
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.JCTree$JCMethodDecl -> org.openjdk.tools.javac.tree.JCTree$JCMethodDecl:
    org.openjdk.tools.javac.tree.JCTree$JCModifiers mods -> mods
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.tree.JCTree$JCExpression restype -> restype
    org.openjdk.tools.javac.util.List typarams -> typarams
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl recvparam -> recvparam
    org.openjdk.tools.javac.util.List params -> params
    org.openjdk.tools.javac.util.List thrown -> thrown
    org.openjdk.tools.javac.tree.JCTree$JCBlock body -> body
    org.openjdk.tools.javac.tree.JCTree$JCExpression defaultValue -> defaultValue
    org.openjdk.tools.javac.code.Symbol$MethodSymbol sym -> sym
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol$MethodSymbol) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCModifiers getModifiers() -> getModifiers
    org.openjdk.tools.javac.util.Name getName() -> getName
    org.openjdk.tools.javac.tree.JCTree getReturnType() -> getReturnType
    org.openjdk.tools.javac.util.List getTypeParameters() -> getTypeParameters
    org.openjdk.tools.javac.util.List getParameters() -> getParameters
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl getReceiverParameter() -> getReceiverParameter
    org.openjdk.tools.javac.util.List getThrows() -> getThrows
    org.openjdk.tools.javac.tree.JCTree$JCBlock getBody() -> getBody
    org.openjdk.tools.javac.tree.JCTree getDefaultValue() -> getDefaultValue
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.Tree getDefaultValue() -> getDefaultValue
    org.openjdk.source.tree.BlockTree getBody() -> getBody
    java.util.List getThrows() -> getThrows
    org.openjdk.source.tree.VariableTree getReceiverParameter() -> getReceiverParameter
    java.util.List getParameters() -> getParameters
    java.util.List getTypeParameters() -> getTypeParameters
    org.openjdk.source.tree.Tree getReturnType() -> getReturnType
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    org.openjdk.source.tree.ModifiersTree getModifiers() -> getModifiers
org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation -> org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation:
    org.openjdk.tools.javac.util.List typeargs -> typeargs
    org.openjdk.tools.javac.tree.JCTree$JCExpression meth -> meth
    org.openjdk.tools.javac.util.List args -> args
    org.openjdk.tools.javac.code.Type varargsElement -> varargsElement
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.tools.javac.tree.JCTree$JCExpression getMethodSelect() -> getMethodSelect
    org.openjdk.tools.javac.util.List getArguments() -> getArguments
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.tools.javac.tree.JCTree$JCExpression setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.tools.javac.tree.JCTree setType(org.openjdk.tools.javac.code.Type) -> setType
    java.util.List getArguments() -> getArguments
    org.openjdk.source.tree.ExpressionTree getMethodSelect() -> getMethodSelect
    java.util.List getTypeArguments() -> getTypeArguments
org.openjdk.tools.javac.tree.JCTree$JCModifiers -> org.openjdk.tools.javac.tree.JCTree$JCModifiers:
    long flags -> flags
    org.openjdk.tools.javac.util.List annotations -> annotations
    void <init>(long,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    java.util.Set getFlags() -> getFlags
    org.openjdk.tools.javac.util.List getAnnotations() -> getAnnotations
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getAnnotations() -> getAnnotations
org.openjdk.tools.javac.tree.JCTree$JCModuleDecl -> org.openjdk.tools.javac.tree.JCTree$JCModuleDecl:
    org.openjdk.tools.javac.tree.JCTree$JCModifiers mods -> mods
    org.openjdk.tools.javac.code.Type$ModuleType type -> type
    org.openjdk.source.tree.ModuleTree$ModuleKind kind -> kind
    org.openjdk.tools.javac.tree.JCTree$JCExpression qualId -> qualId
    org.openjdk.tools.javac.util.List directives -> directives
    org.openjdk.tools.javac.code.Symbol$ModuleSymbol sym -> sym
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.source.tree.ModuleTree$ModuleKind,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.List getAnnotations() -> getAnnotations
    org.openjdk.source.tree.ModuleTree$ModuleKind getModuleType() -> getModuleType
    org.openjdk.tools.javac.tree.JCTree$JCExpression getName() -> getName
    org.openjdk.tools.javac.util.List getDirectives() -> getDirectives
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getDirectives() -> getDirectives
    org.openjdk.source.tree.ExpressionTree getName() -> getName
    java.util.List getAnnotations() -> getAnnotations
org.openjdk.tools.javac.tree.JCTree$JCNewArray -> org.openjdk.tools.javac.tree.JCTree$JCNewArray:
    org.openjdk.tools.javac.tree.JCTree$JCExpression elemtype -> elemtype
    org.openjdk.tools.javac.util.List dims -> dims
    org.openjdk.tools.javac.util.List annotations -> annotations
    org.openjdk.tools.javac.util.List dimAnnotations -> dimAnnotations
    org.openjdk.tools.javac.util.List elems -> elems
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getType() -> getType
    org.openjdk.tools.javac.util.List getDimensions() -> getDimensions
    org.openjdk.tools.javac.util.List getInitializers() -> getInitializers
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.tools.javac.util.List getAnnotations() -> getAnnotations
    org.openjdk.tools.javac.util.List getDimAnnotations() -> getDimAnnotations
    java.util.List getDimAnnotations() -> getDimAnnotations
    java.util.List getAnnotations() -> getAnnotations
    java.util.List getInitializers() -> getInitializers
    java.util.List getDimensions() -> getDimensions
    org.openjdk.source.tree.Tree getType() -> getType
org.openjdk.tools.javac.tree.JCTree$JCNewClass -> org.openjdk.tools.javac.tree.JCTree$JCNewClass:
    org.openjdk.tools.javac.tree.JCTree$JCExpression encl -> encl
    org.openjdk.tools.javac.util.List typeargs -> typeargs
    org.openjdk.tools.javac.tree.JCTree$JCExpression clazz -> clazz
    org.openjdk.tools.javac.util.List args -> args
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl def -> def
    org.openjdk.tools.javac.code.Symbol constructor -> constructor
    org.openjdk.tools.javac.code.Type varargsElement -> varargsElement
    org.openjdk.tools.javac.code.Type constructorType -> constructorType
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getEnclosingExpression() -> getEnclosingExpression
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.tools.javac.tree.JCTree$JCExpression getIdentifier() -> getIdentifier
    org.openjdk.tools.javac.util.List getArguments() -> getArguments
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl getClassBody() -> getClassBody
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ClassTree getClassBody() -> getClassBody
    java.util.List getArguments() -> getArguments
    org.openjdk.source.tree.ExpressionTree getIdentifier() -> getIdentifier
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.source.tree.ExpressionTree getEnclosingExpression() -> getEnclosingExpression
org.openjdk.tools.javac.tree.JCTree$JCOpens -> org.openjdk.tools.javac.tree.JCTree$JCOpens:
    org.openjdk.tools.javac.tree.JCTree$JCExpression qualid -> qualid
    org.openjdk.tools.javac.util.List moduleNames -> moduleNames
    org.openjdk.tools.javac.code.Directive$OpensDirective directive -> directive
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getPackageName() -> getPackageName
    org.openjdk.tools.javac.util.List getModuleNames() -> getModuleNames
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getModuleNames() -> getModuleNames
    org.openjdk.source.tree.ExpressionTree getPackageName() -> getPackageName
org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression -> org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression:
    org.openjdk.tools.javac.tree.JCTree$Tag opcode -> opcode
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol operator -> operator
    void <init>() -> <init>
    org.openjdk.tools.javac.code.Symbol$OperatorSymbol getOperator() -> getOperator
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.tools.javac.tree.JCTree$JCExpression getOperand(org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos) -> getOperand
org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos -> org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos:
    org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos LEFT -> LEFT
    org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos RIGHT -> RIGHT
    org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos[] $VALUES -> $VALUES
    org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos[] values() -> values
    org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.JCTree$JCPackageDecl -> org.openjdk.tools.javac.tree.JCTree$JCPackageDecl:
    org.openjdk.tools.javac.util.List annotations -> annotations
    org.openjdk.tools.javac.tree.JCTree$JCExpression pid -> pid
    org.openjdk.tools.javac.code.Symbol$PackageSymbol packge -> packge
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.List getAnnotations() -> getAnnotations
    org.openjdk.tools.javac.tree.JCTree$JCExpression getPackageName() -> getPackageName
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getPackageName() -> getPackageName
    java.util.List getAnnotations() -> getAnnotations
org.openjdk.tools.javac.tree.JCTree$JCParens -> org.openjdk.tools.javac.tree.JCTree$JCParens:
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCPolyExpression -> org.openjdk.tools.javac.tree.JCTree$JCPolyExpression:
    org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind polyKind -> polyKind
    void <init>() -> <init>
    boolean isPoly() -> isPoly
    boolean isStandalone() -> isStandalone
org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind -> org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind:
    org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind STANDALONE -> STANDALONE
    org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind POLY -> POLY
    org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind[] values() -> values
    org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree -> org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree:
    org.openjdk.tools.javac.code.TypeTag typetag -> typetag
    void <init>(org.openjdk.tools.javac.code.TypeTag) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.javax.lang.model.type.TypeKind getPrimitiveTypeKind() -> getPrimitiveTypeKind
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
org.openjdk.tools.javac.tree.JCTree$JCProvides -> org.openjdk.tools.javac.tree.JCTree$JCProvides:
    org.openjdk.tools.javac.tree.JCTree$JCExpression serviceName -> serviceName
    org.openjdk.tools.javac.util.List implNames -> implNames
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$JCExpression getServiceName() -> getServiceName
    org.openjdk.tools.javac.util.List getImplementationNames() -> getImplementationNames
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getImplementationNames() -> getImplementationNames
    org.openjdk.source.tree.ExpressionTree getServiceName() -> getServiceName
org.openjdk.tools.javac.tree.JCTree$JCRequires -> org.openjdk.tools.javac.tree.JCTree$JCRequires:
    boolean isTransitive -> isTransitive
    boolean isStaticPhase -> isStaticPhase
    org.openjdk.tools.javac.tree.JCTree$JCExpression moduleName -> moduleName
    org.openjdk.tools.javac.code.Directive$RequiresDirective directive -> directive
    void <init>(boolean,boolean,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    boolean isTransitive() -> isTransitive
    boolean isStatic() -> isStatic
    org.openjdk.tools.javac.tree.JCTree$JCExpression getModuleName() -> getModuleName
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getModuleName() -> getModuleName
org.openjdk.tools.javac.tree.JCTree$JCReturn -> org.openjdk.tools.javac.tree.JCTree$JCReturn:
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCSkip -> org.openjdk.tools.javac.tree.JCTree$JCSkip:
    void <init>() -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
org.openjdk.tools.javac.tree.JCTree$JCStatement -> org.openjdk.tools.javac.tree.JCTree$JCStatement:
    void <init>() -> <init>
    org.openjdk.tools.javac.tree.JCTree$JCStatement setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.tools.javac.tree.JCTree$JCStatement setPos(int) -> setPos
    org.openjdk.tools.javac.tree.JCTree setType(org.openjdk.tools.javac.code.Type) -> setType
    org.openjdk.tools.javac.tree.JCTree setPos(int) -> setPos
org.openjdk.tools.javac.tree.JCTree$JCSwitch -> org.openjdk.tools.javac.tree.JCTree$JCSwitch:
    org.openjdk.tools.javac.tree.JCTree$JCExpression selector -> selector
    org.openjdk.tools.javac.util.List cases -> cases
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    org.openjdk.tools.javac.util.List getCases() -> getCases
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getCases() -> getCases
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCSynchronized -> org.openjdk.tools.javac.tree.JCTree$JCSynchronized:
    org.openjdk.tools.javac.tree.JCTree$JCExpression lock -> lock
    org.openjdk.tools.javac.tree.JCTree$JCBlock body -> body
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    org.openjdk.tools.javac.tree.JCTree$JCBlock getBlock() -> getBlock
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.BlockTree getBlock() -> getBlock
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCThrow -> org.openjdk.tools.javac.tree.JCTree$JCThrow:
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCTry -> org.openjdk.tools.javac.tree.JCTree$JCTry:
    org.openjdk.tools.javac.tree.JCTree$JCBlock body -> body
    org.openjdk.tools.javac.util.List catchers -> catchers
    org.openjdk.tools.javac.tree.JCTree$JCBlock finalizer -> finalizer
    org.openjdk.tools.javac.util.List resources -> resources
    boolean finallyCanCompleteNormally -> finallyCanCompleteNormally
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCBlock getBlock() -> getBlock
    org.openjdk.tools.javac.util.List getCatches() -> getCatches
    org.openjdk.tools.javac.tree.JCTree$JCBlock getFinallyBlock() -> getFinallyBlock
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.util.List getResources() -> getResources
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getResources() -> getResources
    org.openjdk.source.tree.BlockTree getFinallyBlock() -> getFinallyBlock
    java.util.List getCatches() -> getCatches
    org.openjdk.source.tree.BlockTree getBlock() -> getBlock
org.openjdk.tools.javac.tree.JCTree$JCTypeApply -> org.openjdk.tools.javac.tree.JCTree$JCTypeApply:
    org.openjdk.tools.javac.tree.JCTree$JCExpression clazz -> clazz
    org.openjdk.tools.javac.util.List arguments -> arguments
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree getType() -> getType
    org.openjdk.tools.javac.util.List getTypeArguments() -> getTypeArguments
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getTypeArguments() -> getTypeArguments
    org.openjdk.source.tree.Tree getType() -> getType
org.openjdk.tools.javac.tree.JCTree$JCTypeCast -> org.openjdk.tools.javac.tree.JCTree$JCTypeCast:
    org.openjdk.tools.javac.tree.JCTree clazz -> clazz
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    void <init>(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree getType() -> getType
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
    org.openjdk.source.tree.Tree getType() -> getType
org.openjdk.tools.javac.tree.JCTree$JCTypeIntersection -> org.openjdk.tools.javac.tree.JCTree$JCTypeIntersection:
    org.openjdk.tools.javac.util.List bounds -> bounds
    void <init>(org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.List getBounds() -> getBounds
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getBounds() -> getBounds
org.openjdk.tools.javac.tree.JCTree$JCTypeParameter -> org.openjdk.tools.javac.tree.JCTree$JCTypeParameter:
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.util.List bounds -> bounds
    org.openjdk.tools.javac.util.List annotations -> annotations
    void <init>(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.Name getName() -> getName
    org.openjdk.tools.javac.util.List getBounds() -> getBounds
    org.openjdk.tools.javac.util.List getAnnotations() -> getAnnotations
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getAnnotations() -> getAnnotations
    java.util.List getBounds() -> getBounds
    org.openjdk.javax.lang.model.element.Name getName() -> getName
org.openjdk.tools.javac.tree.JCTree$JCTypeUnion -> org.openjdk.tools.javac.tree.JCTree$JCTypeUnion:
    org.openjdk.tools.javac.util.List alternatives -> alternatives
    void <init>(org.openjdk.tools.javac.util.List) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.util.List getTypeAlternatives() -> getTypeAlternatives
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    java.util.List getTypeAlternatives() -> getTypeAlternatives
org.openjdk.tools.javac.tree.JCTree$JCUnary -> org.openjdk.tools.javac.tree.JCTree$JCUnary:
    org.openjdk.tools.javac.tree.JCTree$JCExpression arg -> arg
    void <init>(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getExpression() -> getExpression
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    void setTag(org.openjdk.tools.javac.tree.JCTree$Tag) -> setTag
    org.openjdk.tools.javac.tree.JCTree$JCExpression getOperand(org.openjdk.tools.javac.tree.JCTree$JCOperatorExpression$OperandPos) -> getOperand
    org.openjdk.source.tree.ExpressionTree getExpression() -> getExpression
org.openjdk.tools.javac.tree.JCTree$JCUses -> org.openjdk.tools.javac.tree.JCTree$JCUses:
    org.openjdk.tools.javac.tree.JCTree$JCExpression qualid -> qualid
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getServiceName() -> getServiceName
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getServiceName() -> getServiceName
org.openjdk.tools.javac.tree.JCTree$JCVariableDecl -> org.openjdk.tools.javac.tree.JCTree$JCVariableDecl:
    org.openjdk.tools.javac.tree.JCTree$JCModifiers mods -> mods
    org.openjdk.tools.javac.util.Name name -> name
    org.openjdk.tools.javac.tree.JCTree$JCExpression nameexpr -> nameexpr
    org.openjdk.tools.javac.tree.JCTree$JCExpression vartype -> vartype
    org.openjdk.tools.javac.tree.JCTree$JCExpression init -> init
    org.openjdk.tools.javac.code.Symbol$VarSymbol sym -> sym
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol$VarSymbol) -> <init>
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCModifiers getModifiers() -> getModifiers
    org.openjdk.tools.javac.util.Name getName() -> getName
    org.openjdk.tools.javac.tree.JCTree$JCExpression getNameExpression() -> getNameExpression
    org.openjdk.tools.javac.tree.JCTree getType() -> getType
    org.openjdk.tools.javac.tree.JCTree$JCExpression getInitializer() -> getInitializer
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.ExpressionTree getInitializer() -> getInitializer
    org.openjdk.source.tree.Tree getType() -> getType
    org.openjdk.source.tree.ExpressionTree getNameExpression() -> getNameExpression
    org.openjdk.javax.lang.model.element.Name getName() -> getName
    org.openjdk.source.tree.ModifiersTree getModifiers() -> getModifiers
org.openjdk.tools.javac.tree.JCTree$JCWhileLoop -> org.openjdk.tools.javac.tree.JCTree$JCWhileLoop:
    org.openjdk.tools.javac.tree.JCTree$JCExpression cond -> cond
    org.openjdk.tools.javac.tree.JCTree$JCStatement body -> body
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression getCondition() -> getCondition
    org.openjdk.tools.javac.tree.JCTree$JCStatement getStatement() -> getStatement
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.StatementTree getStatement() -> getStatement
    org.openjdk.source.tree.ExpressionTree getCondition() -> getCondition
org.openjdk.tools.javac.tree.JCTree$JCWildcard -> org.openjdk.tools.javac.tree.JCTree$JCWildcard:
    org.openjdk.tools.javac.tree.JCTree$TypeBoundKind kind -> kind
    org.openjdk.tools.javac.tree.JCTree inner -> inner
    void <init>(org.openjdk.tools.javac.tree.JCTree$TypeBoundKind,org.openjdk.tools.javac.tree.JCTree) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    org.openjdk.tools.javac.tree.JCTree getBound() -> getBound
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
    org.openjdk.source.tree.Tree getBound() -> getBound
org.openjdk.tools.javac.tree.JCTree$LetExpr -> org.openjdk.tools.javac.tree.JCTree$LetExpr:
    org.openjdk.tools.javac.util.List defs -> defs
    org.openjdk.tools.javac.tree.JCTree$JCExpression expr -> expr
    void <init>(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
org.openjdk.tools.javac.tree.JCTree$Tag -> org.openjdk.tools.javac.tree.JCTree$Tag:
    org.openjdk.tools.javac.tree.JCTree$Tag NO_TAG -> NO_TAG
    org.openjdk.tools.javac.tree.JCTree$Tag TOPLEVEL -> TOPLEVEL
    org.openjdk.tools.javac.tree.JCTree$Tag PACKAGEDEF -> PACKAGEDEF
    org.openjdk.tools.javac.tree.JCTree$Tag IMPORT -> IMPORT
    org.openjdk.tools.javac.tree.JCTree$Tag CLASSDEF -> CLASSDEF
    org.openjdk.tools.javac.tree.JCTree$Tag METHODDEF -> METHODDEF
    org.openjdk.tools.javac.tree.JCTree$Tag VARDEF -> VARDEF
    org.openjdk.tools.javac.tree.JCTree$Tag SKIP -> SKIP
    org.openjdk.tools.javac.tree.JCTree$Tag BLOCK -> BLOCK
    org.openjdk.tools.javac.tree.JCTree$Tag DOLOOP -> DOLOOP
    org.openjdk.tools.javac.tree.JCTree$Tag WHILELOOP -> WHILELOOP
    org.openjdk.tools.javac.tree.JCTree$Tag FORLOOP -> FORLOOP
    org.openjdk.tools.javac.tree.JCTree$Tag FOREACHLOOP -> FOREACHLOOP
    org.openjdk.tools.javac.tree.JCTree$Tag LABELLED -> LABELLED
    org.openjdk.tools.javac.tree.JCTree$Tag SWITCH -> SWITCH
    org.openjdk.tools.javac.tree.JCTree$Tag CASE -> CASE
    org.openjdk.tools.javac.tree.JCTree$Tag SYNCHRONIZED -> SYNCHRONIZED
    org.openjdk.tools.javac.tree.JCTree$Tag TRY -> TRY
    org.openjdk.tools.javac.tree.JCTree$Tag CATCH -> CATCH
    org.openjdk.tools.javac.tree.JCTree$Tag CONDEXPR -> CONDEXPR
    org.openjdk.tools.javac.tree.JCTree$Tag IF -> IF
    org.openjdk.tools.javac.tree.JCTree$Tag EXEC -> EXEC
    org.openjdk.tools.javac.tree.JCTree$Tag BREAK -> BREAK
    org.openjdk.tools.javac.tree.JCTree$Tag CONTINUE -> CONTINUE
    org.openjdk.tools.javac.tree.JCTree$Tag RETURN -> RETURN
    org.openjdk.tools.javac.tree.JCTree$Tag THROW -> THROW
    org.openjdk.tools.javac.tree.JCTree$Tag ASSERT -> ASSERT
    org.openjdk.tools.javac.tree.JCTree$Tag APPLY -> APPLY
    org.openjdk.tools.javac.tree.JCTree$Tag NEWCLASS -> NEWCLASS
    org.openjdk.tools.javac.tree.JCTree$Tag NEWARRAY -> NEWARRAY
    org.openjdk.tools.javac.tree.JCTree$Tag LAMBDA -> LAMBDA
    org.openjdk.tools.javac.tree.JCTree$Tag PARENS -> PARENS
    org.openjdk.tools.javac.tree.JCTree$Tag ASSIGN -> ASSIGN
    org.openjdk.tools.javac.tree.JCTree$Tag TYPECAST -> TYPECAST
    org.openjdk.tools.javac.tree.JCTree$Tag TYPETEST -> TYPETEST
    org.openjdk.tools.javac.tree.JCTree$Tag INDEXED -> INDEXED
    org.openjdk.tools.javac.tree.JCTree$Tag SELECT -> SELECT
    org.openjdk.tools.javac.tree.JCTree$Tag REFERENCE -> REFERENCE
    org.openjdk.tools.javac.tree.JCTree$Tag IDENT -> IDENT
    org.openjdk.tools.javac.tree.JCTree$Tag LITERAL -> LITERAL
    org.openjdk.tools.javac.tree.JCTree$Tag TYPEIDENT -> TYPEIDENT
    org.openjdk.tools.javac.tree.JCTree$Tag TYPEARRAY -> TYPEARRAY
    org.openjdk.tools.javac.tree.JCTree$Tag TYPEAPPLY -> TYPEAPPLY
    org.openjdk.tools.javac.tree.JCTree$Tag TYPEUNION -> TYPEUNION
    org.openjdk.tools.javac.tree.JCTree$Tag TYPEINTERSECTION -> TYPEINTERSECTION
    org.openjdk.tools.javac.tree.JCTree$Tag TYPEPARAMETER -> TYPEPARAMETER
    org.openjdk.tools.javac.tree.JCTree$Tag WILDCARD -> WILDCARD
    org.openjdk.tools.javac.tree.JCTree$Tag TYPEBOUNDKIND -> TYPEBOUNDKIND
    org.openjdk.tools.javac.tree.JCTree$Tag ANNOTATION -> ANNOTATION
    org.openjdk.tools.javac.tree.JCTree$Tag TYPE_ANNOTATION -> TYPE_ANNOTATION
    org.openjdk.tools.javac.tree.JCTree$Tag MODIFIERS -> MODIFIERS
    org.openjdk.tools.javac.tree.JCTree$Tag ANNOTATED_TYPE -> ANNOTATED_TYPE
    org.openjdk.tools.javac.tree.JCTree$Tag ERRONEOUS -> ERRONEOUS
    org.openjdk.tools.javac.tree.JCTree$Tag POS -> POS
    org.openjdk.tools.javac.tree.JCTree$Tag NEG -> NEG
    org.openjdk.tools.javac.tree.JCTree$Tag NOT -> NOT
    org.openjdk.tools.javac.tree.JCTree$Tag COMPL -> COMPL
    org.openjdk.tools.javac.tree.JCTree$Tag PREINC -> PREINC
    org.openjdk.tools.javac.tree.JCTree$Tag PREDEC -> PREDEC
    org.openjdk.tools.javac.tree.JCTree$Tag POSTINC -> POSTINC
    org.openjdk.tools.javac.tree.JCTree$Tag POSTDEC -> POSTDEC
    org.openjdk.tools.javac.tree.JCTree$Tag NULLCHK -> NULLCHK
    org.openjdk.tools.javac.tree.JCTree$Tag OR -> OR
    org.openjdk.tools.javac.tree.JCTree$Tag AND -> AND
    org.openjdk.tools.javac.tree.JCTree$Tag BITOR -> BITOR
    org.openjdk.tools.javac.tree.JCTree$Tag BITXOR -> BITXOR
    org.openjdk.tools.javac.tree.JCTree$Tag BITAND -> BITAND
    org.openjdk.tools.javac.tree.JCTree$Tag EQ -> EQ
    org.openjdk.tools.javac.tree.JCTree$Tag NE -> NE
    org.openjdk.tools.javac.tree.JCTree$Tag LT -> LT
    org.openjdk.tools.javac.tree.JCTree$Tag GT -> GT
    org.openjdk.tools.javac.tree.JCTree$Tag LE -> LE
    org.openjdk.tools.javac.tree.JCTree$Tag GE -> GE
    org.openjdk.tools.javac.tree.JCTree$Tag SL -> SL
    org.openjdk.tools.javac.tree.JCTree$Tag SR -> SR
    org.openjdk.tools.javac.tree.JCTree$Tag USR -> USR
    org.openjdk.tools.javac.tree.JCTree$Tag PLUS -> PLUS
    org.openjdk.tools.javac.tree.JCTree$Tag MINUS -> MINUS
    org.openjdk.tools.javac.tree.JCTree$Tag MUL -> MUL
    org.openjdk.tools.javac.tree.JCTree$Tag DIV -> DIV
    org.openjdk.tools.javac.tree.JCTree$Tag MOD -> MOD
    org.openjdk.tools.javac.tree.JCTree$Tag BITOR_ASG -> BITOR_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag BITXOR_ASG -> BITXOR_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag BITAND_ASG -> BITAND_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag SL_ASG -> SL_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag SR_ASG -> SR_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag USR_ASG -> USR_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag PLUS_ASG -> PLUS_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag MINUS_ASG -> MINUS_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag MUL_ASG -> MUL_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag DIV_ASG -> DIV_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag MOD_ASG -> MOD_ASG
    org.openjdk.tools.javac.tree.JCTree$Tag MODULEDEF -> MODULEDEF
    org.openjdk.tools.javac.tree.JCTree$Tag EXPORTS -> EXPORTS
    org.openjdk.tools.javac.tree.JCTree$Tag OPENS -> OPENS
    org.openjdk.tools.javac.tree.JCTree$Tag PROVIDES -> PROVIDES
    org.openjdk.tools.javac.tree.JCTree$Tag REQUIRES -> REQUIRES
    org.openjdk.tools.javac.tree.JCTree$Tag USES -> USES
    org.openjdk.tools.javac.tree.JCTree$Tag LETEXPR -> LETEXPR
    org.openjdk.tools.javac.tree.JCTree$Tag noAssignTag -> noAssignTag
    int numberOfOperators -> numberOfOperators
    org.openjdk.tools.javac.tree.JCTree$Tag[] $VALUES -> $VALUES
    org.openjdk.tools.javac.tree.JCTree$Tag[] values() -> values
    org.openjdk.tools.javac.tree.JCTree$Tag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,org.openjdk.tools.javac.tree.JCTree$Tag) -> <init>
    void <init>(java.lang.String,int) -> <init>
    int getNumberOfOperators() -> getNumberOfOperators
    org.openjdk.tools.javac.tree.JCTree$Tag noAssignOp() -> noAssignOp
    boolean isPostUnaryOp() -> isPostUnaryOp
    boolean isIncOrDecUnaryOp() -> isIncOrDecUnaryOp
    boolean isAssignop() -> isAssignop
    int operatorIndex() -> operatorIndex
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.JCTree$TypeBoundKind -> org.openjdk.tools.javac.tree.JCTree$TypeBoundKind:
    org.openjdk.tools.javac.code.BoundKind kind -> kind
    void <init>(org.openjdk.tools.javac.code.BoundKind) -> <init>
    void accept(org.openjdk.tools.javac.tree.JCTree$Visitor) -> accept
    org.openjdk.source.tree.Tree$Kind getKind() -> getKind
    java.lang.Object accept(org.openjdk.source.tree.TreeVisitor,java.lang.Object) -> accept
    org.openjdk.tools.javac.tree.JCTree$Tag getTag() -> getTag
org.openjdk.tools.javac.tree.JCTree$Visitor -> org.openjdk.tools.javac.tree.JCTree$Visitor:
    void <init>() -> <init>
    void visitTopLevel(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> visitTopLevel
    void visitPackageDef(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> visitPackageDef
    void visitImport(org.openjdk.tools.javac.tree.JCTree$JCImport) -> visitImport
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitSkip(org.openjdk.tools.javac.tree.JCTree$JCSkip) -> visitSkip
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void visitCase(org.openjdk.tools.javac.tree.JCTree$JCCase) -> visitCase
    void visitSynchronized(org.openjdk.tools.javac.tree.JCTree$JCSynchronized) -> visitSynchronized
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitCatch(org.openjdk.tools.javac.tree.JCTree$JCCatch) -> visitCatch
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitExec(org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement) -> visitExec
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitAssert(org.openjdk.tools.javac.tree.JCTree$JCAssert) -> visitAssert
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitTypeTest(org.openjdk.tools.javac.tree.JCTree$JCInstanceOf) -> visitTypeTest
    void visitIndexed(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess) -> visitIndexed
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitLiteral(org.openjdk.tools.javac.tree.JCTree$JCLiteral) -> visitLiteral
    void visitTypeIdent(org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree) -> visitTypeIdent
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitTypeUnion(org.openjdk.tools.javac.tree.JCTree$JCTypeUnion) -> visitTypeUnion
    void visitTypeIntersection(org.openjdk.tools.javac.tree.JCTree$JCTypeIntersection) -> visitTypeIntersection
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void visitWildcard(org.openjdk.tools.javac.tree.JCTree$JCWildcard) -> visitWildcard
    void visitTypeBoundKind(org.openjdk.tools.javac.tree.JCTree$TypeBoundKind) -> visitTypeBoundKind
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void visitModifiers(org.openjdk.tools.javac.tree.JCTree$JCModifiers) -> visitModifiers
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitErroneous(org.openjdk.tools.javac.tree.JCTree$JCErroneous) -> visitErroneous
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void visitExports(org.openjdk.tools.javac.tree.JCTree$JCExports) -> visitExports
    void visitOpens(org.openjdk.tools.javac.tree.JCTree$JCOpens) -> visitOpens
    void visitProvides(org.openjdk.tools.javac.tree.JCTree$JCProvides) -> visitProvides
    void visitRequires(org.openjdk.tools.javac.tree.JCTree$JCRequires) -> visitRequires
    void visitUses(org.openjdk.tools.javac.tree.JCTree$JCUses) -> visitUses
    void visitLetExpr(org.openjdk.tools.javac.tree.JCTree$LetExpr) -> visitLetExpr
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
org.openjdk.tools.javac.tree.Pretty -> org.openjdk.tools.javac.tree.Pretty:
    boolean sourceOutput -> sourceOutput
    java.io.Writer out -> out
    int width -> width
    int lmargin -> lmargin
    org.openjdk.tools.javac.util.Name enclClassName -> enclClassName
    org.openjdk.tools.javac.tree.DocCommentTable docComments -> docComments
    java.lang.String trimSequence -> trimSequence
    int PREFERRED_LENGTH -> PREFERRED_LENGTH
    java.lang.String lineSep -> lineSep
    int prec -> prec
    void <init>(java.io.Writer,boolean) -> <init>
    void align() -> align
    void indent() -> indent
    void undent() -> undent
    void open(int,int) -> open
    void close(int,int) -> close
    void print(java.lang.Object) -> print
    void println() -> println
    java.lang.String toSimpleString(org.openjdk.tools.javac.tree.JCTree) -> toSimpleString
    java.lang.String toSimpleString(org.openjdk.tools.javac.tree.JCTree,int) -> toSimpleString
    void printExpr(org.openjdk.tools.javac.tree.JCTree,int) -> printExpr
    void printExpr(org.openjdk.tools.javac.tree.JCTree) -> printExpr
    void printStat(org.openjdk.tools.javac.tree.JCTree) -> printStat
    void printExprs(org.openjdk.tools.javac.util.List,java.lang.String) -> printExprs
    void printExprs(org.openjdk.tools.javac.util.List) -> printExprs
    void printStats(org.openjdk.tools.javac.util.List) -> printStats
    void printFlags(long) -> printFlags
    void printAnnotations(org.openjdk.tools.javac.util.List) -> printAnnotations
    void printTypeAnnotations(org.openjdk.tools.javac.util.List) -> printTypeAnnotations
    void printDocComment(org.openjdk.tools.javac.tree.JCTree) -> printDocComment
    int lineEndPos(java.lang.String,int) -> lineEndPos
    void printTypeParameters(org.openjdk.tools.javac.util.List) -> printTypeParameters
    void printBlock(org.openjdk.tools.javac.util.List) -> printBlock
    void printEnumBody(org.openjdk.tools.javac.util.List) -> printEnumBody
    boolean isEnumerator(org.openjdk.tools.javac.tree.JCTree) -> isEnumerator
    void printUnit(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> printUnit
    boolean isUsed(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree) -> isUsed
    void visitTopLevel(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> visitTopLevel
    void visitPackageDef(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> visitPackageDef
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void visitExports(org.openjdk.tools.javac.tree.JCTree$JCExports) -> visitExports
    void visitOpens(org.openjdk.tools.javac.tree.JCTree$JCOpens) -> visitOpens
    void visitProvides(org.openjdk.tools.javac.tree.JCTree$JCProvides) -> visitProvides
    void visitRequires(org.openjdk.tools.javac.tree.JCTree$JCRequires) -> visitRequires
    void visitUses(org.openjdk.tools.javac.tree.JCTree$JCUses) -> visitUses
    void visitImport(org.openjdk.tools.javac.tree.JCTree$JCImport) -> visitImport
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitSkip(org.openjdk.tools.javac.tree.JCTree$JCSkip) -> visitSkip
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void visitCase(org.openjdk.tools.javac.tree.JCTree$JCCase) -> visitCase
    void visitSynchronized(org.openjdk.tools.javac.tree.JCTree$JCSynchronized) -> visitSynchronized
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitCatch(org.openjdk.tools.javac.tree.JCTree$JCCatch) -> visitCatch
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitExec(org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement) -> visitExec
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitAssert(org.openjdk.tools.javac.tree.JCTree$JCAssert) -> visitAssert
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    java.lang.String operatorName(org.openjdk.tools.javac.tree.JCTree$Tag) -> operatorName
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitTypeTest(org.openjdk.tools.javac.tree.JCTree$JCInstanceOf) -> visitTypeTest
    void visitIndexed(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess) -> visitIndexed
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitLiteral(org.openjdk.tools.javac.tree.JCTree$JCLiteral) -> visitLiteral
    void visitTypeIdent(org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree) -> visitTypeIdent
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
    void printBaseElementType(org.openjdk.tools.javac.tree.JCTree) -> printBaseElementType
    void printBrackets(org.openjdk.tools.javac.tree.JCTree) -> printBrackets
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitTypeUnion(org.openjdk.tools.javac.tree.JCTree$JCTypeUnion) -> visitTypeUnion
    void visitTypeIntersection(org.openjdk.tools.javac.tree.JCTree$JCTypeIntersection) -> visitTypeIntersection
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void visitWildcard(org.openjdk.tools.javac.tree.JCTree$JCWildcard) -> visitWildcard
    void visitTypeBoundKind(org.openjdk.tools.javac.tree.JCTree$TypeBoundKind) -> visitTypeBoundKind
    void visitErroneous(org.openjdk.tools.javac.tree.JCTree$JCErroneous) -> visitErroneous
    void visitLetExpr(org.openjdk.tools.javac.tree.JCTree$LetExpr) -> visitLetExpr
    void visitModifiers(org.openjdk.tools.javac.tree.JCTree$JCModifiers) -> visitModifiers
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
org.openjdk.tools.javac.tree.Pretty$1 -> org.openjdk.tools.javac.tree.Pretty$1:
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.Pretty$1UsedVisitor -> org.openjdk.tools.javac.tree.Pretty$1UsedVisitor:
    boolean result -> result
    org.openjdk.tools.javac.code.Symbol val$t -> val$t
    org.openjdk.tools.javac.tree.Pretty this$0 -> this$0
    void <init>(org.openjdk.tools.javac.tree.Pretty,org.openjdk.tools.javac.code.Symbol) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
org.openjdk.tools.javac.tree.Pretty$UncheckedIOException -> org.openjdk.tools.javac.tree.Pretty$UncheckedIOException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.io.IOException) -> <init>
org.openjdk.tools.javac.tree.TreeCopier -> org.openjdk.tools.javac.tree.TreeCopier:
    org.openjdk.tools.javac.tree.TreeMaker M -> M
    void <init>(org.openjdk.tools.javac.tree.TreeMaker) -> <init>
    org.openjdk.tools.javac.tree.JCTree copy(org.openjdk.tools.javac.tree.JCTree) -> copy
    org.openjdk.tools.javac.tree.JCTree copy(org.openjdk.tools.javac.tree.JCTree,java.lang.Object) -> copy
    org.openjdk.tools.javac.util.List copy(org.openjdk.tools.javac.util.List) -> copy
    org.openjdk.tools.javac.util.List copy(org.openjdk.tools.javac.util.List,java.lang.Object) -> copy
    org.openjdk.tools.javac.tree.JCTree visitAnnotatedType(org.openjdk.source.tree.AnnotatedTypeTree,java.lang.Object) -> visitAnnotatedType
    org.openjdk.tools.javac.tree.JCTree visitAnnotation(org.openjdk.source.tree.AnnotationTree,java.lang.Object) -> visitAnnotation
    org.openjdk.tools.javac.tree.JCTree visitAssert(org.openjdk.source.tree.AssertTree,java.lang.Object) -> visitAssert
    org.openjdk.tools.javac.tree.JCTree visitAssignment(org.openjdk.source.tree.AssignmentTree,java.lang.Object) -> visitAssignment
    org.openjdk.tools.javac.tree.JCTree visitCompoundAssignment(org.openjdk.source.tree.CompoundAssignmentTree,java.lang.Object) -> visitCompoundAssignment
    org.openjdk.tools.javac.tree.JCTree visitBinary(org.openjdk.source.tree.BinaryTree,java.lang.Object) -> visitBinary
    org.openjdk.tools.javac.tree.JCTree visitBlock(org.openjdk.source.tree.BlockTree,java.lang.Object) -> visitBlock
    org.openjdk.tools.javac.tree.JCTree visitBreak(org.openjdk.source.tree.BreakTree,java.lang.Object) -> visitBreak
    org.openjdk.tools.javac.tree.JCTree visitCase(org.openjdk.source.tree.CaseTree,java.lang.Object) -> visitCase
    org.openjdk.tools.javac.tree.JCTree visitCatch(org.openjdk.source.tree.CatchTree,java.lang.Object) -> visitCatch
    org.openjdk.tools.javac.tree.JCTree visitClass(org.openjdk.source.tree.ClassTree,java.lang.Object) -> visitClass
    org.openjdk.tools.javac.tree.JCTree visitConditionalExpression(org.openjdk.source.tree.ConditionalExpressionTree,java.lang.Object) -> visitConditionalExpression
    org.openjdk.tools.javac.tree.JCTree visitContinue(org.openjdk.source.tree.ContinueTree,java.lang.Object) -> visitContinue
    org.openjdk.tools.javac.tree.JCTree visitDoWhileLoop(org.openjdk.source.tree.DoWhileLoopTree,java.lang.Object) -> visitDoWhileLoop
    org.openjdk.tools.javac.tree.JCTree visitErroneous(org.openjdk.source.tree.ErroneousTree,java.lang.Object) -> visitErroneous
    org.openjdk.tools.javac.tree.JCTree visitExpressionStatement(org.openjdk.source.tree.ExpressionStatementTree,java.lang.Object) -> visitExpressionStatement
    org.openjdk.tools.javac.tree.JCTree visitEnhancedForLoop(org.openjdk.source.tree.EnhancedForLoopTree,java.lang.Object) -> visitEnhancedForLoop
    org.openjdk.tools.javac.tree.JCTree visitForLoop(org.openjdk.source.tree.ForLoopTree,java.lang.Object) -> visitForLoop
    org.openjdk.tools.javac.tree.JCTree visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Object) -> visitIdentifier
    org.openjdk.tools.javac.tree.JCTree visitIf(org.openjdk.source.tree.IfTree,java.lang.Object) -> visitIf
    org.openjdk.tools.javac.tree.JCTree visitImport(org.openjdk.source.tree.ImportTree,java.lang.Object) -> visitImport
    org.openjdk.tools.javac.tree.JCTree visitArrayAccess(org.openjdk.source.tree.ArrayAccessTree,java.lang.Object) -> visitArrayAccess
    org.openjdk.tools.javac.tree.JCTree visitLabeledStatement(org.openjdk.source.tree.LabeledStatementTree,java.lang.Object) -> visitLabeledStatement
    org.openjdk.tools.javac.tree.JCTree visitLiteral(org.openjdk.source.tree.LiteralTree,java.lang.Object) -> visitLiteral
    org.openjdk.tools.javac.tree.JCTree visitMethod(org.openjdk.source.tree.MethodTree,java.lang.Object) -> visitMethod
    org.openjdk.tools.javac.tree.JCTree visitMethodInvocation(org.openjdk.source.tree.MethodInvocationTree,java.lang.Object) -> visitMethodInvocation
    org.openjdk.tools.javac.tree.JCTree visitModifiers(org.openjdk.source.tree.ModifiersTree,java.lang.Object) -> visitModifiers
    org.openjdk.tools.javac.tree.JCTree visitNewArray(org.openjdk.source.tree.NewArrayTree,java.lang.Object) -> visitNewArray
    org.openjdk.tools.javac.tree.JCTree visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Object) -> visitNewClass
    org.openjdk.tools.javac.tree.JCTree visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Object) -> visitLambdaExpression
    org.openjdk.tools.javac.tree.JCTree visitParenthesized(org.openjdk.source.tree.ParenthesizedTree,java.lang.Object) -> visitParenthesized
    org.openjdk.tools.javac.tree.JCTree visitReturn(org.openjdk.source.tree.ReturnTree,java.lang.Object) -> visitReturn
    org.openjdk.tools.javac.tree.JCTree visitMemberSelect(org.openjdk.source.tree.MemberSelectTree,java.lang.Object) -> visitMemberSelect
    org.openjdk.tools.javac.tree.JCTree visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Object) -> visitMemberReference
    org.openjdk.tools.javac.tree.JCTree visitEmptyStatement(org.openjdk.source.tree.EmptyStatementTree,java.lang.Object) -> visitEmptyStatement
    org.openjdk.tools.javac.tree.JCTree visitSwitch(org.openjdk.source.tree.SwitchTree,java.lang.Object) -> visitSwitch
    org.openjdk.tools.javac.tree.JCTree visitSynchronized(org.openjdk.source.tree.SynchronizedTree,java.lang.Object) -> visitSynchronized
    org.openjdk.tools.javac.tree.JCTree visitThrow(org.openjdk.source.tree.ThrowTree,java.lang.Object) -> visitThrow
    org.openjdk.tools.javac.tree.JCTree visitCompilationUnit(org.openjdk.source.tree.CompilationUnitTree,java.lang.Object) -> visitCompilationUnit
    org.openjdk.tools.javac.tree.JCTree visitPackage(org.openjdk.source.tree.PackageTree,java.lang.Object) -> visitPackage
    org.openjdk.tools.javac.tree.JCTree visitTry(org.openjdk.source.tree.TryTree,java.lang.Object) -> visitTry
    org.openjdk.tools.javac.tree.JCTree visitParameterizedType(org.openjdk.source.tree.ParameterizedTypeTree,java.lang.Object) -> visitParameterizedType
    org.openjdk.tools.javac.tree.JCTree visitUnionType(org.openjdk.source.tree.UnionTypeTree,java.lang.Object) -> visitUnionType
    org.openjdk.tools.javac.tree.JCTree visitIntersectionType(org.openjdk.source.tree.IntersectionTypeTree,java.lang.Object) -> visitIntersectionType
    org.openjdk.tools.javac.tree.JCTree visitArrayType(org.openjdk.source.tree.ArrayTypeTree,java.lang.Object) -> visitArrayType
    org.openjdk.tools.javac.tree.JCTree visitTypeCast(org.openjdk.source.tree.TypeCastTree,java.lang.Object) -> visitTypeCast
    org.openjdk.tools.javac.tree.JCTree visitPrimitiveType(org.openjdk.source.tree.PrimitiveTypeTree,java.lang.Object) -> visitPrimitiveType
    org.openjdk.tools.javac.tree.JCTree visitTypeParameter(org.openjdk.source.tree.TypeParameterTree,java.lang.Object) -> visitTypeParameter
    org.openjdk.tools.javac.tree.JCTree visitInstanceOf(org.openjdk.source.tree.InstanceOfTree,java.lang.Object) -> visitInstanceOf
    org.openjdk.tools.javac.tree.JCTree visitUnary(org.openjdk.source.tree.UnaryTree,java.lang.Object) -> visitUnary
    org.openjdk.tools.javac.tree.JCTree visitVariable(org.openjdk.source.tree.VariableTree,java.lang.Object) -> visitVariable
    org.openjdk.tools.javac.tree.JCTree visitWhileLoop(org.openjdk.source.tree.WhileLoopTree,java.lang.Object) -> visitWhileLoop
    org.openjdk.tools.javac.tree.JCTree visitWildcard(org.openjdk.source.tree.WildcardTree,java.lang.Object) -> visitWildcard
    org.openjdk.tools.javac.tree.JCTree visitModule(org.openjdk.source.tree.ModuleTree,java.lang.Object) -> visitModule
    org.openjdk.tools.javac.tree.JCTree$JCExports visitExports(org.openjdk.source.tree.ExportsTree,java.lang.Object) -> visitExports
    org.openjdk.tools.javac.tree.JCTree$JCOpens visitOpens(org.openjdk.source.tree.OpensTree,java.lang.Object) -> visitOpens
    org.openjdk.tools.javac.tree.JCTree$JCProvides visitProvides(org.openjdk.source.tree.ProvidesTree,java.lang.Object) -> visitProvides
    org.openjdk.tools.javac.tree.JCTree$JCRequires visitRequires(org.openjdk.source.tree.RequiresTree,java.lang.Object) -> visitRequires
    org.openjdk.tools.javac.tree.JCTree$JCUses visitUses(org.openjdk.source.tree.UsesTree,java.lang.Object) -> visitUses
    org.openjdk.tools.javac.tree.JCTree visitOther(org.openjdk.source.tree.Tree,java.lang.Object) -> visitOther
    java.lang.Object visitOther(org.openjdk.source.tree.Tree,java.lang.Object) -> visitOther
    java.lang.Object visitUses(org.openjdk.source.tree.UsesTree,java.lang.Object) -> visitUses
    java.lang.Object visitRequires(org.openjdk.source.tree.RequiresTree,java.lang.Object) -> visitRequires
    java.lang.Object visitProvides(org.openjdk.source.tree.ProvidesTree,java.lang.Object) -> visitProvides
    java.lang.Object visitOpens(org.openjdk.source.tree.OpensTree,java.lang.Object) -> visitOpens
    java.lang.Object visitExports(org.openjdk.source.tree.ExportsTree,java.lang.Object) -> visitExports
    java.lang.Object visitModule(org.openjdk.source.tree.ModuleTree,java.lang.Object) -> visitModule
    java.lang.Object visitWildcard(org.openjdk.source.tree.WildcardTree,java.lang.Object) -> visitWildcard
    java.lang.Object visitWhileLoop(org.openjdk.source.tree.WhileLoopTree,java.lang.Object) -> visitWhileLoop
    java.lang.Object visitVariable(org.openjdk.source.tree.VariableTree,java.lang.Object) -> visitVariable
    java.lang.Object visitUnary(org.openjdk.source.tree.UnaryTree,java.lang.Object) -> visitUnary
    java.lang.Object visitInstanceOf(org.openjdk.source.tree.InstanceOfTree,java.lang.Object) -> visitInstanceOf
    java.lang.Object visitTypeParameter(org.openjdk.source.tree.TypeParameterTree,java.lang.Object) -> visitTypeParameter
    java.lang.Object visitPrimitiveType(org.openjdk.source.tree.PrimitiveTypeTree,java.lang.Object) -> visitPrimitiveType
    java.lang.Object visitTypeCast(org.openjdk.source.tree.TypeCastTree,java.lang.Object) -> visitTypeCast
    java.lang.Object visitArrayType(org.openjdk.source.tree.ArrayTypeTree,java.lang.Object) -> visitArrayType
    java.lang.Object visitIntersectionType(org.openjdk.source.tree.IntersectionTypeTree,java.lang.Object) -> visitIntersectionType
    java.lang.Object visitUnionType(org.openjdk.source.tree.UnionTypeTree,java.lang.Object) -> visitUnionType
    java.lang.Object visitParameterizedType(org.openjdk.source.tree.ParameterizedTypeTree,java.lang.Object) -> visitParameterizedType
    java.lang.Object visitTry(org.openjdk.source.tree.TryTree,java.lang.Object) -> visitTry
    java.lang.Object visitCompilationUnit(org.openjdk.source.tree.CompilationUnitTree,java.lang.Object) -> visitCompilationUnit
    java.lang.Object visitThrow(org.openjdk.source.tree.ThrowTree,java.lang.Object) -> visitThrow
    java.lang.Object visitSynchronized(org.openjdk.source.tree.SynchronizedTree,java.lang.Object) -> visitSynchronized
    java.lang.Object visitSwitch(org.openjdk.source.tree.SwitchTree,java.lang.Object) -> visitSwitch
    java.lang.Object visitEmptyStatement(org.openjdk.source.tree.EmptyStatementTree,java.lang.Object) -> visitEmptyStatement
    java.lang.Object visitMemberReference(org.openjdk.source.tree.MemberReferenceTree,java.lang.Object) -> visitMemberReference
    java.lang.Object visitMemberSelect(org.openjdk.source.tree.MemberSelectTree,java.lang.Object) -> visitMemberSelect
    java.lang.Object visitReturn(org.openjdk.source.tree.ReturnTree,java.lang.Object) -> visitReturn
    java.lang.Object visitParenthesized(org.openjdk.source.tree.ParenthesizedTree,java.lang.Object) -> visitParenthesized
    java.lang.Object visitPackage(org.openjdk.source.tree.PackageTree,java.lang.Object) -> visitPackage
    java.lang.Object visitLambdaExpression(org.openjdk.source.tree.LambdaExpressionTree,java.lang.Object) -> visitLambdaExpression
    java.lang.Object visitNewClass(org.openjdk.source.tree.NewClassTree,java.lang.Object) -> visitNewClass
    java.lang.Object visitNewArray(org.openjdk.source.tree.NewArrayTree,java.lang.Object) -> visitNewArray
    java.lang.Object visitModifiers(org.openjdk.source.tree.ModifiersTree,java.lang.Object) -> visitModifiers
    java.lang.Object visitMethod(org.openjdk.source.tree.MethodTree,java.lang.Object) -> visitMethod
    java.lang.Object visitLiteral(org.openjdk.source.tree.LiteralTree,java.lang.Object) -> visitLiteral
    java.lang.Object visitLabeledStatement(org.openjdk.source.tree.LabeledStatementTree,java.lang.Object) -> visitLabeledStatement
    java.lang.Object visitArrayAccess(org.openjdk.source.tree.ArrayAccessTree,java.lang.Object) -> visitArrayAccess
    java.lang.Object visitImport(org.openjdk.source.tree.ImportTree,java.lang.Object) -> visitImport
    java.lang.Object visitIf(org.openjdk.source.tree.IfTree,java.lang.Object) -> visitIf
    java.lang.Object visitIdentifier(org.openjdk.source.tree.IdentifierTree,java.lang.Object) -> visitIdentifier
    java.lang.Object visitForLoop(org.openjdk.source.tree.ForLoopTree,java.lang.Object) -> visitForLoop
    java.lang.Object visitEnhancedForLoop(org.openjdk.source.tree.EnhancedForLoopTree,java.lang.Object) -> visitEnhancedForLoop
    java.lang.Object visitExpressionStatement(org.openjdk.source.tree.ExpressionStatementTree,java.lang.Object) -> visitExpressionStatement
    java.lang.Object visitErroneous(org.openjdk.source.tree.ErroneousTree,java.lang.Object) -> visitErroneous
    java.lang.Object visitDoWhileLoop(org.openjdk.source.tree.DoWhileLoopTree,java.lang.Object) -> visitDoWhileLoop
    java.lang.Object visitContinue(org.openjdk.source.tree.ContinueTree,java.lang.Object) -> visitContinue
    java.lang.Object visitConditionalExpression(org.openjdk.source.tree.ConditionalExpressionTree,java.lang.Object) -> visitConditionalExpression
    java.lang.Object visitClass(org.openjdk.source.tree.ClassTree,java.lang.Object) -> visitClass
    java.lang.Object visitCatch(org.openjdk.source.tree.CatchTree,java.lang.Object) -> visitCatch
    java.lang.Object visitCase(org.openjdk.source.tree.CaseTree,java.lang.Object) -> visitCase
    java.lang.Object visitBreak(org.openjdk.source.tree.BreakTree,java.lang.Object) -> visitBreak
    java.lang.Object visitBlock(org.openjdk.source.tree.BlockTree,java.lang.Object) -> visitBlock
    java.lang.Object visitBinary(org.openjdk.source.tree.BinaryTree,java.lang.Object) -> visitBinary
    java.lang.Object visitCompoundAssignment(org.openjdk.source.tree.CompoundAssignmentTree,java.lang.Object) -> visitCompoundAssignment
    java.lang.Object visitAssignment(org.openjdk.source.tree.AssignmentTree,java.lang.Object) -> visitAssignment
    java.lang.Object visitAssert(org.openjdk.source.tree.AssertTree,java.lang.Object) -> visitAssert
    java.lang.Object visitMethodInvocation(org.openjdk.source.tree.MethodInvocationTree,java.lang.Object) -> visitMethodInvocation
    java.lang.Object visitAnnotation(org.openjdk.source.tree.AnnotationTree,java.lang.Object) -> visitAnnotation
    java.lang.Object visitAnnotatedType(org.openjdk.source.tree.AnnotatedTypeTree,java.lang.Object) -> visitAnnotatedType
org.openjdk.tools.javac.tree.TreeCopier$1 -> org.openjdk.tools.javac.tree.TreeCopier$1:
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.TreeInfo -> org.openjdk.tools.javac.tree.TreeInfo:
    int notExpression -> notExpression
    int noPrec -> noPrec
    int assignPrec -> assignPrec
    int assignopPrec -> assignopPrec
    int condPrec -> condPrec
    int orPrec -> orPrec
    int andPrec -> andPrec
    int bitorPrec -> bitorPrec
    int bitxorPrec -> bitxorPrec
    int bitandPrec -> bitandPrec
    int eqPrec -> eqPrec
    int ordPrec -> ordPrec
    int shiftPrec -> shiftPrec
    int addPrec -> addPrec
    int mulPrec -> mulPrec
    int prefixPrec -> prefixPrec
    int postfixPrec -> postfixPrec
    int precCount -> precCount
    void <init>() -> <init>
    org.openjdk.tools.javac.util.List args(org.openjdk.tools.javac.tree.JCTree) -> args
    boolean isConstructor(org.openjdk.tools.javac.tree.JCTree) -> isConstructor
    boolean isReceiverParam(org.openjdk.tools.javac.tree.JCTree) -> isReceiverParam
    boolean hasConstructors(org.openjdk.tools.javac.util.List) -> hasConstructors
    boolean isMultiCatch(org.openjdk.tools.javac.tree.JCTree$JCCatch) -> isMultiCatch
    boolean isSyntheticInit(org.openjdk.tools.javac.tree.JCTree) -> isSyntheticInit
    org.openjdk.tools.javac.util.Name calledMethodName(org.openjdk.tools.javac.tree.JCTree) -> calledMethodName
    boolean isSelfCall(org.openjdk.tools.javac.tree.JCTree) -> isSelfCall
    boolean isSuperCall(org.openjdk.tools.javac.tree.JCTree) -> isSuperCall
    boolean isInitialConstructor(org.openjdk.tools.javac.tree.JCTree) -> isInitialConstructor
    org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation firstConstructorCall(org.openjdk.tools.javac.tree.JCTree) -> firstConstructorCall
    boolean isDiamond(org.openjdk.tools.javac.tree.JCTree) -> isDiamond
    boolean isAnonymousDiamond(org.openjdk.tools.javac.tree.JCTree) -> isAnonymousDiamond
    boolean isEnumInit(org.openjdk.tools.javac.tree.JCTree) -> isEnumInit
    void setPolyKind(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree$JCPolyExpression$PolyKind) -> setPolyKind
    void setVarargsElement(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Type) -> setVarargsElement
    boolean isExpressionStatement(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> isExpressionStatement
    boolean isStatement(org.openjdk.tools.javac.tree.JCTree) -> isStatement
    boolean isStaticSelector(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.Names) -> isStaticSelector
    boolean isStaticSym(org.openjdk.tools.javac.tree.JCTree) -> isStaticSym
    boolean isNull(org.openjdk.tools.javac.tree.JCTree) -> isNull
    boolean isInAnnotation(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree) -> isInAnnotation
    java.lang.String getCommentText(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree) -> getCommentText
    org.openjdk.tools.javac.tree.DCTree$DCDocComment getCommentTree(org.openjdk.tools.javac.comp.Env,org.openjdk.tools.javac.tree.JCTree) -> getCommentTree
    int firstStatPos(org.openjdk.tools.javac.tree.JCTree) -> firstStatPos
    int endPos(org.openjdk.tools.javac.tree.JCTree) -> endPos
    int getStartPos(org.openjdk.tools.javac.tree.JCTree) -> getStartPos
    int getEndPos(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.EndPosTable) -> getEndPos
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition diagEndPos(org.openjdk.tools.javac.tree.JCTree) -> diagEndPos
    int finalizerPos(org.openjdk.tools.javac.tree.JCTree) -> finalizerPos
    int positionFor(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree) -> positionFor
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition diagnosticPositionFor(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree) -> diagnosticPositionFor
    org.openjdk.tools.javac.tree.JCTree declarationFor(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree) -> declarationFor
    org.openjdk.tools.javac.comp.Env scopeFor(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> scopeFor
    org.openjdk.tools.javac.comp.Env scopeFor(org.openjdk.tools.javac.util.List) -> scopeFor
    org.openjdk.tools.javac.util.List pathFor(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> pathFor
    org.openjdk.tools.javac.tree.JCTree referencedStatement(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> referencedStatement
    org.openjdk.tools.javac.tree.JCTree$JCExpression skipParens(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> skipParens
    org.openjdk.tools.javac.tree.JCTree skipParens(org.openjdk.tools.javac.tree.JCTree) -> skipParens
    org.openjdk.tools.javac.util.List types(org.openjdk.tools.javac.util.List) -> types
    org.openjdk.tools.javac.util.Name name(org.openjdk.tools.javac.tree.JCTree) -> name
    org.openjdk.tools.javac.util.Name fullName(org.openjdk.tools.javac.tree.JCTree) -> fullName
    org.openjdk.tools.javac.code.Symbol symbolFor(org.openjdk.tools.javac.tree.JCTree) -> symbolFor
    org.openjdk.tools.javac.code.Symbol symbolForImpl(org.openjdk.tools.javac.tree.JCTree) -> symbolForImpl
    boolean isDeclaration(org.openjdk.tools.javac.tree.JCTree) -> isDeclaration
    org.openjdk.tools.javac.code.Symbol symbol(org.openjdk.tools.javac.tree.JCTree) -> symbol
    boolean nonstaticSelect(org.openjdk.tools.javac.tree.JCTree) -> nonstaticSelect
    void setSymbol(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.code.Symbol) -> setSymbol
    long flags(org.openjdk.tools.javac.tree.JCTree) -> flags
    long firstFlag(long) -> firstFlag
    java.lang.String flagNames(long) -> flagNames
    int opPrec(org.openjdk.tools.javac.tree.JCTree$Tag) -> opPrec
    org.openjdk.source.tree.Tree$Kind tagToKind(org.openjdk.tools.javac.tree.JCTree$Tag) -> tagToKind
    org.openjdk.tools.javac.tree.JCTree$JCExpression typeIn(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> typeIn
    org.openjdk.tools.javac.tree.JCTree innermostType(org.openjdk.tools.javac.tree.JCTree) -> innermostType
    boolean containsTypeAnnotation(org.openjdk.tools.javac.tree.JCTree) -> containsTypeAnnotation
    boolean isModuleInfo(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> isModuleInfo
    org.openjdk.tools.javac.tree.JCTree$JCModuleDecl getModule(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> getModule
    boolean isPackageInfo(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> isPackageInfo
org.openjdk.tools.javac.tree.TreeInfo$1 -> org.openjdk.tools.javac.tree.TreeInfo$1:
    org.openjdk.tools.javac.tree.JCTree val$tree -> val$tree
    int val$endPos -> val$endPos
    void <init>(org.openjdk.tools.javac.tree.JCTree,int) -> <init>
    org.openjdk.tools.javac.tree.JCTree getTree() -> getTree
    int getStartPosition() -> getStartPosition
    int getPreferredPosition() -> getPreferredPosition
    int getEndPosition(org.openjdk.tools.javac.tree.EndPosTable) -> getEndPosition
org.openjdk.tools.javac.tree.TreeInfo$1DeclScanner -> org.openjdk.tools.javac.tree.TreeInfo$1DeclScanner:
    org.openjdk.tools.javac.tree.JCTree result -> result
    org.openjdk.tools.javac.code.Symbol val$sym -> val$sym
    void <init>(org.openjdk.tools.javac.code.Symbol) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void visitTopLevel(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> visitTopLevel
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void visitPackageDef(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> visitPackageDef
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
org.openjdk.tools.javac.tree.TreeInfo$1PathFinder -> org.openjdk.tools.javac.tree.TreeInfo$1PathFinder:
    org.openjdk.tools.javac.util.List path -> path
    org.openjdk.tools.javac.tree.JCTree val$node -> val$node
    void <init>(org.openjdk.tools.javac.tree.JCTree) -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
org.openjdk.tools.javac.tree.TreeInfo$1Result -> org.openjdk.tools.javac.tree.TreeInfo$1Result:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.util.List path -> path
    void <init>(org.openjdk.tools.javac.util.List) -> <init>
org.openjdk.tools.javac.tree.TreeInfo$2 -> org.openjdk.tools.javac.tree.TreeInfo$2:
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.TreeInfo$TypeAnnotationFinder -> org.openjdk.tools.javac.tree.TreeInfo$TypeAnnotationFinder:
    boolean foundTypeAnno -> foundTypeAnno
    void <init>() -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void <init>(org.openjdk.tools.javac.tree.TreeInfo$1) -> <init>
org.openjdk.tools.javac.tree.TreeMaker -> org.openjdk.tools.javac.tree.TreeMaker:
    org.openjdk.tools.javac.util.Context$Key treeMakerKey -> treeMakerKey
    int pos -> pos
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit toplevel -> toplevel
    org.openjdk.tools.javac.util.Names names -> names
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.tree.TreeMaker$AnnotationBuilder annotationBuilder -> annotationBuilder
    org.openjdk.tools.javac.tree.TreeMaker instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void <init>(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit,org.openjdk.tools.javac.util.Names,org.openjdk.tools.javac.code.Types,org.openjdk.tools.javac.code.Symtab) -> <init>
    org.openjdk.tools.javac.tree.TreeMaker forToplevel(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> forToplevel
    org.openjdk.tools.javac.tree.TreeMaker at(int) -> at
    org.openjdk.tools.javac.tree.TreeMaker at(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> at
    org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit TopLevel(org.openjdk.tools.javac.util.List) -> TopLevel
    org.openjdk.tools.javac.tree.JCTree$JCPackageDecl PackageDecl(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> PackageDecl
    org.openjdk.tools.javac.tree.JCTree$JCImport Import(org.openjdk.tools.javac.tree.JCTree,boolean) -> Import
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl ClassDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> ClassDef
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl MethodDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> MethodDef
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl MethodDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> MethodDef
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl VarDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> VarDef
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl ReceiverVarDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> ReceiverVarDef
    org.openjdk.tools.javac.tree.JCTree$JCSkip Skip() -> Skip
    org.openjdk.tools.javac.tree.JCTree$JCBlock Block(long,org.openjdk.tools.javac.util.List) -> Block
    org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop DoLoop(org.openjdk.tools.javac.tree.JCTree$JCStatement,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> DoLoop
    org.openjdk.tools.javac.tree.JCTree$JCWhileLoop WhileLoop(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> WhileLoop
    org.openjdk.tools.javac.tree.JCTree$JCForLoop ForLoop(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> ForLoop
    org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop ForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> ForeachLoop
    org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement Labelled(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> Labelled
    org.openjdk.tools.javac.tree.JCTree$JCSwitch Switch(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Switch
    org.openjdk.tools.javac.tree.JCTree$JCCase Case(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Case
    org.openjdk.tools.javac.tree.JCTree$JCSynchronized Synchronized(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> Synchronized
    org.openjdk.tools.javac.tree.JCTree$JCTry Try(org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> Try
    org.openjdk.tools.javac.tree.JCTree$JCTry Try(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> Try
    org.openjdk.tools.javac.tree.JCTree$JCCatch Catch(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> Catch
    org.openjdk.tools.javac.tree.JCTree$JCConditional Conditional(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Conditional
    org.openjdk.tools.javac.tree.JCTree$JCIf If(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCStatement,org.openjdk.tools.javac.tree.JCTree$JCStatement) -> If
    org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement Exec(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Exec
    org.openjdk.tools.javac.tree.JCTree$JCBreak Break(org.openjdk.tools.javac.util.Name) -> Break
    org.openjdk.tools.javac.tree.JCTree$JCContinue Continue(org.openjdk.tools.javac.util.Name) -> Continue
    org.openjdk.tools.javac.tree.JCTree$JCReturn Return(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Return
    org.openjdk.tools.javac.tree.JCTree$JCThrow Throw(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Throw
    org.openjdk.tools.javac.tree.JCTree$JCAssert Assert(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Assert
    org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation Apply(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Apply
    org.openjdk.tools.javac.tree.JCTree$JCNewClass NewClass(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> NewClass
    org.openjdk.tools.javac.tree.JCTree$JCNewArray NewArray(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> NewArray
    org.openjdk.tools.javac.tree.JCTree$JCLambda Lambda(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree) -> Lambda
    org.openjdk.tools.javac.tree.JCTree$JCParens Parens(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Parens
    org.openjdk.tools.javac.tree.JCTree$JCAssign Assign(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Assign
    org.openjdk.tools.javac.tree.JCTree$JCAssignOp Assignop(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree) -> Assignop
    org.openjdk.tools.javac.tree.JCTree$JCUnary Unary(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Unary
    org.openjdk.tools.javac.tree.JCTree$JCBinary Binary(org.openjdk.tools.javac.tree.JCTree$Tag,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Binary
    org.openjdk.tools.javac.tree.JCTree$JCTypeCast TypeCast(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> TypeCast
    org.openjdk.tools.javac.tree.JCTree$JCInstanceOf TypeTest(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree) -> TypeTest
    org.openjdk.tools.javac.tree.JCTree$JCArrayAccess Indexed(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Indexed
    org.openjdk.tools.javac.tree.JCTree$JCFieldAccess Select(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.Name) -> Select
    org.openjdk.tools.javac.tree.JCTree$JCMemberReference Reference(org.openjdk.source.tree.MemberReferenceTree$ReferenceMode,org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Reference
    org.openjdk.tools.javac.tree.JCTree$JCIdent Ident(org.openjdk.tools.javac.util.Name) -> Ident
    org.openjdk.tools.javac.tree.JCTree$JCLiteral Literal(org.openjdk.tools.javac.code.TypeTag,java.lang.Object) -> Literal
    org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree TypeIdent(org.openjdk.tools.javac.code.TypeTag) -> TypeIdent
    org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree TypeArray(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> TypeArray
    org.openjdk.tools.javac.tree.JCTree$JCTypeApply TypeApply(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> TypeApply
    org.openjdk.tools.javac.tree.JCTree$JCTypeUnion TypeUnion(org.openjdk.tools.javac.util.List) -> TypeUnion
    org.openjdk.tools.javac.tree.JCTree$JCTypeIntersection TypeIntersection(org.openjdk.tools.javac.util.List) -> TypeIntersection
    org.openjdk.tools.javac.tree.JCTree$JCTypeParameter TypeParameter(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List) -> TypeParameter
    org.openjdk.tools.javac.tree.JCTree$JCTypeParameter TypeParameter(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> TypeParameter
    org.openjdk.tools.javac.tree.JCTree$JCWildcard Wildcard(org.openjdk.tools.javac.tree.JCTree$TypeBoundKind,org.openjdk.tools.javac.tree.JCTree) -> Wildcard
    org.openjdk.tools.javac.tree.JCTree$TypeBoundKind TypeBoundKind(org.openjdk.tools.javac.code.BoundKind) -> TypeBoundKind
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation Annotation(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List) -> Annotation
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation TypeAnnotation(org.openjdk.tools.javac.tree.JCTree,org.openjdk.tools.javac.util.List) -> TypeAnnotation
    org.openjdk.tools.javac.tree.JCTree$JCModifiers Modifiers(long,org.openjdk.tools.javac.util.List) -> Modifiers
    org.openjdk.tools.javac.tree.JCTree$JCModifiers Modifiers(long) -> Modifiers
    org.openjdk.tools.javac.tree.JCTree$JCModuleDecl ModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.source.tree.ModuleTree$ModuleKind,org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> ModuleDef
    org.openjdk.tools.javac.tree.JCTree$JCExports Exports(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Exports
    org.openjdk.tools.javac.tree.JCTree$JCOpens Opens(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Opens
    org.openjdk.tools.javac.tree.JCTree$JCProvides Provides(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> Provides
    org.openjdk.tools.javac.tree.JCTree$JCRequires Requires(boolean,boolean,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Requires
    org.openjdk.tools.javac.tree.JCTree$JCUses Uses(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Uses
    org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType AnnotatedType(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> AnnotatedType
    org.openjdk.tools.javac.tree.JCTree$JCErroneous Erroneous() -> Erroneous
    org.openjdk.tools.javac.tree.JCTree$JCErroneous Erroneous(org.openjdk.tools.javac.util.List) -> Erroneous
    org.openjdk.tools.javac.tree.JCTree$LetExpr LetExpr(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> LetExpr
    org.openjdk.tools.javac.tree.JCTree$JCClassDecl AnonymousClassDef(org.openjdk.tools.javac.tree.JCTree$JCModifiers,org.openjdk.tools.javac.util.List) -> AnonymousClassDef
    org.openjdk.tools.javac.tree.JCTree$LetExpr LetExpr(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> LetExpr
    org.openjdk.tools.javac.tree.JCTree$JCIdent Ident(org.openjdk.tools.javac.code.Symbol) -> Ident
    org.openjdk.tools.javac.tree.JCTree$JCExpression Select(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.code.Symbol) -> Select
    org.openjdk.tools.javac.tree.JCTree$JCExpression QualIdent(org.openjdk.tools.javac.code.Symbol) -> QualIdent
    org.openjdk.tools.javac.tree.JCTree$JCExpression Ident(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> Ident
    org.openjdk.tools.javac.util.List Idents(org.openjdk.tools.javac.util.List) -> Idents
    org.openjdk.tools.javac.tree.JCTree$JCExpression This(org.openjdk.tools.javac.code.Type) -> This
    org.openjdk.tools.javac.tree.JCTree$JCExpression QualThis(org.openjdk.tools.javac.code.Type) -> QualThis
    org.openjdk.tools.javac.tree.JCTree$JCExpression ClassLiteral(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> ClassLiteral
    org.openjdk.tools.javac.tree.JCTree$JCExpression ClassLiteral(org.openjdk.tools.javac.code.Type) -> ClassLiteral
    org.openjdk.tools.javac.tree.JCTree$JCIdent Super(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> Super
    org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation App(org.openjdk.tools.javac.tree.JCTree$JCExpression,org.openjdk.tools.javac.util.List) -> App
    org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation App(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> App
    org.openjdk.tools.javac.tree.JCTree$JCExpression Create(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.util.List) -> Create
    org.openjdk.tools.javac.tree.JCTree$JCExpression Type(org.openjdk.tools.javac.code.Type) -> Type
    org.openjdk.tools.javac.util.List Types(org.openjdk.tools.javac.util.List) -> Types
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl VarDef(org.openjdk.tools.javac.code.Symbol$VarSymbol,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> VarDef
    org.openjdk.tools.javac.util.List Annotations(org.openjdk.tools.javac.util.List) -> Annotations
    org.openjdk.tools.javac.tree.JCTree$JCLiteral Literal(java.lang.Object) -> Literal
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation Annotation(org.openjdk.tools.javac.code.Attribute) -> Annotation
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation TypeAnnotation(org.openjdk.tools.javac.code.Attribute) -> TypeAnnotation
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl MethodDef(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> MethodDef
    org.openjdk.tools.javac.tree.JCTree$JCMethodDecl MethodDef(org.openjdk.tools.javac.code.Symbol$MethodSymbol,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCBlock) -> MethodDef
    org.openjdk.tools.javac.tree.JCTree$JCTypeParameter TypeParam(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type$TypeVar) -> TypeParam
    org.openjdk.tools.javac.util.List TypeParams(org.openjdk.tools.javac.util.List) -> TypeParams
    org.openjdk.tools.javac.tree.JCTree$JCVariableDecl Param(org.openjdk.tools.javac.util.Name,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.code.Symbol) -> Param
    org.openjdk.tools.javac.util.List Params(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.code.Symbol) -> Params
    org.openjdk.tools.javac.tree.JCTree$JCStatement Call(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Call
    org.openjdk.tools.javac.tree.JCTree$JCStatement Assignment(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Assignment
    org.openjdk.tools.javac.tree.JCTree$JCArrayAccess Indexed(org.openjdk.tools.javac.code.Symbol,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> Indexed
    org.openjdk.tools.javac.tree.JCTree$JCTypeCast TypeCast(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.tree.JCTree$JCExpression) -> TypeCast
    boolean isUnqualifiable(org.openjdk.tools.javac.code.Symbol) -> isUnqualifiable
    org.openjdk.tools.javac.util.Name paramName(int) -> paramName
    org.openjdk.tools.javac.util.Name typaramName(int) -> typaramName
    java.lang.String lambda$TopLevel$0(org.openjdk.tools.javac.tree.JCTree) -> lambda$TopLevel$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.TreeMaker$1 -> org.openjdk.tools.javac.tree.TreeMaker$1:
    int[] $SwitchMap$javax$lang$model$type$TypeKind -> $SwitchMap$javax$lang$model$type$TypeKind
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.tree.TreeMaker$AnnotationBuilder -> org.openjdk.tools.javac.tree.TreeMaker$AnnotationBuilder:
    org.openjdk.tools.javac.tree.JCTree$JCExpression result -> result
    org.openjdk.tools.javac.tree.TreeMaker this$0 -> this$0
    void <init>(org.openjdk.tools.javac.tree.TreeMaker) -> <init>
    void visitConstant(org.openjdk.tools.javac.code.Attribute$Constant) -> visitConstant
    void visitClass(org.openjdk.tools.javac.code.Attribute$Class) -> visitClass
    void visitEnum(org.openjdk.tools.javac.code.Attribute$Enum) -> visitEnum
    void visitError(org.openjdk.tools.javac.code.Attribute$Error) -> visitError
    void visitCompound(org.openjdk.tools.javac.code.Attribute$Compound) -> visitCompound
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation visitCompoundInternal(org.openjdk.tools.javac.code.Attribute$Compound) -> visitCompoundInternal
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation visitTypeCompoundInternal(org.openjdk.tools.javac.code.Attribute$TypeCompound) -> visitTypeCompoundInternal
    void visitArray(org.openjdk.tools.javac.code.Attribute$Array) -> visitArray
    org.openjdk.tools.javac.tree.JCTree$JCExpression translate(org.openjdk.tools.javac.code.Attribute) -> translate
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation translate(org.openjdk.tools.javac.code.Attribute$Compound) -> translate
    org.openjdk.tools.javac.tree.JCTree$JCAnnotation translate(org.openjdk.tools.javac.code.Attribute$TypeCompound) -> translate
org.openjdk.tools.javac.tree.TreeScanner -> org.openjdk.tools.javac.tree.TreeScanner:
    void <init>() -> <init>
    void scan(org.openjdk.tools.javac.tree.JCTree) -> scan
    void scan(org.openjdk.tools.javac.util.List) -> scan
    void visitTopLevel(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> visitTopLevel
    void visitPackageDef(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> visitPackageDef
    void visitModuleDef(org.openjdk.tools.javac.tree.JCTree$JCModuleDecl) -> visitModuleDef
    void visitExports(org.openjdk.tools.javac.tree.JCTree$JCExports) -> visitExports
    void visitOpens(org.openjdk.tools.javac.tree.JCTree$JCOpens) -> visitOpens
    void visitProvides(org.openjdk.tools.javac.tree.JCTree$JCProvides) -> visitProvides
    void visitRequires(org.openjdk.tools.javac.tree.JCTree$JCRequires) -> visitRequires
    void visitUses(org.openjdk.tools.javac.tree.JCTree$JCUses) -> visitUses
    void visitImport(org.openjdk.tools.javac.tree.JCTree$JCImport) -> visitImport
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitSkip(org.openjdk.tools.javac.tree.JCTree$JCSkip) -> visitSkip
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void visitCase(org.openjdk.tools.javac.tree.JCTree$JCCase) -> visitCase
    void visitSynchronized(org.openjdk.tools.javac.tree.JCTree$JCSynchronized) -> visitSynchronized
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitCatch(org.openjdk.tools.javac.tree.JCTree$JCCatch) -> visitCatch
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitExec(org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement) -> visitExec
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitAssert(org.openjdk.tools.javac.tree.JCTree$JCAssert) -> visitAssert
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitTypeTest(org.openjdk.tools.javac.tree.JCTree$JCInstanceOf) -> visitTypeTest
    void visitIndexed(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess) -> visitIndexed
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitLiteral(org.openjdk.tools.javac.tree.JCTree$JCLiteral) -> visitLiteral
    void visitTypeIdent(org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree) -> visitTypeIdent
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitTypeUnion(org.openjdk.tools.javac.tree.JCTree$JCTypeUnion) -> visitTypeUnion
    void visitTypeIntersection(org.openjdk.tools.javac.tree.JCTree$JCTypeIntersection) -> visitTypeIntersection
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void visitWildcard(org.openjdk.tools.javac.tree.JCTree$JCWildcard) -> visitWildcard
    void visitTypeBoundKind(org.openjdk.tools.javac.tree.JCTree$TypeBoundKind) -> visitTypeBoundKind
    void visitModifiers(org.openjdk.tools.javac.tree.JCTree$JCModifiers) -> visitModifiers
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitErroneous(org.openjdk.tools.javac.tree.JCTree$JCErroneous) -> visitErroneous
    void visitLetExpr(org.openjdk.tools.javac.tree.JCTree$LetExpr) -> visitLetExpr
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
org.openjdk.tools.javac.tree.TreeTranslator -> org.openjdk.tools.javac.tree.TreeTranslator:
    org.openjdk.tools.javac.tree.JCTree result -> result
    void <init>() -> <init>
    org.openjdk.tools.javac.tree.JCTree translate(org.openjdk.tools.javac.tree.JCTree) -> translate
    org.openjdk.tools.javac.util.List translate(org.openjdk.tools.javac.util.List) -> translate
    org.openjdk.tools.javac.util.List translateVarDefs(org.openjdk.tools.javac.util.List) -> translateVarDefs
    org.openjdk.tools.javac.util.List translateTypeParams(org.openjdk.tools.javac.util.List) -> translateTypeParams
    org.openjdk.tools.javac.util.List translateCases(org.openjdk.tools.javac.util.List) -> translateCases
    org.openjdk.tools.javac.util.List translateCatchers(org.openjdk.tools.javac.util.List) -> translateCatchers
    org.openjdk.tools.javac.util.List translateAnnotations(org.openjdk.tools.javac.util.List) -> translateAnnotations
    void visitTopLevel(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> visitTopLevel
    void visitPackageDef(org.openjdk.tools.javac.tree.JCTree$JCPackageDecl) -> visitPackageDef
    void visitImport(org.openjdk.tools.javac.tree.JCTree$JCImport) -> visitImport
    void visitClassDef(org.openjdk.tools.javac.tree.JCTree$JCClassDecl) -> visitClassDef
    void visitMethodDef(org.openjdk.tools.javac.tree.JCTree$JCMethodDecl) -> visitMethodDef
    void visitVarDef(org.openjdk.tools.javac.tree.JCTree$JCVariableDecl) -> visitVarDef
    void visitSkip(org.openjdk.tools.javac.tree.JCTree$JCSkip) -> visitSkip
    void visitBlock(org.openjdk.tools.javac.tree.JCTree$JCBlock) -> visitBlock
    void visitDoLoop(org.openjdk.tools.javac.tree.JCTree$JCDoWhileLoop) -> visitDoLoop
    void visitWhileLoop(org.openjdk.tools.javac.tree.JCTree$JCWhileLoop) -> visitWhileLoop
    void visitForLoop(org.openjdk.tools.javac.tree.JCTree$JCForLoop) -> visitForLoop
    void visitForeachLoop(org.openjdk.tools.javac.tree.JCTree$JCEnhancedForLoop) -> visitForeachLoop
    void visitLabelled(org.openjdk.tools.javac.tree.JCTree$JCLabeledStatement) -> visitLabelled
    void visitSwitch(org.openjdk.tools.javac.tree.JCTree$JCSwitch) -> visitSwitch
    void visitCase(org.openjdk.tools.javac.tree.JCTree$JCCase) -> visitCase
    void visitSynchronized(org.openjdk.tools.javac.tree.JCTree$JCSynchronized) -> visitSynchronized
    void visitTry(org.openjdk.tools.javac.tree.JCTree$JCTry) -> visitTry
    void visitCatch(org.openjdk.tools.javac.tree.JCTree$JCCatch) -> visitCatch
    void visitConditional(org.openjdk.tools.javac.tree.JCTree$JCConditional) -> visitConditional
    void visitIf(org.openjdk.tools.javac.tree.JCTree$JCIf) -> visitIf
    void visitExec(org.openjdk.tools.javac.tree.JCTree$JCExpressionStatement) -> visitExec
    void visitBreak(org.openjdk.tools.javac.tree.JCTree$JCBreak) -> visitBreak
    void visitContinue(org.openjdk.tools.javac.tree.JCTree$JCContinue) -> visitContinue
    void visitReturn(org.openjdk.tools.javac.tree.JCTree$JCReturn) -> visitReturn
    void visitThrow(org.openjdk.tools.javac.tree.JCTree$JCThrow) -> visitThrow
    void visitAssert(org.openjdk.tools.javac.tree.JCTree$JCAssert) -> visitAssert
    void visitApply(org.openjdk.tools.javac.tree.JCTree$JCMethodInvocation) -> visitApply
    void visitNewClass(org.openjdk.tools.javac.tree.JCTree$JCNewClass) -> visitNewClass
    void visitLambda(org.openjdk.tools.javac.tree.JCTree$JCLambda) -> visitLambda
    void visitNewArray(org.openjdk.tools.javac.tree.JCTree$JCNewArray) -> visitNewArray
    void visitParens(org.openjdk.tools.javac.tree.JCTree$JCParens) -> visitParens
    void visitAssign(org.openjdk.tools.javac.tree.JCTree$JCAssign) -> visitAssign
    void visitAssignop(org.openjdk.tools.javac.tree.JCTree$JCAssignOp) -> visitAssignop
    void visitUnary(org.openjdk.tools.javac.tree.JCTree$JCUnary) -> visitUnary
    void visitBinary(org.openjdk.tools.javac.tree.JCTree$JCBinary) -> visitBinary
    void visitTypeCast(org.openjdk.tools.javac.tree.JCTree$JCTypeCast) -> visitTypeCast
    void visitTypeTest(org.openjdk.tools.javac.tree.JCTree$JCInstanceOf) -> visitTypeTest
    void visitIndexed(org.openjdk.tools.javac.tree.JCTree$JCArrayAccess) -> visitIndexed
    void visitSelect(org.openjdk.tools.javac.tree.JCTree$JCFieldAccess) -> visitSelect
    void visitReference(org.openjdk.tools.javac.tree.JCTree$JCMemberReference) -> visitReference
    void visitIdent(org.openjdk.tools.javac.tree.JCTree$JCIdent) -> visitIdent
    void visitLiteral(org.openjdk.tools.javac.tree.JCTree$JCLiteral) -> visitLiteral
    void visitTypeIdent(org.openjdk.tools.javac.tree.JCTree$JCPrimitiveTypeTree) -> visitTypeIdent
    void visitTypeArray(org.openjdk.tools.javac.tree.JCTree$JCArrayTypeTree) -> visitTypeArray
    void visitTypeApply(org.openjdk.tools.javac.tree.JCTree$JCTypeApply) -> visitTypeApply
    void visitTypeUnion(org.openjdk.tools.javac.tree.JCTree$JCTypeUnion) -> visitTypeUnion
    void visitTypeIntersection(org.openjdk.tools.javac.tree.JCTree$JCTypeIntersection) -> visitTypeIntersection
    void visitTypeParameter(org.openjdk.tools.javac.tree.JCTree$JCTypeParameter) -> visitTypeParameter
    void visitWildcard(org.openjdk.tools.javac.tree.JCTree$JCWildcard) -> visitWildcard
    void visitTypeBoundKind(org.openjdk.tools.javac.tree.JCTree$TypeBoundKind) -> visitTypeBoundKind
    void visitErroneous(org.openjdk.tools.javac.tree.JCTree$JCErroneous) -> visitErroneous
    void visitLetExpr(org.openjdk.tools.javac.tree.JCTree$LetExpr) -> visitLetExpr
    void visitModifiers(org.openjdk.tools.javac.tree.JCTree$JCModifiers) -> visitModifiers
    void visitAnnotation(org.openjdk.tools.javac.tree.JCTree$JCAnnotation) -> visitAnnotation
    void visitAnnotatedType(org.openjdk.tools.javac.tree.JCTree$JCAnnotatedType) -> visitAnnotatedType
    void visitTree(org.openjdk.tools.javac.tree.JCTree) -> visitTree
org.openjdk.tools.javac.util.Abort -> org.openjdk.tools.javac.util.Abort:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Throwable) -> <init>
    void <init>() -> <init>
org.openjdk.tools.javac.util.AbstractDiagnosticFormatter -> org.openjdk.tools.javac.util.AbstractDiagnosticFormatter:
    org.openjdk.tools.javac.util.JavacMessages messages -> messages
    org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$SimpleConfiguration config -> config
    int depth -> depth
    org.openjdk.tools.javac.util.List allCaptured -> allCaptured
    org.openjdk.tools.javac.code.Printer printer -> printer
    void <init>(org.openjdk.tools.javac.util.JavacMessages,org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$SimpleConfiguration) -> <init>
    java.lang.String formatKind(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatKind
    java.lang.String format(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> format
    java.lang.String formatDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatDiagnostic
    java.lang.String formatPosition(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind,java.util.Locale) -> formatPosition
    long getPosition(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind) -> getPosition
    java.lang.String formatSource(org.openjdk.tools.javac.util.JCDiagnostic,boolean,java.util.Locale) -> formatSource
    java.util.Collection formatArguments(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatArguments
    java.lang.String formatArgument(org.openjdk.tools.javac.util.JCDiagnostic,java.lang.Object,java.util.Locale) -> formatArgument
    java.lang.String expr2String(org.openjdk.tools.javac.tree.JCTree$JCExpression) -> expr2String
    java.lang.String formatIterable(org.openjdk.tools.javac.util.JCDiagnostic,java.lang.Iterable,java.util.Locale) -> formatIterable
    org.openjdk.tools.javac.util.List formatSubdiagnostics(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatSubdiagnostics
    java.lang.String formatSubdiagnostic(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatSubdiagnostic
    java.lang.String formatSourceLine(org.openjdk.tools.javac.util.JCDiagnostic,int) -> formatSourceLine
    java.lang.String formatLintCategory(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatLintCategory
    java.lang.String localize(java.util.Locale,java.lang.String,java.lang.Object[]) -> localize
    boolean displaySource(org.openjdk.tools.javac.util.JCDiagnostic) -> displaySource
    boolean isRaw() -> isRaw
    java.lang.String indentString(int) -> indentString
    java.lang.String indent(java.lang.String,int) -> indent
    org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$SimpleConfiguration getConfiguration() -> getConfiguration
    org.openjdk.tools.javac.code.Printer getPrinter() -> getPrinter
    void setPrinter(org.openjdk.tools.javac.code.Printer) -> setPrinter
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration getConfiguration() -> getConfiguration
    java.lang.String formatPosition(org.openjdk.javax.tools.Diagnostic,org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind,java.util.Locale) -> formatPosition
    java.lang.String formatSource(org.openjdk.javax.tools.Diagnostic,boolean,java.util.Locale) -> formatSource
    java.lang.String formatKind(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> formatKind
    java.lang.String format(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> format
    boolean displaySource(org.openjdk.javax.tools.Diagnostic) -> displaySource
    org.openjdk.tools.javac.util.List access$000(org.openjdk.tools.javac.util.AbstractDiagnosticFormatter) -> access$000
    org.openjdk.tools.javac.util.List access$002(org.openjdk.tools.javac.util.AbstractDiagnosticFormatter,org.openjdk.tools.javac.util.List) -> access$002
org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$1 -> org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$1:
    org.openjdk.tools.javac.util.AbstractDiagnosticFormatter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.AbstractDiagnosticFormatter) -> <init>
    java.lang.String localize(java.util.Locale,java.lang.String,java.lang.Object[]) -> localize
    java.lang.String capturedVarId(org.openjdk.tools.javac.code.Type$CapturedType,java.util.Locale) -> capturedVarId
    java.lang.String visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.util.Locale) -> visitCapturedType
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$2 -> org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$2:
    int[] $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType -> $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType
    int[] $SwitchMap$com$sun$tools$javac$api$DiagnosticFormatter$PositionKind -> $SwitchMap$com$sun$tools$javac$api$DiagnosticFormatter$PositionKind
    int[] $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag -> $SwitchMap$com$sun$tools$javac$tree$JCTree$Tag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$SimpleConfiguration -> org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$SimpleConfiguration:
    java.util.Map multilineLimits -> multilineLimits
    java.util.EnumSet visibleParts -> visibleParts
    boolean caretEnabled -> caretEnabled
    void <init>(java.util.Set) -> <init>
    void <init>(org.openjdk.tools.javac.util.Options,java.util.Set) -> <init>
    int getMultilineLimit(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit) -> getMultilineLimit
    java.util.EnumSet getVisible() -> getVisible
    void setMultilineLimit(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit,int) -> setMultilineLimit
    void setVisible(java.util.Set) -> setVisible
    void setVisiblePart(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart,boolean) -> setVisiblePart
    void setCaretEnabled(boolean) -> setCaretEnabled
    boolean isCaretEnabled() -> isCaretEnabled
    java.util.Set getVisible() -> getVisible
org.openjdk.tools.javac.util.AbstractLog -> org.openjdk.tools.javac.util.AbstractLog:
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.util.DiagnosticSource source -> source
    java.util.Map sourceMap -> sourceMap
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic$Factory) -> <init>
    org.openjdk.javax.tools.JavaFileObject useSource(org.openjdk.javax.tools.JavaFileObject) -> useSource
    org.openjdk.tools.javac.util.DiagnosticSource getSource(org.openjdk.javax.tools.JavaFileObject) -> getSource
    org.openjdk.tools.javac.util.DiagnosticSource currentSource() -> currentSource
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(org.openjdk.tools.javac.util.JCDiagnostic$Error) -> error
    void error(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> error
    void error(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Error) -> error
    void error(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> error
    void error(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Error) -> error
    void error(int,java.lang.String,java.lang.Object[]) -> error
    void error(int,org.openjdk.tools.javac.util.JCDiagnostic$Error) -> error
    void error(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag,int,java.lang.String,java.lang.Object[]) -> error
    void error(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag,int,org.openjdk.tools.javac.util.JCDiagnostic$Error) -> error
    void warning(java.lang.String,java.lang.Object[]) -> warning
    void warning(org.openjdk.tools.javac.util.JCDiagnostic$Warning) -> warning
    void warning(org.openjdk.tools.javac.code.Lint$LintCategory,java.lang.String,java.lang.Object[]) -> warning
    void warning(org.openjdk.tools.javac.code.Lint$LintCategory,org.openjdk.tools.javac.util.JCDiagnostic$Warning) -> warning
    void warning(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> warning
    void warning(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Warning) -> warning
    void warning(org.openjdk.tools.javac.code.Lint$LintCategory,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> warning
    void warning(org.openjdk.tools.javac.code.Lint$LintCategory,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Warning) -> warning
    void warning(int,java.lang.String,java.lang.Object[]) -> warning
    void warning(int,org.openjdk.tools.javac.util.JCDiagnostic$Warning) -> warning
    void mandatoryWarning(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> mandatoryWarning
    void mandatoryWarning(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Warning) -> mandatoryWarning
    void mandatoryWarning(org.openjdk.tools.javac.code.Lint$LintCategory,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> mandatoryWarning
    void mandatoryWarning(org.openjdk.tools.javac.code.Lint$LintCategory,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Warning) -> mandatoryWarning
    void note(java.lang.String,java.lang.Object[]) -> note
    void note(org.openjdk.tools.javac.util.JCDiagnostic$Note) -> note
    void note(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> note
    void note(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Note) -> note
    void note(int,java.lang.String,java.lang.Object[]) -> note
    void note(int,org.openjdk.tools.javac.util.JCDiagnostic$Note) -> note
    void note(org.openjdk.javax.tools.JavaFileObject,java.lang.String,java.lang.Object[]) -> note
    void note(org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.JCDiagnostic$Note) -> note
    void mandatoryNote(org.openjdk.javax.tools.JavaFileObject,java.lang.String,java.lang.Object[]) -> mandatoryNote
    void mandatoryNote(org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.JCDiagnostic$Note) -> mandatoryNote
    void report(org.openjdk.tools.javac.util.JCDiagnostic) -> report
    void directError(java.lang.String,java.lang.Object[]) -> directError
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition wrap(int) -> wrap
org.openjdk.tools.javac.util.ArrayUtils -> org.openjdk.tools.javac.util.ArrayUtils:
    void <init>() -> <init>
    int calculateNewLength(int,int) -> calculateNewLength
    java.lang.Object[] ensureCapacity(java.lang.Object[],int) -> ensureCapacity
    byte[] ensureCapacity(byte[],int) -> ensureCapacity
    char[] ensureCapacity(char[],int) -> ensureCapacity
    int[] ensureCapacity(int[],int) -> ensureCapacity
org.openjdk.tools.javac.util.Assert -> org.openjdk.tools.javac.util.Assert:
    void check(boolean) -> check
    void checkNull(java.lang.Object) -> checkNull
    java.lang.Object checkNonNull(java.lang.Object) -> checkNonNull
    void check(boolean,int) -> check
    void check(boolean,long) -> check
    void check(boolean,java.lang.Object) -> check
    void check(boolean,java.lang.String) -> check
    void check(boolean,java.util.function.Supplier) -> check
    void checkNull(java.lang.Object,java.lang.Object) -> checkNull
    void checkNull(java.lang.Object,java.lang.String) -> checkNull
    void checkNull(java.lang.Object,java.util.function.Supplier) -> checkNull
    java.lang.Object checkNonNull(java.lang.Object,java.lang.String) -> checkNonNull
    java.lang.Object checkNonNull(java.lang.Object,java.util.function.Supplier) -> checkNonNull
    void error() -> error
    void error(java.lang.String) -> error
    void <init>() -> <init>
org.openjdk.tools.javac.util.BasicDiagnosticFormatter -> org.openjdk.tools.javac.util.BasicDiagnosticFormatter:
    void <init>(org.openjdk.tools.javac.util.Options,org.openjdk.tools.javac.util.JavacMessages) -> <init>
    void <init>(org.openjdk.tools.javac.util.JavacMessages) -> <init>
    java.lang.String formatDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatDiagnostic
    java.lang.String formatMessage(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatMessage
    java.lang.String addSourceLineIfNeeded(org.openjdk.tools.javac.util.JCDiagnostic,java.lang.String) -> addSourceLineIfNeeded
    java.lang.String formatMeta(char,org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatMeta
    java.lang.String selectFormat(org.openjdk.tools.javac.util.JCDiagnostic) -> selectFormat
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration getConfiguration() -> getConfiguration
    org.openjdk.tools.javac.util.AbstractDiagnosticFormatter$SimpleConfiguration getConfiguration() -> getConfiguration
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration getConfiguration() -> getConfiguration
    java.lang.String formatMessage(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> formatMessage
org.openjdk.tools.javac.util.BasicDiagnosticFormatter$1 -> org.openjdk.tools.javac.util.BasicDiagnosticFormatter$1:
    int[] $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType -> $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration -> org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration:
    java.util.Map indentationLevels -> indentationLevels
    java.util.Map availableFormats -> availableFormats
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition sourcePosition -> sourcePosition
    void <init>(org.openjdk.tools.javac.util.Options) -> <init>
    void <init>() -> <init>
    void initFormat() -> initFormat
    void initOldFormat() -> initOldFormat
    void initFormats(java.lang.String,java.lang.String,java.lang.String) -> initFormats
    void initFormats(java.lang.String) -> initFormats
    void initIndentation() -> initIndentation
    int getIndentation(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart) -> getIndentation
    void setIndentation(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$DiagnosticPart,int) -> setIndentation
    void setSourcePosition(org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition) -> setSourcePosition
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition getSourcePosition() -> getSourcePosition
    void setFormat(org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind,java.lang.String) -> setFormat
    java.lang.String getFormat(org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind) -> getFormat
org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind -> org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind:
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind DEFAULT_POS_FORMAT -> DEFAULT_POS_FORMAT
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind DEFAULT_NO_POS_FORMAT -> DEFAULT_NO_POS_FORMAT
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind DEFAULT_CLASS_FORMAT -> DEFAULT_CLASS_FORMAT
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind[] values() -> values
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$BasicFormatKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition -> org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition:
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition BOTTOM -> BOTTOM
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition AFTER_SUMMARY -> AFTER_SUMMARY
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition[] values() -> values
    org.openjdk.tools.javac.util.BasicDiagnosticFormatter$BasicConfiguration$SourcePosition valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Bits -> org.openjdk.tools.javac.util.Bits:
    int wordlen -> wordlen
    int wordshift -> wordshift
    int wordmask -> wordmask
    int[] bits -> bits
    int[] unassignedBits -> unassignedBits
    org.openjdk.tools.javac.util.Bits$BitsState currentState -> currentState
    void <init>() -> <init>
    void <init>(org.openjdk.tools.javac.util.Bits) -> <init>
    void <init>(boolean) -> <init>
    void <init>(int[],org.openjdk.tools.javac.util.Bits$BitsState) -> <init>
    void sizeTo(int) -> sizeTo
    void clear() -> clear
    void reset() -> reset
    void internalReset() -> internalReset
    boolean isReset() -> isReset
    org.openjdk.tools.javac.util.Bits assign(org.openjdk.tools.javac.util.Bits) -> assign
    org.openjdk.tools.javac.util.Bits dup() -> dup
    int[] dupBits() -> dupBits
    void incl(int) -> incl
    void inclRange(int,int) -> inclRange
    void excludeFrom(int) -> excludeFrom
    void excl(int) -> excl
    boolean isMember(int) -> isMember
    org.openjdk.tools.javac.util.Bits andSet(org.openjdk.tools.javac.util.Bits) -> andSet
    void internalAndSet(org.openjdk.tools.javac.util.Bits) -> internalAndSet
    org.openjdk.tools.javac.util.Bits orSet(org.openjdk.tools.javac.util.Bits) -> orSet
    org.openjdk.tools.javac.util.Bits diffSet(org.openjdk.tools.javac.util.Bits) -> diffSet
    org.openjdk.tools.javac.util.Bits xorSet(org.openjdk.tools.javac.util.Bits) -> xorSet
    int trailingZeroBits(int) -> trailingZeroBits
    int nextBit(int) -> nextBit
    java.lang.String toString() -> toString
    int[] access$000() -> access$000
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Bits$1 -> org.openjdk.tools.javac.util.Bits$1:
    int[] $SwitchMap$com$sun$tools$javac$util$Bits$BitsState -> $SwitchMap$com$sun$tools$javac$util$Bits$BitsState
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Bits$BitsState -> org.openjdk.tools.javac.util.Bits$BitsState:
    org.openjdk.tools.javac.util.Bits$BitsState UNKNOWN -> UNKNOWN
    org.openjdk.tools.javac.util.Bits$BitsState UNINIT -> UNINIT
    org.openjdk.tools.javac.util.Bits$BitsState NORMAL -> NORMAL
    org.openjdk.tools.javac.util.Bits$BitsState[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.Bits$BitsState[] values() -> values
    org.openjdk.tools.javac.util.Bits$BitsState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.openjdk.tools.javac.util.Bits$BitsState getState(int[],boolean) -> getState
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.ByteBuffer -> org.openjdk.tools.javac.util.ByteBuffer:
    byte[] elems -> elems
    int length -> length
    void <init>() -> <init>
    void <init>(int) -> <init>
    void appendByte(int) -> appendByte
    void appendBytes(byte[],int,int) -> appendBytes
    void appendBytes(byte[]) -> appendBytes
    void appendChar(int) -> appendChar
    void appendInt(int) -> appendInt
    void appendLong(long) -> appendLong
    void appendFloat(float) -> appendFloat
    void appendDouble(double) -> appendDouble
    void appendName(org.openjdk.tools.javac.util.Name) -> appendName
    void reset() -> reset
    org.openjdk.tools.javac.util.Name toName(org.openjdk.tools.javac.util.Names) -> toName
org.openjdk.tools.javac.util.ClientCodeException -> org.openjdk.tools.javac.util.ClientCodeException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Throwable) -> <init>
org.openjdk.tools.javac.util.Constants -> org.openjdk.tools.javac.util.Constants:
    void <init>() -> <init>
    java.lang.Object decode(java.lang.Object,org.openjdk.tools.javac.code.Type) -> decode
    java.lang.String format(java.lang.Object,org.openjdk.tools.javac.code.Type) -> format
    java.lang.String format(java.lang.Object) -> format
    java.lang.String formatByte(byte) -> formatByte
    java.lang.String formatShort(short) -> formatShort
    java.lang.String formatLong(long) -> formatLong
    java.lang.String formatFloat(float) -> formatFloat
    java.lang.String formatDouble(double) -> formatDouble
    java.lang.String formatChar(char) -> formatChar
    java.lang.String formatString(java.lang.String) -> formatString
org.openjdk.tools.javac.util.Constants$1 -> org.openjdk.tools.javac.util.Constants$1:
    int[] $SwitchMap$com$sun$tools$javac$code$TypeTag -> $SwitchMap$com$sun$tools$javac$code$TypeTag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Context -> org.openjdk.tools.javac.util.Context:
    java.util.Map ht -> ht
    java.util.Map ft -> ft
    java.util.Map kt -> kt
    void put(org.openjdk.tools.javac.util.Context$Key,org.openjdk.tools.javac.util.Context$Factory) -> put
    void put(org.openjdk.tools.javac.util.Context$Key,java.lang.Object) -> put
    java.lang.Object get(org.openjdk.tools.javac.util.Context$Key) -> get
    void <init>() -> <init>
    org.openjdk.tools.javac.util.Context$Key key(java.lang.Class) -> key
    java.lang.Object get(java.lang.Class) -> get
    void put(java.lang.Class,java.lang.Object) -> put
    void put(java.lang.Class,org.openjdk.tools.javac.util.Context$Factory) -> put
    java.lang.Object uncheckedCast(java.lang.Object) -> uncheckedCast
    void dump() -> dump
    void checkState(java.util.Map) -> checkState
org.openjdk.tools.javac.util.Context$Factory -> org.openjdk.tools.javac.util.Context$Factory:
    java.lang.Object make(org.openjdk.tools.javac.util.Context) -> make
org.openjdk.tools.javac.util.Context$Key -> org.openjdk.tools.javac.util.Context$Key:
    void <init>() -> <init>
org.openjdk.tools.javac.util.Convert -> org.openjdk.tools.javac.util.Convert:
    void <init>() -> <init>
    int string2int(java.lang.String,int) -> string2int
    long string2long(java.lang.String,int) -> string2long
    int utf2chars(byte[],int,char[],int,int) -> utf2chars
    char[] utf2chars(byte[],int,int) -> utf2chars
    char[] utf2chars(byte[]) -> utf2chars
    java.lang.String utf2string(byte[],int,int) -> utf2string
    java.lang.String utf2string(byte[]) -> utf2string
    int chars2utf(char[],int,byte[],int,int) -> chars2utf
    byte[] chars2utf(char[],int,int) -> chars2utf
    byte[] chars2utf(char[]) -> chars2utf
    byte[] string2utf(java.lang.String) -> string2utf
    java.lang.String quote(java.lang.String) -> quote
    java.lang.String quote(char) -> quote
    boolean isPrintableAscii(char) -> isPrintableAscii
    java.lang.String escapeUnicode(java.lang.String) -> escapeUnicode
    org.openjdk.tools.javac.util.Name shortName(org.openjdk.tools.javac.util.Name) -> shortName
    java.lang.String shortName(java.lang.String) -> shortName
    org.openjdk.tools.javac.util.Name packagePart(org.openjdk.tools.javac.util.Name) -> packagePart
    java.lang.String packagePart(java.lang.String) -> packagePart
    org.openjdk.tools.javac.util.List enclosingCandidates(org.openjdk.tools.javac.util.Name) -> enclosingCandidates
    org.openjdk.tools.javac.util.List classCandidates(org.openjdk.tools.javac.util.Name) -> classCandidates
org.openjdk.tools.javac.util.DefinedBy -> org.openjdk.tools.javac.util.DefinedBy:
    org.openjdk.tools.javac.util.DefinedBy$Api value() -> value
org.openjdk.tools.javac.util.DefinedBy$Api -> org.openjdk.tools.javac.util.DefinedBy$Api:
    org.openjdk.tools.javac.util.DefinedBy$Api ANNOTATION_PROCESSING -> ANNOTATION_PROCESSING
    org.openjdk.tools.javac.util.DefinedBy$Api COMPILER -> COMPILER
    org.openjdk.tools.javac.util.DefinedBy$Api COMPILER_TREE -> COMPILER_TREE
    org.openjdk.tools.javac.util.DefinedBy$Api LANGUAGE_MODEL -> LANGUAGE_MODEL
    java.lang.String packageRoot -> packageRoot
    org.openjdk.tools.javac.util.DefinedBy$Api[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.DefinedBy$Api[] values() -> values
    org.openjdk.tools.javac.util.DefinedBy$Api valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Dependencies -> org.openjdk.tools.javac.util.Dependencies:
    org.openjdk.tools.javac.util.Context$Key dependenciesKey -> dependenciesKey
    org.openjdk.tools.javac.util.Dependencies instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void push(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.Dependencies$CompletionCause) -> push
    void pop() -> pop
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Dependencies$1 -> org.openjdk.tools.javac.util.Dependencies$1:
org.openjdk.tools.javac.util.Dependencies$CompletionCause -> org.openjdk.tools.javac.util.Dependencies$CompletionCause:
    org.openjdk.tools.javac.util.Dependencies$CompletionCause CLASS_READER -> CLASS_READER
    org.openjdk.tools.javac.util.Dependencies$CompletionCause HEADER_PHASE -> HEADER_PHASE
    org.openjdk.tools.javac.util.Dependencies$CompletionCause HIERARCHY_PHASE -> HIERARCHY_PHASE
    org.openjdk.tools.javac.util.Dependencies$CompletionCause IMPORTS_PHASE -> IMPORTS_PHASE
    org.openjdk.tools.javac.util.Dependencies$CompletionCause MEMBER_ENTER -> MEMBER_ENTER
    org.openjdk.tools.javac.util.Dependencies$CompletionCause MEMBERS_PHASE -> MEMBERS_PHASE
    org.openjdk.tools.javac.util.Dependencies$CompletionCause OTHER -> OTHER
    org.openjdk.tools.javac.util.Dependencies$CompletionCause[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.Dependencies$CompletionCause[] values() -> values
    org.openjdk.tools.javac.util.Dependencies$CompletionCause valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Dependencies$DummyDependencies -> org.openjdk.tools.javac.util.Dependencies$DummyDependencies:
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void push(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.Dependencies$CompletionCause) -> push
    void pop() -> pop
    void <init>(org.openjdk.tools.javac.util.Context,org.openjdk.tools.javac.util.Dependencies$1) -> <init>
org.openjdk.tools.javac.util.Dependencies$GraphDependencies -> org.openjdk.tools.javac.util.Dependencies$GraphDependencies:
    java.util.EnumSet dependenciesModes -> dependenciesModes
    java.lang.String dependenciesFile -> dependenciesFile
    java.util.Stack nodeStack -> nodeStack
    java.util.Map dependencyNodeMap -> dependencyNodeMap
    void preRegister(org.openjdk.tools.javac.util.Context) -> preRegister
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void push(org.openjdk.tools.javac.code.Symbol$ClassSymbol,org.openjdk.tools.javac.util.Dependencies$CompletionCause) -> push
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node push(org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node,org.openjdk.tools.javac.util.Dependencies$CompletionCause) -> push
    void pop() -> pop
    void close() -> close
    void complete(org.openjdk.tools.javac.code.Symbol) -> complete
    boolean isTerminal() -> isTerminal
    java.util.Collection getNodes() -> getNodes
org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode -> org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode:
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind ck -> ck
    void <init>(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> <init>
    java.util.Properties nodeAttributes() -> nodeAttributes
    org.openjdk.tools.javac.code.Symbol$ClassSymbol getClassSymbol() -> getClassSymbol
org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind -> org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind:
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind SOURCE -> SOURCE
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind CLASS -> CLASS
    java.lang.String dotStyle -> dotStyle
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind[] values() -> values
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Dependencies$GraphDependencies$DependenciesMode -> org.openjdk.tools.javac.util.Dependencies$GraphDependencies$DependenciesMode:
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$DependenciesMode SOURCE -> SOURCE
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$DependenciesMode CLASS -> CLASS
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$DependenciesMode REDUNDANT -> REDUNDANT
    java.lang.String opt -> opt
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$DependenciesMode[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$DependenciesMode[] values() -> values
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$DependenciesMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.util.EnumSet getDependenciesModes(java.lang.String[]) -> getDependenciesModes
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Dependencies$GraphDependencies$FilterVisitor -> org.openjdk.tools.javac.util.Dependencies$GraphDependencies$FilterVisitor:
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind ck -> ck
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.Dependencies$GraphDependencies,org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind) -> <init>
    void visitNode(org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node,java.lang.Void) -> visitNode
    void visitDependency(org.openjdk.tools.javac.util.GraphUtils$DependencyKind,org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node,org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node,java.lang.Void) -> visitDependency
    void visitDependency(org.openjdk.tools.javac.util.GraphUtils$DependencyKind,org.openjdk.tools.javac.util.GraphUtils$Node,org.openjdk.tools.javac.util.GraphUtils$Node,java.lang.Object) -> visitDependency
    void visitNode(org.openjdk.tools.javac.util.GraphUtils$Node,java.lang.Object) -> visitNode
    void <init>(org.openjdk.tools.javac.util.Dependencies$GraphDependencies,org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode$Kind,org.openjdk.tools.javac.util.Dependencies$1) -> <init>
org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node -> org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node:
    java.util.EnumMap depsByKind -> depsByKind
    void <init>(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> <init>
    void addDependency(org.openjdk.tools.javac.util.GraphUtils$DependencyKind,org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node) -> addDependency
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.openjdk.tools.javac.util.GraphUtils$DependencyKind[] getSupportedDependencyKinds() -> getSupportedDependencyKinds
    java.util.Collection getDependenciesByKind(org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> getDependenciesByKind
    java.util.Properties nodeAttributes() -> nodeAttributes
    java.util.Properties dependencyAttributes(org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node,org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> dependencyAttributes
    java.lang.String toString() -> toString
    java.util.Properties dependencyAttributes(org.openjdk.tools.javac.util.GraphUtils$DottableNode,org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> dependencyAttributes
org.openjdk.tools.javac.util.Dependencies$GraphDependencies$PruneVisitor -> org.openjdk.tools.javac.util.Dependencies$GraphDependencies$PruneVisitor:
    void <init>() -> <init>
    void visitNode(org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node,java.lang.Void) -> visitNode
    void visitDependency(org.openjdk.tools.javac.util.GraphUtils$DependencyKind,org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node,org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node,java.lang.Void) -> visitDependency
    void visitDependency(org.openjdk.tools.javac.util.GraphUtils$DependencyKind,org.openjdk.tools.javac.util.GraphUtils$Node,org.openjdk.tools.javac.util.GraphUtils$Node,java.lang.Object) -> visitDependency
    void visitNode(org.openjdk.tools.javac.util.GraphUtils$Node,java.lang.Object) -> visitNode
    void <init>(org.openjdk.tools.javac.util.Dependencies$1) -> <init>
org.openjdk.tools.javac.util.DiagnosticSource -> org.openjdk.tools.javac.util.DiagnosticSource:
    org.openjdk.tools.javac.util.DiagnosticSource NO_SOURCE -> NO_SOURCE
    org.openjdk.javax.tools.JavaFileObject fileObject -> fileObject
    org.openjdk.tools.javac.tree.EndPosTable endPosTable -> endPosTable
    java.lang.ref.SoftReference refBuf -> refBuf
    char[] buf -> buf
    int bufLen -> bufLen
    int lineStart -> lineStart
    int line -> line
    org.openjdk.tools.javac.util.AbstractLog log -> log
    void <init>(org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.util.AbstractLog) -> <init>
    void <init>() -> <init>
    org.openjdk.javax.tools.JavaFileObject getFile() -> getFile
    int getLineNumber(int) -> getLineNumber
    int getColumnNumber(int,boolean) -> getColumnNumber
    java.lang.String getLine(int) -> getLine
    org.openjdk.tools.javac.tree.EndPosTable getEndPosTable() -> getEndPosTable
    void setEndPosTable(org.openjdk.tools.javac.tree.EndPosTable) -> setEndPosTable
    boolean findLine(int) -> findLine
    char[] initBuf(org.openjdk.javax.tools.JavaFileObject) -> initBuf
    void <init>(org.openjdk.tools.javac.util.DiagnosticSource$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.DiagnosticSource$1 -> org.openjdk.tools.javac.util.DiagnosticSource$1:
    void <init>() -> <init>
    boolean findLine(int) -> findLine
org.openjdk.tools.javac.util.FatalError -> org.openjdk.tools.javac.util.FatalError:
    long serialVersionUID -> serialVersionUID
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic) -> <init>
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic,java.lang.Throwable) -> <init>
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.javac.util.Filter -> org.openjdk.tools.javac.util.Filter:
    boolean accepts(java.lang.Object) -> accepts
org.openjdk.tools.javac.util.ForwardingDiagnosticFormatter -> org.openjdk.tools.javac.util.ForwardingDiagnosticFormatter:
    org.openjdk.tools.javac.api.DiagnosticFormatter formatter -> formatter
    org.openjdk.tools.javac.util.ForwardingDiagnosticFormatter$ForwardingConfiguration configuration -> configuration
    void <init>(org.openjdk.tools.javac.api.DiagnosticFormatter) -> <init>
    org.openjdk.tools.javac.api.DiagnosticFormatter getDelegatedFormatter() -> getDelegatedFormatter
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration getConfiguration() -> getConfiguration
    boolean displaySource(org.openjdk.javax.tools.Diagnostic) -> displaySource
    java.lang.String format(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> format
    java.lang.String formatKind(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> formatKind
    java.lang.String formatMessage(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> formatMessage
    java.lang.String formatPosition(org.openjdk.javax.tools.Diagnostic,org.openjdk.tools.javac.api.DiagnosticFormatter$PositionKind,java.util.Locale) -> formatPosition
    java.lang.String formatSource(org.openjdk.javax.tools.Diagnostic,boolean,java.util.Locale) -> formatSource
org.openjdk.tools.javac.util.ForwardingDiagnosticFormatter$ForwardingConfiguration -> org.openjdk.tools.javac.util.ForwardingDiagnosticFormatter$ForwardingConfiguration:
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration configuration -> configuration
    void <init>(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration) -> <init>
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration getDelegatedConfiguration() -> getDelegatedConfiguration
    int getMultilineLimit(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit) -> getMultilineLimit
    java.util.Set getVisible() -> getVisible
    void setMultilineLimit(org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration$MultilineLimit,int) -> setMultilineLimit
    void setVisible(java.util.Set) -> setVisible
org.openjdk.tools.javac.util.GraphUtils -> org.openjdk.tools.javac.util.GraphUtils:
    void <init>() -> <init>
    org.openjdk.tools.javac.util.List tarjan(java.lang.Iterable) -> tarjan
    java.lang.String toDot(java.util.Collection,java.lang.String,java.lang.String) -> toDot
org.openjdk.tools.javac.util.GraphUtils$1 -> org.openjdk.tools.javac.util.GraphUtils$1:
org.openjdk.tools.javac.util.GraphUtils$AbstractNode -> org.openjdk.tools.javac.util.GraphUtils$AbstractNode:
    java.lang.Object data -> data
    void <init>(java.lang.Object) -> <init>
    org.openjdk.tools.javac.util.GraphUtils$DependencyKind[] getSupportedDependencyKinds() -> getSupportedDependencyKinds
    java.util.Collection getDependenciesByKind(org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> getDependenciesByKind
    java.lang.String toString() -> toString
    void accept(org.openjdk.tools.javac.util.GraphUtils$NodeVisitor,java.lang.Object) -> accept
org.openjdk.tools.javac.util.GraphUtils$DependencyKind -> org.openjdk.tools.javac.util.GraphUtils$DependencyKind:
org.openjdk.tools.javac.util.GraphUtils$DotVisitor -> org.openjdk.tools.javac.util.GraphUtils$DotVisitor:
    void <init>() -> <init>
    void visitDependency(org.openjdk.tools.javac.util.GraphUtils$DependencyKind,org.openjdk.tools.javac.util.GraphUtils$DottableNode,org.openjdk.tools.javac.util.GraphUtils$DottableNode,java.lang.StringBuilder) -> visitDependency
    void visitNode(org.openjdk.tools.javac.util.GraphUtils$DottableNode,java.lang.StringBuilder) -> visitNode
    java.lang.String formatProperties(java.util.Properties) -> formatProperties
    java.lang.String wrap(java.lang.String) -> wrap
    void visitDependency(org.openjdk.tools.javac.util.GraphUtils$DependencyKind,org.openjdk.tools.javac.util.GraphUtils$Node,org.openjdk.tools.javac.util.GraphUtils$Node,java.lang.Object) -> visitDependency
    void visitNode(org.openjdk.tools.javac.util.GraphUtils$Node,java.lang.Object) -> visitNode
org.openjdk.tools.javac.util.GraphUtils$DottableNode -> org.openjdk.tools.javac.util.GraphUtils$DottableNode:
    java.util.Properties nodeAttributes() -> nodeAttributes
    java.util.Properties dependencyAttributes(org.openjdk.tools.javac.util.GraphUtils$DottableNode,org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> dependencyAttributes
org.openjdk.tools.javac.util.GraphUtils$Node -> org.openjdk.tools.javac.util.GraphUtils$Node:
    void accept(org.openjdk.tools.javac.util.GraphUtils$NodeVisitor,java.lang.Object) -> accept
org.openjdk.tools.javac.util.GraphUtils$NodeVisitor -> org.openjdk.tools.javac.util.GraphUtils$NodeVisitor:
    void <init>() -> <init>
    void visitNode(org.openjdk.tools.javac.util.GraphUtils$Node,java.lang.Object) -> visitNode
    void visitDependency(org.openjdk.tools.javac.util.GraphUtils$DependencyKind,org.openjdk.tools.javac.util.GraphUtils$Node,org.openjdk.tools.javac.util.GraphUtils$Node,java.lang.Object) -> visitDependency
    void visit(java.util.Collection,java.lang.Object) -> visit
org.openjdk.tools.javac.util.GraphUtils$Tarjan -> org.openjdk.tools.javac.util.GraphUtils$Tarjan:
    int index -> index
    org.openjdk.tools.javac.util.ListBuffer sccs -> sccs
    org.openjdk.tools.javac.util.ListBuffer stack -> stack
    void <init>() -> <init>
    org.openjdk.tools.javac.util.List findSCC(java.lang.Iterable) -> findSCC
    void findSCC(org.openjdk.tools.javac.util.GraphUtils$TarjanNode) -> findSCC
    void visitNode(org.openjdk.tools.javac.util.GraphUtils$TarjanNode) -> visitNode
    void addSCC(org.openjdk.tools.javac.util.GraphUtils$TarjanNode) -> addSCC
    void <init>(org.openjdk.tools.javac.util.GraphUtils$1) -> <init>
    org.openjdk.tools.javac.util.List access$100(org.openjdk.tools.javac.util.GraphUtils$Tarjan,java.lang.Iterable) -> access$100
org.openjdk.tools.javac.util.GraphUtils$TarjanNode -> org.openjdk.tools.javac.util.GraphUtils$TarjanNode:
    int index -> index
    int lowlink -> lowlink
    boolean active -> active
    void <init>(java.lang.Object) -> <init>
    java.lang.Iterable getAllDependencies() -> getAllDependencies
    int compareTo(org.openjdk.tools.javac.util.GraphUtils$TarjanNode) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.openjdk.tools.javac.util.IntHashTable -> org.openjdk.tools.javac.util.IntHashTable:
    int DEFAULT_INITIAL_SIZE -> DEFAULT_INITIAL_SIZE
    java.lang.Object[] objs -> objs
    int[] ints -> ints
    int mask -> mask
    int num_bindings -> num_bindings
    java.lang.Object DELETED -> DELETED
    void <init>() -> <init>
    void <init>(int) -> <init>
    int hash(java.lang.Object) -> hash
    int lookup(java.lang.Object,int) -> lookup
    int lookup(java.lang.Object) -> lookup
    int getFromIndex(int) -> getFromIndex
    int putAtIndex(java.lang.Object,int,int) -> putAtIndex
    int remove(java.lang.Object) -> remove
    void rehash() -> rehash
    void clear() -> clear
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Iterators -> org.openjdk.tools.javac.util.Iterators:
    java.util.Iterator EMPTY -> EMPTY
    void <init>() -> <init>
    java.util.Iterator createCompoundIterator(java.lang.Iterable,java.util.function.Function) -> createCompoundIterator
    java.util.Iterator createFilterIterator(java.util.Iterator,java.util.function.Predicate) -> createFilterIterator
    java.util.Iterator access$000() -> access$000
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Iterators$1 -> org.openjdk.tools.javac.util.Iterators$1:
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
org.openjdk.tools.javac.util.Iterators$2 -> org.openjdk.tools.javac.util.Iterators$2:
    java.lang.Object current -> current
    java.util.Iterator val$input -> val$input
    java.util.function.Predicate val$test -> val$test
    void <init>(java.util.Iterator,java.util.function.Predicate) -> <init>
    java.lang.Object update() -> update
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
org.openjdk.tools.javac.util.Iterators$CompoundIterator -> org.openjdk.tools.javac.util.Iterators$CompoundIterator:
    java.util.Iterator inputs -> inputs
    java.util.function.Function convertor -> convertor
    java.util.Iterator currentIterator -> currentIterator
    void <init>(java.lang.Iterable,java.util.function.Function) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    void update() -> update
org.openjdk.tools.javac.util.JCDiagnostic -> org.openjdk.tools.javac.util.JCDiagnostic:
    org.openjdk.tools.javac.util.DiagnosticSource source -> source
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition position -> position
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo diagnosticInfo -> diagnosticInfo
    java.util.Set flags -> flags
    org.openjdk.tools.javac.code.Lint$LintCategory lintCategory -> lintCategory
    org.openjdk.tools.javac.util.JCDiagnostic$SourcePosition sourcePosition -> sourcePosition
    org.openjdk.tools.javac.api.DiagnosticFormatter defaultFormatter -> defaultFormatter
    org.openjdk.tools.javac.api.DiagnosticFormatter fragmentFormatter -> fragmentFormatter
    org.openjdk.tools.javac.util.JCDiagnostic fragment(java.lang.String,java.lang.Object[]) -> fragment
    org.openjdk.tools.javac.api.DiagnosticFormatter getFragmentFormatter() -> getFragmentFormatter
    void <init>(org.openjdk.tools.javac.api.DiagnosticFormatter,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo,org.openjdk.tools.javac.code.Lint$LintCategory,java.util.Set,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType getType() -> getType
    org.openjdk.tools.javac.util.List getSubdiagnostics() -> getSubdiagnostics
    boolean isMultiline() -> isMultiline
    boolean isMandatory() -> isMandatory
    boolean hasLintCategory() -> hasLintCategory
    org.openjdk.tools.javac.code.Lint$LintCategory getLintCategory() -> getLintCategory
    org.openjdk.javax.tools.JavaFileObject getSource() -> getSource
    org.openjdk.tools.javac.util.DiagnosticSource getDiagnosticSource() -> getDiagnosticSource
    int getIntStartPosition() -> getIntStartPosition
    int getIntPosition() -> getIntPosition
    int getIntEndPosition() -> getIntEndPosition
    long getStartPosition() -> getStartPosition
    long getPosition() -> getPosition
    long getEndPosition() -> getEndPosition
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition getDiagnosticPosition() -> getDiagnosticPosition
    long getLineNumber() -> getLineNumber
    long getColumnNumber() -> getColumnNumber
    java.lang.Object[] getArgs() -> getArgs
    java.lang.String getPrefix() -> getPrefix
    java.lang.String getPrefix(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType) -> getPrefix
    java.lang.String toString() -> toString
    org.openjdk.javax.tools.Diagnostic$Kind getKind() -> getKind
    java.lang.String getCode() -> getCode
    java.lang.String getMessage(java.util.Locale) -> getMessage
    void setFlag(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag) -> setFlag
    boolean isFlagSet(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag) -> isFlagSet
    java.lang.Object getSource() -> getSource
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition access$000(org.openjdk.tools.javac.util.JCDiagnostic) -> access$000
    org.openjdk.tools.javac.util.DiagnosticSource access$100(org.openjdk.tools.javac.util.JCDiagnostic) -> access$100
    org.openjdk.tools.javac.api.DiagnosticFormatter access$300(org.openjdk.tools.javac.util.JCDiagnostic) -> access$300
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo access$400(org.openjdk.tools.javac.util.JCDiagnostic) -> access$400
    java.util.Set access$500(org.openjdk.tools.javac.util.JCDiagnostic) -> access$500
org.openjdk.tools.javac.util.JCDiagnostic$1 -> org.openjdk.tools.javac.util.JCDiagnostic$1:
    int[] $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType -> $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType
    int[] $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticFlag -> $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticFlag
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag -> org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag:
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag MANDATORY -> MANDATORY
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag RESOLVE_ERROR -> RESOLVE_ERROR
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag SYNTAX -> SYNTAX
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag RECOVERABLE -> RECOVERABLE
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag NON_DEFERRABLE -> NON_DEFERRABLE
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag COMPRESSED -> COMPRESSED
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag MULTIPLE -> MULTIPLE
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag SOURCE_LEVEL -> SOURCE_LEVEL
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag[] values() -> values
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo -> org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo:
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType type -> type
    java.lang.String prefix -> prefix
    java.lang.String code -> code
    java.lang.Object[] args -> args
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
    java.lang.String key() -> key
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo of(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,java.lang.String,java.lang.String,java.lang.Object[]) -> of
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,java.lang.String,java.lang.String,java.lang.Object[],org.openjdk.tools.javac.util.JCDiagnostic$1) -> <init>
org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition -> org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition:
    org.openjdk.tools.javac.tree.JCTree getTree() -> getTree
    int getStartPosition() -> getStartPosition
    int getPreferredPosition() -> getPreferredPosition
    int getEndPosition(org.openjdk.tools.javac.tree.EndPosTable) -> getEndPosition
org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType -> org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType:
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType FRAGMENT -> FRAGMENT
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType NOTE -> NOTE
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType WARNING -> WARNING
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType ERROR -> ERROR
    java.lang.String key -> key
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType[] values() -> values
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JCDiagnostic$Error -> org.openjdk.tools.javac.util.JCDiagnostic$Error:
    void <init>(java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
org.openjdk.tools.javac.util.JCDiagnostic$Factory -> org.openjdk.tools.javac.util.JCDiagnostic$Factory:
    org.openjdk.tools.javac.util.Context$Key diagnosticFactoryKey -> diagnosticFactoryKey
    org.openjdk.tools.javac.api.DiagnosticFormatter formatter -> formatter
    java.lang.String prefix -> prefix
    java.util.Set defaultErrorFlags -> defaultErrorFlags
    org.openjdk.tools.javac.util.JCDiagnostic$Factory instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void initOptions(org.openjdk.tools.javac.util.Options) -> initOptions
    void <init>(org.openjdk.tools.javac.util.JavacMessages,java.lang.String) -> <init>
    org.openjdk.tools.javac.util.JCDiagnostic error(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> error
    org.openjdk.tools.javac.util.JCDiagnostic error(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticFlag,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Error) -> error
    org.openjdk.tools.javac.util.JCDiagnostic mandatoryWarning(org.openjdk.tools.javac.code.Lint$LintCategory,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> mandatoryWarning
    org.openjdk.tools.javac.util.JCDiagnostic mandatoryWarning(org.openjdk.tools.javac.code.Lint$LintCategory,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Warning) -> mandatoryWarning
    org.openjdk.tools.javac.util.JCDiagnostic warning(org.openjdk.tools.javac.code.Lint$LintCategory,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> warning
    org.openjdk.tools.javac.util.JCDiagnostic warning(org.openjdk.tools.javac.code.Lint$LintCategory,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Warning) -> warning
    org.openjdk.tools.javac.util.JCDiagnostic mandatoryNote(org.openjdk.tools.javac.util.DiagnosticSource,java.lang.String,java.lang.Object[]) -> mandatoryNote
    org.openjdk.tools.javac.util.JCDiagnostic mandatoryNote(org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$Note) -> mandatoryNote
    org.openjdk.tools.javac.util.JCDiagnostic note(org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> note
    org.openjdk.tools.javac.util.JCDiagnostic note(org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$Note) -> note
    org.openjdk.tools.javac.util.JCDiagnostic fragment(java.lang.String,java.lang.Object[]) -> fragment
    org.openjdk.tools.javac.util.JCDiagnostic fragment(org.openjdk.tools.javac.util.JCDiagnostic$Fragment) -> fragment
    org.openjdk.tools.javac.util.JCDiagnostic create(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> create
    org.openjdk.tools.javac.util.JCDiagnostic create(org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo) -> create
    org.openjdk.tools.javac.util.JCDiagnostic create(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType,org.openjdk.tools.javac.code.Lint$LintCategory,java.util.Set,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> create
    org.openjdk.tools.javac.util.JCDiagnostic create(org.openjdk.tools.javac.code.Lint$LintCategory,java.util.Set,org.openjdk.tools.javac.util.DiagnosticSource,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo) -> create
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo normalize(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo) -> normalize
    org.openjdk.tools.javac.util.JCDiagnostic$Error errorKey(java.lang.String,java.lang.Object[]) -> errorKey
    org.openjdk.tools.javac.util.JCDiagnostic$Warning warningKey(java.lang.String,java.lang.Object[]) -> warningKey
    org.openjdk.tools.javac.util.JCDiagnostic$Note noteKey(java.lang.String,java.lang.Object[]) -> noteKey
    org.openjdk.tools.javac.util.JCDiagnostic$Fragment fragmentKey(java.lang.String,java.lang.Object[]) -> fragmentKey
    java.lang.Object lambda$normalize$1(java.lang.Object) -> lambda$normalize$1
    void lambda$new$0(org.openjdk.tools.javac.util.Options) -> lambda$new$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JCDiagnostic$Fragment -> org.openjdk.tools.javac.util.JCDiagnostic$Fragment:
    void <init>(java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
org.openjdk.tools.javac.util.JCDiagnostic$MultilineDiagnostic -> org.openjdk.tools.javac.util.JCDiagnostic$MultilineDiagnostic:
    org.openjdk.tools.javac.util.List subdiagnostics -> subdiagnostics
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.util.List getSubdiagnostics() -> getSubdiagnostics
    boolean isMultiline() -> isMultiline
    java.lang.Object getSource() -> getSource
org.openjdk.tools.javac.util.JCDiagnostic$Note -> org.openjdk.tools.javac.util.JCDiagnostic$Note:
    void <init>(java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
org.openjdk.tools.javac.util.JCDiagnostic$SimpleDiagnosticPosition -> org.openjdk.tools.javac.util.JCDiagnostic$SimpleDiagnosticPosition:
    int pos -> pos
    void <init>(int) -> <init>
    org.openjdk.tools.javac.tree.JCTree getTree() -> getTree
    int getStartPosition() -> getStartPosition
    int getPreferredPosition() -> getPreferredPosition
    int getEndPosition(org.openjdk.tools.javac.tree.EndPosTable) -> getEndPosition
org.openjdk.tools.javac.util.JCDiagnostic$SourcePosition -> org.openjdk.tools.javac.util.JCDiagnostic$SourcePosition:
    int line -> line
    int column -> column
    org.openjdk.tools.javac.util.JCDiagnostic this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic) -> <init>
    int getLineNumber() -> getLineNumber
    int getColumnNumber() -> getColumnNumber
org.openjdk.tools.javac.util.JCDiagnostic$Warning -> org.openjdk.tools.javac.util.JCDiagnostic$Warning:
    void <init>(java.lang.String,java.lang.String,java.lang.Object[]) -> <init>
org.openjdk.tools.javac.util.JDK9Wrappers -> org.openjdk.tools.javac.util.JDK9Wrappers:
    void <init>() -> <init>
org.openjdk.tools.javac.util.JDK9Wrappers$1 -> org.openjdk.tools.javac.util.JDK9Wrappers$1:
org.openjdk.tools.javac.util.JDK9Wrappers$Configuration -> org.openjdk.tools.javac.util.JDK9Wrappers$Configuration:
    java.lang.Object theRealConfiguration -> theRealConfiguration
    java.lang.Class configurationClass -> configurationClass
    java.lang.reflect.Method resolveAndBindMethod -> resolveAndBindMethod
    void <init>(java.lang.Object) -> <init>
    org.openjdk.tools.javac.util.JDK9Wrappers$Configuration resolveAndBind(org.openjdk.tools.javac.util.JDK9Wrappers$ModuleFinder,org.openjdk.tools.javac.util.JDK9Wrappers$ModuleFinder,java.util.Collection) -> resolveAndBind
    java.lang.Class getConfigurationClass() -> getConfigurationClass
    void init() -> init
    void <init>(java.lang.Object,org.openjdk.tools.javac.util.JDK9Wrappers$1) -> <init>
    java.lang.Object access$400(org.openjdk.tools.javac.util.JDK9Wrappers$Configuration) -> access$400
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JDK9Wrappers$JmodFile -> org.openjdk.tools.javac.util.JDK9Wrappers$JmodFile:
    java.lang.String JMOD_FILE_CLASSNAME -> JMOD_FILE_CLASSNAME
    java.lang.Class jmodFileClass -> jmodFileClass
    java.lang.reflect.Method checkMagicMethod -> checkMagicMethod
    void <init>() -> <init>
    void checkMagic(java.nio.file.Path) -> checkMagic
    void init() -> init
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JDK9Wrappers$Layer -> org.openjdk.tools.javac.util.JDK9Wrappers$Layer:
    java.lang.Object theRealLayer -> theRealLayer
    java.lang.Class layerClass -> layerClass
    java.lang.reflect.Method bootMethod -> bootMethod
    java.lang.reflect.Method defineModulesWithOneLoaderMethod -> defineModulesWithOneLoaderMethod
    java.lang.reflect.Method configurationMethod -> configurationMethod
    void <init>(java.lang.Object) -> <init>
    org.openjdk.tools.javac.util.JDK9Wrappers$Layer boot() -> boot
    org.openjdk.tools.javac.util.JDK9Wrappers$Configuration configuration() -> configuration
    org.openjdk.tools.javac.util.JDK9Wrappers$Layer defineModulesWithOneLoader(org.openjdk.tools.javac.util.JDK9Wrappers$Configuration,java.lang.ClassLoader) -> defineModulesWithOneLoader
    void init() -> init
    java.lang.Object access$000(org.openjdk.tools.javac.util.JDK9Wrappers$Layer) -> access$000
    java.lang.Class access$100() -> access$100
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JDK9Wrappers$Module -> org.openjdk.tools.javac.util.JDK9Wrappers$Module:
    java.lang.Object theRealModule -> theRealModule
    java.lang.reflect.Method addExportsMethod -> addExportsMethod
    java.lang.reflect.Method addUsesMethod -> addUsesMethod
    java.lang.reflect.Method getModuleMethod -> getModuleMethod
    java.lang.reflect.Method getUnnamedModuleMethod -> getUnnamedModuleMethod
    void <init>(java.lang.Object) -> <init>
    org.openjdk.tools.javac.util.JDK9Wrappers$Module getModule(java.lang.Class) -> getModule
    org.openjdk.tools.javac.util.JDK9Wrappers$Module getUnnamedModule(java.lang.ClassLoader) -> getUnnamedModule
    org.openjdk.tools.javac.util.JDK9Wrappers$Module addExports(java.lang.String,org.openjdk.tools.javac.util.JDK9Wrappers$Module) -> addExports
    org.openjdk.tools.javac.util.JDK9Wrappers$Module addUses(java.lang.Class) -> addUses
    void init() -> init
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JDK9Wrappers$ModuleDescriptor -> org.openjdk.tools.javac.util.JDK9Wrappers$ModuleDescriptor:
    void <init>() -> <init>
org.openjdk.tools.javac.util.JDK9Wrappers$ModuleDescriptor$Version -> org.openjdk.tools.javac.util.JDK9Wrappers$ModuleDescriptor$Version:
    java.lang.String CLASSNAME -> CLASSNAME
    java.lang.Object theRealVersion -> theRealVersion
    java.lang.Class versionClass -> versionClass
    java.lang.reflect.Method parseMethod -> parseMethod
    void <init>(java.lang.Object) -> <init>
    org.openjdk.tools.javac.util.JDK9Wrappers$ModuleDescriptor$Version parse(java.lang.String) -> parse
    java.lang.String toString() -> toString
    void init() -> init
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JDK9Wrappers$ModuleFinder -> org.openjdk.tools.javac.util.JDK9Wrappers$ModuleFinder:
    java.lang.Object theRealModuleFinder -> theRealModuleFinder
    java.lang.Class moduleFinderClass -> moduleFinderClass
    java.lang.reflect.Method ofMethod -> ofMethod
    void <init>(java.lang.Object) -> <init>
    org.openjdk.tools.javac.util.JDK9Wrappers$ModuleFinder of(java.nio.file.Path[]) -> of
    java.lang.Class getModuleFinderClass() -> getModuleFinderClass
    void init() -> init
    java.lang.Object access$200(org.openjdk.tools.javac.util.JDK9Wrappers$ModuleFinder) -> access$200
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JDK9Wrappers$ServiceLoaderHelper -> org.openjdk.tools.javac.util.JDK9Wrappers$ServiceLoaderHelper:
    java.lang.reflect.Method loadMethod -> loadMethod
    void <init>() -> <init>
    java.util.ServiceLoader load(org.openjdk.tools.javac.util.JDK9Wrappers$Layer,java.lang.Class) -> load
    void init() -> init
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JDK9Wrappers$VMHelper -> org.openjdk.tools.javac.util.JDK9Wrappers$VMHelper:
    java.lang.String CLASSNAME -> CLASSNAME
    java.lang.Class vmClass -> vmClass
    java.lang.reflect.Method getRuntimeArgumentsMethod -> getRuntimeArgumentsMethod
    void <init>() -> <init>
    java.lang.String[] getRuntimeArguments() -> getRuntimeArguments
    void init() -> init
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JavacMessages -> org.openjdk.tools.javac.util.JavacMessages:
    org.openjdk.tools.javac.util.Context$Key messagesKey -> messagesKey
    java.util.Map bundleCache -> bundleCache
    org.openjdk.tools.javac.util.List bundleHelpers -> bundleHelpers
    java.util.Locale currentLocale -> currentLocale
    org.openjdk.tools.javac.util.List currentBundles -> currentBundles
    java.lang.String defaultBundleName -> defaultBundleName
    java.util.ResourceBundle defaultBundle -> defaultBundle
    org.openjdk.tools.javac.util.JavacMessages defaultMessages -> defaultMessages
    org.openjdk.tools.javac.util.JavacMessages instance(org.openjdk.tools.javac.util.Context) -> instance
    java.util.Locale getCurrentLocale() -> getCurrentLocale
    void setCurrentLocale(java.util.Locale) -> setCurrentLocale
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.util.Locale) -> <init>
    void <init>() -> <init>
    void add(java.lang.String) -> add
    void add(org.openjdk.tools.javac.util.JavacMessages$ResourceBundleHelper) -> add
    org.openjdk.tools.javac.util.List getBundles(java.util.Locale) -> getBundles
    java.lang.String getLocalizedString(java.lang.String,java.lang.Object[]) -> getLocalizedString
    java.lang.String getLocalizedString(java.util.Locale,java.lang.String,java.lang.Object[]) -> getLocalizedString
    java.lang.String getDefaultLocalizedString(java.lang.String,java.lang.Object[]) -> getDefaultLocalizedString
    org.openjdk.tools.javac.util.JavacMessages getDefaultMessages() -> getDefaultMessages
    java.util.ResourceBundle getDefaultBundle() -> getDefaultBundle
    java.lang.String getLocalizedString(org.openjdk.tools.javac.util.List,java.lang.String,java.lang.Object[]) -> getLocalizedString
    java.util.ResourceBundle lambda$add$0(java.lang.String,java.util.Locale) -> lambda$add$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.JavacMessages$ResourceBundleHelper -> org.openjdk.tools.javac.util.JavacMessages$ResourceBundleHelper:
    java.util.ResourceBundle getResourceBundle(java.util.Locale) -> getResourceBundle
org.openjdk.tools.javac.util.LayoutCharacters -> org.openjdk.tools.javac.util.LayoutCharacters:
    int TabInc -> TabInc
    int DiagInc -> DiagInc
    int DetailsInc -> DetailsInc
    byte TAB -> TAB
    byte LF -> LF
    byte FF -> FF
    byte CR -> CR
    byte EOI -> EOI
org.openjdk.tools.javac.util.List -> org.openjdk.tools.javac.util.List:
    java.lang.Object head -> head
    org.openjdk.tools.javac.util.List tail -> tail
    org.openjdk.tools.javac.util.List EMPTY_LIST -> EMPTY_LIST
    java.util.Iterator EMPTYITERATOR -> EMPTYITERATOR
    void <init>(java.lang.Object,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.util.List nil() -> nil
    org.openjdk.tools.javac.util.List filter(org.openjdk.tools.javac.util.List,java.lang.Object) -> filter
    org.openjdk.tools.javac.util.List intersect(org.openjdk.tools.javac.util.List) -> intersect
    org.openjdk.tools.javac.util.List diff(org.openjdk.tools.javac.util.List) -> diff
    org.openjdk.tools.javac.util.List take(int) -> take
    org.openjdk.tools.javac.util.List of(java.lang.Object) -> of
    org.openjdk.tools.javac.util.List of(java.lang.Object,java.lang.Object) -> of
    org.openjdk.tools.javac.util.List of(java.lang.Object,java.lang.Object,java.lang.Object) -> of
    org.openjdk.tools.javac.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[]) -> of
    org.openjdk.tools.javac.util.List from(java.lang.Object[]) -> from
    org.openjdk.tools.javac.util.List from(java.lang.Iterable) -> from
    org.openjdk.tools.javac.util.List fill(int,java.lang.Object) -> fill
    boolean isEmpty() -> isEmpty
    boolean nonEmpty() -> nonEmpty
    int length() -> length
    int size() -> size
    org.openjdk.tools.javac.util.List setTail(org.openjdk.tools.javac.util.List) -> setTail
    org.openjdk.tools.javac.util.List prepend(java.lang.Object) -> prepend
    org.openjdk.tools.javac.util.List prependList(org.openjdk.tools.javac.util.List) -> prependList
    org.openjdk.tools.javac.util.List reverse() -> reverse
    org.openjdk.tools.javac.util.List append(java.lang.Object) -> append
    org.openjdk.tools.javac.util.List appendList(org.openjdk.tools.javac.util.List) -> appendList
    org.openjdk.tools.javac.util.List appendList(org.openjdk.tools.javac.util.ListBuffer) -> appendList
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object[] toArray() -> toArray
    java.lang.String toString(java.lang.String) -> toString
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean equals(org.openjdk.tools.javac.util.List,org.openjdk.tools.javac.util.List) -> equals
    boolean contains(java.lang.Object) -> contains
    java.lang.Object last() -> last
    org.openjdk.tools.javac.util.List map(java.util.function.Function) -> map
    org.openjdk.tools.javac.util.List convert(java.lang.Class,org.openjdk.tools.javac.util.List) -> convert
    java.util.Iterator emptyIterator() -> emptyIterator
    java.util.Iterator iterator() -> iterator
    java.lang.Object get(int) -> get
    boolean addAll(int,java.util.Collection) -> addAll
    java.lang.Object set(int,java.lang.Object) -> set
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.List subList(int,int) -> subList
    java.util.stream.Collector collector() -> collector
    org.openjdk.tools.javac.util.ListBuffer lambda$collector$0(org.openjdk.tools.javac.util.ListBuffer,org.openjdk.tools.javac.util.ListBuffer) -> lambda$collector$0
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.List$1 -> org.openjdk.tools.javac.util.List$1:
    void <init>(java.lang.Object,org.openjdk.tools.javac.util.List) -> <init>
    org.openjdk.tools.javac.util.List setTail(org.openjdk.tools.javac.util.List) -> setTail
    boolean isEmpty() -> isEmpty
org.openjdk.tools.javac.util.List$2 -> org.openjdk.tools.javac.util.List$2:
    void <init>() -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.openjdk.tools.javac.util.List$3 -> org.openjdk.tools.javac.util.List$3:
    org.openjdk.tools.javac.util.List elems -> elems
    org.openjdk.tools.javac.util.List this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.List) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.openjdk.tools.javac.util.ListBuffer -> org.openjdk.tools.javac.util.ListBuffer:
    org.openjdk.tools.javac.util.List elems -> elems
    org.openjdk.tools.javac.util.List last -> last
    int count -> count
    boolean shared -> shared
    org.openjdk.tools.javac.util.ListBuffer of(java.lang.Object) -> of
    void <init>() -> <init>
    void clear() -> clear
    int length() -> length
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean nonEmpty() -> nonEmpty
    void copy() -> copy
    org.openjdk.tools.javac.util.ListBuffer prepend(java.lang.Object) -> prepend
    org.openjdk.tools.javac.util.ListBuffer append(java.lang.Object) -> append
    org.openjdk.tools.javac.util.ListBuffer appendList(org.openjdk.tools.javac.util.List) -> appendList
    org.openjdk.tools.javac.util.ListBuffer appendList(org.openjdk.tools.javac.util.ListBuffer) -> appendList
    org.openjdk.tools.javac.util.ListBuffer appendArray(java.lang.Object[]) -> appendArray
    org.openjdk.tools.javac.util.List toList() -> toList
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object[] toArray() -> toArray
    java.lang.Object first() -> first
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean offer(java.lang.Object) -> offer
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    java.lang.Object last() -> last
    org.openjdk.tools.javac.util.List access$000(org.openjdk.tools.javac.util.ListBuffer) -> access$000
org.openjdk.tools.javac.util.ListBuffer$1 -> org.openjdk.tools.javac.util.ListBuffer$1:
    org.openjdk.tools.javac.util.List elems -> elems
    org.openjdk.tools.javac.util.ListBuffer this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.ListBuffer) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.openjdk.tools.javac.util.Log -> org.openjdk.tools.javac.util.Log:
    org.openjdk.tools.javac.util.Context$Key logKey -> logKey
    org.openjdk.tools.javac.util.Context$Key outKey -> outKey
    org.openjdk.tools.javac.util.Context$Key errKey -> errKey
    java.util.Map writers -> writers
    int MaxErrors -> MaxErrors
    int MaxWarnings -> MaxWarnings
    boolean promptOnError -> promptOnError
    boolean emitWarnings -> emitWarnings
    boolean suppressNotes -> suppressNotes
    boolean dumpOnError -> dumpOnError
    org.openjdk.javax.tools.DiagnosticListener diagListener -> diagListener
    org.openjdk.tools.javac.api.DiagnosticFormatter diagFormatter -> diagFormatter
    java.util.Set expectDiagKeys -> expectDiagKeys
    boolean compressedOutput -> compressedOutput
    org.openjdk.tools.javac.util.JavacMessages messages -> messages
    org.openjdk.tools.javac.util.Log$DiagnosticHandler diagnosticHandler -> diagnosticHandler
    int nerrors -> nerrors
    int nwarnings -> nwarnings
    java.util.Set recorded -> recorded
    java.util.Set recordedSourceLevelErrors -> recordedSourceLevelErrors
    boolean useRawMessages -> useRawMessages
    org.openjdk.tools.javac.util.Log instance(org.openjdk.tools.javac.util.Context) -> instance
    void preRegister(org.openjdk.tools.javac.util.Context,java.io.PrintWriter) -> preRegister
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.util.Map initWriters(org.openjdk.tools.javac.util.Context) -> initWriters
    void <init>(org.openjdk.tools.javac.util.Context,java.io.PrintWriter) -> <init>
    void <init>(org.openjdk.tools.javac.util.Context,java.io.PrintWriter,java.io.PrintWriter) -> <init>
    java.util.Map initWriters(java.io.PrintWriter,java.io.PrintWriter) -> initWriters
    void <init>(org.openjdk.tools.javac.util.Context,java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter) -> <init>
    java.util.Map initWriters(java.io.PrintWriter,java.io.PrintWriter,java.io.PrintWriter) -> initWriters
    void <init>(org.openjdk.tools.javac.util.Context,java.util.Map) -> <init>
    void initOptions(org.openjdk.tools.javac.util.Options) -> initOptions
    int getIntOption(org.openjdk.tools.javac.util.Options,org.openjdk.tools.javac.main.Option,int) -> getIntOption
    int getDefaultMaxErrors() -> getDefaultMaxErrors
    int getDefaultMaxWarnings() -> getDefaultMaxWarnings
    boolean hasDiagnosticListener() -> hasDiagnosticListener
    void setEndPosTable(org.openjdk.javax.tools.JavaFileObject,org.openjdk.tools.javac.tree.EndPosTable) -> setEndPosTable
    org.openjdk.javax.tools.JavaFileObject currentSourceFile() -> currentSourceFile
    org.openjdk.tools.javac.api.DiagnosticFormatter getDiagnosticFormatter() -> getDiagnosticFormatter
    void setDiagnosticFormatter(org.openjdk.tools.javac.api.DiagnosticFormatter) -> setDiagnosticFormatter
    java.io.PrintWriter getWriter(org.openjdk.tools.javac.util.Log$WriterKind) -> getWriter
    void setWriter(org.openjdk.tools.javac.util.Log$WriterKind,java.io.PrintWriter) -> setWriter
    void setWriters(java.io.PrintWriter) -> setWriters
    void popDiagnosticHandler(org.openjdk.tools.javac.util.Log$DiagnosticHandler) -> popDiagnosticHandler
    void flush() -> flush
    void flush(org.openjdk.tools.javac.util.Log$WriterKind) -> flush
    boolean shouldReport(org.openjdk.javax.tools.JavaFileObject,int) -> shouldReport
    boolean shouldReport(org.openjdk.tools.javac.util.JCDiagnostic) -> shouldReport
    void prompt() -> prompt
    void printErrLine(int,java.io.PrintWriter) -> printErrLine
    void printNewline() -> printNewline
    void printNewline(org.openjdk.tools.javac.util.Log$WriterKind) -> printNewline
    void printLines(java.lang.String,java.lang.Object[]) -> printLines
    void printLines(org.openjdk.tools.javac.util.Log$PrefixKind,java.lang.String,java.lang.Object[]) -> printLines
    void printLines(org.openjdk.tools.javac.util.Log$WriterKind,java.lang.String,java.lang.Object[]) -> printLines
    void printLines(org.openjdk.tools.javac.util.Log$WriterKind,org.openjdk.tools.javac.util.Log$PrefixKind,java.lang.String,java.lang.Object[]) -> printLines
    void printRawLines(java.lang.String) -> printRawLines
    void printRawLines(org.openjdk.tools.javac.util.Log$WriterKind,java.lang.String) -> printRawLines
    void printRawLines(java.io.PrintWriter,java.lang.String) -> printRawLines
    void printVerbose(java.lang.String,java.lang.Object[]) -> printVerbose
    void directError(java.lang.String,java.lang.Object[]) -> directError
    void strictWarning(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> strictWarning
    void report(org.openjdk.tools.javac.util.JCDiagnostic) -> report
    void writeDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic) -> writeDiagnostic
    java.io.PrintWriter getWriterForDiagnosticType(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticType) -> getWriterForDiagnosticType
    java.lang.String getLocalizedString(java.lang.String,java.lang.Object[]) -> getLocalizedString
    java.lang.String localize(java.lang.String,java.lang.Object[]) -> localize
    java.lang.String localize(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticInfo) -> localize
    java.lang.String localize(org.openjdk.tools.javac.util.Log$PrefixKind,java.lang.String,java.lang.Object[]) -> localize
    void printRawDiag(java.io.PrintWriter,java.lang.String,int,java.lang.String) -> printRawDiag
    void rawError(int,java.lang.String) -> rawError
    void rawWarning(int,java.lang.String) -> rawWarning
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    void lambda$new$1(org.openjdk.tools.javac.util.Options) -> lambda$new$1
    org.openjdk.tools.javac.util.Log lambda$preRegister$0(java.io.PrintWriter,org.openjdk.tools.javac.util.Context) -> lambda$preRegister$0
    org.openjdk.tools.javac.util.Log$DiagnosticHandler access$000(org.openjdk.tools.javac.util.Log) -> access$000
    org.openjdk.tools.javac.util.Log$DiagnosticHandler access$002(org.openjdk.tools.javac.util.Log,org.openjdk.tools.javac.util.Log$DiagnosticHandler) -> access$002
    boolean access$200(org.openjdk.tools.javac.util.Log,org.openjdk.tools.javac.util.JCDiagnostic) -> access$200
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Log$1 -> org.openjdk.tools.javac.util.Log$1:
    int[] $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType -> $SwitchMap$com$sun$tools$javac$util$JCDiagnostic$DiagnosticType
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Log$DefaultDiagnosticHandler -> org.openjdk.tools.javac.util.Log$DefaultDiagnosticHandler:
    org.openjdk.tools.javac.util.Log this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.Log) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic) -> report
    void <init>(org.openjdk.tools.javac.util.Log,org.openjdk.tools.javac.util.Log$1) -> <init>
org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler -> org.openjdk.tools.javac.util.Log$DeferredDiagnosticHandler:
    java.util.Queue deferred -> deferred
    org.openjdk.tools.javac.util.Filter filter -> filter
    void <init>(org.openjdk.tools.javac.util.Log) -> <init>
    void <init>(org.openjdk.tools.javac.util.Log,org.openjdk.tools.javac.util.Filter) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic) -> report
    java.util.Queue getDiagnostics() -> getDiagnostics
    void reportDeferredDiagnostics() -> reportDeferredDiagnostics
    void reportDeferredDiagnostics(java.util.Set) -> reportDeferredDiagnostics
org.openjdk.tools.javac.util.Log$DiagnosticHandler -> org.openjdk.tools.javac.util.Log$DiagnosticHandler:
    org.openjdk.tools.javac.util.Log$DiagnosticHandler prev -> prev
    void <init>() -> <init>
    void install(org.openjdk.tools.javac.util.Log) -> install
    void report(org.openjdk.tools.javac.util.JCDiagnostic) -> report
org.openjdk.tools.javac.util.Log$DiscardDiagnosticHandler -> org.openjdk.tools.javac.util.Log$DiscardDiagnosticHandler:
    void <init>(org.openjdk.tools.javac.util.Log) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic) -> report
org.openjdk.tools.javac.util.Log$PrefixKind -> org.openjdk.tools.javac.util.Log$PrefixKind:
    org.openjdk.tools.javac.util.Log$PrefixKind JAVAC -> JAVAC
    org.openjdk.tools.javac.util.Log$PrefixKind COMPILER_MISC -> COMPILER_MISC
    java.lang.String value -> value
    org.openjdk.tools.javac.util.Log$PrefixKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.Log$PrefixKind[] values() -> values
    org.openjdk.tools.javac.util.Log$PrefixKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String key(java.lang.String) -> key
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Log$WriterKind -> org.openjdk.tools.javac.util.Log$WriterKind:
    org.openjdk.tools.javac.util.Log$WriterKind NOTICE -> NOTICE
    org.openjdk.tools.javac.util.Log$WriterKind WARNING -> WARNING
    org.openjdk.tools.javac.util.Log$WriterKind ERROR -> ERROR
    org.openjdk.tools.javac.util.Log$WriterKind STDOUT -> STDOUT
    org.openjdk.tools.javac.util.Log$WriterKind STDERR -> STDERR
    org.openjdk.tools.javac.util.Log$WriterKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.Log$WriterKind[] values() -> values
    org.openjdk.tools.javac.util.Log$WriterKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.MandatoryWarningHandler -> org.openjdk.tools.javac.util.MandatoryWarningHandler:
    org.openjdk.tools.javac.util.Log log -> log
    boolean verbose -> verbose
    java.lang.String prefix -> prefix
    java.util.Set sourcesWithReportedWarnings -> sourcesWithReportedWarnings
    org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind deferredDiagnosticKind -> deferredDiagnosticKind
    org.openjdk.javax.tools.JavaFileObject deferredDiagnosticSource -> deferredDiagnosticSource
    java.lang.Object deferredDiagnosticArg -> deferredDiagnosticArg
    boolean enforceMandatory -> enforceMandatory
    org.openjdk.tools.javac.code.Lint$LintCategory lintCategory -> lintCategory
    void <init>(org.openjdk.tools.javac.util.Log,boolean,boolean,java.lang.String,org.openjdk.tools.javac.code.Lint$LintCategory) -> <init>
    void report(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> report
    void reportDeferredDiagnostic() -> reportDeferredDiagnostic
    boolean equal(java.lang.Object,java.lang.Object) -> equal
    void logMandatoryWarning(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.String,java.lang.Object[]) -> logMandatoryWarning
    void logMandatoryNote(org.openjdk.javax.tools.JavaFileObject,java.lang.String,java.lang.Object[]) -> logMandatoryNote
org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind -> org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind:
    org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind IN_FILE -> IN_FILE
    org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind ADDITIONAL_IN_FILE -> ADDITIONAL_IN_FILE
    org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind IN_FILES -> IN_FILES
    org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind ADDITIONAL_IN_FILES -> ADDITIONAL_IN_FILES
    java.lang.String value -> value
    org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind[] values() -> values
    org.openjdk.tools.javac.util.MandatoryWarningHandler$DeferredDiagnosticKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String getKey(java.lang.String) -> getKey
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.MatchingUtils -> org.openjdk.tools.javac.util.MatchingUtils:
    java.lang.String allMatchesString -> allMatchesString
    java.util.regex.Pattern allMatches -> allMatches
    void <init>() -> <init>
    boolean isValidImportString(java.lang.String) -> isValidImportString
    java.lang.String validImportStringToPatternString(java.lang.String) -> validImportStringToPatternString
    java.util.regex.Pattern validImportStringToPattern(java.lang.String) -> validImportStringToPattern
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.ModuleHelper -> org.openjdk.tools.javac.util.ModuleHelper:
    java.lang.String[] javacInternalPackages -> javacInternalPackages
    void <init>() -> <init>
    void addExports(org.openjdk.tools.javac.util.JDK9Wrappers$Module,org.openjdk.tools.javac.util.JDK9Wrappers$Module) -> addExports
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Name -> org.openjdk.tools.javac.util.Name:
    org.openjdk.tools.javac.util.Name$Table table -> table
    void <init>(org.openjdk.tools.javac.util.Name$Table) -> <init>
    boolean contentEquals(java.lang.CharSequence) -> contentEquals
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
    org.openjdk.tools.javac.util.Name append(org.openjdk.tools.javac.util.Name) -> append
    org.openjdk.tools.javac.util.Name append(char,org.openjdk.tools.javac.util.Name) -> append
    int compareTo(org.openjdk.tools.javac.util.Name) -> compareTo
    boolean isEmpty() -> isEmpty
    int lastIndexOf(byte) -> lastIndexOf
    boolean startsWith(org.openjdk.tools.javac.util.Name) -> startsWith
    org.openjdk.tools.javac.util.Name subName(int,int) -> subName
    java.lang.String toString() -> toString
    byte[] toUtf() -> toUtf
    int getIndex() -> getIndex
    int getByteLength() -> getByteLength
    byte getByteAt(int) -> getByteAt
    void getBytes(byte[],int) -> getBytes
    byte[] getByteArray() -> getByteArray
    int getByteOffset() -> getByteOffset
org.openjdk.tools.javac.util.Name$Table -> org.openjdk.tools.javac.util.Name$Table:
    org.openjdk.tools.javac.util.Names names -> names
    void <init>(org.openjdk.tools.javac.util.Names) -> <init>
    org.openjdk.tools.javac.util.Name fromChars(char[],int,int) -> fromChars
    org.openjdk.tools.javac.util.Name fromString(java.lang.String) -> fromString
    org.openjdk.tools.javac.util.Name fromUtf(byte[]) -> fromUtf
    org.openjdk.tools.javac.util.Name fromUtf(byte[],int,int) -> fromUtf
    void dispose() -> dispose
    int hashValue(byte[],int,int) -> hashValue
    boolean equals(byte[],int,byte[],int,int) -> equals
org.openjdk.tools.javac.util.Names -> org.openjdk.tools.javac.util.Names:
    org.openjdk.tools.javac.util.Context$Key namesKey -> namesKey
    org.openjdk.tools.javac.util.Name asterisk -> asterisk
    org.openjdk.tools.javac.util.Name comma -> comma
    org.openjdk.tools.javac.util.Name empty -> empty
    org.openjdk.tools.javac.util.Name hyphen -> hyphen
    org.openjdk.tools.javac.util.Name one -> one
    org.openjdk.tools.javac.util.Name period -> period
    org.openjdk.tools.javac.util.Name semicolon -> semicolon
    org.openjdk.tools.javac.util.Name slash -> slash
    org.openjdk.tools.javac.util.Name slashequals -> slashequals
    org.openjdk.tools.javac.util.Name _class -> _class
    org.openjdk.tools.javac.util.Name _default -> _default
    org.openjdk.tools.javac.util.Name _super -> _super
    org.openjdk.tools.javac.util.Name _this -> _this
    org.openjdk.tools.javac.util.Name exports -> exports
    org.openjdk.tools.javac.util.Name opens -> opens
    org.openjdk.tools.javac.util.Name module -> module
    org.openjdk.tools.javac.util.Name provides -> provides
    org.openjdk.tools.javac.util.Name requires -> requires
    org.openjdk.tools.javac.util.Name to -> to
    org.openjdk.tools.javac.util.Name transitive -> transitive
    org.openjdk.tools.javac.util.Name uses -> uses
    org.openjdk.tools.javac.util.Name open -> open
    org.openjdk.tools.javac.util.Name with -> with
    org.openjdk.tools.javac.util.Name _name -> _name
    org.openjdk.tools.javac.util.Name addSuppressed -> addSuppressed
    org.openjdk.tools.javac.util.Name any -> any
    org.openjdk.tools.javac.util.Name append -> append
    org.openjdk.tools.javac.util.Name clinit -> clinit
    org.openjdk.tools.javac.util.Name clone -> clone
    org.openjdk.tools.javac.util.Name close -> close
    org.openjdk.tools.javac.util.Name compareTo -> compareTo
    org.openjdk.tools.javac.util.Name deserializeLambda -> deserializeLambda
    org.openjdk.tools.javac.util.Name desiredAssertionStatus -> desiredAssertionStatus
    org.openjdk.tools.javac.util.Name equals -> equals
    org.openjdk.tools.javac.util.Name error -> error
    org.openjdk.tools.javac.util.Name family -> family
    org.openjdk.tools.javac.util.Name finalize -> finalize
    org.openjdk.tools.javac.util.Name forName -> forName
    org.openjdk.tools.javac.util.Name forRemoval -> forRemoval
    org.openjdk.tools.javac.util.Name getClass -> getClass
    org.openjdk.tools.javac.util.Name getClassLoader -> getClassLoader
    org.openjdk.tools.javac.util.Name getComponentType -> getComponentType
    org.openjdk.tools.javac.util.Name getDeclaringClass -> getDeclaringClass
    org.openjdk.tools.javac.util.Name getMessage -> getMessage
    org.openjdk.tools.javac.util.Name hasNext -> hasNext
    org.openjdk.tools.javac.util.Name hashCode -> hashCode
    org.openjdk.tools.javac.util.Name init -> init
    org.openjdk.tools.javac.util.Name initCause -> initCause
    org.openjdk.tools.javac.util.Name iterator -> iterator
    org.openjdk.tools.javac.util.Name length -> length
    org.openjdk.tools.javac.util.Name next -> next
    org.openjdk.tools.javac.util.Name ordinal -> ordinal
    org.openjdk.tools.javac.util.Name provider -> provider
    org.openjdk.tools.javac.util.Name serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.util.Name toString -> toString
    org.openjdk.tools.javac.util.Name value -> value
    org.openjdk.tools.javac.util.Name valueOf -> valueOf
    org.openjdk.tools.javac.util.Name values -> values
    org.openjdk.tools.javac.util.Name java_io_Serializable -> java_io_Serializable
    org.openjdk.tools.javac.util.Name java_lang_AutoCloseable -> java_lang_AutoCloseable
    org.openjdk.tools.javac.util.Name java_lang_Class -> java_lang_Class
    org.openjdk.tools.javac.util.Name java_lang_Cloneable -> java_lang_Cloneable
    org.openjdk.tools.javac.util.Name java_lang_Enum -> java_lang_Enum
    org.openjdk.tools.javac.util.Name java_lang_Object -> java_lang_Object
    org.openjdk.tools.javac.util.Name java_lang_invoke_MethodHandle -> java_lang_invoke_MethodHandle
    org.openjdk.tools.javac.util.Name Array -> Array
    org.openjdk.tools.javac.util.Name Bound -> Bound
    org.openjdk.tools.javac.util.Name Method -> Method
    org.openjdk.tools.javac.util.Name java_lang -> java_lang
    org.openjdk.tools.javac.util.Name java_base -> java_base
    org.openjdk.tools.javac.util.Name Annotation -> Annotation
    org.openjdk.tools.javac.util.Name AnnotationDefault -> AnnotationDefault
    org.openjdk.tools.javac.util.Name BootstrapMethods -> BootstrapMethods
    org.openjdk.tools.javac.util.Name Bridge -> Bridge
    org.openjdk.tools.javac.util.Name CharacterRangeTable -> CharacterRangeTable
    org.openjdk.tools.javac.util.Name Code -> Code
    org.openjdk.tools.javac.util.Name CompilationID -> CompilationID
    org.openjdk.tools.javac.util.Name ConstantValue -> ConstantValue
    org.openjdk.tools.javac.util.Name Deprecated -> Deprecated
    org.openjdk.tools.javac.util.Name EnclosingMethod -> EnclosingMethod
    org.openjdk.tools.javac.util.Name Enum -> Enum
    org.openjdk.tools.javac.util.Name Exceptions -> Exceptions
    org.openjdk.tools.javac.util.Name InnerClasses -> InnerClasses
    org.openjdk.tools.javac.util.Name LineNumberTable -> LineNumberTable
    org.openjdk.tools.javac.util.Name LocalVariableTable -> LocalVariableTable
    org.openjdk.tools.javac.util.Name LocalVariableTypeTable -> LocalVariableTypeTable
    org.openjdk.tools.javac.util.Name MethodParameters -> MethodParameters
    org.openjdk.tools.javac.util.Name Module -> Module
    org.openjdk.tools.javac.util.Name ModuleResolution -> ModuleResolution
    org.openjdk.tools.javac.util.Name RuntimeInvisibleAnnotations -> RuntimeInvisibleAnnotations
    org.openjdk.tools.javac.util.Name RuntimeInvisibleParameterAnnotations -> RuntimeInvisibleParameterAnnotations
    org.openjdk.tools.javac.util.Name RuntimeInvisibleTypeAnnotations -> RuntimeInvisibleTypeAnnotations
    org.openjdk.tools.javac.util.Name RuntimeVisibleAnnotations -> RuntimeVisibleAnnotations
    org.openjdk.tools.javac.util.Name RuntimeVisibleParameterAnnotations -> RuntimeVisibleParameterAnnotations
    org.openjdk.tools.javac.util.Name RuntimeVisibleTypeAnnotations -> RuntimeVisibleTypeAnnotations
    org.openjdk.tools.javac.util.Name Signature -> Signature
    org.openjdk.tools.javac.util.Name SourceFile -> SourceFile
    org.openjdk.tools.javac.util.Name SourceID -> SourceID
    org.openjdk.tools.javac.util.Name StackMap -> StackMap
    org.openjdk.tools.javac.util.Name StackMapTable -> StackMapTable
    org.openjdk.tools.javac.util.Name Synthetic -> Synthetic
    org.openjdk.tools.javac.util.Name Value -> Value
    org.openjdk.tools.javac.util.Name Varargs -> Varargs
    org.openjdk.tools.javac.util.Name ANNOTATION_TYPE -> ANNOTATION_TYPE
    org.openjdk.tools.javac.util.Name CONSTRUCTOR -> CONSTRUCTOR
    org.openjdk.tools.javac.util.Name FIELD -> FIELD
    org.openjdk.tools.javac.util.Name LOCAL_VARIABLE -> LOCAL_VARIABLE
    org.openjdk.tools.javac.util.Name METHOD -> METHOD
    org.openjdk.tools.javac.util.Name MODULE -> MODULE
    org.openjdk.tools.javac.util.Name PACKAGE -> PACKAGE
    org.openjdk.tools.javac.util.Name PARAMETER -> PARAMETER
    org.openjdk.tools.javac.util.Name TYPE -> TYPE
    org.openjdk.tools.javac.util.Name TYPE_PARAMETER -> TYPE_PARAMETER
    org.openjdk.tools.javac.util.Name TYPE_USE -> TYPE_USE
    org.openjdk.tools.javac.util.Name CLASS -> CLASS
    org.openjdk.tools.javac.util.Name RUNTIME -> RUNTIME
    org.openjdk.tools.javac.util.Name SOURCE -> SOURCE
    org.openjdk.tools.javac.util.Name T -> T
    org.openjdk.tools.javac.util.Name deprecated -> deprecated
    org.openjdk.tools.javac.util.Name ex -> ex
    org.openjdk.tools.javac.util.Name module_info -> module_info
    org.openjdk.tools.javac.util.Name package_info -> package_info
    org.openjdk.tools.javac.util.Name requireNonNull -> requireNonNull
    org.openjdk.tools.javac.util.Name lambda -> lambda
    org.openjdk.tools.javac.util.Name metafactory -> metafactory
    org.openjdk.tools.javac.util.Name altMetafactory -> altMetafactory
    org.openjdk.tools.javac.util.Name dollarThis -> dollarThis
    org.openjdk.tools.javac.util.Name makeConcat -> makeConcat
    org.openjdk.tools.javac.util.Name makeConcatWithConstants -> makeConcatWithConstants
    org.openjdk.tools.javac.util.Name$Table table -> table
    org.openjdk.tools.javac.util.Names instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    org.openjdk.tools.javac.util.Name$Table createTable(org.openjdk.tools.javac.util.Options) -> createTable
    void dispose() -> dispose
    org.openjdk.tools.javac.util.Name fromChars(char[],int,int) -> fromChars
    org.openjdk.tools.javac.util.Name fromString(java.lang.String) -> fromString
    org.openjdk.tools.javac.util.Name fromUtf(byte[]) -> fromUtf
    org.openjdk.tools.javac.util.Name fromUtf(byte[],int,int) -> fromUtf
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Options -> org.openjdk.tools.javac.util.Options:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.util.Context$Key optionsKey -> optionsKey
    java.util.LinkedHashMap values -> values
    org.openjdk.tools.javac.util.List listeners -> listeners
    org.openjdk.tools.javac.util.Options instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.lang.String get(java.lang.String) -> get
    java.lang.String get(org.openjdk.tools.javac.main.Option) -> get
    boolean getBoolean(java.lang.String) -> getBoolean
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    boolean isSet(java.lang.String) -> isSet
    boolean isSet(org.openjdk.tools.javac.main.Option) -> isSet
    boolean isSet(org.openjdk.tools.javac.main.Option,java.lang.String) -> isSet
    boolean isLintSet(java.lang.String) -> isLintSet
    boolean isUnset(java.lang.String) -> isUnset
    boolean isUnset(org.openjdk.tools.javac.main.Option) -> isUnset
    boolean isUnset(org.openjdk.tools.javac.main.Option,java.lang.String) -> isUnset
    void put(java.lang.String,java.lang.String) -> put
    void put(org.openjdk.tools.javac.main.Option,java.lang.String) -> put
    void putAll(org.openjdk.tools.javac.util.Options) -> putAll
    void remove(java.lang.String) -> remove
    java.util.Set keySet() -> keySet
    int size() -> size
    void addListener(java.lang.Runnable) -> addListener
    void notifyListeners() -> notifyListeners
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.Pair -> org.openjdk.tools.javac.util.Pair:
    java.lang.Object fst -> fst
    java.lang.Object snd -> snd
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.openjdk.tools.javac.util.Pair of(java.lang.Object,java.lang.Object) -> of
org.openjdk.tools.javac.util.Position -> org.openjdk.tools.javac.util.Position:
    int NOPOS -> NOPOS
    int FIRSTPOS -> FIRSTPOS
    int FIRSTLINE -> FIRSTLINE
    int FIRSTCOLUMN -> FIRSTCOLUMN
    int LINESHIFT -> LINESHIFT
    int MAXCOLUMN -> MAXCOLUMN
    int MAXLINE -> MAXLINE
    int MAXPOS -> MAXPOS
    void <init>() -> <init>
    org.openjdk.tools.javac.util.Position$LineMap makeLineMap(char[],int,boolean) -> makeLineMap
    int encodePosition(int,int) -> encodePosition
org.openjdk.tools.javac.util.Position$LineMap -> org.openjdk.tools.javac.util.Position$LineMap:
    int getStartPosition(int) -> getStartPosition
    int getPosition(int,int) -> getPosition
    int getLineNumber(int) -> getLineNumber
    int getColumnNumber(int) -> getColumnNumber
org.openjdk.tools.javac.util.Position$LineMapImpl -> org.openjdk.tools.javac.util.Position$LineMapImpl:
    int[] startPosition -> startPosition
    int lastPosition -> lastPosition
    int lastLine -> lastLine
    void <init>() -> <init>
    void build(char[],int) -> build
    int getStartPosition(int) -> getStartPosition
    long getStartPosition(long) -> getStartPosition
    int getPosition(int,int) -> getPosition
    long getPosition(long,long) -> getPosition
    int getLineNumber(int) -> getLineNumber
    long getLineNumber(long) -> getLineNumber
    int getColumnNumber(int) -> getColumnNumber
    long getColumnNumber(long) -> getColumnNumber
    int longToInt(long) -> longToInt
    void setTabPosition(int) -> setTabPosition
org.openjdk.tools.javac.util.Position$LineTabMapImpl -> org.openjdk.tools.javac.util.Position$LineTabMapImpl:
    java.util.BitSet tabMap -> tabMap
    void <init>(int) -> <init>
    void setTabPosition(int) -> setTabPosition
    int getColumnNumber(int) -> getColumnNumber
    int getPosition(int,int) -> getPosition
    long getColumnNumber(long) -> getColumnNumber
    long getLineNumber(long) -> getLineNumber
    int getLineNumber(int) -> getLineNumber
    long getPosition(long,long) -> getPosition
    long getStartPosition(long) -> getStartPosition
    int getStartPosition(int) -> getStartPosition
org.openjdk.tools.javac.util.PropagatedException -> org.openjdk.tools.javac.util.PropagatedException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.RuntimeException) -> <init>
    java.lang.RuntimeException getCause() -> getCause
    java.lang.Throwable getCause() -> getCause
org.openjdk.tools.javac.util.RawDiagnosticFormatter -> org.openjdk.tools.javac.util.RawDiagnosticFormatter:
    void <init>(org.openjdk.tools.javac.util.Options) -> <init>
    java.lang.String formatDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatDiagnostic
    java.lang.String formatMessage(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatMessage
    java.lang.String formatArgument(org.openjdk.tools.javac.util.JCDiagnostic,java.lang.Object,java.util.Locale) -> formatArgument
    java.lang.String localize(java.util.Locale,java.lang.String,java.lang.Object[]) -> localize
    boolean isRaw() -> isRaw
    java.lang.String formatMessage(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> formatMessage
org.openjdk.tools.javac.util.RichDiagnosticFormatter -> org.openjdk.tools.javac.util.RichDiagnosticFormatter:
    org.openjdk.tools.javac.code.Symtab syms -> syms
    org.openjdk.tools.javac.code.Types types -> types
    org.openjdk.tools.javac.util.JCDiagnostic$Factory diags -> diags
    org.openjdk.tools.javac.util.JavacMessages messages -> messages
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$ClassNameSimplifier nameSimplifier -> nameSimplifier
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichPrinter printer -> printer
    java.util.Map whereClauses -> whereClauses
    org.openjdk.tools.javac.code.Types$UnaryVisitor typePreprocessor -> typePreprocessor
    org.openjdk.tools.javac.code.Types$DefaultSymbolVisitor symbolPreprocessor -> symbolPreprocessor
    org.openjdk.tools.javac.util.RichDiagnosticFormatter instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.lang.String format(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> format
    java.lang.String formatMessage(org.openjdk.tools.javac.util.JCDiagnostic,java.util.Locale) -> formatMessage
    void setRichPrinter(org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichPrinter) -> setRichPrinter
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichPrinter getRichPrinter() -> getRichPrinter
    void preprocessDiagnostic(org.openjdk.tools.javac.util.JCDiagnostic) -> preprocessDiagnostic
    void preprocessArgument(java.lang.Object) -> preprocessArgument
    org.openjdk.tools.javac.util.List getWhereClauses() -> getWhereClauses
    int indexOf(org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind) -> indexOf
    boolean unique(org.openjdk.tools.javac.code.Type$TypeVar) -> unique
    void preprocessType(org.openjdk.tools.javac.code.Type) -> preprocessType
    void preprocessSymbol(org.openjdk.tools.javac.code.Symbol) -> preprocessSymbol
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration getConfiguration() -> getConfiguration
    java.lang.String formatMessage(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> formatMessage
    java.lang.String format(org.openjdk.javax.tools.Diagnostic,java.util.Locale) -> format
    org.openjdk.tools.javac.api.DiagnosticFormatter$Configuration getConfiguration() -> getConfiguration
    int access$000(org.openjdk.tools.javac.util.RichDiagnosticFormatter,org.openjdk.tools.javac.code.Type,org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind) -> access$000
    boolean access$100(org.openjdk.tools.javac.util.RichDiagnosticFormatter,org.openjdk.tools.javac.code.Type$TypeVar) -> access$100
org.openjdk.tools.javac.util.RichDiagnosticFormatter$1 -> org.openjdk.tools.javac.util.RichDiagnosticFormatter$1:
    org.openjdk.tools.javac.util.RichDiagnosticFormatter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.RichDiagnosticFormatter) -> <init>
    java.lang.Void visit(org.openjdk.tools.javac.util.List) -> visit
    java.lang.Void visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Void) -> visitForAll
    java.lang.Void visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Void) -> visitMethodType
    java.lang.Void visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Void) -> visitErrorType
    java.lang.Void visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Void) -> visitArrayType
    java.lang.Void visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Void) -> visitWildcardType
    java.lang.Void visitType(org.openjdk.tools.javac.code.Type,java.lang.Void) -> visitType
    java.lang.Void visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Void) -> visitCapturedType
    java.lang.Void visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Void) -> visitClassType
    java.lang.Void visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Void) -> visitTypeVar
    java.lang.Object visitForAll(org.openjdk.tools.javac.code.Type$ForAll,java.lang.Object) -> visitForAll
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitErrorType(org.openjdk.tools.javac.code.Type$ErrorType,java.lang.Object) -> visitErrorType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitMethodType(org.openjdk.tools.javac.code.Type$MethodType,java.lang.Object) -> visitMethodType
    java.lang.Object visitArrayType(org.openjdk.tools.javac.code.Type$ArrayType,java.lang.Object) -> visitArrayType
    java.lang.Object visitWildcardType(org.openjdk.tools.javac.code.Type$WildcardType,java.lang.Object) -> visitWildcardType
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
org.openjdk.tools.javac.util.RichDiagnosticFormatter$2 -> org.openjdk.tools.javac.util.RichDiagnosticFormatter$2:
    org.openjdk.tools.javac.util.RichDiagnosticFormatter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.RichDiagnosticFormatter) -> <init>
    java.lang.Void visitClassSymbol(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.lang.Void) -> visitClassSymbol
    java.lang.Void visitSymbol(org.openjdk.tools.javac.code.Symbol,java.lang.Void) -> visitSymbol
    java.lang.Void visitMethodSymbol(org.openjdk.tools.javac.code.Symbol$MethodSymbol,java.lang.Void) -> visitMethodSymbol
    java.lang.Object visitMethodSymbol(org.openjdk.tools.javac.code.Symbol$MethodSymbol,java.lang.Object) -> visitMethodSymbol
    java.lang.Object visitClassSymbol(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.lang.Object) -> visitClassSymbol
    java.lang.Object visitSymbol(org.openjdk.tools.javac.code.Symbol,java.lang.Object) -> visitSymbol
org.openjdk.tools.javac.util.RichDiagnosticFormatter$ClassNameSimplifier -> org.openjdk.tools.javac.util.RichDiagnosticFormatter$ClassNameSimplifier:
    java.util.Map nameClashes -> nameClashes
    org.openjdk.tools.javac.util.RichDiagnosticFormatter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.RichDiagnosticFormatter) -> <init>
    void addUsage(org.openjdk.tools.javac.code.Symbol) -> addUsage
    java.lang.String simplify(org.openjdk.tools.javac.code.Symbol) -> simplify
org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration -> org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration:
    java.util.EnumSet features -> features
    void <init>(org.openjdk.tools.javac.util.Options,org.openjdk.tools.javac.util.AbstractDiagnosticFormatter) -> <init>
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature[] getAvailableFeatures() -> getAvailableFeatures
    void enable(org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature) -> enable
    void disable(org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature) -> disable
    boolean isEnabled(org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature) -> isEnabled
org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature -> org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature:
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature WHERE_CLAUSES -> WHERE_CLAUSES
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature SIMPLE_NAMES -> SIMPLE_NAMES
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature UNIQUE_TYPEVAR_NAMES -> UNIQUE_TYPEVAR_NAMES
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature[] values() -> values
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichConfiguration$RichFormatterFeature valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichPrinter -> org.openjdk.tools.javac.util.RichDiagnosticFormatter$RichPrinter:
    org.openjdk.tools.javac.util.RichDiagnosticFormatter this$0 -> this$0
    void <init>(org.openjdk.tools.javac.util.RichDiagnosticFormatter) -> <init>
    java.lang.String localize(java.util.Locale,java.lang.String,java.lang.Object[]) -> localize
    java.lang.String capturedVarId(org.openjdk.tools.javac.code.Type$CapturedType,java.util.Locale) -> capturedVarId
    java.lang.String visitType(org.openjdk.tools.javac.code.Type,java.util.Locale) -> visitType
    java.lang.String visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.util.Locale) -> visitCapturedType
    java.lang.String visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.util.Locale) -> visitClassType
    java.lang.String className(org.openjdk.tools.javac.code.Type$ClassType,boolean,java.util.Locale) -> className
    java.lang.String visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.util.Locale) -> visitTypeVar
    java.lang.String visitClassSymbol(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.util.Locale) -> visitClassSymbol
    java.lang.String visitMethodSymbol(org.openjdk.tools.javac.code.Symbol$MethodSymbol,java.util.Locale) -> visitMethodSymbol
    java.lang.Object visitType(org.openjdk.tools.javac.code.Type,java.lang.Object) -> visitType
    java.lang.Object visitCapturedType(org.openjdk.tools.javac.code.Type$CapturedType,java.lang.Object) -> visitCapturedType
    java.lang.Object visitTypeVar(org.openjdk.tools.javac.code.Type$TypeVar,java.lang.Object) -> visitTypeVar
    java.lang.Object visitClassType(org.openjdk.tools.javac.code.Type$ClassType,java.lang.Object) -> visitClassType
    java.lang.Object visitMethodSymbol(org.openjdk.tools.javac.code.Symbol$MethodSymbol,java.lang.Object) -> visitMethodSymbol
    java.lang.Object visitClassSymbol(org.openjdk.tools.javac.code.Symbol$ClassSymbol,java.lang.Object) -> visitClassSymbol
org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind -> org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind:
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind TYPEVAR -> TYPEVAR
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind CAPTURED -> CAPTURED
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind INTERSECTION -> INTERSECTION
    java.lang.String key -> key
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind[] $VALUES -> $VALUES
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind[] values() -> values
    org.openjdk.tools.javac.util.RichDiagnosticFormatter$WhereClauseKind valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String key() -> key
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.SharedNameTable -> org.openjdk.tools.javac.util.SharedNameTable:
    org.openjdk.tools.javac.util.List freelist -> freelist
    org.openjdk.tools.javac.util.SharedNameTable$NameImpl[] hashes -> hashes
    byte[] bytes -> bytes
    int hashMask -> hashMask
    int nc -> nc
    org.openjdk.tools.javac.util.SharedNameTable create(org.openjdk.tools.javac.util.Names) -> create
    void dispose(org.openjdk.tools.javac.util.SharedNameTable) -> dispose
    void <init>(org.openjdk.tools.javac.util.Names,int,int) -> <init>
    void <init>(org.openjdk.tools.javac.util.Names) -> <init>
    org.openjdk.tools.javac.util.Name fromChars(char[],int,int) -> fromChars
    org.openjdk.tools.javac.util.Name fromUtf(byte[],int,int) -> fromUtf
    void dispose() -> dispose
    void <clinit>() -> <clinit>
org.openjdk.tools.javac.util.SharedNameTable$NameImpl -> org.openjdk.tools.javac.util.SharedNameTable$NameImpl:
    org.openjdk.tools.javac.util.SharedNameTable$NameImpl next -> next
    int index -> index
    int length -> length
    void <init>(org.openjdk.tools.javac.util.SharedNameTable) -> <init>
    int getIndex() -> getIndex
    int getByteLength() -> getByteLength
    byte getByteAt(int) -> getByteAt
    byte[] getByteArray() -> getByteArray
    int getByteOffset() -> getByteOffset
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.openjdk.tools.javac.util.StringUtils -> org.openjdk.tools.javac.util.StringUtils:
    void <init>() -> <init>
    java.lang.String toLowerCase(java.lang.String) -> toLowerCase
    java.lang.String toUpperCase(java.lang.String) -> toUpperCase
    int indexOfIgnoreCase(java.lang.String,java.lang.String) -> indexOfIgnoreCase
    int indexOfIgnoreCase(java.lang.String,java.lang.String,int) -> indexOfIgnoreCase
org.openjdk.tools.javac.util.UnsharedNameTable -> org.openjdk.tools.javac.util.UnsharedNameTable:
    org.openjdk.tools.javac.util.UnsharedNameTable$HashEntry[] hashes -> hashes
    int hashMask -> hashMask
    int index -> index
    org.openjdk.tools.javac.util.Name$Table create(org.openjdk.tools.javac.util.Names) -> create
    void <init>(org.openjdk.tools.javac.util.Names,int) -> <init>
    void <init>(org.openjdk.tools.javac.util.Names) -> <init>
    org.openjdk.tools.javac.util.Name fromChars(char[],int,int) -> fromChars
    org.openjdk.tools.javac.util.Name fromUtf(byte[],int,int) -> fromUtf
    void dispose() -> dispose
org.openjdk.tools.javac.util.UnsharedNameTable$HashEntry -> org.openjdk.tools.javac.util.UnsharedNameTable$HashEntry:
    org.openjdk.tools.javac.util.UnsharedNameTable$HashEntry next -> next
    void <init>(org.openjdk.tools.javac.util.UnsharedNameTable$NameImpl) -> <init>
org.openjdk.tools.javac.util.UnsharedNameTable$NameImpl -> org.openjdk.tools.javac.util.UnsharedNameTable$NameImpl:
    byte[] bytes -> bytes
    int index -> index
    void <init>(org.openjdk.tools.javac.util.UnsharedNameTable,byte[],int) -> <init>
    int getIndex() -> getIndex
    int getByteLength() -> getByteLength
    byte getByteAt(int) -> getByteAt
    byte[] getByteArray() -> getByteArray
    int getByteOffset() -> getByteOffset
org.openjdk.tools.javac.util.Warner -> org.openjdk.tools.javac.util.Warner:
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition pos -> pos
    boolean warned -> warned
    java.util.EnumSet nonSilentLintSet -> nonSilentLintSet
    java.util.EnumSet silentLintSet -> silentLintSet
    org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition pos() -> pos
    void warn(org.openjdk.tools.javac.code.Lint$LintCategory) -> warn
    void silentWarn(org.openjdk.tools.javac.code.Lint$LintCategory) -> silentWarn
    void <init>(org.openjdk.tools.javac.util.JCDiagnostic$DiagnosticPosition) -> <init>
    boolean hasSilentLint(org.openjdk.tools.javac.code.Lint$LintCategory) -> hasSilentLint
    boolean hasNonSilentLint(org.openjdk.tools.javac.code.Lint$LintCategory) -> hasNonSilentLint
    boolean hasLint(org.openjdk.tools.javac.code.Lint$LintCategory) -> hasLint
    void clear() -> clear
    void <init>() -> <init>
org.openjdk.tools.javah.Gen -> org.openjdk.tools.javah.Gen:
    java.lang.String lineSep -> lineSep
    org.openjdk.javax.annotation.processing.ProcessingEnvironment processingEnvironment -> processingEnvironment
    org.openjdk.javax.lang.model.util.Types types -> types
    org.openjdk.javax.lang.model.util.Elements elems -> elems
    org.openjdk.tools.javah.Mangle mangler -> mangler
    org.openjdk.tools.javah.Util util -> util
    java.util.Set classes -> classes
    boolean isWindows -> isWindows
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.javax.tools.JavaFileObject outFile -> outFile
    boolean force -> force
    void <init>(org.openjdk.tools.javah.Util) -> <init>
    void write(java.io.OutputStream,org.openjdk.javax.lang.model.element.TypeElement) -> write
    java.lang.String getIncludes() -> getIncludes
    void setFileManager(org.openjdk.javax.tools.JavaFileManager) -> setFileManager
    void setOutFile(org.openjdk.javax.tools.JavaFileObject) -> setOutFile
    void setClasses(java.util.Set) -> setClasses
    void setProcessingEnvironment(org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> setProcessingEnvironment
    void setForce(boolean) -> setForce
    java.io.PrintWriter wrapWriter(java.io.OutputStream) -> wrapWriter
    void run() -> run
    void writeIfChanged(byte[],org.openjdk.javax.tools.FileObject) -> writeIfChanged
    byte[] readBytes(java.io.InputStream) -> readBytes
    java.lang.String defineForStatic(org.openjdk.javax.lang.model.element.TypeElement,org.openjdk.javax.lang.model.element.VariableElement) -> defineForStatic
    java.lang.String cppGuardBegin() -> cppGuardBegin
    java.lang.String cppGuardEnd() -> cppGuardEnd
    java.lang.String guardBegin(java.lang.String) -> guardBegin
    java.lang.String guardEnd(java.lang.String) -> guardEnd
    void writeFileTop(java.io.OutputStream) -> writeFileTop
    java.lang.String baseFileName(java.lang.CharSequence) -> baseFileName
    org.openjdk.javax.tools.FileObject getFileObject(java.lang.CharSequence) -> getFileObject
    java.lang.String getFileSuffix() -> getFileSuffix
    java.util.List getAllFields(org.openjdk.javax.lang.model.element.TypeElement) -> getAllFields
    java.lang.String signature(org.openjdk.javax.lang.model.element.ExecutableElement) -> signature
    void <clinit>() -> <clinit>
org.openjdk.tools.javah.InternalError -> org.openjdk.tools.javah.InternalError:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.openjdk.tools.javah.JNI -> org.openjdk.tools.javah.JNI:
    void <init>(org.openjdk.tools.javah.Util) -> <init>
    java.lang.String getIncludes() -> getIncludes
    void write(java.io.OutputStream,org.openjdk.javax.lang.model.element.TypeElement) -> write
    java.lang.String jniType(org.openjdk.javax.lang.model.type.TypeMirror) -> jniType
org.openjdk.tools.javah.JNI$1 -> org.openjdk.tools.javah.JNI$1:
    int[] $SwitchMap$javax$lang$model$type$TypeKind -> $SwitchMap$javax$lang$model$type$TypeKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javah.JavahFileManager -> org.openjdk.tools.javah.JavahFileManager:
    void <init>(org.openjdk.tools.javac.util.Context,java.nio.charset.Charset) -> <init>
    org.openjdk.tools.javah.JavahFileManager create(org.openjdk.javax.tools.DiagnosticListener,java.io.PrintWriter) -> create
org.openjdk.tools.javah.JavahTask -> org.openjdk.tools.javah.JavahTask:
    org.openjdk.tools.javah.JavahTask$Option[] recognizedOptions -> recognizedOptions
    java.lang.String versionRBName -> versionRBName
    java.util.ResourceBundle versionRB -> versionRB
    java.io.File ofile -> ofile
    java.io.File odir -> odir
    java.lang.String bootcp -> bootcp
    java.lang.String usercp -> usercp
    java.util.List classes -> classes
    boolean verbose -> verbose
    boolean noArgs -> noArgs
    boolean help -> help
    boolean trace -> trace
    boolean version -> version
    boolean fullVersion -> fullVersion
    boolean jni -> jni
    boolean llni -> llni
    boolean doubleAlign -> doubleAlign
    boolean force -> force
    java.util.Set javac_extras -> javac_extras
    java.io.PrintWriter log -> log
    org.openjdk.javax.tools.JavaFileManager fileManager -> fileManager
    org.openjdk.javax.tools.DiagnosticListener diagnosticListener -> diagnosticListener
    java.util.Locale task_locale -> task_locale
    java.util.Map bundles -> bundles
    java.lang.String progname -> progname
    void <init>() -> <init>
    void <init>(java.io.Writer,org.openjdk.javax.tools.JavaFileManager,org.openjdk.javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable) -> <init>
    void setLocale(java.util.Locale) -> setLocale
    void setLog(java.io.PrintWriter) -> setLog
    void setLog(java.io.OutputStream) -> setLog
    java.io.PrintWriter getPrintWriterForStream(java.io.OutputStream) -> getPrintWriterForStream
    java.io.PrintWriter getPrintWriterForWriter(java.io.Writer) -> getPrintWriterForWriter
    void setDiagnosticListener(org.openjdk.javax.tools.DiagnosticListener) -> setDiagnosticListener
    void setDiagnosticListener(java.io.OutputStream) -> setDiagnosticListener
    org.openjdk.javax.tools.DiagnosticListener getDiagnosticListenerForStream(java.io.OutputStream) -> getDiagnosticListenerForStream
    org.openjdk.javax.tools.DiagnosticListener getDiagnosticListenerForWriter(java.io.Writer) -> getDiagnosticListenerForWriter
    int run(java.lang.String[]) -> run
    void handleOptions(java.lang.String[]) -> handleOptions
    void handleOptions(java.lang.Iterable,boolean) -> handleOptions
    void handleOption(java.lang.String,java.util.Iterator) -> handleOption
    java.lang.Iterable expandAtArgs(java.lang.Iterable) -> expandAtArgs
    java.lang.Boolean call() -> call
    boolean run() -> run
    org.openjdk.javax.tools.StandardJavaFileManager getDefaultFileManager(org.openjdk.javax.tools.DiagnosticListener,java.io.PrintWriter) -> getDefaultFileManager
    void showHelp() -> showHelp
    void showVersion(boolean) -> showVersion
    java.lang.String version(boolean) -> version
    org.openjdk.javax.tools.Diagnostic createDiagnostic(java.lang.String,java.lang.Object[]) -> createDiagnostic
    java.lang.String getMessage(java.lang.String,java.lang.Object[]) -> getMessage
    java.lang.String getMessage(java.util.Locale,java.lang.String,java.lang.Object[]) -> getMessage
    java.lang.Object call() -> call
    void lambda$getDiagnosticListenerForWriter$0(java.io.PrintWriter,org.openjdk.javax.tools.Diagnostic) -> lambda$getDiagnosticListenerForWriter$0
    java.lang.String access$000(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.Object[]) -> access$000
    java.lang.String access$200(org.openjdk.tools.javah.JavahTask,java.util.Locale,java.lang.String,java.lang.Object[]) -> access$200
    void <clinit>() -> <clinit>
org.openjdk.tools.javah.JavahTask$1 -> org.openjdk.tools.javah.JavahTask$1:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$10 -> org.openjdk.tools.javah.JavahTask$10:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$11 -> org.openjdk.tools.javah.JavahTask$11:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$12 -> org.openjdk.tools.javah.JavahTask$12:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$13 -> org.openjdk.tools.javah.JavahTask$13:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$14 -> org.openjdk.tools.javah.JavahTask$14:
    void <init>(boolean,java.lang.String[]) -> <init>
    boolean matches(java.lang.String) -> matches
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$15 -> org.openjdk.tools.javah.JavahTask$15:
    java.lang.String val$key -> val$key
    java.lang.Object[] val$args -> val$args
    org.openjdk.tools.javah.JavahTask this$0 -> this$0
    void <init>(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.Object[]) -> <init>
    org.openjdk.javax.tools.Diagnostic$Kind getKind() -> getKind
    org.openjdk.javax.tools.JavaFileObject getSource() -> getSource
    long getPosition() -> getPosition
    long getStartPosition() -> getStartPosition
    long getEndPosition() -> getEndPosition
    long getLineNumber() -> getLineNumber
    long getColumnNumber() -> getColumnNumber
    java.lang.String getCode() -> getCode
    java.lang.String getMessage(java.util.Locale) -> getMessage
    java.lang.Object getSource() -> getSource
org.openjdk.tools.javah.JavahTask$2 -> org.openjdk.tools.javah.JavahTask$2:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$3 -> org.openjdk.tools.javah.JavahTask$3:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$4 -> org.openjdk.tools.javah.JavahTask$4:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$5 -> org.openjdk.tools.javah.JavahTask$5:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$6 -> org.openjdk.tools.javah.JavahTask$6:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$7 -> org.openjdk.tools.javah.JavahTask$7:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$8 -> org.openjdk.tools.javah.JavahTask$8:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$9 -> org.openjdk.tools.javah.JavahTask$9:
    void <init>(boolean,java.lang.String[]) -> <init>
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTask$BadArgs -> org.openjdk.tools.javah.JavahTask$BadArgs:
    long serialVersionUID -> serialVersionUID
    java.lang.String key -> key
    java.lang.Object[] args -> args
    boolean showUsage -> showUsage
    org.openjdk.tools.javah.JavahTask this$0 -> this$0
    void <init>(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.Object[]) -> <init>
    org.openjdk.tools.javah.JavahTask$BadArgs showUsage(boolean) -> showUsage
org.openjdk.tools.javah.JavahTask$HiddenOption -> org.openjdk.tools.javah.JavahTask$HiddenOption:
    void <init>(boolean,java.lang.String[]) -> <init>
    boolean isHidden() -> isHidden
org.openjdk.tools.javah.JavahTask$JavahProcessor -> org.openjdk.tools.javah.JavahTask$JavahProcessor:
    org.openjdk.javax.annotation.processing.Messager messager -> messager
    org.openjdk.javax.lang.model.type.TypeVisitor checkMethodParametersVisitor -> checkMethodParametersVisitor
    org.openjdk.tools.javah.Gen g -> g
    org.openjdk.tools.javah.Util$Exit exit -> exit
    org.openjdk.tools.javah.JavahTask this$0 -> this$0
    void <init>(org.openjdk.tools.javah.JavahTask,org.openjdk.tools.javah.Gen) -> <init>
    org.openjdk.javax.lang.model.SourceVersion getSupportedSourceVersion() -> getSupportedSourceVersion
    void init(org.openjdk.javax.annotation.processing.ProcessingEnvironment) -> init
    boolean process(java.util.Set,org.openjdk.javax.annotation.processing.RoundEnvironment) -> process
    java.util.Set getAllClasses(java.util.Set) -> getAllClasses
    void getAllClasses0(java.lang.Iterable,java.util.Set) -> getAllClasses0
    void checkMethodParameters(java.util.Set) -> checkMethodParameters
    org.openjdk.tools.javah.Util$Exit access$100(org.openjdk.tools.javah.JavahTask$JavahProcessor) -> access$100
org.openjdk.tools.javah.JavahTask$JavahProcessor$1 -> org.openjdk.tools.javah.JavahTask$JavahProcessor$1:
    org.openjdk.tools.javah.JavahTask$JavahProcessor this$1 -> this$1
    void <init>(org.openjdk.tools.javah.JavahTask$JavahProcessor) -> <init>
    java.lang.Void visitArray(org.openjdk.javax.lang.model.type.ArrayType,org.openjdk.javax.lang.model.util.Types) -> visitArray
    java.lang.Void visitDeclared(org.openjdk.javax.lang.model.type.DeclaredType,org.openjdk.javax.lang.model.util.Types) -> visitDeclared
    java.lang.Object visitDeclared(org.openjdk.javax.lang.model.type.DeclaredType,java.lang.Object) -> visitDeclared
    java.lang.Object visitArray(org.openjdk.javax.lang.model.type.ArrayType,java.lang.Object) -> visitArray
org.openjdk.tools.javah.JavahTask$Option -> org.openjdk.tools.javah.JavahTask$Option:
    boolean hasArg -> hasArg
    java.lang.String[] aliases -> aliases
    void <init>(boolean,java.lang.String[]) -> <init>
    boolean isHidden() -> isHidden
    boolean matches(java.lang.String) -> matches
    boolean ignoreRest() -> ignoreRest
    void process(org.openjdk.tools.javah.JavahTask,java.lang.String,java.lang.String) -> process
org.openjdk.tools.javah.JavahTool -> org.openjdk.tools.javah.JavahTool:
    void <init>() -> <init>
    org.openjdk.tools.javah.NativeHeaderTool$NativeHeaderTask getTask(java.io.Writer,org.openjdk.javax.tools.JavaFileManager,org.openjdk.javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable) -> getTask
    org.openjdk.javax.tools.StandardJavaFileManager getStandardFileManager(org.openjdk.javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset) -> getStandardFileManager
    int run(java.io.InputStream,java.io.OutputStream,java.io.OutputStream,java.lang.String[]) -> run
    java.util.Set getSourceVersions() -> getSourceVersions
    int isSupportedOption(java.lang.String) -> isSupportedOption
org.openjdk.tools.javah.LLNI -> org.openjdk.tools.javah.LLNI:
    char innerDelim -> innerDelim
    java.util.Set doneHandleTypes -> doneHandleTypes
    java.util.List fields -> fields
    java.util.List methods -> methods
    boolean doubleAlign -> doubleAlign
    int padFieldNum -> padFieldNum
    boolean isWindows -> isWindows
    void <init>(boolean,org.openjdk.tools.javah.Util) -> <init>
    java.lang.String getIncludes() -> getIncludes
    void write(java.io.OutputStream,org.openjdk.javax.lang.model.element.TypeElement) -> write
    void generateDeclsForClass(java.io.PrintWriter,org.openjdk.javax.lang.model.element.TypeElement,java.lang.String) -> generateDeclsForClass
    void genHandleType(java.io.PrintWriter,java.lang.String) -> genHandleType
    java.lang.String mangleClassName(java.lang.String) -> mangleClassName
    void forwardDecls(java.io.PrintWriter,org.openjdk.javax.lang.model.element.TypeElement) -> forwardDecls
    void forwardDeclsFromSig(java.io.PrintWriter,java.lang.String) -> forwardDeclsFromSig
    void structSectionForClass(java.io.PrintWriter,org.openjdk.javax.lang.model.element.TypeElement,java.lang.String) -> structSectionForClass
    boolean doField(org.openjdk.tools.javah.LLNI$FieldDefsRes,org.openjdk.javax.lang.model.element.VariableElement,java.lang.String,boolean) -> doField
    int doTwoWordFields(org.openjdk.tools.javah.LLNI$FieldDefsRes,org.openjdk.javax.lang.model.element.TypeElement,int,java.lang.String,boolean) -> doTwoWordFields
    java.lang.String fieldDefs(org.openjdk.javax.lang.model.element.TypeElement,java.lang.String) -> fieldDefs
    org.openjdk.tools.javah.LLNI$FieldDefsRes fieldDefs(org.openjdk.javax.lang.model.element.TypeElement,java.lang.String,boolean) -> fieldDefs
    java.lang.String addStructMember(org.openjdk.javax.lang.model.element.VariableElement,java.lang.String,boolean) -> addStructMember
    java.lang.String addStaticStructMember(org.openjdk.javax.lang.model.element.VariableElement,java.lang.String) -> addStaticStructMember
    void methodSectionForClass(java.io.PrintWriter,org.openjdk.javax.lang.model.element.TypeElement,java.lang.String) -> methodSectionForClass
    java.lang.String methodDecls(org.openjdk.javax.lang.model.element.TypeElement,java.lang.String) -> methodDecls
    java.lang.String methodDecl(org.openjdk.javax.lang.model.element.ExecutableElement,org.openjdk.javax.lang.model.element.TypeElement,java.lang.String) -> methodDecl
    boolean needLongName(org.openjdk.javax.lang.model.element.ExecutableElement,org.openjdk.javax.lang.model.element.TypeElement) -> needLongName
    java.lang.String jniMethodName(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.String,boolean) -> jniMethodName
    java.lang.String jniType(org.openjdk.javax.lang.model.type.TypeMirror) -> jniType
    java.lang.String llniType(org.openjdk.javax.lang.model.type.TypeMirror,boolean,boolean) -> llniType
    java.lang.String cRcvrDecl(org.openjdk.javax.lang.model.element.Element,java.lang.String) -> cRcvrDecl
    java.lang.String maskName(java.lang.String) -> maskName
    java.lang.String llniFieldName(org.openjdk.javax.lang.model.element.VariableElement) -> llniFieldName
    boolean isLongOrDouble(org.openjdk.javax.lang.model.type.TypeMirror) -> isLongOrDouble
    java.lang.String nameToIdentifier(java.lang.String) -> nameToIdentifier
    boolean isASCIILetterOrDigit(char) -> isASCIILetterOrDigit
    void <clinit>() -> <clinit>
org.openjdk.tools.javah.LLNI$1 -> org.openjdk.tools.javah.LLNI$1:
    org.openjdk.tools.javah.LLNI this$0 -> this$0
    void <init>(org.openjdk.tools.javah.LLNI) -> <init>
    java.lang.Boolean defaultAction(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Void) -> defaultAction
    java.lang.Boolean visitArray(org.openjdk.javax.lang.model.type.ArrayType,java.lang.Void) -> visitArray
    java.lang.Boolean visitPrimitive(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Void) -> visitPrimitive
    java.lang.Object visitArray(org.openjdk.javax.lang.model.type.ArrayType,java.lang.Object) -> visitArray
    java.lang.Object visitPrimitive(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitive
    java.lang.Object defaultAction(org.openjdk.javax.lang.model.type.TypeMirror,java.lang.Object) -> defaultAction
org.openjdk.tools.javah.LLNI$2 -> org.openjdk.tools.javah.LLNI$2:
    int[] $SwitchMap$javax$lang$model$type$TypeKind -> $SwitchMap$javax$lang$model$type$TypeKind
    void <clinit>() -> <clinit>
org.openjdk.tools.javah.LLNI$FieldDefsRes -> org.openjdk.tools.javah.LLNI$FieldDefsRes:
    java.lang.String className -> className
    org.openjdk.tools.javah.LLNI$FieldDefsRes parent -> parent
    java.lang.String s -> s
    int byteSize -> byteSize
    boolean bottomMost -> bottomMost
    boolean printedOne -> printedOne
    void <init>(org.openjdk.javax.lang.model.element.TypeElement,org.openjdk.tools.javah.LLNI$FieldDefsRes,boolean) -> <init>
org.openjdk.tools.javah.Main -> org.openjdk.tools.javah.Main:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    int run(java.lang.String[],java.io.PrintWriter) -> run
org.openjdk.tools.javah.Mangle -> org.openjdk.tools.javah.Mangle:
    org.openjdk.javax.lang.model.util.Elements elems -> elems
    org.openjdk.javax.lang.model.util.Types types -> types
    void <init>(org.openjdk.javax.lang.model.util.Elements,org.openjdk.javax.lang.model.util.Types) -> <init>
    java.lang.String mangle(java.lang.CharSequence,int) -> mangle
    java.lang.String mangleMethod(org.openjdk.javax.lang.model.element.ExecutableElement,org.openjdk.javax.lang.model.element.TypeElement,int) -> mangleMethod
    java.lang.String getInnerQualifiedName(org.openjdk.javax.lang.model.element.TypeElement) -> getInnerQualifiedName
    java.lang.String mangleChar(char) -> mangleChar
    java.lang.String signature(org.openjdk.javax.lang.model.element.ExecutableElement) -> signature
    boolean isalnum(char) -> isalnum
    boolean isprint(char) -> isprint
org.openjdk.tools.javah.Mangle$Type -> org.openjdk.tools.javah.Mangle$Type:
    int CLASS -> CLASS
    int FIELDSTUB -> FIELDSTUB
    int FIELD -> FIELD
    int JNI -> JNI
    int SIGNATURE -> SIGNATURE
    int METHOD_JDK_1 -> METHOD_JDK_1
    int METHOD_JNI_SHORT -> METHOD_JNI_SHORT
    int METHOD_JNI_LONG -> METHOD_JNI_LONG
    void <init>() -> <init>
org.openjdk.tools.javah.NativeHeaderTool -> org.openjdk.tools.javah.NativeHeaderTool:
    org.openjdk.tools.javah.NativeHeaderTool$NativeHeaderTask getTask(java.io.Writer,org.openjdk.javax.tools.JavaFileManager,org.openjdk.javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable) -> getTask
    org.openjdk.javax.tools.StandardJavaFileManager getStandardFileManager(org.openjdk.javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset) -> getStandardFileManager
org.openjdk.tools.javah.NativeHeaderTool$NativeHeaderTask -> org.openjdk.tools.javah.NativeHeaderTool$NativeHeaderTask:
    void setLocale(java.util.Locale) -> setLocale
    java.lang.Boolean call() -> call
    java.lang.Object call() -> call
org.openjdk.tools.javah.TypeSignature -> org.openjdk.tools.javah.TypeSignature:
    org.openjdk.javax.lang.model.util.Elements elems -> elems
    java.lang.String SIG_VOID -> SIG_VOID
    java.lang.String SIG_BOOLEAN -> SIG_BOOLEAN
    java.lang.String SIG_BYTE -> SIG_BYTE
    java.lang.String SIG_CHAR -> SIG_CHAR
    java.lang.String SIG_SHORT -> SIG_SHORT
    java.lang.String SIG_INT -> SIG_INT
    java.lang.String SIG_LONG -> SIG_LONG
    java.lang.String SIG_FLOAT -> SIG_FLOAT
    java.lang.String SIG_DOUBLE -> SIG_DOUBLE
    java.lang.String SIG_ARRAY -> SIG_ARRAY
    java.lang.String SIG_CLASS -> SIG_CLASS
    void <init>(org.openjdk.javax.lang.model.util.Elements) -> <init>
    java.lang.String getTypeSignature(java.lang.String) -> getTypeSignature
    java.lang.String getTypeSignature(java.lang.String,org.openjdk.javax.lang.model.type.TypeMirror) -> getTypeSignature
    java.lang.String getParamJVMSignature(java.lang.String) -> getParamJVMSignature
    java.lang.String getComponentType(java.lang.String) -> getComponentType
    int dimensions(org.openjdk.javax.lang.model.type.TypeMirror) -> dimensions
    java.lang.String qualifiedTypeName(org.openjdk.javax.lang.model.type.TypeMirror) -> qualifiedTypeName
org.openjdk.tools.javah.TypeSignature$1 -> org.openjdk.tools.javah.TypeSignature$1:
    org.openjdk.tools.javah.TypeSignature this$0 -> this$0
    void <init>(org.openjdk.tools.javah.TypeSignature) -> <init>
    org.openjdk.javax.lang.model.element.Name visitArray(org.openjdk.javax.lang.model.type.ArrayType,java.lang.Void) -> visitArray
    org.openjdk.javax.lang.model.element.Name visitDeclared(org.openjdk.javax.lang.model.type.DeclaredType,java.lang.Void) -> visitDeclared
    org.openjdk.javax.lang.model.element.Name visitPrimitive(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Void) -> visitPrimitive
    org.openjdk.javax.lang.model.element.Name visitNoType(org.openjdk.javax.lang.model.type.NoType,java.lang.Void) -> visitNoType
    org.openjdk.javax.lang.model.element.Name visitTypeVariable(org.openjdk.javax.lang.model.type.TypeVariable,java.lang.Void) -> visitTypeVariable
    java.lang.Object visitNoType(org.openjdk.javax.lang.model.type.NoType,java.lang.Object) -> visitNoType
    java.lang.Object visitTypeVariable(org.openjdk.javax.lang.model.type.TypeVariable,java.lang.Object) -> visitTypeVariable
    java.lang.Object visitDeclared(org.openjdk.javax.lang.model.type.DeclaredType,java.lang.Object) -> visitDeclared
    java.lang.Object visitArray(org.openjdk.javax.lang.model.type.ArrayType,java.lang.Object) -> visitArray
    java.lang.Object visitPrimitive(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitive
org.openjdk.tools.javah.TypeSignature$SignatureException -> org.openjdk.tools.javah.TypeSignature$SignatureException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.javah.Util -> org.openjdk.tools.javah.Util:
    boolean verbose -> verbose
    java.io.PrintWriter log -> log
    org.openjdk.javax.tools.DiagnosticListener dl -> dl
    java.util.ResourceBundle m -> m
    void <init>(java.io.PrintWriter,org.openjdk.javax.tools.DiagnosticListener) -> <init>
    void log(java.lang.String) -> log
    void initMessages() -> initMessages
    java.lang.String getText(java.lang.String,java.lang.Object[]) -> getText
    void bug(java.lang.String) -> bug
    void bug(java.lang.String,java.lang.Exception) -> bug
    void error(java.lang.String,java.lang.Object[]) -> error
    void fatal(java.lang.String,java.lang.Exception) -> fatal
    org.openjdk.javax.tools.Diagnostic createDiagnostic(org.openjdk.javax.tools.Diagnostic$Kind,java.lang.String,java.lang.Object[]) -> createDiagnostic
    java.lang.String access$000(org.openjdk.tools.javah.Util,java.lang.String,java.lang.Object[]) -> access$000
org.openjdk.tools.javah.Util$1 -> org.openjdk.tools.javah.Util$1:
    java.lang.String val$code -> val$code
    org.openjdk.javax.tools.Diagnostic$Kind val$kind -> val$kind
    java.lang.Object[] val$args -> val$args
    org.openjdk.tools.javah.Util this$0 -> this$0
    void <init>(org.openjdk.tools.javah.Util,java.lang.String,org.openjdk.javax.tools.Diagnostic$Kind,java.lang.Object[]) -> <init>
    java.lang.String getCode() -> getCode
    long getColumnNumber() -> getColumnNumber
    long getEndPosition() -> getEndPosition
    org.openjdk.javax.tools.Diagnostic$Kind getKind() -> getKind
    long getLineNumber() -> getLineNumber
    java.lang.String getMessage(java.util.Locale) -> getMessage
    long getPosition() -> getPosition
    org.openjdk.javax.tools.JavaFileObject getSource() -> getSource
    long getStartPosition() -> getStartPosition
    java.lang.Object getSource() -> getSource
org.openjdk.tools.javah.Util$Exit -> org.openjdk.tools.javah.Util$Exit:
    long serialVersionUID -> serialVersionUID
    int exitValue -> exitValue
    java.lang.Throwable cause -> cause
    void <init>(int) -> <init>
    void <init>(int,java.lang.Throwable) -> <init>
    void <init>(org.openjdk.tools.javah.Util$Exit) -> <init>
org.openjdk.tools.javah.resources.l10n -> org.openjdk.tools.javah.resources.l10n:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javah.resources.l10n_ja -> org.openjdk.tools.javah.resources.l10n_ja:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.javah.resources.l10n_zh_CN -> org.openjdk.tools.javah.resources.l10n_zh_CN:
    void <init>() -> <init>
    java.lang.Object[][] getContents() -> getContents
org.openjdk.tools.sjavac.AutoFlushWriter -> org.openjdk.tools.sjavac.AutoFlushWriter:
    void <init>(java.io.Writer) -> <init>
    void write(int) -> write
    void write(java.lang.String,int,int) -> write
    void write(char[],int,int) -> write
org.openjdk.tools.sjavac.BuildState -> org.openjdk.tools.sjavac.BuildState:
    java.util.Map modules -> modules
    java.util.Map packages -> packages
    java.util.Map sources -> sources
    java.util.Map artifacts -> artifacts
    java.util.Map dependents -> dependents
    void <init>() -> <init>
    java.util.Map modules() -> modules
    java.util.Map packages() -> packages
    java.util.Map sources() -> sources
    java.util.Map artifacts() -> artifacts
    java.util.Map dependents() -> dependents
    org.openjdk.tools.sjavac.Module lookupModule(java.lang.String) -> lookupModule
    org.openjdk.tools.sjavac.Module findModuleFromPackageName(java.lang.String) -> findModuleFromPackageName
    void flattenPackagesSourcesAndArtifacts(java.util.Map) -> flattenPackagesSourcesAndArtifacts
    void flattenArtifacts(java.util.Map) -> flattenArtifacts
    void calculateDependents() -> calculateDependents
    void checkInternalState(java.lang.String,boolean,java.util.Map) -> checkInternalState
    org.openjdk.tools.sjavac.Module loadModule(java.lang.String) -> loadModule
    org.openjdk.tools.sjavac.Package loadPackage(org.openjdk.tools.sjavac.Module,java.lang.String) -> loadPackage
    org.openjdk.tools.sjavac.Source loadSource(org.openjdk.tools.sjavac.Package,java.lang.String,boolean) -> loadSource
    void copyPackagesExcept(org.openjdk.tools.sjavac.BuildState,java.util.Set,java.util.Set) -> copyPackagesExcept
org.openjdk.tools.sjavac.CleanProperties -> org.openjdk.tools.sjavac.CleanProperties:
    void <init>() -> <init>
    void setExtra(java.lang.String) -> setExtra
    void setExtra(org.openjdk.tools.sjavac.options.Options) -> setExtra
    boolean transform(org.openjdk.tools.sjavac.comp.CompilationService,java.util.Map,java.util.Set,java.util.Map,java.net.URI,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,int,boolean,int) -> transform
    boolean clean(java.lang.String,java.lang.String,java.io.File,java.io.File,int,java.util.Map) -> clean
org.openjdk.tools.sjavac.CompileChunk -> org.openjdk.tools.sjavac.CompileChunk:
    int numPackages -> numPackages
    int numDependents -> numDependents
    java.util.Set srcs -> srcs
    java.lang.StringBuilder pkgNames -> pkgNames
    java.lang.String pkgFromTos -> pkgFromTos
    void <init>() -> <init>
    int compareTo(org.openjdk.tools.sjavac.CompileChunk) -> compareTo
    boolean equal(org.openjdk.tools.sjavac.CompileChunk) -> equal
    int compareTo(java.lang.Object) -> compareTo
org.openjdk.tools.sjavac.CompileJavaPackages -> org.openjdk.tools.sjavac.CompileJavaPackages:
    int limitOnConcurrency -> limitOnConcurrency
    org.openjdk.tools.sjavac.options.Options args -> args
    void <init>() -> <init>
    void setExtra(java.lang.String) -> setExtra
    void setExtra(org.openjdk.tools.sjavac.options.Options) -> setExtra
    boolean transform(org.openjdk.tools.sjavac.comp.CompilationService,java.util.Map,java.util.Set,java.util.Map,java.net.URI,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,int,boolean,int) -> transform
    org.openjdk.tools.sjavac.CompileChunk[] createCompileChunks(java.util.Map,java.util.Map,int,int) -> createCompileChunks
    org.openjdk.tools.sjavac.server.CompilationSubResult lambda$transform$0(org.openjdk.tools.sjavac.Log,org.openjdk.tools.sjavac.comp.CompilationService,java.lang.String,org.openjdk.tools.sjavac.CompileChunk,java.util.Set,java.lang.Object) -> lambda$transform$0
org.openjdk.tools.sjavac.CompileProperties -> org.openjdk.tools.sjavac.CompileProperties:
    java.lang.String extra -> extra
    java.lang.String FORMAT -> FORMAT
    char[] hexDigit -> hexDigit
    void <init>() -> <init>
    void setExtra(java.lang.String) -> setExtra
    void setExtra(org.openjdk.tools.sjavac.options.Options) -> setExtra
    boolean transform(org.openjdk.tools.sjavac.comp.CompilationService,java.util.Map,java.util.Set,java.util.Map,java.net.URI,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,int,boolean,int) -> transform
    boolean compile(java.lang.String,java.lang.String,java.io.File,java.io.File,int,java.util.Map) -> compile
    java.lang.String escape(java.lang.String) -> escape
    char toHex(int) -> toHex
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.CopyFile -> org.openjdk.tools.sjavac.CopyFile:
    void <init>() -> <init>
    void setExtra(java.lang.String) -> setExtra
    void setExtra(org.openjdk.tools.sjavac.options.Options) -> setExtra
    boolean transform(org.openjdk.tools.sjavac.comp.CompilationService,java.util.Map,java.util.Set,java.util.Map,java.net.URI,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,int,boolean,int) -> transform
org.openjdk.tools.sjavac.JavacState -> org.openjdk.tools.sjavac.JavacState:
    java.lang.String theArgs -> theArgs
    int numCores -> numCores
    java.io.File javacState -> javacState
    org.openjdk.tools.sjavac.BuildState prev -> prev
    org.openjdk.tools.sjavac.BuildState now -> now
    boolean needsSaving -> needsSaving
    boolean newJavacState -> newJavacState
    java.util.Set taintedPackages -> taintedPackages
    java.util.Set packagesWithChangedPublicApis -> packagesWithChangedPublicApis
    java.util.Set taintedModules -> taintedModules
    java.util.Set recompiledPackages -> recompiledPackages
    java.io.File binDir -> binDir
    java.io.File gensrcDir -> gensrcDir
    java.io.File headerDir -> headerDir
    java.io.File stateDir -> stateDir
    java.util.Set binArtifacts -> binArtifacts
    java.util.Set gensrcArtifacts -> gensrcArtifacts
    java.util.Set headerArtifacts -> headerArtifacts
    java.util.Set removedSources -> removedSources
    java.util.Set addedSources -> addedSources
    java.util.Set modifiedSources -> modifiedSources
    java.util.Set visibleSrcs -> visibleSrcs
    org.openjdk.tools.sjavac.CompileJavaPackages compileJavaPackages -> compileJavaPackages
    org.openjdk.tools.sjavac.options.Options options -> options
    void <init>(org.openjdk.tools.sjavac.options.Options,boolean) -> <init>
    org.openjdk.tools.sjavac.BuildState prev() -> prev
    org.openjdk.tools.sjavac.BuildState now() -> now
    java.lang.String[] removeArgsNotAffectingState(java.lang.String[]) -> removeArgsNotAffectingState
    void setVisibleSources(java.util.Map) -> setVisibleSources
    boolean isIncremental() -> isIncremental
    void findAllArtifacts() -> findAllArtifacts
    java.util.Map fetchPrevArtifacts(java.lang.String) -> fetchPrevArtifacts
    void deleteClassArtifactsInTaintedPackages() -> deleteClassArtifactsInTaintedPackages
    void needsSaving() -> needsSaving
    void save() -> save
    org.openjdk.tools.sjavac.JavacState load(org.openjdk.tools.sjavac.options.Options) -> load
    void taintPackage(java.lang.String,java.lang.String) -> taintPackage
    java.util.Set taintedPackages() -> taintedPackages
    void clearTaintedPackages() -> clearTaintedPackages
    void checkSourceStatus(boolean) -> checkSourceStatus
    java.util.Map getJavaSuffixRule() -> getJavaSuffixRule
    void taintPackagesThatMissArtifacts() -> taintPackagesThatMissArtifacts
    void taintPackagesDependingOnChangedPackages(java.util.Set,java.util.Set) -> taintPackagesDependingOnChangedPackages
    void taintPackagesDependingOnChangedClasspathPackages() -> taintPackagesDependingOnChangedClasspathPackages
    void removeUnidentifiedArtifacts() -> removeUnidentifiedArtifacts
    void removeSuperfluousArtifacts(java.util.Set) -> removeSuperfluousArtifacts
    java.util.Set calculateRemovedSources() -> calculateRemovedSources
    java.util.Set calculateAddedSources() -> calculateAddedSources
    java.util.Set calculateModifiedSources() -> calculateModifiedSources
    void deleteContents(java.io.File) -> deleteContents
    void performCopying(java.io.File,java.util.Map) -> performCopying
    void performTranslation(java.io.File,java.util.Map) -> performTranslation
    boolean performJavaCompilations(org.openjdk.tools.sjavac.comp.CompilationService,org.openjdk.tools.sjavac.options.Options,java.util.Set,boolean[]) -> performJavaCompilations
    void addFileToTransform(java.util.Map,org.openjdk.tools.sjavac.Transformer,org.openjdk.tools.sjavac.Source) -> addFileToTransform
    boolean perform(org.openjdk.tools.sjavac.comp.CompilationService,java.io.File,java.util.Map) -> perform
    java.util.Set findAllFiles(java.io.File) -> findAllFiles
    void recurse(java.io.File,java.util.Set) -> recurse
    void compareWithMakefileList(java.io.File) -> compareWithMakefileList
org.openjdk.tools.sjavac.Log -> org.openjdk.tools.sjavac.Log:
    org.openjdk.tools.sjavac.Log stdOutErr -> stdOutErr
    java.lang.ThreadLocal loggers -> loggers
    java.io.PrintWriter err -> err
    java.io.PrintWriter out -> out
    org.openjdk.tools.sjavac.Log$Level level -> level
    void <init>(java.io.Writer,java.io.Writer) -> <init>
    void setLogForCurrentThread(org.openjdk.tools.sjavac.Log) -> setLogForCurrentThread
    void setLogLevel(java.lang.String) -> setLogLevel
    void setLogLevel(org.openjdk.tools.sjavac.Log$Level) -> setLogLevel
    void trace(java.lang.String) -> trace
    void debug(java.lang.String) -> debug
    void info(java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.Throwable) -> error
    void log(org.openjdk.tools.sjavac.Log$Level,java.lang.String) -> log
    void debug(java.lang.Throwable) -> debug
    void log(org.openjdk.tools.sjavac.Log$Level,java.lang.Throwable) -> log
    boolean isDebugging() -> isDebugging
    boolean isLevelLogged(org.openjdk.tools.sjavac.Log$Level) -> isLevelLogged
    org.openjdk.tools.sjavac.Log get() -> get
    void printLogMsg(org.openjdk.tools.sjavac.Log$Level,java.lang.String) -> printLogMsg
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.Log$Level -> org.openjdk.tools.sjavac.Log$Level:
    org.openjdk.tools.sjavac.Log$Level ERROR -> ERROR
    org.openjdk.tools.sjavac.Log$Level WARN -> WARN
    org.openjdk.tools.sjavac.Log$Level INFO -> INFO
    org.openjdk.tools.sjavac.Log$Level DEBUG -> DEBUG
    org.openjdk.tools.sjavac.Log$Level TRACE -> TRACE
    org.openjdk.tools.sjavac.Log$Level[] $VALUES -> $VALUES
    org.openjdk.tools.sjavac.Log$Level[] values() -> values
    org.openjdk.tools.sjavac.Log$Level valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.Main -> org.openjdk.tools.sjavac.Main:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    int go(java.lang.String[]) -> go
    boolean lambda$go$0(java.lang.String) -> lambda$go$0
org.openjdk.tools.sjavac.Module -> org.openjdk.tools.sjavac.Module:
    java.lang.String name -> name
    java.lang.String dirname -> dirname
    java.util.Map packages -> packages
    java.util.Map sources -> sources
    java.util.Map artifacts -> artifacts
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String name() -> name
    java.lang.String dirname() -> dirname
    java.util.Map packages() -> packages
    java.util.Map sources() -> sources
    java.util.Map artifacts() -> artifacts
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.openjdk.tools.sjavac.Module) -> compareTo
    void save(java.lang.StringBuilder) -> save
    org.openjdk.tools.sjavac.Module load(java.lang.String) -> load
    void saveModules(java.util.Map,java.lang.StringBuilder) -> saveModules
    void addPackage(org.openjdk.tools.sjavac.Package) -> addPackage
    org.openjdk.tools.sjavac.Package lookupPackage(java.lang.String) -> lookupPackage
    void addSource(java.lang.String,org.openjdk.tools.sjavac.Source) -> addSource
    org.openjdk.tools.sjavac.Source lookupSource(java.lang.String) -> lookupSource
    void addArtifacts(java.lang.String,java.util.Set) -> addArtifacts
    void setDependencies(java.lang.String,java.util.Map,boolean) -> setDependencies
    void setPubapi(java.lang.String,org.openjdk.tools.sjavac.pubapi.PubApi) -> setPubapi
    boolean hasPubapiChanged(java.lang.String,org.openjdk.tools.sjavac.pubapi.PubApi) -> hasPubapiChanged
    int compareTo(java.lang.Object) -> compareTo
org.openjdk.tools.sjavac.Package -> org.openjdk.tools.sjavac.Package:
    org.openjdk.tools.sjavac.Module mod -> mod
    java.lang.String name -> name
    java.lang.String dirname -> dirname
    java.util.Set dependents -> dependents
    java.util.Map dependencies -> dependencies
    java.util.Map cpDependencies -> cpDependencies
    org.openjdk.tools.sjavac.pubapi.PubApi pubApi -> pubApi
    java.util.Map sources -> sources
    java.util.Map artifacts -> artifacts
    java.util.regex.Pattern DEP_PATTERN -> DEP_PATTERN
    void <init>(org.openjdk.tools.sjavac.Module,java.lang.String) -> <init>
    org.openjdk.tools.sjavac.Module mod() -> mod
    java.lang.String name() -> name
    java.lang.String dirname() -> dirname
    java.util.Map sources() -> sources
    java.util.Map artifacts() -> artifacts
    org.openjdk.tools.sjavac.pubapi.PubApi getPubApi() -> getPubApi
    java.util.Map typeDependencies() -> typeDependencies
    java.util.Map typeClasspathDependencies() -> typeClasspathDependencies
    java.util.Set dependents() -> dependents
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.openjdk.tools.sjavac.Package) -> compareTo
    void addSource(org.openjdk.tools.sjavac.Source) -> addSource
    void parseAndAddDependency(java.lang.String,boolean) -> parseAndAddDependency
    void addDependency(java.lang.String,java.lang.String,boolean) -> addDependency
    void addDependent(java.lang.String) -> addDependent
    boolean existsInJavacState() -> existsInJavacState
    boolean hasPubApiChanged(org.openjdk.tools.sjavac.pubapi.PubApi) -> hasPubApiChanged
    void setPubapi(org.openjdk.tools.sjavac.pubapi.PubApi) -> setPubapi
    void setDependencies(java.util.Map,boolean) -> setDependencies
    void save(java.lang.StringBuilder) -> save
    org.openjdk.tools.sjavac.Package load(org.openjdk.tools.sjavac.Module,java.lang.String) -> load
    void saveDependencies(java.lang.StringBuilder) -> saveDependencies
    void savePubapi(java.lang.StringBuilder) -> savePubapi
    void savePackages(java.util.Map,java.lang.StringBuilder) -> savePackages
    void addArtifact(java.lang.String) -> addArtifact
    void addArtifact(java.io.File) -> addArtifact
    void addArtifacts(java.util.Set) -> addArtifacts
    void setArtifacts(java.util.Set) -> setArtifacts
    void loadArtifact(java.lang.String) -> loadArtifact
    void saveArtifacts(java.lang.StringBuilder) -> saveArtifacts
    void deleteArtifacts() -> deleteArtifacts
    int compareTo(java.lang.Object) -> compareTo
    java.util.stream.Stream lambda$savePubapi$0(java.lang.String) -> lambda$savePubapi$0
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.ProblemException -> org.openjdk.tools.sjavac.ProblemException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
org.openjdk.tools.sjavac.PubApiExtractor -> org.openjdk.tools.sjavac.PubApiExtractor:
    org.openjdk.tools.javac.util.Context context -> context
    org.openjdk.javax.tools.JavaCompiler$CompilationTask task -> task
    org.openjdk.tools.sjavac.comp.SmartFileManager fileManager -> fileManager
    void <init>(org.openjdk.tools.sjavac.options.Options) -> <init>
    org.openjdk.tools.sjavac.pubapi.PubApi getPubApi(java.lang.String) -> getPubApi
    void close() -> close
org.openjdk.tools.sjavac.Source -> org.openjdk.tools.sjavac.Source:
    org.openjdk.tools.sjavac.Package pkg -> pkg
    java.lang.String name -> name
    java.lang.String suffix -> suffix
    long lastModified -> lastModified
    java.io.File file -> file
    boolean isGenerated -> isGenerated
    boolean linkedOnly -> linkedOnly
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.openjdk.tools.sjavac.Source) -> compareTo
    int hashCode() -> hashCode
    void <init>(org.openjdk.tools.sjavac.Module,java.lang.String,java.io.File) -> <init>
    void <init>(org.openjdk.tools.sjavac.Package,java.lang.String,long) -> <init>
    java.lang.String name() -> name
    java.lang.String suffix() -> suffix
    org.openjdk.tools.sjavac.Package pkg() -> pkg
    java.io.File file() -> file
    long lastModified() -> lastModified
    void setPackage(org.openjdk.tools.sjavac.Package) -> setPackage
    void markAsGenerated() -> markAsGenerated
    boolean isGenerated() -> isGenerated
    void markAsLinkedOnly() -> markAsLinkedOnly
    boolean isLinkedOnly() -> isLinkedOnly
    void save(java.lang.StringBuilder) -> save
    org.openjdk.tools.sjavac.Source load(org.openjdk.tools.sjavac.Package,java.lang.String,boolean) -> load
    void saveSources(java.util.Map,java.lang.StringBuilder) -> saveSources
    void scanRoot(java.io.File,java.util.Set,java.util.List,java.util.List,java.util.Map,java.util.Map,org.openjdk.tools.sjavac.Module,boolean,boolean,boolean) -> scanRoot
    java.util.List createPathMatchers(java.nio.file.FileSystem,java.util.List) -> createPathMatchers
    java.lang.String packageOfJavaFile(java.nio.file.Path,java.nio.file.Path) -> packageOfJavaFile
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    java.lang.String access$000(java.nio.file.Path,java.nio.file.Path) -> access$000
org.openjdk.tools.sjavac.Source$1 -> org.openjdk.tools.sjavac.Source$1:
    java.io.File val$root -> val$root
    java.util.List val$includeMatchers -> val$includeMatchers
    java.util.List val$excludeMatchers -> val$excludeMatchers
    java.util.Set val$suffixes -> val$suffixes
    java.util.Map val$foundFiles -> val$foundFiles
    org.openjdk.tools.sjavac.Module val$currentModule -> val$currentModule
    boolean val$inLinksrc -> val$inLinksrc
    boolean val$inGensrc -> val$inGensrc
    void <init>(java.io.File,java.util.List,java.util.List,java.util.Set,java.util.Map,org.openjdk.tools.sjavac.Module,boolean,boolean) -> <init>
    java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes) -> visitFile
    java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes) -> visitFile
    boolean lambda$visitFile$1(java.nio.file.Path,java.nio.file.PathMatcher) -> lambda$visitFile$1
    boolean lambda$visitFile$0(java.nio.file.Path,java.nio.file.PathMatcher) -> lambda$visitFile$0
org.openjdk.tools.sjavac.Transformer -> org.openjdk.tools.sjavac.Transformer:
    boolean transform(org.openjdk.tools.sjavac.comp.CompilationService,java.util.Map,java.util.Set,java.util.Map,java.net.URI,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,int,boolean,int) -> transform
    void setExtra(java.lang.String) -> setExtra
    void setExtra(org.openjdk.tools.sjavac.options.Options) -> setExtra
org.openjdk.tools.sjavac.Util -> org.openjdk.tools.sjavac.Util:
    void <init>() -> <init>
    java.lang.String toFileSystemPath(java.lang.String) -> toFileSystemPath
    java.lang.String justPackageName(java.lang.String) -> justPackageName
    java.lang.String extractStringOption(java.lang.String,java.lang.String) -> extractStringOption
    java.lang.String extractStringOption(java.lang.String,java.lang.String,java.lang.String) -> extractStringOption
    boolean extractBooleanOption(java.lang.String,java.lang.String,boolean) -> extractBooleanOption
    int extractIntOption(java.lang.String,java.lang.String) -> extractIntOption
    int extractIntOption(java.lang.String,java.lang.String,int) -> extractIntOption
    java.lang.String pkgNameOfClassName(java.lang.String) -> pkgNameOfClassName
    java.lang.String cleanSubOptions(java.util.Set,java.lang.String) -> cleanSubOptions
    java.util.Set set(java.lang.String[]) -> set
    java.lang.String normalizeDriveLetter(java.lang.String) -> normalizeDriveLetter
    java.lang.String findServerSettings(java.lang.String[]) -> findServerSettings
    java.util.Set union(java.util.Set,java.util.Set) -> union
    java.util.Set subtract(java.util.Set,java.util.Set) -> subtract
    java.lang.String getStackTrace(java.lang.Throwable) -> getStackTrace
    java.io.File pathToFile(java.nio.file.Path) -> pathToFile
    java.util.Set intersection(java.util.Collection,java.util.Collection) -> intersection
    java.util.Map indexBy(java.util.Collection,java.util.function.Function) -> indexBy
    java.lang.String fileSuffix(java.nio.file.Path) -> fileSuffix
    java.util.stream.Stream getLines(java.lang.String) -> getLines
    java.lang.Object lambda$indexBy$0(java.lang.Object) -> lambda$indexBy$0
org.openjdk.tools.sjavac.client.ClientMain -> org.openjdk.tools.sjavac.client.ClientMain:
    void <init>() -> <init>
    int run(java.lang.String[]) -> run
    int run(java.lang.String[],java.io.Writer,java.io.Writer) -> run
org.openjdk.tools.sjavac.client.PortFileInaccessibleException -> org.openjdk.tools.sjavac.client.PortFileInaccessibleException:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Throwable) -> <init>
org.openjdk.tools.sjavac.client.SjavacClient -> org.openjdk.tools.sjavac.client.SjavacClient:
    java.lang.String id -> id
    org.openjdk.tools.sjavac.server.PortFile portFile -> portFile
    int keepalive -> keepalive
    int poolsize -> poolsize
    java.lang.String sjavacForkCmd -> sjavacForkCmd
    int CONNECTION_TIMEOUT -> CONNECTION_TIMEOUT
    int MAX_CONNECT_ATTEMPTS -> MAX_CONNECT_ATTEMPTS
    int WAIT_BETWEEN_CONNECT_ATTEMPTS -> WAIT_BETWEEN_CONNECT_ATTEMPTS
    java.lang.String settings -> settings
    void <init>(org.openjdk.tools.sjavac.options.Options) -> <init>
    java.lang.String serverSettings() -> serverSettings
    org.openjdk.tools.javac.main.Main$Result compile(java.lang.String[]) -> compile
    java.net.Socket tryConnect() -> tryConnect
    java.net.Socket makeConnectionAttempt() -> makeConnectionAttempt
    void makeSureServerIsRunning(org.openjdk.tools.sjavac.server.PortFile) -> makeSureServerIsRunning
    void shutdown() -> shutdown
    void fork(java.lang.String,org.openjdk.tools.sjavac.server.PortFile,int,int) -> fork
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.comp.CompilationService -> org.openjdk.tools.sjavac.comp.CompilationService:
    void <init>() -> <init>
    org.openjdk.tools.sjavac.server.SysInfo getSysInfo() -> getSysInfo
    org.openjdk.tools.sjavac.server.CompilationSubResult compile(java.lang.String,java.lang.String,java.lang.String[],java.util.List,java.util.Set,java.util.Set) -> compile
    void logJavacInvocation(java.lang.String[]) -> logJavacInvocation
org.openjdk.tools.sjavac.comp.FileObjectWithLocation -> org.openjdk.tools.sjavac.comp.FileObjectWithLocation:
    org.openjdk.javax.tools.JavaFileManager$Location loc -> loc
    void <init>(org.openjdk.javax.tools.FileObject,org.openjdk.javax.tools.JavaFileManager$Location) -> <init>
    org.openjdk.javax.tools.JavaFileManager$Location getLocation() -> getLocation
    org.openjdk.javax.tools.FileObject getDelegate() -> getDelegate
    java.lang.String toString() -> toString
org.openjdk.tools.sjavac.comp.JavaFileObjectWithLocation -> org.openjdk.tools.sjavac.comp.JavaFileObjectWithLocation:
    org.openjdk.javax.tools.JavaFileManager$Location loc -> loc
    void <init>(org.openjdk.javax.tools.JavaFileObject,org.openjdk.javax.tools.JavaFileManager$Location) -> <init>
    org.openjdk.javax.tools.JavaFileManager$Location getLocation() -> getLocation
    org.openjdk.javax.tools.JavaFileObject getDelegate() -> getDelegate
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.openjdk.tools.sjavac.comp.PathAndPackageVerifier -> org.openjdk.tools.sjavac.comp.PathAndPackageVerifier:
    java.util.Set misplacedCompilationUnits -> misplacedCompilationUnits
    void <init>() -> <init>
    void finished(org.openjdk.source.util.TaskEvent) -> finished
    boolean errorsDiscovered() -> errorsDiscovered
    boolean checkPathAndPackage(java.nio.file.Path,org.openjdk.tools.javac.tree.JCTree) -> checkPathAndPackage
org.openjdk.tools.sjavac.comp.PathAndPackageVerifier$EnclosingPkgIterator -> org.openjdk.tools.sjavac.comp.PathAndPackageVerifier$EnclosingPkgIterator:
    org.openjdk.tools.javac.tree.JCTree next -> next
    void <init>(org.openjdk.tools.javac.tree.JCTree) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    java.lang.Object next() -> next
org.openjdk.tools.sjavac.comp.PathAndPackageVerifier$ParentIterator -> org.openjdk.tools.sjavac.comp.PathAndPackageVerifier$ParentIterator:
    java.nio.file.Path next -> next
    void <init>(java.nio.file.Path) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    java.lang.Object next() -> next
org.openjdk.tools.sjavac.comp.PooledSjavac -> org.openjdk.tools.sjavac.comp.PooledSjavac:
    org.openjdk.tools.sjavac.server.Sjavac delegate -> delegate
    java.util.concurrent.ExecutorService pool -> pool
    void <init>(org.openjdk.tools.sjavac.server.Sjavac,int) -> <init>
    org.openjdk.tools.javac.main.Main$Result compile(java.lang.String[]) -> compile
    void shutdown() -> shutdown
    org.openjdk.tools.javac.main.Main$Result lambda$compile$0(org.openjdk.tools.sjavac.Log,java.lang.String[]) -> lambda$compile$0
org.openjdk.tools.sjavac.comp.PubAPIs -> org.openjdk.tools.sjavac.comp.PubAPIs:
    org.openjdk.tools.javac.util.Context$Key pubApisKey -> pubApisKey
    org.openjdk.tools.javac.util.Log log -> log
    java.util.Map publicApiPerClass -> publicApiPerClass
    org.openjdk.tools.sjavac.comp.PubAPIs instance(org.openjdk.tools.javac.util.Context) -> instance
    void <init>(org.openjdk.tools.javac.util.Context) -> <init>
    java.util.Map getPubapis(java.util.Collection,boolean) -> getPubapis
    void visitPubapi(org.openjdk.javax.lang.model.element.Element) -> visitPubapi
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.comp.PubapiVisitor -> org.openjdk.tools.sjavac.comp.PubapiVisitor:
    org.openjdk.tools.sjavac.pubapi.PubApi collectedApi -> collectedApi
    void <init>() -> <init>
    boolean isNonPrivate(org.openjdk.javax.lang.model.element.Element) -> isNonPrivate
    java.lang.Void visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Void) -> visitType
    boolean isAnonymous(org.openjdk.javax.lang.model.element.TypeElement) -> isAnonymous
    java.lang.String encodeChar(int) -> encodeChar
    java.lang.Void visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Void) -> visitVariable
    java.lang.Void visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Void) -> visitExecutable
    java.util.List getTypeParameters(java.util.List) -> getTypeParameters
    java.util.List getParamTypes(org.openjdk.javax.lang.model.element.ExecutableElement) -> getParamTypes
    java.util.List getTypeDescs(java.util.List) -> getTypeDescs
    org.openjdk.tools.sjavac.pubapi.PubApi getCollectedPubApi() -> getCollectedPubApi
    java.lang.Object visitVariable(org.openjdk.javax.lang.model.element.VariableElement,java.lang.Object) -> visitVariable
    java.lang.Object visitExecutable(org.openjdk.javax.lang.model.element.ExecutableElement,java.lang.Object) -> visitExecutable
    java.lang.Object visitType(org.openjdk.javax.lang.model.element.TypeElement,java.lang.Object) -> visitType
    org.openjdk.tools.sjavac.pubapi.PubApiTypeParam lambda$getTypeParameters$0(org.openjdk.javax.lang.model.element.TypeParameterElement) -> lambda$getTypeParameters$0
org.openjdk.tools.sjavac.comp.SjavacImpl -> org.openjdk.tools.sjavac.comp.SjavacImpl:
    void <init>() -> <init>
    org.openjdk.tools.javac.main.Main$Result compile(java.lang.String[]) -> compile
    void shutdown() -> shutdown
    boolean validateOptions(org.openjdk.tools.sjavac.options.Options) -> validateOptions
    boolean srcDstOverlap(java.util.List,java.nio.file.Path) -> srcDstOverlap
    boolean isOverlapping(java.nio.file.Path,java.nio.file.Path) -> isOverlapping
    boolean createIfMissing(java.nio.file.Path) -> createIfMissing
    void findSourceFiles(java.util.List,java.util.Set,java.util.Map,java.util.Map,org.openjdk.tools.sjavac.Module,boolean,boolean) -> findSourceFiles
    void printRound(int) -> printRound
    java.lang.String[] lambda$compile$1(int) -> lambda$compile$1
    boolean lambda$compile$0(java.lang.String) -> lambda$compile$0
org.openjdk.tools.sjavac.comp.SmartFileManager -> org.openjdk.tools.sjavac.comp.SmartFileManager:
    java.util.Set visibleSources -> visibleSources
    java.util.Map packageArtifacts -> packageArtifacts
    void <init>(org.openjdk.javax.tools.JavaFileManager) -> <init>
    void setVisibleSources(java.util.Set) -> setVisibleSources
    void cleanArtifacts() -> cleanArtifacts
    void setSymbolFileEnabled(boolean) -> setSymbolFileEnabled
    java.lang.String inferBinaryName(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> inferBinaryName
    java.util.Map getPackageArtifacts() -> getPackageArtifacts
    java.lang.Iterable list(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.util.Set,boolean) -> list
    org.openjdk.javax.tools.JavaFileObject getJavaFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> getJavaFileForInput
    org.openjdk.javax.tools.JavaFileObject getJavaFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind,org.openjdk.javax.tools.FileObject) -> getJavaFileForOutput
    org.openjdk.javax.tools.FileObject getFileForInput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String) -> getFileForInput
    boolean isModuleInfo(org.openjdk.javax.tools.FileObject) -> isModuleInfo
    org.openjdk.javax.tools.FileObject getFileForOutput(org.openjdk.javax.tools.JavaFileManager$Location,java.lang.String,java.lang.String,org.openjdk.javax.tools.FileObject) -> getFileForOutput
    org.openjdk.javax.tools.JavaFileManager$Location getLocationForModule(org.openjdk.javax.tools.JavaFileManager$Location,org.openjdk.javax.tools.JavaFileObject) -> getLocationForModule
    java.lang.String packageNameFromFileName(java.lang.String) -> packageNameFromFileName
    void addArtifact(java.lang.String,java.net.URI) -> addArtifact
    org.openjdk.javax.tools.JavaFileObject locWrap(org.openjdk.javax.tools.JavaFileObject,org.openjdk.javax.tools.JavaFileManager$Location) -> locWrap
    org.openjdk.javax.tools.FileObject locWrap(org.openjdk.javax.tools.FileObject,org.openjdk.javax.tools.JavaFileManager$Location) -> locWrap
    boolean isSameFile(org.openjdk.javax.tools.FileObject,org.openjdk.javax.tools.FileObject) -> isSameFile
    org.openjdk.tools.javac.util.ListBuffer locWrapMany(java.lang.Iterable,org.openjdk.javax.tools.JavaFileManager$Location) -> locWrapMany
    org.openjdk.javax.tools.FileObject locUnwrap(org.openjdk.javax.tools.FileObject) -> locUnwrap
    org.openjdk.javax.tools.JavaFileObject locUnwrap(org.openjdk.javax.tools.JavaFileObject) -> locUnwrap
org.openjdk.tools.sjavac.comp.SmartFileObject -> org.openjdk.tools.sjavac.comp.SmartFileObject:
    org.openjdk.javax.tools.JavaFileObject file -> file
    java.lang.String lineseparator -> lineseparator
    void <init>(org.openjdk.javax.tools.JavaFileObject) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.openjdk.javax.tools.JavaFileObject$Kind getKind() -> getKind
    boolean isNameCompatible(java.lang.String,org.openjdk.javax.tools.JavaFileObject$Kind) -> isNameCompatible
    java.net.URI toUri() -> toUri
    java.lang.String getName() -> getName
    java.io.InputStream openInputStream() -> openInputStream
    java.io.OutputStream openOutputStream() -> openOutputStream
    java.lang.CharSequence getCharContent(boolean) -> getCharContent
    java.io.Writer openWriter() -> openWriter
    long getLastModified() -> getLastModified
    boolean delete() -> delete
    org.openjdk.javax.lang.model.element.Modifier getAccessLevel() -> getAccessLevel
    org.openjdk.javax.lang.model.element.NestingKind getNestingKind() -> getNestingKind
    java.io.Reader openReader(boolean) -> openReader
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.comp.SmartWriter -> org.openjdk.tools.sjavac.comp.SmartWriter:
    java.lang.String name -> name
    org.openjdk.javax.tools.JavaFileObject file -> file
    java.lang.String oldContent -> oldContent
    java.io.StringWriter newContent -> newContent
    boolean closed -> closed
    void <init>(org.openjdk.javax.tools.JavaFileObject,java.lang.String,java.lang.String) -> <init>
    void write(char[],int,int) -> write
    void close() -> close
    void flush() -> flush
org.openjdk.tools.sjavac.comp.dependencies.NewDependencyCollector -> org.openjdk.tools.sjavac.comp.dependencies.NewDependencyCollector:
    org.openjdk.tools.javac.util.Context context -> context
    java.util.Collection explicitJFOs -> explicitJFOs
    java.util.Map deps -> deps
    java.util.Map cpDeps -> cpDeps
    void <init>(org.openjdk.tools.javac.util.Context,java.util.Collection) -> <init>
    void finished(org.openjdk.source.util.TaskEvent) -> finished
    java.util.Map getDependencies(boolean) -> getDependencies
    java.util.Set getDependencyNodes(org.openjdk.tools.javac.util.Context,java.util.Collection,boolean) -> getDependencyNodes
    void collectPubApisOfDependencies(org.openjdk.tools.javac.util.Context,java.util.Collection) -> collectPubApisOfDependencies
    org.openjdk.javax.tools.JavaFileManager$Location getLocationOf(org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> getLocationOf
    java.util.Map getDependencies(org.openjdk.tools.javac.util.Context,java.util.Collection,boolean) -> getDependencies
    boolean isSymbolRelevant(boolean,org.openjdk.tools.javac.code.Symbol$ClassSymbol) -> isSymbolRelevant
    java.util.Set allSupertypes(org.openjdk.tools.javac.code.Symbol$TypeSymbol) -> allSupertypes
    java.util.Collection getAllDependencies(org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode) -> getAllDependencies
    java.util.stream.Stream lambda$getAllDependencies$3(org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode,org.openjdk.tools.javac.util.GraphUtils$DependencyKind) -> lambda$getAllDependencies$3
    boolean lambda$getDependencyNodes$2(boolean,java.util.Collection,org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode) -> lambda$getDependencyNodes$2
    boolean lambda$getDependencyNodes$1(org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode) -> lambda$getDependencyNodes$1
    org.openjdk.tools.javac.util.Dependencies$GraphDependencies$CompletionNode lambda$getDependencyNodes$0(org.openjdk.tools.javac.util.Dependencies$GraphDependencies$Node) -> lambda$getDependencyNodes$0
org.openjdk.tools.sjavac.comp.dependencies.PublicApiCollector -> org.openjdk.tools.sjavac.comp.dependencies.PublicApiCollector:
    org.openjdk.tools.javac.util.Context context -> context
    java.util.Set classSymbols -> classSymbols
    java.util.Collection explicitJFOs -> explicitJFOs
    java.util.Map explicitPubApis -> explicitPubApis
    java.util.Map nonExplicitPubApis -> nonExplicitPubApis
    void <init>(org.openjdk.tools.javac.util.Context,java.util.Collection) -> <init>
    void finished(org.openjdk.source.util.TaskEvent) -> finished
    void collectClassSymbols(org.openjdk.tools.javac.tree.JCTree$JCCompilationUnit) -> collectClassSymbols
    void extractPubApis() -> extractPubApis
    java.util.Map getPubApis(boolean) -> getPubApis
org.openjdk.tools.sjavac.comp.dependencies.PublicApiCollector$1 -> org.openjdk.tools.sjavac.comp.dependencies.PublicApiCollector$1:
    int[] $SwitchMap$com$sun$source$util$TaskEvent$Kind -> $SwitchMap$com$sun$source$util$TaskEvent$Kind
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.options.ArgumentIterator -> org.openjdk.tools.sjavac.options.ArgumentIterator:
    java.util.Iterator iter -> iter
    java.lang.String current -> current
    java.lang.String buffered -> buffered
    void <init>(java.lang.Iterable) -> <init>
    boolean hasNext() -> hasNext
    java.lang.String next() -> next
    java.lang.String current() -> current
    void remove() -> remove
    java.lang.String peek() -> peek
    void fillBuffer() -> fillBuffer
    java.lang.Object next() -> next
org.openjdk.tools.sjavac.options.Option -> org.openjdk.tools.sjavac.options.Option:
    org.openjdk.tools.sjavac.options.Option SRC -> SRC
    org.openjdk.tools.sjavac.options.Option SOURCE_PATH -> SOURCE_PATH
    org.openjdk.tools.sjavac.options.Option SOURCEPATH -> SOURCEPATH
    org.openjdk.tools.sjavac.options.Option MODULE_PATH -> MODULE_PATH
    org.openjdk.tools.sjavac.options.Option P -> P
    org.openjdk.tools.sjavac.options.Option CLASS_PATH -> CLASS_PATH
    org.openjdk.tools.sjavac.options.Option CLASSPATH -> CLASSPATH
    org.openjdk.tools.sjavac.options.Option CP -> CP
    org.openjdk.tools.sjavac.options.Option X -> X
    org.openjdk.tools.sjavac.options.Option I -> I
    org.openjdk.tools.sjavac.options.Option TR -> TR
    org.openjdk.tools.sjavac.options.Option COPY -> COPY
    org.openjdk.tools.sjavac.options.Option J -> J
    org.openjdk.tools.sjavac.options.Option SERVER -> SERVER
    org.openjdk.tools.sjavac.options.Option STARTSERVER -> STARTSERVER
    org.openjdk.tools.sjavac.options.Option IMPLICIT -> IMPLICIT
    org.openjdk.tools.sjavac.options.Option LOG -> LOG
    org.openjdk.tools.sjavac.options.Option VERBOSE -> VERBOSE
    org.openjdk.tools.sjavac.options.Option PERMIT_ARTIFACT -> PERMIT_ARTIFACT
    org.openjdk.tools.sjavac.options.Option PERMIT_UNIDENTIFIED_ARTIFACTS -> PERMIT_UNIDENTIFIED_ARTIFACTS
    org.openjdk.tools.sjavac.options.Option PERMIT_SOURCES_WITHOUT_PACKAGE -> PERMIT_SOURCES_WITHOUT_PACKAGE
    org.openjdk.tools.sjavac.options.Option COMPARE_FOUND_SOURCES -> COMPARE_FOUND_SOURCES
    org.openjdk.tools.sjavac.options.Option D -> D
    org.openjdk.tools.sjavac.options.Option S -> S
    org.openjdk.tools.sjavac.options.Option H -> H
    org.openjdk.tools.sjavac.options.Option STATE_DIR -> STATE_DIR
    java.lang.String arg -> arg
    java.lang.String description -> description
    org.openjdk.tools.sjavac.options.Option[] $VALUES -> $VALUES
    org.openjdk.tools.sjavac.options.Option[] values() -> values
    org.openjdk.tools.sjavac.options.Option valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.util.List getFileListArg(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> getFileListArg
    java.nio.file.Path getFileArg(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper,boolean,boolean) -> getFileArg
    java.lang.String getFilePatternArg(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> getFilePatternArg
    boolean hasOption() -> hasOption
    boolean processCurrent(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processCurrent
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
    void <init>(java.lang.String,int,java.lang.String,java.lang.String,org.openjdk.tools.sjavac.options.Option$1) -> <init>
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.options.Option$1 -> org.openjdk.tools.sjavac.options.Option$1:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$10 -> org.openjdk.tools.sjavac.options.Option$10:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$11 -> org.openjdk.tools.sjavac.options.Option$11:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$12 -> org.openjdk.tools.sjavac.options.Option$12:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$13 -> org.openjdk.tools.sjavac.options.Option$13:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$14 -> org.openjdk.tools.sjavac.options.Option$14:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$15 -> org.openjdk.tools.sjavac.options.Option$15:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$16 -> org.openjdk.tools.sjavac.options.Option$16:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$17 -> org.openjdk.tools.sjavac.options.Option$17:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$18 -> org.openjdk.tools.sjavac.options.Option$18:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$19 -> org.openjdk.tools.sjavac.options.Option$19:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$2 -> org.openjdk.tools.sjavac.options.Option$2:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$20 -> org.openjdk.tools.sjavac.options.Option$20:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$21 -> org.openjdk.tools.sjavac.options.Option$21:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$22 -> org.openjdk.tools.sjavac.options.Option$22:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$23 -> org.openjdk.tools.sjavac.options.Option$23:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$24 -> org.openjdk.tools.sjavac.options.Option$24:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$25 -> org.openjdk.tools.sjavac.options.Option$25:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$26 -> org.openjdk.tools.sjavac.options.Option$26:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$3 -> org.openjdk.tools.sjavac.options.Option$3:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$4 -> org.openjdk.tools.sjavac.options.Option$4:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$5 -> org.openjdk.tools.sjavac.options.Option$5:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$6 -> org.openjdk.tools.sjavac.options.Option$6:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$7 -> org.openjdk.tools.sjavac.options.Option$7:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$8 -> org.openjdk.tools.sjavac.options.Option$8:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.Option$9 -> org.openjdk.tools.sjavac.options.Option$9:
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void processMatching(org.openjdk.tools.sjavac.options.ArgumentIterator,org.openjdk.tools.sjavac.options.OptionHelper) -> processMatching
org.openjdk.tools.sjavac.options.OptionHelper -> org.openjdk.tools.sjavac.options.OptionHelper:
    void <init>() -> <init>
    void reportError(java.lang.String) -> reportError
    void exclude(java.lang.String) -> exclude
    void include(java.lang.String) -> include
    void sourceRoots(java.util.List) -> sourceRoots
    void addTransformer(java.lang.String,org.openjdk.tools.sjavac.Transformer) -> addTransformer
    void sourcepath(java.util.List) -> sourcepath
    void modulepath(java.util.List) -> modulepath
    void classpath(java.util.List) -> classpath
    void numCores(int) -> numCores
    void logLevel(java.lang.String) -> logLevel
    void compareFoundSources(java.nio.file.Path) -> compareFoundSources
    void permitArtifact(java.lang.String) -> permitArtifact
    void permitUnidentifiedArtifacts() -> permitUnidentifiedArtifacts
    void permitDefaultPackage() -> permitDefaultPackage
    void serverConf(java.lang.String) -> serverConf
    void startServerConf(java.lang.String) -> startServerConf
    void javacArg(java.lang.String[]) -> javacArg
    void destDir(java.nio.file.Path) -> destDir
    void generatedSourcesDir(java.nio.file.Path) -> generatedSourcesDir
    void headerDir(java.nio.file.Path) -> headerDir
    void stateDir(java.nio.file.Path) -> stateDir
    void implicit(java.lang.String) -> implicit
    void traverse(java.lang.String[]) -> traverse
    java.lang.String unescapeCmdArg(java.lang.String) -> unescapeCmdArg
org.openjdk.tools.sjavac.options.Options -> org.openjdk.tools.sjavac.options.Options:
    java.nio.file.Path destDir -> destDir
    java.nio.file.Path genSrcDir -> genSrcDir
    java.nio.file.Path headerDir -> headerDir
    java.nio.file.Path stateDir -> stateDir
    java.util.List sources -> sources
    java.util.List sourceSearchPaths -> sourceSearchPaths
    java.util.List classSearchPaths -> classSearchPaths
    java.util.List moduleSearchPaths -> moduleSearchPaths
    java.lang.String logLevel -> logLevel
    java.util.Set permitted_artifacts -> permitted_artifacts
    boolean permitUnidentifiedArtifacts -> permitUnidentifiedArtifacts
    boolean permitSourcesInDefaultPackage -> permitSourcesInDefaultPackage
    java.nio.file.Path sourceReferenceList -> sourceReferenceList
    int numCores -> numCores
    java.lang.String implicitPolicy -> implicitPolicy
    java.util.List javacArgs -> javacArgs
    java.util.Map trRules -> trRules
    boolean startServer -> startServer
    java.lang.String serverConf -> serverConf
    void <init>() -> <init>
    java.lang.String getImplicitPolicy() -> getImplicitPolicy
    java.nio.file.Path getGenSrcDir() -> getGenSrcDir
    java.nio.file.Path getDestDir() -> getDestDir
    java.nio.file.Path getHeaderDir() -> getHeaderDir
    java.nio.file.Path getStateDir() -> getStateDir
    java.util.List getSources() -> getSources
    java.util.List getSourceSearchPaths() -> getSourceSearchPaths
    java.util.List getClassSearchPath() -> getClassSearchPath
    java.util.List getModuleSearchPaths() -> getModuleSearchPaths
    java.lang.String getLogLevel() -> getLogLevel
    boolean isUnidentifiedArtifactPermitted(java.lang.String) -> isUnidentifiedArtifactPermitted
    boolean areUnidentifiedArtifactsPermitted() -> areUnidentifiedArtifactsPermitted
    boolean isDefaultPackagePermitted() -> isDefaultPackagePermitted
    java.nio.file.Path getSourceReferenceList() -> getSourceReferenceList
    int getNumCores() -> getNumCores
    java.util.List getJavacArgs() -> getJavacArgs
    java.util.Map getTranslationRules() -> getTranslationRules
    boolean startServerFlag() -> startServerFlag
    java.lang.String getServerConf() -> getServerConf
    org.openjdk.tools.sjavac.options.Options parseArgs(java.lang.String[]) -> parseArgs
    boolean isJavaFilesAmongJavacArgs() -> isJavaFilesAmongJavacArgs
    java.lang.String getStateArgsString() -> getStateArgsString
    java.lang.String[] prepJavacArgs() -> prepJavacArgs
    java.lang.String concatenateSourceLocations(java.util.List) -> concatenateSourceLocations
    java.util.List access$100(org.openjdk.tools.sjavac.options.Options) -> access$100
    java.util.Map access$200(org.openjdk.tools.sjavac.options.Options) -> access$200
    java.util.List access$300(org.openjdk.tools.sjavac.options.Options) -> access$300
    java.util.List access$400(org.openjdk.tools.sjavac.options.Options) -> access$400
    java.util.List access$500(org.openjdk.tools.sjavac.options.Options) -> access$500
    int access$602(org.openjdk.tools.sjavac.options.Options,int) -> access$602
    java.lang.String access$702(org.openjdk.tools.sjavac.options.Options,java.lang.String) -> access$702
    java.nio.file.Path access$802(org.openjdk.tools.sjavac.options.Options,java.nio.file.Path) -> access$802
    java.util.Set access$900(org.openjdk.tools.sjavac.options.Options) -> access$900
    boolean access$1002(org.openjdk.tools.sjavac.options.Options,boolean) -> access$1002
    boolean access$1102(org.openjdk.tools.sjavac.options.Options,boolean) -> access$1102
    java.lang.String access$1200(org.openjdk.tools.sjavac.options.Options) -> access$1200
    java.lang.String access$1202(org.openjdk.tools.sjavac.options.Options,java.lang.String) -> access$1202
    java.lang.String access$1302(org.openjdk.tools.sjavac.options.Options,java.lang.String) -> access$1302
    boolean access$1402(org.openjdk.tools.sjavac.options.Options,boolean) -> access$1402
    java.util.List access$1500(org.openjdk.tools.sjavac.options.Options) -> access$1500
    java.nio.file.Path access$1600(org.openjdk.tools.sjavac.options.Options) -> access$1600
    java.nio.file.Path access$1602(org.openjdk.tools.sjavac.options.Options,java.nio.file.Path) -> access$1602
    java.nio.file.Path access$1702(org.openjdk.tools.sjavac.options.Options,java.nio.file.Path) -> access$1702
    java.nio.file.Path access$1802(org.openjdk.tools.sjavac.options.Options,java.nio.file.Path) -> access$1802
    java.nio.file.Path access$1902(org.openjdk.tools.sjavac.options.Options,java.nio.file.Path) -> access$1902
org.openjdk.tools.sjavac.options.Options$1 -> org.openjdk.tools.sjavac.options.Options$1:
org.openjdk.tools.sjavac.options.Options$1StateArgs -> org.openjdk.tools.sjavac.options.Options$1StateArgs:
    java.util.List args -> args
    org.openjdk.tools.sjavac.options.Options this$0 -> this$0
    void <init>(org.openjdk.tools.sjavac.options.Options) -> <init>
    void addArg(org.openjdk.tools.sjavac.options.Option) -> addArg
    void addArg(org.openjdk.tools.sjavac.options.Option,java.lang.Object) -> addArg
    void addSourceLocations(org.openjdk.tools.sjavac.options.Option,java.util.List) -> addSourceLocations
    java.lang.String getResult() -> getResult
    void addAll(java.util.Collection) -> addAll
org.openjdk.tools.sjavac.options.Options$ArgDecoderOptionHelper -> org.openjdk.tools.sjavac.options.Options$ArgDecoderOptionHelper:
    java.util.List includes -> includes
    java.util.List excludes -> excludes
    java.util.List includeFiles -> includeFiles
    java.util.List excludeFiles -> excludeFiles
    boolean headerProvided -> headerProvided
    boolean genSrcProvided -> genSrcProvided
    boolean stateProvided -> stateProvided
    org.openjdk.tools.sjavac.options.Options this$0 -> this$0
    void <init>(org.openjdk.tools.sjavac.options.Options) -> <init>
    void reportError(java.lang.String) -> reportError
    void sourceRoots(java.util.List) -> sourceRoots
    void exclude(java.lang.String) -> exclude
    void include(java.lang.String) -> include
    void addTransformer(java.lang.String,org.openjdk.tools.sjavac.Transformer) -> addTransformer
    void sourcepath(java.util.List) -> sourcepath
    void modulepath(java.util.List) -> modulepath
    void classpath(java.util.List) -> classpath
    void numCores(int) -> numCores
    void logLevel(java.lang.String) -> logLevel
    void compareFoundSources(java.nio.file.Path) -> compareFoundSources
    void permitArtifact(java.lang.String) -> permitArtifact
    void permitUnidentifiedArtifacts() -> permitUnidentifiedArtifacts
    void permitDefaultPackage() -> permitDefaultPackage
    void serverConf(java.lang.String) -> serverConf
    void implicit(java.lang.String) -> implicit
    void startServerConf(java.lang.String) -> startServerConf
    void javacArg(java.lang.String[]) -> javacArg
    void destDir(java.nio.file.Path) -> destDir
    void generatedSourcesDir(java.nio.file.Path) -> generatedSourcesDir
    void headerDir(java.nio.file.Path) -> headerDir
    void stateDir(java.nio.file.Path) -> stateDir
    java.util.List createSourceLocations(java.util.List) -> createSourceLocations
    void resetFilters() -> resetFilters
    void <init>(org.openjdk.tools.sjavac.options.Options,org.openjdk.tools.sjavac.options.Options$1) -> <init>
org.openjdk.tools.sjavac.options.SourceLocation -> org.openjdk.tools.sjavac.options.SourceLocation:
    java.nio.file.Path path -> path
    java.util.List includes -> includes
    java.util.List excludes -> excludes
    void <init>(java.nio.file.Path,java.util.List,java.util.List) -> <init>
    void findSourceFiles(java.util.Set,java.util.Map,java.util.Map,org.openjdk.tools.sjavac.Module,boolean,boolean) -> findSourceFiles
    java.nio.file.Path getPath() -> getPath
    java.util.List getIncludes() -> getIncludes
    java.util.List getExcludes() -> getExcludes
    java.lang.String toString() -> toString
org.openjdk.tools.sjavac.pubapi.ArrayTypeDesc -> org.openjdk.tools.sjavac.pubapi.ArrayTypeDesc:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.sjavac.pubapi.TypeDesc compTypeDesc -> compTypeDesc
    void <init>(org.openjdk.tools.sjavac.pubapi.TypeDesc) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.openjdk.tools.sjavac.pubapi.PrimitiveTypeDesc -> org.openjdk.tools.sjavac.pubapi.PrimitiveTypeDesc:
    long serialVersionUID -> serialVersionUID
    void <init>(org.openjdk.javax.lang.model.type.TypeKind) -> <init>
    java.lang.String toString() -> toString
org.openjdk.tools.sjavac.pubapi.PubApi -> org.openjdk.tools.sjavac.pubapi.PubApi:
    long serialVersionUID -> serialVersionUID
    java.util.Map types -> types
    java.util.Map variables -> variables
    java.util.Map methods -> methods
    org.openjdk.tools.sjavac.pubapi.PubType lastInsertedType -> lastInsertedType
    java.lang.String MODIFIERS -> MODIFIERS
    java.util.regex.Pattern MOD_PATTERN -> MOD_PATTERN
    java.util.regex.Pattern METHOD_PATTERN -> METHOD_PATTERN
    java.util.regex.Pattern VAR_PATTERN -> VAR_PATTERN
    java.util.regex.Pattern TYPE_PATTERN -> TYPE_PATTERN
    void <init>() -> <init>
    void <init>(java.util.Collection,java.util.Collection,java.util.Collection) -> <init>
    boolean isBackwardCompatibleWith(org.openjdk.tools.sjavac.pubapi.PubApi) -> isBackwardCompatibleWith
    java.lang.String typeLine(org.openjdk.tools.sjavac.pubapi.PubType) -> typeLine
    java.lang.String varLine(org.openjdk.tools.sjavac.pubapi.PubVar) -> varLine
    java.lang.String methodLine(org.openjdk.tools.sjavac.pubapi.PubMethod) -> methodLine
    java.util.List asListOfStrings() -> asListOfStrings
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String commaSeparated(java.util.List) -> commaSeparated
    java.lang.String asString(java.util.Set) -> asString
    org.openjdk.tools.sjavac.pubapi.PubApi mergeTypes(org.openjdk.tools.sjavac.pubapi.PubApi,org.openjdk.tools.sjavac.pubapi.PubApi) -> mergeTypes
    void appendItem(java.lang.String) -> appendItem
    void addPubType(org.openjdk.tools.sjavac.pubapi.PubType) -> addPubType
    void addPubVar(org.openjdk.tools.sjavac.pubapi.PubVar) -> addPubVar
    void addPubMethod(org.openjdk.tools.sjavac.pubapi.PubMethod) -> addPubMethod
    java.util.List parseTypeDescs(java.util.List) -> parseTypeDescs
    java.util.List parseTypeParams(java.util.List) -> parseTypeParams
    org.openjdk.tools.sjavac.pubapi.PubApiTypeParam parseTypeParam(java.lang.String) -> parseTypeParam
    java.util.Set parseModifiers(java.lang.String) -> parseModifiers
    int findClosingTag(java.lang.String,int) -> findClosingTag
    java.util.List splitOnTopLevelCommas(java.lang.String) -> splitOnTopLevelCommas
    java.util.List splitOnTopLevelChars(java.lang.String,char) -> splitOnTopLevelChars
    boolean isEmpty() -> isEmpty
    java.util.List diff(org.openjdk.tools.sjavac.pubapi.PubApi) -> diff
    java.util.List diff(java.lang.String,org.openjdk.tools.sjavac.pubapi.PubApi) -> diff
    java.lang.String toString() -> toString
    boolean lambda$parseModifiers$3(java.lang.String) -> lambda$parseModifiers$3
    java.lang.String lambda$asString$2(org.openjdk.javax.lang.model.element.Modifier) -> lambda$asString$2
    void lambda$asListOfStrings$1(java.util.List,org.openjdk.tools.sjavac.pubapi.PubType) -> lambda$asListOfStrings$1
    java.lang.String lambda$varLine$0(java.lang.String) -> lambda$varLine$0
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.pubapi.PubApiTypeParam -> org.openjdk.tools.sjavac.pubapi.PubApiTypeParam:
    long serialVersionUID -> serialVersionUID
    java.lang.String identifier -> identifier
    java.util.List bounds -> bounds
    void <init>(java.lang.String,java.util.List) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String asString() -> asString
    java.lang.String toString() -> toString
org.openjdk.tools.sjavac.pubapi.PubMethod -> org.openjdk.tools.sjavac.pubapi.PubMethod:
    long serialVersionUID -> serialVersionUID
    java.util.Set modifiers -> modifiers
    java.util.List typeParams -> typeParams
    org.openjdk.tools.sjavac.pubapi.TypeDesc returnType -> returnType
    java.lang.String identifier -> identifier
    java.util.List paramTypes -> paramTypes
    java.util.List throwDecls -> throwDecls
    void <init>(java.util.Set,java.util.List,org.openjdk.tools.sjavac.pubapi.TypeDesc,java.lang.String,java.util.List,java.util.List) -> <init>
    java.lang.String asSignatureString() -> asSignatureString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.openjdk.tools.sjavac.pubapi.PubType -> org.openjdk.tools.sjavac.pubapi.PubType:
    long serialVersionUID -> serialVersionUID
    java.util.Set modifiers -> modifiers
    java.lang.String fqName -> fqName
    org.openjdk.tools.sjavac.pubapi.PubApi pubApi -> pubApi
    void <init>(java.util.Set,java.lang.String,org.openjdk.tools.sjavac.pubapi.PubApi) -> <init>
    java.lang.String getFqName() -> getFqName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.openjdk.tools.sjavac.pubapi.PubVar -> org.openjdk.tools.sjavac.pubapi.PubVar:
    long serialVersionUID -> serialVersionUID
    java.util.Set modifiers -> modifiers
    org.openjdk.tools.sjavac.pubapi.TypeDesc type -> type
    java.lang.String identifier -> identifier
    java.lang.String constValue -> constValue
    void <init>(java.util.Set,org.openjdk.tools.sjavac.pubapi.TypeDesc,java.lang.String,java.lang.String) -> <init>
    java.lang.String getIdentifier() -> getIdentifier
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.Optional getConstValue() -> getConstValue
org.openjdk.tools.sjavac.pubapi.ReferenceTypeDesc -> org.openjdk.tools.sjavac.pubapi.ReferenceTypeDesc:
    long serialVersionUID -> serialVersionUID
    java.lang.String javaType -> javaType
    void <init>(java.lang.String) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.openjdk.tools.sjavac.pubapi.TypeDesc -> org.openjdk.tools.sjavac.pubapi.TypeDesc:
    long serialVersionUID -> serialVersionUID
    org.openjdk.javax.lang.model.type.TypeKind typeKind -> typeKind
    void <init>(org.openjdk.javax.lang.model.type.TypeKind) -> <init>
    org.openjdk.tools.sjavac.pubapi.TypeDesc decodeString(java.lang.String) -> decodeString
    java.lang.String encodeAsString(org.openjdk.tools.sjavac.pubapi.TypeDesc) -> encodeAsString
    org.openjdk.tools.sjavac.pubapi.TypeDesc fromType(org.openjdk.javax.lang.model.type.TypeMirror) -> fromType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.openjdk.tools.sjavac.pubapi.TypeDesc$1 -> org.openjdk.tools.sjavac.pubapi.TypeDesc$1:
    void <init>() -> <init>
    org.openjdk.tools.sjavac.pubapi.TypeDesc visitArray(org.openjdk.javax.lang.model.type.ArrayType,java.lang.Void) -> visitArray
    org.openjdk.tools.sjavac.pubapi.TypeDesc visitDeclared(org.openjdk.javax.lang.model.type.DeclaredType,java.lang.Void) -> visitDeclared
    org.openjdk.tools.sjavac.pubapi.TypeDesc visitNoType(org.openjdk.javax.lang.model.type.NoType,java.lang.Void) -> visitNoType
    org.openjdk.tools.sjavac.pubapi.TypeDesc visitTypeVariable(org.openjdk.javax.lang.model.type.TypeVariable,java.lang.Void) -> visitTypeVariable
    org.openjdk.tools.sjavac.pubapi.TypeDesc visitPrimitive(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Void) -> visitPrimitive
    org.openjdk.tools.sjavac.pubapi.TypeDesc visitError(org.openjdk.javax.lang.model.type.ErrorType,java.lang.Void) -> visitError
    java.lang.Object visitNoType(org.openjdk.javax.lang.model.type.NoType,java.lang.Object) -> visitNoType
    java.lang.Object visitTypeVariable(org.openjdk.javax.lang.model.type.TypeVariable,java.lang.Object) -> visitTypeVariable
    java.lang.Object visitError(org.openjdk.javax.lang.model.type.ErrorType,java.lang.Object) -> visitError
    java.lang.Object visitDeclared(org.openjdk.javax.lang.model.type.DeclaredType,java.lang.Object) -> visitDeclared
    java.lang.Object visitArray(org.openjdk.javax.lang.model.type.ArrayType,java.lang.Object) -> visitArray
    java.lang.Object visitPrimitive(org.openjdk.javax.lang.model.type.PrimitiveType,java.lang.Object) -> visitPrimitive
org.openjdk.tools.sjavac.pubapi.TypeVarTypeDesc -> org.openjdk.tools.sjavac.pubapi.TypeVarTypeDesc:
    long serialVersionUID -> serialVersionUID
    java.lang.String identifier -> identifier
    void <init>(java.lang.String) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.openjdk.tools.sjavac.server.CompilationSubResult -> org.openjdk.tools.sjavac.server.CompilationSubResult:
    long serialVersionUID -> serialVersionUID
    org.openjdk.tools.javac.main.Main$Result result -> result
    java.util.Map packageArtifacts -> packageArtifacts
    java.util.Map packageDependencies -> packageDependencies
    java.util.Map packageCpDependencies -> packageCpDependencies
    java.util.Map packagePubapis -> packagePubapis
    java.util.Map dependencyPubapis -> dependencyPubapis
    java.lang.String stdout -> stdout
    java.lang.String stderr -> stderr
    void <init>(org.openjdk.tools.javac.main.Main$Result) -> <init>
    void setResult(org.openjdk.tools.javac.main.Main$Result) -> setResult
org.openjdk.tools.sjavac.server.IdleResetSjavac -> org.openjdk.tools.sjavac.server.IdleResetSjavac:
    org.openjdk.tools.sjavac.server.Sjavac delegate -> delegate
    org.openjdk.tools.sjavac.server.Terminable toShutdown -> toShutdown
    java.util.Timer idlenessTimer -> idlenessTimer
    long idleTimeout -> idleTimeout
    int outstandingCalls -> outstandingCalls
    java.util.TimerTask idlenessTimerTask -> idlenessTimerTask
    void <init>(org.openjdk.tools.sjavac.server.Sjavac,org.openjdk.tools.sjavac.server.Terminable,long) -> <init>
    org.openjdk.tools.javac.main.Main$Result compile(java.lang.String[]) -> compile
    void startCall() -> startCall
    void endCall() -> endCall
    void scheduleTimeout() -> scheduleTimeout
    void shutdown() -> shutdown
    long access$000(org.openjdk.tools.sjavac.server.IdleResetSjavac) -> access$000
    org.openjdk.tools.sjavac.server.Terminable access$100(org.openjdk.tools.sjavac.server.IdleResetSjavac) -> access$100
org.openjdk.tools.sjavac.server.IdleResetSjavac$1 -> org.openjdk.tools.sjavac.server.IdleResetSjavac$1:
    org.openjdk.tools.sjavac.server.IdleResetSjavac this$0 -> this$0
    void <init>(org.openjdk.tools.sjavac.server.IdleResetSjavac) -> <init>
    void run() -> run
org.openjdk.tools.sjavac.server.PortFile -> org.openjdk.tools.sjavac.server.PortFile:
    int magicNr -> magicNr
    java.lang.String filename -> filename
    java.io.File file -> file
    java.io.File stopFile -> stopFile
    java.io.RandomAccessFile rwfile -> rwfile
    java.nio.channels.FileChannel channel -> channel
    java.nio.channels.FileLock lock -> lock
    java.util.concurrent.Semaphore lockSem -> lockSem
    boolean containsPortInfo -> containsPortInfo
    int serverPort -> serverPort
    long serverCookie -> serverCookie
    int myServerPort -> myServerPort
    long myServerCookie -> myServerCookie
    void <init>(java.lang.String) -> <init>
    void initializeChannel() -> initializeChannel
    void lock() -> lock
    void getValues() -> getValues
    boolean containsPortInfo() -> containsPortInfo
    int getPort() -> getPort
    long getCookie() -> getCookie
    void setValues(int,long) -> setValues
    void delete() -> delete
    boolean exists() -> exists
    boolean markedForStop() -> markedForStop
    void unlock() -> unlock
    void waitForValidValues() -> waitForValidValues
    boolean stillMyValues() -> stillMyValues
    java.lang.String getFilename() -> getFilename
    long getServerStartupTimeoutSeconds() -> getServerStartupTimeoutSeconds
org.openjdk.tools.sjavac.server.PortFileMonitor -> org.openjdk.tools.sjavac.server.PortFileMonitor:
    int CHECK_PORTFILE_INTERVAL -> CHECK_PORTFILE_INTERVAL
    java.util.Timer timer -> timer
    org.openjdk.tools.sjavac.server.PortFile portFile -> portFile
    org.openjdk.tools.sjavac.server.SjavacServer server -> server
    void <init>(org.openjdk.tools.sjavac.server.PortFile,org.openjdk.tools.sjavac.server.SjavacServer) -> <init>
    void start() -> start
    void shutdown() -> shutdown
    org.openjdk.tools.sjavac.server.PortFile access$000(org.openjdk.tools.sjavac.server.PortFileMonitor) -> access$000
    org.openjdk.tools.sjavac.server.SjavacServer access$100(org.openjdk.tools.sjavac.server.PortFileMonitor) -> access$100
org.openjdk.tools.sjavac.server.PortFileMonitor$1 -> org.openjdk.tools.sjavac.server.PortFileMonitor$1:
    org.openjdk.tools.sjavac.Log val$log -> val$log
    org.openjdk.tools.sjavac.server.PortFileMonitor this$0 -> this$0
    void <init>(org.openjdk.tools.sjavac.server.PortFileMonitor,org.openjdk.tools.sjavac.Log) -> <init>
    void run() -> run
org.openjdk.tools.sjavac.server.RequestHandler -> org.openjdk.tools.sjavac.server.RequestHandler:
    java.net.Socket socket -> socket
    org.openjdk.tools.sjavac.server.Sjavac sjavac -> sjavac
    void <init>(java.net.Socket,org.openjdk.tools.sjavac.server.Sjavac) -> <init>
    void run() -> run
    void checkInternalErrorLog() -> checkInternalErrorLog
org.openjdk.tools.sjavac.server.RequestHandler$1 -> org.openjdk.tools.sjavac.server.RequestHandler$1:
    org.openjdk.tools.sjavac.server.RequestHandler this$0 -> this$0
    void <init>(org.openjdk.tools.sjavac.server.RequestHandler,java.io.Writer,java.io.Writer) -> <init>
    boolean isLevelLogged(org.openjdk.tools.sjavac.Log$Level) -> isLevelLogged
    void printLogMsg(org.openjdk.tools.sjavac.Log$Level,java.lang.String) -> printLogMsg
    void lambda$printLogMsg$1(org.openjdk.tools.sjavac.Log$Level,java.lang.String) -> lambda$printLogMsg$1
    java.lang.String lambda$printLogMsg$0(org.openjdk.tools.sjavac.Log$Level,java.lang.String) -> lambda$printLogMsg$0
org.openjdk.tools.sjavac.server.ServerMain -> org.openjdk.tools.sjavac.server.ServerMain:
    org.openjdk.tools.sjavac.server.log.LazyInitFileLog errorLog -> errorLog
    void <init>() -> <init>
    int run(java.lang.String[]) -> run
    org.openjdk.tools.sjavac.server.log.LazyInitFileLog getErrorLog() -> getErrorLog
    void lambda$run$0(java.lang.Thread,java.lang.Throwable) -> lambda$run$0
org.openjdk.tools.sjavac.server.Sjavac -> org.openjdk.tools.sjavac.server.Sjavac:
    org.openjdk.tools.javac.main.Main$Result compile(java.lang.String[]) -> compile
    void shutdown() -> shutdown
org.openjdk.tools.sjavac.server.SjavacServer -> org.openjdk.tools.sjavac.server.SjavacServer:
    java.lang.String LINE_TYPE_RC -> LINE_TYPE_RC
    java.lang.String portfilename -> portfilename
    int poolsize -> poolsize
    int keepalive -> keepalive
    long myCookie -> myCookie
    long totalBuildTime -> totalBuildTime
    org.openjdk.tools.sjavac.server.Sjavac sjavac -> sjavac
    java.net.ServerSocket serverSocket -> serverSocket
    org.openjdk.tools.sjavac.server.PortFile portFile -> portFile
    org.openjdk.tools.sjavac.server.PortFileMonitor portFileMonitor -> portFileMonitor
    java.util.concurrent.atomic.AtomicBoolean keepAcceptingRequests -> keepAcceptingRequests
    java.util.Map allPortFiles -> allPortFiles
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int,int) -> <init>
    org.openjdk.tools.sjavac.server.PortFile getPortFile(java.lang.String) -> getPortFile
    long getCookie() -> getCookie
    int getPort() -> getPort
    void addBuildTime(long) -> addBuildTime
    int startServer() -> startServer
    void shutdown(java.lang.String) -> shutdown
org.openjdk.tools.sjavac.server.SysInfo -> org.openjdk.tools.sjavac.server.SysInfo:
    long serialVersionUID -> serialVersionUID
    int numCores -> numCores
    long maxMemory -> maxMemory
    void <init>(int,long) -> <init>
org.openjdk.tools.sjavac.server.Terminable -> org.openjdk.tools.sjavac.server.Terminable:
    void shutdown(java.lang.String) -> shutdown
org.openjdk.tools.sjavac.server.log.LazyInitFileLog -> org.openjdk.tools.sjavac.server.log.LazyInitFileLog:
    java.lang.String baseFilename -> baseFilename
    java.nio.file.Path destination -> destination
    void <init>(java.lang.String) -> <init>
    void printLogMsg(org.openjdk.tools.sjavac.Log$Level,java.lang.String) -> printLogMsg
    java.nio.file.Path getAvailableDestination() -> getAvailableDestination
    java.nio.file.Path getLogDestination() -> getLogDestination
org.openjdk.tools.sjavac.server.log.LoggingOutputStream -> org.openjdk.tools.sjavac.server.log.LoggingOutputStream:
    byte[] LINE_SEP -> LINE_SEP
    org.openjdk.tools.sjavac.Log$Level level -> level
    java.lang.String linePrefix -> linePrefix
    org.openjdk.tools.sjavac.server.log.LoggingOutputStream$EolTrackingByteArrayOutputStream buf -> buf
    void <init>(java.io.OutputStream,org.openjdk.tools.sjavac.Log$Level,java.lang.String) -> <init>
    void write(int) -> write
    void <clinit>() -> <clinit>
org.openjdk.tools.sjavac.server.log.LoggingOutputStream$1 -> org.openjdk.tools.sjavac.server.log.LoggingOutputStream$1:
org.openjdk.tools.sjavac.server.log.LoggingOutputStream$EolTrackingByteArrayOutputStream -> org.openjdk.tools.sjavac.server.log.LoggingOutputStream$EolTrackingByteArrayOutputStream:
    byte[] EOL -> EOL
    void <init>() -> <init>
    boolean isLineComplete() -> isLineComplete
    void <init>(org.openjdk.tools.sjavac.server.log.LoggingOutputStream$1) -> <init>
    boolean access$100(org.openjdk.tools.sjavac.server.log.LoggingOutputStream$EolTrackingByteArrayOutputStream) -> access$100
    void <clinit>() -> <clinit>
org.reflections.Configuration -> org.reflections.Configuration:
    java.util.Set getScanners() -> getScanners
    java.util.Set getUrls() -> getUrls
    org.reflections.adapters.MetadataAdapter getMetadataAdapter() -> getMetadataAdapter
    java.util.function.Predicate getInputsFilter() -> getInputsFilter
    java.util.concurrent.ExecutorService getExecutorService() -> getExecutorService
    org.reflections.serializers.Serializer getSerializer() -> getSerializer
    java.lang.ClassLoader[] getClassLoaders() -> getClassLoaders
    boolean shouldExpandSuperTypes() -> shouldExpandSuperTypes
org.reflections.ReflectionUtils -> org.reflections.ReflectionUtils:
    boolean includeObject -> includeObject
    java.util.List primitiveNames -> primitiveNames
    java.util.List primitiveTypes -> primitiveTypes
    java.util.List primitiveDescriptors -> primitiveDescriptors
    void <init>() -> <init>
    java.util.Set getAllSuperTypes(java.lang.Class,java.util.function.Predicate[]) -> getAllSuperTypes
    java.util.Set getSuperTypes(java.lang.Class) -> getSuperTypes
    java.util.Set getAllMethods(java.lang.Class,java.util.function.Predicate[]) -> getAllMethods
    java.util.Set getMethods(java.lang.Class,java.util.function.Predicate[]) -> getMethods
    java.util.Set getAllConstructors(java.lang.Class,java.util.function.Predicate[]) -> getAllConstructors
    java.util.Set getConstructors(java.lang.Class,java.util.function.Predicate[]) -> getConstructors
    java.util.Set getAllFields(java.lang.Class,java.util.function.Predicate[]) -> getAllFields
    java.util.Set getFields(java.lang.Class,java.util.function.Predicate[]) -> getFields
    java.util.Set getAllAnnotations(java.lang.reflect.AnnotatedElement,java.util.function.Predicate[]) -> getAllAnnotations
    java.util.Set getAnnotations(java.lang.reflect.AnnotatedElement,java.util.function.Predicate[]) -> getAnnotations
    java.util.Set getAll(java.util.Set,java.util.function.Predicate[]) -> getAll
    java.util.function.Predicate withName(java.lang.String) -> withName
    java.util.function.Predicate withPrefix(java.lang.String) -> withPrefix
    java.util.function.Predicate withPattern(java.lang.String) -> withPattern
    java.util.function.Predicate withAnnotation(java.lang.Class) -> withAnnotation
    java.util.function.Predicate withAnnotations(java.lang.Class[]) -> withAnnotations
    java.util.function.Predicate withAnnotation(java.lang.annotation.Annotation) -> withAnnotation
    java.util.function.Predicate withAnnotations(java.lang.annotation.Annotation[]) -> withAnnotations
    java.util.function.Predicate withParameters(java.lang.Class[]) -> withParameters
    java.util.function.Predicate withParametersAssignableTo(java.lang.Class[]) -> withParametersAssignableTo
    java.util.function.Predicate withParametersAssignableFrom(java.lang.Class[]) -> withParametersAssignableFrom
    java.util.function.Predicate withParametersCount(int) -> withParametersCount
    java.util.function.Predicate withAnyParameterAnnotation(java.lang.Class) -> withAnyParameterAnnotation
    java.util.function.Predicate withAnyParameterAnnotation(java.lang.annotation.Annotation) -> withAnyParameterAnnotation
    java.util.function.Predicate withType(java.lang.Class) -> withType
    java.util.function.Predicate withTypeAssignableTo(java.lang.Class) -> withTypeAssignableTo
    java.util.function.Predicate withReturnType(java.lang.Class) -> withReturnType
    java.util.function.Predicate withReturnTypeAssignableTo(java.lang.Class) -> withReturnTypeAssignableTo
    java.util.function.Predicate withModifier(int) -> withModifier
    java.util.function.Predicate withClassModifier(int) -> withClassModifier
    java.lang.Class forName(java.lang.String,java.lang.ClassLoader[]) -> forName
    java.util.Set forNames(java.util.Collection,java.lang.ClassLoader[]) -> forNames
    java.lang.Class[] parameterTypes(java.lang.reflect.Member) -> parameterTypes
    java.util.Set parameterAnnotations(java.lang.reflect.Member) -> parameterAnnotations
    java.util.Set annotationTypes(java.util.Collection) -> annotationTypes
    java.lang.Class[] annotationTypes(java.lang.annotation.Annotation[]) -> annotationTypes
    void initPrimitives() -> initPrimitives
    java.util.List getPrimitiveNames() -> getPrimitiveNames
    java.util.List getPrimitiveTypes() -> getPrimitiveTypes
    java.util.List getPrimitiveDescriptors() -> getPrimitiveDescriptors
    boolean areAnnotationMembersMatching(java.lang.annotation.Annotation,java.lang.annotation.Annotation) -> areAnnotationMembersMatching
    boolean isAssignable(java.lang.Class[],java.lang.Class[]) -> isAssignable
    boolean lambda$isAssignable$24(java.lang.Class[],java.lang.Class[],int) -> lambda$isAssignable$24
    java.lang.Class[] lambda$annotationTypes$23(int) -> lambda$annotationTypes$23
    java.lang.Class lambda$forNames$22(java.lang.ClassLoader[],java.lang.String) -> lambda$forNames$22
    boolean lambda$withClassModifier$21(int,java.lang.Class) -> lambda$withClassModifier$21
    boolean lambda$withModifier$20(int,java.lang.reflect.Member) -> lambda$withModifier$20
    boolean lambda$withReturnTypeAssignableTo$19(java.lang.Class,java.lang.reflect.Method) -> lambda$withReturnTypeAssignableTo$19
    boolean lambda$withReturnType$18(java.lang.Class,java.lang.reflect.Method) -> lambda$withReturnType$18
    boolean lambda$withTypeAssignableTo$17(java.lang.Class,java.lang.reflect.Field) -> lambda$withTypeAssignableTo$17
    boolean lambda$withType$16(java.lang.Class,java.lang.reflect.Field) -> lambda$withType$16
    boolean lambda$withAnyParameterAnnotation$15(java.lang.annotation.Annotation,java.lang.reflect.Member) -> lambda$withAnyParameterAnnotation$15
    boolean lambda$null$14(java.lang.annotation.Annotation,java.lang.annotation.Annotation) -> lambda$null$14
    boolean lambda$withAnyParameterAnnotation$13(java.lang.Class,java.lang.reflect.Member) -> lambda$withAnyParameterAnnotation$13
    boolean lambda$null$12(java.lang.Class,java.lang.Class) -> lambda$null$12
    boolean lambda$withParametersCount$11(int,java.lang.reflect.Member) -> lambda$withParametersCount$11
    boolean lambda$withParametersAssignableFrom$10(java.lang.Class[],java.lang.reflect.Member) -> lambda$withParametersAssignableFrom$10
    boolean lambda$withParametersAssignableTo$9(java.lang.Class[],java.lang.reflect.Member) -> lambda$withParametersAssignableTo$9
    boolean lambda$withParameters$8(java.lang.Class[],java.lang.reflect.Member) -> lambda$withParameters$8
    boolean lambda$withAnnotations$7(java.lang.annotation.Annotation[],java.lang.reflect.AnnotatedElement) -> lambda$withAnnotations$7
    boolean lambda$null$6(java.lang.annotation.Annotation[],java.lang.annotation.Annotation[],int) -> lambda$null$6
    boolean lambda$withAnnotation$5(java.lang.annotation.Annotation,java.lang.reflect.AnnotatedElement) -> lambda$withAnnotation$5
    boolean lambda$withAnnotations$4(java.lang.Class[],java.lang.reflect.AnnotatedElement) -> lambda$withAnnotations$4
    boolean lambda$withAnnotation$3(java.lang.Class,java.lang.reflect.AnnotatedElement) -> lambda$withAnnotation$3
    boolean lambda$withPattern$2(java.lang.String,java.lang.reflect.AnnotatedElement) -> lambda$withPattern$2
    boolean lambda$withPrefix$1(java.lang.String,java.lang.reflect.Member) -> lambda$withPrefix$1
    boolean lambda$withName$0(java.lang.String,java.lang.reflect.Member) -> lambda$withName$0
    void <clinit>() -> <clinit>
org.reflections.Reflections -> org.reflections.Reflections:
    org.slf4j.Logger log -> log
    org.reflections.Configuration configuration -> configuration
    org.reflections.Store store -> store
    void <init>(org.reflections.Configuration) -> <init>
    void <init>(java.lang.String,org.reflections.scanners.Scanner[]) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void <init>() -> <init>
    void scan() -> scan
    java.lang.String producingDescription(org.reflections.Store) -> producingDescription
    void scan(java.net.URL) -> scan
    org.reflections.Reflections collect() -> collect
    org.reflections.Reflections collect(java.lang.String,java.util.function.Predicate,org.reflections.serializers.Serializer[]) -> collect
    org.reflections.Reflections collect(java.io.InputStream) -> collect
    org.reflections.Reflections collect(java.io.File) -> collect
    org.reflections.Reflections merge(org.reflections.Reflections) -> merge
    void expandSuperTypes() -> expandSuperTypes
    void expandSupertypes(org.reflections.Store,java.lang.String,java.lang.Class) -> expandSupertypes
    java.util.Set getSubTypesOf(java.lang.Class) -> getSubTypesOf
    java.util.Set getTypesAnnotatedWith(java.lang.Class) -> getTypesAnnotatedWith
    java.util.Set getTypesAnnotatedWith(java.lang.Class,boolean) -> getTypesAnnotatedWith
    java.util.Set getTypesAnnotatedWith(java.lang.annotation.Annotation) -> getTypesAnnotatedWith
    java.util.Set getTypesAnnotatedWith(java.lang.annotation.Annotation,boolean) -> getTypesAnnotatedWith
    java.util.Collection getAllAnnotated(java.util.Collection,java.lang.Class,boolean) -> getAllAnnotated
    java.util.Set getMethodsAnnotatedWith(java.lang.Class) -> getMethodsAnnotatedWith
    java.util.Set getMethodsAnnotatedWith(java.lang.annotation.Annotation) -> getMethodsAnnotatedWith
    java.util.Set getMethodsMatchParams(java.lang.Class[]) -> getMethodsMatchParams
    java.util.Set getMethodsReturn(java.lang.Class) -> getMethodsReturn
    java.util.Set getMethodsWithAnyParamAnnotated(java.lang.Class) -> getMethodsWithAnyParamAnnotated
    java.util.Set getMethodsWithAnyParamAnnotated(java.lang.annotation.Annotation) -> getMethodsWithAnyParamAnnotated
    java.util.Set getConstructorsAnnotatedWith(java.lang.Class) -> getConstructorsAnnotatedWith
    java.util.Set getConstructorsAnnotatedWith(java.lang.annotation.Annotation) -> getConstructorsAnnotatedWith
    java.util.Set getConstructorsMatchParams(java.lang.Class[]) -> getConstructorsMatchParams
    java.util.Set getConstructorsWithAnyParamAnnotated(java.lang.Class) -> getConstructorsWithAnyParamAnnotated
    java.util.Set getConstructorsWithAnyParamAnnotated(java.lang.annotation.Annotation) -> getConstructorsWithAnyParamAnnotated
    java.util.Set getFieldsAnnotatedWith(java.lang.Class) -> getFieldsAnnotatedWith
    java.util.Set getFieldsAnnotatedWith(java.lang.annotation.Annotation) -> getFieldsAnnotatedWith
    java.util.Set getResources(java.util.function.Predicate) -> getResources
    java.util.Set getResources(java.util.regex.Pattern) -> getResources
    java.util.List getMethodParamNames(java.lang.reflect.Method) -> getMethodParamNames
    java.util.List getConstructorParamNames(java.lang.reflect.Constructor) -> getConstructorParamNames
    java.util.Set getFieldUsage(java.lang.reflect.Field) -> getFieldUsage
    java.util.Set getMethodUsage(java.lang.reflect.Method) -> getMethodUsage
    java.util.Set getConstructorUsage(java.lang.reflect.Constructor) -> getConstructorUsage
    java.util.Set getAllTypes() -> getAllTypes
    org.reflections.Store getStore() -> getStore
    org.reflections.Configuration getConfiguration() -> getConfiguration
    java.io.File save(java.lang.String) -> save
    java.io.File save(java.lang.String,org.reflections.serializers.Serializer) -> save
    java.lang.ClassLoader[] loaders() -> loaders
    boolean lambda$getResources$4(java.util.regex.Pattern,java.lang.String) -> lambda$getResources$4
    java.lang.reflect.Field lambda$getFieldsAnnotatedWith$3(java.lang.String) -> lambda$getFieldsAnnotatedWith$3
    boolean lambda$getAllAnnotated$2(java.lang.String) -> lambda$getAllAnnotated$2
    boolean lambda$getTypesAnnotatedWith$1(java.util.Set,java.lang.String) -> lambda$getTypesAnnotatedWith$1
    void lambda$scan$0(java.net.URL) -> lambda$scan$0
    void <clinit>() -> <clinit>
org.reflections.ReflectionsException -> org.reflections.ReflectionsException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(java.lang.Throwable) -> <init>
org.reflections.Store -> org.reflections.Store:
    java.util.concurrent.ConcurrentHashMap storeMap -> storeMap
    void <init>() -> <init>
    java.util.Set keySet() -> keySet
    java.util.Map get(java.lang.String) -> get
    java.util.Set get(java.lang.Class,java.lang.String) -> get
    java.util.Set get(java.lang.String,java.lang.String) -> get
    java.util.Set get(java.lang.Class,java.util.Collection) -> get
    java.util.Set get(java.lang.String,java.util.Collection) -> get
    java.util.Set getAllIncluding(java.lang.Class,java.util.Collection) -> getAllIncluding
    java.util.Set getAll(java.lang.Class,java.lang.String) -> getAll
    java.util.Set getAll(java.lang.Class,java.util.Collection) -> getAll
    java.util.Set keys(java.lang.String) -> keys
    java.util.Set values(java.lang.String) -> values
    boolean put(java.lang.Class,java.lang.String,java.lang.String) -> put
    boolean put(java.lang.String,java.lang.String,java.lang.String) -> put
    void merge(org.reflections.Store) -> merge
    java.util.Collection lambda$put$1(java.lang.String) -> lambda$put$1
    java.util.Map lambda$put$0(java.lang.String) -> lambda$put$0
org.reflections.adapters.JavaReflectionAdapter -> org.reflections.adapters.JavaReflectionAdapter:
    void <init>() -> <init>
    java.util.List getFields(java.lang.Class) -> getFields
    java.util.List getMethods(java.lang.Class) -> getMethods
    java.lang.String getMethodName(java.lang.reflect.Member) -> getMethodName
    java.util.List getParameterNames(java.lang.reflect.Member) -> getParameterNames
    java.util.List getClassAnnotationNames(java.lang.Class) -> getClassAnnotationNames
    java.util.List getFieldAnnotationNames(java.lang.reflect.Field) -> getFieldAnnotationNames
    java.util.List getMethodAnnotationNames(java.lang.reflect.Member) -> getMethodAnnotationNames
    java.util.List getParameterAnnotationNames(java.lang.reflect.Member,int) -> getParameterAnnotationNames
    java.lang.String getReturnTypeName(java.lang.reflect.Member) -> getReturnTypeName
    java.lang.String getFieldName(java.lang.reflect.Field) -> getFieldName
    java.lang.Class getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.Class getOrCreateClassObject(org.reflections.vfs.Vfs$File,java.lang.ClassLoader[]) -> getOrCreateClassObject
    java.lang.String getMethodModifier(java.lang.reflect.Member) -> getMethodModifier
    java.lang.String getMethodKey(java.lang.Class,java.lang.reflect.Member) -> getMethodKey
    java.lang.String getMethodFullKey(java.lang.Class,java.lang.reflect.Member) -> getMethodFullKey
    boolean isPublic(java.lang.Object) -> isPublic
    java.lang.String getClassName(java.lang.Class) -> getClassName
    java.lang.String getSuperclassName(java.lang.Class) -> getSuperclassName
    java.util.List getInterfacesNames(java.lang.Class) -> getInterfacesNames
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.util.List getAnnotationNames(java.lang.annotation.Annotation[]) -> getAnnotationNames
    java.lang.String getName(java.lang.Class) -> getName
    java.lang.String getMethodFullKey(java.lang.Object,java.lang.Object) -> getMethodFullKey
    java.lang.String getMethodKey(java.lang.Object,java.lang.Object) -> getMethodKey
    java.lang.String getMethodModifier(java.lang.Object) -> getMethodModifier
    java.lang.Object getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.String getFieldName(java.lang.Object) -> getFieldName
    java.lang.String getReturnTypeName(java.lang.Object) -> getReturnTypeName
    java.util.List getParameterAnnotationNames(java.lang.Object,int) -> getParameterAnnotationNames
    java.util.List getMethodAnnotationNames(java.lang.Object) -> getMethodAnnotationNames
    java.util.List getFieldAnnotationNames(java.lang.Object) -> getFieldAnnotationNames
    java.util.List getClassAnnotationNames(java.lang.Object) -> getClassAnnotationNames
    java.util.List getParameterNames(java.lang.Object) -> getParameterNames
    java.lang.String getMethodName(java.lang.Object) -> getMethodName
    java.util.List getMethods(java.lang.Object) -> getMethods
    java.util.List getFields(java.lang.Object) -> getFields
    java.util.List getInterfacesNames(java.lang.Object) -> getInterfacesNames
    java.lang.String getSuperclassName(java.lang.Object) -> getSuperclassName
    java.lang.String getClassName(java.lang.Object) -> getClassName
    java.lang.String lambda$getAnnotationNames$0(java.lang.annotation.Annotation) -> lambda$getAnnotationNames$0
org.reflections.adapters.JavassistAdapter -> org.reflections.adapters.JavassistAdapter:
    boolean includeInvisibleTag -> includeInvisibleTag
    void <init>() -> <init>
    java.util.List getFields(javassist.bytecode.ClassFile) -> getFields
    java.util.List getMethods(javassist.bytecode.ClassFile) -> getMethods
    java.lang.String getMethodName(javassist.bytecode.MethodInfo) -> getMethodName
    java.util.List getParameterNames(javassist.bytecode.MethodInfo) -> getParameterNames
    java.util.List getClassAnnotationNames(javassist.bytecode.ClassFile) -> getClassAnnotationNames
    java.util.List getFieldAnnotationNames(javassist.bytecode.FieldInfo) -> getFieldAnnotationNames
    java.util.List getMethodAnnotationNames(javassist.bytecode.MethodInfo) -> getMethodAnnotationNames
    java.util.List getParameterAnnotationNames(javassist.bytecode.MethodInfo,int) -> getParameterAnnotationNames
    java.lang.String getReturnTypeName(javassist.bytecode.MethodInfo) -> getReturnTypeName
    java.lang.String getFieldName(javassist.bytecode.FieldInfo) -> getFieldName
    javassist.bytecode.ClassFile getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.String getMethodModifier(javassist.bytecode.MethodInfo) -> getMethodModifier
    java.lang.String getMethodKey(javassist.bytecode.ClassFile,javassist.bytecode.MethodInfo) -> getMethodKey
    java.lang.String getMethodFullKey(javassist.bytecode.ClassFile,javassist.bytecode.MethodInfo) -> getMethodFullKey
    boolean isPublic(java.lang.Object) -> isPublic
    java.lang.String getClassName(javassist.bytecode.ClassFile) -> getClassName
    java.lang.String getSuperclassName(javassist.bytecode.ClassFile) -> getSuperclassName
    java.util.List getInterfacesNames(javassist.bytecode.ClassFile) -> getInterfacesNames
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.util.List getAnnotationNames(javassist.bytecode.AnnotationsAttribute[]) -> getAnnotationNames
    java.util.List getAnnotationNames(javassist.bytecode.annotation.Annotation[]) -> getAnnotationNames
    java.util.List splitDescriptorToTypeNames(java.lang.String) -> splitDescriptorToTypeNames
    java.lang.String getMethodFullKey(java.lang.Object,java.lang.Object) -> getMethodFullKey
    java.lang.String getMethodKey(java.lang.Object,java.lang.Object) -> getMethodKey
    java.lang.String getMethodModifier(java.lang.Object) -> getMethodModifier
    java.lang.Object getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.String getFieldName(java.lang.Object) -> getFieldName
    java.lang.String getReturnTypeName(java.lang.Object) -> getReturnTypeName
    java.util.List getParameterAnnotationNames(java.lang.Object,int) -> getParameterAnnotationNames
    java.util.List getMethodAnnotationNames(java.lang.Object) -> getMethodAnnotationNames
    java.util.List getFieldAnnotationNames(java.lang.Object) -> getFieldAnnotationNames
    java.util.List getClassAnnotationNames(java.lang.Object) -> getClassAnnotationNames
    java.util.List getParameterNames(java.lang.Object) -> getParameterNames
    java.lang.String getMethodName(java.lang.Object) -> getMethodName
    java.util.List getMethods(java.lang.Object) -> getMethods
    java.util.List getFields(java.lang.Object) -> getFields
    java.util.List getInterfacesNames(java.lang.Object) -> getInterfacesNames
    java.lang.String getSuperclassName(java.lang.Object) -> getSuperclassName
    java.lang.String getClassName(java.lang.Object) -> getClassName
    java.lang.String lambda$splitDescriptorToTypeNames$1(java.lang.String,java.util.List,int) -> lambda$splitDescriptorToTypeNames$1
    java.util.stream.Stream lambda$getAnnotationNames$0(javassist.bytecode.AnnotationsAttribute) -> lambda$getAnnotationNames$0
    void <clinit>() -> <clinit>
org.reflections.adapters.MetadataAdapter -> org.reflections.adapters.MetadataAdapter:
    java.lang.String getClassName(java.lang.Object) -> getClassName
    java.lang.String getSuperclassName(java.lang.Object) -> getSuperclassName
    java.util.List getInterfacesNames(java.lang.Object) -> getInterfacesNames
    java.util.List getFields(java.lang.Object) -> getFields
    java.util.List getMethods(java.lang.Object) -> getMethods
    java.lang.String getMethodName(java.lang.Object) -> getMethodName
    java.util.List getParameterNames(java.lang.Object) -> getParameterNames
    java.util.List getClassAnnotationNames(java.lang.Object) -> getClassAnnotationNames
    java.util.List getFieldAnnotationNames(java.lang.Object) -> getFieldAnnotationNames
    java.util.List getMethodAnnotationNames(java.lang.Object) -> getMethodAnnotationNames
    java.util.List getParameterAnnotationNames(java.lang.Object,int) -> getParameterAnnotationNames
    java.lang.String getReturnTypeName(java.lang.Object) -> getReturnTypeName
    java.lang.String getFieldName(java.lang.Object) -> getFieldName
    java.lang.Object getOrCreateClassObject(org.reflections.vfs.Vfs$File) -> getOrCreateClassObject
    java.lang.String getMethodModifier(java.lang.Object) -> getMethodModifier
    java.lang.String getMethodKey(java.lang.Object,java.lang.Object) -> getMethodKey
    java.lang.String getMethodFullKey(java.lang.Object,java.lang.Object) -> getMethodFullKey
    boolean isPublic(java.lang.Object) -> isPublic
    boolean acceptsInput(java.lang.String) -> acceptsInput
org.reflections.scanners.AbstractScanner -> org.reflections.scanners.AbstractScanner:
    org.reflections.Configuration configuration -> configuration
    java.util.function.Predicate resultFilter -> resultFilter
    void <init>() -> <init>
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.lang.Object scan(org.reflections.vfs.Vfs$File,java.lang.Object,org.reflections.Store) -> scan
    void scan(java.lang.Object,org.reflections.Store) -> scan
    void put(org.reflections.Store,java.lang.String,java.lang.String) -> put
    org.reflections.Configuration getConfiguration() -> getConfiguration
    void setConfiguration(org.reflections.Configuration) -> setConfiguration
    java.util.function.Predicate getResultFilter() -> getResultFilter
    void setResultFilter(java.util.function.Predicate) -> setResultFilter
    org.reflections.scanners.Scanner filterResultsBy(java.util.function.Predicate) -> filterResultsBy
    boolean acceptResult(java.lang.String) -> acceptResult
    org.reflections.adapters.MetadataAdapter getMetadataAdapter() -> getMetadataAdapter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean lambda$new$0(java.lang.String) -> lambda$new$0
org.reflections.scanners.FieldAnnotationsScanner -> org.reflections.scanners.FieldAnnotationsScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.MemberUsageScanner -> org.reflections.scanners.MemberUsageScanner:
    javassist.ClassPool classPool -> classPool
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
    void scanMember(javassist.CtBehavior,org.reflections.Store) -> scanMember
    void put(org.reflections.Store,java.lang.String,int,java.lang.String) -> put
    java.lang.String parameterNames(javassist.bytecode.MethodInfo) -> parameterNames
    javassist.ClassPool getClassPool() -> getClassPool
    void access$000(org.reflections.scanners.MemberUsageScanner,org.reflections.Store,java.lang.String,int,java.lang.String) -> access$000
org.reflections.scanners.MemberUsageScanner$1 -> org.reflections.scanners.MemberUsageScanner$1:
    org.reflections.Store val$store -> val$store
    java.lang.String val$key -> val$key
    org.reflections.scanners.MemberUsageScanner this$0 -> this$0
    void <init>(org.reflections.scanners.MemberUsageScanner,org.reflections.Store,java.lang.String) -> <init>
    void edit(javassist.expr.NewExpr) -> edit
    void edit(javassist.expr.MethodCall) -> edit
    void edit(javassist.expr.ConstructorCall) -> edit
    void edit(javassist.expr.FieldAccess) -> edit
org.reflections.scanners.MethodAnnotationsScanner -> org.reflections.scanners.MethodAnnotationsScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.MethodParameterNamesScanner -> org.reflections.scanners.MethodParameterNamesScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.MethodParameterScanner -> org.reflections.scanners.MethodParameterScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.ResourcesScanner -> org.reflections.scanners.ResourcesScanner:
    void <init>() -> <init>
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.lang.Object scan(org.reflections.vfs.Vfs$File,java.lang.Object,org.reflections.Store) -> scan
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.Scanner -> org.reflections.scanners.Scanner:
    void setConfiguration(org.reflections.Configuration) -> setConfiguration
    org.reflections.scanners.Scanner filterResultsBy(java.util.function.Predicate) -> filterResultsBy
    boolean acceptsInput(java.lang.String) -> acceptsInput
    java.lang.Object scan(org.reflections.vfs.Vfs$File,java.lang.Object,org.reflections.Store) -> scan
    boolean acceptResult(java.lang.String) -> acceptResult
org.reflections.scanners.SubTypesScanner -> org.reflections.scanners.SubTypesScanner:
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.TypeAnnotationsScanner -> org.reflections.scanners.TypeAnnotationsScanner:
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
org.reflections.scanners.TypeElementsScanner -> org.reflections.scanners.TypeElementsScanner:
    boolean includeFields -> includeFields
    boolean includeMethods -> includeMethods
    boolean includeAnnotations -> includeAnnotations
    boolean publicOnly -> publicOnly
    void <init>() -> <init>
    void scan(java.lang.Object,org.reflections.Store) -> scan
    org.reflections.scanners.TypeElementsScanner includeFields() -> includeFields
    org.reflections.scanners.TypeElementsScanner includeFields(boolean) -> includeFields
    org.reflections.scanners.TypeElementsScanner includeMethods() -> includeMethods
    org.reflections.scanners.TypeElementsScanner includeMethods(boolean) -> includeMethods
    org.reflections.scanners.TypeElementsScanner includeAnnotations() -> includeAnnotations
    org.reflections.scanners.TypeElementsScanner includeAnnotations(boolean) -> includeAnnotations
    org.reflections.scanners.TypeElementsScanner publicOnly(boolean) -> publicOnly
    org.reflections.scanners.TypeElementsScanner publicOnly() -> publicOnly
org.reflections.serializers.JavaCodeSerializer -> org.reflections.serializers.JavaCodeSerializer:
    java.lang.String pathSeparator -> pathSeparator
    java.lang.String doubleSeparator -> doubleSeparator
    java.lang.String dotSeparator -> dotSeparator
    java.lang.String arrayDescriptor -> arrayDescriptor
    java.lang.String tokenSeparator -> tokenSeparator
    void <init>() -> <init>
    org.reflections.Reflections read(java.io.InputStream) -> read
    java.io.File save(org.reflections.Reflections,java.lang.String) -> save
    java.lang.String toString(org.reflections.Reflections) -> toString
    java.lang.String getNonDuplicateName(java.lang.String,java.util.List,int) -> getNonDuplicateName
    java.lang.String normalize(java.lang.String) -> normalize
    java.lang.String getNonDuplicateName(java.lang.String,java.util.List) -> getNonDuplicateName
    java.lang.Class resolveClassOf(java.lang.Class) -> resolveClassOf
    java.lang.Class resolveClass(java.lang.Class) -> resolveClass
    java.lang.reflect.Field resolveField(java.lang.Class) -> resolveField
    java.lang.annotation.Annotation resolveAnnotation(java.lang.Class) -> resolveAnnotation
    java.lang.reflect.Method resolveMethod(java.lang.Class) -> resolveMethod
org.reflections.serializers.JsonSerializer -> org.reflections.serializers.JsonSerializer:
    com.google.gson.Gson gson -> gson
    void <init>() -> <init>
    org.reflections.Reflections read(java.io.InputStream) -> read
    java.io.File save(org.reflections.Reflections,java.lang.String) -> save
    java.lang.String toString(org.reflections.Reflections) -> toString
    com.google.gson.Gson getGson() -> getGson
org.reflections.serializers.Serializer -> org.reflections.serializers.Serializer:
    org.reflections.Reflections read(java.io.InputStream) -> read
    java.io.File save(org.reflections.Reflections,java.lang.String) -> save
    java.lang.String toString(org.reflections.Reflections) -> toString
org.reflections.serializers.XmlSerializer -> org.reflections.serializers.XmlSerializer:
    void <init>() -> <init>
    org.reflections.Reflections read(java.io.InputStream) -> read
    java.io.File save(org.reflections.Reflections,java.lang.String) -> save
    java.lang.String toString(org.reflections.Reflections) -> toString
    org.dom4j.Document createDocument(org.reflections.Reflections) -> createDocument
org.reflections.util.ClasspathHelper -> org.reflections.util.ClasspathHelper:
    void <init>() -> <init>
    java.lang.ClassLoader contextClassLoader() -> contextClassLoader
    java.lang.ClassLoader staticClassLoader() -> staticClassLoader
    java.lang.ClassLoader[] classLoaders(java.lang.ClassLoader[]) -> classLoaders
    java.util.Collection forPackage(java.lang.String,java.lang.ClassLoader[]) -> forPackage
    java.util.Collection forResource(java.lang.String,java.lang.ClassLoader[]) -> forResource
    java.net.URL forClass(java.lang.Class,java.lang.ClassLoader[]) -> forClass
    java.util.Collection forClassLoader() -> forClassLoader
    java.util.Collection forClassLoader(java.lang.ClassLoader[]) -> forClassLoader
    java.util.Collection forJavaClassPath() -> forJavaClassPath
    java.util.Collection forWebInfLib(javax.servlet.ServletContext) -> forWebInfLib
    java.net.URL forWebInfClasses(javax.servlet.ServletContext) -> forWebInfClasses
    java.util.Collection forManifest() -> forManifest
    java.util.Collection forManifest(java.net.URL) -> forManifest
    java.util.Collection forManifest(java.lang.Iterable) -> forManifest
    java.net.URL tryToGetValidUrl(java.lang.String,java.lang.String,java.lang.String) -> tryToGetValidUrl
    java.lang.String cleanPath(java.net.URL) -> cleanPath
    java.lang.String resourceName(java.lang.String) -> resourceName
    java.util.Collection distinctUrls(java.util.Collection) -> distinctUrls
org.reflections.util.ConfigurationBuilder -> org.reflections.util.ConfigurationBuilder:
    java.util.Set scanners -> scanners
    java.util.Set urls -> urls
    org.reflections.adapters.MetadataAdapter metadataAdapter -> metadataAdapter
    java.util.function.Predicate inputsFilter -> inputsFilter
    org.reflections.serializers.Serializer serializer -> serializer
    java.util.concurrent.ExecutorService executorService -> executorService
    java.lang.ClassLoader[] classLoaders -> classLoaders
    boolean expandSuperTypes -> expandSuperTypes
    void <init>() -> <init>
    org.reflections.util.ConfigurationBuilder build(java.lang.Object[]) -> build
    org.reflections.util.ConfigurationBuilder forPackages(java.lang.String[]) -> forPackages
    java.util.Set getScanners() -> getScanners
    org.reflections.util.ConfigurationBuilder setScanners(org.reflections.scanners.Scanner[]) -> setScanners
    org.reflections.util.ConfigurationBuilder addScanners(org.reflections.scanners.Scanner[]) -> addScanners
    java.util.Set getUrls() -> getUrls
    org.reflections.util.ConfigurationBuilder setUrls(java.util.Collection) -> setUrls
    org.reflections.util.ConfigurationBuilder setUrls(java.net.URL[]) -> setUrls
    org.reflections.util.ConfigurationBuilder addUrls(java.util.Collection) -> addUrls
    org.reflections.util.ConfigurationBuilder addUrls(java.net.URL[]) -> addUrls
    org.reflections.adapters.MetadataAdapter getMetadataAdapter() -> getMetadataAdapter
    org.reflections.util.ConfigurationBuilder setMetadataAdapter(org.reflections.adapters.MetadataAdapter) -> setMetadataAdapter
    java.util.function.Predicate getInputsFilter() -> getInputsFilter
    void setInputsFilter(java.util.function.Predicate) -> setInputsFilter
    org.reflections.util.ConfigurationBuilder filterInputsBy(java.util.function.Predicate) -> filterInputsBy
    java.util.concurrent.ExecutorService getExecutorService() -> getExecutorService
    org.reflections.util.ConfigurationBuilder setExecutorService(java.util.concurrent.ExecutorService) -> setExecutorService
    org.reflections.util.ConfigurationBuilder useParallelExecutor() -> useParallelExecutor
    org.reflections.util.ConfigurationBuilder useParallelExecutor(int) -> useParallelExecutor
    org.reflections.serializers.Serializer getSerializer() -> getSerializer
    org.reflections.util.ConfigurationBuilder setSerializer(org.reflections.serializers.Serializer) -> setSerializer
    java.lang.ClassLoader[] getClassLoaders() -> getClassLoaders
    boolean shouldExpandSuperTypes() -> shouldExpandSuperTypes
    org.reflections.util.ConfigurationBuilder setExpandSuperTypes(boolean) -> setExpandSuperTypes
    void setClassLoaders(java.lang.ClassLoader[]) -> setClassLoaders
    org.reflections.util.ConfigurationBuilder addClassLoader(java.lang.ClassLoader) -> addClassLoader
    org.reflections.util.ConfigurationBuilder addClassLoaders(java.lang.ClassLoader[]) -> addClassLoaders
    org.reflections.util.ConfigurationBuilder addClassLoaders(java.util.Collection) -> addClassLoaders
    java.lang.ClassLoader[] lambda$addClassLoaders$0(int) -> lambda$addClassLoaders$0
org.reflections.util.ConfigurationBuilder$1 -> org.reflections.util.ConfigurationBuilder$1:
    java.util.concurrent.atomic.AtomicInteger threadNumber -> threadNumber
    org.reflections.util.ConfigurationBuilder this$0 -> this$0
    void <init>(org.reflections.util.ConfigurationBuilder) -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.reflections.util.FilterBuilder -> org.reflections.util.FilterBuilder:
    java.util.List chain -> chain
    void <init>() -> <init>
    void <init>(java.util.Collection) -> <init>
    org.reflections.util.FilterBuilder include(java.lang.String) -> include
    org.reflections.util.FilterBuilder exclude(java.lang.String) -> exclude
    org.reflections.util.FilterBuilder add(java.util.function.Predicate) -> add
    org.reflections.util.FilterBuilder includePackage(java.lang.Class) -> includePackage
    org.reflections.util.FilterBuilder excludePackage(java.lang.Class) -> excludePackage
    org.reflections.util.FilterBuilder includePackage(java.lang.String[]) -> includePackage
    org.reflections.util.FilterBuilder excludePackage(java.lang.String) -> excludePackage
    java.lang.String packageNameRegex(java.lang.Class) -> packageNameRegex
    java.lang.String prefix(java.lang.String) -> prefix
    java.lang.String toString() -> toString
    boolean test(java.lang.String) -> test
    org.reflections.util.FilterBuilder parse(java.lang.String) -> parse
    org.reflections.util.FilterBuilder parsePackages(java.lang.String) -> parsePackages
    boolean test(java.lang.Object) -> test
org.reflections.util.FilterBuilder$Exclude -> org.reflections.util.FilterBuilder$Exclude:
    void <init>(java.lang.String) -> <init>
    boolean test(java.lang.String) -> test
    java.lang.String toString() -> toString
    boolean test(java.lang.Object) -> test
org.reflections.util.FilterBuilder$Include -> org.reflections.util.FilterBuilder$Include:
    void <init>(java.lang.String) -> <init>
    boolean test(java.lang.String) -> test
    java.lang.String toString() -> toString
    boolean test(java.lang.Object) -> test
org.reflections.util.FilterBuilder$Matcher -> org.reflections.util.FilterBuilder$Matcher:
    java.util.regex.Pattern pattern -> pattern
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.reflections.util.Utils -> org.reflections.util.Utils:
    void <init>() -> <init>
    java.lang.String repeat(java.lang.String,int) -> repeat
    boolean isEmpty(java.lang.String) -> isEmpty
    java.io.File prepareFile(java.lang.String) -> prepareFile
    java.lang.reflect.Member getMemberFromDescriptor(java.lang.String,java.lang.ClassLoader[]) -> getMemberFromDescriptor
    java.util.Set getMethodsFromDescriptors(java.lang.Iterable,java.lang.ClassLoader[]) -> getMethodsFromDescriptors
    java.util.Set getConstructorsFromDescriptors(java.lang.Iterable,java.lang.ClassLoader[]) -> getConstructorsFromDescriptors
    java.util.Set getMembersFromDescriptors(java.lang.Iterable,java.lang.ClassLoader[]) -> getMembersFromDescriptors
    java.lang.reflect.Field getFieldFromString(java.lang.String,java.lang.ClassLoader[]) -> getFieldFromString
    void close(java.io.InputStream) -> close
    org.slf4j.Logger findLogger(java.lang.Class) -> findLogger
    boolean isConstructor(java.lang.String) -> isConstructor
    java.lang.String name(java.lang.Class) -> name
    java.util.List names(java.util.Collection) -> names
    java.util.List names(java.lang.Class[]) -> names
    java.lang.String name(java.lang.reflect.Constructor) -> name
    java.lang.String name(java.lang.reflect.Method) -> name
    java.lang.String name(java.lang.reflect.Field) -> name
    java.lang.String index(java.lang.Class) -> index
    java.util.function.Predicate and(java.util.function.Predicate[]) -> and
    java.lang.String join(java.util.Collection,java.lang.String) -> join
    java.util.Set filter(java.util.Collection,java.util.function.Predicate[]) -> filter
    java.util.Set filter(java.util.Collection,java.util.function.Predicate) -> filter
    java.util.Set filter(java.lang.Object[],java.util.function.Predicate[]) -> filter
    boolean lambda$and$3(java.lang.Object) -> lambda$and$3
    java.lang.Class[] lambda$getMemberFromDescriptor$2(int) -> lambda$getMemberFromDescriptor$2
    java.lang.Class lambda$getMemberFromDescriptor$1(java.lang.ClassLoader[],java.lang.String) -> lambda$getMemberFromDescriptor$1
    java.lang.String lambda$repeat$0(java.lang.String,int) -> lambda$repeat$0
org.reflections.vfs.JarInputDir -> org.reflections.vfs.JarInputDir:
    java.net.URL url -> url
    java.util.jar.JarInputStream jarInputStream -> jarInputStream
    long cursor -> cursor
    long nextCursor -> nextCursor
    void <init>(java.net.URL) -> <init>
    java.lang.String getPath() -> getPath
    java.lang.Iterable getFiles() -> getFiles
    void close() -> close
    java.util.Iterator lambda$getFiles$0() -> lambda$getFiles$0
    java.net.URL access$000(org.reflections.vfs.JarInputDir) -> access$000
org.reflections.vfs.JarInputDir$1 -> org.reflections.vfs.JarInputDir$1:
    org.reflections.vfs.Vfs$File entry -> entry
    org.reflections.vfs.JarInputDir this$0 -> this$0
    void <init>(org.reflections.vfs.JarInputDir) -> <init>
    boolean hasNext() -> hasNext
    org.reflections.vfs.Vfs$File next() -> next
    org.reflections.vfs.Vfs$File computeNext() -> computeNext
    java.lang.Object next() -> next
org.reflections.vfs.JarInputFile -> org.reflections.vfs.JarInputFile:
    java.util.zip.ZipEntry entry -> entry
    org.reflections.vfs.JarInputDir jarInputDir -> jarInputDir
    long fromIndex -> fromIndex
    long endIndex -> endIndex
    void <init>(java.util.zip.ZipEntry,org.reflections.vfs.JarInputDir,long,long) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getRelativePath() -> getRelativePath
    java.io.InputStream openInputStream() -> openInputStream
    org.reflections.vfs.JarInputDir access$000(org.reflections.vfs.JarInputFile) -> access$000
    long access$100(org.reflections.vfs.JarInputFile) -> access$100
    long access$200(org.reflections.vfs.JarInputFile) -> access$200
org.reflections.vfs.JarInputFile$1 -> org.reflections.vfs.JarInputFile$1:
    org.reflections.vfs.JarInputFile this$0 -> this$0
    void <init>(org.reflections.vfs.JarInputFile) -> <init>
    int read() -> read
org.reflections.vfs.SystemDir -> org.reflections.vfs.SystemDir:
    java.io.File file -> file
    void <init>(java.io.File) -> <init>
    java.lang.String getPath() -> getPath
    java.lang.Iterable getFiles() -> getFiles
    void close() -> close
    java.lang.String toString() -> toString
    java.util.Iterator lambda$getFiles$2() -> lambda$getFiles$2
    org.reflections.vfs.Vfs$File lambda$null$1(java.nio.file.Path) -> lambda$null$1
    boolean lambda$null$0(java.nio.file.Path) -> lambda$null$0
org.reflections.vfs.SystemFile -> org.reflections.vfs.SystemFile:
    org.reflections.vfs.SystemDir root -> root
    java.io.File file -> file
    void <init>(org.reflections.vfs.SystemDir,java.io.File) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getRelativePath() -> getRelativePath
    java.io.InputStream openInputStream() -> openInputStream
    java.lang.String toString() -> toString
org.reflections.vfs.UrlTypeVFS -> org.reflections.vfs.UrlTypeVFS:
    java.lang.String[] REPLACE_EXTENSION -> REPLACE_EXTENSION
    java.lang.String VFSZIP -> VFSZIP
    java.lang.String VFSFILE -> VFSFILE
    java.util.function.Predicate realFile -> realFile
    void <init>() -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
    java.net.URL adaptURL(java.net.URL) -> adaptURL
    java.net.URL replaceZipSeparators(java.lang.String,java.util.function.Predicate) -> replaceZipSeparators
    int findFirstMatchOfDeployableExtention(java.lang.String,int) -> findFirstMatchOfDeployableExtention
    java.net.URL replaceZipSeparatorStartingFrom(java.lang.String,int) -> replaceZipSeparatorStartingFrom
    boolean lambda$new$0(java.io.File) -> lambda$new$0
    void <clinit>() -> <clinit>
org.reflections.vfs.Vfs -> org.reflections.vfs.Vfs:
    java.util.List defaultUrlTypes -> defaultUrlTypes
    void <init>() -> <init>
    java.util.List getDefaultUrlTypes() -> getDefaultUrlTypes
    void setDefaultURLTypes(java.util.List) -> setDefaultURLTypes
    void addDefaultURLTypes(org.reflections.vfs.Vfs$UrlType) -> addDefaultURLTypes
    org.reflections.vfs.Vfs$Dir fromURL(java.net.URL) -> fromURL
    org.reflections.vfs.Vfs$Dir fromURL(java.net.URL,java.util.List) -> fromURL
    org.reflections.vfs.Vfs$Dir fromURL(java.net.URL,org.reflections.vfs.Vfs$UrlType[]) -> fromURL
    java.lang.Iterable findFiles(java.util.Collection,java.lang.String,java.util.function.Predicate) -> findFiles
    java.lang.Iterable findFiles(java.util.Collection,java.util.function.Predicate) -> findFiles
    java.io.File getFile(java.net.URL) -> getFile
    boolean hasJarFileInPath(java.net.URL) -> hasJarFileInPath
    java.util.Iterator lambda$findFiles$2(java.util.Collection,java.util.function.Predicate) -> lambda$findFiles$2
    java.util.stream.Stream lambda$null$1(java.net.URL) -> lambda$null$1
    boolean lambda$findFiles$0(java.lang.String,java.util.function.Predicate,org.reflections.vfs.Vfs$File) -> lambda$findFiles$0
    boolean access$100(java.net.URL) -> access$100
    void <clinit>() -> <clinit>
org.reflections.vfs.Vfs$1 -> org.reflections.vfs.Vfs$1:
org.reflections.vfs.Vfs$DefaultUrlTypes -> org.reflections.vfs.Vfs$DefaultUrlTypes:
    org.reflections.vfs.Vfs$DefaultUrlTypes jarFile -> jarFile
    org.reflections.vfs.Vfs$DefaultUrlTypes jarUrl -> jarUrl
    org.reflections.vfs.Vfs$DefaultUrlTypes directory -> directory
    org.reflections.vfs.Vfs$DefaultUrlTypes jboss_vfs -> jboss_vfs
    org.reflections.vfs.Vfs$DefaultUrlTypes jboss_vfsfile -> jboss_vfsfile
    org.reflections.vfs.Vfs$DefaultUrlTypes bundle -> bundle
    org.reflections.vfs.Vfs$DefaultUrlTypes jarInputStream -> jarInputStream
    org.reflections.vfs.Vfs$DefaultUrlTypes[] $VALUES -> $VALUES
    org.reflections.vfs.Vfs$DefaultUrlTypes[] values() -> values
    org.reflections.vfs.Vfs$DefaultUrlTypes valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,org.reflections.vfs.Vfs$1) -> <init>
    void <clinit>() -> <clinit>
org.reflections.vfs.Vfs$DefaultUrlTypes$1 -> org.reflections.vfs.Vfs$DefaultUrlTypes$1:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$2 -> org.reflections.vfs.Vfs$DefaultUrlTypes$2:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$3 -> org.reflections.vfs.Vfs$DefaultUrlTypes$3:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$4 -> org.reflections.vfs.Vfs$DefaultUrlTypes$4:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$5 -> org.reflections.vfs.Vfs$DefaultUrlTypes$5:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$6 -> org.reflections.vfs.Vfs$DefaultUrlTypes$6:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$DefaultUrlTypes$7 -> org.reflections.vfs.Vfs$DefaultUrlTypes$7:
    void <init>(java.lang.String,int) -> <init>
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.Vfs$Dir -> org.reflections.vfs.Vfs$Dir:
    java.lang.String getPath() -> getPath
    java.lang.Iterable getFiles() -> getFiles
    void close() -> close
org.reflections.vfs.Vfs$File -> org.reflections.vfs.Vfs$File:
    java.lang.String getName() -> getName
    java.lang.String getRelativePath() -> getRelativePath
    java.io.InputStream openInputStream() -> openInputStream
org.reflections.vfs.Vfs$UrlType -> org.reflections.vfs.Vfs$UrlType:
    boolean matches(java.net.URL) -> matches
    org.reflections.vfs.Vfs$Dir createDir(java.net.URL) -> createDir
org.reflections.vfs.ZipDir -> org.reflections.vfs.ZipDir:
    java.util.zip.ZipFile jarFile -> jarFile
    void <init>(java.util.jar.JarFile) -> <init>
    java.lang.String getPath() -> getPath
    java.lang.Iterable getFiles() -> getFiles
    void close() -> close
    java.lang.String toString() -> toString
    java.util.Iterator lambda$getFiles$2() -> lambda$getFiles$2
    org.reflections.vfs.Vfs$File lambda$null$1(java.util.zip.ZipEntry) -> lambda$null$1
    boolean lambda$null$0(java.util.zip.ZipEntry) -> lambda$null$0
org.reflections.vfs.ZipFile -> org.reflections.vfs.ZipFile:
    org.reflections.vfs.ZipDir root -> root
    java.util.zip.ZipEntry entry -> entry
    void <init>(org.reflections.vfs.ZipDir,java.util.zip.ZipEntry) -> <init>
    java.lang.String getName() -> getName
    java.lang.String getRelativePath() -> getRelativePath
    java.io.InputStream openInputStream() -> openInputStream
    java.lang.String toString() -> toString
