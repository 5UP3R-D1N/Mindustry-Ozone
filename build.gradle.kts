import java.util.*;
import java.text.*;
import java.io.*;
plugins {
    base
    java
    `java-library`
}
repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven ( "https://oss.sonatype.org/content/repositories/snapshots/" )
    maven ( "https://oss.sonatype.org/content/repositories/releases/" )
    maven ("https://jitpack.io")
}

dependencies {
    val atomHash = findProperty("atomHash")
    val mindustryVersion = findProperty("mindustryVersion")
    testImplementation ("junit:junit:4.12")
    compileOnly ("com.github.o7-Fire.Atomic-Library:Atomic:$atomHash")
    compileOnly ("com.github.Anuken.Arc:arc-core:$mindustryVersion"               )
    compileOnly ("com.github.Anuken.Arc:backend-sdl:$mindustryVersion"            )
    compileOnly ("com.github.Anuken.Mindustry:core:$mindustryVersion"             )
    compileOnly ("com.github.javaparser:javaparser-symbol-solver-core:3.16.1"     )
    compileOnly (group= "org.jetbrains", name= "annotations", version=  "20.1.0"   )

}
task("makeJar", type=Jar::class){

}
tasks.withType(Jar::class.java) {
    archiveFileName.set("Ozone.jar")
    archiveClassifier.set("all")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(configurations.getByName("runtimeClasspath").map { if (it.isDirectory) it else zipTree(it) })
}

task("deploy"){
    dependsOn(":Desktop:jar")
}

fun writeManifest(){
    var githubHash = "null"
    var githubBranch = "null"
    var githubRepo = "o7-Fire/Mindustry-Ozone"
    var githubOwner = "null"
    var modsBuilderID = "idk"
    var modsBuilder = "java"
    if(project.hasProperty("gHash"))
        githubHash = project.property("gHash").toString()
    if(project.hasProperty("gBranch"))
        githubBranch = project.property("gBranch").toString()
    if(project.hasProperty("gRepo"))
        githubRepo = project.property("gRepo").toString()
    if(project.hasProperty("gRepoOwner"))
        githubOwner = project.property("gRepoOwner").toString()
    if(project.hasProperty("builderID"))
        modsBuilderID = project.property("builderID").toString()
    modsBuilder =
            if(project.hasProperty("builder"))
                project.property("builder").toString()
            else
                System.getProperty("user.name")
    val atomMeta = File(rootDir, "src/Core/main/resources/Manifest.properties")
    val props = Properties()
    val df = SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ")
    df.timeZone = TimeZone.getTimeZone("UTC")
    try{atomMeta.createNewFile()}catch(ignored : Throwable){}
    if(atomMeta.exists()){
        props.load(FileInputStream(atomMeta))
        props["AtomHash"] = findProperty("atomHash")
        props["MindustryVersion"] = findProperty("mindustryVersion")
        props["GithubHash"] = githubHash
        props["GithubBranch"] = githubBranch
        props["GithubRepo"] = githubRepo
        props["GithubInitializer"] = githubOwner
        props["BuilderID"] = modsBuilderID
        props["ModsBuilder"] = modsBuilder
        props["TimeStamp"] = df.format(Date())
        props["TimeMilis"] = System.currentTimeMillis().toString()
        props.store(atomMeta.writer(), "Autogenerated file. Do modify.")
    }

}