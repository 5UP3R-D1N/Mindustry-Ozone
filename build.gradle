buildscript{
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.0.0'

    }
}

plugins {
    id 'java'
}
apply plugin: 'java-library'

ext {

    MindustryHash = "v105"
    atomHash = "f11d7512eb"


    localAtom = {
        return new File('../Atoms').exists()
    }

    atom = { String name ->
        if (localAtom()) {
            return project(":Atom:$name")
        } else {
            if (name.contains(':')) name = name.split(':').last()
            return "com.github.o7-Fire.Atomic-Library:$name:$atomHash"
        }
    }
}

repositories {
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }

}

dependencies {
    testImplementation 'junit:junit:4.12'
    api atom(":Atomic")
    compileOnly "com.github.Anuken:Mindustry:$MindustryHash"
}
tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}
jar{
    archiveFileName = "${project.archivesBaseName}.jar"
    from{
        configurations.runtimeClasspath.collect{it.isDirectory() ? it : zipTree(it)}
    }
}
task proguard(dependsOn: jar, type: proguard.gradle.ProGuardTask) {
    configuration 'proguard.txt'
    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }
    libraryjars "/dependencies/", jarfilter: '!**.jar', filter: '!module-info.class'

    injars "build/libs/${project.archivesBaseName}.jar"
    outjars "build/libs/${project.archivesBaseName}.out.jar"
}
task copyDependencies(type: Copy) {
    from configurations.runtime
    into 'dependencies'
}
build.dependsOn(copyDependencies)