buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.0.0'
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.1"
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: "com.github.spotbugs"
    spotbugs {
        toolVersion = '4.1.3'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        jcenter()
        flatDir {
            dirs 'libs'
        }
        flatDir {
            dirs 'lib'
        }


    }
    repositories {
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
        flatDir {
            dirs 'libs'
        }
        flatDir {
            dirs 'lib'
        }
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]
        if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
            options.compilerArgs.addAll(['--release', '8'])
        }
    }

    ext {
        sdkVersion = '29'
        sdkRoot = System.getenv("ANDROID_HOME")
        doExec = { cmd ->
            def proc = cmd.execute(null, new File("$buildDir/libs"))
            proc.waitForProcessOutput(System.out, System.err)
        }
    }
}

ext {

    MindustryHash = "v105"
    atomHash = "cfa7716a8e"

    writeProcessors = {
        new File(rootDir, "CodeGen/src/main/resources/META-INF/services/").mkdirs()
        def processorFile = new File(rootDir, "CodeGen/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
        def pluginFile = new File(rootDir, "CodeGen/src/main/resources/META-INF/services/com.sun.source.util.Plugin")
        def processorText = new StringBuilder()
        def pluginText = new StringBuilder()
        def files = new File(rootDir, "CodeGen/src/main/java")
        files.eachFileRecurse(groovy.io.FileType.FILES) { file ->
            if (file.name.endsWith(".java")&& !file.text.contains("abstract class")) {
                if ((file.text.contains(" extends AtomProcessor") || (file.text.contains(" extends AbstractProcessor")))) {
                    processorText.append(file.path.substring(files.path.length() + 1)).append("\n")
                }else if((file.text.contains(" extends AtomPlugin") || (file.text.contains(" implements Plugin")))){
                    pluginText.append(file.path.substring(files.path.length() + 1)).append("\n")
                }

            }
        }
        pluginFile.text =  pluginText.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
        processorFile.text = processorText.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
    }

}

repositories {
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
    flatDir {
        dirs 'libs'
    }
    flatDir {
        dirs 'lib'
    }
}
task preGen {
    writeProcessors()
}

//there is reason why use local jar
dependencies {
    compileJava.dependsOn(preGen)
    testImplementation 'junit:junit:4.12'
    compileOnly files("${project.rootDir}/libs/Atomic.jar")
    compileOnly files("${project.rootDir}/libs/Mindustry.jar")
    compileOnly project(":CodeGen")
    annotationProcessor project(":CodeGen")
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.1'
}
jar {
    archiveFileName = "Ozone.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task deploy(type: Jar) {
    dependsOn ":Android:proguard"
    dependsOn ":Desktop:proguard"

    from { [zipTree("Desktop/build/libs/Ozone-Desktop.jar"), zipTree("Android/build/libs/Ozone-Android.jar")] }

}