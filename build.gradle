import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        //classpath 'com.guardsquare:proguard-gradle:7.0.0'
        //classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.1"
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        jcenter()
        flatDir {
            dirs 'libs'
        }
        flatDir {
            dirs 'lib'
        }


    }
    repositories {
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
        flatDir {
            dirs 'libs'
        }
        flatDir {
            dirs 'lib'
        }
    }


    ext {
        mindustryVersion = findProperty("mindustryVersion")
        atomHash =   findProperty("atomHash")
        githubHash = "null"
        githubBranch = "null"
        githubRepo = "o7-Fire/Mindustry-Ozone"
        githubOwner = "null"
        modsBuilderID = "idk"
        modsBuilder = "java"

        if(project.hasProperty("gHash"))
            githubHash = gHash
        if(project.hasProperty("gBranch"))
            githubBranch = gBranch
        if(project.hasProperty("gRepo"))
            githubRepo = gRepo
        if(project.hasProperty("gRepoOwner"))
            githubOwner = gRepoOwner
        if(project.hasProperty("builderID"))
            modsBuilderID = builderID
        if(project.hasProperty("builder"))
            modsBuilder = builder
        else
            modsBuilder = System.getProperty("user.name")

        def atomMeta = new File(rootDir, "src/main/resources/Manifest.properties")
        def props = new Properties()
        def df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ") // you can change it
        df.setTimeZone(TimeZone.getTimeZone("UTC"))
        try{atomMeta.createNewFile()}catch(ignored){}//what a beautiful catch block
        if(atomMeta.exists()){
            props.load(new FileInputStream(atomMeta))
            props["AtomHash"] = atomHash
            props["MindustryVersion"] = mindustryVersion
            props["GithubHash"] = githubHash
            props["GithubBranch"] = githubBranch
            props["GithubRepo"] = githubRepo
            props["GithubInitializer"] = githubOwner
            props["BuilderID"] = modsBuilderID
            props["ModsBuilder"] = modsBuilder
            props["TimeStamp"] = df.format(new Date())
            props["TimeMilis"] = String.valueOf(System.currentTimeMillis())
            props.store(atomMeta.newWriter(), "Autogenerated file. Do modify.")
        }

    }

    repositories {
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
        flatDir {
            dirs 'libs'
        }
        flatDir {
            dirs 'lib'
        }
    }

    dependencies {

        testImplementation 'junit:junit:4.12'
        compileOnly "com.github.o7-Fire.Atomic-Library:Atomic:$atomHash"
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.Arc:backend-sdl:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        compileOnly 'com.github.javaparser:javaparser-symbol-solver-core:3.16.1'
        compileOnly group: 'org.jetbrains', name: 'annotations', version: '20.1.0'
    }



}
task deploy(type: Jar) {
    dependsOn ":Desktop:jar"
}
jar {
    archiveFileName = "Ozone.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}
task makeJar{
    dependsOn jar
}
