import java.nio.file.Files
import java.nio.file.OpenOption
import java.nio.file.StandardOpenOption
import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

}
apply plugin: 'java'
apply plugin: 'java-library'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

static def getLatestFolder(File fe){
    ArrayList<File> f = new ArrayList<>();
    File[] files = fe.listFiles();
    f.addAll(Arrays.asList(files));
    f.sort(new Comparator<File>() {
        @Override
        public int compare(File o1, File o2) {
            return o1.getAbsolutePath() <=> o2.getAbsolutePath();
        }
    });
    return f.get(f.size() - 1);
}
allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        jcenter()
    }

    ext {

        minApi = '21'
        //automatically detect latest shit
        sdkRoot = System.getenv("ANDROID_HOME")
        sdkD8 = new File(getLatestFolder(new File(sdkRoot, 'build-tools/')), "d8").getAbsolutePath()
        sdkJar = new File(getLatestFolder(new File(sdkRoot, "platforms/")), "android.jar").getAbsolutePath()

        modsBuilder = "javac"
        if (project.hasProperty("builder"))
            modsBuilder = builder
        else
            modsBuilder = System.getProperty("user.name")

        def atomMeta = new File(rootDir, "src/main/resources/Manifest.properties")
        def manifestMeta = new File(rootDir, "Manifest/src/main/resources/Manifest.properties")
        try {
            atomMeta.delete()
            atomMeta.createNewFile()
        }catch(ignored){}
        try {
            manifestMeta.delete()
            manifestMeta.createNewFile()
        }catch(ignored){}

        Date d = new Date();
        Formatter formatter = new Formatter();
        Calendar c = Calendar.getInstance();
        c.setTime(d);
        StringBuilder sb = new StringBuilder();
        sb.append("#Comment here").append("\n")
        sb.append("AtomHash").append("=").append(atomHash).append("\n")
        sb.append("ArcHash").append("=").append(arcHash).append("\n")
        sb.append("MindustryVersion").append("=").append(mindustryVersion).append("\n")
        sb.append("VHash").append("=").append(version).append("\n")
        sb.append("ModsBuilder").append("=").append(modsBuilder).append("\n")
        sb.append("TimeStamp").append("=").append(formatter.format(Locale.UK, "%tl:%tM:%tS %tp %tB %te, %tY", c, c, c, c, c, c, c).toString()).append("\n")
        sb.append("TimeMilis").append("=").append(String.valueOf(System.currentTimeMillis())).append("\n")
        sb.append("ManifestVersion").append("=").append("v2.4").append("\n")
        sb.append("Version.Core").append("=").append(versionCore).append("\n")
        sb.append("Version.Desktop").append("=").append(versionDesktop).append("\n")
        sb.append("Version").append("=").append(versionCore+":"+versionDesktop).append("\n")

        sb.append("Note").append("=").append(Note)
        if(atomMeta.exists()) {
            Files.write(atomMeta.toPath(), sb.toString().getBytes(), StandardOpenOption.WRITE, StandardOpenOption.CREATE);
        }
        if(manifestMeta.exists())
            Files.write(manifestMeta.toPath(), sb.toString().getBytes(), StandardOpenOption.WRITE, StandardOpenOption.CREATE);

        //For every project
        dependencies{
            compileOnly ("com.github.Anuken.Arc:arc-core:$arcHash"){
                because("provided")
            }
            compileOnly ("com.github.Anuken.Arc:backend-sdl:$arcHash"){
                because("provided")
            }
            compileOnly ("com.github.Anuken.Mindustry:core:$mindustryVersion"){
                because("provided")
            }

            compileOnly( group: 'org.jetbrains', name: 'annotations', version: '20.1.0'){
                because("compile")
            }
        }

    }


}
//For core
dependencies {

    implementation ('io.sentry:sentry:4.0.0-alpha.2'){
        exclude group: 'com.google.code.gson', module: "gson"
    }
    implementation ("com.github.o7-Fire.Atomic-Library:Atomic:$atomHash"){
        because("provided")
    }

}
task deploy(type: Jar) {
    dependsOn ":Desktop:jar"//make desktop jar
    dependsOn ":Android:jar"//make android jar
}

jar {
    archiveFileName = "Ozone.jar"
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': 'Premain.InstallerEntryPoint'
        attributes 'SplashScreen-Image': 'gif/loading.gif'
    }
    from(rootDir){
       include "mod.hjson"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    //collect dependencies needed for desugaring
    def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(sdkJar)])
    def dependencies = files.collect{ "--classpath $it.path" }.join(" ")
    def cmd = "${sdkD8} $dependencies --min-api ${minApi} --output ${rootProject.archivesBaseName}-AndroidDex.jar ${rootProject.archivesBaseName}.jar"
    def dir = new File(rootDir, "/build/libs/");
    dir.mkdirs()

    doLast{
        if(new File(sdkD8).exists() && new File(sdkJar).exists()) {
            println(cmd)
            Runtime.getRuntime().exec(cmd, new String[0], dir).waitForProcessOutput(System.out, System.err)
        }
    }
}
tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

task makeJar{
    dependsOn jar
}
