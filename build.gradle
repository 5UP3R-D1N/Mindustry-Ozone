buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.0.0'
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.1"
    }
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: "com.github.spotbugs"
    spotbugs {
        toolVersion = '4.1.3'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        jcenter()
        flatDir {
            dirs 'libs'
        }
        flatDir {
            dirs 'lib'
        }


    }
    repositories {
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
        flatDir {
            dirs 'libs'
        }
        flatDir {
            dirs 'lib'
        }
    }


    ext {

        mindustryVersion = "v109"
        atomHash = "5bf36d2013"

        def atomMeta = new File(rootDir, "src/main/resources/Manifest.properties")
        def props = new Properties()
        try{atomMeta.createNewFile()}catch(ignored){}//what a beautiful catch block
        if(atomMeta.exists()){
            props.load(new FileInputStream(atomMeta))
            props["AtomHash"] = atomHash
            props.store(atomMeta.newWriter(), "Autogenerated file. Do modify.")
        }

        writeProcessors = {
            new File(rootDir, "CodeGen/src/main/resources/META-INF/services/").mkdirs()
            def processorFile = new File(rootDir, "CodeGen/src/main/resources/META-INF/services/javax.annotation.processing.Processor")
            def pluginFile = new File(rootDir, "CodeGen/src/main/resources/META-INF/services/com.sun.source.util.Plugin")
            def processorText = new StringBuilder()
            def pluginText = new StringBuilder()
            def files = new File(rootDir, "CodeGen/src/main/java")
            files.eachFileRecurse(groovy.io.FileType.FILES) { file ->
                if (file.name.endsWith(".java") && !file.text.contains("abstract class")) {
                    if ((file.text.contains(" extends AtomProcessor") || (file.text.contains(" extends AbstractProcessor")))) {
                        processorText.append(file.path.substring(files.path.length() + 1)).append("\n")
                    } else if ((file.text.contains(" extends AtomPlugin") || (file.text.contains(" implements Plugin")))) {
                        pluginText.append(file.path.substring(files.path.length() + 1)).append("\n")
                    }

                }
            }
            pluginFile.text = pluginText.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
            processorFile.text = processorText.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
        }

    }

    repositories {
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
        flatDir {
            dirs 'libs'
        }
        flatDir {
            dirs 'lib'
        }
    }
    task preGen {
        writeProcessors()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]
        if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
            options.compilerArgs.addAll(['--release', '8'])
        }
    }
//there is reason why use local jar
    dependencies {
        compileJava.dependsOn(preGen)
        testImplementation 'junit:junit:4.12'
        compileOnly "com.github.o7-Fire.Atomic-Library:Atomic:$atomHash"
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly"com.github.Anuken.Arc:backend-sdl:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        //compileOnly files("${project.rootDir}/libs/Atomic.jar")
        //compileOnly files("${project.rootDir}/libs/Mindustry.jar")
        //compileOnly project(":CodeGen")
        //annotationProcessor project(":CodeGen")
        //annotationProcessor project(":AtomicPlugin")
        //annotationProcessor files("${project.rootDir}/lib/Atomic-Plugin.jar")
        compileOnly 'com.github.javaparser:javaparser-symbol-solver-core:3.16.1'
        spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.1'
    }


    task deploy(type: Jar) {
        dependsOn ":Android:jarAndroid"
        dependsOn ":Desktop:proguard"

        from { [zipTree("Desktop/build/libs/Ozone-Desktop.jar"), zipTree("Android/build/libs/Ozone-Android.jar")] }

    }
}
jar {
    archiveFileName = "Ozone.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
task gay{
    dependsOn jar
}