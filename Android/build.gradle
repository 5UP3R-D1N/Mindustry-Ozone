apply plugin: 'java'
ext {
    sdkRoot = System.getenv("ANDROID_HOME")
    if(sdkRoot == null)return
    sdkRoot = new File(sdkRoot).absolutePath
    sdkPlatform = sdkRoot+'/platforms/'
    sdkD8 = sdkRoot+'/build-tools/'
    try{
        int max = 0;
        String ver = "";
        for(File f : new File(sdkPlatform).listFiles()){
            String s = f.name;
            int i = Integer.parseInt(s.substring(s.lastIndexOf("-") + 1))
            if(i > max){
                max = i;
                ver = s;
            }
        }
        sdkPlatform = new File(sdkPlatform + ver).absolutePath

    }catch(ignored){}
    try{
        int max = 0;
        String ver = "";
        for(File f : new File(sdkD8).listFiles()){
            String s = f.name;
            int i = Integer.parseInt(s.substring(0, s.indexOf('.')));
            if(i > max){
                max = i;
                ver = s;
            }
        }
        sdkD8 = new File(sdkD8 + ver + "/d8").absolutePath;

    }catch(ignored){}

    //if(new File(sdkRoot+'/build-tools/30.0.2/d8').exists()) {
    //    sdkD8 = new File(sdkRoot+'/build-tools/30.0.2/d8').getAbsolutePath()
    //    sdkPlatform = new File("${sdkRoot}/platforms/30.0.2").getAbsolutePath()
    //}
    sdkJar = sdkPlatform + "/android.jar"
    println "Android SDK: $sdkRoot"
    println "Android SDK Exists: true"
    println "Android.jar: $sdkJar"
    println "Android.jar Exists: " + new File(sdkJar).exists()
    println "SDK D8: $sdkD8"
    println "SDK D8 Exists: " + new File(sdkD8).exists()
    doExec = { cmd ->
        println "Executing: \"" + cmd + "\""
        println ""
        def proc = cmd.execute()
        def bout = new StringBuffer()
        proc.waitForProcessOutput(bout, bout)
        println "```\n" + bout.toString() + "\n```"
    }
}
//heck loading Atomic library is complicated in android
dependencies {
    compileOnly fileTree(dir: "libs", include: ["*.jar"])
    testImplementation 'junit:junit:4.12'
    compileOnly files("$sdkJar")
    implementation rootProject
    //compileOnly files("${project.rootDir}/libs/Atomic.jar")
    //compileOnly files("${project.rootDir}/libs/Mindustry.jar")

}

jar {
    dependsOn ":gay"
    archiveFileName = "Ozone.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

task proguard(dependsOn: jar, type: proguard.gradle.ProGuardTask) {
    printmapping "Ozone-Mapping-Android.map"
    keep 'class !Ozone.** { *; }'
    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        //libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        //libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }
    HashMap<String, String> s = new HashMap<>()
    for(String e : configurations.runtimeClasspath.asList()) {
        s.put(e,e)
    }
    for(String e : configurations.compileClasspath.asList()) {
        s.put(e,e)
    }
    for(Map.Entry<String,String> e : s.entrySet()){
        println e.key
        libraryjars e.key
    }
    dontwarn("java.**")//bruh

    //libraryjars "${project.rootDir}/libs"
    injars "$buildDir/libs/Ozone.jar"
    outjars "$buildDir/libs/Ozone-Android.jar"
}
//Android jar dexxed
task jarAndroid(dependsOn: proguard) {
    doLast {
        try {
            //collect dependencies needed for desugaring
            def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File("$sdkJar")])
            def dependencies = files.collect { "--classpath $it.path" }.join(" ")
            println sdkD8
            //dex and desugar files - this requires d8 in your PATH
            def targetJar = new File("$buildDir/libs/Ozone-Android.jar").getAbsolutePath()
            targetJar = "'" + targetJar + "'"
            doExec("${sdkD8} $dependencies --min-api 14 $targetJar")
        }catch(ignored){}
    }
}