/*
 * Copyright 2021 Itzbenz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'java-library'
sourceCompatibility = "1.8"
targetCompatibility = "1.8"
ext {
    minApi = '21'
    //automatically detect latest shit
    sdkRoot = System.getenv("ANDROID_HOME")
    sdkD8 = new File(getLatestFolder(new File(sdkRoot, 'build-tools/')), "d8").getAbsolutePath()
    sdkJar = new File(getLatestFolder(new File(sdkRoot, "platforms/")), "android.jar").getAbsolutePath()

    doExec = { cmd ->
        def proc = cmd.execute(null, new File(rootDir, "/build/libs/"))
        proc.waitForProcessOutput(System.out, System.err)
    }
    if(new File(sdkJar).exists())
        println(sdkJar)
    if(new File(sdkD8).exists())
        println(sdkD8)
}

static def getLatestFolder(File fe){
    ArrayList<File> f = new ArrayList<>();
    File[] files = fe.listFiles();
    f.addAll(Arrays.asList(files));
    f.sort(new Comparator<File>() {
        @Override
        public int compare(File o1, File o2) {
            return o1.getAbsolutePath() <=> o2.getAbsolutePath();
        }
    });
    return f.get(f.size() - 1);
}
dependencies {
    def sdkFile = new File(sdkJar)
    if(sdkFile.exists()) compileOnly files(sdkFile.absolutePath)
}
jar{
    dependsOn ":makeJar"
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    new File(sdkD8).setExecutable(true, false);
    def dir = new File(rootDir, "/build/libs/");
    dir.mkdirs();
    archiveFileName = "Ozone-Android.jar"
        //collect dependencies needed for desugaring
        def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(sdkJar)])
        def dependencies = files.collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
    def cmd = "${sdkD8} $dependencies --min-api ${minApi} --output ${rootProject.archivesBaseName}-AndroidDex.jar ${rootProject.archivesBaseName}.jar"
    println(cmd)
    Runtime.getRuntime().exec(cmd, new String[0], dir).waitForProcessOutput(System.out, System.err)

    //doExec(sdkD8 + " $dependencies --min-api $minApi --output ${rootProject.archivesBaseName}-AndroidDex.jar ${rootProject.archivesBaseName}.jar")
    from(){
        zipTree(new File(rootDir, "/build/libs/${rootProject.archivesBaseName}-AndroidDex.jar"))
    }
    from(rootDir){
        include "mod.hjson"
    }
    from(){
        new File(rootDir, "src/main/resources/")
    }
    from(){
        new File(rootDir, "Android/src/main/resources/")
    }
}
